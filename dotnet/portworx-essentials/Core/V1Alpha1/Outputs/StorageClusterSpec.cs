// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Core.V1Alpha1
{

    [OutputType]
    public sealed class StorageClusterSpec
    {
        /// <summary>
        /// Contains spec of autopilot component for storage driver.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1Alpha1.StorageClusterSpecAutopilot Autopilot;
        /// <summary>
        /// Details of storage used in cloud environment.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1Alpha1.StorageClusterSpecCloudStorage CloudStorage;
        /// <summary>
        /// Custom container image registry server that will be used instead of index.docker.io to download Docker images. This may include the repository as well. (Example: myregistry.net:5443 or myregistry.com/myrepository)
        /// </summary>
        public readonly string CustomImageRegistry;
        /// <summary>
        /// Delete strategy to uninstall and wipe the storage cluster.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1Alpha1.StorageClusterSpecDeleteStrategy DeleteStrategy;
        /// <summary>
        /// List of environment variables used by the driver. This is an array of Kubernetes EnvVar where the value can be given directly or from a source like field, config map or secret.
        /// </summary>
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Core.V1Alpha1.StorageClusterSpecEnv> Env;
        /// <summary>
        /// This is a map of feature names to string values.
        /// </summary>
        public readonly ImmutableDictionary<string, object> FeatureGates;
        /// <summary>
        /// Docker image of the storage driver.
        /// </summary>
        public readonly string Image;
        /// <summary>
        /// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always.
        /// </summary>
        public readonly string ImagePullPolicy;
        /// <summary>
        /// Image pull secret is a reference to secret in the same namespace as the StorageCluster. It is used for pulling all images used by the StorageCluster.
        /// </summary>
        public readonly string ImagePullSecret;
        /// <summary>
        /// Details of KVDB that the storage driver will use.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1Alpha1.StorageClusterSpecKvdb Kvdb;
        /// <summary>
        /// Contains monitoring configuration for the storage cluster.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1Alpha1.StorageClusterSpecMonitoring Monitoring;
        /// <summary>
        /// Contains network information that is needed by the storage driver.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1Alpha1.StorageClusterSpecNetwork Network;
        /// <summary>
        /// Node level configurations that will override the configuration at cluster level. These configurations can be for individual nodes or can be grouped to override configuration of multiple nodes based on label selectors.
        /// </summary>
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Core.V1Alpha1.StorageClusterSpecNodes> Nodes;
        /// <summary>
        /// Describes placement configuration for the storage cluster pods.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1Alpha1.StorageClusterSpecPlacement Placement;
        /// <summary>
        /// The number of old history to retain to allow rollback. This is a pointer to distinguish between an explicit zero and not specified. Defaults to 10.
        /// </summary>
        public readonly int RevisionHistoryLimit;
        /// <summary>
        /// This is map of any runtime options that need to be sent to the storage driver. The value is a string.
        /// </summary>
        public readonly ImmutableDictionary<string, object> RuntimeOptions;
        /// <summary>
        /// Secrets provider is the name of secret provider that driver will connect to.
        /// </summary>
        public readonly string SecretsProvider;
        /// <summary>
        /// Start port is the starting port in the range of ports used by the cluster.
        /// </summary>
        public readonly int StartPort;
        /// <summary>
        /// Details of the storage used by the storage driver.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1Alpha1.StorageClusterSpecStorage Storage;
        /// <summary>
        /// Contains STORK related spec.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1Alpha1.StorageClusterSpecStork Stork;
        /// <summary>
        /// An update strategy to replace existing StorageCluster pods with new pods.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1Alpha1.StorageClusterSpecUpdateStrategy UpdateStrategy;
        /// <summary>
        /// Contains spec of a user interface for the storage driver.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Core.V1Alpha1.StorageClusterSpecUserInterface UserInterface;
        /// <summary>
        /// Version of the storage driver. This field is read-only.
        /// </summary>
        public readonly string Version;

        [OutputConstructor]
        private StorageClusterSpec(
            Pulumi.Kubernetes.Types.Outputs.Core.V1Alpha1.StorageClusterSpecAutopilot autopilot,

            Pulumi.Kubernetes.Types.Outputs.Core.V1Alpha1.StorageClusterSpecCloudStorage cloudStorage,

            string customImageRegistry,

            Pulumi.Kubernetes.Types.Outputs.Core.V1Alpha1.StorageClusterSpecDeleteStrategy deleteStrategy,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Core.V1Alpha1.StorageClusterSpecEnv> env,

            ImmutableDictionary<string, object> featureGates,

            string image,

            string imagePullPolicy,

            string imagePullSecret,

            Pulumi.Kubernetes.Types.Outputs.Core.V1Alpha1.StorageClusterSpecKvdb kvdb,

            Pulumi.Kubernetes.Types.Outputs.Core.V1Alpha1.StorageClusterSpecMonitoring monitoring,

            Pulumi.Kubernetes.Types.Outputs.Core.V1Alpha1.StorageClusterSpecNetwork network,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Core.V1Alpha1.StorageClusterSpecNodes> nodes,

            Pulumi.Kubernetes.Types.Outputs.Core.V1Alpha1.StorageClusterSpecPlacement placement,

            int revisionHistoryLimit,

            ImmutableDictionary<string, object> runtimeOptions,

            string secretsProvider,

            int startPort,

            Pulumi.Kubernetes.Types.Outputs.Core.V1Alpha1.StorageClusterSpecStorage storage,

            Pulumi.Kubernetes.Types.Outputs.Core.V1Alpha1.StorageClusterSpecStork stork,

            Pulumi.Kubernetes.Types.Outputs.Core.V1Alpha1.StorageClusterSpecUpdateStrategy updateStrategy,

            Pulumi.Kubernetes.Types.Outputs.Core.V1Alpha1.StorageClusterSpecUserInterface userInterface,

            string version)
        {
            Autopilot = autopilot;
            CloudStorage = cloudStorage;
            CustomImageRegistry = customImageRegistry;
            DeleteStrategy = deleteStrategy;
            Env = env;
            FeatureGates = featureGates;
            Image = image;
            ImagePullPolicy = imagePullPolicy;
            ImagePullSecret = imagePullSecret;
            Kvdb = kvdb;
            Monitoring = monitoring;
            Network = network;
            Nodes = nodes;
            Placement = placement;
            RevisionHistoryLimit = revisionHistoryLimit;
            RuntimeOptions = runtimeOptions;
            SecretsProvider = secretsProvider;
            StartPort = startPort;
            Storage = storage;
            Stork = stork;
            UpdateStrategy = updateStrategy;
            UserInterface = userInterface;
            Version = version;
        }
    }
}

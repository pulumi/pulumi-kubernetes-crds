// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Inputs.Org.V1
{

    /// <summary>
    /// Configuration settings specific to Che installations made on upstream Kubernetes.
    /// </summary>
    public class CheClusterSpecK8sArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Ingress class that will define the which controler will manage ingresses. Defaults to `nginx`. NB: This drives the `is kubernetes.io/ingress.class` annotation on Che-related ingresses.
        /// </summary>
        [Input("ingressClass")]
        public Input<string>? IngressClass { get; set; }

        /// <summary>
        /// Global ingress domain for a K8S cluster. This MUST be explicitly specified: there are no defaults.
        /// </summary>
        [Input("ingressDomain")]
        public Input<string>? IngressDomain { get; set; }

        /// <summary>
        /// Strategy for ingress creation. This can be `multi-host` (host is explicitly provided in ingress), `single-host` (host is provided, path-based rules) and `default-host.*`(no host is provided, path-based rules). Defaults to `"multi-host`
        /// </summary>
        [Input("ingressStrategy")]
        public Input<string>? IngressStrategy { get; set; }

        /// <summary>
        /// FSGroup the Che pod and Workspace pods containers should run in. Defaults to `1724`.
        /// </summary>
        [Input("securityContextFsGroup")]
        public Input<string>? SecurityContextFsGroup { get; set; }

        /// <summary>
        /// ID of the user the Che pod and Workspace pods containers should run as. Default to `1724`.
        /// </summary>
        [Input("securityContextRunAsUser")]
        public Input<string>? SecurityContextRunAsUser { get; set; }

        /// <summary>
        /// Name of a secret that will be used to setup ingress TLS termination if TLS is enabled. See also the `tlsSupport` field.
        /// </summary>
        [Input("tlsSecretName")]
        public Input<string>? TlsSecretName { get; set; }

        public CheClusterSpecK8sArgs()
        {
        }
    }
}

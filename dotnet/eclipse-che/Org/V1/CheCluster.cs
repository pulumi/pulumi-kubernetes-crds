// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Crds.Org.V1
{
    public partial class CheCluster : KubernetesResource
    {
        [Output("apiVersion")]
        public Output<string> ApiVersion { get; private set; } = null!;

        [Output("kind")]
        public Output<string> Kind { get; private set; } = null!;

        [Output("metadata")]
        public Output<Pulumi.Kubernetes.Types.Outputs.Meta.V1.ObjectMeta> Metadata { get; private set; } = null!;

        /// <summary>
        /// Desired configuration of the Che installation. Based on these settings, the operator automatically creates and maintains several config maps that will contain the appropriate environment variables the various components of the Che installation. These generated config maps should NOT be updated manually.
        /// </summary>
        [Output("spec")]
        public Output<Pulumi.Kubernetes.Types.Outputs.Org.V1.CheClusterSpec> Spec { get; private set; } = null!;

        /// <summary>
        /// CheClusterStatus defines the observed state of Che installation
        /// </summary>
        [Output("status")]
        public Output<Pulumi.Kubernetes.Types.Outputs.Org.V1.CheClusterStatus> Status { get; private set; } = null!;


        /// <summary>
        /// Create a CheCluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CheCluster(string name, Pulumi.Kubernetes.Types.Inputs.Org.V1.CheClusterArgs? args = null, CustomResourceOptions? options = null)
            : base("kubernetes:org.eclipse.che/v1:CheCluster", name, MakeArgs(args), MakeResourceOptions(options, ""))
        {
        }
        internal CheCluster(string name, ImmutableDictionary<string, object?> dictionary, CustomResourceOptions? options = null)
            : base("kubernetes:org.eclipse.che/v1:CheCluster", name, new DictionaryResourceArgs(dictionary), MakeResourceOptions(options, ""))
        {
        }

        private CheCluster(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("kubernetes:org.eclipse.che/v1:CheCluster", name, null, MakeResourceOptions(options, id))
        {
        }

        private static Pulumi.Kubernetes.Types.Inputs.Org.V1.CheClusterArgs? MakeArgs(Pulumi.Kubernetes.Types.Inputs.Org.V1.CheClusterArgs? args)
        {
            args ??= new Pulumi.Kubernetes.Types.Inputs.Org.V1.CheClusterArgs();
            args.ApiVersion = "org.eclipse.che/v1";
            args.Kind = "CheCluster";
            return args;
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CheCluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CheCluster Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new CheCluster(name, id, options);
        }
    }
}
namespace Pulumi.Kubernetes.Types.Inputs.Org.V1
{

    public class CheClusterArgs : Pulumi.ResourceArgs
    {
        [Input("apiVersion")]
        public Input<string>? ApiVersion { get; set; }

        [Input("kind")]
        public Input<string>? Kind { get; set; }

        [Input("metadata")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Meta.V1.ObjectMetaArgs>? Metadata { get; set; }

        /// <summary>
        /// Desired configuration of the Che installation. Based on these settings, the operator automatically creates and maintains several config maps that will contain the appropriate environment variables the various components of the Che installation. These generated config maps should NOT be updated manually.
        /// </summary>
        [Input("spec")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Org.V1.CheClusterSpecArgs>? Spec { get; set; }

        /// <summary>
        /// CheClusterStatus defines the observed state of Che installation
        /// </summary>
        [Input("status")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Org.V1.CheClusterStatusArgs>? Status { get; set; }

        public CheClusterArgs()
        {
        }
    }
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Org.V1
{

    [OutputType]
    public sealed class CheClusterSpecServer
    {
        /// <summary>
        /// Optional hostname (or url) to an alternate container registry to pull images from. This value overrides the container registry hostname defined in all the default container images involved in a Che deployment. This is particularly useful to install Che in an air-gapped environment.
        /// </summary>
        public readonly string AirGapContainerRegistryHostname;
        /// <summary>
        /// Optional repository name of an alternate container registry to pull images from. This value overrides the container registry organization defined in all the default container images involved in a Che deployment. This is particularly useful to install Che in an air-gapped environment.
        /// </summary>
        public readonly string AirGapContainerRegistryOrganization;
        /// <summary>
        /// Defines if a user is able to specify Kubernetes namespace (or OpenShift project) different from the default. It's NOT RECOMMENDED to configured true without OAuth configured. This property is also used by the OpenShift infra.
        /// </summary>
        public readonly bool AllowUserDefinedWorkspaceNamespaces;
        /// <summary>
        /// Enables the debug mode for Che server. Defaults to `false`.
        /// </summary>
        public readonly string CheDebug;
        /// <summary>
        /// Flavor of the installation. This is either `che` for upstream Che installations, or `codeready` for CodeReady Workspaces installation. In most cases the default value should not be overridden.
        /// </summary>
        public readonly string CheFlavor;
        /// <summary>
        /// Public hostname of the installed Che server. If value is omitted then it will be automatically set by the operator. (see the `cheHostTLSSecret` field).
        /// </summary>
        public readonly string CheHost;
        /// <summary>
        /// Name of a secret containing certificates to secure ingress/route for the custom hostname of the installed Che server. (see the `cheHost` field).
        /// </summary>
        public readonly string CheHostTLSSecret;
        /// <summary>
        /// Overrides the container image used in Che deployment. This does NOT include the container image tag. Omit it or leave it empty to use the defaut container image provided by the operator.
        /// </summary>
        public readonly string CheImage;
        /// <summary>
        /// Overrides the image pull policy used in Che deployment. Default value is `Always` for `nightly` or `latest` images, and `IfNotPresent` in other cases.
        /// </summary>
        public readonly string CheImagePullPolicy;
        /// <summary>
        /// Overrides the tag of the container image used in Che deployment. Omit it or leave it empty to use the defaut image tag provided by the operator.
        /// </summary>
        public readonly string CheImageTag;
        /// <summary>
        /// Log level for the Che server: `INFO` or `DEBUG`. Defaults to `INFO`.
        /// </summary>
        public readonly string CheLogLevel;
        /// <summary>
        /// Custom cluster role bound to the user for the Che workspaces. The default roles are used if this is omitted or left blank.
        /// </summary>
        public readonly string CheWorkspaceClusterRole;
        /// <summary>
        /// Map of additional environment variables that will be applied in the generated `che` config map to be used by the Che server, in addition to the values already generated from other fields of the `CheCluster` custom resource (CR). If `customCheProperties` contains a property that would be normally generated in `che` config map from other CR fields, then the value defined in the `customCheProperties` will be used instead.
        /// </summary>
        public readonly ImmutableDictionary<string, string> CustomCheProperties;
        /// <summary>
        /// Overrides the container image used in the Devfile registry deployment. This includes the image tag. Omit it or leave it empty to use the defaut container image provided by the operator.
        /// </summary>
        public readonly string DevfileRegistryImage;
        /// <summary>
        /// Overrides the memory limit used in the Devfile registry deployment. Defaults to 256Mi.
        /// </summary>
        public readonly string DevfileRegistryMemoryLimit;
        /// <summary>
        /// Overrides the memory request used in the Devfile registry deployment. Defaults to 16Mi.
        /// </summary>
        public readonly string DevfileRegistryMemoryRequest;
        /// <summary>
        /// Overrides the image pull policy used in the Devfile registry deployment. Default value is `Always` for `nightly` or `latest` images, and `IfNotPresent` in other cases.
        /// </summary>
        public readonly string DevfileRegistryPullPolicy;
        /// <summary>
        /// Public URL of the Devfile registry, that serves sample, ready-to-use devfiles. You should set it ONLY if you use an external devfile registry (see the `externalDevfileRegistry` field). By default this will be automatically calculated by the operator.
        /// </summary>
        public readonly string DevfileRegistryUrl;
        /// <summary>
        /// Instructs the operator on whether or not to deploy a dedicated Devfile registry server. By default a dedicated devfile registry server is started. But if `externalDevfileRegistry` is `true`, then no such dedicated server will be started by the operator and you will have to manually set the `devfileRegistryUrl` field
        /// </summary>
        public readonly bool ExternalDevfileRegistry;
        /// <summary>
        /// Instructs the operator on whether or not to deploy a dedicated Plugin registry server. By default a dedicated plugin registry server is started. But if `externalPluginRegistry` is `true`, then no such dedicated server will be started by the operator and you will have to manually set the `pluginRegistryUrl` field.
        /// </summary>
        public readonly bool ExternalPluginRegistry;
        /// <summary>
        /// If enabled, then the certificate from `che-git-self-signed-cert` config map will be propagated to the Che components and provide particular configuration for Git.
        /// </summary>
        public readonly bool GitSelfSignedCert;
        /// <summary>
        /// List of hosts that should not use the configured proxy. Use `|`` as delimiter, eg `localhost|my.host.com|123.42.12.32` Only use when configuring a proxy is required. Operator respects OpenShift cluster wide proxy configuration and no additional configuration is required, but defining `nonProxyHosts` in a custom resource leads to merging non proxy hosts lists from the cluster proxy configuration and ones defined in the custom resources. (see the doc https://docs.openshift.com/container-platform/4.4/networking/enable-cluster-wide-proxy.html) (see also the `proxyURL` fields).
        /// </summary>
        public readonly string NonProxyHosts;
        /// <summary>
        /// Overrides the container image used in the Plugin registry deployment. This includes the image tag. Omit it or leave it empty to use the defaut container image provided by the operator.
        /// </summary>
        public readonly string PluginRegistryImage;
        /// <summary>
        /// Overrides the memory limit used in the Plugin registry deployment. Defaults to 256Mi.
        /// </summary>
        public readonly string PluginRegistryMemoryLimit;
        /// <summary>
        /// Overrides the memory request used in the Plugin registry deployment. Defaults to 16Mi.
        /// </summary>
        public readonly string PluginRegistryMemoryRequest;
        /// <summary>
        /// Overrides the image pull policy used in the Plugin registry deployment. Default value is `Always` for `nightly` or `latest` images, and `IfNotPresent` in other cases.
        /// </summary>
        public readonly string PluginRegistryPullPolicy;
        /// <summary>
        /// Public URL of the Plugin registry, that serves sample ready-to-use devfiles. You should set it ONLY if you use an external devfile registry (see the `externalPluginRegistry` field). By default this will be automatically calculated by the operator.
        /// </summary>
        public readonly string PluginRegistryUrl;
        /// <summary>
        /// Password of the proxy server Only use when proxy configuration is required (see also the `proxyURL`, `proxyUser` and `proxySecret` fields).
        /// </summary>
        public readonly string ProxyPassword;
        /// <summary>
        /// Port of the proxy server. Only use when configuring a proxy is required. (see also the `proxyURL` and `nonProxyHosts` fields).
        /// </summary>
        public readonly string ProxyPort;
        /// <summary>
        /// The secret that contains `user` and `password` for a proxy server. If the secret is defined then `proxyUser` and `proxyPassword` are ignored
        /// </summary>
        public readonly string ProxySecret;
        /// <summary>
        /// URL (protocol+hostname) of the proxy server. This drives the appropriate changes in the `JAVA_OPTS` and `https(s)_proxy` variables in the Che server and workspaces containers. Only use when configuring a proxy is required. Operator respects OpenShift cluster wide proxy configuration and no additional configuration is required, but defining `proxyUrl` in a custom resource leads to overrides the cluster proxy configuration with fields `proxyUrl`, `proxyPort`, `proxyUser` and `proxyPassword` from the custom resource. (see the doc https://docs.openshift.com/container-platform/4.4/networking/enable-cluster-wide-proxy.html) (see also the `proxyPort` and `nonProxyHosts` fields).
        /// </summary>
        public readonly string ProxyURL;
        /// <summary>
        /// User name of the proxy server. Only use when configuring a proxy is required (see also the `proxyURL`, `proxyPassword` and `proxySecret` fields).
        /// </summary>
        public readonly string ProxyUser;
        /// <summary>
        /// Deprecated. The value of this flag is ignored. Che operator will automatically detect if router certificate is self-signed. If so it will be propagated to Che server and some other components.
        /// </summary>
        public readonly bool SelfSignedCert;
        /// <summary>
        /// Overrides the memory limit used in the Che server deployment. Defaults to 1Gi.
        /// </summary>
        public readonly string ServerMemoryLimit;
        /// <summary>
        /// Overrides the memory request used in the Che server deployment. Defaults to 512Mi.
        /// </summary>
        public readonly string ServerMemoryRequest;
        /// <summary>
        /// Name of the config-map with public certificates to add to Java trust store of the Che server. This is usually required when adding the OpenShift OAuth provider which has https endpoint signed with self-signed cert. So, Che server must be aware of its CA cert to be able to request it. This is disabled by default.
        /// </summary>
        public readonly string ServerTrustStoreConfigMapName;
        /// <summary>
        /// Deprecated. Instructs the operator to deploy Che in TLS mode. This is enabled by default. Disabling TLS may cause malfunction of some Che components.
        /// </summary>
        public readonly bool TlsSupport;
        /// <summary>
        /// Defines Kubernetes default namespace in which user's workspaces are created if user does not override it. It's possible to use &lt;username&gt;, &lt;userid&gt; and &lt;workspaceid&gt; placeholders (e.g.: che-workspace-&lt;username&gt;). In that case, new namespace will be created for each user (or workspace). Is used by OpenShift infra as well to specify Project
        /// </summary>
        public readonly string WorkspaceNamespaceDefault;

        [OutputConstructor]
        private CheClusterSpecServer(
            string airGapContainerRegistryHostname,

            string airGapContainerRegistryOrganization,

            bool allowUserDefinedWorkspaceNamespaces,

            string cheDebug,

            string cheFlavor,

            string cheHost,

            string cheHostTLSSecret,

            string cheImage,

            string cheImagePullPolicy,

            string cheImageTag,

            string cheLogLevel,

            string cheWorkspaceClusterRole,

            ImmutableDictionary<string, string> customCheProperties,

            string devfileRegistryImage,

            string devfileRegistryMemoryLimit,

            string devfileRegistryMemoryRequest,

            string devfileRegistryPullPolicy,

            string devfileRegistryUrl,

            bool externalDevfileRegistry,

            bool externalPluginRegistry,

            bool gitSelfSignedCert,

            string nonProxyHosts,

            string pluginRegistryImage,

            string pluginRegistryMemoryLimit,

            string pluginRegistryMemoryRequest,

            string pluginRegistryPullPolicy,

            string pluginRegistryUrl,

            string proxyPassword,

            string proxyPort,

            string proxySecret,

            string proxyURL,

            string proxyUser,

            bool selfSignedCert,

            string serverMemoryLimit,

            string serverMemoryRequest,

            string serverTrustStoreConfigMapName,

            bool tlsSupport,

            string workspaceNamespaceDefault)
        {
            AirGapContainerRegistryHostname = airGapContainerRegistryHostname;
            AirGapContainerRegistryOrganization = airGapContainerRegistryOrganization;
            AllowUserDefinedWorkspaceNamespaces = allowUserDefinedWorkspaceNamespaces;
            CheDebug = cheDebug;
            CheFlavor = cheFlavor;
            CheHost = cheHost;
            CheHostTLSSecret = cheHostTLSSecret;
            CheImage = cheImage;
            CheImagePullPolicy = cheImagePullPolicy;
            CheImageTag = cheImageTag;
            CheLogLevel = cheLogLevel;
            CheWorkspaceClusterRole = cheWorkspaceClusterRole;
            CustomCheProperties = customCheProperties;
            DevfileRegistryImage = devfileRegistryImage;
            DevfileRegistryMemoryLimit = devfileRegistryMemoryLimit;
            DevfileRegistryMemoryRequest = devfileRegistryMemoryRequest;
            DevfileRegistryPullPolicy = devfileRegistryPullPolicy;
            DevfileRegistryUrl = devfileRegistryUrl;
            ExternalDevfileRegistry = externalDevfileRegistry;
            ExternalPluginRegistry = externalPluginRegistry;
            GitSelfSignedCert = gitSelfSignedCert;
            NonProxyHosts = nonProxyHosts;
            PluginRegistryImage = pluginRegistryImage;
            PluginRegistryMemoryLimit = pluginRegistryMemoryLimit;
            PluginRegistryMemoryRequest = pluginRegistryMemoryRequest;
            PluginRegistryPullPolicy = pluginRegistryPullPolicy;
            PluginRegistryUrl = pluginRegistryUrl;
            ProxyPassword = proxyPassword;
            ProxyPort = proxyPort;
            ProxySecret = proxySecret;
            ProxyURL = proxyURL;
            ProxyUser = proxyUser;
            SelfSignedCert = selfSignedCert;
            ServerMemoryLimit = serverMemoryLimit;
            ServerMemoryRequest = serverMemoryRequest;
            ServerTrustStoreConfigMapName = serverTrustStoreConfigMapName;
            TlsSupport = tlsSupport;
            WorkspaceNamespaceDefault = workspaceNamespaceDefault;
        }
    }
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Enterprise.V1Alpha2
{

    [OutputType]
    public sealed class IndexerClusterSpec
    {
        /// <summary>
        /// Kubernetes Affinity rules that control how pods are assigned to particular nodes.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Enterprise.V1Alpha2.IndexerClusterSpecAffinity Affinity;
        /// <summary>
        /// Inline map of default.yml overrides used to initialize the environment
        /// </summary>
        public readonly string Defaults;
        /// <summary>
        /// Full path or URL for one or more default.yml files, separated by commas
        /// </summary>
        public readonly string DefaultsUrl;
        /// <summary>
        /// Storage capacity to request for /opt/splunk/etc persistent volume claims (default=”1Gi”)
        /// </summary>
        public readonly string EtcStorage;
        /// <summary>
        /// Image to use for Splunk pod containers (overrides RELATED_IMAGE_SPLUNK_ENTERPRISE environment variables)
        /// </summary>
        public readonly string Image;
        /// <summary>
        /// Sets pull policy for all images (either “Always” or the default: “IfNotPresent”)
        /// </summary>
        public readonly string ImagePullPolicy;
        /// <summary>
        /// IndexerClusterRef refers to a Splunk Enterprise indexer cluster managed by the operator within Kubernetes
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Enterprise.V1Alpha2.IndexerClusterSpecIndexerClusterRef IndexerClusterRef;
        /// <summary>
        /// LicenseMasterRef refers to a Splunk Enterprise license master managed by the operator within Kubernetes
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Enterprise.V1Alpha2.IndexerClusterSpecLicenseMasterRef LicenseMasterRef;
        /// <summary>
        /// Full path or URL for a Splunk Enterprise license file
        /// </summary>
        public readonly string LicenseUrl;
        /// <summary>
        /// Number of search head pods; a search head cluster will be created if &gt; 1
        /// </summary>
        public readonly int Replicas;
        /// <summary>
        /// resource requirements for the pod containers
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Enterprise.V1Alpha2.IndexerClusterSpecResources Resources;
        /// <summary>
        /// Name of Scheduler to use for pod placement (defaults to “default-scheduler”)
        /// </summary>
        public readonly string SchedulerName;
        /// <summary>
        /// ServiceTemplate is a template used to create Kubernetes services
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Enterprise.V1Alpha2.IndexerClusterSpecServiceTemplate ServiceTemplate;
        /// <summary>
        /// Name of StorageClass to use for persistent volume claims
        /// </summary>
        public readonly string StorageClassName;
        /// <summary>
        /// Storage capacity to request for /opt/splunk/var persistent volume claims (default=”50Gi”)
        /// </summary>
        public readonly string VarStorage;
        /// <summary>
        /// List of one or more Kubernetes volumes. These will be mounted in all pod containers as as /mnt/&lt;name&gt;
        /// </summary>
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Enterprise.V1Alpha2.IndexerClusterSpecVolumes> Volumes;

        [OutputConstructor]
        private IndexerClusterSpec(
            Pulumi.Kubernetes.Types.Outputs.Enterprise.V1Alpha2.IndexerClusterSpecAffinity affinity,

            string defaults,

            string defaultsUrl,

            string etcStorage,

            string image,

            string imagePullPolicy,

            Pulumi.Kubernetes.Types.Outputs.Enterprise.V1Alpha2.IndexerClusterSpecIndexerClusterRef indexerClusterRef,

            Pulumi.Kubernetes.Types.Outputs.Enterprise.V1Alpha2.IndexerClusterSpecLicenseMasterRef licenseMasterRef,

            string licenseUrl,

            int replicas,

            Pulumi.Kubernetes.Types.Outputs.Enterprise.V1Alpha2.IndexerClusterSpecResources resources,

            string schedulerName,

            Pulumi.Kubernetes.Types.Outputs.Enterprise.V1Alpha2.IndexerClusterSpecServiceTemplate serviceTemplate,

            string storageClassName,

            string varStorage,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Enterprise.V1Alpha2.IndexerClusterSpecVolumes> volumes)
        {
            Affinity = affinity;
            Defaults = defaults;
            DefaultsUrl = defaultsUrl;
            EtcStorage = etcStorage;
            Image = image;
            ImagePullPolicy = imagePullPolicy;
            IndexerClusterRef = indexerClusterRef;
            LicenseMasterRef = licenseMasterRef;
            LicenseUrl = licenseUrl;
            Replicas = replicas;
            Resources = resources;
            SchedulerName = schedulerName;
            ServiceTemplate = serviceTemplate;
            StorageClassName = storageClassName;
            VarStorage = varStorage;
            Volumes = volumes;
        }
    }
}

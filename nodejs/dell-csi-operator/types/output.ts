// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import {ObjectMeta} from "../meta/v1";

export namespace storage {
    export namespace v1 {
        /**
         * CSIIsilonSpec defines the desired state of CSIIsilon
         */
        export interface CSIIsilonSpec {
            /**
             * Driver is the specification for the CSI Isilon Driver
             */
            driver: outputs.storage.v1.CSIIsilonSpecDriver;
        }

        /**
         * Driver is the specification for the CSI Isilon Driver
         */
        export interface CSIIsilonSpecDriver {
            /**
             * AuthSecret is the name of the credentials secret for the driver
             */
            authSecret?: string;
            /**
             * Common is the common specification for both controller and node plugins
             */
            common: outputs.storage.v1.CSIIsilonSpecDriverCommon;
            /**
             * ConfigVersion is the configuration version of the driver
             */
            configVersion: string;
            /**
             * Controller is the specification for Controller plugin only
             */
            controller?: outputs.storage.v1.CSIIsilonSpecDriverController;
            /**
             * ForceUpdate is the boolean flag used to force an update of the driver instance
             */
            forceUpdate?: boolean;
            /**
             * Node is the specification for Node plugin only
             */
            node?: outputs.storage.v1.CSIIsilonSpecDriverNode;
            /**
             * Replicas is the count of controllers for Controller plugin
             */
            replicas: number;
            /**
             * SideCars is the specification for CSI sidecar containers
             */
            sideCars?: outputs.storage.v1.CSIIsilonSpecDriverSideCars[];
            /**
             * SnapshotClass is the specification for Snapshot Classes
             */
            snapshotClass?: outputs.storage.v1.CSIIsilonSpecDriverSnapshotClass[];
            /**
             * StorageClass is the specification for Storage Classes
             */
            storageClass?: outputs.storage.v1.CSIIsilonSpecDriverStorageClass[];
            /**
             * TLSCertSecret is the name of the TLS Cert secret
             */
            tlsCertSecret?: string;
        }

        /**
         * Common is the common specification for both controller and node plugins
         */
        export interface CSIIsilonSpecDriverCommon {
            /**
             * Args is the set of arguments for the container
             */
            args?: string[];
            /**
             * Envs is the set of environment variables for the container
             */
            envs?: outputs.storage.v1.CSIIsilonSpecDriverCommonEnvs[];
            /**
             * Image is the image tag for the Container
             */
            image?: string;
            /**
             * ImagePullPolicy is the image pull policy for the image
             */
            imagePullPolicy?: string;
            /**
             * Name is the name of Container
             */
            name?: string;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface CSIIsilonSpecDriverCommonEnvs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: string;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: outputs.storage.v1.CSIIsilonSpecDriverCommonEnvsValueFrom;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface CSIIsilonSpecDriverCommonEnvsValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: outputs.storage.v1.CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
             */
            fieldRef?: outputs.storage.v1.CSIIsilonSpecDriverCommonEnvsValueFromFieldRef;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: outputs.storage.v1.CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: outputs.storage.v1.CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
         */
        export interface CSIIsilonSpecDriverCommonEnvsValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Controller is the specification for Controller plugin only
         */
        export interface CSIIsilonSpecDriverController {
            /**
             * Args is the set of arguments for the container
             */
            args?: string[];
            /**
             * Envs is the set of environment variables for the container
             */
            envs?: outputs.storage.v1.CSIIsilonSpecDriverControllerEnvs[];
            /**
             * Image is the image tag for the Container
             */
            image?: string;
            /**
             * ImagePullPolicy is the image pull policy for the image
             */
            imagePullPolicy?: string;
            /**
             * Name is the name of Container
             */
            name?: string;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface CSIIsilonSpecDriverControllerEnvs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: string;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: outputs.storage.v1.CSIIsilonSpecDriverControllerEnvsValueFrom;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface CSIIsilonSpecDriverControllerEnvsValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: outputs.storage.v1.CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
             */
            fieldRef?: outputs.storage.v1.CSIIsilonSpecDriverControllerEnvsValueFromFieldRef;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: outputs.storage.v1.CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: outputs.storage.v1.CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
         */
        export interface CSIIsilonSpecDriverControllerEnvsValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Node is the specification for Node plugin only
         */
        export interface CSIIsilonSpecDriverNode {
            /**
             * Args is the set of arguments for the container
             */
            args?: string[];
            /**
             * Envs is the set of environment variables for the container
             */
            envs?: outputs.storage.v1.CSIIsilonSpecDriverNodeEnvs[];
            /**
             * Image is the image tag for the Container
             */
            image?: string;
            /**
             * ImagePullPolicy is the image pull policy for the image
             */
            imagePullPolicy?: string;
            /**
             * Name is the name of Container
             */
            name?: string;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface CSIIsilonSpecDriverNodeEnvs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: string;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: outputs.storage.v1.CSIIsilonSpecDriverNodeEnvsValueFrom;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface CSIIsilonSpecDriverNodeEnvsValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: outputs.storage.v1.CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
             */
            fieldRef?: outputs.storage.v1.CSIIsilonSpecDriverNodeEnvsValueFromFieldRef;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: outputs.storage.v1.CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: outputs.storage.v1.CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
         */
        export interface CSIIsilonSpecDriverNodeEnvsValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * ContainerTemplate - Structure representing a container
         */
        export interface CSIIsilonSpecDriverSideCars {
            /**
             * Args is the set of arguments for the container
             */
            args?: string[];
            /**
             * Envs is the set of environment variables for the container
             */
            envs?: outputs.storage.v1.CSIIsilonSpecDriverSideCarsEnvs[];
            /**
             * Image is the image tag for the Container
             */
            image?: string;
            /**
             * ImagePullPolicy is the image pull policy for the image
             */
            imagePullPolicy?: string;
            /**
             * Name is the name of Container
             */
            name?: string;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface CSIIsilonSpecDriverSideCarsEnvs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: string;
            /**
             * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: string;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: outputs.storage.v1.CSIIsilonSpecDriverSideCarsEnvsValueFrom;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface CSIIsilonSpecDriverSideCarsEnvsValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: outputs.storage.v1.CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
             */
            fieldRef?: outputs.storage.v1.CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: outputs.storage.v1.CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: outputs.storage.v1.CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
         */
        export interface CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: string;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: string;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: string;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: string;
            /**
             * Required: resource to select
             */
            resource: string;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * SnapshotClass represents a VolumeSnapshotClass
         */
        export interface CSIIsilonSpecDriverSnapshotClass {
            /**
             * Name is the name of the Snapshot Class
             */
            name: string;
            /**
             * Parameters is a map of driver specific parameters for snapshot class
             */
            parameters?: {[key: string]: string};
        }

        /**
         * StorageClass represents a kubernetes storage class
         */
        export interface CSIIsilonSpecDriverStorageClass {
            /**
             * AllowVolumeExpansion is a boolean flag which indicates if volumes can be expanded
             */
            allowVolumeExpansion?: boolean;
            /**
             * DefaultSc is a boolean flag to indicate if the storage class is going to be marked as default
             */
            default?: boolean;
            /**
             * Name is the name of the StorageClass
             */
            name: string;
            /**
             * Parameters is a map of driver specific storage class
             */
            parameters?: {[key: string]: string};
            /**
             * ReclaimPolicy is the reclaim policy for the storage class
             */
            reclaimPolicy?: string;
        }

        /**
         * DriverStatus defines the observed state of CSIDriver
         */
        export interface CSIIsilonStatus {
            /**
             * ControllerStatus is the status of Controller pods
             */
            controllerStatus?: outputs.storage.v1.CSIIsilonStatusControllerStatus;
            /**
             * DriverHash is a hash of the driver specification
             */
            driverHash?: number;
            /**
             * LastUpdate is the last updated state of the driver
             */
            lastUpdate?: outputs.storage.v1.CSIIsilonStatusLastUpdate;
            /**
             * NodeStatus is the status of Controller pods
             */
            nodeStatus?: outputs.storage.v1.CSIIsilonStatusNodeStatus;
            /**
             * State is the state of the driver installation
             */
            state?: string;
        }

        /**
         * ControllerStatus is the status of Controller pods
         */
        export interface CSIIsilonStatusControllerStatus {
            available?: string[];
            ready?: string[];
            starting?: string[];
            stopped?: string[];
        }

        /**
         * LastUpdate is the last updated state of the driver
         */
        export interface CSIIsilonStatusLastUpdate {
            /**
             * Condition is the last known condition of the Custom Resource
             */
            condition?: string;
            /**
             * ErrorMessage is the last error message associated with the condition
             */
            errorMessage?: string;
            /**
             * Time is the time stamp for the last condition update
             */
            time?: string;
        }

        /**
         * NodeStatus is the status of Controller pods
         */
        export interface CSIIsilonStatusNodeStatus {
            available?: string[];
            ready?: string[];
            starting?: string[];
            stopped?: string[];
        }
    }
}

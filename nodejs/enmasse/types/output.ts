// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import {ObjectMeta} from "../meta/v1";

export namespace enmasse {
    export namespace v1beta1 {
        export interface AddressSpec {
            /**
             * Messaging address.
             */
            address: string;
            /**
             * Address forwarders for this address.
             */
            forwarders?: outputs.enmasse.v1beta1.AddressSpecForwarders[];
            /**
             * Further restricts message time-to-live (TTL). Applies to address types queue and topic only. The maximum and minimum values must fall with the minimum/maximum range described by the plan's TTL settings.
             */
            messageTtl?: outputs.enmasse.v1beta1.AddressSpecMessageTtl;
            /**
             * Plan referenced by this address.
             */
            plan: string;
            /**
             * Properties that can be set for subscription type addresses.
             */
            subscription?: outputs.enmasse.v1beta1.AddressSpecSubscription;
            /**
             * Address of topic that this subscription refers to (only applicable to subscription types).
             */
            topic?: string;
            /**
             * Address type for this address.
             */
            type: string;
        }

        export interface AddressSpecForwarders {
            direction: string;
            /**
             * Forwarder name.
             */
            name: string;
            /**
             * Remote address to forward to. Must be prefixed with connector name.
             */
            remoteAddress: string;
        }

        /**
         * Further restricts message time-to-live (TTL). Applies to address types queue and topic only. The maximum and minimum values must fall with the minimum/maximum range described by the plan's TTL settings.
         */
        export interface AddressSpecMessageTtl {
            /**
             * Imposes a maximum TTL value (in milliseconds) for messages arriving at the address.  Messages arriving with TTL values greater than this value (or no TTL value) will have their expiration adjusted.
             */
            maximum?: number;
            /**
             * Imposes a minimum TTL value (in milliseconds) for messages arriving at the address.  Messages arriving with TTL values less than this value will have their expiration adjusted.
             */
            minimum?: number;
        }

        /**
         * Properties that can be set for subscription type addresses.
         */
        export interface AddressSpecSubscription {
            /**
             * Maximum number of concurrent consumers that can be attached to this subscription. If unspecified, 1 consumer is allowed per subscription
             */
            maxConsumers?: number;
        }

        export interface AddressStatus {
            /**
             * The status of this address in brokers.
             */
            brokerStatuses?: outputs.enmasse.v1beta1.AddressStatusBrokerStatuses[];
            /**
             * Forwarder status for this address.
             */
            forwarders?: outputs.enmasse.v1beta1.AddressStatusForwarders[];
            /**
             * Whether address is ready to use or not.
             */
            isReady?: boolean;
            /**
             * Applied message TTL properties.
             */
            messageTtl?: outputs.enmasse.v1beta1.AddressStatusMessageTtl;
            /**
             * Status and error messages for address.
             */
            messages?: string[];
            /**
             * Phase of address.
             */
            phase?: string;
            planStatus?: outputs.enmasse.v1beta1.AddressStatusPlanStatus;
            /**
             * Applied properties for subscription type addresses.
             */
            subscription?: outputs.enmasse.v1beta1.AddressStatusSubscription;
        }

        export interface AddressStatusBrokerStatuses {
            brokerId?: string;
            clusterId?: string;
            state?: string;
        }

        export interface AddressStatusForwarders {
            isReady?: boolean;
            messages?: string[];
            name?: string;
        }

        /**
         * Applied message TTL properties.
         */
        export interface AddressStatusMessageTtl {
            /**
             * Maximum TTL value
             */
            maximum?: number;
            /**
             * Minimum TTL value
             */
            minimum?: number;
        }

        export interface AddressStatusPlanStatus {
            name: string;
            partitions: number;
            resources: {[key: string]: any};
        }

        /**
         * Applied properties for subscription type addresses.
         */
        export interface AddressStatusSubscription {
            /**
             * Maximum number of concurrent consumers that can be attached to this subscription.
             */
            maxConsumers?: number;
        }
    }
}

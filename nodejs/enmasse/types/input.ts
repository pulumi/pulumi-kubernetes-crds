// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import {ObjectMeta} from "../meta/v1";

export namespace enmasse {
    export namespace v1beta1 {
        export interface AddressSpec {
            /**
             * Messaging address.
             */
            address: pulumi.Input<string>;
            /**
             * Address forwarders for this address.
             */
            forwarders?: pulumi.Input<pulumi.Input<inputs.enmasse.v1beta1.AddressSpecForwarders>[]>;
            /**
             * Further restricts message time-to-live (TTL). Applies to address types queue and topic only. The maximum and minimum values must fall with the minimum/maximum range described by the plan's TTL settings.
             */
            messageTtl?: pulumi.Input<inputs.enmasse.v1beta1.AddressSpecMessageTtl>;
            /**
             * Plan referenced by this address.
             */
            plan: pulumi.Input<string>;
            /**
             * Properties that can be set for subscription type addresses.
             */
            subscription?: pulumi.Input<inputs.enmasse.v1beta1.AddressSpecSubscription>;
            /**
             * Address of topic that this subscription refers to (only applicable to subscription types).
             */
            topic?: pulumi.Input<string>;
            /**
             * Address type for this address.
             */
            type: pulumi.Input<string>;
        }

        export interface AddressSpecForwarders {
            direction: pulumi.Input<string>;
            /**
             * Forwarder name.
             */
            name: pulumi.Input<string>;
            /**
             * Remote address to forward to. Must be prefixed with connector name.
             */
            remoteAddress: pulumi.Input<string>;
        }

        /**
         * Further restricts message time-to-live (TTL). Applies to address types queue and topic only. The maximum and minimum values must fall with the minimum/maximum range described by the plan's TTL settings.
         */
        export interface AddressSpecMessageTtl {
            /**
             * Imposes a maximum TTL value (in milliseconds) for messages arriving at the address.  Messages arriving with TTL values greater than this value (or no TTL value) will have their expiration adjusted.
             */
            maximum?: pulumi.Input<number>;
            /**
             * Imposes a minimum TTL value (in milliseconds) for messages arriving at the address.  Messages arriving with TTL values less than this value will have their expiration adjusted.
             */
            minimum?: pulumi.Input<number>;
        }

        /**
         * Properties that can be set for subscription type addresses.
         */
        export interface AddressSpecSubscription {
            /**
             * Maximum number of concurrent consumers that can be attached to this subscription. If unspecified, 1 consumer is allowed per subscription
             */
            maxConsumers?: pulumi.Input<number>;
        }

        export interface AddressStatus {
            /**
             * The status of this address in brokers.
             */
            brokerStatuses?: pulumi.Input<pulumi.Input<inputs.enmasse.v1beta1.AddressStatusBrokerStatuses>[]>;
            /**
             * Forwarder status for this address.
             */
            forwarders?: pulumi.Input<pulumi.Input<inputs.enmasse.v1beta1.AddressStatusForwarders>[]>;
            /**
             * Whether address is ready to use or not.
             */
            isReady?: pulumi.Input<boolean>;
            /**
             * Applied message TTL properties.
             */
            messageTtl?: pulumi.Input<inputs.enmasse.v1beta1.AddressStatusMessageTtl>;
            /**
             * Status and error messages for address.
             */
            messages?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Phase of address.
             */
            phase?: pulumi.Input<string>;
            planStatus?: pulumi.Input<inputs.enmasse.v1beta1.AddressStatusPlanStatus>;
            /**
             * Applied properties for subscription type addresses.
             */
            subscription?: pulumi.Input<inputs.enmasse.v1beta1.AddressStatusSubscription>;
        }

        export interface AddressStatusBrokerStatuses {
            brokerId?: pulumi.Input<string>;
            clusterId?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        export interface AddressStatusForwarders {
            isReady?: pulumi.Input<boolean>;
            messages?: pulumi.Input<pulumi.Input<string>[]>;
            name?: pulumi.Input<string>;
        }

        /**
         * Applied message TTL properties.
         */
        export interface AddressStatusMessageTtl {
            /**
             * Maximum TTL value
             */
            maximum?: pulumi.Input<number>;
            /**
             * Minimum TTL value
             */
            minimum?: pulumi.Input<number>;
        }

        export interface AddressStatusPlanStatus {
            name: pulumi.Input<string>;
            partitions: pulumi.Input<number>;
            resources: pulumi.Input<{[key: string]: any}>;
        }

        /**
         * Applied properties for subscription type addresses.
         */
        export interface AddressStatusSubscription {
            /**
             * Maximum number of concurrent consumers that can be attached to this subscription.
             */
            maxConsumers?: pulumi.Input<number>;
        }
    }
}

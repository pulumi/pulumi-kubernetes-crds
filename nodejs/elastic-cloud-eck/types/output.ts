// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import {ObjectMeta} from "../meta/v1";

export namespace apm {
    export namespace v1 {
        /**
         * ApmServerSpec holds the specification of an APM Server.
         */
        export interface ApmServerSpec {
            /**
             * Config holds the APM Server configuration. See: https://www.elastic.co/guide/en/apm/server/current/configuring-howto-apm-server.html
             */
            config?: {[key: string]: any};
            /**
             * Count of APM Server instances to deploy.
             */
            count?: number;
            /**
             * ElasticsearchRef is a reference to the output Elasticsearch cluster running in the same Kubernetes cluster.
             */
            elasticsearchRef?: outputs.apm.v1.ApmServerSpecElasticsearchRef;
            /**
             * HTTP holds the HTTP layer configuration for the APM Server resource.
             */
            http?: outputs.apm.v1.ApmServerSpecHttp;
            /**
             * Image is the APM Server Docker image to deploy.
             */
            image?: string;
            /**
             * KibanaRef is a reference to a Kibana instance running in the same Kubernetes cluster. It allows APM agent central configuration management in Kibana.
             */
            kibanaRef?: outputs.apm.v1.ApmServerSpecKibanaRef;
            /**
             * PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the APM Server pods.
             */
            podTemplate?: {[key: string]: any};
            /**
             * SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for APM Server.
             */
            secureSettings?: outputs.apm.v1.ApmServerSpecSecureSettings[];
            /**
             * ServiceAccountName is used to check access from the current resource to a resource (eg. Elasticsearch) in a different namespace. Can only be used if ECK is enforcing RBAC on references.
             */
            serviceAccountName?: string;
            /**
             * Version of the APM Server.
             */
            version: string;
        }

        /**
         * ElasticsearchRef is a reference to the output Elasticsearch cluster running in the same Kubernetes cluster.
         */
        export interface ApmServerSpecElasticsearchRef {
            /**
             * Name of the Kubernetes object.
             */
            name: string;
            /**
             * Namespace of the Kubernetes object. If empty, defaults to the current namespace.
             */
            namespace?: string;
        }

        /**
         * HTTP holds the HTTP layer configuration for the APM Server resource.
         */
        export interface ApmServerSpecHttp {
            /**
             * Service defines the template for the associated Kubernetes Service object.
             */
            service?: outputs.apm.v1.ApmServerSpecHttpService;
            /**
             * TLS defines options for configuring TLS for HTTP.
             */
            tls?: outputs.apm.v1.ApmServerSpecHttpTls;
        }

        /**
         * Service defines the template for the associated Kubernetes Service object.
         */
        export interface ApmServerSpecHttpService {
            /**
             * ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
             */
            metadata?: {[key: string]: any};
            /**
             * Spec is the specification of the service.
             */
            spec?: outputs.apm.v1.ApmServerSpecHttpServiceSpec;
        }

        /**
         * Spec is the specification of the service.
         */
        export interface ApmServerSpecHttpServiceSpec {
            /**
             * clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are "None", empty string (""), or a valid IP address. "None" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            clusterIP?: string;
            /**
             * externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
             */
            externalIPs?: string[];
            /**
             * externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName.
             */
            externalName?: string;
            /**
             * externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
             */
            externalTrafficPolicy?: string;
            /**
             * healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.
             */
            healthCheckNodePort?: number;
            /**
             * ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster.  If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family.  Endpoints for this Service will be of this family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.
             */
            ipFamily?: string;
            /**
             * Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
             */
            loadBalancerIP?: string;
            /**
             * If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
             */
            loadBalancerSourceRanges?: string[];
            /**
             * The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            ports?: outputs.apm.v1.ApmServerSpecHttpServiceSpecPorts[];
            /**
             * publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery.
             */
            publishNotReadyAddresses?: boolean;
            /**
             * Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
             */
            selector?: {[key: string]: string};
            /**
             * Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            sessionAffinity?: string;
            /**
             * sessionAffinityConfig contains the configurations of session affinity.
             */
            sessionAffinityConfig?: outputs.apm.v1.ApmServerSpecHttpServiceSpecSessionAffinityConfig;
            /**
             * topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.
             */
            topologyKeys?: string[];
            /**
             * type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ExternalName" maps to the specified externalName. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
             */
            type?: string;
        }

        /**
         * ServicePort contains information on service's port.
         */
        export interface ApmServerSpecHttpServiceSpecPorts {
            /**
             * The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
             */
            name?: string;
            /**
             * The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
             */
            nodePort?: number;
            /**
             * The port that will be exposed by this service.
             */
            port: number;
            /**
             * The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
             */
            protocol?: string;
            /**
             * Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
             */
            targetPort?: outputs.apm.v1.ApmServerSpecHttpServiceSpecPortsTargetPort;
        }

        export interface ApmServerSpecHttpServiceSpecPortsTargetPort {
        }

        /**
         * sessionAffinityConfig contains the configurations of session affinity.
         */
        export interface ApmServerSpecHttpServiceSpecSessionAffinityConfig {
            /**
             * clientIP contains the configurations of Client IP based session affinity.
             */
            clientIP?: outputs.apm.v1.ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIP;
        }

        /**
         * clientIP contains the configurations of Client IP based session affinity.
         */
        export interface ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIP {
            /**
             * timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
             */
            timeoutSeconds?: number;
        }

        /**
         * TLS defines options for configuring TLS for HTTP.
         */
        export interface ApmServerSpecHttpTls {
            /**
             * Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: 
             *  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
             */
            certificate?: outputs.apm.v1.ApmServerSpecHttpTlsCertificate;
            /**
             * SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
             */
            selfSignedCertificate?: outputs.apm.v1.ApmServerSpecHttpTlsSelfSignedCertificate;
        }

        /**
         * Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: 
         *  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
         */
        export interface ApmServerSpecHttpTlsCertificate {
            /**
             * SecretName is the name of the secret.
             */
            secretName?: string;
        }

        /**
         * SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
         */
        export interface ApmServerSpecHttpTlsSelfSignedCertificate {
            /**
             * Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
             */
            disabled?: boolean;
            /**
             * SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
             */
            subjectAltNames?: outputs.apm.v1.ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNames[];
        }

        /**
         * SubjectAlternativeName represents a SAN entry in a x509 certificate.
         */
        export interface ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNames {
            /**
             * DNS is the DNS name of the subject.
             */
            dns?: string;
            /**
             * IP is the IP address of the subject.
             */
            ip?: string;
        }

        /**
         * KibanaRef is a reference to a Kibana instance running in the same Kubernetes cluster. It allows APM agent central configuration management in Kibana.
         */
        export interface ApmServerSpecKibanaRef {
            /**
             * Name of the Kubernetes object.
             */
            name: string;
            /**
             * Namespace of the Kubernetes object. If empty, defaults to the current namespace.
             */
            namespace?: string;
        }

        /**
         * SecretSource defines a data source based on a Kubernetes Secret.
         */
        export interface ApmServerSpecSecureSettings {
            /**
             * Entries define how to project each key-value pair in the secret to filesystem paths. If not defined, all keys will be projected to similarly named paths in the filesystem. If defined, only the specified keys will be projected to the corresponding paths.
             */
            entries?: outputs.apm.v1.ApmServerSpecSecureSettingsEntries[];
            /**
             * SecretName is the name of the secret.
             */
            secretName: string;
        }

        /**
         * KeyToPath defines how to map a key in a Secret object to a filesystem path.
         */
        export interface ApmServerSpecSecureSettingsEntries {
            /**
             * Key is the key contained in the secret.
             */
            key: string;
            /**
             * Path is the relative file path to map the key to. Path must not be an absolute file path and must not contain any ".." components.
             */
            path?: string;
        }

        /**
         * ApmServerStatus defines the observed state of ApmServer
         */
        export interface ApmServerStatus {
            availableNodes?: number;
            /**
             * ElasticsearchAssociationStatus is the status of any auto-linking to Elasticsearch clusters.
             */
            elasticsearchAssociationStatus?: string;
            /**
             * ApmServerHealth expresses the status of the Apm Server instances.
             */
            health?: string;
            /**
             * KibanaAssociationStatus is the status of any auto-linking to Kibana.
             */
            kibanaAssociationStatus?: string;
            /**
             * SecretTokenSecretName is the name of the Secret that contains the secret token
             */
            secretTokenSecret?: string;
            /**
             * ExternalService is the name of the service the agents should connect to.
             */
            service?: string;
        }
    }

    export namespace v1alpha1 {
        /**
         * ApmServerSpec holds the specification of an APM Server.
         */
        export interface ApmServerSpec {
            /**
             * Config holds the APM Server configuration. See: https://www.elastic.co/guide/en/apm/server/current/configuring-howto-apm-server.html
             */
            config?: {[key: string]: any};
            /**
             * Count of APM Server instances to deploy.
             */
            count?: number;
            /**
             * ElasticsearchRef is a reference to the output Elasticsearch cluster running in the same Kubernetes cluster.
             */
            elasticsearchRef?: outputs.apm.v1alpha1.ApmServerSpecElasticsearchRef;
            /**
             * HTTP holds the HTTP layer configuration for the APM Server resource.
             */
            http?: outputs.apm.v1alpha1.ApmServerSpecHttp;
            /**
             * Image is the APM Server Docker image to deploy.
             */
            image?: string;
            /**
             * KibanaRef is a reference to a Kibana instance running in the same Kubernetes cluster. It allows APM agent central configuration management in Kibana.
             */
            kibanaRef?: outputs.apm.v1alpha1.ApmServerSpecKibanaRef;
            /**
             * PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the APM Server pods.
             */
            podTemplate?: {[key: string]: any};
            /**
             * SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for APM Server.
             */
            secureSettings?: outputs.apm.v1alpha1.ApmServerSpecSecureSettings[];
            /**
             * ServiceAccountName is used to check access from the current resource to a resource (eg. Elasticsearch) in a different namespace. Can only be used if ECK is enforcing RBAC on references.
             */
            serviceAccountName?: string;
            /**
             * Version of the APM Server.
             */
            version: string;
        }

        /**
         * ElasticsearchRef is a reference to the output Elasticsearch cluster running in the same Kubernetes cluster.
         */
        export interface ApmServerSpecElasticsearchRef {
            /**
             * Name of the Kubernetes object.
             */
            name: string;
            /**
             * Namespace of the Kubernetes object. If empty, defaults to the current namespace.
             */
            namespace?: string;
        }

        /**
         * HTTP holds the HTTP layer configuration for the APM Server resource.
         */
        export interface ApmServerSpecHttp {
            /**
             * Service defines the template for the associated Kubernetes Service object.
             */
            service?: outputs.apm.v1alpha1.ApmServerSpecHttpService;
            /**
             * TLS defines options for configuring TLS for HTTP.
             */
            tls?: outputs.apm.v1alpha1.ApmServerSpecHttpTls;
        }

        /**
         * Service defines the template for the associated Kubernetes Service object.
         */
        export interface ApmServerSpecHttpService {
            /**
             * ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
             */
            metadata?: {[key: string]: any};
            /**
             * Spec is the specification of the service.
             */
            spec?: outputs.apm.v1alpha1.ApmServerSpecHttpServiceSpec;
        }

        /**
         * Spec is the specification of the service.
         */
        export interface ApmServerSpecHttpServiceSpec {
            /**
             * clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are "None", empty string (""), or a valid IP address. "None" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            clusterIP?: string;
            /**
             * externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
             */
            externalIPs?: string[];
            /**
             * externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName.
             */
            externalName?: string;
            /**
             * externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
             */
            externalTrafficPolicy?: string;
            /**
             * healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.
             */
            healthCheckNodePort?: number;
            /**
             * ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster.  If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family.  Endpoints for this Service will be of this family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.
             */
            ipFamily?: string;
            /**
             * Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
             */
            loadBalancerIP?: string;
            /**
             * If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
             */
            loadBalancerSourceRanges?: string[];
            /**
             * The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            ports?: outputs.apm.v1alpha1.ApmServerSpecHttpServiceSpecPorts[];
            /**
             * publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery.
             */
            publishNotReadyAddresses?: boolean;
            /**
             * Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
             */
            selector?: {[key: string]: string};
            /**
             * Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            sessionAffinity?: string;
            /**
             * sessionAffinityConfig contains the configurations of session affinity.
             */
            sessionAffinityConfig?: outputs.apm.v1alpha1.ApmServerSpecHttpServiceSpecSessionAffinityConfig;
            /**
             * topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.
             */
            topologyKeys?: string[];
            /**
             * type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ExternalName" maps to the specified externalName. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
             */
            type?: string;
        }

        /**
         * ServicePort contains information on service's port.
         */
        export interface ApmServerSpecHttpServiceSpecPorts {
            /**
             * The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
             */
            name?: string;
            /**
             * The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
             */
            nodePort?: number;
            /**
             * The port that will be exposed by this service.
             */
            port: number;
            /**
             * The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
             */
            protocol?: string;
            /**
             * Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
             */
            targetPort?: outputs.apm.v1alpha1.ApmServerSpecHttpServiceSpecPortsTargetPort;
        }

        export interface ApmServerSpecHttpServiceSpecPortsTargetPort {
        }

        /**
         * sessionAffinityConfig contains the configurations of session affinity.
         */
        export interface ApmServerSpecHttpServiceSpecSessionAffinityConfig {
            /**
             * clientIP contains the configurations of Client IP based session affinity.
             */
            clientIP?: outputs.apm.v1alpha1.ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIP;
        }

        /**
         * clientIP contains the configurations of Client IP based session affinity.
         */
        export interface ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIP {
            /**
             * timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
             */
            timeoutSeconds?: number;
        }

        /**
         * TLS defines options for configuring TLS for HTTP.
         */
        export interface ApmServerSpecHttpTls {
            /**
             * Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: 
             *  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
             */
            certificate?: outputs.apm.v1alpha1.ApmServerSpecHttpTlsCertificate;
            /**
             * SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
             */
            selfSignedCertificate?: outputs.apm.v1alpha1.ApmServerSpecHttpTlsSelfSignedCertificate;
        }

        /**
         * Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: 
         *  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
         */
        export interface ApmServerSpecHttpTlsCertificate {
            /**
             * SecretName is the name of the secret.
             */
            secretName?: string;
        }

        /**
         * SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
         */
        export interface ApmServerSpecHttpTlsSelfSignedCertificate {
            /**
             * Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
             */
            disabled?: boolean;
            /**
             * SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
             */
            subjectAltNames?: outputs.apm.v1alpha1.ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNames[];
        }

        /**
         * SubjectAlternativeName represents a SAN entry in a x509 certificate.
         */
        export interface ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNames {
            /**
             * DNS is the DNS name of the subject.
             */
            dns?: string;
            /**
             * IP is the IP address of the subject.
             */
            ip?: string;
        }

        /**
         * KibanaRef is a reference to a Kibana instance running in the same Kubernetes cluster. It allows APM agent central configuration management in Kibana.
         */
        export interface ApmServerSpecKibanaRef {
            /**
             * Name of the Kubernetes object.
             */
            name: string;
            /**
             * Namespace of the Kubernetes object. If empty, defaults to the current namespace.
             */
            namespace?: string;
        }

        /**
         * SecretSource defines a data source based on a Kubernetes Secret.
         */
        export interface ApmServerSpecSecureSettings {
            /**
             * Entries define how to project each key-value pair in the secret to filesystem paths. If not defined, all keys will be projected to similarly named paths in the filesystem. If defined, only the specified keys will be projected to the corresponding paths.
             */
            entries?: outputs.apm.v1alpha1.ApmServerSpecSecureSettingsEntries[];
            /**
             * SecretName is the name of the secret.
             */
            secretName: string;
        }

        /**
         * KeyToPath defines how to map a key in a Secret object to a filesystem path.
         */
        export interface ApmServerSpecSecureSettingsEntries {
            /**
             * Key is the key contained in the secret.
             */
            key: string;
            /**
             * Path is the relative file path to map the key to. Path must not be an absolute file path and must not contain any ".." components.
             */
            path?: string;
        }

        /**
         * ApmServerStatus defines the observed state of ApmServer
         */
        export interface ApmServerStatus {
            availableNodes?: number;
            /**
             * ElasticsearchAssociationStatus is the status of any auto-linking to Elasticsearch clusters.
             */
            elasticsearchAssociationStatus?: string;
            /**
             * ApmServerHealth expresses the status of the Apm Server instances.
             */
            health?: string;
            /**
             * KibanaAssociationStatus is the status of any auto-linking to Kibana.
             */
            kibanaAssociationStatus?: string;
            /**
             * SecretTokenSecretName is the name of the Secret that contains the secret token
             */
            secretTokenSecret?: string;
            /**
             * ExternalService is the name of the service the agents should connect to.
             */
            service?: string;
        }
    }

    export namespace v1beta1 {
        /**
         * ApmServerSpec holds the specification of an APM Server.
         */
        export interface ApmServerSpec {
            /**
             * Config holds the APM Server configuration. See: https://www.elastic.co/guide/en/apm/server/current/configuring-howto-apm-server.html
             */
            config?: {[key: string]: any};
            /**
             * Count of APM Server instances to deploy.
             */
            count?: number;
            /**
             * ElasticsearchRef is a reference to the output Elasticsearch cluster running in the same Kubernetes cluster.
             */
            elasticsearchRef?: outputs.apm.v1beta1.ApmServerSpecElasticsearchRef;
            /**
             * HTTP holds the HTTP layer configuration for the APM Server resource.
             */
            http?: outputs.apm.v1beta1.ApmServerSpecHttp;
            /**
             * Image is the APM Server Docker image to deploy.
             */
            image?: string;
            /**
             * KibanaRef is a reference to a Kibana instance running in the same Kubernetes cluster. It allows APM agent central configuration management in Kibana.
             */
            kibanaRef?: outputs.apm.v1beta1.ApmServerSpecKibanaRef;
            /**
             * PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the APM Server pods.
             */
            podTemplate?: {[key: string]: any};
            /**
             * SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for APM Server.
             */
            secureSettings?: outputs.apm.v1beta1.ApmServerSpecSecureSettings[];
            /**
             * ServiceAccountName is used to check access from the current resource to a resource (eg. Elasticsearch) in a different namespace. Can only be used if ECK is enforcing RBAC on references.
             */
            serviceAccountName?: string;
            /**
             * Version of the APM Server.
             */
            version: string;
        }

        /**
         * ElasticsearchRef is a reference to the output Elasticsearch cluster running in the same Kubernetes cluster.
         */
        export interface ApmServerSpecElasticsearchRef {
            /**
             * Name of the Kubernetes object.
             */
            name: string;
            /**
             * Namespace of the Kubernetes object. If empty, defaults to the current namespace.
             */
            namespace?: string;
        }

        /**
         * HTTP holds the HTTP layer configuration for the APM Server resource.
         */
        export interface ApmServerSpecHttp {
            /**
             * Service defines the template for the associated Kubernetes Service object.
             */
            service?: outputs.apm.v1beta1.ApmServerSpecHttpService;
            /**
             * TLS defines options for configuring TLS for HTTP.
             */
            tls?: outputs.apm.v1beta1.ApmServerSpecHttpTls;
        }

        /**
         * Service defines the template for the associated Kubernetes Service object.
         */
        export interface ApmServerSpecHttpService {
            /**
             * ObjectMeta is the metadata of the service. The name and namespace provided here are managed by ECK and will be ignored.
             */
            metadata?: {[key: string]: any};
            /**
             * Spec is the specification of the service.
             */
            spec?: outputs.apm.v1beta1.ApmServerSpecHttpServiceSpec;
        }

        /**
         * Spec is the specification of the service.
         */
        export interface ApmServerSpecHttpServiceSpec {
            /**
             * clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are "None", empty string (""), or a valid IP address. "None" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            clusterIP?: string;
            /**
             * externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
             */
            externalIPs?: string[];
            /**
             * externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName.
             */
            externalName?: string;
            /**
             * externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
             */
            externalTrafficPolicy?: string;
            /**
             * healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.
             */
            healthCheckNodePort?: number;
            /**
             * ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster.  If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family.  Endpoints for this Service will be of this family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.
             */
            ipFamily?: string;
            /**
             * Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
             */
            loadBalancerIP?: string;
            /**
             * If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
             */
            loadBalancerSourceRanges?: string[];
            /**
             * The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            ports?: outputs.apm.v1beta1.ApmServerSpecHttpServiceSpecPorts[];
            /**
             * publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery.
             */
            publishNotReadyAddresses?: boolean;
            /**
             * Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
             */
            selector?: {[key: string]: string};
            /**
             * Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
             */
            sessionAffinity?: string;
            /**
             * sessionAffinityConfig contains the configurations of session affinity.
             */
            sessionAffinityConfig?: outputs.apm.v1beta1.ApmServerSpecHttpServiceSpecSessionAffinityConfig;
            /**
             * topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.
             */
            topologyKeys?: string[];
            /**
             * type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ExternalName" maps to the specified externalName. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
             */
            type?: string;
        }

        /**
         * ServicePort contains information on service's port.
         */
        export interface ApmServerSpecHttpServiceSpecPorts {
            /**
             * The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
             */
            name?: string;
            /**
             * The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
             */
            nodePort?: number;
            /**
             * The port that will be exposed by this service.
             */
            port: number;
            /**
             * The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
             */
            protocol?: string;
            /**
             * Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
             */
            targetPort?: outputs.apm.v1beta1.ApmServerSpecHttpServiceSpecPortsTargetPort;
        }

        export interface ApmServerSpecHttpServiceSpecPortsTargetPort {
        }

        /**
         * sessionAffinityConfig contains the configurations of session affinity.
         */
        export interface ApmServerSpecHttpServiceSpecSessionAffinityConfig {
            /**
             * clientIP contains the configurations of Client IP based session affinity.
             */
            clientIP?: outputs.apm.v1beta1.ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIP;
        }

        /**
         * clientIP contains the configurations of Client IP based session affinity.
         */
        export interface ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIP {
            /**
             * timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
             */
            timeoutSeconds?: number;
        }

        /**
         * TLS defines options for configuring TLS for HTTP.
         */
        export interface ApmServerSpecHttpTls {
            /**
             * Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: 
             *  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
             */
            certificate?: outputs.apm.v1beta1.ApmServerSpecHttpTlsCertificate;
            /**
             * SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
             */
            selfSignedCertificate?: outputs.apm.v1beta1.ApmServerSpecHttpTlsSelfSignedCertificate;
        }

        /**
         * Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS. The referenced secret should contain the following: 
         *  - `ca.crt`: The certificate authority (optional). - `tls.crt`: The certificate (or a chain). - `tls.key`: The private key to the first certificate in the certificate chain.
         */
        export interface ApmServerSpecHttpTlsCertificate {
            /**
             * SecretName is the name of the secret.
             */
            secretName?: string;
        }

        /**
         * SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
         */
        export interface ApmServerSpecHttpTlsSelfSignedCertificate {
            /**
             * Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
             */
            disabled?: boolean;
            /**
             * SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
             */
            subjectAltNames?: outputs.apm.v1beta1.ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNames[];
        }

        /**
         * SubjectAlternativeName represents a SAN entry in a x509 certificate.
         */
        export interface ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNames {
            /**
             * DNS is the DNS name of the subject.
             */
            dns?: string;
            /**
             * IP is the IP address of the subject.
             */
            ip?: string;
        }

        /**
         * KibanaRef is a reference to a Kibana instance running in the same Kubernetes cluster. It allows APM agent central configuration management in Kibana.
         */
        export interface ApmServerSpecKibanaRef {
            /**
             * Name of the Kubernetes object.
             */
            name: string;
            /**
             * Namespace of the Kubernetes object. If empty, defaults to the current namespace.
             */
            namespace?: string;
        }

        /**
         * SecretSource defines a data source based on a Kubernetes Secret.
         */
        export interface ApmServerSpecSecureSettings {
            /**
             * Entries define how to project each key-value pair in the secret to filesystem paths. If not defined, all keys will be projected to similarly named paths in the filesystem. If defined, only the specified keys will be projected to the corresponding paths.
             */
            entries?: outputs.apm.v1beta1.ApmServerSpecSecureSettingsEntries[];
            /**
             * SecretName is the name of the secret.
             */
            secretName: string;
        }

        /**
         * KeyToPath defines how to map a key in a Secret object to a filesystem path.
         */
        export interface ApmServerSpecSecureSettingsEntries {
            /**
             * Key is the key contained in the secret.
             */
            key: string;
            /**
             * Path is the relative file path to map the key to. Path must not be an absolute file path and must not contain any ".." components.
             */
            path?: string;
        }

        /**
         * ApmServerStatus defines the observed state of ApmServer
         */
        export interface ApmServerStatus {
            availableNodes?: number;
            /**
             * ElasticsearchAssociationStatus is the status of any auto-linking to Elasticsearch clusters.
             */
            elasticsearchAssociationStatus?: string;
            /**
             * ApmServerHealth expresses the status of the Apm Server instances.
             */
            health?: string;
            /**
             * KibanaAssociationStatus is the status of any auto-linking to Kibana.
             */
            kibanaAssociationStatus?: string;
            /**
             * SecretTokenSecretName is the name of the Secret that contains the secret token
             */
            secretTokenSecret?: string;
            /**
             * ExternalService is the name of the service the agents should connect to.
             */
            service?: string;
        }
    }
}

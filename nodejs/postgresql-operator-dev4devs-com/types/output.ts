// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import {ObjectMeta} from "../meta/v1";

export namespace postgresql {
    export namespace v1alpha1 {
        export interface BackupSpec {
            /**
             * Key ID of AWS S3 storage. Default Value: nil Required to create the Secret with the data to allow send the backup files to AWS S3 storage.
             */
            awsAccessKeyId?: string;
            /**
             * Name of AWS S3 storage. Default Value: nil Required to create the Secret with the AWS data to allow send the backup files to AWS S3 storage. 
             */
            awsS3BucketName?: string;
            /**
             * Secret/Token of AWS S3 storage. Default Value: nil Required to create the Secret with the data to allow send the backup files to AWS S3 storage.
             */
            awsSecretAccessKey?: string;
            /**
             * Name of the secret with the AWS data credentials pre-existing in the cluster Default Value: nil See here the template: https://github.com/integr8ly/backup-container-image/blob/master/templates/openshift/sample-config/s3-secret.yaml 
             */
            awsSecretName?: string;
            /**
             * Namespace of the secret with the AWS data credentials pre-existing in the cluster Default Value: nil NOTE: If the namespace be not informed then the operator will try to find it in the same namespace where it is applied 
             */
            awsSecretNamespace?: string;
            /**
             * Name of the Database CR applied which this backup will work with Default Value: database
             */
            databaseCRName?: string;
            /**
             * Database version. (E.g 9.6). Default Value: <9.6> IMPORTANT: Just the first 2 digits should be used.
             */
            databaseVersion?: string;
            /**
             * Name of the secret with the Encrypt data pre-existing in the cluster Default Value: nil See here the template: https://github.com/integr8ly/backup-container-image/blob/master/templates/openshift/sample-config/gpg-secret.yaml
             */
            encryptKeySecretName?: string;
            /**
             * Namespace of the secret with the Encrypt data pre-existing in the cluster Default Value: nil NOTE: If the namespace be not informed then the operator will try to find it in the same namespace where it is applied
             */
            encryptKeySecretNamespace?: string;
            /**
             * GPG email to create the EncryptionKeySecret with this data Default Value: nil See here how to create this key : https://help.github.com/en/articles/generating-a-new-gpg-key
             */
            gpgEmail?: string;
            /**
             * GPG public key to create the EncryptionKeySecret with this data Default Value: nil See here how to create this key : https://help.github.com/en/articles/generating-a-new-gpg-key
             */
            gpgPublicKey?: string;
            /**
             * GPG trust model to create the EncryptionKeySecret with this data. the default value is true when it is empty. Default Value: nil See here how to create this key : https://help.github.com/en/articles/generating-a-new-gpg-key
             */
            gpgTrustModel?: string;
            /**
             * Image:tag used to do the backup. Default Value: <quay.io/integreatly/backup-container:1.0.8> More Info: https://github.com/integr8ly/backup-container-image
             */
            image?: string;
            /**
             * Used to create the directory where the files will be stored Default Value: <postgresql> 
             */
            productName?: string;
            /**
             * Schedule period for the CronJob. Default Value: <0 0 * * *> daily at 00:00
             */
            schedule?: string;
        }

        export interface BackupStatus {
            /**
             * Namespace  of the secret object with the Aws data to allow send the backup files to the AWS storage
             */
            awsCredentialsSecretNamespace: string;
            /**
             * Name  of the secret object with the Aws data to allow send the backup files to the AWS storage
             */
            awsSecretName: string;
            /**
             * Will be as "OK when all objects are created successfully
             */
            backupStatus: string;
            /**
             * Name of the CronJob object created and managed by it to schedule the backup job
             */
            cronJobName: string;
            /**
             * Status of the CronJob object
             */
            cronJobStatus: {[key: string]: any};
            /**
             * Name of the secret object created with the database data to allow the backup image connect to the database
             */
            dbSecretName: string;
            /**
             * Name  of the secret object with the Encryption GPG Key
             */
            encryptKeySecretName: string;
            /**
             * Namespace of the secret object with the Encryption GPG Key
             */
            encryptKeySecretNamespace: string;
            /**
             * Boolean value which has true when it has an EncryptionKey to be used to send the backup files
             */
            hasEncryptKey: boolean;
            /**
             * Boolean value which has true when the Database Pod was found in order to create the secret with the database data to allow the backup image connect into it. 
             */
            isDatabasePodFound: boolean;
            /**
             * Boolean value which has true when the Service Database Pod was found in order to create the secret with the database data to allow the backup image connect into it.
             */
            isDatabaseServiceFound: boolean;
        }

    }
}

# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from ... import _utilities, _tables

__all__ = [
    'KafkaBridgeSpecArgs',
    'KafkaBridgeSpecAuthenticationArgs',
    'KafkaBridgeSpecAuthenticationAccessTokenArgs',
    'KafkaBridgeSpecAuthenticationCertificateAndKeyArgs',
    'KafkaBridgeSpecAuthenticationClientSecretArgs',
    'KafkaBridgeSpecAuthenticationPasswordSecretArgs',
    'KafkaBridgeSpecAuthenticationRefreshTokenArgs',
    'KafkaBridgeSpecAuthenticationTlsTrustedCertificatesArgs',
    'KafkaBridgeSpecConsumerArgs',
    'KafkaBridgeSpecHttpArgs',
    'KafkaBridgeSpecHttpCorsArgs',
    'KafkaBridgeSpecJvmOptionsArgs',
    'KafkaBridgeSpecJvmOptionsJavaSystemPropertiesArgs',
    'KafkaBridgeSpecLivenessProbeArgs',
    'KafkaBridgeSpecLoggingArgs',
    'KafkaBridgeSpecProducerArgs',
    'KafkaBridgeSpecReadinessProbeArgs',
    'KafkaBridgeSpecResourcesArgs',
    'KafkaBridgeSpecTemplateArgs',
    'KafkaBridgeSpecTemplateApiServiceArgs',
    'KafkaBridgeSpecTemplateApiServiceMetadataArgs',
    'KafkaBridgeSpecTemplateBridgeContainerArgs',
    'KafkaBridgeSpecTemplateBridgeContainerEnvArgs',
    'KafkaBridgeSpecTemplateBridgeContainerSecurityContextArgs',
    'KafkaBridgeSpecTemplateBridgeContainerSecurityContextCapabilitiesArgs',
    'KafkaBridgeSpecTemplateBridgeContainerSecurityContextSeLinuxOptionsArgs',
    'KafkaBridgeSpecTemplateBridgeContainerSecurityContextWindowsOptionsArgs',
    'KafkaBridgeSpecTemplateDeploymentArgs',
    'KafkaBridgeSpecTemplateDeploymentMetadataArgs',
    'KafkaBridgeSpecTemplatePodArgs',
    'KafkaBridgeSpecTemplatePodAffinityArgs',
    'KafkaBridgeSpecTemplatePodAffinityNodeAffinityArgs',
    'KafkaBridgeSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs',
    'KafkaBridgeSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs',
    'KafkaBridgeSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs',
    'KafkaBridgeSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs',
    'KafkaBridgeSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs',
    'KafkaBridgeSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs',
    'KafkaBridgeSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs',
    'KafkaBridgeSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs',
    'KafkaBridgeSpecTemplatePodAffinityPodAffinityArgs',
    'KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs',
    'KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs',
    'KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs',
    'KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs',
    'KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs',
    'KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs',
    'KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs',
    'KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityArgs',
    'KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs',
    'KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs',
    'KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs',
    'KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs',
    'KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs',
    'KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs',
    'KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs',
    'KafkaBridgeSpecTemplatePodDisruptionBudgetArgs',
    'KafkaBridgeSpecTemplatePodDisruptionBudgetMetadataArgs',
    'KafkaBridgeSpecTemplatePodImagePullSecretsArgs',
    'KafkaBridgeSpecTemplatePodMetadataArgs',
    'KafkaBridgeSpecTemplatePodSecurityContextArgs',
    'KafkaBridgeSpecTemplatePodSecurityContextSeLinuxOptionsArgs',
    'KafkaBridgeSpecTemplatePodSecurityContextSysctlsArgs',
    'KafkaBridgeSpecTemplatePodSecurityContextWindowsOptionsArgs',
    'KafkaBridgeSpecTemplatePodTolerationsArgs',
    'KafkaBridgeSpecTlsArgs',
    'KafkaBridgeSpecTlsTrustedCertificatesArgs',
    'KafkaBridgeSpecTracingArgs',
    'KafkaBridgeStatusArgs',
    'KafkaBridgeStatusConditionsArgs',
    'KafkaBridgeStatusPodSelectorArgs',
    'KafkaBridgeStatusPodSelectorMatchExpressionsArgs',
]

@pulumi.input_type
class KafkaBridgeSpecArgs:
    def __init__(__self__, *,
                 bootstrap_servers: pulumi.Input[str],
                 authentication: Optional[pulumi.Input['KafkaBridgeSpecAuthenticationArgs']] = None,
                 consumer: Optional[pulumi.Input['KafkaBridgeSpecConsumerArgs']] = None,
                 enable_metrics: Optional[pulumi.Input[bool]] = None,
                 http: Optional[pulumi.Input['KafkaBridgeSpecHttpArgs']] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 jvm_options: Optional[pulumi.Input['KafkaBridgeSpecJvmOptionsArgs']] = None,
                 liveness_probe: Optional[pulumi.Input['KafkaBridgeSpecLivenessProbeArgs']] = None,
                 logging: Optional[pulumi.Input['KafkaBridgeSpecLoggingArgs']] = None,
                 producer: Optional[pulumi.Input['KafkaBridgeSpecProducerArgs']] = None,
                 readiness_probe: Optional[pulumi.Input['KafkaBridgeSpecReadinessProbeArgs']] = None,
                 replicas: Optional[pulumi.Input[float]] = None,
                 resources: Optional[pulumi.Input['KafkaBridgeSpecResourcesArgs']] = None,
                 template: Optional[pulumi.Input['KafkaBridgeSpecTemplateArgs']] = None,
                 tls: Optional[pulumi.Input['KafkaBridgeSpecTlsArgs']] = None,
                 tracing: Optional[pulumi.Input['KafkaBridgeSpecTracingArgs']] = None):
        """
        The specification of the Kafka Bridge.
        :param pulumi.Input[str] bootstrap_servers: A list of host:port pairs for establishing the initial connection to the Kafka cluster.
        :param pulumi.Input['KafkaBridgeSpecAuthenticationArgs'] authentication: Authentication configuration for connecting to the cluster.
        :param pulumi.Input['KafkaBridgeSpecConsumerArgs'] consumer: Kafka consumer related configuration.
        :param pulumi.Input[bool] enable_metrics: Enable the metrics for the Kafka Bridge. Default is false.
        :param pulumi.Input['KafkaBridgeSpecHttpArgs'] http: The HTTP related configuration.
        :param pulumi.Input[str] image: The docker image for the pods.
        :param pulumi.Input['KafkaBridgeSpecJvmOptionsArgs'] jvm_options: **Currently not supported** JVM Options for pods.
        :param pulumi.Input['KafkaBridgeSpecLivenessProbeArgs'] liveness_probe: Pod liveness checking.
        :param pulumi.Input['KafkaBridgeSpecLoggingArgs'] logging: Logging configuration for Kafka Bridge.
        :param pulumi.Input['KafkaBridgeSpecProducerArgs'] producer: Kafka producer related configuration.
        :param pulumi.Input['KafkaBridgeSpecReadinessProbeArgs'] readiness_probe: Pod readiness checking.
        :param pulumi.Input[float] replicas: The number of pods in the `Deployment`.
        :param pulumi.Input['KafkaBridgeSpecResourcesArgs'] resources: CPU and memory resources to reserve.
        :param pulumi.Input['KafkaBridgeSpecTemplateArgs'] template: Template for Kafka Bridge resources. The template allows users to specify how is the `Deployment` and `Pods` generated.
        :param pulumi.Input['KafkaBridgeSpecTlsArgs'] tls: TLS configuration for connecting Kafka Bridge to the cluster.
        :param pulumi.Input['KafkaBridgeSpecTracingArgs'] tracing: The configuration of tracing in Kafka Bridge.
        """
        pulumi.set(__self__, "bootstrap_servers", bootstrap_servers)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if consumer is not None:
            pulumi.set(__self__, "consumer", consumer)
        if enable_metrics is not None:
            pulumi.set(__self__, "enable_metrics", enable_metrics)
        if http is not None:
            pulumi.set(__self__, "http", http)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if jvm_options is not None:
            pulumi.set(__self__, "jvm_options", jvm_options)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if logging is not None:
            pulumi.set(__self__, "logging", logging)
        if producer is not None:
            pulumi.set(__self__, "producer", producer)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)
        if tracing is not None:
            pulumi.set(__self__, "tracing", tracing)

    @property
    @pulumi.getter(name="bootstrapServers")
    def bootstrap_servers(self) -> pulumi.Input[str]:
        """
        A list of host:port pairs for establishing the initial connection to the Kafka cluster.
        """
        return pulumi.get(self, "bootstrap_servers")

    @bootstrap_servers.setter
    def bootstrap_servers(self, value: pulumi.Input[str]):
        pulumi.set(self, "bootstrap_servers", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input['KafkaBridgeSpecAuthenticationArgs']]:
        """
        Authentication configuration for connecting to the cluster.
        """
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input['KafkaBridgeSpecAuthenticationArgs']]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter
    def consumer(self) -> Optional[pulumi.Input['KafkaBridgeSpecConsumerArgs']]:
        """
        Kafka consumer related configuration.
        """
        return pulumi.get(self, "consumer")

    @consumer.setter
    def consumer(self, value: Optional[pulumi.Input['KafkaBridgeSpecConsumerArgs']]):
        pulumi.set(self, "consumer", value)

    @property
    @pulumi.getter(name="enableMetrics")
    def enable_metrics(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable the metrics for the Kafka Bridge. Default is false.
        """
        return pulumi.get(self, "enable_metrics")

    @enable_metrics.setter
    def enable_metrics(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_metrics", value)

    @property
    @pulumi.getter
    def http(self) -> Optional[pulumi.Input['KafkaBridgeSpecHttpArgs']]:
        """
        The HTTP related configuration.
        """
        return pulumi.get(self, "http")

    @http.setter
    def http(self, value: Optional[pulumi.Input['KafkaBridgeSpecHttpArgs']]):
        pulumi.set(self, "http", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        The docker image for the pods.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="jvmOptions")
    def jvm_options(self) -> Optional[pulumi.Input['KafkaBridgeSpecJvmOptionsArgs']]:
        """
        **Currently not supported** JVM Options for pods.
        """
        return pulumi.get(self, "jvm_options")

    @jvm_options.setter
    def jvm_options(self, value: Optional[pulumi.Input['KafkaBridgeSpecJvmOptionsArgs']]):
        pulumi.set(self, "jvm_options", value)

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional[pulumi.Input['KafkaBridgeSpecLivenessProbeArgs']]:
        """
        Pod liveness checking.
        """
        return pulumi.get(self, "liveness_probe")

    @liveness_probe.setter
    def liveness_probe(self, value: Optional[pulumi.Input['KafkaBridgeSpecLivenessProbeArgs']]):
        pulumi.set(self, "liveness_probe", value)

    @property
    @pulumi.getter
    def logging(self) -> Optional[pulumi.Input['KafkaBridgeSpecLoggingArgs']]:
        """
        Logging configuration for Kafka Bridge.
        """
        return pulumi.get(self, "logging")

    @logging.setter
    def logging(self, value: Optional[pulumi.Input['KafkaBridgeSpecLoggingArgs']]):
        pulumi.set(self, "logging", value)

    @property
    @pulumi.getter
    def producer(self) -> Optional[pulumi.Input['KafkaBridgeSpecProducerArgs']]:
        """
        Kafka producer related configuration.
        """
        return pulumi.get(self, "producer")

    @producer.setter
    def producer(self, value: Optional[pulumi.Input['KafkaBridgeSpecProducerArgs']]):
        pulumi.set(self, "producer", value)

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional[pulumi.Input['KafkaBridgeSpecReadinessProbeArgs']]:
        """
        Pod readiness checking.
        """
        return pulumi.get(self, "readiness_probe")

    @readiness_probe.setter
    def readiness_probe(self, value: Optional[pulumi.Input['KafkaBridgeSpecReadinessProbeArgs']]):
        pulumi.set(self, "readiness_probe", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[float]]:
        """
        The number of pods in the `Deployment`.
        """
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['KafkaBridgeSpecResourcesArgs']]:
        """
        CPU and memory resources to reserve.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['KafkaBridgeSpecResourcesArgs']]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter
    def template(self) -> Optional[pulumi.Input['KafkaBridgeSpecTemplateArgs']]:
        """
        Template for Kafka Bridge resources. The template allows users to specify how is the `Deployment` and `Pods` generated.
        """
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: Optional[pulumi.Input['KafkaBridgeSpecTemplateArgs']]):
        pulumi.set(self, "template", value)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input['KafkaBridgeSpecTlsArgs']]:
        """
        TLS configuration for connecting Kafka Bridge to the cluster.
        """
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input['KafkaBridgeSpecTlsArgs']]):
        pulumi.set(self, "tls", value)

    @property
    @pulumi.getter
    def tracing(self) -> Optional[pulumi.Input['KafkaBridgeSpecTracingArgs']]:
        """
        The configuration of tracing in Kafka Bridge.
        """
        return pulumi.get(self, "tracing")

    @tracing.setter
    def tracing(self, value: Optional[pulumi.Input['KafkaBridgeSpecTracingArgs']]):
        pulumi.set(self, "tracing", value)


@pulumi.input_type
class KafkaBridgeSpecAuthenticationArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 access_token: Optional[pulumi.Input['KafkaBridgeSpecAuthenticationAccessTokenArgs']] = None,
                 access_token_is_jwt: Optional[pulumi.Input[bool]] = None,
                 certificate_and_key: Optional[pulumi.Input['KafkaBridgeSpecAuthenticationCertificateAndKeyArgs']] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input['KafkaBridgeSpecAuthenticationClientSecretArgs']] = None,
                 disable_tls_hostname_verification: Optional[pulumi.Input[bool]] = None,
                 max_token_expiry_seconds: Optional[pulumi.Input[float]] = None,
                 password_secret: Optional[pulumi.Input['KafkaBridgeSpecAuthenticationPasswordSecretArgs']] = None,
                 refresh_token: Optional[pulumi.Input['KafkaBridgeSpecAuthenticationRefreshTokenArgs']] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 tls_trusted_certificates: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecAuthenticationTlsTrustedCertificatesArgs']]]] = None,
                 token_endpoint_uri: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        Authentication configuration for connecting to the cluster.
        :param pulumi.Input[str] type: Authentication type. Currently the only supported types are `tls`, `scram-sha-512`, and `plain`. `scram-sha-512` type uses SASL SCRAM-SHA-512 Authentication. `plain` type uses SASL PLAIN Authentication. `oauth` type uses SASL OAUTHBEARER Authentication. The `tls` type uses TLS Client Authentication. The `tls` type is supported only over TLS connections.
        :param pulumi.Input['KafkaBridgeSpecAuthenticationAccessTokenArgs'] access_token: Link to Kubernetes Secret containing the access token which was obtained from the authorization server.
        :param pulumi.Input[bool] access_token_is_jwt: Configure whether access token should be treated as JWT. This should be set to `false` if the authorization server returns opaque tokens. Defaults to `true`.
        :param pulumi.Input['KafkaBridgeSpecAuthenticationCertificateAndKeyArgs'] certificate_and_key: Reference to the `Secret` which holds the certificate and private key pair.
        :param pulumi.Input[str] client_id: OAuth Client ID which the Kafka client can use to authenticate against the OAuth server and use the token endpoint URI.
        :param pulumi.Input['KafkaBridgeSpecAuthenticationClientSecretArgs'] client_secret: Link to Kubernetes Secret containing the OAuth client secret which the Kafka client can use to authenticate against the OAuth server and use the token endpoint URI.
        :param pulumi.Input[bool] disable_tls_hostname_verification: Enable or disable TLS hostname verification. Default value is `false`.
        :param pulumi.Input[float] max_token_expiry_seconds: Set or limit time-to-live of the access tokens to the specified number of seconds. This should be set if the authorization server returns opaque tokens.
        :param pulumi.Input['KafkaBridgeSpecAuthenticationPasswordSecretArgs'] password_secret: Reference to the `Secret` which holds the password.
        :param pulumi.Input['KafkaBridgeSpecAuthenticationRefreshTokenArgs'] refresh_token: Link to Kubernetes Secret containing the refresh token which can be used to obtain access token from the authorization server.
        :param pulumi.Input[str] scope: OAuth scope to use when authenticating against the authorization server. Some authorization servers require this to be set. The possible values depend on how authorization server is configured. By default `scope` is not specified when doing the token endpoint request.
        :param pulumi.Input[List[pulumi.Input['KafkaBridgeSpecAuthenticationTlsTrustedCertificatesArgs']]] tls_trusted_certificates: Trusted certificates for TLS connection to the OAuth server.
        :param pulumi.Input[str] token_endpoint_uri: Authorization server token endpoint URI.
        :param pulumi.Input[str] username: Username used for the authentication.
        """
        pulumi.set(__self__, "type", type)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if access_token_is_jwt is not None:
            pulumi.set(__self__, "access_token_is_jwt", access_token_is_jwt)
        if certificate_and_key is not None:
            pulumi.set(__self__, "certificate_and_key", certificate_and_key)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if disable_tls_hostname_verification is not None:
            pulumi.set(__self__, "disable_tls_hostname_verification", disable_tls_hostname_verification)
        if max_token_expiry_seconds is not None:
            pulumi.set(__self__, "max_token_expiry_seconds", max_token_expiry_seconds)
        if password_secret is not None:
            pulumi.set(__self__, "password_secret", password_secret)
        if refresh_token is not None:
            pulumi.set(__self__, "refresh_token", refresh_token)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if tls_trusted_certificates is not None:
            pulumi.set(__self__, "tls_trusted_certificates", tls_trusted_certificates)
        if token_endpoint_uri is not None:
            pulumi.set(__self__, "token_endpoint_uri", token_endpoint_uri)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Authentication type. Currently the only supported types are `tls`, `scram-sha-512`, and `plain`. `scram-sha-512` type uses SASL SCRAM-SHA-512 Authentication. `plain` type uses SASL PLAIN Authentication. `oauth` type uses SASL OAUTHBEARER Authentication. The `tls` type uses TLS Client Authentication. The `tls` type is supported only over TLS connections.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input['KafkaBridgeSpecAuthenticationAccessTokenArgs']]:
        """
        Link to Kubernetes Secret containing the access token which was obtained from the authorization server.
        """
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input['KafkaBridgeSpecAuthenticationAccessTokenArgs']]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="accessTokenIsJwt")
    def access_token_is_jwt(self) -> Optional[pulumi.Input[bool]]:
        """
        Configure whether access token should be treated as JWT. This should be set to `false` if the authorization server returns opaque tokens. Defaults to `true`.
        """
        return pulumi.get(self, "access_token_is_jwt")

    @access_token_is_jwt.setter
    def access_token_is_jwt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "access_token_is_jwt", value)

    @property
    @pulumi.getter(name="certificateAndKey")
    def certificate_and_key(self) -> Optional[pulumi.Input['KafkaBridgeSpecAuthenticationCertificateAndKeyArgs']]:
        """
        Reference to the `Secret` which holds the certificate and private key pair.
        """
        return pulumi.get(self, "certificate_and_key")

    @certificate_and_key.setter
    def certificate_and_key(self, value: Optional[pulumi.Input['KafkaBridgeSpecAuthenticationCertificateAndKeyArgs']]):
        pulumi.set(self, "certificate_and_key", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        OAuth Client ID which the Kafka client can use to authenticate against the OAuth server and use the token endpoint URI.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input['KafkaBridgeSpecAuthenticationClientSecretArgs']]:
        """
        Link to Kubernetes Secret containing the OAuth client secret which the Kafka client can use to authenticate against the OAuth server and use the token endpoint URI.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input['KafkaBridgeSpecAuthenticationClientSecretArgs']]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="disableTlsHostnameVerification")
    def disable_tls_hostname_verification(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable or disable TLS hostname verification. Default value is `false`.
        """
        return pulumi.get(self, "disable_tls_hostname_verification")

    @disable_tls_hostname_verification.setter
    def disable_tls_hostname_verification(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_tls_hostname_verification", value)

    @property
    @pulumi.getter(name="maxTokenExpirySeconds")
    def max_token_expiry_seconds(self) -> Optional[pulumi.Input[float]]:
        """
        Set or limit time-to-live of the access tokens to the specified number of seconds. This should be set if the authorization server returns opaque tokens.
        """
        return pulumi.get(self, "max_token_expiry_seconds")

    @max_token_expiry_seconds.setter
    def max_token_expiry_seconds(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_token_expiry_seconds", value)

    @property
    @pulumi.getter(name="passwordSecret")
    def password_secret(self) -> Optional[pulumi.Input['KafkaBridgeSpecAuthenticationPasswordSecretArgs']]:
        """
        Reference to the `Secret` which holds the password.
        """
        return pulumi.get(self, "password_secret")

    @password_secret.setter
    def password_secret(self, value: Optional[pulumi.Input['KafkaBridgeSpecAuthenticationPasswordSecretArgs']]):
        pulumi.set(self, "password_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> Optional[pulumi.Input['KafkaBridgeSpecAuthenticationRefreshTokenArgs']]:
        """
        Link to Kubernetes Secret containing the refresh token which can be used to obtain access token from the authorization server.
        """
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: Optional[pulumi.Input['KafkaBridgeSpecAuthenticationRefreshTokenArgs']]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        OAuth scope to use when authenticating against the authorization server. Some authorization servers require this to be set. The possible values depend on how authorization server is configured. By default `scope` is not specified when doing the token endpoint request.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="tlsTrustedCertificates")
    def tls_trusted_certificates(self) -> Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecAuthenticationTlsTrustedCertificatesArgs']]]]:
        """
        Trusted certificates for TLS connection to the OAuth server.
        """
        return pulumi.get(self, "tls_trusted_certificates")

    @tls_trusted_certificates.setter
    def tls_trusted_certificates(self, value: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecAuthenticationTlsTrustedCertificatesArgs']]]]):
        pulumi.set(self, "tls_trusted_certificates", value)

    @property
    @pulumi.getter(name="tokenEndpointUri")
    def token_endpoint_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Authorization server token endpoint URI.
        """
        return pulumi.get(self, "token_endpoint_uri")

    @token_endpoint_uri.setter
    def token_endpoint_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_endpoint_uri", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username used for the authentication.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class KafkaBridgeSpecAuthenticationAccessTokenArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 secret_name: pulumi.Input[str]):
        """
        Link to Kubernetes Secret containing the access token which was obtained from the authorization server.
        :param pulumi.Input[str] key: The key under which the secret value is stored in the Kubernetes Secret.
        :param pulumi.Input[str] secret_name: The name of the Kubernetes Secret containing the secret value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key under which the secret value is stored in the Kubernetes Secret.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[str]:
        """
        The name of the Kubernetes Secret containing the secret value.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class KafkaBridgeSpecAuthenticationCertificateAndKeyArgs:
    def __init__(__self__, *,
                 certificate: pulumi.Input[str],
                 key: pulumi.Input[str],
                 secret_name: pulumi.Input[str]):
        """
        Reference to the `Secret` which holds the certificate and private key pair.
        :param pulumi.Input[str] certificate: The name of the file certificate in the Secret.
        :param pulumi.Input[str] key: The name of the private key in the Secret.
        :param pulumi.Input[str] secret_name: The name of the Secret containing the certificate.
        """
        pulumi.set(__self__, "certificate", certificate)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def certificate(self) -> pulumi.Input[str]:
        """
        The name of the file certificate in the Secret.
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: pulumi.Input[str]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The name of the private key in the Secret.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[str]:
        """
        The name of the Secret containing the certificate.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class KafkaBridgeSpecAuthenticationClientSecretArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 secret_name: pulumi.Input[str]):
        """
        Link to Kubernetes Secret containing the OAuth client secret which the Kafka client can use to authenticate against the OAuth server and use the token endpoint URI.
        :param pulumi.Input[str] key: The key under which the secret value is stored in the Kubernetes Secret.
        :param pulumi.Input[str] secret_name: The name of the Kubernetes Secret containing the secret value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key under which the secret value is stored in the Kubernetes Secret.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[str]:
        """
        The name of the Kubernetes Secret containing the secret value.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class KafkaBridgeSpecAuthenticationPasswordSecretArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 secret_name: pulumi.Input[str]):
        """
        Reference to the `Secret` which holds the password.
        :param pulumi.Input[str] password: The name of the key in the Secret under which the password is stored.
        :param pulumi.Input[str] secret_name: The name of the Secret containing the password.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        The name of the key in the Secret under which the password is stored.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[str]:
        """
        The name of the Secret containing the password.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class KafkaBridgeSpecAuthenticationRefreshTokenArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 secret_name: pulumi.Input[str]):
        """
        Link to Kubernetes Secret containing the refresh token which can be used to obtain access token from the authorization server.
        :param pulumi.Input[str] key: The key under which the secret value is stored in the Kubernetes Secret.
        :param pulumi.Input[str] secret_name: The name of the Kubernetes Secret containing the secret value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key under which the secret value is stored in the Kubernetes Secret.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[str]:
        """
        The name of the Kubernetes Secret containing the secret value.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class KafkaBridgeSpecAuthenticationTlsTrustedCertificatesArgs:
    def __init__(__self__, *,
                 certificate: pulumi.Input[str],
                 secret_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] certificate: The name of the file certificate in the Secret.
        :param pulumi.Input[str] secret_name: The name of the Secret containing the certificate.
        """
        pulumi.set(__self__, "certificate", certificate)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def certificate(self) -> pulumi.Input[str]:
        """
        The name of the file certificate in the Secret.
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: pulumi.Input[str]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[str]:
        """
        The name of the Secret containing the certificate.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class KafkaBridgeSpecConsumerArgs:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        Kafka consumer related configuration.
        :param pulumi.Input[Mapping[str, Any]] config: The Kafka consumer configuration used for consumer instances created by the bridge. Properties with the following prefixes cannot be set: ssl., bootstrap.servers, group.id, sasl., security. (with the exception of: ssl.endpoint.identification.algorithm, ssl.cipher.suites, ssl.protocol, ssl.enabled.protocols).
        """
        if config is not None:
            pulumi.set(__self__, "config", config)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The Kafka consumer configuration used for consumer instances created by the bridge. Properties with the following prefixes cannot be set: ssl., bootstrap.servers, group.id, sasl., security. (with the exception of: ssl.endpoint.identification.algorithm, ssl.cipher.suites, ssl.protocol, ssl.enabled.protocols).
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "config", value)


@pulumi.input_type
class KafkaBridgeSpecHttpArgs:
    def __init__(__self__, *,
                 cors: Optional[pulumi.Input['KafkaBridgeSpecHttpCorsArgs']] = None,
                 port: Optional[pulumi.Input[float]] = None):
        """
        The HTTP related configuration.
        :param pulumi.Input['KafkaBridgeSpecHttpCorsArgs'] cors: CORS configuration for the HTTP Bridge.
        :param pulumi.Input[float] port: The port which is the server listening on.
        """
        if cors is not None:
            pulumi.set(__self__, "cors", cors)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def cors(self) -> Optional[pulumi.Input['KafkaBridgeSpecHttpCorsArgs']]:
        """
        CORS configuration for the HTTP Bridge.
        """
        return pulumi.get(self, "cors")

    @cors.setter
    def cors(self, value: Optional[pulumi.Input['KafkaBridgeSpecHttpCorsArgs']]):
        pulumi.set(self, "cors", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[float]]:
        """
        The port which is the server listening on.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class KafkaBridgeSpecHttpCorsArgs:
    def __init__(__self__, *,
                 allowed_methods: pulumi.Input[List[pulumi.Input[str]]],
                 allowed_origins: pulumi.Input[List[pulumi.Input[str]]]):
        """
        CORS configuration for the HTTP Bridge.
        :param pulumi.Input[List[pulumi.Input[str]]] allowed_methods: List of allowed HTTP methods.
        :param pulumi.Input[List[pulumi.Input[str]]] allowed_origins: List of allowed origins. Java regular expressions can be used.
        """
        pulumi.set(__self__, "allowed_methods", allowed_methods)
        pulumi.set(__self__, "allowed_origins", allowed_origins)

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> pulumi.Input[List[pulumi.Input[str]]]:
        """
        List of allowed HTTP methods.
        """
        return pulumi.get(self, "allowed_methods")

    @allowed_methods.setter
    def allowed_methods(self, value: pulumi.Input[List[pulumi.Input[str]]]):
        pulumi.set(self, "allowed_methods", value)

    @property
    @pulumi.getter(name="allowedOrigins")
    def allowed_origins(self) -> pulumi.Input[List[pulumi.Input[str]]]:
        """
        List of allowed origins. Java regular expressions can be used.
        """
        return pulumi.get(self, "allowed_origins")

    @allowed_origins.setter
    def allowed_origins(self, value: pulumi.Input[List[pulumi.Input[str]]]):
        pulumi.set(self, "allowed_origins", value)


@pulumi.input_type
class KafkaBridgeSpecJvmOptionsArgs:
    def __init__(__self__, *,
                 __xx: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 __xms: Optional[pulumi.Input[str]] = None,
                 __xmx: Optional[pulumi.Input[str]] = None,
                 gc_logging_enabled: Optional[pulumi.Input[bool]] = None,
                 java_system_properties: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecJvmOptionsJavaSystemPropertiesArgs']]]] = None):
        """
        **Currently not supported** JVM Options for pods.
        :param pulumi.Input[Mapping[str, Any]] __xx: A map of -XX options to the JVM.
        :param pulumi.Input[str] __xms: -Xms option to to the JVM.
        :param pulumi.Input[str] __xmx: -Xmx option to to the JVM.
        :param pulumi.Input[bool] gc_logging_enabled: Specifies whether the Garbage Collection logging is enabled. The default is false.
        :param pulumi.Input[List[pulumi.Input['KafkaBridgeSpecJvmOptionsJavaSystemPropertiesArgs']]] java_system_properties: A map of additional system properties which will be passed using the `-D` option to the JVM.
        """
        if __xx is not None:
            pulumi.set(__self__, "__xx", __xx)
        if __xms is not None:
            pulumi.set(__self__, "__xms", __xms)
        if __xmx is not None:
            pulumi.set(__self__, "__xmx", __xmx)
        if gc_logging_enabled is not None:
            pulumi.set(__self__, "gc_logging_enabled", gc_logging_enabled)
        if java_system_properties is not None:
            pulumi.set(__self__, "java_system_properties", java_system_properties)

    @property
    @pulumi.getter(name="-XX")
    def __xx(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        A map of -XX options to the JVM.
        """
        return pulumi.get(self, "__xx")

    @__xx.setter
    def __xx(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "__xx", value)

    @property
    @pulumi.getter(name="-Xms")
    def __xms(self) -> Optional[pulumi.Input[str]]:
        """
        -Xms option to to the JVM.
        """
        return pulumi.get(self, "__xms")

    @__xms.setter
    def __xms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "__xms", value)

    @property
    @pulumi.getter(name="-Xmx")
    def __xmx(self) -> Optional[pulumi.Input[str]]:
        """
        -Xmx option to to the JVM.
        """
        return pulumi.get(self, "__xmx")

    @__xmx.setter
    def __xmx(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "__xmx", value)

    @property
    @pulumi.getter(name="gcLoggingEnabled")
    def gc_logging_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the Garbage Collection logging is enabled. The default is false.
        """
        return pulumi.get(self, "gc_logging_enabled")

    @gc_logging_enabled.setter
    def gc_logging_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "gc_logging_enabled", value)

    @property
    @pulumi.getter(name="javaSystemProperties")
    def java_system_properties(self) -> Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecJvmOptionsJavaSystemPropertiesArgs']]]]:
        """
        A map of additional system properties which will be passed using the `-D` option to the JVM.
        """
        return pulumi.get(self, "java_system_properties")

    @java_system_properties.setter
    def java_system_properties(self, value: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecJvmOptionsJavaSystemPropertiesArgs']]]]):
        pulumi.set(self, "java_system_properties", value)


@pulumi.input_type
class KafkaBridgeSpecJvmOptionsJavaSystemPropertiesArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The system property name.
        :param pulumi.Input[str] value: The system property value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The system property name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The system property value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class KafkaBridgeSpecLivenessProbeArgs:
    def __init__(__self__, *,
                 failure_threshold: Optional[pulumi.Input[float]] = None,
                 initial_delay_seconds: Optional[pulumi.Input[float]] = None,
                 period_seconds: Optional[pulumi.Input[float]] = None,
                 success_threshold: Optional[pulumi.Input[float]] = None,
                 timeout_seconds: Optional[pulumi.Input[float]] = None):
        """
        Pod liveness checking.
        :param pulumi.Input[float] failure_threshold: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        :param pulumi.Input[float] initial_delay_seconds: The initial delay before first the health is first checked.
        :param pulumi.Input[float] period_seconds: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        :param pulumi.Input[float] success_threshold: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
        :param pulumi.Input[float] timeout_seconds: The timeout for each attempted health check.
        """
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[float]]:
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        """
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[float]]:
        """
        The initial delay before first the health is first checked.
        """
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[float]]:
        """
        How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[float]]:
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
        """
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[float]]:
        """
        The timeout for each attempted health check.
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class KafkaBridgeSpecLoggingArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 loggers: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Logging configuration for Kafka Bridge.
        :param pulumi.Input[str] type: Logging type, must be either 'inline' or 'external'.
        :param pulumi.Input[Mapping[str, Any]] loggers: A Map from logger name to logger level.
        :param pulumi.Input[str] name: The name of the `ConfigMap` from which to get the logging configuration.
        """
        pulumi.set(__self__, "type", type)
        if loggers is not None:
            pulumi.set(__self__, "loggers", loggers)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Logging type, must be either 'inline' or 'external'.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def loggers(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        A Map from logger name to logger level.
        """
        return pulumi.get(self, "loggers")

    @loggers.setter
    def loggers(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "loggers", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the `ConfigMap` from which to get the logging configuration.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class KafkaBridgeSpecProducerArgs:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        Kafka producer related configuration.
        :param pulumi.Input[Mapping[str, Any]] config: The Kafka producer configuration used for producer instances created by the bridge. Properties with the following prefixes cannot be set: ssl., bootstrap.servers, sasl., security. (with the exception of: ssl.endpoint.identification.algorithm, ssl.cipher.suites, ssl.protocol, ssl.enabled.protocols).
        """
        if config is not None:
            pulumi.set(__self__, "config", config)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The Kafka producer configuration used for producer instances created by the bridge. Properties with the following prefixes cannot be set: ssl., bootstrap.servers, sasl., security. (with the exception of: ssl.endpoint.identification.algorithm, ssl.cipher.suites, ssl.protocol, ssl.enabled.protocols).
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "config", value)


@pulumi.input_type
class KafkaBridgeSpecReadinessProbeArgs:
    def __init__(__self__, *,
                 failure_threshold: Optional[pulumi.Input[float]] = None,
                 initial_delay_seconds: Optional[pulumi.Input[float]] = None,
                 period_seconds: Optional[pulumi.Input[float]] = None,
                 success_threshold: Optional[pulumi.Input[float]] = None,
                 timeout_seconds: Optional[pulumi.Input[float]] = None):
        """
        Pod readiness checking.
        :param pulumi.Input[float] failure_threshold: Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        :param pulumi.Input[float] initial_delay_seconds: The initial delay before first the health is first checked.
        :param pulumi.Input[float] period_seconds: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        :param pulumi.Input[float] success_threshold: Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
        :param pulumi.Input[float] timeout_seconds: The timeout for each attempted health check.
        """
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[float]]:
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        """
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[float]]:
        """
        The initial delay before first the health is first checked.
        """
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[float]]:
        """
        How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[float]]:
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
        """
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[float]]:
        """
        The timeout for each attempted health check.
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class KafkaBridgeSpecResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        CPU and memory resources to reserve.
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class KafkaBridgeSpecTemplateArgs:
    def __init__(__self__, *,
                 api_service: Optional[pulumi.Input['KafkaBridgeSpecTemplateApiServiceArgs']] = None,
                 bridge_container: Optional[pulumi.Input['KafkaBridgeSpecTemplateBridgeContainerArgs']] = None,
                 deployment: Optional[pulumi.Input['KafkaBridgeSpecTemplateDeploymentArgs']] = None,
                 pod: Optional[pulumi.Input['KafkaBridgeSpecTemplatePodArgs']] = None,
                 pod_disruption_budget: Optional[pulumi.Input['KafkaBridgeSpecTemplatePodDisruptionBudgetArgs']] = None):
        """
        Template for Kafka Bridge resources. The template allows users to specify how is the `Deployment` and `Pods` generated.
        :param pulumi.Input['KafkaBridgeSpecTemplateApiServiceArgs'] api_service: Template for Kafka Bridge API `Service`.
        :param pulumi.Input['KafkaBridgeSpecTemplateBridgeContainerArgs'] bridge_container: Template for the Kafka Bridge container.
        :param pulumi.Input['KafkaBridgeSpecTemplateDeploymentArgs'] deployment: Template for Kafka Bridge `Deployment`.
        :param pulumi.Input['KafkaBridgeSpecTemplatePodArgs'] pod: Template for Kafka Bridge `Pods`.
        :param pulumi.Input['KafkaBridgeSpecTemplatePodDisruptionBudgetArgs'] pod_disruption_budget: Template for Kafka Bridge `PodDisruptionBudget`.
        """
        if api_service is not None:
            pulumi.set(__self__, "api_service", api_service)
        if bridge_container is not None:
            pulumi.set(__self__, "bridge_container", bridge_container)
        if deployment is not None:
            pulumi.set(__self__, "deployment", deployment)
        if pod is not None:
            pulumi.set(__self__, "pod", pod)
        if pod_disruption_budget is not None:
            pulumi.set(__self__, "pod_disruption_budget", pod_disruption_budget)

    @property
    @pulumi.getter(name="apiService")
    def api_service(self) -> Optional[pulumi.Input['KafkaBridgeSpecTemplateApiServiceArgs']]:
        """
        Template for Kafka Bridge API `Service`.
        """
        return pulumi.get(self, "api_service")

    @api_service.setter
    def api_service(self, value: Optional[pulumi.Input['KafkaBridgeSpecTemplateApiServiceArgs']]):
        pulumi.set(self, "api_service", value)

    @property
    @pulumi.getter(name="bridgeContainer")
    def bridge_container(self) -> Optional[pulumi.Input['KafkaBridgeSpecTemplateBridgeContainerArgs']]:
        """
        Template for the Kafka Bridge container.
        """
        return pulumi.get(self, "bridge_container")

    @bridge_container.setter
    def bridge_container(self, value: Optional[pulumi.Input['KafkaBridgeSpecTemplateBridgeContainerArgs']]):
        pulumi.set(self, "bridge_container", value)

    @property
    @pulumi.getter
    def deployment(self) -> Optional[pulumi.Input['KafkaBridgeSpecTemplateDeploymentArgs']]:
        """
        Template for Kafka Bridge `Deployment`.
        """
        return pulumi.get(self, "deployment")

    @deployment.setter
    def deployment(self, value: Optional[pulumi.Input['KafkaBridgeSpecTemplateDeploymentArgs']]):
        pulumi.set(self, "deployment", value)

    @property
    @pulumi.getter
    def pod(self) -> Optional[pulumi.Input['KafkaBridgeSpecTemplatePodArgs']]:
        """
        Template for Kafka Bridge `Pods`.
        """
        return pulumi.get(self, "pod")

    @pod.setter
    def pod(self, value: Optional[pulumi.Input['KafkaBridgeSpecTemplatePodArgs']]):
        pulumi.set(self, "pod", value)

    @property
    @pulumi.getter(name="podDisruptionBudget")
    def pod_disruption_budget(self) -> Optional[pulumi.Input['KafkaBridgeSpecTemplatePodDisruptionBudgetArgs']]:
        """
        Template for Kafka Bridge `PodDisruptionBudget`.
        """
        return pulumi.get(self, "pod_disruption_budget")

    @pod_disruption_budget.setter
    def pod_disruption_budget(self, value: Optional[pulumi.Input['KafkaBridgeSpecTemplatePodDisruptionBudgetArgs']]):
        pulumi.set(self, "pod_disruption_budget", value)


@pulumi.input_type
class KafkaBridgeSpecTemplateApiServiceArgs:
    def __init__(__self__, *,
                 metadata: Optional[pulumi.Input['KafkaBridgeSpecTemplateApiServiceMetadataArgs']] = None):
        """
        Template for Kafka Bridge API `Service`.
        :param pulumi.Input['KafkaBridgeSpecTemplateApiServiceMetadataArgs'] metadata: Metadata applied to the resource.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['KafkaBridgeSpecTemplateApiServiceMetadataArgs']]:
        """
        Metadata applied to the resource.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['KafkaBridgeSpecTemplateApiServiceMetadataArgs']]):
        pulumi.set(self, "metadata", value)


@pulumi.input_type
class KafkaBridgeSpecTemplateApiServiceMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        Metadata applied to the resource.
        :param pulumi.Input[Mapping[str, Any]] annotations: Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
        :param pulumi.Input[Mapping[str, Any]] labels: Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class KafkaBridgeSpecTemplateBridgeContainerArgs:
    def __init__(__self__, *,
                 env: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplateBridgeContainerEnvArgs']]]] = None,
                 security_context: Optional[pulumi.Input['KafkaBridgeSpecTemplateBridgeContainerSecurityContextArgs']] = None):
        """
        Template for the Kafka Bridge container.
        :param pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplateBridgeContainerEnvArgs']]] env: Environment variables which should be applied to the container.
        :param pulumi.Input['KafkaBridgeSpecTemplateBridgeContainerSecurityContextArgs'] security_context: Security context for the container.
        """
        if env is not None:
            pulumi.set(__self__, "env", env)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplateBridgeContainerEnvArgs']]]]:
        """
        Environment variables which should be applied to the container.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplateBridgeContainerEnvArgs']]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional[pulumi.Input['KafkaBridgeSpecTemplateBridgeContainerSecurityContextArgs']]:
        """
        Security context for the container.
        """
        return pulumi.get(self, "security_context")

    @security_context.setter
    def security_context(self, value: Optional[pulumi.Input['KafkaBridgeSpecTemplateBridgeContainerSecurityContextArgs']]):
        pulumi.set(self, "security_context", value)


@pulumi.input_type
class KafkaBridgeSpecTemplateBridgeContainerEnvArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The environment variable key.
        :param pulumi.Input[str] value: The environment variable value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The environment variable key.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The environment variable value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class KafkaBridgeSpecTemplateBridgeContainerSecurityContextArgs:
    def __init__(__self__, *,
                 allow_privilege_escalation: Optional[pulumi.Input[bool]] = None,
                 capabilities: Optional[pulumi.Input['KafkaBridgeSpecTemplateBridgeContainerSecurityContextCapabilitiesArgs']] = None,
                 privileged: Optional[pulumi.Input[bool]] = None,
                 proc_mount: Optional[pulumi.Input[str]] = None,
                 read_only_root_filesystem: Optional[pulumi.Input[bool]] = None,
                 run_as_group: Optional[pulumi.Input[float]] = None,
                 run_as_non_root: Optional[pulumi.Input[bool]] = None,
                 run_as_user: Optional[pulumi.Input[float]] = None,
                 se_linux_options: Optional[pulumi.Input['KafkaBridgeSpecTemplateBridgeContainerSecurityContextSeLinuxOptionsArgs']] = None,
                 windows_options: Optional[pulumi.Input['KafkaBridgeSpecTemplateBridgeContainerSecurityContextWindowsOptionsArgs']] = None):
        """
        Security context for the container.
        """
        if allow_privilege_escalation is not None:
            pulumi.set(__self__, "allow_privilege_escalation", allow_privilege_escalation)
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if privileged is not None:
            pulumi.set(__self__, "privileged", privileged)
        if proc_mount is not None:
            pulumi.set(__self__, "proc_mount", proc_mount)
        if read_only_root_filesystem is not None:
            pulumi.set(__self__, "read_only_root_filesystem", read_only_root_filesystem)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if windows_options is not None:
            pulumi.set(__self__, "windows_options", windows_options)

    @property
    @pulumi.getter(name="allowPrivilegeEscalation")
    def allow_privilege_escalation(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_privilege_escalation")

    @allow_privilege_escalation.setter
    def allow_privilege_escalation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_privilege_escalation", value)

    @property
    @pulumi.getter
    def capabilities(self) -> Optional[pulumi.Input['KafkaBridgeSpecTemplateBridgeContainerSecurityContextCapabilitiesArgs']]:
        return pulumi.get(self, "capabilities")

    @capabilities.setter
    def capabilities(self, value: Optional[pulumi.Input['KafkaBridgeSpecTemplateBridgeContainerSecurityContextCapabilitiesArgs']]):
        pulumi.set(self, "capabilities", value)

    @property
    @pulumi.getter
    def privileged(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "privileged")

    @privileged.setter
    def privileged(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "privileged", value)

    @property
    @pulumi.getter(name="procMount")
    def proc_mount(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proc_mount")

    @proc_mount.setter
    def proc_mount(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proc_mount", value)

    @property
    @pulumi.getter(name="readOnlyRootFilesystem")
    def read_only_root_filesystem(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "read_only_root_filesystem")

    @read_only_root_filesystem.setter
    def read_only_root_filesystem(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only_root_filesystem", value)

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "run_as_group")

    @run_as_group.setter
    def run_as_group(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "run_as_group", value)

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "run_as_non_root")

    @run_as_non_root.setter
    def run_as_non_root(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_as_non_root", value)

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "run_as_user")

    @run_as_user.setter
    def run_as_user(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "run_as_user", value)

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(self) -> Optional[pulumi.Input['KafkaBridgeSpecTemplateBridgeContainerSecurityContextSeLinuxOptionsArgs']]:
        return pulumi.get(self, "se_linux_options")

    @se_linux_options.setter
    def se_linux_options(self, value: Optional[pulumi.Input['KafkaBridgeSpecTemplateBridgeContainerSecurityContextSeLinuxOptionsArgs']]):
        pulumi.set(self, "se_linux_options", value)

    @property
    @pulumi.getter(name="windowsOptions")
    def windows_options(self) -> Optional[pulumi.Input['KafkaBridgeSpecTemplateBridgeContainerSecurityContextWindowsOptionsArgs']]:
        return pulumi.get(self, "windows_options")

    @windows_options.setter
    def windows_options(self, value: Optional[pulumi.Input['KafkaBridgeSpecTemplateBridgeContainerSecurityContextWindowsOptionsArgs']]):
        pulumi.set(self, "windows_options", value)


@pulumi.input_type
class KafkaBridgeSpecTemplateBridgeContainerSecurityContextCapabilitiesArgs:
    def __init__(__self__, *,
                 add: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 drop: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        if add is not None:
            pulumi.set(__self__, "add", add)
        if drop is not None:
            pulumi.set(__self__, "drop", drop)

    @property
    @pulumi.getter
    def add(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "add")

    @add.setter
    def add(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "add", value)

    @property
    @pulumi.getter
    def drop(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "drop")

    @drop.setter
    def drop(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "drop", value)


@pulumi.input_type
class KafkaBridgeSpecTemplateBridgeContainerSecurityContextSeLinuxOptionsArgs:
    def __init__(__self__, *,
                 level: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class KafkaBridgeSpecTemplateBridgeContainerSecurityContextWindowsOptionsArgs:
    def __init__(__self__, *,
                 gmsa_credential_spec: Optional[pulumi.Input[str]] = None,
                 gmsa_credential_spec_name: Optional[pulumi.Input[str]] = None):
        if gmsa_credential_spec is not None:
            pulumi.set(__self__, "gmsa_credential_spec", gmsa_credential_spec)
        if gmsa_credential_spec_name is not None:
            pulumi.set(__self__, "gmsa_credential_spec_name", gmsa_credential_spec_name)

    @property
    @pulumi.getter(name="gmsaCredentialSpec")
    def gmsa_credential_spec(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gmsa_credential_spec")

    @gmsa_credential_spec.setter
    def gmsa_credential_spec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gmsa_credential_spec", value)

    @property
    @pulumi.getter(name="gmsaCredentialSpecName")
    def gmsa_credential_spec_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gmsa_credential_spec_name")

    @gmsa_credential_spec_name.setter
    def gmsa_credential_spec_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gmsa_credential_spec_name", value)


@pulumi.input_type
class KafkaBridgeSpecTemplateDeploymentArgs:
    def __init__(__self__, *,
                 metadata: Optional[pulumi.Input['KafkaBridgeSpecTemplateDeploymentMetadataArgs']] = None):
        """
        Template for Kafka Bridge `Deployment`.
        :param pulumi.Input['KafkaBridgeSpecTemplateDeploymentMetadataArgs'] metadata: Metadata applied to the resource.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['KafkaBridgeSpecTemplateDeploymentMetadataArgs']]:
        """
        Metadata applied to the resource.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['KafkaBridgeSpecTemplateDeploymentMetadataArgs']]):
        pulumi.set(self, "metadata", value)


@pulumi.input_type
class KafkaBridgeSpecTemplateDeploymentMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        Metadata applied to the resource.
        :param pulumi.Input[Mapping[str, Any]] annotations: Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
        :param pulumi.Input[Mapping[str, Any]] labels: Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class KafkaBridgeSpecTemplatePodArgs:
    def __init__(__self__, *,
                 affinity: Optional[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityArgs']] = None,
                 image_pull_secrets: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodImagePullSecretsArgs']]]] = None,
                 metadata: Optional[pulumi.Input['KafkaBridgeSpecTemplatePodMetadataArgs']] = None,
                 priority_class_name: Optional[pulumi.Input[str]] = None,
                 scheduler_name: Optional[pulumi.Input[str]] = None,
                 security_context: Optional[pulumi.Input['KafkaBridgeSpecTemplatePodSecurityContextArgs']] = None,
                 termination_grace_period_seconds: Optional[pulumi.Input[float]] = None,
                 tolerations: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodTolerationsArgs']]]] = None):
        """
        Template for Kafka Bridge `Pods`.
        :param pulumi.Input['KafkaBridgeSpecTemplatePodAffinityArgs'] affinity: The pod's affinity rules.
        :param pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodImagePullSecretsArgs']]] image_pull_secrets: List of references to secrets in the same namespace to use for pulling any of the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment variable in Cluster Operator and the `imagePullSecrets` option are specified, only the `imagePullSecrets` variable is used and the `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.
        :param pulumi.Input['KafkaBridgeSpecTemplatePodMetadataArgs'] metadata: Metadata applied to the resource.
        :param pulumi.Input[str] priority_class_name: The name of the priority class used to assign priority to the pods. For more information about priority classes, see {K8sPriorityClass}.
        :param pulumi.Input[str] scheduler_name: The name of the scheduler used to dispatch this `Pod`. If not specified, the default scheduler will be used.
        :param pulumi.Input['KafkaBridgeSpecTemplatePodSecurityContextArgs'] security_context: Configures pod-level security attributes and common container settings.
        :param pulumi.Input[float] termination_grace_period_seconds: The grace period is the duration in seconds after the processes running in the pod are sent a termination signal, and the time when the processes are forcibly halted with a kill signal. Set this value to longer than the expected cleanup time for your process. Value must be a non-negative integer. A zero value indicates delete immediately. You might need to increase the grace period for very large Kafka clusters, so that the Kafka brokers have enough time to transfer their work to another broker before they are terminated. Defaults to 30 seconds.
        :param pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodTolerationsArgs']]] tolerations: The pod's tolerations.
        """
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if image_pull_secrets is not None:
            pulumi.set(__self__, "image_pull_secrets", image_pull_secrets)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if scheduler_name is not None:
            pulumi.set(__self__, "scheduler_name", scheduler_name)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if termination_grace_period_seconds is not None:
            pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(self) -> Optional[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityArgs']]:
        """
        The pod's affinity rules.
        """
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(self, value: Optional[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityArgs']]):
        pulumi.set(self, "affinity", value)

    @property
    @pulumi.getter(name="imagePullSecrets")
    def image_pull_secrets(self) -> Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodImagePullSecretsArgs']]]]:
        """
        List of references to secrets in the same namespace to use for pulling any of the images used by this Pod. When the `STRIMZI_IMAGE_PULL_SECRETS` environment variable in Cluster Operator and the `imagePullSecrets` option are specified, only the `imagePullSecrets` variable is used and the `STRIMZI_IMAGE_PULL_SECRETS` variable is ignored.
        """
        return pulumi.get(self, "image_pull_secrets")

    @image_pull_secrets.setter
    def image_pull_secrets(self, value: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodImagePullSecretsArgs']]]]):
        pulumi.set(self, "image_pull_secrets", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['KafkaBridgeSpecTemplatePodMetadataArgs']]:
        """
        Metadata applied to the resource.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['KafkaBridgeSpecTemplatePodMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the priority class used to assign priority to the pods. For more information about priority classes, see {K8sPriorityClass}.
        """
        return pulumi.get(self, "priority_class_name")

    @priority_class_name.setter
    def priority_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_class_name", value)

    @property
    @pulumi.getter(name="schedulerName")
    def scheduler_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the scheduler used to dispatch this `Pod`. If not specified, the default scheduler will be used.
        """
        return pulumi.get(self, "scheduler_name")

    @scheduler_name.setter
    def scheduler_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheduler_name", value)

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional[pulumi.Input['KafkaBridgeSpecTemplatePodSecurityContextArgs']]:
        """
        Configures pod-level security attributes and common container settings.
        """
        return pulumi.get(self, "security_context")

    @security_context.setter
    def security_context(self, value: Optional[pulumi.Input['KafkaBridgeSpecTemplatePodSecurityContextArgs']]):
        pulumi.set(self, "security_context", value)

    @property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> Optional[pulumi.Input[float]]:
        """
        The grace period is the duration in seconds after the processes running in the pod are sent a termination signal, and the time when the processes are forcibly halted with a kill signal. Set this value to longer than the expected cleanup time for your process. Value must be a non-negative integer. A zero value indicates delete immediately. You might need to increase the grace period for very large Kafka clusters, so that the Kafka brokers have enough time to transfer their work to another broker before they are terminated. Defaults to 30 seconds.
        """
        return pulumi.get(self, "termination_grace_period_seconds")

    @termination_grace_period_seconds.setter
    def termination_grace_period_seconds(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "termination_grace_period_seconds", value)

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodTolerationsArgs']]]]:
        """
        The pod's tolerations.
        """
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(self, value: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodTolerationsArgs']]]]):
        pulumi.set(self, "tolerations", value)


@pulumi.input_type
class KafkaBridgeSpecTemplatePodAffinityArgs:
    def __init__(__self__, *,
                 node_affinity: Optional[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityNodeAffinityArgs']] = None,
                 pod_affinity: Optional[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAffinityArgs']] = None,
                 pod_anti_affinity: Optional[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityArgs']] = None):
        """
        The pod's affinity rules.
        """
        if node_affinity is not None:
            pulumi.set(__self__, "node_affinity", node_affinity)
        if pod_affinity is not None:
            pulumi.set(__self__, "pod_affinity", pod_affinity)
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(self) -> Optional[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityNodeAffinityArgs']]:
        return pulumi.get(self, "node_affinity")

    @node_affinity.setter
    def node_affinity(self, value: Optional[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityNodeAffinityArgs']]):
        pulumi.set(self, "node_affinity", value)

    @property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(self) -> Optional[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAffinityArgs']]:
        return pulumi.get(self, "pod_affinity")

    @pod_affinity.setter
    def pod_affinity(self, value: Optional[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAffinityArgs']]):
        pulumi.set(self, "pod_affinity", value)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityArgs']]:
        return pulumi.get(self, "pod_anti_affinity")

    @pod_anti_affinity.setter
    def pod_anti_affinity(self, value: Optional[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityArgs']]):
        pulumi.set(self, "pod_anti_affinity", value)


@pulumi.input_type
class KafkaBridgeSpecTemplatePodAffinityNodeAffinityArgs:
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]] = None,
                 required_during_scheduling_ignored_during_execution: Optional[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']] = None):
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(self, value: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(self, value: Optional[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


@pulumi.input_type
class KafkaBridgeSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 preference: Optional[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs']] = None,
                 weight: Optional[pulumi.Input[float]] = None):
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def preference(self) -> Optional[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs']]:
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: Optional[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs']]):
        pulumi.set(self, "preference", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class KafkaBridgeSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs']]]] = None,
                 match_fields: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs']]]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs']]]]:
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(self) -> Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs']]]]:
        return pulumi.get(self, "match_fields")

    @match_fields.setter
    def match_fields(self, value: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs']]]]):
        pulumi.set(self, "match_fields", value)


@pulumi.input_type
class KafkaBridgeSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class KafkaBridgeSpecTemplatePodAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class KafkaBridgeSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 node_selector_terms: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs']]]] = None):
        if node_selector_terms is not None:
            pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(self) -> Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs']]]]:
        return pulumi.get(self, "node_selector_terms")

    @node_selector_terms.setter
    def node_selector_terms(self, value: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs']]]]):
        pulumi.set(self, "node_selector_terms", value)


@pulumi.input_type
class KafkaBridgeSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs']]]] = None,
                 match_fields: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs']]]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs']]]]:
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(self) -> Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs']]]]:
        return pulumi.get(self, "match_fields")

    @match_fields.setter
    def match_fields(self, value: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs']]]]):
        pulumi.set(self, "match_fields", value)


@pulumi.input_type
class KafkaBridgeSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class KafkaBridgeSpecTemplatePodAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class KafkaBridgeSpecTemplatePodAffinityPodAffinityArgs:
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]] = None,
                 required_during_scheduling_ignored_during_execution: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]] = None):
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(self, value: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(self, value: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]]):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


@pulumi.input_type
class KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 pod_affinity_term: Optional[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs']] = None,
                 weight: Optional[pulumi.Input[float]] = None):
        if pod_affinity_term is not None:
            pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> Optional[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs']]:
        return pulumi.get(self, "pod_affinity_term")

    @pod_affinity_term.setter
    def pod_affinity_term(self, value: Optional[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs']]):
        pulumi.set(self, "pod_affinity_term", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs:
    def __init__(__self__, *,
                 label_selector: Optional[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']] = None,
                 namespaces: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 topology_key: Optional[pulumi.Input[str]] = None):
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(self, value: Optional[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']]):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


@pulumi.input_type
class KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]]]:
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class KafkaBridgeSpecTemplatePodAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 label_selector: Optional[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']] = None,
                 namespaces: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 topology_key: Optional[pulumi.Input[str]] = None):
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(self, value: Optional[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']]):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


@pulumi.input_type
class KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]]]:
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class KafkaBridgeSpecTemplatePodAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityArgs:
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]] = None,
                 required_during_scheduling_ignored_during_execution: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]] = None):
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]:
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(self, value: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]]:
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(self, value: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]]):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


@pulumi.input_type
class KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 pod_affinity_term: Optional[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs']] = None,
                 weight: Optional[pulumi.Input[float]] = None):
        if pod_affinity_term is not None:
            pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> Optional[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs']]:
        return pulumi.get(self, "pod_affinity_term")

    @pod_affinity_term.setter
    def pod_affinity_term(self, value: Optional[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs']]):
        pulumi.set(self, "pod_affinity_term", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs:
    def __init__(__self__, *,
                 label_selector: Optional[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']] = None,
                 namespaces: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 topology_key: Optional[pulumi.Input[str]] = None):
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(self, value: Optional[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']]):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


@pulumi.input_type
class KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]]]:
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 label_selector: Optional[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']] = None,
                 namespaces: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 topology_key: Optional[pulumi.Input[str]] = None):
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if topology_key is not None:
            pulumi.set(__self__, "topology_key", topology_key)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']]:
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(self, value: Optional[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']]):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topology_key", value)


@pulumi.input_type
class KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]]]:
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class KafkaBridgeSpecTemplatePodAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class KafkaBridgeSpecTemplatePodDisruptionBudgetArgs:
    def __init__(__self__, *,
                 max_unavailable: Optional[pulumi.Input[float]] = None,
                 metadata: Optional[pulumi.Input['KafkaBridgeSpecTemplatePodDisruptionBudgetMetadataArgs']] = None):
        """
        Template for Kafka Bridge `PodDisruptionBudget`.
        :param pulumi.Input[float] max_unavailable: Maximum number of unavailable pods to allow automatic Pod eviction. A Pod eviction is allowed when the `maxUnavailable` number of pods or fewer are unavailable after the eviction. Setting this value to 0 prevents all voluntary evictions, so the pods must be evicted manually. Defaults to 1.
        :param pulumi.Input['KafkaBridgeSpecTemplatePodDisruptionBudgetMetadataArgs'] metadata: Metadata to apply to the `PodDistruptionBugetTemplate` resource.
        """
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional[pulumi.Input[float]]:
        """
        Maximum number of unavailable pods to allow automatic Pod eviction. A Pod eviction is allowed when the `maxUnavailable` number of pods or fewer are unavailable after the eviction. Setting this value to 0 prevents all voluntary evictions, so the pods must be evicted manually. Defaults to 1.
        """
        return pulumi.get(self, "max_unavailable")

    @max_unavailable.setter
    def max_unavailable(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_unavailable", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['KafkaBridgeSpecTemplatePodDisruptionBudgetMetadataArgs']]:
        """
        Metadata to apply to the `PodDistruptionBugetTemplate` resource.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['KafkaBridgeSpecTemplatePodDisruptionBudgetMetadataArgs']]):
        pulumi.set(self, "metadata", value)


@pulumi.input_type
class KafkaBridgeSpecTemplatePodDisruptionBudgetMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        Metadata to apply to the `PodDistruptionBugetTemplate` resource.
        :param pulumi.Input[Mapping[str, Any]] annotations: Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
        :param pulumi.Input[Mapping[str, Any]] labels: Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class KafkaBridgeSpecTemplatePodImagePullSecretsArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class KafkaBridgeSpecTemplatePodMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        Metadata applied to the resource.
        :param pulumi.Input[Mapping[str, Any]] annotations: Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
        :param pulumi.Input[Mapping[str, Any]] labels: Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Annotations added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Labels added to the resource template. Can be applied to different resources such as `StatefulSets`, `Deployments`, `Pods`, and `Services`.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class KafkaBridgeSpecTemplatePodSecurityContextArgs:
    def __init__(__self__, *,
                 fs_group: Optional[pulumi.Input[float]] = None,
                 run_as_group: Optional[pulumi.Input[float]] = None,
                 run_as_non_root: Optional[pulumi.Input[bool]] = None,
                 run_as_user: Optional[pulumi.Input[float]] = None,
                 se_linux_options: Optional[pulumi.Input['KafkaBridgeSpecTemplatePodSecurityContextSeLinuxOptionsArgs']] = None,
                 supplemental_groups: Optional[pulumi.Input[List[pulumi.Input[float]]]] = None,
                 sysctls: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodSecurityContextSysctlsArgs']]]] = None,
                 windows_options: Optional[pulumi.Input['KafkaBridgeSpecTemplatePodSecurityContextWindowsOptionsArgs']] = None):
        """
        Configures pod-level security attributes and common container settings.
        """
        if fs_group is not None:
            pulumi.set(__self__, "fs_group", fs_group)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if supplemental_groups is not None:
            pulumi.set(__self__, "supplemental_groups", supplemental_groups)
        if sysctls is not None:
            pulumi.set(__self__, "sysctls", sysctls)
        if windows_options is not None:
            pulumi.set(__self__, "windows_options", windows_options)

    @property
    @pulumi.getter(name="fsGroup")
    def fs_group(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "fs_group")

    @fs_group.setter
    def fs_group(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "fs_group", value)

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "run_as_group")

    @run_as_group.setter
    def run_as_group(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "run_as_group", value)

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "run_as_non_root")

    @run_as_non_root.setter
    def run_as_non_root(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_as_non_root", value)

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "run_as_user")

    @run_as_user.setter
    def run_as_user(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "run_as_user", value)

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(self) -> Optional[pulumi.Input['KafkaBridgeSpecTemplatePodSecurityContextSeLinuxOptionsArgs']]:
        return pulumi.get(self, "se_linux_options")

    @se_linux_options.setter
    def se_linux_options(self, value: Optional[pulumi.Input['KafkaBridgeSpecTemplatePodSecurityContextSeLinuxOptionsArgs']]):
        pulumi.set(self, "se_linux_options", value)

    @property
    @pulumi.getter(name="supplementalGroups")
    def supplemental_groups(self) -> Optional[pulumi.Input[List[pulumi.Input[float]]]]:
        return pulumi.get(self, "supplemental_groups")

    @supplemental_groups.setter
    def supplemental_groups(self, value: Optional[pulumi.Input[List[pulumi.Input[float]]]]):
        pulumi.set(self, "supplemental_groups", value)

    @property
    @pulumi.getter
    def sysctls(self) -> Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodSecurityContextSysctlsArgs']]]]:
        return pulumi.get(self, "sysctls")

    @sysctls.setter
    def sysctls(self, value: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTemplatePodSecurityContextSysctlsArgs']]]]):
        pulumi.set(self, "sysctls", value)

    @property
    @pulumi.getter(name="windowsOptions")
    def windows_options(self) -> Optional[pulumi.Input['KafkaBridgeSpecTemplatePodSecurityContextWindowsOptionsArgs']]:
        return pulumi.get(self, "windows_options")

    @windows_options.setter
    def windows_options(self, value: Optional[pulumi.Input['KafkaBridgeSpecTemplatePodSecurityContextWindowsOptionsArgs']]):
        pulumi.set(self, "windows_options", value)


@pulumi.input_type
class KafkaBridgeSpecTemplatePodSecurityContextSeLinuxOptionsArgs:
    def __init__(__self__, *,
                 level: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class KafkaBridgeSpecTemplatePodSecurityContextSysctlsArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class KafkaBridgeSpecTemplatePodSecurityContextWindowsOptionsArgs:
    def __init__(__self__, *,
                 gmsa_credential_spec: Optional[pulumi.Input[str]] = None,
                 gmsa_credential_spec_name: Optional[pulumi.Input[str]] = None):
        if gmsa_credential_spec is not None:
            pulumi.set(__self__, "gmsa_credential_spec", gmsa_credential_spec)
        if gmsa_credential_spec_name is not None:
            pulumi.set(__self__, "gmsa_credential_spec_name", gmsa_credential_spec_name)

    @property
    @pulumi.getter(name="gmsaCredentialSpec")
    def gmsa_credential_spec(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gmsa_credential_spec")

    @gmsa_credential_spec.setter
    def gmsa_credential_spec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gmsa_credential_spec", value)

    @property
    @pulumi.getter(name="gmsaCredentialSpecName")
    def gmsa_credential_spec_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gmsa_credential_spec_name")

    @gmsa_credential_spec_name.setter
    def gmsa_credential_spec_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gmsa_credential_spec_name", value)


@pulumi.input_type
class KafkaBridgeSpecTemplatePodTolerationsArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 toleration_seconds: Optional[pulumi.Input[float]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "toleration_seconds")

    @toleration_seconds.setter
    def toleration_seconds(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "toleration_seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class KafkaBridgeSpecTlsArgs:
    def __init__(__self__, *,
                 trusted_certificates: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTlsTrustedCertificatesArgs']]]] = None):
        """
        TLS configuration for connecting Kafka Bridge to the cluster.
        :param pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTlsTrustedCertificatesArgs']]] trusted_certificates: Trusted certificates for TLS connection.
        """
        if trusted_certificates is not None:
            pulumi.set(__self__, "trusted_certificates", trusted_certificates)

    @property
    @pulumi.getter(name="trustedCertificates")
    def trusted_certificates(self) -> Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTlsTrustedCertificatesArgs']]]]:
        """
        Trusted certificates for TLS connection.
        """
        return pulumi.get(self, "trusted_certificates")

    @trusted_certificates.setter
    def trusted_certificates(self, value: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeSpecTlsTrustedCertificatesArgs']]]]):
        pulumi.set(self, "trusted_certificates", value)


@pulumi.input_type
class KafkaBridgeSpecTlsTrustedCertificatesArgs:
    def __init__(__self__, *,
                 certificate: pulumi.Input[str],
                 secret_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] certificate: The name of the file certificate in the Secret.
        :param pulumi.Input[str] secret_name: The name of the Secret containing the certificate.
        """
        pulumi.set(__self__, "certificate", certificate)
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def certificate(self) -> pulumi.Input[str]:
        """
        The name of the file certificate in the Secret.
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: pulumi.Input[str]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[str]:
        """
        The name of the Secret containing the certificate.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class KafkaBridgeSpecTracingArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str]):
        """
        The configuration of tracing in Kafka Bridge.
        :param pulumi.Input[str] type: Type of the tracing used. Currently the only supported type is `jaeger` for Jaeger tracing.
        """
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of the tracing used. Currently the only supported type is `jaeger` for Jaeger tracing.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class KafkaBridgeStatusArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeStatusConditionsArgs']]]] = None,
                 observed_generation: Optional[pulumi.Input[float]] = None,
                 pod_selector: Optional[pulumi.Input['KafkaBridgeStatusPodSelectorArgs']] = None,
                 replicas: Optional[pulumi.Input[float]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        The status of the Kafka Bridge.
        :param pulumi.Input[List[pulumi.Input['KafkaBridgeStatusConditionsArgs']]] conditions: List of status conditions.
        :param pulumi.Input[float] observed_generation: The generation of the CRD that was last reconciled by the operator.
        :param pulumi.Input['KafkaBridgeStatusPodSelectorArgs'] pod_selector: Label selector for pods providing this resource.
        :param pulumi.Input[float] replicas: The current number of pods being used to provide this resource.
        :param pulumi.Input[str] url: The URL at which external client applications can access the Kafka Bridge.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)
        if pod_selector is not None:
            pulumi.set(__self__, "pod_selector", pod_selector)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeStatusConditionsArgs']]]]:
        """
        List of status conditions.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[pulumi.Input[float]]:
        """
        The generation of the CRD that was last reconciled by the operator.
        """
        return pulumi.get(self, "observed_generation")

    @observed_generation.setter
    def observed_generation(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "observed_generation", value)

    @property
    @pulumi.getter(name="podSelector")
    def pod_selector(self) -> Optional[pulumi.Input['KafkaBridgeStatusPodSelectorArgs']]:
        """
        Label selector for pods providing this resource.
        """
        return pulumi.get(self, "pod_selector")

    @pod_selector.setter
    def pod_selector(self, value: Optional[pulumi.Input['KafkaBridgeStatusPodSelectorArgs']]):
        pulumi.set(self, "pod_selector", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[float]]:
        """
        The current number of pods being used to provide this resource.
        """
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL at which external client applications can access the Kafka Bridge.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class KafkaBridgeStatusConditionsArgs:
    def __init__(__self__, *,
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] last_transition_time: Last time the condition of a type changed from one status to another. The required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
        :param pulumi.Input[str] message: Human-readable message indicating details about the condition's last transition.
        :param pulumi.Input[str] reason: The reason for the condition's last transition (a single word in CamelCase).
        :param pulumi.Input[str] status: The status of the condition, either True, False or Unknown.
        :param pulumi.Input[str] type: The unique identifier of a condition, used to distinguish between other conditions in the resource.
        """
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        """
        Last time the condition of a type changed from one status to another. The required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Human-readable message indicating details about the condition's last transition.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        The reason for the condition's last transition (a single word in CamelCase).
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of the condition, either True, False or Unknown.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The unique identifier of a condition, used to distinguish between other conditions in the resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class KafkaBridgeStatusPodSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeStatusPodSelectorMatchExpressionsArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        Label selector for pods providing this resource.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeStatusPodSelectorMatchExpressionsArgs']]]]:
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[List[pulumi.Input['KafkaBridgeStatusPodSelectorMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class KafkaBridgeStatusPodSelectorMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)



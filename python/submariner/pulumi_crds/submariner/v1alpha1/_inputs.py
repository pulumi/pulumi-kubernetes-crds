# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from ... import _utilities, _tables

__all__ = [
    'ServiceDiscoverySpecArgs',
]

@pulumi.input_type
class ServiceDiscoverySpecArgs:
    def __init__(__self__, *,
                 broker_k8s_api_server: pulumi.Input[str],
                 broker_k8s_api_server_token: pulumi.Input[str],
                 broker_k8s_ca: pulumi.Input[str],
                 broker_k8s_remote_namespace: pulumi.Input[str],
                 cluster_id: pulumi.Input[str],
                 debug: pulumi.Input[bool],
                 namespace: pulumi.Input[str],
                 globalnet_enabled: Optional[pulumi.Input[bool]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        ServiceDiscoverySpec defines the desired state of ServiceDiscovery
        """
        pulumi.set(__self__, "broker_k8s_api_server", broker_k8s_api_server)
        pulumi.set(__self__, "broker_k8s_api_server_token", broker_k8s_api_server_token)
        pulumi.set(__self__, "broker_k8s_ca", broker_k8s_ca)
        pulumi.set(__self__, "broker_k8s_remote_namespace", broker_k8s_remote_namespace)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "debug", debug)
        pulumi.set(__self__, "namespace", namespace)
        if globalnet_enabled is not None:
            pulumi.set(__self__, "globalnet_enabled", globalnet_enabled)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="brokerK8sApiServer")
    def broker_k8s_api_server(self) -> pulumi.Input[str]:
        return pulumi.get(self, "broker_k8s_api_server")

    @broker_k8s_api_server.setter
    def broker_k8s_api_server(self, value: pulumi.Input[str]):
        pulumi.set(self, "broker_k8s_api_server", value)

    @property
    @pulumi.getter(name="brokerK8sApiServerToken")
    def broker_k8s_api_server_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "broker_k8s_api_server_token")

    @broker_k8s_api_server_token.setter
    def broker_k8s_api_server_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "broker_k8s_api_server_token", value)

    @property
    @pulumi.getter(name="brokerK8sCA")
    def broker_k8s_ca(self) -> pulumi.Input[str]:
        return pulumi.get(self, "broker_k8s_ca")

    @broker_k8s_ca.setter
    def broker_k8s_ca(self, value: pulumi.Input[str]):
        pulumi.set(self, "broker_k8s_ca", value)

    @property
    @pulumi.getter(name="brokerK8sRemoteNamespace")
    def broker_k8s_remote_namespace(self) -> pulumi.Input[str]:
        return pulumi.get(self, "broker_k8s_remote_namespace")

    @broker_k8s_remote_namespace.setter
    def broker_k8s_remote_namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "broker_k8s_remote_namespace", value)

    @property
    @pulumi.getter(name="clusterID")
    def cluster_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter
    def debug(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: pulumi.Input[bool]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="globalnetEnabled")
    def globalnet_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "globalnet_enabled")

    @globalnet_enabled.setter
    def globalnet_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "globalnet_enabled", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)



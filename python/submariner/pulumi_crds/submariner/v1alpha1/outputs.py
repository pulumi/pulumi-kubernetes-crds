# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from ... import _utilities, _tables

__all__ = [
    'ServiceDiscoverySpec',
]

@pulumi.output_type
class ServiceDiscoverySpec(dict):
    """
    ServiceDiscoverySpec defines the desired state of ServiceDiscovery
    """
    def __init__(__self__, *,
                 broker_k8s_api_server: str,
                 broker_k8s_api_server_token: str,
                 broker_k8s_ca: str,
                 broker_k8s_remote_namespace: str,
                 cluster_id: str,
                 debug: bool,
                 namespace: str,
                 globalnet_enabled: Optional[bool] = None,
                 repository: Optional[str] = None,
                 version: Optional[str] = None):
        """
        ServiceDiscoverySpec defines the desired state of ServiceDiscovery
        """
        pulumi.set(__self__, "broker_k8s_api_server", broker_k8s_api_server)
        pulumi.set(__self__, "broker_k8s_api_server_token", broker_k8s_api_server_token)
        pulumi.set(__self__, "broker_k8s_ca", broker_k8s_ca)
        pulumi.set(__self__, "broker_k8s_remote_namespace", broker_k8s_remote_namespace)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "debug", debug)
        pulumi.set(__self__, "namespace", namespace)
        if globalnet_enabled is not None:
            pulumi.set(__self__, "globalnet_enabled", globalnet_enabled)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="brokerK8sApiServer")
    def broker_k8s_api_server(self) -> str:
        return pulumi.get(self, "broker_k8s_api_server")

    @property
    @pulumi.getter(name="brokerK8sApiServerToken")
    def broker_k8s_api_server_token(self) -> str:
        return pulumi.get(self, "broker_k8s_api_server_token")

    @property
    @pulumi.getter(name="brokerK8sCA")
    def broker_k8s_ca(self) -> str:
        return pulumi.get(self, "broker_k8s_ca")

    @property
    @pulumi.getter(name="brokerK8sRemoteNamespace")
    def broker_k8s_remote_namespace(self) -> str:
        return pulumi.get(self, "broker_k8s_remote_namespace")

    @property
    @pulumi.getter(name="clusterID")
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def debug(self) -> bool:
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="globalnetEnabled")
    def globalnet_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "globalnet_enabled")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



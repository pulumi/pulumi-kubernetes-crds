# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'CSIIsilonSpec',
    'CSIIsilonSpecDriver',
    'CSIIsilonSpecDriverCommon',
    'CSIIsilonSpecDriverCommonEnvs',
    'CSIIsilonSpecDriverCommonEnvsValueFrom',
    'CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef',
    'CSIIsilonSpecDriverCommonEnvsValueFromFieldRef',
    'CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef',
    'CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef',
    'CSIIsilonSpecDriverController',
    'CSIIsilonSpecDriverControllerEnvs',
    'CSIIsilonSpecDriverControllerEnvsValueFrom',
    'CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef',
    'CSIIsilonSpecDriverControllerEnvsValueFromFieldRef',
    'CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef',
    'CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef',
    'CSIIsilonSpecDriverNode',
    'CSIIsilonSpecDriverNodeEnvs',
    'CSIIsilonSpecDriverNodeEnvsValueFrom',
    'CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef',
    'CSIIsilonSpecDriverNodeEnvsValueFromFieldRef',
    'CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef',
    'CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef',
    'CSIIsilonSpecDriverSideCars',
    'CSIIsilonSpecDriverSideCarsEnvs',
    'CSIIsilonSpecDriverSideCarsEnvsValueFrom',
    'CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef',
    'CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef',
    'CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef',
    'CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef',
    'CSIIsilonSpecDriverSnapshotClass',
    'CSIIsilonSpecDriverStorageClass',
    'CSIIsilonStatus',
    'CSIIsilonStatusControllerStatus',
    'CSIIsilonStatusLastUpdate',
    'CSIIsilonStatusNodeStatus',
]

@pulumi.output_type
class CSIIsilonSpec(dict):
    """
    CSIIsilonSpec defines the desired state of CSIIsilon
    """
    def __init__(__self__, *,
                 driver: 'outputs.CSIIsilonSpecDriver'):
        """
        CSIIsilonSpec defines the desired state of CSIIsilon
        :param 'CSIIsilonSpecDriverArgs' driver: Driver is the specification for the CSI Isilon Driver
        """
        pulumi.set(__self__, "driver", driver)

    @property
    @pulumi.getter
    def driver(self) -> 'outputs.CSIIsilonSpecDriver':
        """
        Driver is the specification for the CSI Isilon Driver
        """
        return pulumi.get(self, "driver")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIIsilonSpecDriver(dict):
    """
    Driver is the specification for the CSI Isilon Driver
    """
    def __init__(__self__, *,
                 common: 'outputs.CSIIsilonSpecDriverCommon',
                 config_version: str,
                 replicas: float,
                 auth_secret: Optional[str] = None,
                 controller: Optional['outputs.CSIIsilonSpecDriverController'] = None,
                 force_update: Optional[bool] = None,
                 node: Optional['outputs.CSIIsilonSpecDriverNode'] = None,
                 side_cars: Optional[List['outputs.CSIIsilonSpecDriverSideCars']] = None,
                 snapshot_class: Optional[List['outputs.CSIIsilonSpecDriverSnapshotClass']] = None,
                 storage_class: Optional[List['outputs.CSIIsilonSpecDriverStorageClass']] = None,
                 tls_cert_secret: Optional[str] = None):
        """
        Driver is the specification for the CSI Isilon Driver
        :param 'CSIIsilonSpecDriverCommonArgs' common: Common is the common specification for both controller and node plugins
        :param str config_version: ConfigVersion is the configuration version of the driver
        :param float replicas: Replicas is the count of controllers for Controller plugin
        :param str auth_secret: AuthSecret is the name of the credentials secret for the driver
        :param 'CSIIsilonSpecDriverControllerArgs' controller: Controller is the specification for Controller plugin only
        :param bool force_update: ForceUpdate is the boolean flag used to force an update of the driver instance
        :param 'CSIIsilonSpecDriverNodeArgs' node: Node is the specification for Node plugin only
        :param List['CSIIsilonSpecDriverSideCarsArgs'] side_cars: SideCars is the specification for CSI sidecar containers
        :param List['CSIIsilonSpecDriverSnapshotClassArgs'] snapshot_class: SnapshotClass is the specification for Snapshot Classes
        :param List['CSIIsilonSpecDriverStorageClassArgs'] storage_class: StorageClass is the specification for Storage Classes
        :param str tls_cert_secret: TLSCertSecret is the name of the TLS Cert secret
        """
        pulumi.set(__self__, "common", common)
        pulumi.set(__self__, "config_version", config_version)
        pulumi.set(__self__, "replicas", replicas)
        if auth_secret is not None:
            pulumi.set(__self__, "auth_secret", auth_secret)
        if controller is not None:
            pulumi.set(__self__, "controller", controller)
        if force_update is not None:
            pulumi.set(__self__, "force_update", force_update)
        if node is not None:
            pulumi.set(__self__, "node", node)
        if side_cars is not None:
            pulumi.set(__self__, "side_cars", side_cars)
        if snapshot_class is not None:
            pulumi.set(__self__, "snapshot_class", snapshot_class)
        if storage_class is not None:
            pulumi.set(__self__, "storage_class", storage_class)
        if tls_cert_secret is not None:
            pulumi.set(__self__, "tls_cert_secret", tls_cert_secret)

    @property
    @pulumi.getter
    def common(self) -> 'outputs.CSIIsilonSpecDriverCommon':
        """
        Common is the common specification for both controller and node plugins
        """
        return pulumi.get(self, "common")

    @property
    @pulumi.getter(name="configVersion")
    def config_version(self) -> str:
        """
        ConfigVersion is the configuration version of the driver
        """
        return pulumi.get(self, "config_version")

    @property
    @pulumi.getter
    def replicas(self) -> float:
        """
        Replicas is the count of controllers for Controller plugin
        """
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter(name="authSecret")
    def auth_secret(self) -> Optional[str]:
        """
        AuthSecret is the name of the credentials secret for the driver
        """
        return pulumi.get(self, "auth_secret")

    @property
    @pulumi.getter
    def controller(self) -> Optional['outputs.CSIIsilonSpecDriverController']:
        """
        Controller is the specification for Controller plugin only
        """
        return pulumi.get(self, "controller")

    @property
    @pulumi.getter(name="forceUpdate")
    def force_update(self) -> Optional[bool]:
        """
        ForceUpdate is the boolean flag used to force an update of the driver instance
        """
        return pulumi.get(self, "force_update")

    @property
    @pulumi.getter
    def node(self) -> Optional['outputs.CSIIsilonSpecDriverNode']:
        """
        Node is the specification for Node plugin only
        """
        return pulumi.get(self, "node")

    @property
    @pulumi.getter(name="sideCars")
    def side_cars(self) -> Optional[List['outputs.CSIIsilonSpecDriverSideCars']]:
        """
        SideCars is the specification for CSI sidecar containers
        """
        return pulumi.get(self, "side_cars")

    @property
    @pulumi.getter(name="snapshotClass")
    def snapshot_class(self) -> Optional[List['outputs.CSIIsilonSpecDriverSnapshotClass']]:
        """
        SnapshotClass is the specification for Snapshot Classes
        """
        return pulumi.get(self, "snapshot_class")

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> Optional[List['outputs.CSIIsilonSpecDriverStorageClass']]:
        """
        StorageClass is the specification for Storage Classes
        """
        return pulumi.get(self, "storage_class")

    @property
    @pulumi.getter(name="tlsCertSecret")
    def tls_cert_secret(self) -> Optional[str]:
        """
        TLSCertSecret is the name of the TLS Cert secret
        """
        return pulumi.get(self, "tls_cert_secret")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIIsilonSpecDriverCommon(dict):
    """
    Common is the common specification for both controller and node plugins
    """
    def __init__(__self__, *,
                 args: Optional[List[str]] = None,
                 envs: Optional[List['outputs.CSIIsilonSpecDriverCommonEnvs']] = None,
                 image: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 name: Optional[str] = None):
        """
        Common is the common specification for both controller and node plugins
        :param List[str] args: Args is the set of arguments for the container
        :param List['CSIIsilonSpecDriverCommonEnvsArgs'] envs: Envs is the set of environment variables for the container
        :param str image: Image is the image tag for the Container
        :param str image_pull_policy: ImagePullPolicy is the image pull policy for the image
        :param str name: Name is the name of Container
        """
        if args is not None:
            pulumi.set(__self__, "args", args)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def args(self) -> Optional[List[str]]:
        """
        Args is the set of arguments for the container
        """
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def envs(self) -> Optional[List['outputs.CSIIsilonSpecDriverCommonEnvs']]:
        """
        Envs is the set of environment variables for the container
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        """
        Image is the image tag for the Container
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        """
        ImagePullPolicy is the image pull policy for the image
        """
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name is the name of Container
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIIsilonSpecDriverCommonEnvs(dict):
    """
    EnvVar represents an environment variable present in a Container.
    """
    def __init__(__self__, *,
                 name: str,
                 value: Optional[str] = None,
                 value_from: Optional['outputs.CSIIsilonSpecDriverCommonEnvsValueFrom'] = None):
        """
        EnvVar represents an environment variable present in a Container.
        :param str name: Name of the environment variable. Must be a C_IDENTIFIER.
        :param str value: Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        :param 'CSIIsilonSpecDriverCommonEnvsValueFromArgs' value_from: Source for the environment variable's value. Cannot be used if value is not empty.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the environment variable. Must be a C_IDENTIFIER.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional['outputs.CSIIsilonSpecDriverCommonEnvsValueFrom']:
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        """
        return pulumi.get(self, "value_from")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIIsilonSpecDriverCommonEnvsValueFrom(dict):
    """
    Source for the environment variable's value. Cannot be used if value is not empty.
    """
    def __init__(__self__, *,
                 config_map_key_ref: Optional['outputs.CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef'] = None,
                 field_ref: Optional['outputs.CSIIsilonSpecDriverCommonEnvsValueFromFieldRef'] = None,
                 resource_field_ref: Optional['outputs.CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef'] = None,
                 secret_key_ref: Optional['outputs.CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef'] = None):
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        :param 'CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs' config_map_key_ref: Selects a key of a ConfigMap.
        :param 'CSIIsilonSpecDriverCommonEnvsValueFromFieldRefArgs' field_ref: Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
        :param 'CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefArgs' resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param 'CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefArgs' secret_key_ref: Selects a key of a secret in the pod's namespace
        """
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional['outputs.CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef']:
        """
        Selects a key of a ConfigMap.
        """
        return pulumi.get(self, "config_map_key_ref")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.CSIIsilonSpecDriverCommonEnvsValueFromFieldRef']:
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
        """
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef']:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional['outputs.CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef']:
        """
        Selects a key of a secret in the pod's namespace
        """
        return pulumi.get(self, "secret_key_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef(dict):
    """
    Selects a key of a ConfigMap.
    """
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        """
        Selects a key of a ConfigMap.
        :param str key: The key to select.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param bool optional: Specify whether the ConfigMap or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key to select.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        """
        Specify whether the ConfigMap or its key must be defined
        """
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIIsilonSpecDriverCommonEnvsValueFromFieldRef(dict):
    """
    Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
    """
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
        :param str field_path: Path of the field to select in the specified API version.
        :param str api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        """
        Path of the field to select in the specified API version.
        """
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef(dict):
    """
    Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
    """
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[str] = None):
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param str resource: Required: resource to select
        :param str container_name: Container name: required for volumes, optional for env vars
        :param str divisor: Specifies the output format of the exposed resources, defaults to "1"
        """
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        """
        Required: resource to select
        """
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        """
        Container name: required for volumes, optional for env vars
        """
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[str]:
        """
        Specifies the output format of the exposed resources, defaults to "1"
        """
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef(dict):
    """
    Selects a key of a secret in the pod's namespace
    """
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        """
        Selects a key of a secret in the pod's namespace
        :param str key: The key of the secret to select from.  Must be a valid secret key.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param bool optional: Specify whether the Secret or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the secret to select from.  Must be a valid secret key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        """
        Specify whether the Secret or its key must be defined
        """
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIIsilonSpecDriverController(dict):
    """
    Controller is the specification for Controller plugin only
    """
    def __init__(__self__, *,
                 args: Optional[List[str]] = None,
                 envs: Optional[List['outputs.CSIIsilonSpecDriverControllerEnvs']] = None,
                 image: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 name: Optional[str] = None):
        """
        Controller is the specification for Controller plugin only
        :param List[str] args: Args is the set of arguments for the container
        :param List['CSIIsilonSpecDriverControllerEnvsArgs'] envs: Envs is the set of environment variables for the container
        :param str image: Image is the image tag for the Container
        :param str image_pull_policy: ImagePullPolicy is the image pull policy for the image
        :param str name: Name is the name of Container
        """
        if args is not None:
            pulumi.set(__self__, "args", args)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def args(self) -> Optional[List[str]]:
        """
        Args is the set of arguments for the container
        """
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def envs(self) -> Optional[List['outputs.CSIIsilonSpecDriverControllerEnvs']]:
        """
        Envs is the set of environment variables for the container
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        """
        Image is the image tag for the Container
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        """
        ImagePullPolicy is the image pull policy for the image
        """
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name is the name of Container
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIIsilonSpecDriverControllerEnvs(dict):
    """
    EnvVar represents an environment variable present in a Container.
    """
    def __init__(__self__, *,
                 name: str,
                 value: Optional[str] = None,
                 value_from: Optional['outputs.CSIIsilonSpecDriverControllerEnvsValueFrom'] = None):
        """
        EnvVar represents an environment variable present in a Container.
        :param str name: Name of the environment variable. Must be a C_IDENTIFIER.
        :param str value: Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        :param 'CSIIsilonSpecDriverControllerEnvsValueFromArgs' value_from: Source for the environment variable's value. Cannot be used if value is not empty.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the environment variable. Must be a C_IDENTIFIER.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional['outputs.CSIIsilonSpecDriverControllerEnvsValueFrom']:
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        """
        return pulumi.get(self, "value_from")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIIsilonSpecDriverControllerEnvsValueFrom(dict):
    """
    Source for the environment variable's value. Cannot be used if value is not empty.
    """
    def __init__(__self__, *,
                 config_map_key_ref: Optional['outputs.CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef'] = None,
                 field_ref: Optional['outputs.CSIIsilonSpecDriverControllerEnvsValueFromFieldRef'] = None,
                 resource_field_ref: Optional['outputs.CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef'] = None,
                 secret_key_ref: Optional['outputs.CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef'] = None):
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        :param 'CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs' config_map_key_ref: Selects a key of a ConfigMap.
        :param 'CSIIsilonSpecDriverControllerEnvsValueFromFieldRefArgs' field_ref: Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
        :param 'CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefArgs' resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param 'CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefArgs' secret_key_ref: Selects a key of a secret in the pod's namespace
        """
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional['outputs.CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef']:
        """
        Selects a key of a ConfigMap.
        """
        return pulumi.get(self, "config_map_key_ref")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.CSIIsilonSpecDriverControllerEnvsValueFromFieldRef']:
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
        """
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef']:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional['outputs.CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef']:
        """
        Selects a key of a secret in the pod's namespace
        """
        return pulumi.get(self, "secret_key_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef(dict):
    """
    Selects a key of a ConfigMap.
    """
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        """
        Selects a key of a ConfigMap.
        :param str key: The key to select.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param bool optional: Specify whether the ConfigMap or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key to select.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        """
        Specify whether the ConfigMap or its key must be defined
        """
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIIsilonSpecDriverControllerEnvsValueFromFieldRef(dict):
    """
    Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
    """
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
        :param str field_path: Path of the field to select in the specified API version.
        :param str api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        """
        Path of the field to select in the specified API version.
        """
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef(dict):
    """
    Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
    """
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[str] = None):
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param str resource: Required: resource to select
        :param str container_name: Container name: required for volumes, optional for env vars
        :param str divisor: Specifies the output format of the exposed resources, defaults to "1"
        """
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        """
        Required: resource to select
        """
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        """
        Container name: required for volumes, optional for env vars
        """
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[str]:
        """
        Specifies the output format of the exposed resources, defaults to "1"
        """
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef(dict):
    """
    Selects a key of a secret in the pod's namespace
    """
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        """
        Selects a key of a secret in the pod's namespace
        :param str key: The key of the secret to select from.  Must be a valid secret key.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param bool optional: Specify whether the Secret or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the secret to select from.  Must be a valid secret key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        """
        Specify whether the Secret or its key must be defined
        """
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIIsilonSpecDriverNode(dict):
    """
    Node is the specification for Node plugin only
    """
    def __init__(__self__, *,
                 args: Optional[List[str]] = None,
                 envs: Optional[List['outputs.CSIIsilonSpecDriverNodeEnvs']] = None,
                 image: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 name: Optional[str] = None):
        """
        Node is the specification for Node plugin only
        :param List[str] args: Args is the set of arguments for the container
        :param List['CSIIsilonSpecDriverNodeEnvsArgs'] envs: Envs is the set of environment variables for the container
        :param str image: Image is the image tag for the Container
        :param str image_pull_policy: ImagePullPolicy is the image pull policy for the image
        :param str name: Name is the name of Container
        """
        if args is not None:
            pulumi.set(__self__, "args", args)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def args(self) -> Optional[List[str]]:
        """
        Args is the set of arguments for the container
        """
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def envs(self) -> Optional[List['outputs.CSIIsilonSpecDriverNodeEnvs']]:
        """
        Envs is the set of environment variables for the container
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        """
        Image is the image tag for the Container
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        """
        ImagePullPolicy is the image pull policy for the image
        """
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name is the name of Container
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIIsilonSpecDriverNodeEnvs(dict):
    """
    EnvVar represents an environment variable present in a Container.
    """
    def __init__(__self__, *,
                 name: str,
                 value: Optional[str] = None,
                 value_from: Optional['outputs.CSIIsilonSpecDriverNodeEnvsValueFrom'] = None):
        """
        EnvVar represents an environment variable present in a Container.
        :param str name: Name of the environment variable. Must be a C_IDENTIFIER.
        :param str value: Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        :param 'CSIIsilonSpecDriverNodeEnvsValueFromArgs' value_from: Source for the environment variable's value. Cannot be used if value is not empty.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the environment variable. Must be a C_IDENTIFIER.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional['outputs.CSIIsilonSpecDriverNodeEnvsValueFrom']:
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        """
        return pulumi.get(self, "value_from")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIIsilonSpecDriverNodeEnvsValueFrom(dict):
    """
    Source for the environment variable's value. Cannot be used if value is not empty.
    """
    def __init__(__self__, *,
                 config_map_key_ref: Optional['outputs.CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef'] = None,
                 field_ref: Optional['outputs.CSIIsilonSpecDriverNodeEnvsValueFromFieldRef'] = None,
                 resource_field_ref: Optional['outputs.CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef'] = None,
                 secret_key_ref: Optional['outputs.CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef'] = None):
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        :param 'CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs' config_map_key_ref: Selects a key of a ConfigMap.
        :param 'CSIIsilonSpecDriverNodeEnvsValueFromFieldRefArgs' field_ref: Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
        :param 'CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefArgs' resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param 'CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefArgs' secret_key_ref: Selects a key of a secret in the pod's namespace
        """
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional['outputs.CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef']:
        """
        Selects a key of a ConfigMap.
        """
        return pulumi.get(self, "config_map_key_ref")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.CSIIsilonSpecDriverNodeEnvsValueFromFieldRef']:
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
        """
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef']:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional['outputs.CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef']:
        """
        Selects a key of a secret in the pod's namespace
        """
        return pulumi.get(self, "secret_key_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef(dict):
    """
    Selects a key of a ConfigMap.
    """
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        """
        Selects a key of a ConfigMap.
        :param str key: The key to select.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param bool optional: Specify whether the ConfigMap or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key to select.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        """
        Specify whether the ConfigMap or its key must be defined
        """
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIIsilonSpecDriverNodeEnvsValueFromFieldRef(dict):
    """
    Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
    """
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
        :param str field_path: Path of the field to select in the specified API version.
        :param str api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        """
        Path of the field to select in the specified API version.
        """
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef(dict):
    """
    Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
    """
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[str] = None):
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param str resource: Required: resource to select
        :param str container_name: Container name: required for volumes, optional for env vars
        :param str divisor: Specifies the output format of the exposed resources, defaults to "1"
        """
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        """
        Required: resource to select
        """
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        """
        Container name: required for volumes, optional for env vars
        """
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[str]:
        """
        Specifies the output format of the exposed resources, defaults to "1"
        """
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef(dict):
    """
    Selects a key of a secret in the pod's namespace
    """
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        """
        Selects a key of a secret in the pod's namespace
        :param str key: The key of the secret to select from.  Must be a valid secret key.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param bool optional: Specify whether the Secret or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the secret to select from.  Must be a valid secret key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        """
        Specify whether the Secret or its key must be defined
        """
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIIsilonSpecDriverSideCars(dict):
    """
    ContainerTemplate - Structure representing a container
    """
    def __init__(__self__, *,
                 args: Optional[List[str]] = None,
                 envs: Optional[List['outputs.CSIIsilonSpecDriverSideCarsEnvs']] = None,
                 image: Optional[str] = None,
                 image_pull_policy: Optional[str] = None,
                 name: Optional[str] = None):
        """
        ContainerTemplate - Structure representing a container
        :param List[str] args: Args is the set of arguments for the container
        :param List['CSIIsilonSpecDriverSideCarsEnvsArgs'] envs: Envs is the set of environment variables for the container
        :param str image: Image is the image tag for the Container
        :param str image_pull_policy: ImagePullPolicy is the image pull policy for the image
        :param str name: Name is the name of Container
        """
        if args is not None:
            pulumi.set(__self__, "args", args)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if image_pull_policy is not None:
            pulumi.set(__self__, "image_pull_policy", image_pull_policy)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def args(self) -> Optional[List[str]]:
        """
        Args is the set of arguments for the container
        """
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def envs(self) -> Optional[List['outputs.CSIIsilonSpecDriverSideCarsEnvs']]:
        """
        Envs is the set of environment variables for the container
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        """
        Image is the image tag for the Container
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[str]:
        """
        ImagePullPolicy is the image pull policy for the image
        """
        return pulumi.get(self, "image_pull_policy")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name is the name of Container
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIIsilonSpecDriverSideCarsEnvs(dict):
    """
    EnvVar represents an environment variable present in a Container.
    """
    def __init__(__self__, *,
                 name: str,
                 value: Optional[str] = None,
                 value_from: Optional['outputs.CSIIsilonSpecDriverSideCarsEnvsValueFrom'] = None):
        """
        EnvVar represents an environment variable present in a Container.
        :param str name: Name of the environment variable. Must be a C_IDENTIFIER.
        :param str value: Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        :param 'CSIIsilonSpecDriverSideCarsEnvsValueFromArgs' value_from: Source for the environment variable's value. Cannot be used if value is not empty.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the environment variable. Must be a C_IDENTIFIER.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional['outputs.CSIIsilonSpecDriverSideCarsEnvsValueFrom']:
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        """
        return pulumi.get(self, "value_from")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIIsilonSpecDriverSideCarsEnvsValueFrom(dict):
    """
    Source for the environment variable's value. Cannot be used if value is not empty.
    """
    def __init__(__self__, *,
                 config_map_key_ref: Optional['outputs.CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef'] = None,
                 field_ref: Optional['outputs.CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef'] = None,
                 resource_field_ref: Optional['outputs.CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef'] = None,
                 secret_key_ref: Optional['outputs.CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef'] = None):
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        :param 'CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs' config_map_key_ref: Selects a key of a ConfigMap.
        :param 'CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefArgs' field_ref: Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
        :param 'CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs' resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param 'CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs' secret_key_ref: Selects a key of a secret in the pod's namespace
        """
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional['outputs.CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef']:
        """
        Selects a key of a ConfigMap.
        """
        return pulumi.get(self, "config_map_key_ref")

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional['outputs.CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef']:
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
        """
        return pulumi.get(self, "field_ref")

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional['outputs.CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef']:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional['outputs.CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef']:
        """
        Selects a key of a secret in the pod's namespace
        """
        return pulumi.get(self, "secret_key_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef(dict):
    """
    Selects a key of a ConfigMap.
    """
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        """
        Selects a key of a ConfigMap.
        :param str key: The key to select.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param bool optional: Specify whether the ConfigMap or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key to select.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        """
        Specify whether the ConfigMap or its key must be defined
        """
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef(dict):
    """
    Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
    """
    def __init__(__self__, *,
                 field_path: str,
                 api_version: Optional[str] = None):
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
        :param str field_path: Path of the field to select in the specified API version.
        :param str api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> str:
        """
        Path of the field to select in the specified API version.
        """
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        return pulumi.get(self, "api_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef(dict):
    """
    Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
    """
    def __init__(__self__, *,
                 resource: str,
                 container_name: Optional[str] = None,
                 divisor: Optional[str] = None):
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param str resource: Required: resource to select
        :param str container_name: Container name: required for volumes, optional for env vars
        :param str divisor: Specifies the output format of the exposed resources, defaults to "1"
        """
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> str:
        """
        Required: resource to select
        """
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        """
        Container name: required for volumes, optional for env vars
        """
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def divisor(self) -> Optional[str]:
        """
        Specifies the output format of the exposed resources, defaults to "1"
        """
        return pulumi.get(self, "divisor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef(dict):
    """
    Selects a key of a secret in the pod's namespace
    """
    def __init__(__self__, *,
                 key: str,
                 name: Optional[str] = None,
                 optional: Optional[bool] = None):
        """
        Selects a key of a secret in the pod's namespace
        :param str key: The key of the secret to select from.  Must be a valid secret key.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param bool optional: Specify whether the Secret or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the secret to select from.  Must be a valid secret key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> Optional[bool]:
        """
        Specify whether the Secret or its key must be defined
        """
        return pulumi.get(self, "optional")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIIsilonSpecDriverSnapshotClass(dict):
    """
    SnapshotClass represents a VolumeSnapshotClass
    """
    def __init__(__self__, *,
                 name: str,
                 parameters: Optional[Mapping[str, str]] = None):
        """
        SnapshotClass represents a VolumeSnapshotClass
        :param str name: Name is the name of the Snapshot Class
        :param Mapping[str, str] parameters: Parameters is a map of driver specific parameters for snapshot class
        """
        pulumi.set(__self__, "name", name)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the Snapshot Class
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Mapping[str, str]]:
        """
        Parameters is a map of driver specific parameters for snapshot class
        """
        return pulumi.get(self, "parameters")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIIsilonSpecDriverStorageClass(dict):
    """
    StorageClass represents a kubernetes storage class
    """
    def __init__(__self__, *,
                 name: str,
                 allow_volume_expansion: Optional[bool] = None,
                 default: Optional[bool] = None,
                 parameters: Optional[Mapping[str, str]] = None,
                 reclaim_policy: Optional[str] = None):
        """
        StorageClass represents a kubernetes storage class
        :param str name: Name is the name of the StorageClass
        :param bool allow_volume_expansion: AllowVolumeExpansion is a boolean flag which indicates if volumes can be expanded
        :param bool default: DefaultSc is a boolean flag to indicate if the storage class is going to be marked as default
        :param Mapping[str, str] parameters: Parameters is a map of driver specific storage class
        :param str reclaim_policy: ReclaimPolicy is the reclaim policy for the storage class
        """
        pulumi.set(__self__, "name", name)
        if allow_volume_expansion is not None:
            pulumi.set(__self__, "allow_volume_expansion", allow_volume_expansion)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if reclaim_policy is not None:
            pulumi.set(__self__, "reclaim_policy", reclaim_policy)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is the name of the StorageClass
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="allowVolumeExpansion")
    def allow_volume_expansion(self) -> Optional[bool]:
        """
        AllowVolumeExpansion is a boolean flag which indicates if volumes can be expanded
        """
        return pulumi.get(self, "allow_volume_expansion")

    @property
    @pulumi.getter
    def default(self) -> Optional[bool]:
        """
        DefaultSc is a boolean flag to indicate if the storage class is going to be marked as default
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Mapping[str, str]]:
        """
        Parameters is a map of driver specific storage class
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="reclaimPolicy")
    def reclaim_policy(self) -> Optional[str]:
        """
        ReclaimPolicy is the reclaim policy for the storage class
        """
        return pulumi.get(self, "reclaim_policy")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIIsilonStatus(dict):
    """
    DriverStatus defines the observed state of CSIDriver
    """
    def __init__(__self__, *,
                 controller_status: Optional['outputs.CSIIsilonStatusControllerStatus'] = None,
                 driver_hash: Optional[float] = None,
                 last_update: Optional['outputs.CSIIsilonStatusLastUpdate'] = None,
                 node_status: Optional['outputs.CSIIsilonStatusNodeStatus'] = None,
                 state: Optional[str] = None):
        """
        DriverStatus defines the observed state of CSIDriver
        :param 'CSIIsilonStatusControllerStatusArgs' controller_status: ControllerStatus is the status of Controller pods
        :param float driver_hash: DriverHash is a hash of the driver specification
        :param 'CSIIsilonStatusLastUpdateArgs' last_update: LastUpdate is the last updated state of the driver
        :param 'CSIIsilonStatusNodeStatusArgs' node_status: NodeStatus is the status of Controller pods
        :param str state: State is the state of the driver installation
        """
        if controller_status is not None:
            pulumi.set(__self__, "controller_status", controller_status)
        if driver_hash is not None:
            pulumi.set(__self__, "driver_hash", driver_hash)
        if last_update is not None:
            pulumi.set(__self__, "last_update", last_update)
        if node_status is not None:
            pulumi.set(__self__, "node_status", node_status)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="controllerStatus")
    def controller_status(self) -> Optional['outputs.CSIIsilonStatusControllerStatus']:
        """
        ControllerStatus is the status of Controller pods
        """
        return pulumi.get(self, "controller_status")

    @property
    @pulumi.getter(name="driverHash")
    def driver_hash(self) -> Optional[float]:
        """
        DriverHash is a hash of the driver specification
        """
        return pulumi.get(self, "driver_hash")

    @property
    @pulumi.getter(name="lastUpdate")
    def last_update(self) -> Optional['outputs.CSIIsilonStatusLastUpdate']:
        """
        LastUpdate is the last updated state of the driver
        """
        return pulumi.get(self, "last_update")

    @property
    @pulumi.getter(name="nodeStatus")
    def node_status(self) -> Optional['outputs.CSIIsilonStatusNodeStatus']:
        """
        NodeStatus is the status of Controller pods
        """
        return pulumi.get(self, "node_status")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        State is the state of the driver installation
        """
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIIsilonStatusControllerStatus(dict):
    """
    ControllerStatus is the status of Controller pods
    """
    def __init__(__self__, *,
                 available: Optional[List[str]] = None,
                 ready: Optional[List[str]] = None,
                 starting: Optional[List[str]] = None,
                 stopped: Optional[List[str]] = None):
        """
        ControllerStatus is the status of Controller pods
        """
        if available is not None:
            pulumi.set(__self__, "available", available)
        if ready is not None:
            pulumi.set(__self__, "ready", ready)
        if starting is not None:
            pulumi.set(__self__, "starting", starting)
        if stopped is not None:
            pulumi.set(__self__, "stopped", stopped)

    @property
    @pulumi.getter
    def available(self) -> Optional[List[str]]:
        return pulumi.get(self, "available")

    @property
    @pulumi.getter
    def ready(self) -> Optional[List[str]]:
        return pulumi.get(self, "ready")

    @property
    @pulumi.getter
    def starting(self) -> Optional[List[str]]:
        return pulumi.get(self, "starting")

    @property
    @pulumi.getter
    def stopped(self) -> Optional[List[str]]:
        return pulumi.get(self, "stopped")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIIsilonStatusLastUpdate(dict):
    """
    LastUpdate is the last updated state of the driver
    """
    def __init__(__self__, *,
                 condition: Optional[str] = None,
                 error_message: Optional[str] = None,
                 time: Optional[str] = None):
        """
        LastUpdate is the last updated state of the driver
        :param str condition: Condition is the last known condition of the Custom Resource
        :param str error_message: ErrorMessage is the last error message associated with the condition
        :param str time: Time is the time stamp for the last condition update
        """
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if time is not None:
            pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        """
        Condition is the last known condition of the Custom Resource
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[str]:
        """
        ErrorMessage is the last error message associated with the condition
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter
    def time(self) -> Optional[str]:
        """
        Time is the time stamp for the last condition update
        """
        return pulumi.get(self, "time")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIIsilonStatusNodeStatus(dict):
    """
    NodeStatus is the status of Controller pods
    """
    def __init__(__self__, *,
                 available: Optional[List[str]] = None,
                 ready: Optional[List[str]] = None,
                 starting: Optional[List[str]] = None,
                 stopped: Optional[List[str]] = None):
        """
        NodeStatus is the status of Controller pods
        """
        if available is not None:
            pulumi.set(__self__, "available", available)
        if ready is not None:
            pulumi.set(__self__, "ready", ready)
        if starting is not None:
            pulumi.set(__self__, "starting", starting)
        if stopped is not None:
            pulumi.set(__self__, "stopped", stopped)

    @property
    @pulumi.getter
    def available(self) -> Optional[List[str]]:
        return pulumi.get(self, "available")

    @property
    @pulumi.getter
    def ready(self) -> Optional[List[str]]:
        return pulumi.get(self, "ready")

    @property
    @pulumi.getter
    def starting(self) -> Optional[List[str]]:
        return pulumi.get(self, "starting")

    @property
    @pulumi.getter
    def stopped(self) -> Optional[List[str]]:
        return pulumi.get(self, "stopped")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



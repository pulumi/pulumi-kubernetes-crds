# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'CSIScaleOperatorSpec',
    'CSIScaleOperatorSpecAttacherNodeSelector',
    'CSIScaleOperatorSpecClusters',
    'CSIScaleOperatorSpecClustersPrimary',
    'CSIScaleOperatorSpecClustersRestApi',
    'CSIScaleOperatorSpecNodeMapping',
    'CSIScaleOperatorSpecPluginNodeSelector',
    'CSIScaleOperatorSpecProvisionerNodeSelector',
    'CSIScaleOperatorStatus',
    'CSIScaleOperatorStatusConditions',
]

@pulumi.output_type
class CSIScaleOperatorSpec(dict):
    def __init__(__self__, *,
                 scale_hostpath: str,
                 attacher: Optional[str] = None,
                 attacher_node_selector: Optional[List['outputs.CSIScaleOperatorSpecAttacherNodeSelector']] = None,
                 clusters: Optional[List['outputs.CSIScaleOperatorSpecClusters']] = None,
                 driver_registrar: Optional[str] = None,
                 node_mapping: Optional[List['outputs.CSIScaleOperatorSpecNodeMapping']] = None,
                 plugin_node_selector: Optional[List['outputs.CSIScaleOperatorSpecPluginNodeSelector']] = None,
                 provisioner: Optional[str] = None,
                 provisioner_node_selector: Optional[List['outputs.CSIScaleOperatorSpecProvisionerNodeSelector']] = None,
                 secret_counter: Optional[float] = None,
                 spectrum_scale: Optional[str] = None,
                 trigger: Optional[str] = None):
        """
        :param str scale_hostpath: The path to the gpfs file system mounted on the host machine.
        :param str attacher: Attacher image for csi (actually attaches to the storage).
        :param List['CSIScaleOperatorSpecAttacherNodeSelectorArgs'] attacher_node_selector: Node selector for attacher sidecar.
        :param List['CSIScaleOperatorSpecClustersArgs'] clusters: A collection of gpfs cluster properties for the csi driver to mount.
        :param str driver_registrar: Sidecar container image for the csi spectrum scale plugin pods.
        :param List['CSIScaleOperatorSpecNodeMappingArgs'] node_mapping: Mapping of K8s node with SpectrumScale node.
        :param List['CSIScaleOperatorSpecPluginNodeSelectorArgs'] plugin_node_selector: Node selector for SpectrumScale CSI Plugin.
        :param str provisioner: Provisioner image for csi (actually issues provision requests).
        :param List['CSIScaleOperatorSpecProvisionerNodeSelectorArgs'] provisioner_node_selector: Node selector for provisioner sidecar.
        :param float secret_counter: An internal counter used by the operator to trigger reloads on secret change.
        :param str spectrum_scale: Image name for the csi spectrum scale plugin container.
        :param str trigger: A generic trigger to be used in kickin off the ansible operator.
        """
        pulumi.set(__self__, "scale_hostpath", scale_hostpath)
        if attacher is not None:
            pulumi.set(__self__, "attacher", attacher)
        if attacher_node_selector is not None:
            pulumi.set(__self__, "attacher_node_selector", attacher_node_selector)
        if clusters is not None:
            pulumi.set(__self__, "clusters", clusters)
        if driver_registrar is not None:
            pulumi.set(__self__, "driver_registrar", driver_registrar)
        if node_mapping is not None:
            pulumi.set(__self__, "node_mapping", node_mapping)
        if plugin_node_selector is not None:
            pulumi.set(__self__, "plugin_node_selector", plugin_node_selector)
        if provisioner is not None:
            pulumi.set(__self__, "provisioner", provisioner)
        if provisioner_node_selector is not None:
            pulumi.set(__self__, "provisioner_node_selector", provisioner_node_selector)
        if secret_counter is not None:
            pulumi.set(__self__, "secret_counter", secret_counter)
        if spectrum_scale is not None:
            pulumi.set(__self__, "spectrum_scale", spectrum_scale)
        if trigger is not None:
            pulumi.set(__self__, "trigger", trigger)

    @property
    @pulumi.getter(name="scaleHostpath")
    def scale_hostpath(self) -> str:
        """
        The path to the gpfs file system mounted on the host machine.
        """
        return pulumi.get(self, "scale_hostpath")

    @property
    @pulumi.getter
    def attacher(self) -> Optional[str]:
        """
        Attacher image for csi (actually attaches to the storage).
        """
        return pulumi.get(self, "attacher")

    @property
    @pulumi.getter(name="attacherNodeSelector")
    def attacher_node_selector(self) -> Optional[List['outputs.CSIScaleOperatorSpecAttacherNodeSelector']]:
        """
        Node selector for attacher sidecar.
        """
        return pulumi.get(self, "attacher_node_selector")

    @property
    @pulumi.getter
    def clusters(self) -> Optional[List['outputs.CSIScaleOperatorSpecClusters']]:
        """
        A collection of gpfs cluster properties for the csi driver to mount.
        """
        return pulumi.get(self, "clusters")

    @property
    @pulumi.getter(name="driverRegistrar")
    def driver_registrar(self) -> Optional[str]:
        """
        Sidecar container image for the csi spectrum scale plugin pods.
        """
        return pulumi.get(self, "driver_registrar")

    @property
    @pulumi.getter(name="nodeMapping")
    def node_mapping(self) -> Optional[List['outputs.CSIScaleOperatorSpecNodeMapping']]:
        """
        Mapping of K8s node with SpectrumScale node.
        """
        return pulumi.get(self, "node_mapping")

    @property
    @pulumi.getter(name="pluginNodeSelector")
    def plugin_node_selector(self) -> Optional[List['outputs.CSIScaleOperatorSpecPluginNodeSelector']]:
        """
        Node selector for SpectrumScale CSI Plugin.
        """
        return pulumi.get(self, "plugin_node_selector")

    @property
    @pulumi.getter
    def provisioner(self) -> Optional[str]:
        """
        Provisioner image for csi (actually issues provision requests).
        """
        return pulumi.get(self, "provisioner")

    @property
    @pulumi.getter(name="provisionerNodeSelector")
    def provisioner_node_selector(self) -> Optional[List['outputs.CSIScaleOperatorSpecProvisionerNodeSelector']]:
        """
        Node selector for provisioner sidecar.
        """
        return pulumi.get(self, "provisioner_node_selector")

    @property
    @pulumi.getter(name="secretCounter")
    def secret_counter(self) -> Optional[float]:
        """
        An internal counter used by the operator to trigger reloads on secret change.
        """
        return pulumi.get(self, "secret_counter")

    @property
    @pulumi.getter(name="spectrumScale")
    def spectrum_scale(self) -> Optional[str]:
        """
        Image name for the csi spectrum scale plugin container.
        """
        return pulumi.get(self, "spectrum_scale")

    @property
    @pulumi.getter
    def trigger(self) -> Optional[str]:
        """
        A generic trigger to be used in kickin off the ansible operator.
        """
        return pulumi.get(self, "trigger")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIScaleOperatorSpecAttacherNodeSelector(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str key: Key for node selector.
        :param str value: Value for key.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Key for node selector.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value for key.
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIScaleOperatorSpecClusters(dict):
    def __init__(__self__, *,
                 cacert: Optional[str] = None,
                 id: Optional[str] = None,
                 primary: Optional['outputs.CSIScaleOperatorSpecClustersPrimary'] = None,
                 rest_api: Optional[List['outputs.CSIScaleOperatorSpecClustersRestApi']] = None,
                 secrets: Optional[str] = None,
                 secure_ssl_mode: Optional[bool] = None):
        """
        :param str cacert: A string specifying a cacert resource name.
        :param str id: The cluster id of the gpfs cluster specified (mandatory).
        :param 'CSIScaleOperatorSpecClustersPrimaryArgs' primary: The primary file system for the GPFS cluster.
        :param List['CSIScaleOperatorSpecClustersRestApiArgs'] rest_api: A collection of targets for REST calls.
        :param str secrets: A string specifying a secret resource name.
        :param bool secure_ssl_mode: Require a secure SSL connection to connect to GPFS.
        """
        if cacert is not None:
            pulumi.set(__self__, "cacert", cacert)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if rest_api is not None:
            pulumi.set(__self__, "rest_api", rest_api)
        if secrets is not None:
            pulumi.set(__self__, "secrets", secrets)
        if secure_ssl_mode is not None:
            pulumi.set(__self__, "secure_ssl_mode", secure_ssl_mode)

    @property
    @pulumi.getter
    def cacert(self) -> Optional[str]:
        """
        A string specifying a cacert resource name.
        """
        return pulumi.get(self, "cacert")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The cluster id of the gpfs cluster specified (mandatory).
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def primary(self) -> Optional['outputs.CSIScaleOperatorSpecClustersPrimary']:
        """
        The primary file system for the GPFS cluster.
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter(name="restApi")
    def rest_api(self) -> Optional[List['outputs.CSIScaleOperatorSpecClustersRestApi']]:
        """
        A collection of targets for REST calls.
        """
        return pulumi.get(self, "rest_api")

    @property
    @pulumi.getter
    def secrets(self) -> Optional[str]:
        """
        A string specifying a secret resource name.
        """
        return pulumi.get(self, "secrets")

    @property
    @pulumi.getter(name="secureSslMode")
    def secure_ssl_mode(self) -> Optional[bool]:
        """
        Require a secure SSL connection to connect to GPFS.
        """
        return pulumi.get(self, "secure_ssl_mode")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIScaleOperatorSpecClustersPrimary(dict):
    """
    The primary file system for the GPFS cluster.
    """
    def __init__(__self__, *,
                 inode_limit: Optional[str] = None,
                 primary_fs: Optional[str] = None,
                 primary_fset: Optional[str] = None,
                 remote_cluster: Optional[str] = None):
        """
        The primary file system for the GPFS cluster.
        :param str inode_limit: Inode limit for Primary Fileset.
        :param str primary_fs: The name of the primary filesystem.
        :param str primary_fset: The name of the primary fileset, created in primaryFs.
        :param str remote_cluster: Remote cluster ID.
        """
        if inode_limit is not None:
            pulumi.set(__self__, "inode_limit", inode_limit)
        if primary_fs is not None:
            pulumi.set(__self__, "primary_fs", primary_fs)
        if primary_fset is not None:
            pulumi.set(__self__, "primary_fset", primary_fset)
        if remote_cluster is not None:
            pulumi.set(__self__, "remote_cluster", remote_cluster)

    @property
    @pulumi.getter(name="inodeLimit")
    def inode_limit(self) -> Optional[str]:
        """
        Inode limit for Primary Fileset.
        """
        return pulumi.get(self, "inode_limit")

    @property
    @pulumi.getter(name="primaryFs")
    def primary_fs(self) -> Optional[str]:
        """
        The name of the primary filesystem.
        """
        return pulumi.get(self, "primary_fs")

    @property
    @pulumi.getter(name="primaryFset")
    def primary_fset(self) -> Optional[str]:
        """
        The name of the primary fileset, created in primaryFs.
        """
        return pulumi.get(self, "primary_fset")

    @property
    @pulumi.getter(name="remoteCluster")
    def remote_cluster(self) -> Optional[str]:
        """
        Remote cluster ID.
        """
        return pulumi.get(self, "remote_cluster")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIScaleOperatorSpecClustersRestApi(dict):
    def __init__(__self__, *,
                 gui_host: Optional[str] = None,
                 gui_port: Optional[float] = None):
        """
        :param str gui_host: The hostname of the REST server.
        :param float gui_port: The port number running the REST server.
        """
        if gui_host is not None:
            pulumi.set(__self__, "gui_host", gui_host)
        if gui_port is not None:
            pulumi.set(__self__, "gui_port", gui_port)

    @property
    @pulumi.getter(name="guiHost")
    def gui_host(self) -> Optional[str]:
        """
        The hostname of the REST server.
        """
        return pulumi.get(self, "gui_host")

    @property
    @pulumi.getter(name="guiPort")
    def gui_port(self) -> Optional[float]:
        """
        The port number running the REST server.
        """
        return pulumi.get(self, "gui_port")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIScaleOperatorSpecNodeMapping(dict):
    def __init__(__self__, *,
                 k8s_node: Optional[str] = None,
                 spectrumscale_node: Optional[str] = None):
        """
        :param str k8s_node: K8s node name.
        :param str spectrumscale_node: SpectrumScale node name.
        """
        if k8s_node is not None:
            pulumi.set(__self__, "k8s_node", k8s_node)
        if spectrumscale_node is not None:
            pulumi.set(__self__, "spectrumscale_node", spectrumscale_node)

    @property
    @pulumi.getter(name="k8sNode")
    def k8s_node(self) -> Optional[str]:
        """
        K8s node name.
        """
        return pulumi.get(self, "k8s_node")

    @property
    @pulumi.getter(name="spectrumscaleNode")
    def spectrumscale_node(self) -> Optional[str]:
        """
        SpectrumScale node name.
        """
        return pulumi.get(self, "spectrumscale_node")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIScaleOperatorSpecPluginNodeSelector(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str key: Key for node selector.
        :param str value: Value for key.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Key for node selector.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value for key.
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIScaleOperatorSpecProvisionerNodeSelector(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str key: Key for node selector.
        :param str value: Value for key.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Key for node selector.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value for key.
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIScaleOperatorStatus(dict):
    def __init__(__self__, *,
                 conditions: Optional[List['outputs.CSIScaleOperatorStatusConditions']] = None):
        """
        :param List['CSIScaleOperatorStatusConditionsArgs'] conditions: The active status of the operator
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[List['outputs.CSIScaleOperatorStatusConditions']]:
        """
        The active status of the operator
        """
        return pulumi.get(self, "conditions")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CSIScaleOperatorStatusConditions(dict):
    def __init__(__self__, *,
                 ready: Optional[bool] = None):
        """
        :param bool ready: Indicates that the plugin is running.
        """
        if ready is not None:
            pulumi.set(__self__, "ready", ready)

    @property
    @pulumi.getter(name="Ready")
    def ready(self) -> Optional[bool]:
        """
        Indicates that the plugin is running.
        """
        return pulumi.get(self, "ready")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from ... import _utilities, _tables

__all__ = [
    'ApplicationConfigurationSpecArgs',
    'ApplicationConfigurationSpecComponentsArgs',
    'ApplicationConfigurationSpecComponentsParameterValuesArgs',
    'ApplicationConfigurationSpecComponentsParameterValuesValueArgs',
    'ApplicationConfigurationSpecComponentsScopesArgs',
    'ApplicationConfigurationSpecComponentsScopesScopeRefArgs',
    'ApplicationConfigurationSpecComponentsTraitsArgs',
    'ApplicationConfigurationStatusArgs',
    'ApplicationConfigurationStatusConditionsArgs',
    'ApplicationConfigurationStatusWorkloadsArgs',
    'ApplicationConfigurationStatusWorkloadsTraitsArgs',
    'ApplicationConfigurationStatusWorkloadsTraitsTraitRefArgs',
    'ApplicationConfigurationStatusWorkloadsWorkloadRefArgs',
]

@pulumi.input_type
class ApplicationConfigurationSpecArgs:
    def __init__(__self__, *,
                 components: pulumi.Input[List[pulumi.Input['ApplicationConfigurationSpecComponentsArgs']]]):
        """
        An ApplicationConfigurationSpec defines the desired state of a ApplicationConfiguration.
        :param pulumi.Input[List[pulumi.Input['ApplicationConfigurationSpecComponentsArgs']]] components: Components of which this ApplicationConfiguration consists. Each component will be used to instantiate a workload.
        """
        pulumi.set(__self__, "components", components)

    @property
    @pulumi.getter
    def components(self) -> pulumi.Input[List[pulumi.Input['ApplicationConfigurationSpecComponentsArgs']]]:
        """
        Components of which this ApplicationConfiguration consists. Each component will be used to instantiate a workload.
        """
        return pulumi.get(self, "components")

    @components.setter
    def components(self, value: pulumi.Input[List[pulumi.Input['ApplicationConfigurationSpecComponentsArgs']]]):
        pulumi.set(self, "components", value)


@pulumi.input_type
class ApplicationConfigurationSpecComponentsArgs:
    def __init__(__self__, *,
                 component_name: pulumi.Input[str],
                 parameter_values: Optional[pulumi.Input[List[pulumi.Input['ApplicationConfigurationSpecComponentsParameterValuesArgs']]]] = None,
                 scopes: Optional[pulumi.Input[List[pulumi.Input['ApplicationConfigurationSpecComponentsScopesArgs']]]] = None,
                 traits: Optional[pulumi.Input[List[pulumi.Input['ApplicationConfigurationSpecComponentsTraitsArgs']]]] = None):
        """
        An ApplicationConfigurationComponent specifies a component of an ApplicationConfiguration. Each component is used to instantiate a workload.
        :param pulumi.Input[str] component_name: ComponentName specifies a component of which an ApplicationConfiguration should consist. The named component must exist.
        :param pulumi.Input[List[pulumi.Input['ApplicationConfigurationSpecComponentsParameterValuesArgs']]] parameter_values: ParameterValues specify values for the the specified component's parameters. Any parameter required by the component must be specified.
        :param pulumi.Input[List[pulumi.Input['ApplicationConfigurationSpecComponentsScopesArgs']]] scopes: Scopes in which the specified component should exist.
        :param pulumi.Input[List[pulumi.Input['ApplicationConfigurationSpecComponentsTraitsArgs']]] traits: Traits of the specified component.
        """
        pulumi.set(__self__, "component_name", component_name)
        if parameter_values is not None:
            pulumi.set(__self__, "parameter_values", parameter_values)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if traits is not None:
            pulumi.set(__self__, "traits", traits)

    @property
    @pulumi.getter(name="componentName")
    def component_name(self) -> pulumi.Input[str]:
        """
        ComponentName specifies a component of which an ApplicationConfiguration should consist. The named component must exist.
        """
        return pulumi.get(self, "component_name")

    @component_name.setter
    def component_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "component_name", value)

    @property
    @pulumi.getter(name="parameterValues")
    def parameter_values(self) -> Optional[pulumi.Input[List[pulumi.Input['ApplicationConfigurationSpecComponentsParameterValuesArgs']]]]:
        """
        ParameterValues specify values for the the specified component's parameters. Any parameter required by the component must be specified.
        """
        return pulumi.get(self, "parameter_values")

    @parameter_values.setter
    def parameter_values(self, value: Optional[pulumi.Input[List[pulumi.Input['ApplicationConfigurationSpecComponentsParameterValuesArgs']]]]):
        pulumi.set(self, "parameter_values", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[List[pulumi.Input['ApplicationConfigurationSpecComponentsScopesArgs']]]]:
        """
        Scopes in which the specified component should exist.
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[List[pulumi.Input['ApplicationConfigurationSpecComponentsScopesArgs']]]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter
    def traits(self) -> Optional[pulumi.Input[List[pulumi.Input['ApplicationConfigurationSpecComponentsTraitsArgs']]]]:
        """
        Traits of the specified component.
        """
        return pulumi.get(self, "traits")

    @traits.setter
    def traits(self, value: Optional[pulumi.Input[List[pulumi.Input['ApplicationConfigurationSpecComponentsTraitsArgs']]]]):
        pulumi.set(self, "traits", value)


@pulumi.input_type
class ApplicationConfigurationSpecComponentsParameterValuesArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input['ApplicationConfigurationSpecComponentsParameterValuesValueArgs']):
        """
        A ComponentParameterValue specifies a value for a named parameter. The associated component must publish a parameter with this name.
        :param pulumi.Input[str] name: Name of the component parameter to set.
        :param pulumi.Input['ApplicationConfigurationSpecComponentsParameterValuesValueArgs'] value: Value to set.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the component parameter to set.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input['ApplicationConfigurationSpecComponentsParameterValuesValueArgs']:
        """
        Value to set.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input['ApplicationConfigurationSpecComponentsParameterValuesValueArgs']):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApplicationConfigurationSpecComponentsParameterValuesValueArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ApplicationConfigurationSpecComponentsScopesArgs:
    def __init__(__self__, *,
                 scope_ref: pulumi.Input['ApplicationConfigurationSpecComponentsScopesScopeRefArgs']):
        """
        A ComponentScope specifies a scope in which a component should exist.
        :param pulumi.Input['ApplicationConfigurationSpecComponentsScopesScopeRefArgs'] scope_ref: A ScopeReference must refer to an OAM scope resource.
        """
        pulumi.set(__self__, "scope_ref", scope_ref)

    @property
    @pulumi.getter(name="scopeRef")
    def scope_ref(self) -> pulumi.Input['ApplicationConfigurationSpecComponentsScopesScopeRefArgs']:
        """
        A ScopeReference must refer to an OAM scope resource.
        """
        return pulumi.get(self, "scope_ref")

    @scope_ref.setter
    def scope_ref(self, value: pulumi.Input['ApplicationConfigurationSpecComponentsScopesScopeRefArgs']):
        pulumi.set(self, "scope_ref", value)


@pulumi.input_type
class ApplicationConfigurationSpecComponentsScopesScopeRefArgs:
    def __init__(__self__, *,
                 api_version: pulumi.Input[str],
                 kind: pulumi.Input[str],
                 name: pulumi.Input[str],
                 uid: Optional[pulumi.Input[str]] = None):
        """
        A ScopeReference must refer to an OAM scope resource.
        :param pulumi.Input[str] api_version: APIVersion of the referenced object.
        :param pulumi.Input[str] kind: Kind of the referenced object.
        :param pulumi.Input[str] name: Name of the referenced object.
        :param pulumi.Input[str] uid: UID of the referenced object.
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> pulumi.Input[str]:
        """
        APIVersion of the referenced object.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Kind of the referenced object.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the referenced object.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[str]]:
        """
        UID of the referenced object.
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uid", value)


@pulumi.input_type
class ApplicationConfigurationSpecComponentsTraitsArgs:
    def __init__(__self__, *,
                 trait: pulumi.Input[Mapping[str, Any]]):
        """
        A ComponentTrait specifies a trait that should be applied to a component.
        :param pulumi.Input[Mapping[str, Any]] trait: A Trait that will be created for the component
        """
        pulumi.set(__self__, "trait", trait)

    @property
    @pulumi.getter
    def trait(self) -> pulumi.Input[Mapping[str, Any]]:
        """
        A Trait that will be created for the component
        """
        return pulumi.get(self, "trait")

    @trait.setter
    def trait(self, value: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(self, "trait", value)


@pulumi.input_type
class ApplicationConfigurationStatusArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[List[pulumi.Input['ApplicationConfigurationStatusConditionsArgs']]]] = None,
                 workloads: Optional[pulumi.Input[List[pulumi.Input['ApplicationConfigurationStatusWorkloadsArgs']]]] = None):
        """
        An ApplicationConfigurationStatus represents the observed state of a ApplicationConfiguration.
        :param pulumi.Input[List[pulumi.Input['ApplicationConfigurationStatusConditionsArgs']]] conditions: Conditions of the resource.
        :param pulumi.Input[List[pulumi.Input['ApplicationConfigurationStatusWorkloadsArgs']]] workloads: Workloads created by this ApplicationConfiguration.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if workloads is not None:
            pulumi.set(__self__, "workloads", workloads)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[List[pulumi.Input['ApplicationConfigurationStatusConditionsArgs']]]]:
        """
        Conditions of the resource.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[List[pulumi.Input['ApplicationConfigurationStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def workloads(self) -> Optional[pulumi.Input[List[pulumi.Input['ApplicationConfigurationStatusWorkloadsArgs']]]]:
        """
        Workloads created by this ApplicationConfiguration.
        """
        return pulumi.get(self, "workloads")

    @workloads.setter
    def workloads(self, value: Optional[pulumi.Input[List[pulumi.Input['ApplicationConfigurationStatusWorkloadsArgs']]]]):
        pulumi.set(self, "workloads", value)


@pulumi.input_type
class ApplicationConfigurationStatusConditionsArgs:
    def __init__(__self__, *,
                 last_transition_time: pulumi.Input[str],
                 reason: pulumi.Input[str],
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 message: Optional[pulumi.Input[str]] = None):
        """
        A Condition that may apply to a resource.
        :param pulumi.Input[str] last_transition_time: LastTransitionTime is the last time this condition transitioned from one status to another.
        :param pulumi.Input[str] reason: A Reason for this condition's last transition from one status to another.
        :param pulumi.Input[str] status: Status of this condition; is it currently True, False, or Unknown?
        :param pulumi.Input[str] type: Type of this condition. At most one of each condition type may apply to a resource at any point in time.
        :param pulumi.Input[str] message: A Message containing details about this condition's last transition from one status to another, if any.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> pulumi.Input[str]:
        """
        LastTransitionTime is the last time this condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def reason(self) -> pulumi.Input[str]:
        """
        A Reason for this condition's last transition from one status to another.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: pulumi.Input[str]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status of this condition; is it currently True, False, or Unknown?
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of this condition. At most one of each condition type may apply to a resource at any point in time.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        A Message containing details about this condition's last transition from one status to another, if any.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)


@pulumi.input_type
class ApplicationConfigurationStatusWorkloadsArgs:
    def __init__(__self__, *,
                 component_name: Optional[pulumi.Input[str]] = None,
                 traits: Optional[pulumi.Input[List[pulumi.Input['ApplicationConfigurationStatusWorkloadsTraitsArgs']]]] = None,
                 workload_ref: Optional[pulumi.Input['ApplicationConfigurationStatusWorkloadsWorkloadRefArgs']] = None):
        """
        A WorkloadStatus represents the status of a workload.
        :param pulumi.Input[str] component_name: ComponentName that produced this workload.
        :param pulumi.Input[List[pulumi.Input['ApplicationConfigurationStatusWorkloadsTraitsArgs']]] traits: Traits associated with this workload.
        :param pulumi.Input['ApplicationConfigurationStatusWorkloadsWorkloadRefArgs'] workload_ref: Reference to a workload created by an ApplicationConfiguration.
        """
        if component_name is not None:
            pulumi.set(__self__, "component_name", component_name)
        if traits is not None:
            pulumi.set(__self__, "traits", traits)
        if workload_ref is not None:
            pulumi.set(__self__, "workload_ref", workload_ref)

    @property
    @pulumi.getter(name="componentName")
    def component_name(self) -> Optional[pulumi.Input[str]]:
        """
        ComponentName that produced this workload.
        """
        return pulumi.get(self, "component_name")

    @component_name.setter
    def component_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component_name", value)

    @property
    @pulumi.getter
    def traits(self) -> Optional[pulumi.Input[List[pulumi.Input['ApplicationConfigurationStatusWorkloadsTraitsArgs']]]]:
        """
        Traits associated with this workload.
        """
        return pulumi.get(self, "traits")

    @traits.setter
    def traits(self, value: Optional[pulumi.Input[List[pulumi.Input['ApplicationConfigurationStatusWorkloadsTraitsArgs']]]]):
        pulumi.set(self, "traits", value)

    @property
    @pulumi.getter(name="workloadRef")
    def workload_ref(self) -> Optional[pulumi.Input['ApplicationConfigurationStatusWorkloadsWorkloadRefArgs']]:
        """
        Reference to a workload created by an ApplicationConfiguration.
        """
        return pulumi.get(self, "workload_ref")

    @workload_ref.setter
    def workload_ref(self, value: Optional[pulumi.Input['ApplicationConfigurationStatusWorkloadsWorkloadRefArgs']]):
        pulumi.set(self, "workload_ref", value)


@pulumi.input_type
class ApplicationConfigurationStatusWorkloadsTraitsArgs:
    def __init__(__self__, *,
                 trait_ref: pulumi.Input['ApplicationConfigurationStatusWorkloadsTraitsTraitRefArgs']):
        """
        A WorkloadTrait represents a trait associated with a workload.
        :param pulumi.Input['ApplicationConfigurationStatusWorkloadsTraitsTraitRefArgs'] trait_ref: Reference to a trait created by an ApplicationConfiguration.
        """
        pulumi.set(__self__, "trait_ref", trait_ref)

    @property
    @pulumi.getter(name="traitRef")
    def trait_ref(self) -> pulumi.Input['ApplicationConfigurationStatusWorkloadsTraitsTraitRefArgs']:
        """
        Reference to a trait created by an ApplicationConfiguration.
        """
        return pulumi.get(self, "trait_ref")

    @trait_ref.setter
    def trait_ref(self, value: pulumi.Input['ApplicationConfigurationStatusWorkloadsTraitsTraitRefArgs']):
        pulumi.set(self, "trait_ref", value)


@pulumi.input_type
class ApplicationConfigurationStatusWorkloadsTraitsTraitRefArgs:
    def __init__(__self__, *,
                 api_version: pulumi.Input[str],
                 kind: pulumi.Input[str],
                 name: pulumi.Input[str],
                 uid: Optional[pulumi.Input[str]] = None):
        """
        Reference to a trait created by an ApplicationConfiguration.
        :param pulumi.Input[str] api_version: APIVersion of the referenced object.
        :param pulumi.Input[str] kind: Kind of the referenced object.
        :param pulumi.Input[str] name: Name of the referenced object.
        :param pulumi.Input[str] uid: UID of the referenced object.
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> pulumi.Input[str]:
        """
        APIVersion of the referenced object.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Kind of the referenced object.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the referenced object.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[str]]:
        """
        UID of the referenced object.
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uid", value)


@pulumi.input_type
class ApplicationConfigurationStatusWorkloadsWorkloadRefArgs:
    def __init__(__self__, *,
                 api_version: pulumi.Input[str],
                 kind: pulumi.Input[str],
                 name: pulumi.Input[str],
                 uid: Optional[pulumi.Input[str]] = None):
        """
        Reference to a workload created by an ApplicationConfiguration.
        :param pulumi.Input[str] api_version: APIVersion of the referenced object.
        :param pulumi.Input[str] kind: Kind of the referenced object.
        :param pulumi.Input[str] name: Name of the referenced object.
        :param pulumi.Input[str] uid: UID of the referenced object.
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> pulumi.Input[str]:
        """
        APIVersion of the referenced object.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Kind of the referenced object.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the referenced object.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[str]]:
        """
        UID of the referenced object.
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uid", value)



# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from ... import _utilities, _tables

__all__ = [
    'KogitoBuildSpecArgs',
    'KogitoBuildSpecArtifactArgs',
    'KogitoBuildSpecBuildImageArgs',
    'KogitoBuildSpecEnvsArgs',
    'KogitoBuildSpecEnvsValueFromArgs',
    'KogitoBuildSpecEnvsValueFromConfigMapKeyRefArgs',
    'KogitoBuildSpecEnvsValueFromFieldRefArgs',
    'KogitoBuildSpecEnvsValueFromResourceFieldRefArgs',
    'KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorArgs',
    'KogitoBuildSpecEnvsValueFromSecretKeyRefArgs',
    'KogitoBuildSpecGitSourceArgs',
    'KogitoBuildSpecResourcesArgs',
    'KogitoBuildSpecResourcesLimitsArgs',
    'KogitoBuildSpecResourcesRequestsArgs',
    'KogitoBuildSpecRuntimeImageArgs',
    'KogitoBuildSpecWebHooksArgs',
    'KogitoBuildStatusArgs',
    'KogitoBuildStatusBuildsArgs',
    'KogitoBuildStatusConditionsArgs',
]

@pulumi.input_type
class KogitoBuildSpecArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 artifact: Optional[pulumi.Input['KogitoBuildSpecArtifactArgs']] = None,
                 build_image: Optional[pulumi.Input['KogitoBuildSpecBuildImageArgs']] = None,
                 disable_incremental: Optional[pulumi.Input[bool]] = None,
                 enable_maven_download_output: Optional[pulumi.Input[bool]] = None,
                 envs: Optional[pulumi.Input[List[pulumi.Input['KogitoBuildSpecEnvsArgs']]]] = None,
                 git_source: Optional[pulumi.Input['KogitoBuildSpecGitSourceArgs']] = None,
                 maven_mirror_url: Optional[pulumi.Input[str]] = None,
                 native: Optional[pulumi.Input[bool]] = None,
                 resources: Optional[pulumi.Input['KogitoBuildSpecResourcesArgs']] = None,
                 runtime: Optional[pulumi.Input[str]] = None,
                 runtime_image: Optional[pulumi.Input['KogitoBuildSpecRuntimeImageArgs']] = None,
                 target_kogito_runtime: Optional[pulumi.Input[str]] = None,
                 web_hooks: Optional[pulumi.Input[List[pulumi.Input['KogitoBuildSpecWebHooksArgs']]]] = None):
        """
        KogitoBuildSpec defines the desired state of KogitoBuild.
        :param pulumi.Input[str] type: Sets the type of build that this instance will handle: Binary - takes an uploaded binary file already compiled and creates a Kogito service image from it. RemoteSource - pulls the source code from a Git repository, builds the binary and then the final Kogito service image. LocalSource - takes an uploaded resource file such as DRL (rules), DMN (decision) or BPMN (process), builds the binary and the final Kogito service image.
        :param pulumi.Input['KogitoBuildSpecArtifactArgs'] artifact: Artifact contains override information for building the Maven artifact (used for Local Source builds). You might want to override this information when building from decisions, rules or process files. In this scenario the Kogito Images will generate a new Java project for you underneath. This information will be used to generate this project.
        :param pulumi.Input['KogitoBuildSpecBuildImageArgs'] build_image: Image used to build the Kogito Service from source (Local and Remote). The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-jvm-builder, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
        :param pulumi.Input[bool] disable_incremental: DisableIncremental indicates that source to image builds should NOT be incremental. Defaults to false.
        :param pulumi.Input[bool] enable_maven_download_output: If set to true will print the logs for downloading/uploading of maven dependencies. Defaults to false.
        :param pulumi.Input[List[pulumi.Input['KogitoBuildSpecEnvsArgs']]] envs: Environment variables used during build time.
        :param pulumi.Input['KogitoBuildSpecGitSourceArgs'] git_source: Information about the git repository where the Kogito Service source code resides. Ignored for binary builds.
        :param pulumi.Input[str] maven_mirror_url: Maven Mirror URL to be used during source-to-image builds (Local and Remote) to considerably increase build speed.
        :param pulumi.Input[bool] native: Native indicates if the Kogito Service built should be compiled to run on native mode when Runtime is Quarkus (Source to Image build only). For more information, see https://www.graalvm.org/docs/reference-manual/aot-compilation/.
        :param pulumi.Input['KogitoBuildSpecResourcesArgs'] resources: Resources Requirements for builder pods.
        :param pulumi.Input[str] runtime: Which runtime Kogito service base image to use when building the Kogito service. If "BuildImage" is set, this value is ignored by the operator. Default value: quarkus.
        :param pulumi.Input['KogitoBuildSpecRuntimeImageArgs'] runtime_image: Image used as the base image for the final Kogito service. This image only has the required packages to run the application. For example: quarkus based services will have only JVM installed, native services only the packages required by the OS. The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-jvm-builder, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
        :param pulumi.Input[str] target_kogito_runtime: Set this field targeting the desired KogitoRuntime when this KogitoBuild instance has a different name than the KogitoRuntime. By default this KogitoBuild instance will generate a final image named after its own name (.metadata.name). On OpenShift, an ImageStream will be created causing a redeployment on any KogitoRuntime with the same name. On Kubernetes, the final image will be pushed to the KogitoRuntime deployment. If you have multiple KogitoBuild instances (let's say BinaryBuildType and Remote Source), you might need that both target the same KogitoRuntime. Both KogitoBuilds will update the same ImageStream or generate a final image to the same KogitoRuntime deployment.
        :param pulumi.Input[List[pulumi.Input['KogitoBuildSpecWebHooksArgs']]] web_hooks: WebHooks secrets for source to image builds based on Git repositories (Remote Sources).
        """
        pulumi.set(__self__, "type", type)
        if artifact is not None:
            pulumi.set(__self__, "artifact", artifact)
        if build_image is not None:
            pulumi.set(__self__, "build_image", build_image)
        if disable_incremental is not None:
            pulumi.set(__self__, "disable_incremental", disable_incremental)
        if enable_maven_download_output is not None:
            pulumi.set(__self__, "enable_maven_download_output", enable_maven_download_output)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if git_source is not None:
            pulumi.set(__self__, "git_source", git_source)
        if maven_mirror_url is not None:
            pulumi.set(__self__, "maven_mirror_url", maven_mirror_url)
        if native is not None:
            pulumi.set(__self__, "native", native)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)
        if runtime_image is not None:
            pulumi.set(__self__, "runtime_image", runtime_image)
        if target_kogito_runtime is not None:
            pulumi.set(__self__, "target_kogito_runtime", target_kogito_runtime)
        if web_hooks is not None:
            pulumi.set(__self__, "web_hooks", web_hooks)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Sets the type of build that this instance will handle: Binary - takes an uploaded binary file already compiled and creates a Kogito service image from it. RemoteSource - pulls the source code from a Git repository, builds the binary and then the final Kogito service image. LocalSource - takes an uploaded resource file such as DRL (rules), DMN (decision) or BPMN (process), builds the binary and the final Kogito service image.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def artifact(self) -> Optional[pulumi.Input['KogitoBuildSpecArtifactArgs']]:
        """
        Artifact contains override information for building the Maven artifact (used for Local Source builds). You might want to override this information when building from decisions, rules or process files. In this scenario the Kogito Images will generate a new Java project for you underneath. This information will be used to generate this project.
        """
        return pulumi.get(self, "artifact")

    @artifact.setter
    def artifact(self, value: Optional[pulumi.Input['KogitoBuildSpecArtifactArgs']]):
        pulumi.set(self, "artifact", value)

    @property
    @pulumi.getter(name="buildImage")
    def build_image(self) -> Optional[pulumi.Input['KogitoBuildSpecBuildImageArgs']]:
        """
        Image used to build the Kogito Service from source (Local and Remote). The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-jvm-builder, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
        """
        return pulumi.get(self, "build_image")

    @build_image.setter
    def build_image(self, value: Optional[pulumi.Input['KogitoBuildSpecBuildImageArgs']]):
        pulumi.set(self, "build_image", value)

    @property
    @pulumi.getter(name="disableIncremental")
    def disable_incremental(self) -> Optional[pulumi.Input[bool]]:
        """
        DisableIncremental indicates that source to image builds should NOT be incremental. Defaults to false.
        """
        return pulumi.get(self, "disable_incremental")

    @disable_incremental.setter
    def disable_incremental(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_incremental", value)

    @property
    @pulumi.getter(name="enableMavenDownloadOutput")
    def enable_maven_download_output(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true will print the logs for downloading/uploading of maven dependencies. Defaults to false.
        """
        return pulumi.get(self, "enable_maven_download_output")

    @enable_maven_download_output.setter
    def enable_maven_download_output(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_maven_download_output", value)

    @property
    @pulumi.getter
    def envs(self) -> Optional[pulumi.Input[List[pulumi.Input['KogitoBuildSpecEnvsArgs']]]]:
        """
        Environment variables used during build time.
        """
        return pulumi.get(self, "envs")

    @envs.setter
    def envs(self, value: Optional[pulumi.Input[List[pulumi.Input['KogitoBuildSpecEnvsArgs']]]]):
        pulumi.set(self, "envs", value)

    @property
    @pulumi.getter(name="gitSource")
    def git_source(self) -> Optional[pulumi.Input['KogitoBuildSpecGitSourceArgs']]:
        """
        Information about the git repository where the Kogito Service source code resides. Ignored for binary builds.
        """
        return pulumi.get(self, "git_source")

    @git_source.setter
    def git_source(self, value: Optional[pulumi.Input['KogitoBuildSpecGitSourceArgs']]):
        pulumi.set(self, "git_source", value)

    @property
    @pulumi.getter(name="mavenMirrorURL")
    def maven_mirror_url(self) -> Optional[pulumi.Input[str]]:
        """
        Maven Mirror URL to be used during source-to-image builds (Local and Remote) to considerably increase build speed.
        """
        return pulumi.get(self, "maven_mirror_url")

    @maven_mirror_url.setter
    def maven_mirror_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maven_mirror_url", value)

    @property
    @pulumi.getter
    def native(self) -> Optional[pulumi.Input[bool]]:
        """
        Native indicates if the Kogito Service built should be compiled to run on native mode when Runtime is Quarkus (Source to Image build only). For more information, see https://www.graalvm.org/docs/reference-manual/aot-compilation/.
        """
        return pulumi.get(self, "native")

    @native.setter
    def native(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "native", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['KogitoBuildSpecResourcesArgs']]:
        """
        Resources Requirements for builder pods.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['KogitoBuildSpecResourcesArgs']]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter
    def runtime(self) -> Optional[pulumi.Input[str]]:
        """
        Which runtime Kogito service base image to use when building the Kogito service. If "BuildImage" is set, this value is ignored by the operator. Default value: quarkus.
        """
        return pulumi.get(self, "runtime")

    @runtime.setter
    def runtime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "runtime", value)

    @property
    @pulumi.getter(name="runtimeImage")
    def runtime_image(self) -> Optional[pulumi.Input['KogitoBuildSpecRuntimeImageArgs']]:
        """
        Image used as the base image for the final Kogito service. This image only has the required packages to run the application. For example: quarkus based services will have only JVM installed, native services only the packages required by the OS. The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-jvm-builder, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
        """
        return pulumi.get(self, "runtime_image")

    @runtime_image.setter
    def runtime_image(self, value: Optional[pulumi.Input['KogitoBuildSpecRuntimeImageArgs']]):
        pulumi.set(self, "runtime_image", value)

    @property
    @pulumi.getter(name="targetKogitoRuntime")
    def target_kogito_runtime(self) -> Optional[pulumi.Input[str]]:
        """
        Set this field targeting the desired KogitoRuntime when this KogitoBuild instance has a different name than the KogitoRuntime. By default this KogitoBuild instance will generate a final image named after its own name (.metadata.name). On OpenShift, an ImageStream will be created causing a redeployment on any KogitoRuntime with the same name. On Kubernetes, the final image will be pushed to the KogitoRuntime deployment. If you have multiple KogitoBuild instances (let's say BinaryBuildType and Remote Source), you might need that both target the same KogitoRuntime. Both KogitoBuilds will update the same ImageStream or generate a final image to the same KogitoRuntime deployment.
        """
        return pulumi.get(self, "target_kogito_runtime")

    @target_kogito_runtime.setter
    def target_kogito_runtime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_kogito_runtime", value)

    @property
    @pulumi.getter(name="webHooks")
    def web_hooks(self) -> Optional[pulumi.Input[List[pulumi.Input['KogitoBuildSpecWebHooksArgs']]]]:
        """
        WebHooks secrets for source to image builds based on Git repositories (Remote Sources).
        """
        return pulumi.get(self, "web_hooks")

    @web_hooks.setter
    def web_hooks(self, value: Optional[pulumi.Input[List[pulumi.Input['KogitoBuildSpecWebHooksArgs']]]]):
        pulumi.set(self, "web_hooks", value)


@pulumi.input_type
class KogitoBuildSpecArtifactArgs:
    def __init__(__self__, *,
                 artifact_id: Optional[pulumi.Input[str]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Artifact contains override information for building the Maven artifact (used for Local Source builds). You might want to override this information when building from decisions, rules or process files. In this scenario the Kogito Images will generate a new Java project for you underneath. This information will be used to generate this project.
        :param pulumi.Input[str] artifact_id: Indicates the unique base name of the primary artifact being generated.
        :param pulumi.Input[str] group_id: Indicates the unique identifier of the organization or group that created the project.
        :param pulumi.Input[str] version: Indicates the version of the artifact generated by the project.
        """
        if artifact_id is not None:
            pulumi.set(__self__, "artifact_id", artifact_id)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="artifactId")
    def artifact_id(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the unique base name of the primary artifact being generated.
        """
        return pulumi.get(self, "artifact_id")

    @artifact_id.setter
    def artifact_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "artifact_id", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the unique identifier of the organization or group that created the project.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the version of the artifact generated by the project.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class KogitoBuildSpecBuildImageArgs:
    def __init__(__self__, *,
                 domain: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        Image used to build the Kogito Service from source (Local and Remote). The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-jvm-builder, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class KogitoBuildSpecEnvsArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None,
                 value_from: Optional[pulumi.Input['KogitoBuildSpecEnvsValueFromArgs']] = None):
        """
        EnvVar represents an environment variable present in a Container.
        :param pulumi.Input[str] name: Name of the environment variable. Must be a C_IDENTIFIER.
        :param pulumi.Input[str] value: Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        :param pulumi.Input['KogitoBuildSpecEnvsValueFromArgs'] value_from: Source for the environment variable's value. Cannot be used if value is not empty.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the environment variable. Must be a C_IDENTIFIER.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional[pulumi.Input['KogitoBuildSpecEnvsValueFromArgs']]:
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        """
        return pulumi.get(self, "value_from")

    @value_from.setter
    def value_from(self, value: Optional[pulumi.Input['KogitoBuildSpecEnvsValueFromArgs']]):
        pulumi.set(self, "value_from", value)


@pulumi.input_type
class KogitoBuildSpecEnvsValueFromArgs:
    def __init__(__self__, *,
                 config_map_key_ref: Optional[pulumi.Input['KogitoBuildSpecEnvsValueFromConfigMapKeyRefArgs']] = None,
                 field_ref: Optional[pulumi.Input['KogitoBuildSpecEnvsValueFromFieldRefArgs']] = None,
                 resource_field_ref: Optional[pulumi.Input['KogitoBuildSpecEnvsValueFromResourceFieldRefArgs']] = None,
                 secret_key_ref: Optional[pulumi.Input['KogitoBuildSpecEnvsValueFromSecretKeyRefArgs']] = None):
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        :param pulumi.Input['KogitoBuildSpecEnvsValueFromConfigMapKeyRefArgs'] config_map_key_ref: Selects a key of a ConfigMap.
        :param pulumi.Input['KogitoBuildSpecEnvsValueFromFieldRefArgs'] field_ref: Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param pulumi.Input['KogitoBuildSpecEnvsValueFromResourceFieldRefArgs'] resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param pulumi.Input['KogitoBuildSpecEnvsValueFromSecretKeyRefArgs'] secret_key_ref: Selects a key of a secret in the pod's namespace
        """
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional[pulumi.Input['KogitoBuildSpecEnvsValueFromConfigMapKeyRefArgs']]:
        """
        Selects a key of a ConfigMap.
        """
        return pulumi.get(self, "config_map_key_ref")

    @config_map_key_ref.setter
    def config_map_key_ref(self, value: Optional[pulumi.Input['KogitoBuildSpecEnvsValueFromConfigMapKeyRefArgs']]):
        pulumi.set(self, "config_map_key_ref", value)

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional[pulumi.Input['KogitoBuildSpecEnvsValueFromFieldRefArgs']]:
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        """
        return pulumi.get(self, "field_ref")

    @field_ref.setter
    def field_ref(self, value: Optional[pulumi.Input['KogitoBuildSpecEnvsValueFromFieldRefArgs']]):
        pulumi.set(self, "field_ref", value)

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional[pulumi.Input['KogitoBuildSpecEnvsValueFromResourceFieldRefArgs']]:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    @resource_field_ref.setter
    def resource_field_ref(self, value: Optional[pulumi.Input['KogitoBuildSpecEnvsValueFromResourceFieldRefArgs']]):
        pulumi.set(self, "resource_field_ref", value)

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional[pulumi.Input['KogitoBuildSpecEnvsValueFromSecretKeyRefArgs']]:
        """
        Selects a key of a secret in the pod's namespace
        """
        return pulumi.get(self, "secret_key_ref")

    @secret_key_ref.setter
    def secret_key_ref(self, value: Optional[pulumi.Input['KogitoBuildSpecEnvsValueFromSecretKeyRefArgs']]):
        pulumi.set(self, "secret_key_ref", value)


@pulumi.input_type
class KogitoBuildSpecEnvsValueFromConfigMapKeyRefArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        Selects a key of a ConfigMap.
        :param pulumi.Input[str] key: The key to select.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the ConfigMap or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key to select.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the ConfigMap or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class KogitoBuildSpecEnvsValueFromFieldRefArgs:
    def __init__(__self__, *,
                 field_path: pulumi.Input[str],
                 api_version: Optional[pulumi.Input[str]] = None):
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param pulumi.Input[str] field_path: Path of the field to select in the specified API version.
        :param pulumi.Input[str] api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> pulumi.Input[str]:
        """
        Path of the field to select in the specified API version.
        """
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_path", value)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)


@pulumi.input_type
class KogitoBuildSpecEnvsValueFromResourceFieldRefArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 container_name: Optional[pulumi.Input[str]] = None,
                 divisor: Optional[pulumi.Input['KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorArgs']] = None):
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param pulumi.Input[str] resource: Required: resource to select
        :param pulumi.Input[str] container_name: Container name: required for volumes, optional for env vars
        :param pulumi.Input['KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorArgs'] divisor: Specifies the output format of the exposed resources, defaults to "1"
        """
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        """
        Required: resource to select
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Container name: required for volumes, optional for env vars
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter
    def divisor(self) -> Optional[pulumi.Input['KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorArgs']]:
        """
        Specifies the output format of the exposed resources, defaults to "1"
        """
        return pulumi.get(self, "divisor")

    @divisor.setter
    def divisor(self, value: Optional[pulumi.Input['KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorArgs']]):
        pulumi.set(self, "divisor", value)


@pulumi.input_type
class KogitoBuildSpecEnvsValueFromResourceFieldRefDivisorArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class KogitoBuildSpecEnvsValueFromSecretKeyRefArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        Selects a key of a secret in the pod's namespace
        :param pulumi.Input[str] key: The key of the secret to select from.  Must be a valid secret key.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the Secret or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key of the secret to select from.  Must be a valid secret key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the Secret or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class KogitoBuildSpecGitSourceArgs:
    def __init__(__self__, *,
                 uri: pulumi.Input[str],
                 context_dir: Optional[pulumi.Input[str]] = None,
                 reference: Optional[pulumi.Input[str]] = None):
        """
        Information about the git repository where the Kogito Service source code resides. Ignored for binary builds.
        :param pulumi.Input[str] uri: Git URI for the s2i source.
        :param pulumi.Input[str] context_dir: Context/subdirectory where the code is located, relative to the repo root.
        :param pulumi.Input[str] reference: Branch to use in the Git repository.
        """
        pulumi.set(__self__, "uri", uri)
        if context_dir is not None:
            pulumi.set(__self__, "context_dir", context_dir)
        if reference is not None:
            pulumi.set(__self__, "reference", reference)

    @property
    @pulumi.getter
    def uri(self) -> pulumi.Input[str]:
        """
        Git URI for the s2i source.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="contextDir")
    def context_dir(self) -> Optional[pulumi.Input[str]]:
        """
        Context/subdirectory where the code is located, relative to the repo root.
        """
        return pulumi.get(self, "context_dir")

    @context_dir.setter
    def context_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "context_dir", value)

    @property
    @pulumi.getter
    def reference(self) -> Optional[pulumi.Input[str]]:
        """
        Branch to use in the Git repository.
        """
        return pulumi.get(self, "reference")

    @reference.setter
    def reference(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reference", value)


@pulumi.input_type
class KogitoBuildSpecResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['KogitoBuildSpecResourcesLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['KogitoBuildSpecResourcesRequestsArgs']]]] = None):
        """
        Resources Requirements for builder pods.
        :param pulumi.Input[Mapping[str, pulumi.Input['KogitoBuildSpecResourcesLimitsArgs']]] limits: Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param pulumi.Input[Mapping[str, pulumi.Input['KogitoBuildSpecResourcesRequestsArgs']]] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['KogitoBuildSpecResourcesLimitsArgs']]]]:
        """
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['KogitoBuildSpecResourcesLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['KogitoBuildSpecResourcesRequestsArgs']]]]:
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['KogitoBuildSpecResourcesRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class KogitoBuildSpecResourcesLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class KogitoBuildSpecResourcesRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class KogitoBuildSpecRuntimeImageArgs:
    def __init__(__self__, *,
                 domain: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        Image used as the base image for the final Kogito service. This image only has the required packages to run the application. For example: quarkus based services will have only JVM installed, native services only the packages required by the OS. The operator will use the one provided by the Kogito Team based on the "Runtime" field. Example: Domain: quay.io, Namespace: kiegroup, Name: kogito-jvm-builder, Tag: latest. On OpenShift an ImageStream will be created in the current namespace pointing to the given image.
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class KogitoBuildSpecWebHooksArgs:
    def __init__(__self__, *,
                 secret: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        WebHookSecret Secret to use for a given webHook.
        :param pulumi.Input[str] secret: Secret value for webHook
        :param pulumi.Input[str] type: WebHook type, either GitHub or Generic.
        """
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        """
        Secret value for webHook
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        WebHook type, either GitHub or Generic.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class KogitoBuildStatusArgs:
    def __init__(__self__, *,
                 builds: pulumi.Input['KogitoBuildStatusBuildsArgs'],
                 conditions: pulumi.Input[List[pulumi.Input['KogitoBuildStatusConditionsArgs']]],
                 latest_build: Optional[pulumi.Input[str]] = None):
        """
        KogitoBuildStatus defines the observed state of KogitoBuild.
        :param pulumi.Input['KogitoBuildStatusBuildsArgs'] builds: History of builds
        :param pulumi.Input[List[pulumi.Input['KogitoBuildStatusConditionsArgs']]] conditions: History of conditions for the resource, shows the status of the younger builder controlled by this instance
        """
        pulumi.set(__self__, "builds", builds)
        pulumi.set(__self__, "conditions", conditions)
        if latest_build is not None:
            pulumi.set(__self__, "latest_build", latest_build)

    @property
    @pulumi.getter
    def builds(self) -> pulumi.Input['KogitoBuildStatusBuildsArgs']:
        """
        History of builds
        """
        return pulumi.get(self, "builds")

    @builds.setter
    def builds(self, value: pulumi.Input['KogitoBuildStatusBuildsArgs']):
        pulumi.set(self, "builds", value)

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[List[pulumi.Input['KogitoBuildStatusConditionsArgs']]]:
        """
        History of conditions for the resource, shows the status of the younger builder controlled by this instance
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[List[pulumi.Input['KogitoBuildStatusConditionsArgs']]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="latestBuild")
    def latest_build(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "latest_build")

    @latest_build.setter
    def latest_build(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "latest_build", value)


@pulumi.input_type
class KogitoBuildStatusBuildsArgs:
    def __init__(__self__, *,
                 cancelled: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 complete: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 error: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 failed: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 new: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 pending: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None,
                 running: Optional[pulumi.Input[List[pulumi.Input[str]]]] = None):
        """
        History of builds
        :param pulumi.Input[List[pulumi.Input[str]]] cancelled: Builds have been stopped from executing.
        :param pulumi.Input[List[pulumi.Input[str]]] complete: Builds have executed and succeeded.
        :param pulumi.Input[List[pulumi.Input[str]]] error: Builds have been prevented from executing by an error.
        :param pulumi.Input[List[pulumi.Input[str]]] failed: Builds have executed and failed.
        :param pulumi.Input[List[pulumi.Input[str]]] new: Builds are being created.
        :param pulumi.Input[List[pulumi.Input[str]]] pending: Builds are about to start running.
        :param pulumi.Input[List[pulumi.Input[str]]] running: Builds are running.
        """
        if cancelled is not None:
            pulumi.set(__self__, "cancelled", cancelled)
        if complete is not None:
            pulumi.set(__self__, "complete", complete)
        if error is not None:
            pulumi.set(__self__, "error", error)
        if failed is not None:
            pulumi.set(__self__, "failed", failed)
        if new is not None:
            pulumi.set(__self__, "new", new)
        if pending is not None:
            pulumi.set(__self__, "pending", pending)
        if running is not None:
            pulumi.set(__self__, "running", running)

    @property
    @pulumi.getter
    def cancelled(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Builds have been stopped from executing.
        """
        return pulumi.get(self, "cancelled")

    @cancelled.setter
    def cancelled(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "cancelled", value)

    @property
    @pulumi.getter
    def complete(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Builds have executed and succeeded.
        """
        return pulumi.get(self, "complete")

    @complete.setter
    def complete(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "complete", value)

    @property
    @pulumi.getter
    def error(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Builds have been prevented from executing by an error.
        """
        return pulumi.get(self, "error")

    @error.setter
    def error(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "error", value)

    @property
    @pulumi.getter
    def failed(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Builds have executed and failed.
        """
        return pulumi.get(self, "failed")

    @failed.setter
    def failed(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "failed", value)

    @property
    @pulumi.getter
    def new(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Builds are being created.
        """
        return pulumi.get(self, "new")

    @new.setter
    def new(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "new", value)

    @property
    @pulumi.getter
    def pending(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Builds are about to start running.
        """
        return pulumi.get(self, "pending")

    @pending.setter
    def pending(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "pending", value)

    @property
    @pulumi.getter
    def running(self) -> Optional[pulumi.Input[List[pulumi.Input[str]]]]:
        """
        Builds are running.
        """
        return pulumi.get(self, "running")

    @running.setter
    def running(self, value: Optional[pulumi.Input[List[pulumi.Input[str]]]]):
        pulumi.set(self, "running", value)


@pulumi.input_type
class KogitoBuildStatusConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        KogitoBuildConditions describes the conditions for this build instance according to Kubernetes status interface.
        :param pulumi.Input[str] status: Status ...
        :param pulumi.Input[str] type: Type of this condition
        :param pulumi.Input[str] last_transition_time: LastTransitionTime ...
        :param pulumi.Input[str] message: Message ...
        :param pulumi.Input[str] reason: Reason of this condition
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status ...
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of this condition
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        """
        LastTransitionTime ...
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Message ...
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        Reason of this condition
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)



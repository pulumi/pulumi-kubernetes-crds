# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'DatadogAgentSpecArgs',
    'DatadogAgentSpecAgentArgs',
    'DatadogAgentSpecAgentApmArgs',
    'DatadogAgentSpecAgentApmEnvArgs',
    'DatadogAgentSpecAgentApmEnvValueFromArgs',
    'DatadogAgentSpecAgentApmEnvValueFromConfigMapKeyRefArgs',
    'DatadogAgentSpecAgentApmEnvValueFromFieldRefArgs',
    'DatadogAgentSpecAgentApmEnvValueFromResourceFieldRefArgs',
    'DatadogAgentSpecAgentApmEnvValueFromResourceFieldRefDivisorArgs',
    'DatadogAgentSpecAgentApmEnvValueFromSecretKeyRefArgs',
    'DatadogAgentSpecAgentApmResourcesArgs',
    'DatadogAgentSpecAgentApmResourcesLimitsArgs',
    'DatadogAgentSpecAgentApmResourcesRequestsArgs',
    'DatadogAgentSpecAgentConfigArgs',
    'DatadogAgentSpecAgentConfigChecksdArgs',
    'DatadogAgentSpecAgentConfigConfdArgs',
    'DatadogAgentSpecAgentConfigCriSocketArgs',
    'DatadogAgentSpecAgentConfigDogstatsdArgs',
    'DatadogAgentSpecAgentConfigEnvArgs',
    'DatadogAgentSpecAgentConfigEnvValueFromArgs',
    'DatadogAgentSpecAgentConfigEnvValueFromConfigMapKeyRefArgs',
    'DatadogAgentSpecAgentConfigEnvValueFromFieldRefArgs',
    'DatadogAgentSpecAgentConfigEnvValueFromResourceFieldRefArgs',
    'DatadogAgentSpecAgentConfigEnvValueFromResourceFieldRefDivisorArgs',
    'DatadogAgentSpecAgentConfigEnvValueFromSecretKeyRefArgs',
    'DatadogAgentSpecAgentConfigResourcesArgs',
    'DatadogAgentSpecAgentConfigResourcesLimitsArgs',
    'DatadogAgentSpecAgentConfigResourcesRequestsArgs',
    'DatadogAgentSpecAgentConfigSecurityContextArgs',
    'DatadogAgentSpecAgentConfigSecurityContextCapabilitiesArgs',
    'DatadogAgentSpecAgentConfigSecurityContextSeLinuxOptionsArgs',
    'DatadogAgentSpecAgentConfigSecurityContextWindowsOptionsArgs',
    'DatadogAgentSpecAgentConfigTolerationsArgs',
    'DatadogAgentSpecAgentConfigVolumeMountsArgs',
    'DatadogAgentSpecAgentConfigVolumesArgs',
    'DatadogAgentSpecAgentConfigVolumesAwsElasticBlockStoreArgs',
    'DatadogAgentSpecAgentConfigVolumesAzureDiskArgs',
    'DatadogAgentSpecAgentConfigVolumesAzureFileArgs',
    'DatadogAgentSpecAgentConfigVolumesCephfsArgs',
    'DatadogAgentSpecAgentConfigVolumesCephfsSecretRefArgs',
    'DatadogAgentSpecAgentConfigVolumesCinderArgs',
    'DatadogAgentSpecAgentConfigVolumesCinderSecretRefArgs',
    'DatadogAgentSpecAgentConfigVolumesConfigMapArgs',
    'DatadogAgentSpecAgentConfigVolumesConfigMapItemsArgs',
    'DatadogAgentSpecAgentConfigVolumesCsiArgs',
    'DatadogAgentSpecAgentConfigVolumesCsiNodePublishSecretRefArgs',
    'DatadogAgentSpecAgentConfigVolumesDownwardAPIArgs',
    'DatadogAgentSpecAgentConfigVolumesDownwardAPIItemsArgs',
    'DatadogAgentSpecAgentConfigVolumesDownwardAPIItemsFieldRefArgs',
    'DatadogAgentSpecAgentConfigVolumesDownwardAPIItemsResourceFieldRefArgs',
    'DatadogAgentSpecAgentConfigVolumesDownwardAPIItemsResourceFieldRefDivisorArgs',
    'DatadogAgentSpecAgentConfigVolumesEmptyDirArgs',
    'DatadogAgentSpecAgentConfigVolumesEmptyDirSizeLimitArgs',
    'DatadogAgentSpecAgentConfigVolumesFcArgs',
    'DatadogAgentSpecAgentConfigVolumesFlexVolumeArgs',
    'DatadogAgentSpecAgentConfigVolumesFlexVolumeSecretRefArgs',
    'DatadogAgentSpecAgentConfigVolumesFlockerArgs',
    'DatadogAgentSpecAgentConfigVolumesGcePersistentDiskArgs',
    'DatadogAgentSpecAgentConfigVolumesGitRepoArgs',
    'DatadogAgentSpecAgentConfigVolumesGlusterfsArgs',
    'DatadogAgentSpecAgentConfigVolumesHostPathArgs',
    'DatadogAgentSpecAgentConfigVolumesIscsiArgs',
    'DatadogAgentSpecAgentConfigVolumesIscsiSecretRefArgs',
    'DatadogAgentSpecAgentConfigVolumesNfsArgs',
    'DatadogAgentSpecAgentConfigVolumesPersistentVolumeClaimArgs',
    'DatadogAgentSpecAgentConfigVolumesPhotonPersistentDiskArgs',
    'DatadogAgentSpecAgentConfigVolumesPortworxVolumeArgs',
    'DatadogAgentSpecAgentConfigVolumesProjectedArgs',
    'DatadogAgentSpecAgentConfigVolumesProjectedSourcesArgs',
    'DatadogAgentSpecAgentConfigVolumesProjectedSourcesConfigMapArgs',
    'DatadogAgentSpecAgentConfigVolumesProjectedSourcesConfigMapItemsArgs',
    'DatadogAgentSpecAgentConfigVolumesProjectedSourcesDownwardAPIArgs',
    'DatadogAgentSpecAgentConfigVolumesProjectedSourcesDownwardAPIItemsArgs',
    'DatadogAgentSpecAgentConfigVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs',
    'DatadogAgentSpecAgentConfigVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs',
    'DatadogAgentSpecAgentConfigVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisorArgs',
    'DatadogAgentSpecAgentConfigVolumesProjectedSourcesSecretArgs',
    'DatadogAgentSpecAgentConfigVolumesProjectedSourcesSecretItemsArgs',
    'DatadogAgentSpecAgentConfigVolumesProjectedSourcesServiceAccountTokenArgs',
    'DatadogAgentSpecAgentConfigVolumesQuobyteArgs',
    'DatadogAgentSpecAgentConfigVolumesRbdArgs',
    'DatadogAgentSpecAgentConfigVolumesRbdSecretRefArgs',
    'DatadogAgentSpecAgentConfigVolumesScaleIOArgs',
    'DatadogAgentSpecAgentConfigVolumesScaleIOSecretRefArgs',
    'DatadogAgentSpecAgentConfigVolumesSecretArgs',
    'DatadogAgentSpecAgentConfigVolumesSecretItemsArgs',
    'DatadogAgentSpecAgentConfigVolumesStorageosArgs',
    'DatadogAgentSpecAgentConfigVolumesStorageosSecretRefArgs',
    'DatadogAgentSpecAgentConfigVolumesVsphereVolumeArgs',
    'DatadogAgentSpecAgentCustomConfigArgs',
    'DatadogAgentSpecAgentCustomConfigConfigMapArgs',
    'DatadogAgentSpecAgentDeploymentStrategyArgs',
    'DatadogAgentSpecAgentDeploymentStrategyCanaryArgs',
    'DatadogAgentSpecAgentDeploymentStrategyCanaryReplicasArgs',
    'DatadogAgentSpecAgentDeploymentStrategyRollingUpdateArgs',
    'DatadogAgentSpecAgentDeploymentStrategyRollingUpdateMaxPodSchedulerFailureArgs',
    'DatadogAgentSpecAgentDeploymentStrategyRollingUpdateMaxUnavailableArgs',
    'DatadogAgentSpecAgentDeploymentStrategyRollingUpdateSlowStartAdditiveIncreaseArgs',
    'DatadogAgentSpecAgentDnsConfigArgs',
    'DatadogAgentSpecAgentDnsConfigOptionsArgs',
    'DatadogAgentSpecAgentEnvArgs',
    'DatadogAgentSpecAgentEnvValueFromArgs',
    'DatadogAgentSpecAgentEnvValueFromConfigMapKeyRefArgs',
    'DatadogAgentSpecAgentEnvValueFromFieldRefArgs',
    'DatadogAgentSpecAgentEnvValueFromResourceFieldRefArgs',
    'DatadogAgentSpecAgentEnvValueFromResourceFieldRefDivisorArgs',
    'DatadogAgentSpecAgentEnvValueFromSecretKeyRefArgs',
    'DatadogAgentSpecAgentImageArgs',
    'DatadogAgentSpecAgentImagePullSecretsArgs',
    'DatadogAgentSpecAgentLogArgs',
    'DatadogAgentSpecAgentProcessArgs',
    'DatadogAgentSpecAgentProcessEnvArgs',
    'DatadogAgentSpecAgentProcessEnvValueFromArgs',
    'DatadogAgentSpecAgentProcessEnvValueFromConfigMapKeyRefArgs',
    'DatadogAgentSpecAgentProcessEnvValueFromFieldRefArgs',
    'DatadogAgentSpecAgentProcessEnvValueFromResourceFieldRefArgs',
    'DatadogAgentSpecAgentProcessEnvValueFromResourceFieldRefDivisorArgs',
    'DatadogAgentSpecAgentProcessEnvValueFromSecretKeyRefArgs',
    'DatadogAgentSpecAgentProcessResourcesArgs',
    'DatadogAgentSpecAgentProcessResourcesLimitsArgs',
    'DatadogAgentSpecAgentProcessResourcesRequestsArgs',
    'DatadogAgentSpecAgentRbacArgs',
    'DatadogAgentSpecAgentSystemProbeArgs',
    'DatadogAgentSpecAgentSystemProbeEnvArgs',
    'DatadogAgentSpecAgentSystemProbeEnvValueFromArgs',
    'DatadogAgentSpecAgentSystemProbeEnvValueFromConfigMapKeyRefArgs',
    'DatadogAgentSpecAgentSystemProbeEnvValueFromFieldRefArgs',
    'DatadogAgentSpecAgentSystemProbeEnvValueFromResourceFieldRefArgs',
    'DatadogAgentSpecAgentSystemProbeEnvValueFromResourceFieldRefDivisorArgs',
    'DatadogAgentSpecAgentSystemProbeEnvValueFromSecretKeyRefArgs',
    'DatadogAgentSpecAgentSystemProbeResourcesArgs',
    'DatadogAgentSpecAgentSystemProbeResourcesLimitsArgs',
    'DatadogAgentSpecAgentSystemProbeResourcesRequestsArgs',
    'DatadogAgentSpecAgentSystemProbeSecurityContextArgs',
    'DatadogAgentSpecAgentSystemProbeSecurityContextCapabilitiesArgs',
    'DatadogAgentSpecAgentSystemProbeSecurityContextSeLinuxOptionsArgs',
    'DatadogAgentSpecAgentSystemProbeSecurityContextWindowsOptionsArgs',
    'DatadogAgentSpecClusterAgentArgs',
    'DatadogAgentSpecClusterAgentAffinityArgs',
    'DatadogAgentSpecClusterAgentAffinityNodeAffinityArgs',
    'DatadogAgentSpecClusterAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs',
    'DatadogAgentSpecClusterAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs',
    'DatadogAgentSpecClusterAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs',
    'DatadogAgentSpecClusterAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs',
    'DatadogAgentSpecClusterAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs',
    'DatadogAgentSpecClusterAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs',
    'DatadogAgentSpecClusterAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs',
    'DatadogAgentSpecClusterAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs',
    'DatadogAgentSpecClusterAgentAffinityPodAffinityArgs',
    'DatadogAgentSpecClusterAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs',
    'DatadogAgentSpecClusterAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs',
    'DatadogAgentSpecClusterAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs',
    'DatadogAgentSpecClusterAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs',
    'DatadogAgentSpecClusterAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs',
    'DatadogAgentSpecClusterAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs',
    'DatadogAgentSpecClusterAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs',
    'DatadogAgentSpecClusterAgentAffinityPodAntiAffinityArgs',
    'DatadogAgentSpecClusterAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs',
    'DatadogAgentSpecClusterAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs',
    'DatadogAgentSpecClusterAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs',
    'DatadogAgentSpecClusterAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs',
    'DatadogAgentSpecClusterAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs',
    'DatadogAgentSpecClusterAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs',
    'DatadogAgentSpecClusterAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs',
    'DatadogAgentSpecClusterAgentConfigArgs',
    'DatadogAgentSpecClusterAgentConfigAdmissionControllerArgs',
    'DatadogAgentSpecClusterAgentConfigConfdArgs',
    'DatadogAgentSpecClusterAgentConfigEnvArgs',
    'DatadogAgentSpecClusterAgentConfigEnvValueFromArgs',
    'DatadogAgentSpecClusterAgentConfigEnvValueFromConfigMapKeyRefArgs',
    'DatadogAgentSpecClusterAgentConfigEnvValueFromFieldRefArgs',
    'DatadogAgentSpecClusterAgentConfigEnvValueFromResourceFieldRefArgs',
    'DatadogAgentSpecClusterAgentConfigEnvValueFromResourceFieldRefDivisorArgs',
    'DatadogAgentSpecClusterAgentConfigEnvValueFromSecretKeyRefArgs',
    'DatadogAgentSpecClusterAgentConfigExternalMetricsArgs',
    'DatadogAgentSpecClusterAgentConfigResourcesArgs',
    'DatadogAgentSpecClusterAgentConfigResourcesLimitsArgs',
    'DatadogAgentSpecClusterAgentConfigResourcesRequestsArgs',
    'DatadogAgentSpecClusterAgentConfigVolumeMountsArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesAwsElasticBlockStoreArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesAzureDiskArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesAzureFileArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesCephfsArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesCephfsSecretRefArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesCinderArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesCinderSecretRefArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesConfigMapArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesConfigMapItemsArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesCsiArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesCsiNodePublishSecretRefArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesDownwardAPIArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesDownwardAPIItemsArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesDownwardAPIItemsFieldRefArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesDownwardAPIItemsResourceFieldRefArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesDownwardAPIItemsResourceFieldRefDivisorArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesEmptyDirArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesEmptyDirSizeLimitArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesFcArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesFlexVolumeArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesFlexVolumeSecretRefArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesFlockerArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesGcePersistentDiskArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesGitRepoArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesGlusterfsArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesHostPathArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesIscsiArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesIscsiSecretRefArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesNfsArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesPersistentVolumeClaimArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesPhotonPersistentDiskArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesPortworxVolumeArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesProjectedArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesConfigMapArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesConfigMapItemsArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesDownwardAPIArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesDownwardAPIItemsArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisorArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesSecretArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesSecretItemsArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesServiceAccountTokenArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesQuobyteArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesRbdArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesRbdSecretRefArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesScaleIOArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesScaleIOSecretRefArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesSecretArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesSecretItemsArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesStorageosArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesStorageosSecretRefArgs',
    'DatadogAgentSpecClusterAgentConfigVolumesVsphereVolumeArgs',
    'DatadogAgentSpecClusterAgentCustomConfigArgs',
    'DatadogAgentSpecClusterAgentCustomConfigConfigMapArgs',
    'DatadogAgentSpecClusterAgentImageArgs',
    'DatadogAgentSpecClusterAgentImagePullSecretsArgs',
    'DatadogAgentSpecClusterAgentRbacArgs',
    'DatadogAgentSpecClusterAgentTolerationsArgs',
    'DatadogAgentSpecClusterChecksRunnerArgs',
    'DatadogAgentSpecClusterChecksRunnerAffinityArgs',
    'DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityArgs',
    'DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs',
    'DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs',
    'DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs',
    'DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs',
    'DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs',
    'DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs',
    'DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs',
    'DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs',
    'DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityArgs',
    'DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs',
    'DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs',
    'DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs',
    'DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs',
    'DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs',
    'DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs',
    'DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs',
    'DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityArgs',
    'DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs',
    'DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs',
    'DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs',
    'DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs',
    'DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs',
    'DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs',
    'DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigEnvArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigEnvValueFromArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigEnvValueFromConfigMapKeyRefArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigEnvValueFromFieldRefArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigEnvValueFromResourceFieldRefArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigEnvValueFromResourceFieldRefDivisorArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigEnvValueFromSecretKeyRefArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigResourcesArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigResourcesLimitsArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigResourcesRequestsArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumeMountsArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesAwsElasticBlockStoreArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesAzureDiskArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesAzureFileArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesCephfsArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesCephfsSecretRefArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesCinderArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesCinderSecretRefArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesConfigMapArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesConfigMapItemsArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesCsiArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesCsiNodePublishSecretRefArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesDownwardAPIArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesDownwardAPIItemsArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesDownwardAPIItemsFieldRefArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesDownwardAPIItemsResourceFieldRefArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesDownwardAPIItemsResourceFieldRefDivisorArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesEmptyDirArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesEmptyDirSizeLimitArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesFcArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesFlexVolumeArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesFlexVolumeSecretRefArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesFlockerArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesGcePersistentDiskArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesGitRepoArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesGlusterfsArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesHostPathArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesIscsiArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesIscsiSecretRefArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesNfsArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesPersistentVolumeClaimArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesPhotonPersistentDiskArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesPortworxVolumeArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesConfigMapArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesConfigMapItemsArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesDownwardAPIArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesDownwardAPIItemsArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisorArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesSecretArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesSecretItemsArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesServiceAccountTokenArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesQuobyteArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesRbdArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesRbdSecretRefArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesScaleIOArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesScaleIOSecretRefArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesSecretArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesSecretItemsArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesStorageosArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesStorageosSecretRefArgs',
    'DatadogAgentSpecClusterChecksRunnerConfigVolumesVsphereVolumeArgs',
    'DatadogAgentSpecClusterChecksRunnerCustomConfigArgs',
    'DatadogAgentSpecClusterChecksRunnerCustomConfigConfigMapArgs',
    'DatadogAgentSpecClusterChecksRunnerImageArgs',
    'DatadogAgentSpecClusterChecksRunnerImagePullSecretsArgs',
    'DatadogAgentSpecClusterChecksRunnerRbacArgs',
    'DatadogAgentSpecClusterChecksRunnerTolerationsArgs',
    'DatadogAgentSpecCredentialsArgs',
    'DatadogAgentSpecCredentialsApiSecretArgs',
    'DatadogAgentSpecCredentialsAppSecretArgs',
    'DatadogAgentStatusArgs',
    'DatadogAgentStatusAgentArgs',
    'DatadogAgentStatusClusterAgentArgs',
    'DatadogAgentStatusClusterChecksRunnerArgs',
    'DatadogAgentStatusConditionsArgs',
    'DatadogMetricSpecArgs',
    'DatadogMetricStatusArgs',
    'DatadogMetricStatusConditionsArgs',
]

@pulumi.input_type
class DatadogAgentSpecArgs:
    def __init__(__self__, *,
                 credentials: pulumi.Input['DatadogAgentSpecCredentialsArgs'],
                 agent: Optional[pulumi.Input['DatadogAgentSpecAgentArgs']] = None,
                 cluster_agent: Optional[pulumi.Input['DatadogAgentSpecClusterAgentArgs']] = None,
                 cluster_checks_runner: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerArgs']] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 site: Optional[pulumi.Input[str]] = None):
        """
        DatadogAgentSpec defines the desired state of DatadogAgent
        :param pulumi.Input['DatadogAgentSpecCredentialsArgs'] credentials: Configure the credentials required to run Agents
        :param pulumi.Input['DatadogAgentSpecAgentArgs'] agent: The desired state of the Agent as an extended daemonset Contains the Node Agent configuration and deployment strategy
        :param pulumi.Input['DatadogAgentSpecClusterAgentArgs'] cluster_agent: The desired state of the Cluster Agent as a deployment
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerArgs'] cluster_checks_runner: The desired state of the Cluster Checks Runner as a deployment
        :param pulumi.Input[str] cluster_name: Set a unique cluster name to allow scoping hosts and Cluster Checks Runner easily
        :param pulumi.Input[str] site: The site of the Datadog intake to send Agent data to. Set to 'datadoghq.eu' to send data to the EU site.
        """
        pulumi.set(__self__, "credentials", credentials)
        if agent is not None:
            pulumi.set(__self__, "agent", agent)
        if cluster_agent is not None:
            pulumi.set(__self__, "cluster_agent", cluster_agent)
        if cluster_checks_runner is not None:
            pulumi.set(__self__, "cluster_checks_runner", cluster_checks_runner)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if site is not None:
            pulumi.set(__self__, "site", site)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input['DatadogAgentSpecCredentialsArgs']:
        """
        Configure the credentials required to run Agents
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input['DatadogAgentSpecCredentialsArgs']):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter
    def agent(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentArgs']]:
        """
        The desired state of the Agent as an extended daemonset Contains the Node Agent configuration and deployment strategy
        """
        return pulumi.get(self, "agent")

    @agent.setter
    def agent(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentArgs']]):
        pulumi.set(self, "agent", value)

    @property
    @pulumi.getter(name="clusterAgent")
    def cluster_agent(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentArgs']]:
        """
        The desired state of the Cluster Agent as a deployment
        """
        return pulumi.get(self, "cluster_agent")

    @cluster_agent.setter
    def cluster_agent(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentArgs']]):
        pulumi.set(self, "cluster_agent", value)

    @property
    @pulumi.getter(name="clusterChecksRunner")
    def cluster_checks_runner(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerArgs']]:
        """
        The desired state of the Cluster Checks Runner as a deployment
        """
        return pulumi.get(self, "cluster_checks_runner")

    @cluster_checks_runner.setter
    def cluster_checks_runner(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerArgs']]):
        pulumi.set(self, "cluster_checks_runner", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        """
        Set a unique cluster name to allow scoping hosts and Cluster Checks Runner easily
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter
    def site(self) -> Optional[pulumi.Input[str]]:
        """
        The site of the Datadog intake to send Agent data to. Set to 'datadoghq.eu' to send data to the EU site.
        """
        return pulumi.get(self, "site")

    @site.setter
    def site(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "site", value)


@pulumi.input_type
class DatadogAgentSpecAgentArgs:
    def __init__(__self__, *,
                 image: pulumi.Input['DatadogAgentSpecAgentImageArgs'],
                 additional_annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 additional_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 apm: Optional[pulumi.Input['DatadogAgentSpecAgentApmArgs']] = None,
                 config: Optional[pulumi.Input['DatadogAgentSpecAgentConfigArgs']] = None,
                 custom_config: Optional[pulumi.Input['DatadogAgentSpecAgentCustomConfigArgs']] = None,
                 daemonset_name: Optional[pulumi.Input[str]] = None,
                 deployment_strategy: Optional[pulumi.Input['DatadogAgentSpecAgentDeploymentStrategyArgs']] = None,
                 dns_config: Optional[pulumi.Input['DatadogAgentSpecAgentDnsConfigArgs']] = None,
                 dns_policy: Optional[pulumi.Input[str]] = None,
                 env: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentEnvArgs']]]] = None,
                 host_network: Optional[pulumi.Input[bool]] = None,
                 host_pid: Optional[pulumi.Input[bool]] = None,
                 log: Optional[pulumi.Input['DatadogAgentSpecAgentLogArgs']] = None,
                 priority_class_name: Optional[pulumi.Input[str]] = None,
                 process: Optional[pulumi.Input['DatadogAgentSpecAgentProcessArgs']] = None,
                 rbac: Optional[pulumi.Input['DatadogAgentSpecAgentRbacArgs']] = None,
                 system_probe: Optional[pulumi.Input['DatadogAgentSpecAgentSystemProbeArgs']] = None,
                 use_extended_daemonset: Optional[pulumi.Input[bool]] = None):
        """
        The desired state of the Agent as an extended daemonset Contains the Node Agent configuration and deployment strategy
        :param pulumi.Input['DatadogAgentSpecAgentImageArgs'] image: The container image of the Datadog Agent
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] additional_annotations: AdditionalAnnotations provide annotations that will be added to the Agent Pods.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] additional_labels: AdditionalLabels provide labels that will be added to the cluster checks runner Pods.
        :param pulumi.Input['DatadogAgentSpecAgentApmArgs'] apm: Trace Agent configuration
        :param pulumi.Input['DatadogAgentSpecAgentConfigArgs'] config: Agent configuration
        :param pulumi.Input['DatadogAgentSpecAgentCustomConfigArgs'] custom_config: Allow to put custom configuration for the agent, corresponding to the datadog.yaml config file See https://docs.datadoghq.com/agent/guide/agent-configuration-files/?tab=agentv6 for more details.
        :param pulumi.Input[str] daemonset_name: Name of the Daemonset to create or migrate from
        :param pulumi.Input['DatadogAgentSpecAgentDeploymentStrategyArgs'] deployment_strategy: Update strategy configuration for the DaemonSet
        :param pulumi.Input['DatadogAgentSpecAgentDnsConfigArgs'] dns_config: Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
        :param pulumi.Input[str] dns_policy: Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentEnvArgs']]] env: Environment variables for all Datadog Agents Ref: https://docs.datadoghq.com/agent/docker/?tab=standard#environment-variables
        :param pulumi.Input[bool] host_network: Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
        :param pulumi.Input[bool] host_pid: Use the host's pid namespace. Optional: Default to false.
        :param pulumi.Input['DatadogAgentSpecAgentLogArgs'] log: Log Agent configuration
        :param pulumi.Input[str] priority_class_name: If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
        :param pulumi.Input['DatadogAgentSpecAgentProcessArgs'] process: Process Agent configuration
        :param pulumi.Input['DatadogAgentSpecAgentRbacArgs'] rbac: RBAC configuration of the Agent
        :param pulumi.Input['DatadogAgentSpecAgentSystemProbeArgs'] system_probe: SystemProbe configuration
        :param pulumi.Input[bool] use_extended_daemonset: UseExtendedDaemonset use ExtendedDaemonset for Agent deployment. default value is false.
        """
        pulumi.set(__self__, "image", image)
        if additional_annotations is not None:
            pulumi.set(__self__, "additional_annotations", additional_annotations)
        if additional_labels is not None:
            pulumi.set(__self__, "additional_labels", additional_labels)
        if apm is not None:
            pulumi.set(__self__, "apm", apm)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if custom_config is not None:
            pulumi.set(__self__, "custom_config", custom_config)
        if daemonset_name is not None:
            pulumi.set(__self__, "daemonset_name", daemonset_name)
        if deployment_strategy is not None:
            pulumi.set(__self__, "deployment_strategy", deployment_strategy)
        if dns_config is not None:
            pulumi.set(__self__, "dns_config", dns_config)
        if dns_policy is not None:
            pulumi.set(__self__, "dns_policy", dns_policy)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if host_network is not None:
            pulumi.set(__self__, "host_network", host_network)
        if host_pid is not None:
            pulumi.set(__self__, "host_pid", host_pid)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if process is not None:
            pulumi.set(__self__, "process", process)
        if rbac is not None:
            pulumi.set(__self__, "rbac", rbac)
        if system_probe is not None:
            pulumi.set(__self__, "system_probe", system_probe)
        if use_extended_daemonset is not None:
            pulumi.set(__self__, "use_extended_daemonset", use_extended_daemonset)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input['DatadogAgentSpecAgentImageArgs']:
        """
        The container image of the Datadog Agent
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input['DatadogAgentSpecAgentImageArgs']):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="additionalAnnotations")
    def additional_annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        AdditionalAnnotations provide annotations that will be added to the Agent Pods.
        """
        return pulumi.get(self, "additional_annotations")

    @additional_annotations.setter
    def additional_annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "additional_annotations", value)

    @property
    @pulumi.getter(name="additionalLabels")
    def additional_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        AdditionalLabels provide labels that will be added to the cluster checks runner Pods.
        """
        return pulumi.get(self, "additional_labels")

    @additional_labels.setter
    def additional_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "additional_labels", value)

    @property
    @pulumi.getter
    def apm(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentApmArgs']]:
        """
        Trace Agent configuration
        """
        return pulumi.get(self, "apm")

    @apm.setter
    def apm(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentApmArgs']]):
        pulumi.set(self, "apm", value)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigArgs']]:
        """
        Agent configuration
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="customConfig")
    def custom_config(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentCustomConfigArgs']]:
        """
        Allow to put custom configuration for the agent, corresponding to the datadog.yaml config file See https://docs.datadoghq.com/agent/guide/agent-configuration-files/?tab=agentv6 for more details.
        """
        return pulumi.get(self, "custom_config")

    @custom_config.setter
    def custom_config(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentCustomConfigArgs']]):
        pulumi.set(self, "custom_config", value)

    @property
    @pulumi.getter(name="daemonsetName")
    def daemonset_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Daemonset to create or migrate from
        """
        return pulumi.get(self, "daemonset_name")

    @daemonset_name.setter
    def daemonset_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "daemonset_name", value)

    @property
    @pulumi.getter(name="deploymentStrategy")
    def deployment_strategy(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentDeploymentStrategyArgs']]:
        """
        Update strategy configuration for the DaemonSet
        """
        return pulumi.get(self, "deployment_strategy")

    @deployment_strategy.setter
    def deployment_strategy(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentDeploymentStrategyArgs']]):
        pulumi.set(self, "deployment_strategy", value)

    @property
    @pulumi.getter(name="dnsConfig")
    def dns_config(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentDnsConfigArgs']]:
        """
        Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
        """
        return pulumi.get(self, "dns_config")

    @dns_config.setter
    def dns_config(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentDnsConfigArgs']]):
        pulumi.set(self, "dns_config", value)

    @property
    @pulumi.getter(name="dnsPolicy")
    def dns_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
        """
        return pulumi.get(self, "dns_policy")

    @dns_policy.setter
    def dns_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_policy", value)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentEnvArgs']]]]:
        """
        Environment variables for all Datadog Agents Ref: https://docs.datadoghq.com/agent/docker/?tab=standard#environment-variables
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentEnvArgs']]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="hostNetwork")
    def host_network(self) -> Optional[pulumi.Input[bool]]:
        """
        Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
        """
        return pulumi.get(self, "host_network")

    @host_network.setter
    def host_network(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "host_network", value)

    @property
    @pulumi.getter(name="hostPID")
    def host_pid(self) -> Optional[pulumi.Input[bool]]:
        """
        Use the host's pid namespace. Optional: Default to false.
        """
        return pulumi.get(self, "host_pid")

    @host_pid.setter
    def host_pid(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "host_pid", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentLogArgs']]:
        """
        Log Agent configuration
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentLogArgs']]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
        """
        return pulumi.get(self, "priority_class_name")

    @priority_class_name.setter
    def priority_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_class_name", value)

    @property
    @pulumi.getter
    def process(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentProcessArgs']]:
        """
        Process Agent configuration
        """
        return pulumi.get(self, "process")

    @process.setter
    def process(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentProcessArgs']]):
        pulumi.set(self, "process", value)

    @property
    @pulumi.getter
    def rbac(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentRbacArgs']]:
        """
        RBAC configuration of the Agent
        """
        return pulumi.get(self, "rbac")

    @rbac.setter
    def rbac(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentRbacArgs']]):
        pulumi.set(self, "rbac", value)

    @property
    @pulumi.getter(name="systemProbe")
    def system_probe(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentSystemProbeArgs']]:
        """
        SystemProbe configuration
        """
        return pulumi.get(self, "system_probe")

    @system_probe.setter
    def system_probe(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentSystemProbeArgs']]):
        pulumi.set(self, "system_probe", value)

    @property
    @pulumi.getter(name="useExtendedDaemonset")
    def use_extended_daemonset(self) -> Optional[pulumi.Input[bool]]:
        """
        UseExtendedDaemonset use ExtendedDaemonset for Agent deployment. default value is false.
        """
        return pulumi.get(self, "use_extended_daemonset")

    @use_extended_daemonset.setter
    def use_extended_daemonset(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_extended_daemonset", value)


@pulumi.input_type
class DatadogAgentSpecAgentApmArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 env: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentApmEnvArgs']]]] = None,
                 host_port: Optional[pulumi.Input[int]] = None,
                 resources: Optional[pulumi.Input['DatadogAgentSpecAgentApmResourcesArgs']] = None):
        """
        Trace Agent configuration
        :param pulumi.Input[bool] enabled: Enable this to enable APM and tracing, on port 8126 ref: https://github.com/DataDog/docker-dd-agent#tracing-from-the-host
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentApmEnvArgs']]] env: The Datadog Agent supports many environment variables Ref: https://docs.datadoghq.com/agent/docker/?tab=standard#environment-variables
        :param pulumi.Input[int] host_port: Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
        :param pulumi.Input['DatadogAgentSpecAgentApmResourcesArgs'] resources: Datadog APM Agent resource requests and limits Make sure to keep requests and limits equal to keep the pods in the Guaranteed QoS class Ref: http://kubernetes.io/docs/user-guide/compute-resources/
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if host_port is not None:
            pulumi.set(__self__, "host_port", host_port)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable this to enable APM and tracing, on port 8126 ref: https://github.com/DataDog/docker-dd-agent#tracing-from-the-host
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentApmEnvArgs']]]]:
        """
        The Datadog Agent supports many environment variables Ref: https://docs.datadoghq.com/agent/docker/?tab=standard#environment-variables
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentApmEnvArgs']]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="hostPort")
    def host_port(self) -> Optional[pulumi.Input[int]]:
        """
        Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
        """
        return pulumi.get(self, "host_port")

    @host_port.setter
    def host_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "host_port", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentApmResourcesArgs']]:
        """
        Datadog APM Agent resource requests and limits Make sure to keep requests and limits equal to keep the pods in the Guaranteed QoS class Ref: http://kubernetes.io/docs/user-guide/compute-resources/
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentApmResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class DatadogAgentSpecAgentApmEnvArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None,
                 value_from: Optional[pulumi.Input['DatadogAgentSpecAgentApmEnvValueFromArgs']] = None):
        """
        EnvVar represents an environment variable present in a Container.
        :param pulumi.Input[str] name: Name of the environment variable. Must be a C_IDENTIFIER.
        :param pulumi.Input[str] value: Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        :param pulumi.Input['DatadogAgentSpecAgentApmEnvValueFromArgs'] value_from: Source for the environment variable's value. Cannot be used if value is not empty.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the environment variable. Must be a C_IDENTIFIER.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentApmEnvValueFromArgs']]:
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        """
        return pulumi.get(self, "value_from")

    @value_from.setter
    def value_from(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentApmEnvValueFromArgs']]):
        pulumi.set(self, "value_from", value)


@pulumi.input_type
class DatadogAgentSpecAgentApmEnvValueFromArgs:
    def __init__(__self__, *,
                 config_map_key_ref: Optional[pulumi.Input['DatadogAgentSpecAgentApmEnvValueFromConfigMapKeyRefArgs']] = None,
                 field_ref: Optional[pulumi.Input['DatadogAgentSpecAgentApmEnvValueFromFieldRefArgs']] = None,
                 resource_field_ref: Optional[pulumi.Input['DatadogAgentSpecAgentApmEnvValueFromResourceFieldRefArgs']] = None,
                 secret_key_ref: Optional[pulumi.Input['DatadogAgentSpecAgentApmEnvValueFromSecretKeyRefArgs']] = None):
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        :param pulumi.Input['DatadogAgentSpecAgentApmEnvValueFromConfigMapKeyRefArgs'] config_map_key_ref: Selects a key of a ConfigMap.
        :param pulumi.Input['DatadogAgentSpecAgentApmEnvValueFromFieldRefArgs'] field_ref: Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param pulumi.Input['DatadogAgentSpecAgentApmEnvValueFromResourceFieldRefArgs'] resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param pulumi.Input['DatadogAgentSpecAgentApmEnvValueFromSecretKeyRefArgs'] secret_key_ref: Selects a key of a secret in the pod's namespace
        """
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentApmEnvValueFromConfigMapKeyRefArgs']]:
        """
        Selects a key of a ConfigMap.
        """
        return pulumi.get(self, "config_map_key_ref")

    @config_map_key_ref.setter
    def config_map_key_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentApmEnvValueFromConfigMapKeyRefArgs']]):
        pulumi.set(self, "config_map_key_ref", value)

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentApmEnvValueFromFieldRefArgs']]:
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        """
        return pulumi.get(self, "field_ref")

    @field_ref.setter
    def field_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentApmEnvValueFromFieldRefArgs']]):
        pulumi.set(self, "field_ref", value)

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentApmEnvValueFromResourceFieldRefArgs']]:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    @resource_field_ref.setter
    def resource_field_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentApmEnvValueFromResourceFieldRefArgs']]):
        pulumi.set(self, "resource_field_ref", value)

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentApmEnvValueFromSecretKeyRefArgs']]:
        """
        Selects a key of a secret in the pod's namespace
        """
        return pulumi.get(self, "secret_key_ref")

    @secret_key_ref.setter
    def secret_key_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentApmEnvValueFromSecretKeyRefArgs']]):
        pulumi.set(self, "secret_key_ref", value)


@pulumi.input_type
class DatadogAgentSpecAgentApmEnvValueFromConfigMapKeyRefArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        Selects a key of a ConfigMap.
        :param pulumi.Input[str] key: The key to select.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the ConfigMap or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key to select.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the ConfigMap or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class DatadogAgentSpecAgentApmEnvValueFromFieldRefArgs:
    def __init__(__self__, *,
                 field_path: pulumi.Input[str],
                 api_version: Optional[pulumi.Input[str]] = None):
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param pulumi.Input[str] field_path: Path of the field to select in the specified API version.
        :param pulumi.Input[str] api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> pulumi.Input[str]:
        """
        Path of the field to select in the specified API version.
        """
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_path", value)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)


@pulumi.input_type
class DatadogAgentSpecAgentApmEnvValueFromResourceFieldRefArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 container_name: Optional[pulumi.Input[str]] = None,
                 divisor: Optional[pulumi.Input['DatadogAgentSpecAgentApmEnvValueFromResourceFieldRefDivisorArgs']] = None):
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param pulumi.Input[str] resource: Required: resource to select
        :param pulumi.Input[str] container_name: Container name: required for volumes, optional for env vars
        :param pulumi.Input['DatadogAgentSpecAgentApmEnvValueFromResourceFieldRefDivisorArgs'] divisor: Specifies the output format of the exposed resources, defaults to "1"
        """
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        """
        Required: resource to select
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Container name: required for volumes, optional for env vars
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter
    def divisor(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentApmEnvValueFromResourceFieldRefDivisorArgs']]:
        """
        Specifies the output format of the exposed resources, defaults to "1"
        """
        return pulumi.get(self, "divisor")

    @divisor.setter
    def divisor(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentApmEnvValueFromResourceFieldRefDivisorArgs']]):
        pulumi.set(self, "divisor", value)


@pulumi.input_type
class DatadogAgentSpecAgentApmEnvValueFromResourceFieldRefDivisorArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class DatadogAgentSpecAgentApmEnvValueFromSecretKeyRefArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        Selects a key of a secret in the pod's namespace
        :param pulumi.Input[str] key: The key of the secret to select from.  Must be a valid secret key.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the Secret or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key of the secret to select from.  Must be a valid secret key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the Secret or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class DatadogAgentSpecAgentApmResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecAgentApmResourcesLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecAgentApmResourcesRequestsArgs']]]] = None):
        """
        Datadog APM Agent resource requests and limits Make sure to keep requests and limits equal to keep the pods in the Guaranteed QoS class Ref: http://kubernetes.io/docs/user-guide/compute-resources/
        :param pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecAgentApmResourcesLimitsArgs']]] limits: Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecAgentApmResourcesRequestsArgs']]] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecAgentApmResourcesLimitsArgs']]]]:
        """
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecAgentApmResourcesLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecAgentApmResourcesRequestsArgs']]]]:
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecAgentApmResourcesRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class DatadogAgentSpecAgentApmResourcesLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class DatadogAgentSpecAgentApmResourcesRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class DatadogAgentSpecAgentConfigArgs:
    def __init__(__self__, *,
                 checksd: Optional[pulumi.Input['DatadogAgentSpecAgentConfigChecksdArgs']] = None,
                 collect_events: Optional[pulumi.Input[bool]] = None,
                 confd: Optional[pulumi.Input['DatadogAgentSpecAgentConfigConfdArgs']] = None,
                 cri_socket: Optional[pulumi.Input['DatadogAgentSpecAgentConfigCriSocketArgs']] = None,
                 dd_url: Optional[pulumi.Input[str]] = None,
                 dogstatsd: Optional[pulumi.Input['DatadogAgentSpecAgentConfigDogstatsdArgs']] = None,
                 env: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigEnvArgs']]]] = None,
                 host_port: Optional[pulumi.Input[int]] = None,
                 leader_election: Optional[pulumi.Input[bool]] = None,
                 log_level: Optional[pulumi.Input[str]] = None,
                 pod_annotations_as_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 pod_labels_as_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 resources: Optional[pulumi.Input['DatadogAgentSpecAgentConfigResourcesArgs']] = None,
                 security_context: Optional[pulumi.Input['DatadogAgentSpecAgentConfigSecurityContextArgs']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigTolerationsArgs']]]] = None,
                 volume_mounts: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigVolumeMountsArgs']]]] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigVolumesArgs']]]] = None):
        """
        Agent configuration
        :param pulumi.Input['DatadogAgentSpecAgentConfigChecksdArgs'] checksd: Checksd configuration allowing to specify custom checks placed under /etc/datadog-agent/checks.d/ See https://docs.datadoghq.com/agent/guide/agent-configuration-files/?tab=agentv6 for more details.
        :param pulumi.Input[bool] collect_events: nables this to start event collection from the kubernetes API ref: https://docs.datadoghq.com/agent/kubernetes/event_collection/
        :param pulumi.Input['DatadogAgentSpecAgentConfigConfdArgs'] confd: Confd configuration allowing to specify config files for custom checks placed under /etc/datadog-agent/conf.d/. See https://docs.datadoghq.com/agent/guide/agent-configuration-files/?tab=agentv6 for more details.
        :param pulumi.Input['DatadogAgentSpecAgentConfigCriSocketArgs'] cri_socket: Configure the CRI Socket
        :param pulumi.Input[str] dd_url: The host of the Datadog intake server to send Agent data to, only set this option if you need the Agent to send data to a custom URL. Overrides the site setting defined in "site".
        :param pulumi.Input['DatadogAgentSpecAgentConfigDogstatsdArgs'] dogstatsd: Configure Dogstatsd
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigEnvArgs']]] env: The Datadog Agent supports many environment variables Ref: https://docs.datadoghq.com/agent/docker/?tab=standard#environment-variables
        :param pulumi.Input[int] host_port: Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
        :param pulumi.Input[bool] leader_election: Enables leader election mechanism for event collection.
        :param pulumi.Input[str] log_level: Set logging verbosity, valid log levels are: trace, debug, info, warn, error, critical, and off
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] pod_annotations_as_tags: Provide a mapping of Kubernetes Annotations to Datadog Tags. <KUBERNETES_ANNOTATIONS>: <DATADOG_TAG_KEY>
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] pod_labels_as_tags: Provide a mapping of Kubernetes Labels to Datadog Tags. <KUBERNETES_LABEL>: <DATADOG_TAG_KEY>
        :param pulumi.Input['DatadogAgentSpecAgentConfigResourcesArgs'] resources: Datadog Agent resource requests and limits Make sure to keep requests and limits equal to keep the pods in the Guaranteed QoS class Ref: http://kubernetes.io/docs/user-guide/compute-resources/
        :param pulumi.Input['DatadogAgentSpecAgentConfigSecurityContextArgs'] security_context: You can modify the security context used to run the containers by modifying the label type
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: List of tags to attach to every metric, event and service check collected by this Agent. Learn more about tagging: https://docs.datadoghq.com/tagging/
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigTolerationsArgs']]] tolerations: If specified, the Agent pod's tolerations.
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigVolumeMountsArgs']]] volume_mounts: Specify additional volume mounts in the Datadog Agent container
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigVolumesArgs']]] volumes: Specify additional volumes in the Datadog Agent container
        """
        if checksd is not None:
            pulumi.set(__self__, "checksd", checksd)
        if collect_events is not None:
            pulumi.set(__self__, "collect_events", collect_events)
        if confd is not None:
            pulumi.set(__self__, "confd", confd)
        if cri_socket is not None:
            pulumi.set(__self__, "cri_socket", cri_socket)
        if dd_url is not None:
            pulumi.set(__self__, "dd_url", dd_url)
        if dogstatsd is not None:
            pulumi.set(__self__, "dogstatsd", dogstatsd)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if host_port is not None:
            pulumi.set(__self__, "host_port", host_port)
        if leader_election is not None:
            pulumi.set(__self__, "leader_election", leader_election)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if pod_annotations_as_tags is not None:
            pulumi.set(__self__, "pod_annotations_as_tags", pod_annotations_as_tags)
        if pod_labels_as_tags is not None:
            pulumi.set(__self__, "pod_labels_as_tags", pod_labels_as_tags)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def checksd(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigChecksdArgs']]:
        """
        Checksd configuration allowing to specify custom checks placed under /etc/datadog-agent/checks.d/ See https://docs.datadoghq.com/agent/guide/agent-configuration-files/?tab=agentv6 for more details.
        """
        return pulumi.get(self, "checksd")

    @checksd.setter
    def checksd(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigChecksdArgs']]):
        pulumi.set(self, "checksd", value)

    @property
    @pulumi.getter(name="collectEvents")
    def collect_events(self) -> Optional[pulumi.Input[bool]]:
        """
        nables this to start event collection from the kubernetes API ref: https://docs.datadoghq.com/agent/kubernetes/event_collection/
        """
        return pulumi.get(self, "collect_events")

    @collect_events.setter
    def collect_events(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "collect_events", value)

    @property
    @pulumi.getter
    def confd(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigConfdArgs']]:
        """
        Confd configuration allowing to specify config files for custom checks placed under /etc/datadog-agent/conf.d/. See https://docs.datadoghq.com/agent/guide/agent-configuration-files/?tab=agentv6 for more details.
        """
        return pulumi.get(self, "confd")

    @confd.setter
    def confd(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigConfdArgs']]):
        pulumi.set(self, "confd", value)

    @property
    @pulumi.getter(name="criSocket")
    def cri_socket(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigCriSocketArgs']]:
        """
        Configure the CRI Socket
        """
        return pulumi.get(self, "cri_socket")

    @cri_socket.setter
    def cri_socket(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigCriSocketArgs']]):
        pulumi.set(self, "cri_socket", value)

    @property
    @pulumi.getter(name="ddUrl")
    def dd_url(self) -> Optional[pulumi.Input[str]]:
        """
        The host of the Datadog intake server to send Agent data to, only set this option if you need the Agent to send data to a custom URL. Overrides the site setting defined in "site".
        """
        return pulumi.get(self, "dd_url")

    @dd_url.setter
    def dd_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dd_url", value)

    @property
    @pulumi.getter
    def dogstatsd(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigDogstatsdArgs']]:
        """
        Configure Dogstatsd
        """
        return pulumi.get(self, "dogstatsd")

    @dogstatsd.setter
    def dogstatsd(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigDogstatsdArgs']]):
        pulumi.set(self, "dogstatsd", value)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigEnvArgs']]]]:
        """
        The Datadog Agent supports many environment variables Ref: https://docs.datadoghq.com/agent/docker/?tab=standard#environment-variables
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigEnvArgs']]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="hostPort")
    def host_port(self) -> Optional[pulumi.Input[int]]:
        """
        Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
        """
        return pulumi.get(self, "host_port")

    @host_port.setter
    def host_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "host_port", value)

    @property
    @pulumi.getter(name="leaderElection")
    def leader_election(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables leader election mechanism for event collection.
        """
        return pulumi.get(self, "leader_election")

    @leader_election.setter
    def leader_election(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "leader_election", value)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[str]]:
        """
        Set logging verbosity, valid log levels are: trace, debug, info, warn, error, critical, and off
        """
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_level", value)

    @property
    @pulumi.getter(name="podAnnotationsAsTags")
    def pod_annotations_as_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Provide a mapping of Kubernetes Annotations to Datadog Tags. <KUBERNETES_ANNOTATIONS>: <DATADOG_TAG_KEY>
        """
        return pulumi.get(self, "pod_annotations_as_tags")

    @pod_annotations_as_tags.setter
    def pod_annotations_as_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "pod_annotations_as_tags", value)

    @property
    @pulumi.getter(name="podLabelsAsTags")
    def pod_labels_as_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Provide a mapping of Kubernetes Labels to Datadog Tags. <KUBERNETES_LABEL>: <DATADOG_TAG_KEY>
        """
        return pulumi.get(self, "pod_labels_as_tags")

    @pod_labels_as_tags.setter
    def pod_labels_as_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "pod_labels_as_tags", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigResourcesArgs']]:
        """
        Datadog Agent resource requests and limits Make sure to keep requests and limits equal to keep the pods in the Guaranteed QoS class Ref: http://kubernetes.io/docs/user-guide/compute-resources/
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigResourcesArgs']]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigSecurityContextArgs']]:
        """
        You can modify the security context used to run the containers by modifying the label type
        """
        return pulumi.get(self, "security_context")

    @security_context.setter
    def security_context(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigSecurityContextArgs']]):
        pulumi.set(self, "security_context", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of tags to attach to every metric, event and service check collected by this Agent. Learn more about tagging: https://docs.datadoghq.com/tagging/
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigTolerationsArgs']]]]:
        """
        If specified, the Agent pod's tolerations.
        """
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigTolerationsArgs']]]]):
        pulumi.set(self, "tolerations", value)

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigVolumeMountsArgs']]]]:
        """
        Specify additional volume mounts in the Datadog Agent container
        """
        return pulumi.get(self, "volume_mounts")

    @volume_mounts.setter
    def volume_mounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigVolumeMountsArgs']]]]):
        pulumi.set(self, "volume_mounts", value)

    @property
    @pulumi.getter
    def volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigVolumesArgs']]]]:
        """
        Specify additional volumes in the Datadog Agent container
        """
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigVolumesArgs']]]]):
        pulumi.set(self, "volumes", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigChecksdArgs:
    def __init__(__self__, *,
                 config_map_name: Optional[pulumi.Input[str]] = None):
        """
        Checksd configuration allowing to specify custom checks placed under /etc/datadog-agent/checks.d/ See https://docs.datadoghq.com/agent/guide/agent-configuration-files/?tab=agentv6 for more details.
        :param pulumi.Input[str] config_map_name: ConfigMapName name of a ConfigMap used to mount a directory
        """
        if config_map_name is not None:
            pulumi.set(__self__, "config_map_name", config_map_name)

    @property
    @pulumi.getter(name="configMapName")
    def config_map_name(self) -> Optional[pulumi.Input[str]]:
        """
        ConfigMapName name of a ConfigMap used to mount a directory
        """
        return pulumi.get(self, "config_map_name")

    @config_map_name.setter
    def config_map_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_map_name", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigConfdArgs:
    def __init__(__self__, *,
                 config_map_name: Optional[pulumi.Input[str]] = None):
        """
        Confd configuration allowing to specify config files for custom checks placed under /etc/datadog-agent/conf.d/. See https://docs.datadoghq.com/agent/guide/agent-configuration-files/?tab=agentv6 for more details.
        :param pulumi.Input[str] config_map_name: ConfigMapName name of a ConfigMap used to mount a directory
        """
        if config_map_name is not None:
            pulumi.set(__self__, "config_map_name", config_map_name)

    @property
    @pulumi.getter(name="configMapName")
    def config_map_name(self) -> Optional[pulumi.Input[str]]:
        """
        ConfigMapName name of a ConfigMap used to mount a directory
        """
        return pulumi.get(self, "config_map_name")

    @config_map_name.setter
    def config_map_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_map_name", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigCriSocketArgs:
    def __init__(__self__, *,
                 cri_socket_path: Optional[pulumi.Input[str]] = None,
                 docker_socket_path: Optional[pulumi.Input[str]] = None):
        """
        Configure the CRI Socket
        :param pulumi.Input[str] cri_socket_path: Path to the container runtime socket (if different from Docker) This is supported starting from agent 6.6.0
        :param pulumi.Input[str] docker_socket_path: Path to the docker runtime socket
        """
        if cri_socket_path is not None:
            pulumi.set(__self__, "cri_socket_path", cri_socket_path)
        if docker_socket_path is not None:
            pulumi.set(__self__, "docker_socket_path", docker_socket_path)

    @property
    @pulumi.getter(name="criSocketPath")
    def cri_socket_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to the container runtime socket (if different from Docker) This is supported starting from agent 6.6.0
        """
        return pulumi.get(self, "cri_socket_path")

    @cri_socket_path.setter
    def cri_socket_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cri_socket_path", value)

    @property
    @pulumi.getter(name="dockerSocketPath")
    def docker_socket_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to the docker runtime socket
        """
        return pulumi.get(self, "docker_socket_path")

    @docker_socket_path.setter
    def docker_socket_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docker_socket_path", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigDogstatsdArgs:
    def __init__(__self__, *,
                 dogstatsd_origin_detection: Optional[pulumi.Input[bool]] = None,
                 use_dog_stats_d_socket_volume: Optional[pulumi.Input[bool]] = None):
        """
        Configure Dogstatsd
        :param pulumi.Input[bool] dogstatsd_origin_detection: Enable origin detection for container tagging https://docs.datadoghq.com/developers/dogstatsd/unix_socket/#using-origin-detection-for-container-tagging
        :param pulumi.Input[bool] use_dog_stats_d_socket_volume: Enable dogstatsd over Unix Domain Socket ref: https://docs.datadoghq.com/developers/dogstatsd/unix_socket/
        """
        if dogstatsd_origin_detection is not None:
            pulumi.set(__self__, "dogstatsd_origin_detection", dogstatsd_origin_detection)
        if use_dog_stats_d_socket_volume is not None:
            pulumi.set(__self__, "use_dog_stats_d_socket_volume", use_dog_stats_d_socket_volume)

    @property
    @pulumi.getter(name="dogstatsdOriginDetection")
    def dogstatsd_origin_detection(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable origin detection for container tagging https://docs.datadoghq.com/developers/dogstatsd/unix_socket/#using-origin-detection-for-container-tagging
        """
        return pulumi.get(self, "dogstatsd_origin_detection")

    @dogstatsd_origin_detection.setter
    def dogstatsd_origin_detection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dogstatsd_origin_detection", value)

    @property
    @pulumi.getter(name="useDogStatsDSocketVolume")
    def use_dog_stats_d_socket_volume(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable dogstatsd over Unix Domain Socket ref: https://docs.datadoghq.com/developers/dogstatsd/unix_socket/
        """
        return pulumi.get(self, "use_dog_stats_d_socket_volume")

    @use_dog_stats_d_socket_volume.setter
    def use_dog_stats_d_socket_volume(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_dog_stats_d_socket_volume", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigEnvArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None,
                 value_from: Optional[pulumi.Input['DatadogAgentSpecAgentConfigEnvValueFromArgs']] = None):
        """
        EnvVar represents an environment variable present in a Container.
        :param pulumi.Input[str] name: Name of the environment variable. Must be a C_IDENTIFIER.
        :param pulumi.Input[str] value: Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        :param pulumi.Input['DatadogAgentSpecAgentConfigEnvValueFromArgs'] value_from: Source for the environment variable's value. Cannot be used if value is not empty.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the environment variable. Must be a C_IDENTIFIER.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigEnvValueFromArgs']]:
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        """
        return pulumi.get(self, "value_from")

    @value_from.setter
    def value_from(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigEnvValueFromArgs']]):
        pulumi.set(self, "value_from", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigEnvValueFromArgs:
    def __init__(__self__, *,
                 config_map_key_ref: Optional[pulumi.Input['DatadogAgentSpecAgentConfigEnvValueFromConfigMapKeyRefArgs']] = None,
                 field_ref: Optional[pulumi.Input['DatadogAgentSpecAgentConfigEnvValueFromFieldRefArgs']] = None,
                 resource_field_ref: Optional[pulumi.Input['DatadogAgentSpecAgentConfigEnvValueFromResourceFieldRefArgs']] = None,
                 secret_key_ref: Optional[pulumi.Input['DatadogAgentSpecAgentConfigEnvValueFromSecretKeyRefArgs']] = None):
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        :param pulumi.Input['DatadogAgentSpecAgentConfigEnvValueFromConfigMapKeyRefArgs'] config_map_key_ref: Selects a key of a ConfigMap.
        :param pulumi.Input['DatadogAgentSpecAgentConfigEnvValueFromFieldRefArgs'] field_ref: Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param pulumi.Input['DatadogAgentSpecAgentConfigEnvValueFromResourceFieldRefArgs'] resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param pulumi.Input['DatadogAgentSpecAgentConfigEnvValueFromSecretKeyRefArgs'] secret_key_ref: Selects a key of a secret in the pod's namespace
        """
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigEnvValueFromConfigMapKeyRefArgs']]:
        """
        Selects a key of a ConfigMap.
        """
        return pulumi.get(self, "config_map_key_ref")

    @config_map_key_ref.setter
    def config_map_key_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigEnvValueFromConfigMapKeyRefArgs']]):
        pulumi.set(self, "config_map_key_ref", value)

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigEnvValueFromFieldRefArgs']]:
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        """
        return pulumi.get(self, "field_ref")

    @field_ref.setter
    def field_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigEnvValueFromFieldRefArgs']]):
        pulumi.set(self, "field_ref", value)

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigEnvValueFromResourceFieldRefArgs']]:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    @resource_field_ref.setter
    def resource_field_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigEnvValueFromResourceFieldRefArgs']]):
        pulumi.set(self, "resource_field_ref", value)

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigEnvValueFromSecretKeyRefArgs']]:
        """
        Selects a key of a secret in the pod's namespace
        """
        return pulumi.get(self, "secret_key_ref")

    @secret_key_ref.setter
    def secret_key_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigEnvValueFromSecretKeyRefArgs']]):
        pulumi.set(self, "secret_key_ref", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigEnvValueFromConfigMapKeyRefArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        Selects a key of a ConfigMap.
        :param pulumi.Input[str] key: The key to select.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the ConfigMap or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key to select.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the ConfigMap or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigEnvValueFromFieldRefArgs:
    def __init__(__self__, *,
                 field_path: pulumi.Input[str],
                 api_version: Optional[pulumi.Input[str]] = None):
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param pulumi.Input[str] field_path: Path of the field to select in the specified API version.
        :param pulumi.Input[str] api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> pulumi.Input[str]:
        """
        Path of the field to select in the specified API version.
        """
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_path", value)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigEnvValueFromResourceFieldRefArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 container_name: Optional[pulumi.Input[str]] = None,
                 divisor: Optional[pulumi.Input['DatadogAgentSpecAgentConfigEnvValueFromResourceFieldRefDivisorArgs']] = None):
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param pulumi.Input[str] resource: Required: resource to select
        :param pulumi.Input[str] container_name: Container name: required for volumes, optional for env vars
        :param pulumi.Input['DatadogAgentSpecAgentConfigEnvValueFromResourceFieldRefDivisorArgs'] divisor: Specifies the output format of the exposed resources, defaults to "1"
        """
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        """
        Required: resource to select
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Container name: required for volumes, optional for env vars
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter
    def divisor(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigEnvValueFromResourceFieldRefDivisorArgs']]:
        """
        Specifies the output format of the exposed resources, defaults to "1"
        """
        return pulumi.get(self, "divisor")

    @divisor.setter
    def divisor(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigEnvValueFromResourceFieldRefDivisorArgs']]):
        pulumi.set(self, "divisor", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigEnvValueFromResourceFieldRefDivisorArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class DatadogAgentSpecAgentConfigEnvValueFromSecretKeyRefArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        Selects a key of a secret in the pod's namespace
        :param pulumi.Input[str] key: The key of the secret to select from.  Must be a valid secret key.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the Secret or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key of the secret to select from.  Must be a valid secret key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the Secret or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecAgentConfigResourcesLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecAgentConfigResourcesRequestsArgs']]]] = None):
        """
        Datadog Agent resource requests and limits Make sure to keep requests and limits equal to keep the pods in the Guaranteed QoS class Ref: http://kubernetes.io/docs/user-guide/compute-resources/
        :param pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecAgentConfigResourcesLimitsArgs']]] limits: Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecAgentConfigResourcesRequestsArgs']]] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecAgentConfigResourcesLimitsArgs']]]]:
        """
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecAgentConfigResourcesLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecAgentConfigResourcesRequestsArgs']]]]:
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecAgentConfigResourcesRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigResourcesLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class DatadogAgentSpecAgentConfigResourcesRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class DatadogAgentSpecAgentConfigSecurityContextArgs:
    def __init__(__self__, *,
                 allow_privilege_escalation: Optional[pulumi.Input[bool]] = None,
                 capabilities: Optional[pulumi.Input['DatadogAgentSpecAgentConfigSecurityContextCapabilitiesArgs']] = None,
                 privileged: Optional[pulumi.Input[bool]] = None,
                 proc_mount: Optional[pulumi.Input[str]] = None,
                 read_only_root_filesystem: Optional[pulumi.Input[bool]] = None,
                 run_as_group: Optional[pulumi.Input[int]] = None,
                 run_as_non_root: Optional[pulumi.Input[bool]] = None,
                 run_as_user: Optional[pulumi.Input[int]] = None,
                 se_linux_options: Optional[pulumi.Input['DatadogAgentSpecAgentConfigSecurityContextSeLinuxOptionsArgs']] = None,
                 windows_options: Optional[pulumi.Input['DatadogAgentSpecAgentConfigSecurityContextWindowsOptionsArgs']] = None):
        """
        You can modify the security context used to run the containers by modifying the label type
        :param pulumi.Input[bool] allow_privilege_escalation: AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
        :param pulumi.Input['DatadogAgentSpecAgentConfigSecurityContextCapabilitiesArgs'] capabilities: The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
        :param pulumi.Input[bool] privileged: Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
        :param pulumi.Input[str] proc_mount: procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
        :param pulumi.Input[bool] read_only_root_filesystem: Whether this container has a read-only root filesystem. Default is false.
        :param pulumi.Input[int] run_as_group: The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[bool] run_as_non_root: Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[int] run_as_user: The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input['DatadogAgentSpecAgentConfigSecurityContextSeLinuxOptionsArgs'] se_linux_options: The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input['DatadogAgentSpecAgentConfigSecurityContextWindowsOptionsArgs'] windows_options: The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        if allow_privilege_escalation is not None:
            pulumi.set(__self__, "allow_privilege_escalation", allow_privilege_escalation)
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if privileged is not None:
            pulumi.set(__self__, "privileged", privileged)
        if proc_mount is not None:
            pulumi.set(__self__, "proc_mount", proc_mount)
        if read_only_root_filesystem is not None:
            pulumi.set(__self__, "read_only_root_filesystem", read_only_root_filesystem)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if windows_options is not None:
            pulumi.set(__self__, "windows_options", windows_options)

    @property
    @pulumi.getter(name="allowPrivilegeEscalation")
    def allow_privilege_escalation(self) -> Optional[pulumi.Input[bool]]:
        """
        AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
        """
        return pulumi.get(self, "allow_privilege_escalation")

    @allow_privilege_escalation.setter
    def allow_privilege_escalation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_privilege_escalation", value)

    @property
    @pulumi.getter
    def capabilities(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigSecurityContextCapabilitiesArgs']]:
        """
        The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
        """
        return pulumi.get(self, "capabilities")

    @capabilities.setter
    def capabilities(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigSecurityContextCapabilitiesArgs']]):
        pulumi.set(self, "capabilities", value)

    @property
    @pulumi.getter
    def privileged(self) -> Optional[pulumi.Input[bool]]:
        """
        Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
        """
        return pulumi.get(self, "privileged")

    @privileged.setter
    def privileged(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "privileged", value)

    @property
    @pulumi.getter(name="procMount")
    def proc_mount(self) -> Optional[pulumi.Input[str]]:
        """
        procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
        """
        return pulumi.get(self, "proc_mount")

    @proc_mount.setter
    def proc_mount(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proc_mount", value)

    @property
    @pulumi.getter(name="readOnlyRootFilesystem")
    def read_only_root_filesystem(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this container has a read-only root filesystem. Default is false.
        """
        return pulumi.get(self, "read_only_root_filesystem")

    @read_only_root_filesystem.setter
    def read_only_root_filesystem(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only_root_filesystem", value)

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[pulumi.Input[int]]:
        """
        The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_group")

    @run_as_group.setter
    def run_as_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "run_as_group", value)

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_non_root")

    @run_as_non_root.setter
    def run_as_non_root(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_as_non_root", value)

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[pulumi.Input[int]]:
        """
        The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_user")

    @run_as_user.setter
    def run_as_user(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "run_as_user", value)

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigSecurityContextSeLinuxOptionsArgs']]:
        """
        The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "se_linux_options")

    @se_linux_options.setter
    def se_linux_options(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigSecurityContextSeLinuxOptionsArgs']]):
        pulumi.set(self, "se_linux_options", value)

    @property
    @pulumi.getter(name="windowsOptions")
    def windows_options(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigSecurityContextWindowsOptionsArgs']]:
        """
        The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "windows_options")

    @windows_options.setter
    def windows_options(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigSecurityContextWindowsOptionsArgs']]):
        pulumi.set(self, "windows_options", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigSecurityContextCapabilitiesArgs:
    def __init__(__self__, *,
                 add: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 drop: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] add: Added capabilities
        :param pulumi.Input[Sequence[pulumi.Input[str]]] drop: Removed capabilities
        """
        if add is not None:
            pulumi.set(__self__, "add", add)
        if drop is not None:
            pulumi.set(__self__, "drop", drop)

    @property
    @pulumi.getter
    def add(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Added capabilities
        """
        return pulumi.get(self, "add")

    @add.setter
    def add(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "add", value)

    @property
    @pulumi.getter
    def drop(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Removed capabilities
        """
        return pulumi.get(self, "drop")

    @drop.setter
    def drop(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "drop", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigSecurityContextSeLinuxOptionsArgs:
    def __init__(__self__, *,
                 level: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[str] level: Level is SELinux level label that applies to the container.
        :param pulumi.Input[str] role: Role is a SELinux role label that applies to the container.
        :param pulumi.Input[str] type: Type is a SELinux type label that applies to the container.
        :param pulumi.Input[str] user: User is a SELinux user label that applies to the container.
        """
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        """
        Level is SELinux level label that applies to the container.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role is a SELinux role label that applies to the container.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type is a SELinux type label that applies to the container.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        User is a SELinux user label that applies to the container.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigSecurityContextWindowsOptionsArgs:
    def __init__(__self__, *,
                 gmsa_credential_spec: Optional[pulumi.Input[str]] = None,
                 gmsa_credential_spec_name: Optional[pulumi.Input[str]] = None,
                 run_as_user_name: Optional[pulumi.Input[str]] = None):
        """
        The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[str] gmsa_credential_spec: GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
        :param pulumi.Input[str] gmsa_credential_spec_name: GMSACredentialSpecName is the name of the GMSA credential spec to use.
        :param pulumi.Input[str] run_as_user_name: The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        if gmsa_credential_spec is not None:
            pulumi.set(__self__, "gmsa_credential_spec", gmsa_credential_spec)
        if gmsa_credential_spec_name is not None:
            pulumi.set(__self__, "gmsa_credential_spec_name", gmsa_credential_spec_name)
        if run_as_user_name is not None:
            pulumi.set(__self__, "run_as_user_name", run_as_user_name)

    @property
    @pulumi.getter(name="gmsaCredentialSpec")
    def gmsa_credential_spec(self) -> Optional[pulumi.Input[str]]:
        """
        GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
        """
        return pulumi.get(self, "gmsa_credential_spec")

    @gmsa_credential_spec.setter
    def gmsa_credential_spec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gmsa_credential_spec", value)

    @property
    @pulumi.getter(name="gmsaCredentialSpecName")
    def gmsa_credential_spec_name(self) -> Optional[pulumi.Input[str]]:
        """
        GMSACredentialSpecName is the name of the GMSA credential spec to use.
        """
        return pulumi.get(self, "gmsa_credential_spec_name")

    @gmsa_credential_spec_name.setter
    def gmsa_credential_spec_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gmsa_credential_spec_name", value)

    @property
    @pulumi.getter(name="runAsUserName")
    def run_as_user_name(self) -> Optional[pulumi.Input[str]]:
        """
        The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_user_name")

    @run_as_user_name.setter
    def run_as_user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_as_user_name", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigTolerationsArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 toleration_seconds: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
        :param pulumi.Input[str] effect: Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        :param pulumi.Input[str] key: Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        :param pulumi.Input[str] operator: Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
        :param pulumi.Input[int] toleration_seconds: TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
        :param pulumi.Input[str] value: Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        """
        Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
        """
        return pulumi.get(self, "toleration_seconds")

    @toleration_seconds.setter
    def toleration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "toleration_seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumeMountsArgs:
    def __init__(__self__, *,
                 mount_path: pulumi.Input[str],
                 name: pulumi.Input[str],
                 mount_propagation: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 sub_path: Optional[pulumi.Input[str]] = None,
                 sub_path_expr: Optional[pulumi.Input[str]] = None):
        """
        VolumeMount describes a mounting of a Volume within a container.
        :param pulumi.Input[str] mount_path: Path within the container at which the volume should be mounted.  Must not contain ':'.
        :param pulumi.Input[str] name: This must match the Name of a Volume.
        :param pulumi.Input[str] mount_propagation: mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
        :param pulumi.Input[bool] read_only: Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
        :param pulumi.Input[str] sub_path: Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
        :param pulumi.Input[str] sub_path_expr: Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
        """
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> pulumi.Input[str]:
        """
        Path within the container at which the volume should be mounted.  Must not contain ':'.
        """
        return pulumi.get(self, "mount_path")

    @mount_path.setter
    def mount_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "mount_path", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        This must match the Name of a Volume.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[pulumi.Input[str]]:
        """
        mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
        """
        return pulumi.get(self, "mount_propagation")

    @mount_propagation.setter
    def mount_propagation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_propagation", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
        """
        return pulumi.get(self, "sub_path")

    @sub_path.setter
    def sub_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_path", value)

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[pulumi.Input[str]]:
        """
        Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
        """
        return pulumi.get(self, "sub_path_expr")

    @sub_path_expr.setter
    def sub_path_expr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_path_expr", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 aws_elastic_block_store: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesAwsElasticBlockStoreArgs']] = None,
                 azure_disk: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesAzureDiskArgs']] = None,
                 azure_file: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesAzureFileArgs']] = None,
                 cephfs: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesCephfsArgs']] = None,
                 cinder: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesCinderArgs']] = None,
                 config_map: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesConfigMapArgs']] = None,
                 csi: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesCsiArgs']] = None,
                 downward_api: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesDownwardAPIArgs']] = None,
                 empty_dir: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesEmptyDirArgs']] = None,
                 fc: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesFcArgs']] = None,
                 flex_volume: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesFlexVolumeArgs']] = None,
                 flocker: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesFlockerArgs']] = None,
                 gce_persistent_disk: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesGcePersistentDiskArgs']] = None,
                 git_repo: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesGitRepoArgs']] = None,
                 glusterfs: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesGlusterfsArgs']] = None,
                 host_path: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesHostPathArgs']] = None,
                 iscsi: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesIscsiArgs']] = None,
                 nfs: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesNfsArgs']] = None,
                 persistent_volume_claim: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesPersistentVolumeClaimArgs']] = None,
                 photon_persistent_disk: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesPhotonPersistentDiskArgs']] = None,
                 portworx_volume: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesPortworxVolumeArgs']] = None,
                 projected: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedArgs']] = None,
                 quobyte: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesQuobyteArgs']] = None,
                 rbd: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesRbdArgs']] = None,
                 scale_io: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesScaleIOArgs']] = None,
                 secret: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesSecretArgs']] = None,
                 storageos: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesStorageosArgs']] = None,
                 vsphere_volume: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesVsphereVolumeArgs']] = None):
        """
        Volume represents a named volume in a pod that may be accessed by any container in the pod.
        :param pulumi.Input[str] name: Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesAwsElasticBlockStoreArgs'] aws_elastic_block_store: AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesAzureDiskArgs'] azure_disk: AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesAzureFileArgs'] azure_file: AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesCephfsArgs'] cephfs: CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesCinderArgs'] cinder: Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesConfigMapArgs'] config_map: ConfigMap represents a configMap that should populate this volume
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesCsiArgs'] csi: CSI (Container Storage Interface) represents storage that is handled by an external CSI driver (Alpha feature).
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesDownwardAPIArgs'] downward_api: DownwardAPI represents downward API about the pod that should populate this volume
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesEmptyDirArgs'] empty_dir: EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesFcArgs'] fc: FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesFlexVolumeArgs'] flex_volume: FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesFlockerArgs'] flocker: Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesGcePersistentDiskArgs'] gce_persistent_disk: GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesGitRepoArgs'] git_repo: GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesGlusterfsArgs'] glusterfs: Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesHostPathArgs'] host_path: HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesIscsiArgs'] iscsi: ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesNfsArgs'] nfs: NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesPersistentVolumeClaimArgs'] persistent_volume_claim: PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesPhotonPersistentDiskArgs'] photon_persistent_disk: PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesPortworxVolumeArgs'] portworx_volume: PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedArgs'] projected: Items for all in one resources secrets, configmaps, and downward API
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesQuobyteArgs'] quobyte: Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesRbdArgs'] rbd: RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesScaleIOArgs'] scale_io: ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesSecretArgs'] secret: Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesStorageosArgs'] storageos: StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesVsphereVolumeArgs'] vsphere_volume: VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
        """
        pulumi.set(__self__, "name", name)
        if aws_elastic_block_store is not None:
            pulumi.set(__self__, "aws_elastic_block_store", aws_elastic_block_store)
        if azure_disk is not None:
            pulumi.set(__self__, "azure_disk", azure_disk)
        if azure_file is not None:
            pulumi.set(__self__, "azure_file", azure_file)
        if cephfs is not None:
            pulumi.set(__self__, "cephfs", cephfs)
        if cinder is not None:
            pulumi.set(__self__, "cinder", cinder)
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if csi is not None:
            pulumi.set(__self__, "csi", csi)
        if downward_api is not None:
            pulumi.set(__self__, "downward_api", downward_api)
        if empty_dir is not None:
            pulumi.set(__self__, "empty_dir", empty_dir)
        if fc is not None:
            pulumi.set(__self__, "fc", fc)
        if flex_volume is not None:
            pulumi.set(__self__, "flex_volume", flex_volume)
        if flocker is not None:
            pulumi.set(__self__, "flocker", flocker)
        if gce_persistent_disk is not None:
            pulumi.set(__self__, "gce_persistent_disk", gce_persistent_disk)
        if git_repo is not None:
            pulumi.set(__self__, "git_repo", git_repo)
        if glusterfs is not None:
            pulumi.set(__self__, "glusterfs", glusterfs)
        if host_path is not None:
            pulumi.set(__self__, "host_path", host_path)
        if iscsi is not None:
            pulumi.set(__self__, "iscsi", iscsi)
        if nfs is not None:
            pulumi.set(__self__, "nfs", nfs)
        if persistent_volume_claim is not None:
            pulumi.set(__self__, "persistent_volume_claim", persistent_volume_claim)
        if photon_persistent_disk is not None:
            pulumi.set(__self__, "photon_persistent_disk", photon_persistent_disk)
        if portworx_volume is not None:
            pulumi.set(__self__, "portworx_volume", portworx_volume)
        if projected is not None:
            pulumi.set(__self__, "projected", projected)
        if quobyte is not None:
            pulumi.set(__self__, "quobyte", quobyte)
        if rbd is not None:
            pulumi.set(__self__, "rbd", rbd)
        if scale_io is not None:
            pulumi.set(__self__, "scale_io", scale_io)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if storageos is not None:
            pulumi.set(__self__, "storageos", storageos)
        if vsphere_volume is not None:
            pulumi.set(__self__, "vsphere_volume", vsphere_volume)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="awsElasticBlockStore")
    def aws_elastic_block_store(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesAwsElasticBlockStoreArgs']]:
        """
        AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        """
        return pulumi.get(self, "aws_elastic_block_store")

    @aws_elastic_block_store.setter
    def aws_elastic_block_store(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesAwsElasticBlockStoreArgs']]):
        pulumi.set(self, "aws_elastic_block_store", value)

    @property
    @pulumi.getter(name="azureDisk")
    def azure_disk(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesAzureDiskArgs']]:
        """
        AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
        """
        return pulumi.get(self, "azure_disk")

    @azure_disk.setter
    def azure_disk(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesAzureDiskArgs']]):
        pulumi.set(self, "azure_disk", value)

    @property
    @pulumi.getter(name="azureFile")
    def azure_file(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesAzureFileArgs']]:
        """
        AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
        """
        return pulumi.get(self, "azure_file")

    @azure_file.setter
    def azure_file(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesAzureFileArgs']]):
        pulumi.set(self, "azure_file", value)

    @property
    @pulumi.getter
    def cephfs(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesCephfsArgs']]:
        """
        CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
        """
        return pulumi.get(self, "cephfs")

    @cephfs.setter
    def cephfs(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesCephfsArgs']]):
        pulumi.set(self, "cephfs", value)

    @property
    @pulumi.getter
    def cinder(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesCinderArgs']]:
        """
        Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        """
        return pulumi.get(self, "cinder")

    @cinder.setter
    def cinder(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesCinderArgs']]):
        pulumi.set(self, "cinder", value)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesConfigMapArgs']]:
        """
        ConfigMap represents a configMap that should populate this volume
        """
        return pulumi.get(self, "config_map")

    @config_map.setter
    def config_map(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesConfigMapArgs']]):
        pulumi.set(self, "config_map", value)

    @property
    @pulumi.getter
    def csi(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesCsiArgs']]:
        """
        CSI (Container Storage Interface) represents storage that is handled by an external CSI driver (Alpha feature).
        """
        return pulumi.get(self, "csi")

    @csi.setter
    def csi(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesCsiArgs']]):
        pulumi.set(self, "csi", value)

    @property
    @pulumi.getter(name="downwardAPI")
    def downward_api(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesDownwardAPIArgs']]:
        """
        DownwardAPI represents downward API about the pod that should populate this volume
        """
        return pulumi.get(self, "downward_api")

    @downward_api.setter
    def downward_api(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesDownwardAPIArgs']]):
        pulumi.set(self, "downward_api", value)

    @property
    @pulumi.getter(name="emptyDir")
    def empty_dir(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesEmptyDirArgs']]:
        """
        EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
        """
        return pulumi.get(self, "empty_dir")

    @empty_dir.setter
    def empty_dir(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesEmptyDirArgs']]):
        pulumi.set(self, "empty_dir", value)

    @property
    @pulumi.getter
    def fc(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesFcArgs']]:
        """
        FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
        """
        return pulumi.get(self, "fc")

    @fc.setter
    def fc(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesFcArgs']]):
        pulumi.set(self, "fc", value)

    @property
    @pulumi.getter(name="flexVolume")
    def flex_volume(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesFlexVolumeArgs']]:
        """
        FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
        """
        return pulumi.get(self, "flex_volume")

    @flex_volume.setter
    def flex_volume(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesFlexVolumeArgs']]):
        pulumi.set(self, "flex_volume", value)

    @property
    @pulumi.getter
    def flocker(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesFlockerArgs']]:
        """
        Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
        """
        return pulumi.get(self, "flocker")

    @flocker.setter
    def flocker(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesFlockerArgs']]):
        pulumi.set(self, "flocker", value)

    @property
    @pulumi.getter(name="gcePersistentDisk")
    def gce_persistent_disk(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesGcePersistentDiskArgs']]:
        """
        GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        return pulumi.get(self, "gce_persistent_disk")

    @gce_persistent_disk.setter
    def gce_persistent_disk(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesGcePersistentDiskArgs']]):
        pulumi.set(self, "gce_persistent_disk", value)

    @property
    @pulumi.getter(name="gitRepo")
    def git_repo(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesGitRepoArgs']]:
        """
        GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
        """
        return pulumi.get(self, "git_repo")

    @git_repo.setter
    def git_repo(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesGitRepoArgs']]):
        pulumi.set(self, "git_repo", value)

    @property
    @pulumi.getter
    def glusterfs(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesGlusterfsArgs']]:
        """
        Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
        """
        return pulumi.get(self, "glusterfs")

    @glusterfs.setter
    def glusterfs(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesGlusterfsArgs']]):
        pulumi.set(self, "glusterfs", value)

    @property
    @pulumi.getter(name="hostPath")
    def host_path(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesHostPathArgs']]:
        """
        HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
        """
        return pulumi.get(self, "host_path")

    @host_path.setter
    def host_path(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesHostPathArgs']]):
        pulumi.set(self, "host_path", value)

    @property
    @pulumi.getter
    def iscsi(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesIscsiArgs']]:
        """
        ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
        """
        return pulumi.get(self, "iscsi")

    @iscsi.setter
    def iscsi(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesIscsiArgs']]):
        pulumi.set(self, "iscsi", value)

    @property
    @pulumi.getter
    def nfs(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesNfsArgs']]:
        """
        NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
        return pulumi.get(self, "nfs")

    @nfs.setter
    def nfs(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesNfsArgs']]):
        pulumi.set(self, "nfs", value)

    @property
    @pulumi.getter(name="persistentVolumeClaim")
    def persistent_volume_claim(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesPersistentVolumeClaimArgs']]:
        """
        PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        """
        return pulumi.get(self, "persistent_volume_claim")

    @persistent_volume_claim.setter
    def persistent_volume_claim(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesPersistentVolumeClaimArgs']]):
        pulumi.set(self, "persistent_volume_claim", value)

    @property
    @pulumi.getter(name="photonPersistentDisk")
    def photon_persistent_disk(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesPhotonPersistentDiskArgs']]:
        """
        PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
        """
        return pulumi.get(self, "photon_persistent_disk")

    @photon_persistent_disk.setter
    def photon_persistent_disk(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesPhotonPersistentDiskArgs']]):
        pulumi.set(self, "photon_persistent_disk", value)

    @property
    @pulumi.getter(name="portworxVolume")
    def portworx_volume(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesPortworxVolumeArgs']]:
        """
        PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
        """
        return pulumi.get(self, "portworx_volume")

    @portworx_volume.setter
    def portworx_volume(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesPortworxVolumeArgs']]):
        pulumi.set(self, "portworx_volume", value)

    @property
    @pulumi.getter
    def projected(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedArgs']]:
        """
        Items for all in one resources secrets, configmaps, and downward API
        """
        return pulumi.get(self, "projected")

    @projected.setter
    def projected(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedArgs']]):
        pulumi.set(self, "projected", value)

    @property
    @pulumi.getter
    def quobyte(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesQuobyteArgs']]:
        """
        Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
        """
        return pulumi.get(self, "quobyte")

    @quobyte.setter
    def quobyte(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesQuobyteArgs']]):
        pulumi.set(self, "quobyte", value)

    @property
    @pulumi.getter
    def rbd(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesRbdArgs']]:
        """
        RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
        """
        return pulumi.get(self, "rbd")

    @rbd.setter
    def rbd(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesRbdArgs']]):
        pulumi.set(self, "rbd", value)

    @property
    @pulumi.getter(name="scaleIO")
    def scale_io(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesScaleIOArgs']]:
        """
        ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
        """
        return pulumi.get(self, "scale_io")

    @scale_io.setter
    def scale_io(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesScaleIOArgs']]):
        pulumi.set(self, "scale_io", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesSecretArgs']]:
        """
        Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesSecretArgs']]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def storageos(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesStorageosArgs']]:
        """
        StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
        """
        return pulumi.get(self, "storageos")

    @storageos.setter
    def storageos(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesStorageosArgs']]):
        pulumi.set(self, "storageos", value)

    @property
    @pulumi.getter(name="vsphereVolume")
    def vsphere_volume(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesVsphereVolumeArgs']]:
        """
        VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
        """
        return pulumi.get(self, "vsphere_volume")

    @vsphere_volume.setter
    def vsphere_volume(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesVsphereVolumeArgs']]):
        pulumi.set(self, "vsphere_volume", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesAwsElasticBlockStoreArgs:
    def __init__(__self__, *,
                 volume_id: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 partition: Optional[pulumi.Input[int]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        :param pulumi.Input[str] volume_id: Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        :param pulumi.Input[str] fs_type: Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
        :param pulumi.Input[int] partition: The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
        :param pulumi.Input[bool] read_only: Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        """
        pulumi.set(__self__, "volume_id", volume_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if partition is not None:
            pulumi.set(__self__, "partition", partition)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="volumeID")
    def volume_id(self) -> pulumi.Input[str]:
        """
        Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "volume_id", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter
    def partition(self) -> Optional[pulumi.Input[int]]:
        """
        The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
        """
        return pulumi.get(self, "partition")

    @partition.setter
    def partition(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "partition", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesAzureDiskArgs:
    def __init__(__self__, *,
                 disk_name: pulumi.Input[str],
                 disk_uri: pulumi.Input[str],
                 caching_mode: Optional[pulumi.Input[str]] = None,
                 fs_type: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
        :param pulumi.Input[str] disk_name: The Name of the data disk in the blob storage
        :param pulumi.Input[str] disk_uri: The URI the data disk in the blob storage
        :param pulumi.Input[str] caching_mode: Host Caching mode: None, Read Only, Read Write.
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        :param pulumi.Input[str] kind: Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
        :param pulumi.Input[bool] read_only: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        pulumi.set(__self__, "disk_name", disk_name)
        pulumi.set(__self__, "disk_uri", disk_uri)
        if caching_mode is not None:
            pulumi.set(__self__, "caching_mode", caching_mode)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="diskName")
    def disk_name(self) -> pulumi.Input[str]:
        """
        The Name of the data disk in the blob storage
        """
        return pulumi.get(self, "disk_name")

    @disk_name.setter
    def disk_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "disk_name", value)

    @property
    @pulumi.getter(name="diskURI")
    def disk_uri(self) -> pulumi.Input[str]:
        """
        The URI the data disk in the blob storage
        """
        return pulumi.get(self, "disk_uri")

    @disk_uri.setter
    def disk_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "disk_uri", value)

    @property
    @pulumi.getter(name="cachingMode")
    def caching_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Host Caching mode: None, Read Only, Read Write.
        """
        return pulumi.get(self, "caching_mode")

    @caching_mode.setter
    def caching_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "caching_mode", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesAzureFileArgs:
    def __init__(__self__, *,
                 secret_name: pulumi.Input[str],
                 share_name: pulumi.Input[str],
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
        :param pulumi.Input[str] secret_name: the name of secret that contains Azure Storage Account Name and Key
        :param pulumi.Input[str] share_name: Share Name
        :param pulumi.Input[bool] read_only: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        pulumi.set(__self__, "secret_name", secret_name)
        pulumi.set(__self__, "share_name", share_name)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[str]:
        """
        the name of secret that contains Azure Storage Account Name and Key
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_name", value)

    @property
    @pulumi.getter(name="shareName")
    def share_name(self) -> pulumi.Input[str]:
        """
        Share Name
        """
        return pulumi.get(self, "share_name")

    @share_name.setter
    def share_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "share_name", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesCephfsArgs:
    def __init__(__self__, *,
                 monitors: pulumi.Input[Sequence[pulumi.Input[str]]],
                 path: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 secret_file: Optional[pulumi.Input[str]] = None,
                 secret_ref: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesCephfsSecretRefArgs']] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
        :param pulumi.Input[Sequence[pulumi.Input[str]]] monitors: Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        :param pulumi.Input[str] path: Optional: Used as the mounted root, rather than the full Ceph tree, default is /
        :param pulumi.Input[bool] read_only: Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        :param pulumi.Input[str] secret_file: Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesCephfsSecretRefArgs'] secret_ref: Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        :param pulumi.Input[str] user: Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        pulumi.set(__self__, "monitors", monitors)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_file is not None:
            pulumi.set(__self__, "secret_file", secret_file)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def monitors(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        return pulumi.get(self, "monitors")

    @monitors.setter
    def monitors(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "monitors", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: Used as the mounted root, rather than the full Ceph tree, default is /
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="secretFile")
    def secret_file(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        return pulumi.get(self, "secret_file")

    @secret_file.setter
    def secret_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_file", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesCephfsSecretRefArgs']]:
        """
        Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesCephfsSecretRefArgs']]):
        pulumi.set(self, "secret_ref", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesCephfsSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesCinderArgs:
    def __init__(__self__, *,
                 volume_id: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 secret_ref: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesCinderSecretRefArgs']] = None):
        """
        Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        :param pulumi.Input[str] volume_id: volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        :param pulumi.Input[bool] read_only: Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesCinderSecretRefArgs'] secret_ref: Optional: points to a secret object containing parameters used to connect to OpenStack.
        """
        pulumi.set(__self__, "volume_id", volume_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter(name="volumeID")
    def volume_id(self) -> pulumi.Input[str]:
        """
        volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "volume_id", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesCinderSecretRefArgs']]:
        """
        Optional: points to a secret object containing parameters used to connect to OpenStack.
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesCinderSecretRefArgs']]):
        pulumi.set(self, "secret_ref", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesCinderSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Optional: points to a secret object containing parameters used to connect to OpenStack.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesConfigMapArgs:
    def __init__(__self__, *,
                 default_mode: Optional[pulumi.Input[int]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigVolumesConfigMapItemsArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        ConfigMap represents a configMap that should populate this volume
        :param pulumi.Input[int] default_mode: Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigVolumesConfigMapItemsArgs']]] items: If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the ConfigMap or its keys must be defined
        """
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[int]]:
        """
        Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_mode", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigVolumesConfigMapItemsArgs']]]]:
        """
        If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigVolumesConfigMapItemsArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the ConfigMap or its keys must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesConfigMapItemsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 path: pulumi.Input[str],
                 mode: Optional[pulumi.Input[int]] = None):
        """
        Maps a string key to a path within a volume.
        :param pulumi.Input[str] key: The key to project.
        :param pulumi.Input[str] path: The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        :param pulumi.Input[int] mode: Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key to project.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesCsiArgs:
    def __init__(__self__, *,
                 driver: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 node_publish_secret_ref: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesCsiNodePublishSecretRefArgs']] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 volume_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        CSI (Container Storage Interface) represents storage that is handled by an external CSI driver (Alpha feature).
        :param pulumi.Input[str] driver: Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesCsiNodePublishSecretRefArgs'] node_publish_secret_ref: NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
        :param pulumi.Input[bool] read_only: Specifies a read-only configuration for the volume. Defaults to false (read/write).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] volume_attributes: VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
        """
        pulumi.set(__self__, "driver", driver)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if node_publish_secret_ref is not None:
            pulumi.set(__self__, "node_publish_secret_ref", node_publish_secret_ref)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if volume_attributes is not None:
            pulumi.set(__self__, "volume_attributes", volume_attributes)

    @property
    @pulumi.getter
    def driver(self) -> pulumi.Input[str]:
        """
        Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
        """
        return pulumi.get(self, "driver")

    @driver.setter
    def driver(self, value: pulumi.Input[str]):
        pulumi.set(self, "driver", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter(name="nodePublishSecretRef")
    def node_publish_secret_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesCsiNodePublishSecretRefArgs']]:
        """
        NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
        """
        return pulumi.get(self, "node_publish_secret_ref")

    @node_publish_secret_ref.setter
    def node_publish_secret_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesCsiNodePublishSecretRefArgs']]):
        pulumi.set(self, "node_publish_secret_ref", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies a read-only configuration for the volume. Defaults to false (read/write).
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="volumeAttributes")
    def volume_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
        """
        return pulumi.get(self, "volume_attributes")

    @volume_attributes.setter
    def volume_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "volume_attributes", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesCsiNodePublishSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesDownwardAPIArgs:
    def __init__(__self__, *,
                 default_mode: Optional[pulumi.Input[int]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigVolumesDownwardAPIItemsArgs']]]] = None):
        """
        DownwardAPI represents downward API about the pod that should populate this volume
        :param pulumi.Input[int] default_mode: Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigVolumesDownwardAPIItemsArgs']]] items: Items is a list of downward API volume file
        """
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[int]]:
        """
        Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_mode", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigVolumesDownwardAPIItemsArgs']]]]:
        """
        Items is a list of downward API volume file
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigVolumesDownwardAPIItemsArgs']]]]):
        pulumi.set(self, "items", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesDownwardAPIItemsArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 field_ref: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesDownwardAPIItemsFieldRefArgs']] = None,
                 mode: Optional[pulumi.Input[int]] = None,
                 resource_field_ref: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesDownwardAPIItemsResourceFieldRefArgs']] = None):
        """
        DownwardAPIVolumeFile represents information to create the file containing the pod field
        :param pulumi.Input[str] path: Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesDownwardAPIItemsFieldRefArgs'] field_ref: Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
        :param pulumi.Input[int] mode: Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesDownwardAPIItemsResourceFieldRefArgs'] resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        """
        pulumi.set(__self__, "path", path)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesDownwardAPIItemsFieldRefArgs']]:
        """
        Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
        """
        return pulumi.get(self, "field_ref")

    @field_ref.setter
    def field_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesDownwardAPIItemsFieldRefArgs']]):
        pulumi.set(self, "field_ref", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesDownwardAPIItemsResourceFieldRefArgs']]:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    @resource_field_ref.setter
    def resource_field_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesDownwardAPIItemsResourceFieldRefArgs']]):
        pulumi.set(self, "resource_field_ref", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesDownwardAPIItemsFieldRefArgs:
    def __init__(__self__, *,
                 field_path: pulumi.Input[str],
                 api_version: Optional[pulumi.Input[str]] = None):
        """
        Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
        :param pulumi.Input[str] field_path: Path of the field to select in the specified API version.
        :param pulumi.Input[str] api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> pulumi.Input[str]:
        """
        Path of the field to select in the specified API version.
        """
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_path", value)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesDownwardAPIItemsResourceFieldRefArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 container_name: Optional[pulumi.Input[str]] = None,
                 divisor: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesDownwardAPIItemsResourceFieldRefDivisorArgs']] = None):
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        :param pulumi.Input[str] resource: Required: resource to select
        :param pulumi.Input[str] container_name: Container name: required for volumes, optional for env vars
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesDownwardAPIItemsResourceFieldRefDivisorArgs'] divisor: Specifies the output format of the exposed resources, defaults to "1"
        """
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        """
        Required: resource to select
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Container name: required for volumes, optional for env vars
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter
    def divisor(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesDownwardAPIItemsResourceFieldRefDivisorArgs']]:
        """
        Specifies the output format of the exposed resources, defaults to "1"
        """
        return pulumi.get(self, "divisor")

    @divisor.setter
    def divisor(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesDownwardAPIItemsResourceFieldRefDivisorArgs']]):
        pulumi.set(self, "divisor", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesDownwardAPIItemsResourceFieldRefDivisorArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesEmptyDirArgs:
    def __init__(__self__, *,
                 medium: Optional[pulumi.Input[str]] = None,
                 size_limit: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesEmptyDirSizeLimitArgs']] = None):
        """
        EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
        :param pulumi.Input[str] medium: What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesEmptyDirSizeLimitArgs'] size_limit: Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
        """
        if medium is not None:
            pulumi.set(__self__, "medium", medium)
        if size_limit is not None:
            pulumi.set(__self__, "size_limit", size_limit)

    @property
    @pulumi.getter
    def medium(self) -> Optional[pulumi.Input[str]]:
        """
        What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
        """
        return pulumi.get(self, "medium")

    @medium.setter
    def medium(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "medium", value)

    @property
    @pulumi.getter(name="sizeLimit")
    def size_limit(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesEmptyDirSizeLimitArgs']]:
        """
        Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
        """
        return pulumi.get(self, "size_limit")

    @size_limit.setter
    def size_limit(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesEmptyDirSizeLimitArgs']]):
        pulumi.set(self, "size_limit", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesEmptyDirSizeLimitArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesFcArgs:
    def __init__(__self__, *,
                 fs_type: Optional[pulumi.Input[str]] = None,
                 lun: Optional[pulumi.Input[int]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 target_wwns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 wwids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
        :param pulumi.Input[int] lun: Optional: FC target lun number
        :param pulumi.Input[bool] read_only: Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] target_wwns: Optional: FC target worldwide names (WWNs)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] wwids: Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
        """
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if lun is not None:
            pulumi.set(__self__, "lun", lun)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if target_wwns is not None:
            pulumi.set(__self__, "target_wwns", target_wwns)
        if wwids is not None:
            pulumi.set(__self__, "wwids", wwids)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter
    def lun(self) -> Optional[pulumi.Input[int]]:
        """
        Optional: FC target lun number
        """
        return pulumi.get(self, "lun")

    @lun.setter
    def lun(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lun", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="targetWWNs")
    def target_wwns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Optional: FC target worldwide names (WWNs)
        """
        return pulumi.get(self, "target_wwns")

    @target_wwns.setter
    def target_wwns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "target_wwns", value)

    @property
    @pulumi.getter
    def wwids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
        """
        return pulumi.get(self, "wwids")

    @wwids.setter
    def wwids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "wwids", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesFlexVolumeArgs:
    def __init__(__self__, *,
                 driver: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 secret_ref: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesFlexVolumeSecretRefArgs']] = None):
        """
        FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
        :param pulumi.Input[str] driver: Driver is the name of the driver to use for this volume.
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] options: Optional: Extra command options if any.
        :param pulumi.Input[bool] read_only: Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesFlexVolumeSecretRefArgs'] secret_ref: Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
        """
        pulumi.set(__self__, "driver", driver)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter
    def driver(self) -> pulumi.Input[str]:
        """
        Driver is the name of the driver to use for this volume.
        """
        return pulumi.get(self, "driver")

    @driver.setter
    def driver(self, value: pulumi.Input[str]):
        pulumi.set(self, "driver", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Optional: Extra command options if any.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesFlexVolumeSecretRefArgs']]:
        """
        Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesFlexVolumeSecretRefArgs']]):
        pulumi.set(self, "secret_ref", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesFlexVolumeSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesFlockerArgs:
    def __init__(__self__, *,
                 dataset_name: Optional[pulumi.Input[str]] = None,
                 dataset_uuid: Optional[pulumi.Input[str]] = None):
        """
        Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
        :param pulumi.Input[str] dataset_name: Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
        :param pulumi.Input[str] dataset_uuid: UUID of the dataset. This is unique identifier of a Flocker dataset
        """
        if dataset_name is not None:
            pulumi.set(__self__, "dataset_name", dataset_name)
        if dataset_uuid is not None:
            pulumi.set(__self__, "dataset_uuid", dataset_uuid)

    @property
    @pulumi.getter(name="datasetName")
    def dataset_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
        """
        return pulumi.get(self, "dataset_name")

    @dataset_name.setter
    def dataset_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataset_name", value)

    @property
    @pulumi.getter(name="datasetUUID")
    def dataset_uuid(self) -> Optional[pulumi.Input[str]]:
        """
        UUID of the dataset. This is unique identifier of a Flocker dataset
        """
        return pulumi.get(self, "dataset_uuid")

    @dataset_uuid.setter
    def dataset_uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataset_uuid", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesGcePersistentDiskArgs:
    def __init__(__self__, *,
                 pd_name: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 partition: Optional[pulumi.Input[int]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        :param pulumi.Input[str] pd_name: Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        :param pulumi.Input[str] fs_type: Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
        :param pulumi.Input[int] partition: The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        :param pulumi.Input[bool] read_only: ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        pulumi.set(__self__, "pd_name", pd_name)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if partition is not None:
            pulumi.set(__self__, "partition", partition)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="pdName")
    def pd_name(self) -> pulumi.Input[str]:
        """
        Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        return pulumi.get(self, "pd_name")

    @pd_name.setter
    def pd_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "pd_name", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter
    def partition(self) -> Optional[pulumi.Input[int]]:
        """
        The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        return pulumi.get(self, "partition")

    @partition.setter
    def partition(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "partition", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesGitRepoArgs:
    def __init__(__self__, *,
                 repository: pulumi.Input[str],
                 directory: Optional[pulumi.Input[str]] = None,
                 revision: Optional[pulumi.Input[str]] = None):
        """
        GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
        :param pulumi.Input[str] repository: Repository URL
        :param pulumi.Input[str] directory: Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
        :param pulumi.Input[str] revision: Commit hash for the specified revision.
        """
        pulumi.set(__self__, "repository", repository)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)

    @property
    @pulumi.getter
    def repository(self) -> pulumi.Input[str]:
        """
        Repository URL
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter
    def directory(self) -> Optional[pulumi.Input[str]]:
        """
        Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
        """
        return pulumi.get(self, "directory")

    @directory.setter
    def directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "directory", value)

    @property
    @pulumi.getter
    def revision(self) -> Optional[pulumi.Input[str]]:
        """
        Commit hash for the specified revision.
        """
        return pulumi.get(self, "revision")

    @revision.setter
    def revision(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revision", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesGlusterfsArgs:
    def __init__(__self__, *,
                 endpoints: pulumi.Input[str],
                 path: pulumi.Input[str],
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
        :param pulumi.Input[str] endpoints: EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        :param pulumi.Input[str] path: Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        :param pulumi.Input[bool] read_only: ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        """
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter
    def endpoints(self) -> pulumi.Input[str]:
        """
        EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        """
        return pulumi.get(self, "endpoints")

    @endpoints.setter
    def endpoints(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoints", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesHostPathArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 type: Optional[pulumi.Input[str]] = None):
        """
        HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
        :param pulumi.Input[str] path: Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        :param pulumi.Input[str] type: Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        """
        pulumi.set(__self__, "path", path)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesIscsiArgs:
    def __init__(__self__, *,
                 iqn: pulumi.Input[str],
                 lun: pulumi.Input[int],
                 target_portal: pulumi.Input[str],
                 chap_auth_discovery: Optional[pulumi.Input[bool]] = None,
                 chap_auth_session: Optional[pulumi.Input[bool]] = None,
                 fs_type: Optional[pulumi.Input[str]] = None,
                 initiator_name: Optional[pulumi.Input[str]] = None,
                 iscsi_interface: Optional[pulumi.Input[str]] = None,
                 portals: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 secret_ref: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesIscsiSecretRefArgs']] = None):
        """
        ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
        :param pulumi.Input[str] iqn: Target iSCSI Qualified Name.
        :param pulumi.Input[int] lun: iSCSI Target Lun number.
        :param pulumi.Input[str] target_portal: iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
        :param pulumi.Input[bool] chap_auth_discovery: whether support iSCSI Discovery CHAP authentication
        :param pulumi.Input[bool] chap_auth_session: whether support iSCSI Session CHAP authentication
        :param pulumi.Input[str] fs_type: Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
        :param pulumi.Input[str] initiator_name: Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
        :param pulumi.Input[str] iscsi_interface: iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] portals: iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
        :param pulumi.Input[bool] read_only: ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesIscsiSecretRefArgs'] secret_ref: CHAP Secret for iSCSI target and initiator authentication
        """
        pulumi.set(__self__, "iqn", iqn)
        pulumi.set(__self__, "lun", lun)
        pulumi.set(__self__, "target_portal", target_portal)
        if chap_auth_discovery is not None:
            pulumi.set(__self__, "chap_auth_discovery", chap_auth_discovery)
        if chap_auth_session is not None:
            pulumi.set(__self__, "chap_auth_session", chap_auth_session)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if initiator_name is not None:
            pulumi.set(__self__, "initiator_name", initiator_name)
        if iscsi_interface is not None:
            pulumi.set(__self__, "iscsi_interface", iscsi_interface)
        if portals is not None:
            pulumi.set(__self__, "portals", portals)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter
    def iqn(self) -> pulumi.Input[str]:
        """
        Target iSCSI Qualified Name.
        """
        return pulumi.get(self, "iqn")

    @iqn.setter
    def iqn(self, value: pulumi.Input[str]):
        pulumi.set(self, "iqn", value)

    @property
    @pulumi.getter
    def lun(self) -> pulumi.Input[int]:
        """
        iSCSI Target Lun number.
        """
        return pulumi.get(self, "lun")

    @lun.setter
    def lun(self, value: pulumi.Input[int]):
        pulumi.set(self, "lun", value)

    @property
    @pulumi.getter(name="targetPortal")
    def target_portal(self) -> pulumi.Input[str]:
        """
        iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
        """
        return pulumi.get(self, "target_portal")

    @target_portal.setter
    def target_portal(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_portal", value)

    @property
    @pulumi.getter(name="chapAuthDiscovery")
    def chap_auth_discovery(self) -> Optional[pulumi.Input[bool]]:
        """
        whether support iSCSI Discovery CHAP authentication
        """
        return pulumi.get(self, "chap_auth_discovery")

    @chap_auth_discovery.setter
    def chap_auth_discovery(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "chap_auth_discovery", value)

    @property
    @pulumi.getter(name="chapAuthSession")
    def chap_auth_session(self) -> Optional[pulumi.Input[bool]]:
        """
        whether support iSCSI Session CHAP authentication
        """
        return pulumi.get(self, "chap_auth_session")

    @chap_auth_session.setter
    def chap_auth_session(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "chap_auth_session", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter(name="initiatorName")
    def initiator_name(self) -> Optional[pulumi.Input[str]]:
        """
        Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
        """
        return pulumi.get(self, "initiator_name")

    @initiator_name.setter
    def initiator_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "initiator_name", value)

    @property
    @pulumi.getter(name="iscsiInterface")
    def iscsi_interface(self) -> Optional[pulumi.Input[str]]:
        """
        iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
        """
        return pulumi.get(self, "iscsi_interface")

    @iscsi_interface.setter
    def iscsi_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iscsi_interface", value)

    @property
    @pulumi.getter
    def portals(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
        """
        return pulumi.get(self, "portals")

    @portals.setter
    def portals(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "portals", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesIscsiSecretRefArgs']]:
        """
        CHAP Secret for iSCSI target and initiator authentication
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesIscsiSecretRefArgs']]):
        pulumi.set(self, "secret_ref", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesIscsiSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        CHAP Secret for iSCSI target and initiator authentication
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesNfsArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 server: pulumi.Input[str],
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        :param pulumi.Input[str] path: Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        :param pulumi.Input[str] server: Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        :param pulumi.Input[bool] read_only: ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "server", server)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def server(self) -> pulumi.Input[str]:
        """
        Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input[str]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesPersistentVolumeClaimArgs:
    def __init__(__self__, *,
                 claim_name: pulumi.Input[str],
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        :param pulumi.Input[str] claim_name: ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        :param pulumi.Input[bool] read_only: Will force the ReadOnly setting in VolumeMounts. Default false.
        """
        pulumi.set(__self__, "claim_name", claim_name)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="claimName")
    def claim_name(self) -> pulumi.Input[str]:
        """
        ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        """
        return pulumi.get(self, "claim_name")

    @claim_name.setter
    def claim_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "claim_name", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Will force the ReadOnly setting in VolumeMounts. Default false.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesPhotonPersistentDiskArgs:
    def __init__(__self__, *,
                 pd_id: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None):
        """
        PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
        :param pulumi.Input[str] pd_id: ID that identifies Photon Controller persistent disk
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        pulumi.set(__self__, "pd_id", pd_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)

    @property
    @pulumi.getter(name="pdID")
    def pd_id(self) -> pulumi.Input[str]:
        """
        ID that identifies Photon Controller persistent disk
        """
        return pulumi.get(self, "pd_id")

    @pd_id.setter
    def pd_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "pd_id", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesPortworxVolumeArgs:
    def __init__(__self__, *,
                 volume_id: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
        :param pulumi.Input[str] volume_id: VolumeID uniquely identifies a Portworx volume
        :param pulumi.Input[str] fs_type: FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
        :param pulumi.Input[bool] read_only: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        pulumi.set(__self__, "volume_id", volume_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="volumeID")
    def volume_id(self) -> pulumi.Input[str]:
        """
        VolumeID uniquely identifies a Portworx volume
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "volume_id", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesProjectedArgs:
    def __init__(__self__, *,
                 sources: pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesArgs']]],
                 default_mode: Optional[pulumi.Input[int]] = None):
        """
        Items for all in one resources secrets, configmaps, and downward API
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesArgs']]] sources: list of volume projections
        :param pulumi.Input[int] default_mode: Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        pulumi.set(__self__, "sources", sources)
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesArgs']]]:
        """
        list of volume projections
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesArgs']]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[int]]:
        """
        Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_mode", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesProjectedSourcesArgs:
    def __init__(__self__, *,
                 config_map: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesConfigMapArgs']] = None,
                 downward_api: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesDownwardAPIArgs']] = None,
                 secret: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesSecretArgs']] = None,
                 service_account_token: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesServiceAccountTokenArgs']] = None):
        """
        Projection that may be projected along with other supported volume types
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesConfigMapArgs'] config_map: information about the configMap data to project
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesDownwardAPIArgs'] downward_api: information about the downwardAPI data to project
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesSecretArgs'] secret: information about the secret data to project
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesServiceAccountTokenArgs'] service_account_token: information about the serviceAccountToken data to project
        """
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if downward_api is not None:
            pulumi.set(__self__, "downward_api", downward_api)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if service_account_token is not None:
            pulumi.set(__self__, "service_account_token", service_account_token)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesConfigMapArgs']]:
        """
        information about the configMap data to project
        """
        return pulumi.get(self, "config_map")

    @config_map.setter
    def config_map(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesConfigMapArgs']]):
        pulumi.set(self, "config_map", value)

    @property
    @pulumi.getter(name="downwardAPI")
    def downward_api(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesDownwardAPIArgs']]:
        """
        information about the downwardAPI data to project
        """
        return pulumi.get(self, "downward_api")

    @downward_api.setter
    def downward_api(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesDownwardAPIArgs']]):
        pulumi.set(self, "downward_api", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesSecretArgs']]:
        """
        information about the secret data to project
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesSecretArgs']]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter(name="serviceAccountToken")
    def service_account_token(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesServiceAccountTokenArgs']]:
        """
        information about the serviceAccountToken data to project
        """
        return pulumi.get(self, "service_account_token")

    @service_account_token.setter
    def service_account_token(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesServiceAccountTokenArgs']]):
        pulumi.set(self, "service_account_token", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesProjectedSourcesConfigMapArgs:
    def __init__(__self__, *,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesConfigMapItemsArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        information about the configMap data to project
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesConfigMapItemsArgs']]] items: If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the ConfigMap or its keys must be defined
        """
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesConfigMapItemsArgs']]]]:
        """
        If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesConfigMapItemsArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the ConfigMap or its keys must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesProjectedSourcesConfigMapItemsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 path: pulumi.Input[str],
                 mode: Optional[pulumi.Input[int]] = None):
        """
        Maps a string key to a path within a volume.
        :param pulumi.Input[str] key: The key to project.
        :param pulumi.Input[str] path: The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        :param pulumi.Input[int] mode: Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key to project.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesProjectedSourcesDownwardAPIArgs:
    def __init__(__self__, *,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesDownwardAPIItemsArgs']]]] = None):
        """
        information about the downwardAPI data to project
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesDownwardAPIItemsArgs']]] items: Items is a list of DownwardAPIVolume file
        """
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesDownwardAPIItemsArgs']]]]:
        """
        Items is a list of DownwardAPIVolume file
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesDownwardAPIItemsArgs']]]]):
        pulumi.set(self, "items", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesProjectedSourcesDownwardAPIItemsArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 field_ref: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs']] = None,
                 mode: Optional[pulumi.Input[int]] = None,
                 resource_field_ref: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs']] = None):
        """
        DownwardAPIVolumeFile represents information to create the file containing the pod field
        :param pulumi.Input[str] path: Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs'] field_ref: Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
        :param pulumi.Input[int] mode: Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs'] resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        """
        pulumi.set(__self__, "path", path)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs']]:
        """
        Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
        """
        return pulumi.get(self, "field_ref")

    @field_ref.setter
    def field_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs']]):
        pulumi.set(self, "field_ref", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs']]:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    @resource_field_ref.setter
    def resource_field_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs']]):
        pulumi.set(self, "resource_field_ref", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs:
    def __init__(__self__, *,
                 field_path: pulumi.Input[str],
                 api_version: Optional[pulumi.Input[str]] = None):
        """
        Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
        :param pulumi.Input[str] field_path: Path of the field to select in the specified API version.
        :param pulumi.Input[str] api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> pulumi.Input[str]:
        """
        Path of the field to select in the specified API version.
        """
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_path", value)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 container_name: Optional[pulumi.Input[str]] = None,
                 divisor: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisorArgs']] = None):
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        :param pulumi.Input[str] resource: Required: resource to select
        :param pulumi.Input[str] container_name: Container name: required for volumes, optional for env vars
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisorArgs'] divisor: Specifies the output format of the exposed resources, defaults to "1"
        """
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        """
        Required: resource to select
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Container name: required for volumes, optional for env vars
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter
    def divisor(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisorArgs']]:
        """
        Specifies the output format of the exposed resources, defaults to "1"
        """
        return pulumi.get(self, "divisor")

    @divisor.setter
    def divisor(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisorArgs']]):
        pulumi.set(self, "divisor", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisorArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesProjectedSourcesSecretArgs:
    def __init__(__self__, *,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesSecretItemsArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        information about the secret data to project
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesSecretItemsArgs']]] items: If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the Secret or its key must be defined
        """
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesSecretItemsArgs']]]]:
        """
        If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigVolumesProjectedSourcesSecretItemsArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the Secret or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesProjectedSourcesSecretItemsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 path: pulumi.Input[str],
                 mode: Optional[pulumi.Input[int]] = None):
        """
        Maps a string key to a path within a volume.
        :param pulumi.Input[str] key: The key to project.
        :param pulumi.Input[str] path: The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        :param pulumi.Input[int] mode: Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key to project.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesProjectedSourcesServiceAccountTokenArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 audience: Optional[pulumi.Input[str]] = None,
                 expiration_seconds: Optional[pulumi.Input[int]] = None):
        """
        information about the serviceAccountToken data to project
        :param pulumi.Input[str] path: Path is the path relative to the mount point of the file to project the token into.
        :param pulumi.Input[str] audience: Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
        :param pulumi.Input[int] expiration_seconds: ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
        """
        pulumi.set(__self__, "path", path)
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if expiration_seconds is not None:
            pulumi.set(__self__, "expiration_seconds", expiration_seconds)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Path is the path relative to the mount point of the file to project the token into.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def audience(self) -> Optional[pulumi.Input[str]]:
        """
        Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
        """
        return pulumi.get(self, "audience")

    @audience.setter
    def audience(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audience", value)

    @property
    @pulumi.getter(name="expirationSeconds")
    def expiration_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
        """
        return pulumi.get(self, "expiration_seconds")

    @expiration_seconds.setter
    def expiration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "expiration_seconds", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesQuobyteArgs:
    def __init__(__self__, *,
                 registry: pulumi.Input[str],
                 volume: pulumi.Input[str],
                 group: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 tenant: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
        :param pulumi.Input[str] registry: Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
        :param pulumi.Input[str] volume: Volume is a string that references an already created Quobyte volume by name.
        :param pulumi.Input[str] group: Group to map volume access to Default is no group
        :param pulumi.Input[bool] read_only: ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
        :param pulumi.Input[str] tenant: Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
        :param pulumi.Input[str] user: User to map volume access to Defaults to serivceaccount user
        """
        pulumi.set(__self__, "registry", registry)
        pulumi.set(__self__, "volume", volume)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if tenant is not None:
            pulumi.set(__self__, "tenant", tenant)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def registry(self) -> pulumi.Input[str]:
        """
        Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
        """
        return pulumi.get(self, "registry")

    @registry.setter
    def registry(self, value: pulumi.Input[str]):
        pulumi.set(self, "registry", value)

    @property
    @pulumi.getter
    def volume(self) -> pulumi.Input[str]:
        """
        Volume is a string that references an already created Quobyte volume by name.
        """
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: pulumi.Input[str]):
        pulumi.set(self, "volume", value)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        """
        Group to map volume access to Default is no group
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter
    def tenant(self) -> Optional[pulumi.Input[str]]:
        """
        Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
        """
        return pulumi.get(self, "tenant")

    @tenant.setter
    def tenant(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        User to map volume access to Defaults to serivceaccount user
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesRbdArgs:
    def __init__(__self__, *,
                 image: pulumi.Input[str],
                 monitors: pulumi.Input[Sequence[pulumi.Input[str]]],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 keyring: Optional[pulumi.Input[str]] = None,
                 pool: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 secret_ref: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesRbdSecretRefArgs']] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
        :param pulumi.Input[str] image: The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input[Sequence[pulumi.Input[str]]] monitors: A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input[str] fs_type: Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
        :param pulumi.Input[str] keyring: Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input[str] pool: The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input[bool] read_only: ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesRbdSecretRefArgs'] secret_ref: SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input[str] user: The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "monitors", monitors)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if keyring is not None:
            pulumi.set(__self__, "keyring", keyring)
        if pool is not None:
            pulumi.set(__self__, "pool", pool)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input[str]:
        """
        The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[str]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def monitors(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        return pulumi.get(self, "monitors")

    @monitors.setter
    def monitors(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "monitors", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter
    def keyring(self) -> Optional[pulumi.Input[str]]:
        """
        Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        return pulumi.get(self, "keyring")

    @keyring.setter
    def keyring(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keyring", value)

    @property
    @pulumi.getter
    def pool(self) -> Optional[pulumi.Input[str]]:
        """
        The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        return pulumi.get(self, "pool")

    @pool.setter
    def pool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pool", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesRbdSecretRefArgs']]:
        """
        SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesRbdSecretRefArgs']]):
        pulumi.set(self, "secret_ref", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesRbdSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesScaleIOArgs:
    def __init__(__self__, *,
                 gateway: pulumi.Input[str],
                 secret_ref: pulumi.Input['DatadogAgentSpecAgentConfigVolumesScaleIOSecretRefArgs'],
                 system: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 protection_domain: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 ssl_enabled: Optional[pulumi.Input[bool]] = None,
                 storage_mode: Optional[pulumi.Input[str]] = None,
                 storage_pool: Optional[pulumi.Input[str]] = None,
                 volume_name: Optional[pulumi.Input[str]] = None):
        """
        ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
        :param pulumi.Input[str] gateway: The host address of the ScaleIO API Gateway.
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesScaleIOSecretRefArgs'] secret_ref: SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
        :param pulumi.Input[str] system: The name of the storage system as configured in ScaleIO.
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
        :param pulumi.Input[str] protection_domain: The name of the ScaleIO Protection Domain for the configured storage.
        :param pulumi.Input[bool] read_only: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        :param pulumi.Input[bool] ssl_enabled: Flag to enable/disable SSL communication with Gateway, default false
        :param pulumi.Input[str] storage_mode: Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
        :param pulumi.Input[str] storage_pool: The ScaleIO Storage Pool associated with the protection domain.
        :param pulumi.Input[str] volume_name: The name of a volume already created in the ScaleIO system that is associated with this volume source.
        """
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "secret_ref", secret_ref)
        pulumi.set(__self__, "system", system)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if protection_domain is not None:
            pulumi.set(__self__, "protection_domain", protection_domain)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if ssl_enabled is not None:
            pulumi.set(__self__, "ssl_enabled", ssl_enabled)
        if storage_mode is not None:
            pulumi.set(__self__, "storage_mode", storage_mode)
        if storage_pool is not None:
            pulumi.set(__self__, "storage_pool", storage_pool)
        if volume_name is not None:
            pulumi.set(__self__, "volume_name", volume_name)

    @property
    @pulumi.getter
    def gateway(self) -> pulumi.Input[str]:
        """
        The host address of the ScaleIO API Gateway.
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: pulumi.Input[str]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> pulumi.Input['DatadogAgentSpecAgentConfigVolumesScaleIOSecretRefArgs']:
        """
        SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: pulumi.Input['DatadogAgentSpecAgentConfigVolumesScaleIOSecretRefArgs']):
        pulumi.set(self, "secret_ref", value)

    @property
    @pulumi.getter
    def system(self) -> pulumi.Input[str]:
        """
        The name of the storage system as configured in ScaleIO.
        """
        return pulumi.get(self, "system")

    @system.setter
    def system(self, value: pulumi.Input[str]):
        pulumi.set(self, "system", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter(name="protectionDomain")
    def protection_domain(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the ScaleIO Protection Domain for the configured storage.
        """
        return pulumi.get(self, "protection_domain")

    @protection_domain.setter
    def protection_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protection_domain", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="sslEnabled")
    def ssl_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to enable/disable SSL communication with Gateway, default false
        """
        return pulumi.get(self, "ssl_enabled")

    @ssl_enabled.setter
    def ssl_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl_enabled", value)

    @property
    @pulumi.getter(name="storageMode")
    def storage_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
        """
        return pulumi.get(self, "storage_mode")

    @storage_mode.setter
    def storage_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_mode", value)

    @property
    @pulumi.getter(name="storagePool")
    def storage_pool(self) -> Optional[pulumi.Input[str]]:
        """
        The ScaleIO Storage Pool associated with the protection domain.
        """
        return pulumi.get(self, "storage_pool")

    @storage_pool.setter
    def storage_pool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_pool", value)

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of a volume already created in the ScaleIO system that is associated with this volume source.
        """
        return pulumi.get(self, "volume_name")

    @volume_name.setter
    def volume_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_name", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesScaleIOSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesSecretArgs:
    def __init__(__self__, *,
                 default_mode: Optional[pulumi.Input[int]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigVolumesSecretItemsArgs']]]] = None,
                 optional: Optional[pulumi.Input[bool]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None):
        """
        Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
        :param pulumi.Input[int] default_mode: Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigVolumesSecretItemsArgs']]] items: If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        :param pulumi.Input[bool] optional: Specify whether the Secret or its keys must be defined
        :param pulumi.Input[str] secret_name: Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
        """
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[int]]:
        """
        Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_mode", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigVolumesSecretItemsArgs']]]]:
        """
        If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentConfigVolumesSecretItemsArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the Secret or its keys must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesSecretItemsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 path: pulumi.Input[str],
                 mode: Optional[pulumi.Input[int]] = None):
        """
        Maps a string key to a path within a volume.
        :param pulumi.Input[str] key: The key to project.
        :param pulumi.Input[str] path: The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        :param pulumi.Input[int] mode: Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key to project.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesStorageosArgs:
    def __init__(__self__, *,
                 fs_type: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 secret_ref: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesStorageosSecretRefArgs']] = None,
                 volume_name: Optional[pulumi.Input[str]] = None,
                 volume_namespace: Optional[pulumi.Input[str]] = None):
        """
        StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        :param pulumi.Input[bool] read_only: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        :param pulumi.Input['DatadogAgentSpecAgentConfigVolumesStorageosSecretRefArgs'] secret_ref: SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
        :param pulumi.Input[str] volume_name: VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
        :param pulumi.Input[str] volume_namespace: VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
        """
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if volume_name is not None:
            pulumi.set(__self__, "volume_name", volume_name)
        if volume_namespace is not None:
            pulumi.set(__self__, "volume_namespace", volume_namespace)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesStorageosSecretRefArgs']]:
        """
        SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentConfigVolumesStorageosSecretRefArgs']]):
        pulumi.set(self, "secret_ref", value)

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[pulumi.Input[str]]:
        """
        VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
        """
        return pulumi.get(self, "volume_name")

    @volume_name.setter
    def volume_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_name", value)

    @property
    @pulumi.getter(name="volumeNamespace")
    def volume_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
        """
        return pulumi.get(self, "volume_namespace")

    @volume_namespace.setter
    def volume_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_namespace", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesStorageosSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DatadogAgentSpecAgentConfigVolumesVsphereVolumeArgs:
    def __init__(__self__, *,
                 volume_path: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 storage_policy_id: Optional[pulumi.Input[str]] = None,
                 storage_policy_name: Optional[pulumi.Input[str]] = None):
        """
        VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
        :param pulumi.Input[str] volume_path: Path that identifies vSphere volume vmdk
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        :param pulumi.Input[str] storage_policy_id: Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
        :param pulumi.Input[str] storage_policy_name: Storage Policy Based Management (SPBM) profile name.
        """
        pulumi.set(__self__, "volume_path", volume_path)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if storage_policy_id is not None:
            pulumi.set(__self__, "storage_policy_id", storage_policy_id)
        if storage_policy_name is not None:
            pulumi.set(__self__, "storage_policy_name", storage_policy_name)

    @property
    @pulumi.getter(name="volumePath")
    def volume_path(self) -> pulumi.Input[str]:
        """
        Path that identifies vSphere volume vmdk
        """
        return pulumi.get(self, "volume_path")

    @volume_path.setter
    def volume_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "volume_path", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter(name="storagePolicyID")
    def storage_policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
        """
        return pulumi.get(self, "storage_policy_id")

    @storage_policy_id.setter
    def storage_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_policy_id", value)

    @property
    @pulumi.getter(name="storagePolicyName")
    def storage_policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        Storage Policy Based Management (SPBM) profile name.
        """
        return pulumi.get(self, "storage_policy_name")

    @storage_policy_name.setter
    def storage_policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_policy_name", value)


@pulumi.input_type
class DatadogAgentSpecAgentCustomConfigArgs:
    def __init__(__self__, *,
                 config_data: Optional[pulumi.Input[str]] = None,
                 config_map: Optional[pulumi.Input['DatadogAgentSpecAgentCustomConfigConfigMapArgs']] = None):
        """
        Allow to put custom configuration for the agent, corresponding to the datadog.yaml config file See https://docs.datadoghq.com/agent/guide/agent-configuration-files/?tab=agentv6 for more details.
        :param pulumi.Input[str] config_data: ConfigData corresponds to the configuration file content
        :param pulumi.Input['DatadogAgentSpecAgentCustomConfigConfigMapArgs'] config_map: ConfigMap name of a ConfigMap used to mount the configuration file
        """
        if config_data is not None:
            pulumi.set(__self__, "config_data", config_data)
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)

    @property
    @pulumi.getter(name="configData")
    def config_data(self) -> Optional[pulumi.Input[str]]:
        """
        ConfigData corresponds to the configuration file content
        """
        return pulumi.get(self, "config_data")

    @config_data.setter
    def config_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_data", value)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentCustomConfigConfigMapArgs']]:
        """
        ConfigMap name of a ConfigMap used to mount the configuration file
        """
        return pulumi.get(self, "config_map")

    @config_map.setter
    def config_map(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentCustomConfigConfigMapArgs']]):
        pulumi.set(self, "config_map", value)


@pulumi.input_type
class DatadogAgentSpecAgentCustomConfigConfigMapArgs:
    def __init__(__self__, *,
                 file_key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        ConfigMap name of a ConfigMap used to mount the configuration file
        :param pulumi.Input[str] file_key: FileKey corresponds to the key used in the ConfigMap.Data to store the configuration file content
        :param pulumi.Input[str] name: Name the ConfigMap name
        """
        if file_key is not None:
            pulumi.set(__self__, "file_key", file_key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="fileKey")
    def file_key(self) -> Optional[pulumi.Input[str]]:
        """
        FileKey corresponds to the key used in the ConfigMap.Data to store the configuration file content
        """
        return pulumi.get(self, "file_key")

    @file_key.setter
    def file_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name the ConfigMap name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DatadogAgentSpecAgentDeploymentStrategyArgs:
    def __init__(__self__, *,
                 canary: Optional[pulumi.Input['DatadogAgentSpecAgentDeploymentStrategyCanaryArgs']] = None,
                 reconcile_frequency: Optional[pulumi.Input[str]] = None,
                 rolling_update: Optional[pulumi.Input['DatadogAgentSpecAgentDeploymentStrategyRollingUpdateArgs']] = None,
                 update_strategy_type: Optional[pulumi.Input[str]] = None):
        """
        Update strategy configuration for the DaemonSet
        :param pulumi.Input['DatadogAgentSpecAgentDeploymentStrategyCanaryArgs'] canary: Configure the canary deployment configuration using ExtendedDaemonSet
        :param pulumi.Input[str] reconcile_frequency: The reconcile frequency of the ExtendDaemonSet
        :param pulumi.Input['DatadogAgentSpecAgentDeploymentStrategyRollingUpdateArgs'] rolling_update: Configure the rolling updater strategy of the DaemonSet or the ExtendedDaemonSet
        :param pulumi.Input[str] update_strategy_type: The update strategy used for the DaemonSet
        """
        if canary is not None:
            pulumi.set(__self__, "canary", canary)
        if reconcile_frequency is not None:
            pulumi.set(__self__, "reconcile_frequency", reconcile_frequency)
        if rolling_update is not None:
            pulumi.set(__self__, "rolling_update", rolling_update)
        if update_strategy_type is not None:
            pulumi.set(__self__, "update_strategy_type", update_strategy_type)

    @property
    @pulumi.getter
    def canary(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentDeploymentStrategyCanaryArgs']]:
        """
        Configure the canary deployment configuration using ExtendedDaemonSet
        """
        return pulumi.get(self, "canary")

    @canary.setter
    def canary(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentDeploymentStrategyCanaryArgs']]):
        pulumi.set(self, "canary", value)

    @property
    @pulumi.getter(name="reconcileFrequency")
    def reconcile_frequency(self) -> Optional[pulumi.Input[str]]:
        """
        The reconcile frequency of the ExtendDaemonSet
        """
        return pulumi.get(self, "reconcile_frequency")

    @reconcile_frequency.setter
    def reconcile_frequency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reconcile_frequency", value)

    @property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentDeploymentStrategyRollingUpdateArgs']]:
        """
        Configure the rolling updater strategy of the DaemonSet or the ExtendedDaemonSet
        """
        return pulumi.get(self, "rolling_update")

    @rolling_update.setter
    def rolling_update(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentDeploymentStrategyRollingUpdateArgs']]):
        pulumi.set(self, "rolling_update", value)

    @property
    @pulumi.getter(name="updateStrategyType")
    def update_strategy_type(self) -> Optional[pulumi.Input[str]]:
        """
        The update strategy used for the DaemonSet
        """
        return pulumi.get(self, "update_strategy_type")

    @update_strategy_type.setter
    def update_strategy_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_strategy_type", value)


@pulumi.input_type
class DatadogAgentSpecAgentDeploymentStrategyCanaryArgs:
    def __init__(__self__, *,
                 duration: Optional[pulumi.Input[str]] = None,
                 paused: Optional[pulumi.Input[bool]] = None,
                 replicas: Optional[pulumi.Input['DatadogAgentSpecAgentDeploymentStrategyCanaryReplicasArgs']] = None):
        """
        Configure the canary deployment configuration using ExtendedDaemonSet
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if paused is not None:
            pulumi.set(__self__, "paused", paused)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def paused(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "paused")

    @paused.setter
    def paused(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "paused", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentDeploymentStrategyCanaryReplicasArgs']]:
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentDeploymentStrategyCanaryReplicasArgs']]):
        pulumi.set(self, "replicas", value)


@pulumi.input_type
class DatadogAgentSpecAgentDeploymentStrategyCanaryReplicasArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class DatadogAgentSpecAgentDeploymentStrategyRollingUpdateArgs:
    def __init__(__self__, *,
                 max_parallel_pod_creation: Optional[pulumi.Input[int]] = None,
                 max_pod_scheduler_failure: Optional[pulumi.Input['DatadogAgentSpecAgentDeploymentStrategyRollingUpdateMaxPodSchedulerFailureArgs']] = None,
                 max_unavailable: Optional[pulumi.Input['DatadogAgentSpecAgentDeploymentStrategyRollingUpdateMaxUnavailableArgs']] = None,
                 slow_start_additive_increase: Optional[pulumi.Input['DatadogAgentSpecAgentDeploymentStrategyRollingUpdateSlowStartAdditiveIncreaseArgs']] = None,
                 slow_start_interval_duration: Optional[pulumi.Input[str]] = None):
        """
        Configure the rolling updater strategy of the DaemonSet or the ExtendedDaemonSet
        :param pulumi.Input[int] max_parallel_pod_creation: The maxium number of pods created in parallel. Default value is 250.
        :param pulumi.Input['DatadogAgentSpecAgentDeploymentStrategyRollingUpdateMaxPodSchedulerFailureArgs'] max_pod_scheduler_failure: MaxPodSchedulerFailure the maxinum number of not scheduled on its Node due to a scheduler failure: resource constraints. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute
        :param pulumi.Input['DatadogAgentSpecAgentDeploymentStrategyRollingUpdateMaxUnavailableArgs'] max_unavailable: The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0. Default value is 1.
        :param pulumi.Input['DatadogAgentSpecAgentDeploymentStrategyRollingUpdateSlowStartAdditiveIncreaseArgs'] slow_start_additive_increase: SlowStartAdditiveIncrease Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Default value is 5.
        :param pulumi.Input[str] slow_start_interval_duration: SlowStartIntervalDuration the duration between to 2 Default value is 1min.
        """
        if max_parallel_pod_creation is not None:
            pulumi.set(__self__, "max_parallel_pod_creation", max_parallel_pod_creation)
        if max_pod_scheduler_failure is not None:
            pulumi.set(__self__, "max_pod_scheduler_failure", max_pod_scheduler_failure)
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)
        if slow_start_additive_increase is not None:
            pulumi.set(__self__, "slow_start_additive_increase", slow_start_additive_increase)
        if slow_start_interval_duration is not None:
            pulumi.set(__self__, "slow_start_interval_duration", slow_start_interval_duration)

    @property
    @pulumi.getter(name="maxParallelPodCreation")
    def max_parallel_pod_creation(self) -> Optional[pulumi.Input[int]]:
        """
        The maxium number of pods created in parallel. Default value is 250.
        """
        return pulumi.get(self, "max_parallel_pod_creation")

    @max_parallel_pod_creation.setter
    def max_parallel_pod_creation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_parallel_pod_creation", value)

    @property
    @pulumi.getter(name="maxPodSchedulerFailure")
    def max_pod_scheduler_failure(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentDeploymentStrategyRollingUpdateMaxPodSchedulerFailureArgs']]:
        """
        MaxPodSchedulerFailure the maxinum number of not scheduled on its Node due to a scheduler failure: resource constraints. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute
        """
        return pulumi.get(self, "max_pod_scheduler_failure")

    @max_pod_scheduler_failure.setter
    def max_pod_scheduler_failure(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentDeploymentStrategyRollingUpdateMaxPodSchedulerFailureArgs']]):
        pulumi.set(self, "max_pod_scheduler_failure", value)

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentDeploymentStrategyRollingUpdateMaxUnavailableArgs']]:
        """
        The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0. Default value is 1.
        """
        return pulumi.get(self, "max_unavailable")

    @max_unavailable.setter
    def max_unavailable(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentDeploymentStrategyRollingUpdateMaxUnavailableArgs']]):
        pulumi.set(self, "max_unavailable", value)

    @property
    @pulumi.getter(name="slowStartAdditiveIncrease")
    def slow_start_additive_increase(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentDeploymentStrategyRollingUpdateSlowStartAdditiveIncreaseArgs']]:
        """
        SlowStartAdditiveIncrease Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Default value is 5.
        """
        return pulumi.get(self, "slow_start_additive_increase")

    @slow_start_additive_increase.setter
    def slow_start_additive_increase(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentDeploymentStrategyRollingUpdateSlowStartAdditiveIncreaseArgs']]):
        pulumi.set(self, "slow_start_additive_increase", value)

    @property
    @pulumi.getter(name="slowStartIntervalDuration")
    def slow_start_interval_duration(self) -> Optional[pulumi.Input[str]]:
        """
        SlowStartIntervalDuration the duration between to 2 Default value is 1min.
        """
        return pulumi.get(self, "slow_start_interval_duration")

    @slow_start_interval_duration.setter
    def slow_start_interval_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slow_start_interval_duration", value)


@pulumi.input_type
class DatadogAgentSpecAgentDeploymentStrategyRollingUpdateMaxPodSchedulerFailureArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class DatadogAgentSpecAgentDeploymentStrategyRollingUpdateMaxUnavailableArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class DatadogAgentSpecAgentDeploymentStrategyRollingUpdateSlowStartAdditiveIncreaseArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class DatadogAgentSpecAgentDnsConfigArgs:
    def __init__(__self__, *,
                 nameservers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 options: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentDnsConfigOptionsArgs']]]] = None,
                 searches: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] nameservers: A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentDnsConfigOptionsArgs']]] options: A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] searches: A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
        """
        if nameservers is not None:
            pulumi.set(__self__, "nameservers", nameservers)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if searches is not None:
            pulumi.set(__self__, "searches", searches)

    @property
    @pulumi.getter
    def nameservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
        """
        return pulumi.get(self, "nameservers")

    @nameservers.setter
    def nameservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "nameservers", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentDnsConfigOptionsArgs']]]]:
        """
        A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentDnsConfigOptionsArgs']]]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def searches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
        """
        return pulumi.get(self, "searches")

    @searches.setter
    def searches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "searches", value)


@pulumi.input_type
class DatadogAgentSpecAgentDnsConfigOptionsArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        PodDNSConfigOption defines DNS resolver options of a pod.
        :param pulumi.Input[str] name: Required.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Required.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DatadogAgentSpecAgentEnvArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None,
                 value_from: Optional[pulumi.Input['DatadogAgentSpecAgentEnvValueFromArgs']] = None):
        """
        EnvVar represents an environment variable present in a Container.
        :param pulumi.Input[str] name: Name of the environment variable. Must be a C_IDENTIFIER.
        :param pulumi.Input[str] value: Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        :param pulumi.Input['DatadogAgentSpecAgentEnvValueFromArgs'] value_from: Source for the environment variable's value. Cannot be used if value is not empty.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the environment variable. Must be a C_IDENTIFIER.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentEnvValueFromArgs']]:
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        """
        return pulumi.get(self, "value_from")

    @value_from.setter
    def value_from(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentEnvValueFromArgs']]):
        pulumi.set(self, "value_from", value)


@pulumi.input_type
class DatadogAgentSpecAgentEnvValueFromArgs:
    def __init__(__self__, *,
                 config_map_key_ref: Optional[pulumi.Input['DatadogAgentSpecAgentEnvValueFromConfigMapKeyRefArgs']] = None,
                 field_ref: Optional[pulumi.Input['DatadogAgentSpecAgentEnvValueFromFieldRefArgs']] = None,
                 resource_field_ref: Optional[pulumi.Input['DatadogAgentSpecAgentEnvValueFromResourceFieldRefArgs']] = None,
                 secret_key_ref: Optional[pulumi.Input['DatadogAgentSpecAgentEnvValueFromSecretKeyRefArgs']] = None):
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        :param pulumi.Input['DatadogAgentSpecAgentEnvValueFromConfigMapKeyRefArgs'] config_map_key_ref: Selects a key of a ConfigMap.
        :param pulumi.Input['DatadogAgentSpecAgentEnvValueFromFieldRefArgs'] field_ref: Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param pulumi.Input['DatadogAgentSpecAgentEnvValueFromResourceFieldRefArgs'] resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param pulumi.Input['DatadogAgentSpecAgentEnvValueFromSecretKeyRefArgs'] secret_key_ref: Selects a key of a secret in the pod's namespace
        """
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentEnvValueFromConfigMapKeyRefArgs']]:
        """
        Selects a key of a ConfigMap.
        """
        return pulumi.get(self, "config_map_key_ref")

    @config_map_key_ref.setter
    def config_map_key_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentEnvValueFromConfigMapKeyRefArgs']]):
        pulumi.set(self, "config_map_key_ref", value)

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentEnvValueFromFieldRefArgs']]:
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        """
        return pulumi.get(self, "field_ref")

    @field_ref.setter
    def field_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentEnvValueFromFieldRefArgs']]):
        pulumi.set(self, "field_ref", value)

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentEnvValueFromResourceFieldRefArgs']]:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    @resource_field_ref.setter
    def resource_field_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentEnvValueFromResourceFieldRefArgs']]):
        pulumi.set(self, "resource_field_ref", value)

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentEnvValueFromSecretKeyRefArgs']]:
        """
        Selects a key of a secret in the pod's namespace
        """
        return pulumi.get(self, "secret_key_ref")

    @secret_key_ref.setter
    def secret_key_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentEnvValueFromSecretKeyRefArgs']]):
        pulumi.set(self, "secret_key_ref", value)


@pulumi.input_type
class DatadogAgentSpecAgentEnvValueFromConfigMapKeyRefArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        Selects a key of a ConfigMap.
        :param pulumi.Input[str] key: The key to select.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the ConfigMap or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key to select.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the ConfigMap or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class DatadogAgentSpecAgentEnvValueFromFieldRefArgs:
    def __init__(__self__, *,
                 field_path: pulumi.Input[str],
                 api_version: Optional[pulumi.Input[str]] = None):
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param pulumi.Input[str] field_path: Path of the field to select in the specified API version.
        :param pulumi.Input[str] api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> pulumi.Input[str]:
        """
        Path of the field to select in the specified API version.
        """
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_path", value)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)


@pulumi.input_type
class DatadogAgentSpecAgentEnvValueFromResourceFieldRefArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 container_name: Optional[pulumi.Input[str]] = None,
                 divisor: Optional[pulumi.Input['DatadogAgentSpecAgentEnvValueFromResourceFieldRefDivisorArgs']] = None):
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param pulumi.Input[str] resource: Required: resource to select
        :param pulumi.Input[str] container_name: Container name: required for volumes, optional for env vars
        :param pulumi.Input['DatadogAgentSpecAgentEnvValueFromResourceFieldRefDivisorArgs'] divisor: Specifies the output format of the exposed resources, defaults to "1"
        """
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        """
        Required: resource to select
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Container name: required for volumes, optional for env vars
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter
    def divisor(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentEnvValueFromResourceFieldRefDivisorArgs']]:
        """
        Specifies the output format of the exposed resources, defaults to "1"
        """
        return pulumi.get(self, "divisor")

    @divisor.setter
    def divisor(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentEnvValueFromResourceFieldRefDivisorArgs']]):
        pulumi.set(self, "divisor", value)


@pulumi.input_type
class DatadogAgentSpecAgentEnvValueFromResourceFieldRefDivisorArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class DatadogAgentSpecAgentEnvValueFromSecretKeyRefArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        Selects a key of a secret in the pod's namespace
        :param pulumi.Input[str] key: The key of the secret to select from.  Must be a valid secret key.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the Secret or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key of the secret to select from.  Must be a valid secret key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the Secret or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class DatadogAgentSpecAgentImageArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 pull_secrets: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentImagePullSecretsArgs']]]] = None):
        """
        The container image of the Datadog Agent
        :param pulumi.Input[str] name: Define the image to use Use "datadog/agent:latest" for Datadog Agent 6 Use "datadog/dogstatsd:latest" for Standalone Datadog Agent DogStatsD6 Use "datadog/cluster-agent:latest" for Datadog Cluster Agent
        :param pulumi.Input[str] pull_policy: The Kubernetes pull policy Use Always, Never or IfNotPresent
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentImagePullSecretsArgs']]] pull_secrets: It is possible to specify docker registry credentials See https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
        """
        pulumi.set(__self__, "name", name)
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if pull_secrets is not None:
            pulumi.set(__self__, "pull_secrets", pull_secrets)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Define the image to use Use "datadog/agent:latest" for Datadog Agent 6 Use "datadog/dogstatsd:latest" for Standalone Datadog Agent DogStatsD6 Use "datadog/cluster-agent:latest" for Datadog Cluster Agent
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        The Kubernetes pull policy Use Always, Never or IfNotPresent
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter(name="pullSecrets")
    def pull_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentImagePullSecretsArgs']]]]:
        """
        It is possible to specify docker registry credentials See https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
        """
        return pulumi.get(self, "pull_secrets")

    @pull_secrets.setter
    def pull_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentImagePullSecretsArgs']]]]):
        pulumi.set(self, "pull_secrets", value)


@pulumi.input_type
class DatadogAgentSpecAgentImagePullSecretsArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DatadogAgentSpecAgentLogArgs:
    def __init__(__self__, *,
                 container_collect_using_files: Optional[pulumi.Input[bool]] = None,
                 container_logs_path: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 logs_config_container_collect_all: Optional[pulumi.Input[bool]] = None,
                 open_files_limit: Optional[pulumi.Input[int]] = None,
                 pod_logs_path: Optional[pulumi.Input[str]] = None,
                 temp_storage_path: Optional[pulumi.Input[str]] = None):
        """
        Log Agent configuration
        :param pulumi.Input[bool] container_collect_using_files: Collect logs from files in /var/log/pods instead of using container runtime API. It's usually the most efficient way of collecting logs. ref: https://docs.datadoghq.com/agent/basic_agent_usage/kubernetes/#log-collection-setup Default: true
        :param pulumi.Input[str] container_logs_path: This to allow log collection from container log path. Set to a different path if not using docker runtime. ref: https://docs.datadoghq.com/agent/kubernetes/daemonset_setup/?tab=k8sfile#create-manifest Default to `/var/lib/docker/containers`
        :param pulumi.Input[bool] enabled: Enables this to activate Datadog Agent log collection. ref: https://docs.datadoghq.com/agent/basic_agent_usage/kubernetes/#log-collection-setup
        :param pulumi.Input[bool] logs_config_container_collect_all: Enable this to allow log collection for all containers. ref: https://docs.datadoghq.com/agent/basic_agent_usage/kubernetes/#log-collection-setup
        :param pulumi.Input[int] open_files_limit: Set the maximum number of logs files that the Datadog Agent will tail up to. Increasing this limit can increase resource consumption of the Agent. ref: https://docs.datadoghq.com/agent/basic_agent_usage/kubernetes/#log-collection-setup Default to 100
        :param pulumi.Input[str] pod_logs_path: This to allow log collection from pod log path. Default to `/var/log/pods`
        :param pulumi.Input[str] temp_storage_path: This path (always mounted from the host) is used by Datadog Agent to store information about processed log files. If the Datadog Agent is restarted, it allows to start tailing the log files from the right offset Default to `/var/lib/datadog-agent/logs`
        """
        if container_collect_using_files is not None:
            pulumi.set(__self__, "container_collect_using_files", container_collect_using_files)
        if container_logs_path is not None:
            pulumi.set(__self__, "container_logs_path", container_logs_path)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if logs_config_container_collect_all is not None:
            pulumi.set(__self__, "logs_config_container_collect_all", logs_config_container_collect_all)
        if open_files_limit is not None:
            pulumi.set(__self__, "open_files_limit", open_files_limit)
        if pod_logs_path is not None:
            pulumi.set(__self__, "pod_logs_path", pod_logs_path)
        if temp_storage_path is not None:
            pulumi.set(__self__, "temp_storage_path", temp_storage_path)

    @property
    @pulumi.getter(name="containerCollectUsingFiles")
    def container_collect_using_files(self) -> Optional[pulumi.Input[bool]]:
        """
        Collect logs from files in /var/log/pods instead of using container runtime API. It's usually the most efficient way of collecting logs. ref: https://docs.datadoghq.com/agent/basic_agent_usage/kubernetes/#log-collection-setup Default: true
        """
        return pulumi.get(self, "container_collect_using_files")

    @container_collect_using_files.setter
    def container_collect_using_files(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "container_collect_using_files", value)

    @property
    @pulumi.getter(name="containerLogsPath")
    def container_logs_path(self) -> Optional[pulumi.Input[str]]:
        """
        This to allow log collection from container log path. Set to a different path if not using docker runtime. ref: https://docs.datadoghq.com/agent/kubernetes/daemonset_setup/?tab=k8sfile#create-manifest Default to `/var/lib/docker/containers`
        """
        return pulumi.get(self, "container_logs_path")

    @container_logs_path.setter
    def container_logs_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_logs_path", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables this to activate Datadog Agent log collection. ref: https://docs.datadoghq.com/agent/basic_agent_usage/kubernetes/#log-collection-setup
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="logsConfigContainerCollectAll")
    def logs_config_container_collect_all(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable this to allow log collection for all containers. ref: https://docs.datadoghq.com/agent/basic_agent_usage/kubernetes/#log-collection-setup
        """
        return pulumi.get(self, "logs_config_container_collect_all")

    @logs_config_container_collect_all.setter
    def logs_config_container_collect_all(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "logs_config_container_collect_all", value)

    @property
    @pulumi.getter(name="openFilesLimit")
    def open_files_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Set the maximum number of logs files that the Datadog Agent will tail up to. Increasing this limit can increase resource consumption of the Agent. ref: https://docs.datadoghq.com/agent/basic_agent_usage/kubernetes/#log-collection-setup Default to 100
        """
        return pulumi.get(self, "open_files_limit")

    @open_files_limit.setter
    def open_files_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "open_files_limit", value)

    @property
    @pulumi.getter(name="podLogsPath")
    def pod_logs_path(self) -> Optional[pulumi.Input[str]]:
        """
        This to allow log collection from pod log path. Default to `/var/log/pods`
        """
        return pulumi.get(self, "pod_logs_path")

    @pod_logs_path.setter
    def pod_logs_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pod_logs_path", value)

    @property
    @pulumi.getter(name="tempStoragePath")
    def temp_storage_path(self) -> Optional[pulumi.Input[str]]:
        """
        This path (always mounted from the host) is used by Datadog Agent to store information about processed log files. If the Datadog Agent is restarted, it allows to start tailing the log files from the right offset Default to `/var/lib/datadog-agent/logs`
        """
        return pulumi.get(self, "temp_storage_path")

    @temp_storage_path.setter
    def temp_storage_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "temp_storage_path", value)


@pulumi.input_type
class DatadogAgentSpecAgentProcessArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 env: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentProcessEnvArgs']]]] = None,
                 resources: Optional[pulumi.Input['DatadogAgentSpecAgentProcessResourcesArgs']] = None):
        """
        Process Agent configuration
        :param pulumi.Input[bool] enabled: Enable this to activate live process monitoring. Note: /etc/passwd is automatically mounted to allow username resolution. ref: https://docs.datadoghq.com/graphing/infrastructure/process/#kubernetes-daemonset
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentProcessEnvArgs']]] env: The Datadog Agent supports many environment variables Ref: https://docs.datadoghq.com/agent/docker/?tab=standard#environment-variables
        :param pulumi.Input['DatadogAgentSpecAgentProcessResourcesArgs'] resources: Datadog Process Agent resource requests and limits Make sure to keep requests and limits equal to keep the pods in the Guaranteed QoS class Ref: http://kubernetes.io/docs/user-guide/compute-resources/
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable this to activate live process monitoring. Note: /etc/passwd is automatically mounted to allow username resolution. ref: https://docs.datadoghq.com/graphing/infrastructure/process/#kubernetes-daemonset
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentProcessEnvArgs']]]]:
        """
        The Datadog Agent supports many environment variables Ref: https://docs.datadoghq.com/agent/docker/?tab=standard#environment-variables
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentProcessEnvArgs']]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentProcessResourcesArgs']]:
        """
        Datadog Process Agent resource requests and limits Make sure to keep requests and limits equal to keep the pods in the Guaranteed QoS class Ref: http://kubernetes.io/docs/user-guide/compute-resources/
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentProcessResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class DatadogAgentSpecAgentProcessEnvArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None,
                 value_from: Optional[pulumi.Input['DatadogAgentSpecAgentProcessEnvValueFromArgs']] = None):
        """
        EnvVar represents an environment variable present in a Container.
        :param pulumi.Input[str] name: Name of the environment variable. Must be a C_IDENTIFIER.
        :param pulumi.Input[str] value: Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        :param pulumi.Input['DatadogAgentSpecAgentProcessEnvValueFromArgs'] value_from: Source for the environment variable's value. Cannot be used if value is not empty.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the environment variable. Must be a C_IDENTIFIER.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentProcessEnvValueFromArgs']]:
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        """
        return pulumi.get(self, "value_from")

    @value_from.setter
    def value_from(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentProcessEnvValueFromArgs']]):
        pulumi.set(self, "value_from", value)


@pulumi.input_type
class DatadogAgentSpecAgentProcessEnvValueFromArgs:
    def __init__(__self__, *,
                 config_map_key_ref: Optional[pulumi.Input['DatadogAgentSpecAgentProcessEnvValueFromConfigMapKeyRefArgs']] = None,
                 field_ref: Optional[pulumi.Input['DatadogAgentSpecAgentProcessEnvValueFromFieldRefArgs']] = None,
                 resource_field_ref: Optional[pulumi.Input['DatadogAgentSpecAgentProcessEnvValueFromResourceFieldRefArgs']] = None,
                 secret_key_ref: Optional[pulumi.Input['DatadogAgentSpecAgentProcessEnvValueFromSecretKeyRefArgs']] = None):
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        :param pulumi.Input['DatadogAgentSpecAgentProcessEnvValueFromConfigMapKeyRefArgs'] config_map_key_ref: Selects a key of a ConfigMap.
        :param pulumi.Input['DatadogAgentSpecAgentProcessEnvValueFromFieldRefArgs'] field_ref: Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param pulumi.Input['DatadogAgentSpecAgentProcessEnvValueFromResourceFieldRefArgs'] resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param pulumi.Input['DatadogAgentSpecAgentProcessEnvValueFromSecretKeyRefArgs'] secret_key_ref: Selects a key of a secret in the pod's namespace
        """
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentProcessEnvValueFromConfigMapKeyRefArgs']]:
        """
        Selects a key of a ConfigMap.
        """
        return pulumi.get(self, "config_map_key_ref")

    @config_map_key_ref.setter
    def config_map_key_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentProcessEnvValueFromConfigMapKeyRefArgs']]):
        pulumi.set(self, "config_map_key_ref", value)

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentProcessEnvValueFromFieldRefArgs']]:
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        """
        return pulumi.get(self, "field_ref")

    @field_ref.setter
    def field_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentProcessEnvValueFromFieldRefArgs']]):
        pulumi.set(self, "field_ref", value)

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentProcessEnvValueFromResourceFieldRefArgs']]:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    @resource_field_ref.setter
    def resource_field_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentProcessEnvValueFromResourceFieldRefArgs']]):
        pulumi.set(self, "resource_field_ref", value)

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentProcessEnvValueFromSecretKeyRefArgs']]:
        """
        Selects a key of a secret in the pod's namespace
        """
        return pulumi.get(self, "secret_key_ref")

    @secret_key_ref.setter
    def secret_key_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentProcessEnvValueFromSecretKeyRefArgs']]):
        pulumi.set(self, "secret_key_ref", value)


@pulumi.input_type
class DatadogAgentSpecAgentProcessEnvValueFromConfigMapKeyRefArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        Selects a key of a ConfigMap.
        :param pulumi.Input[str] key: The key to select.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the ConfigMap or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key to select.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the ConfigMap or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class DatadogAgentSpecAgentProcessEnvValueFromFieldRefArgs:
    def __init__(__self__, *,
                 field_path: pulumi.Input[str],
                 api_version: Optional[pulumi.Input[str]] = None):
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param pulumi.Input[str] field_path: Path of the field to select in the specified API version.
        :param pulumi.Input[str] api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> pulumi.Input[str]:
        """
        Path of the field to select in the specified API version.
        """
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_path", value)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)


@pulumi.input_type
class DatadogAgentSpecAgentProcessEnvValueFromResourceFieldRefArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 container_name: Optional[pulumi.Input[str]] = None,
                 divisor: Optional[pulumi.Input['DatadogAgentSpecAgentProcessEnvValueFromResourceFieldRefDivisorArgs']] = None):
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param pulumi.Input[str] resource: Required: resource to select
        :param pulumi.Input[str] container_name: Container name: required for volumes, optional for env vars
        :param pulumi.Input['DatadogAgentSpecAgentProcessEnvValueFromResourceFieldRefDivisorArgs'] divisor: Specifies the output format of the exposed resources, defaults to "1"
        """
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        """
        Required: resource to select
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Container name: required for volumes, optional for env vars
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter
    def divisor(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentProcessEnvValueFromResourceFieldRefDivisorArgs']]:
        """
        Specifies the output format of the exposed resources, defaults to "1"
        """
        return pulumi.get(self, "divisor")

    @divisor.setter
    def divisor(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentProcessEnvValueFromResourceFieldRefDivisorArgs']]):
        pulumi.set(self, "divisor", value)


@pulumi.input_type
class DatadogAgentSpecAgentProcessEnvValueFromResourceFieldRefDivisorArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class DatadogAgentSpecAgentProcessEnvValueFromSecretKeyRefArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        Selects a key of a secret in the pod's namespace
        :param pulumi.Input[str] key: The key of the secret to select from.  Must be a valid secret key.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the Secret or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key of the secret to select from.  Must be a valid secret key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the Secret or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class DatadogAgentSpecAgentProcessResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecAgentProcessResourcesLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecAgentProcessResourcesRequestsArgs']]]] = None):
        """
        Datadog Process Agent resource requests and limits Make sure to keep requests and limits equal to keep the pods in the Guaranteed QoS class Ref: http://kubernetes.io/docs/user-guide/compute-resources/
        :param pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecAgentProcessResourcesLimitsArgs']]] limits: Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecAgentProcessResourcesRequestsArgs']]] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecAgentProcessResourcesLimitsArgs']]]]:
        """
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecAgentProcessResourcesLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecAgentProcessResourcesRequestsArgs']]]]:
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecAgentProcessResourcesRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class DatadogAgentSpecAgentProcessResourcesLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class DatadogAgentSpecAgentProcessResourcesRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class DatadogAgentSpecAgentRbacArgs:
    def __init__(__self__, *,
                 create: Optional[pulumi.Input[bool]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None):
        """
        RBAC configuration of the Agent
        :param pulumi.Input[bool] create: Used to configure RBAC resources creation
        :param pulumi.Input[str] service_account_name: Used to set up the service account name to use Ignored if the field Create is true
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)

    @property
    @pulumi.getter
    def create(self) -> Optional[pulumi.Input[bool]]:
        """
        Used to configure RBAC resources creation
        """
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        Used to set up the service account name to use Ignored if the field Create is true
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)


@pulumi.input_type
class DatadogAgentSpecAgentSystemProbeArgs:
    def __init__(__self__, *,
                 app_armor_profile_name: Optional[pulumi.Input[str]] = None,
                 bpf_debug_enabled: Optional[pulumi.Input[bool]] = None,
                 conntrack_enabled: Optional[pulumi.Input[bool]] = None,
                 debug_port: Optional[pulumi.Input[int]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 env: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentSystemProbeEnvArgs']]]] = None,
                 resources: Optional[pulumi.Input['DatadogAgentSpecAgentSystemProbeResourcesArgs']] = None,
                 sec_comp_custom_profile_config_map: Optional[pulumi.Input[str]] = None,
                 sec_comp_profile_name: Optional[pulumi.Input[str]] = None,
                 sec_comp_root_path: Optional[pulumi.Input[str]] = None,
                 security_context: Optional[pulumi.Input['DatadogAgentSpecAgentSystemProbeSecurityContextArgs']] = None):
        """
        SystemProbe configuration
        :param pulumi.Input[str] app_armor_profile_name: AppArmorProfileName specify a apparmor profile
        :param pulumi.Input[bool] bpf_debug_enabled: BPFDebugEnabled logging for kernel debug
        :param pulumi.Input[bool] conntrack_enabled: ConntrackEnabled enable the system-probe agent to connect to the netlink/conntrack subsystem to add NAT information to connection data Ref: http://conntrack-tools.netfilter.org/
        :param pulumi.Input[int] debug_port: DebugPort Specify the port to expose pprof and expvar for system-probe agent
        :param pulumi.Input[bool] enabled: Enable this to activate live process monitoring. Note: /etc/passwd is automatically mounted to allow username resolution. ref: https://docs.datadoghq.com/graphing/infrastructure/process/#kubernetes-daemonset
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentSystemProbeEnvArgs']]] env: The Datadog SystemProbe supports many environment variables Ref: https://docs.datadoghq.com/agent/docker/?tab=standard#environment-variables
        :param pulumi.Input['DatadogAgentSpecAgentSystemProbeResourcesArgs'] resources: Datadog SystemProbe resource requests and limits Make sure to keep requests and limits equal to keep the pods in the Guaranteed QoS class Ref: http://kubernetes.io/docs/user-guide/compute-resources/
        :param pulumi.Input[str] sec_comp_custom_profile_config_map: SecCompCustomProfileConfigMap specify a pre-existing ConfigMap containing a custom SecComp profile
        :param pulumi.Input[str] sec_comp_profile_name: SecCompProfileName specify a seccomp profile
        :param pulumi.Input[str] sec_comp_root_path: SecCompRootPath specify the seccomp profile root directory
        :param pulumi.Input['DatadogAgentSpecAgentSystemProbeSecurityContextArgs'] security_context: You can modify the security context used to run the containers by modifying the label type
        """
        if app_armor_profile_name is not None:
            pulumi.set(__self__, "app_armor_profile_name", app_armor_profile_name)
        if bpf_debug_enabled is not None:
            pulumi.set(__self__, "bpf_debug_enabled", bpf_debug_enabled)
        if conntrack_enabled is not None:
            pulumi.set(__self__, "conntrack_enabled", conntrack_enabled)
        if debug_port is not None:
            pulumi.set(__self__, "debug_port", debug_port)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if sec_comp_custom_profile_config_map is not None:
            pulumi.set(__self__, "sec_comp_custom_profile_config_map", sec_comp_custom_profile_config_map)
        if sec_comp_profile_name is not None:
            pulumi.set(__self__, "sec_comp_profile_name", sec_comp_profile_name)
        if sec_comp_root_path is not None:
            pulumi.set(__self__, "sec_comp_root_path", sec_comp_root_path)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)

    @property
    @pulumi.getter(name="appArmorProfileName")
    def app_armor_profile_name(self) -> Optional[pulumi.Input[str]]:
        """
        AppArmorProfileName specify a apparmor profile
        """
        return pulumi.get(self, "app_armor_profile_name")

    @app_armor_profile_name.setter
    def app_armor_profile_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_armor_profile_name", value)

    @property
    @pulumi.getter(name="bpfDebugEnabled")
    def bpf_debug_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        BPFDebugEnabled logging for kernel debug
        """
        return pulumi.get(self, "bpf_debug_enabled")

    @bpf_debug_enabled.setter
    def bpf_debug_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bpf_debug_enabled", value)

    @property
    @pulumi.getter(name="conntrackEnabled")
    def conntrack_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        ConntrackEnabled enable the system-probe agent to connect to the netlink/conntrack subsystem to add NAT information to connection data Ref: http://conntrack-tools.netfilter.org/
        """
        return pulumi.get(self, "conntrack_enabled")

    @conntrack_enabled.setter
    def conntrack_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "conntrack_enabled", value)

    @property
    @pulumi.getter(name="debugPort")
    def debug_port(self) -> Optional[pulumi.Input[int]]:
        """
        DebugPort Specify the port to expose pprof and expvar for system-probe agent
        """
        return pulumi.get(self, "debug_port")

    @debug_port.setter
    def debug_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "debug_port", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable this to activate live process monitoring. Note: /etc/passwd is automatically mounted to allow username resolution. ref: https://docs.datadoghq.com/graphing/infrastructure/process/#kubernetes-daemonset
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentSystemProbeEnvArgs']]]]:
        """
        The Datadog SystemProbe supports many environment variables Ref: https://docs.datadoghq.com/agent/docker/?tab=standard#environment-variables
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecAgentSystemProbeEnvArgs']]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentSystemProbeResourcesArgs']]:
        """
        Datadog SystemProbe resource requests and limits Make sure to keep requests and limits equal to keep the pods in the Guaranteed QoS class Ref: http://kubernetes.io/docs/user-guide/compute-resources/
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentSystemProbeResourcesArgs']]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="secCompCustomProfileConfigMap")
    def sec_comp_custom_profile_config_map(self) -> Optional[pulumi.Input[str]]:
        """
        SecCompCustomProfileConfigMap specify a pre-existing ConfigMap containing a custom SecComp profile
        """
        return pulumi.get(self, "sec_comp_custom_profile_config_map")

    @sec_comp_custom_profile_config_map.setter
    def sec_comp_custom_profile_config_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sec_comp_custom_profile_config_map", value)

    @property
    @pulumi.getter(name="secCompProfileName")
    def sec_comp_profile_name(self) -> Optional[pulumi.Input[str]]:
        """
        SecCompProfileName specify a seccomp profile
        """
        return pulumi.get(self, "sec_comp_profile_name")

    @sec_comp_profile_name.setter
    def sec_comp_profile_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sec_comp_profile_name", value)

    @property
    @pulumi.getter(name="secCompRootPath")
    def sec_comp_root_path(self) -> Optional[pulumi.Input[str]]:
        """
        SecCompRootPath specify the seccomp profile root directory
        """
        return pulumi.get(self, "sec_comp_root_path")

    @sec_comp_root_path.setter
    def sec_comp_root_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sec_comp_root_path", value)

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentSystemProbeSecurityContextArgs']]:
        """
        You can modify the security context used to run the containers by modifying the label type
        """
        return pulumi.get(self, "security_context")

    @security_context.setter
    def security_context(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentSystemProbeSecurityContextArgs']]):
        pulumi.set(self, "security_context", value)


@pulumi.input_type
class DatadogAgentSpecAgentSystemProbeEnvArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None,
                 value_from: Optional[pulumi.Input['DatadogAgentSpecAgentSystemProbeEnvValueFromArgs']] = None):
        """
        EnvVar represents an environment variable present in a Container.
        :param pulumi.Input[str] name: Name of the environment variable. Must be a C_IDENTIFIER.
        :param pulumi.Input[str] value: Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        :param pulumi.Input['DatadogAgentSpecAgentSystemProbeEnvValueFromArgs'] value_from: Source for the environment variable's value. Cannot be used if value is not empty.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the environment variable. Must be a C_IDENTIFIER.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentSystemProbeEnvValueFromArgs']]:
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        """
        return pulumi.get(self, "value_from")

    @value_from.setter
    def value_from(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentSystemProbeEnvValueFromArgs']]):
        pulumi.set(self, "value_from", value)


@pulumi.input_type
class DatadogAgentSpecAgentSystemProbeEnvValueFromArgs:
    def __init__(__self__, *,
                 config_map_key_ref: Optional[pulumi.Input['DatadogAgentSpecAgentSystemProbeEnvValueFromConfigMapKeyRefArgs']] = None,
                 field_ref: Optional[pulumi.Input['DatadogAgentSpecAgentSystemProbeEnvValueFromFieldRefArgs']] = None,
                 resource_field_ref: Optional[pulumi.Input['DatadogAgentSpecAgentSystemProbeEnvValueFromResourceFieldRefArgs']] = None,
                 secret_key_ref: Optional[pulumi.Input['DatadogAgentSpecAgentSystemProbeEnvValueFromSecretKeyRefArgs']] = None):
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        :param pulumi.Input['DatadogAgentSpecAgentSystemProbeEnvValueFromConfigMapKeyRefArgs'] config_map_key_ref: Selects a key of a ConfigMap.
        :param pulumi.Input['DatadogAgentSpecAgentSystemProbeEnvValueFromFieldRefArgs'] field_ref: Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param pulumi.Input['DatadogAgentSpecAgentSystemProbeEnvValueFromResourceFieldRefArgs'] resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param pulumi.Input['DatadogAgentSpecAgentSystemProbeEnvValueFromSecretKeyRefArgs'] secret_key_ref: Selects a key of a secret in the pod's namespace
        """
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentSystemProbeEnvValueFromConfigMapKeyRefArgs']]:
        """
        Selects a key of a ConfigMap.
        """
        return pulumi.get(self, "config_map_key_ref")

    @config_map_key_ref.setter
    def config_map_key_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentSystemProbeEnvValueFromConfigMapKeyRefArgs']]):
        pulumi.set(self, "config_map_key_ref", value)

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentSystemProbeEnvValueFromFieldRefArgs']]:
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        """
        return pulumi.get(self, "field_ref")

    @field_ref.setter
    def field_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentSystemProbeEnvValueFromFieldRefArgs']]):
        pulumi.set(self, "field_ref", value)

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentSystemProbeEnvValueFromResourceFieldRefArgs']]:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    @resource_field_ref.setter
    def resource_field_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentSystemProbeEnvValueFromResourceFieldRefArgs']]):
        pulumi.set(self, "resource_field_ref", value)

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentSystemProbeEnvValueFromSecretKeyRefArgs']]:
        """
        Selects a key of a secret in the pod's namespace
        """
        return pulumi.get(self, "secret_key_ref")

    @secret_key_ref.setter
    def secret_key_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentSystemProbeEnvValueFromSecretKeyRefArgs']]):
        pulumi.set(self, "secret_key_ref", value)


@pulumi.input_type
class DatadogAgentSpecAgentSystemProbeEnvValueFromConfigMapKeyRefArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        Selects a key of a ConfigMap.
        :param pulumi.Input[str] key: The key to select.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the ConfigMap or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key to select.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the ConfigMap or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class DatadogAgentSpecAgentSystemProbeEnvValueFromFieldRefArgs:
    def __init__(__self__, *,
                 field_path: pulumi.Input[str],
                 api_version: Optional[pulumi.Input[str]] = None):
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param pulumi.Input[str] field_path: Path of the field to select in the specified API version.
        :param pulumi.Input[str] api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> pulumi.Input[str]:
        """
        Path of the field to select in the specified API version.
        """
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_path", value)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)


@pulumi.input_type
class DatadogAgentSpecAgentSystemProbeEnvValueFromResourceFieldRefArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 container_name: Optional[pulumi.Input[str]] = None,
                 divisor: Optional[pulumi.Input['DatadogAgentSpecAgentSystemProbeEnvValueFromResourceFieldRefDivisorArgs']] = None):
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param pulumi.Input[str] resource: Required: resource to select
        :param pulumi.Input[str] container_name: Container name: required for volumes, optional for env vars
        :param pulumi.Input['DatadogAgentSpecAgentSystemProbeEnvValueFromResourceFieldRefDivisorArgs'] divisor: Specifies the output format of the exposed resources, defaults to "1"
        """
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        """
        Required: resource to select
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Container name: required for volumes, optional for env vars
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter
    def divisor(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentSystemProbeEnvValueFromResourceFieldRefDivisorArgs']]:
        """
        Specifies the output format of the exposed resources, defaults to "1"
        """
        return pulumi.get(self, "divisor")

    @divisor.setter
    def divisor(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentSystemProbeEnvValueFromResourceFieldRefDivisorArgs']]):
        pulumi.set(self, "divisor", value)


@pulumi.input_type
class DatadogAgentSpecAgentSystemProbeEnvValueFromResourceFieldRefDivisorArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class DatadogAgentSpecAgentSystemProbeEnvValueFromSecretKeyRefArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        Selects a key of a secret in the pod's namespace
        :param pulumi.Input[str] key: The key of the secret to select from.  Must be a valid secret key.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the Secret or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key of the secret to select from.  Must be a valid secret key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the Secret or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class DatadogAgentSpecAgentSystemProbeResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecAgentSystemProbeResourcesLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecAgentSystemProbeResourcesRequestsArgs']]]] = None):
        """
        Datadog SystemProbe resource requests and limits Make sure to keep requests and limits equal to keep the pods in the Guaranteed QoS class Ref: http://kubernetes.io/docs/user-guide/compute-resources/
        :param pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecAgentSystemProbeResourcesLimitsArgs']]] limits: Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecAgentSystemProbeResourcesRequestsArgs']]] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecAgentSystemProbeResourcesLimitsArgs']]]]:
        """
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecAgentSystemProbeResourcesLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecAgentSystemProbeResourcesRequestsArgs']]]]:
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecAgentSystemProbeResourcesRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class DatadogAgentSpecAgentSystemProbeResourcesLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class DatadogAgentSpecAgentSystemProbeResourcesRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class DatadogAgentSpecAgentSystemProbeSecurityContextArgs:
    def __init__(__self__, *,
                 allow_privilege_escalation: Optional[pulumi.Input[bool]] = None,
                 capabilities: Optional[pulumi.Input['DatadogAgentSpecAgentSystemProbeSecurityContextCapabilitiesArgs']] = None,
                 privileged: Optional[pulumi.Input[bool]] = None,
                 proc_mount: Optional[pulumi.Input[str]] = None,
                 read_only_root_filesystem: Optional[pulumi.Input[bool]] = None,
                 run_as_group: Optional[pulumi.Input[int]] = None,
                 run_as_non_root: Optional[pulumi.Input[bool]] = None,
                 run_as_user: Optional[pulumi.Input[int]] = None,
                 se_linux_options: Optional[pulumi.Input['DatadogAgentSpecAgentSystemProbeSecurityContextSeLinuxOptionsArgs']] = None,
                 windows_options: Optional[pulumi.Input['DatadogAgentSpecAgentSystemProbeSecurityContextWindowsOptionsArgs']] = None):
        """
        You can modify the security context used to run the containers by modifying the label type
        :param pulumi.Input[bool] allow_privilege_escalation: AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
        :param pulumi.Input['DatadogAgentSpecAgentSystemProbeSecurityContextCapabilitiesArgs'] capabilities: The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
        :param pulumi.Input[bool] privileged: Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
        :param pulumi.Input[str] proc_mount: procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
        :param pulumi.Input[bool] read_only_root_filesystem: Whether this container has a read-only root filesystem. Default is false.
        :param pulumi.Input[int] run_as_group: The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[bool] run_as_non_root: Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[int] run_as_user: The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input['DatadogAgentSpecAgentSystemProbeSecurityContextSeLinuxOptionsArgs'] se_linux_options: The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input['DatadogAgentSpecAgentSystemProbeSecurityContextWindowsOptionsArgs'] windows_options: The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        if allow_privilege_escalation is not None:
            pulumi.set(__self__, "allow_privilege_escalation", allow_privilege_escalation)
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if privileged is not None:
            pulumi.set(__self__, "privileged", privileged)
        if proc_mount is not None:
            pulumi.set(__self__, "proc_mount", proc_mount)
        if read_only_root_filesystem is not None:
            pulumi.set(__self__, "read_only_root_filesystem", read_only_root_filesystem)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if se_linux_options is not None:
            pulumi.set(__self__, "se_linux_options", se_linux_options)
        if windows_options is not None:
            pulumi.set(__self__, "windows_options", windows_options)

    @property
    @pulumi.getter(name="allowPrivilegeEscalation")
    def allow_privilege_escalation(self) -> Optional[pulumi.Input[bool]]:
        """
        AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
        """
        return pulumi.get(self, "allow_privilege_escalation")

    @allow_privilege_escalation.setter
    def allow_privilege_escalation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_privilege_escalation", value)

    @property
    @pulumi.getter
    def capabilities(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentSystemProbeSecurityContextCapabilitiesArgs']]:
        """
        The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
        """
        return pulumi.get(self, "capabilities")

    @capabilities.setter
    def capabilities(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentSystemProbeSecurityContextCapabilitiesArgs']]):
        pulumi.set(self, "capabilities", value)

    @property
    @pulumi.getter
    def privileged(self) -> Optional[pulumi.Input[bool]]:
        """
        Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
        """
        return pulumi.get(self, "privileged")

    @privileged.setter
    def privileged(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "privileged", value)

    @property
    @pulumi.getter(name="procMount")
    def proc_mount(self) -> Optional[pulumi.Input[str]]:
        """
        procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
        """
        return pulumi.get(self, "proc_mount")

    @proc_mount.setter
    def proc_mount(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proc_mount", value)

    @property
    @pulumi.getter(name="readOnlyRootFilesystem")
    def read_only_root_filesystem(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this container has a read-only root filesystem. Default is false.
        """
        return pulumi.get(self, "read_only_root_filesystem")

    @read_only_root_filesystem.setter
    def read_only_root_filesystem(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only_root_filesystem", value)

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[pulumi.Input[int]]:
        """
        The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_group")

    @run_as_group.setter
    def run_as_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "run_as_group", value)

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_non_root")

    @run_as_non_root.setter
    def run_as_non_root(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_as_non_root", value)

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[pulumi.Input[int]]:
        """
        The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_user")

    @run_as_user.setter
    def run_as_user(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "run_as_user", value)

    @property
    @pulumi.getter(name="seLinuxOptions")
    def se_linux_options(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentSystemProbeSecurityContextSeLinuxOptionsArgs']]:
        """
        The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "se_linux_options")

    @se_linux_options.setter
    def se_linux_options(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentSystemProbeSecurityContextSeLinuxOptionsArgs']]):
        pulumi.set(self, "se_linux_options", value)

    @property
    @pulumi.getter(name="windowsOptions")
    def windows_options(self) -> Optional[pulumi.Input['DatadogAgentSpecAgentSystemProbeSecurityContextWindowsOptionsArgs']]:
        """
        The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "windows_options")

    @windows_options.setter
    def windows_options(self, value: Optional[pulumi.Input['DatadogAgentSpecAgentSystemProbeSecurityContextWindowsOptionsArgs']]):
        pulumi.set(self, "windows_options", value)


@pulumi.input_type
class DatadogAgentSpecAgentSystemProbeSecurityContextCapabilitiesArgs:
    def __init__(__self__, *,
                 add: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 drop: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] add: Added capabilities
        :param pulumi.Input[Sequence[pulumi.Input[str]]] drop: Removed capabilities
        """
        if add is not None:
            pulumi.set(__self__, "add", add)
        if drop is not None:
            pulumi.set(__self__, "drop", drop)

    @property
    @pulumi.getter
    def add(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Added capabilities
        """
        return pulumi.get(self, "add")

    @add.setter
    def add(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "add", value)

    @property
    @pulumi.getter
    def drop(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Removed capabilities
        """
        return pulumi.get(self, "drop")

    @drop.setter
    def drop(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "drop", value)


@pulumi.input_type
class DatadogAgentSpecAgentSystemProbeSecurityContextSeLinuxOptionsArgs:
    def __init__(__self__, *,
                 level: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[str] level: Level is SELinux level label that applies to the container.
        :param pulumi.Input[str] role: Role is a SELinux role label that applies to the container.
        :param pulumi.Input[str] type: Type is a SELinux type label that applies to the container.
        :param pulumi.Input[str] user: User is a SELinux user label that applies to the container.
        """
        if level is not None:
            pulumi.set(__self__, "level", level)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        """
        Level is SELinux level label that applies to the container.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role is a SELinux role label that applies to the container.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type is a SELinux type label that applies to the container.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        User is a SELinux user label that applies to the container.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class DatadogAgentSpecAgentSystemProbeSecurityContextWindowsOptionsArgs:
    def __init__(__self__, *,
                 gmsa_credential_spec: Optional[pulumi.Input[str]] = None,
                 gmsa_credential_spec_name: Optional[pulumi.Input[str]] = None,
                 run_as_user_name: Optional[pulumi.Input[str]] = None):
        """
        The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        :param pulumi.Input[str] gmsa_credential_spec: GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
        :param pulumi.Input[str] gmsa_credential_spec_name: GMSACredentialSpecName is the name of the GMSA credential spec to use.
        :param pulumi.Input[str] run_as_user_name: The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        if gmsa_credential_spec is not None:
            pulumi.set(__self__, "gmsa_credential_spec", gmsa_credential_spec)
        if gmsa_credential_spec_name is not None:
            pulumi.set(__self__, "gmsa_credential_spec_name", gmsa_credential_spec_name)
        if run_as_user_name is not None:
            pulumi.set(__self__, "run_as_user_name", run_as_user_name)

    @property
    @pulumi.getter(name="gmsaCredentialSpec")
    def gmsa_credential_spec(self) -> Optional[pulumi.Input[str]]:
        """
        GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
        """
        return pulumi.get(self, "gmsa_credential_spec")

    @gmsa_credential_spec.setter
    def gmsa_credential_spec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gmsa_credential_spec", value)

    @property
    @pulumi.getter(name="gmsaCredentialSpecName")
    def gmsa_credential_spec_name(self) -> Optional[pulumi.Input[str]]:
        """
        GMSACredentialSpecName is the name of the GMSA credential spec to use.
        """
        return pulumi.get(self, "gmsa_credential_spec_name")

    @gmsa_credential_spec_name.setter
    def gmsa_credential_spec_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gmsa_credential_spec_name", value)

    @property
    @pulumi.getter(name="runAsUserName")
    def run_as_user_name(self) -> Optional[pulumi.Input[str]]:
        """
        The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        """
        return pulumi.get(self, "run_as_user_name")

    @run_as_user_name.setter
    def run_as_user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_as_user_name", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentArgs:
    def __init__(__self__, *,
                 image: pulumi.Input['DatadogAgentSpecClusterAgentImageArgs'],
                 additional_annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 additional_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 affinity: Optional[pulumi.Input['DatadogAgentSpecClusterAgentAffinityArgs']] = None,
                 config: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigArgs']] = None,
                 custom_config: Optional[pulumi.Input['DatadogAgentSpecClusterAgentCustomConfigArgs']] = None,
                 deployment_name: Optional[pulumi.Input[str]] = None,
                 node_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 priority_class_name: Optional[pulumi.Input[str]] = None,
                 rbac: Optional[pulumi.Input['DatadogAgentSpecClusterAgentRbacArgs']] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentTolerationsArgs']]]] = None):
        """
        The desired state of the Cluster Agent as a deployment
        :param pulumi.Input['DatadogAgentSpecClusterAgentImageArgs'] image: The container image of the Datadog Cluster Agent
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] additional_annotations: AdditionalAnnotations provide annotations that will be added to the cluster-agent Pods.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] additional_labels: AdditionalLabels provide labels that will be added to the cluster checks runner Pods.
        :param pulumi.Input['DatadogAgentSpecClusterAgentAffinityArgs'] affinity: If specified, the pod's scheduling constraints
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigArgs'] config: Cluster Agent configuration
        :param pulumi.Input['DatadogAgentSpecClusterAgentCustomConfigArgs'] custom_config: Allow to put custom configuration for the agent, corresponding to the datadog-cluster.yaml config file
        :param pulumi.Input[str] deployment_name: Name of the Cluster Agent Deployment to create or migrate from
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] node_selector: NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        :param pulumi.Input[str] priority_class_name: If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
        :param pulumi.Input['DatadogAgentSpecClusterAgentRbacArgs'] rbac: RBAC configuration of the Datadog Cluster Agent
        :param pulumi.Input[int] replicas: Number of the Cluster Agent replicas
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentTolerationsArgs']]] tolerations: If specified, the Cluster-Agent pod's tolerations.
        """
        pulumi.set(__self__, "image", image)
        if additional_annotations is not None:
            pulumi.set(__self__, "additional_annotations", additional_annotations)
        if additional_labels is not None:
            pulumi.set(__self__, "additional_labels", additional_labels)
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if custom_config is not None:
            pulumi.set(__self__, "custom_config", custom_config)
        if deployment_name is not None:
            pulumi.set(__self__, "deployment_name", deployment_name)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if rbac is not None:
            pulumi.set(__self__, "rbac", rbac)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input['DatadogAgentSpecClusterAgentImageArgs']:
        """
        The container image of the Datadog Cluster Agent
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input['DatadogAgentSpecClusterAgentImageArgs']):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="additionalAnnotations")
    def additional_annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        AdditionalAnnotations provide annotations that will be added to the cluster-agent Pods.
        """
        return pulumi.get(self, "additional_annotations")

    @additional_annotations.setter
    def additional_annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "additional_annotations", value)

    @property
    @pulumi.getter(name="additionalLabels")
    def additional_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        AdditionalLabels provide labels that will be added to the cluster checks runner Pods.
        """
        return pulumi.get(self, "additional_labels")

    @additional_labels.setter
    def additional_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "additional_labels", value)

    @property
    @pulumi.getter
    def affinity(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentAffinityArgs']]:
        """
        If specified, the pod's scheduling constraints
        """
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentAffinityArgs']]):
        pulumi.set(self, "affinity", value)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigArgs']]:
        """
        Cluster Agent configuration
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="customConfig")
    def custom_config(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentCustomConfigArgs']]:
        """
        Allow to put custom configuration for the agent, corresponding to the datadog-cluster.yaml config file
        """
        return pulumi.get(self, "custom_config")

    @custom_config.setter
    def custom_config(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentCustomConfigArgs']]):
        pulumi.set(self, "custom_config", value)

    @property
    @pulumi.getter(name="deploymentName")
    def deployment_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Cluster Agent Deployment to create or migrate from
        """
        return pulumi.get(self, "deployment_name")

    @deployment_name.setter
    def deployment_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deployment_name", value)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        """
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
        """
        return pulumi.get(self, "priority_class_name")

    @priority_class_name.setter
    def priority_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_class_name", value)

    @property
    @pulumi.getter
    def rbac(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentRbacArgs']]:
        """
        RBAC configuration of the Datadog Cluster Agent
        """
        return pulumi.get(self, "rbac")

    @rbac.setter
    def rbac(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentRbacArgs']]):
        pulumi.set(self, "rbac", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        """
        Number of the Cluster Agent replicas
        """
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentTolerationsArgs']]]]:
        """
        If specified, the Cluster-Agent pod's tolerations.
        """
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentTolerationsArgs']]]]):
        pulumi.set(self, "tolerations", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentAffinityArgs:
    def __init__(__self__, *,
                 node_affinity: Optional[pulumi.Input['DatadogAgentSpecClusterAgentAffinityNodeAffinityArgs']] = None,
                 pod_affinity: Optional[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAffinityArgs']] = None,
                 pod_anti_affinity: Optional[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAntiAffinityArgs']] = None):
        """
        If specified, the pod's scheduling constraints
        :param pulumi.Input['DatadogAgentSpecClusterAgentAffinityNodeAffinityArgs'] node_affinity: Describes node affinity scheduling rules for the pod.
        :param pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAffinityArgs'] pod_affinity: Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        :param pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAntiAffinityArgs'] pod_anti_affinity: Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        """
        if node_affinity is not None:
            pulumi.set(__self__, "node_affinity", node_affinity)
        if pod_affinity is not None:
            pulumi.set(__self__, "pod_affinity", pod_affinity)
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentAffinityNodeAffinityArgs']]:
        """
        Describes node affinity scheduling rules for the pod.
        """
        return pulumi.get(self, "node_affinity")

    @node_affinity.setter
    def node_affinity(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentAffinityNodeAffinityArgs']]):
        pulumi.set(self, "node_affinity", value)

    @property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAffinityArgs']]:
        """
        Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        """
        return pulumi.get(self, "pod_affinity")

    @pod_affinity.setter
    def pod_affinity(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAffinityArgs']]):
        pulumi.set(self, "pod_affinity", value)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAntiAffinityArgs']]:
        """
        Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        """
        return pulumi.get(self, "pod_anti_affinity")

    @pod_anti_affinity.setter
    def pod_anti_affinity(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAntiAffinityArgs']]):
        pulumi.set(self, "pod_anti_affinity", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentAffinityNodeAffinityArgs:
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]] = None,
                 required_during_scheduling_ignored_during_execution: Optional[pulumi.Input['DatadogAgentSpecClusterAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']] = None):
        """
        Describes node affinity scheduling rules for the pod.
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
        :param pulumi.Input['DatadogAgentSpecClusterAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs'] required_during_scheduling_ignored_during_execution: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]:
        """
        If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 preference: pulumi.Input['DatadogAgentSpecClusterAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs'],
                 weight: pulumi.Input[int]):
        """
        An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
        :param pulumi.Input['DatadogAgentSpecClusterAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs'] preference: A node selector term, associated with the corresponding weight.
        :param pulumi.Input[int] weight: Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        pulumi.set(__self__, "preference", preference)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def preference(self) -> pulumi.Input['DatadogAgentSpecClusterAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs']:
        """
        A node selector term, associated with the corresponding weight.
        """
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: pulumi.Input['DatadogAgentSpecClusterAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs']):
        pulumi.set(self, "preference", value)

    @property
    @pulumi.getter
    def weight(self) -> pulumi.Input[int]:
        """
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: pulumi.Input[int]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs']]]] = None,
                 match_fields: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs']]]] = None):
        """
        A node selector term, associated with the corresponding weight.
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs']]] match_expressions: A list of node selector requirements by node's labels.
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs']]] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs']]]]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs']]]]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")

    @match_fields.setter
    def match_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs']]]]):
        pulumi.set(self, "match_fields", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 node_selector_terms: pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs']]]):
        """
        If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs']]] node_selector_terms: Required. A list of node selector terms. The terms are ORed.
        """
        pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(self) -> pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs']]]:
        """
        Required. A list of node selector terms. The terms are ORed.
        """
        return pulumi.get(self, "node_selector_terms")

    @node_selector_terms.setter
    def node_selector_terms(self, value: pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs']]]):
        pulumi.set(self, "node_selector_terms", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs']]]] = None,
                 match_fields: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs']]]] = None):
        """
        A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs']]] match_expressions: A list of node selector requirements by node's labels.
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs']]] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs']]]]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs']]]]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")

    @match_fields.setter
    def match_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs']]]]):
        pulumi.set(self, "match_fields", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentAffinityPodAffinityArgs:
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]] = None,
                 required_during_scheduling_ignored_during_execution: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]] = None):
        """
        Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]] required_during_scheduling_ignored_during_execution: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]]:
        """
        If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]]):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 pod_affinity_term: pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs'],
                 weight: pulumi.Input[int]):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs'] pod_affinity_term: Required. A pod affinity term, associated with the corresponding weight.
        :param pulumi.Input[int] weight: weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
        """
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs']:
        """
        Required. A pod affinity term, associated with the corresponding weight.
        """
        return pulumi.get(self, "pod_affinity_term")

    @pod_affinity_term.setter
    def pod_affinity_term(self, value: pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs']):
        pulumi.set(self, "pod_affinity_term", value)

    @property
    @pulumi.getter
    def weight(self) -> pulumi.Input[int]:
        """
        weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: pulumi.Input[int]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs:
    def __init__(__self__, *,
                 topology_key: pulumi.Input[str],
                 label_selector: Optional[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        :param pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs'] label_selector: A label query over a set of resources, in this case pods.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> pulumi.Input[str]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "topology_key", value)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']]:
        """
        A label query over a set of resources, in this case pods.
        """
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']]):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        A label query over a set of resources, in this case pods.
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]]]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 topology_key: pulumi.Input[str],
                 label_selector: Optional[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        :param pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs'] label_selector: A label query over a set of resources, in this case pods.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> pulumi.Input[str]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "topology_key", value)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']]:
        """
        A label query over a set of resources, in this case pods.
        """
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']]):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        A label query over a set of resources, in this case pods.
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]]]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentAffinityPodAntiAffinityArgs:
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]] = None,
                 required_during_scheduling_ignored_during_execution: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]] = None):
        """
        Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]] required_during_scheduling_ignored_during_execution: If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]]:
        """
        If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]]):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 pod_affinity_term: pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs'],
                 weight: pulumi.Input[int]):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs'] pod_affinity_term: Required. A pod affinity term, associated with the corresponding weight.
        :param pulumi.Input[int] weight: weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
        """
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs']:
        """
        Required. A pod affinity term, associated with the corresponding weight.
        """
        return pulumi.get(self, "pod_affinity_term")

    @pod_affinity_term.setter
    def pod_affinity_term(self, value: pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs']):
        pulumi.set(self, "pod_affinity_term", value)

    @property
    @pulumi.getter
    def weight(self) -> pulumi.Input[int]:
        """
        weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: pulumi.Input[int]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs:
    def __init__(__self__, *,
                 topology_key: pulumi.Input[str],
                 label_selector: Optional[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        :param pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs'] label_selector: A label query over a set of resources, in this case pods.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> pulumi.Input[str]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "topology_key", value)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']]:
        """
        A label query over a set of resources, in this case pods.
        """
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']]):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        A label query over a set of resources, in this case pods.
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]]]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 topology_key: pulumi.Input[str],
                 label_selector: Optional[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        :param pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs'] label_selector: A label query over a set of resources, in this case pods.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> pulumi.Input[str]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "topology_key", value)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']]:
        """
        A label query over a set of resources, in this case pods.
        """
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']]):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        A label query over a set of resources, in this case pods.
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]]]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigArgs:
    def __init__(__self__, *,
                 admission_controller: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigAdmissionControllerArgs']] = None,
                 cluster_checks_enabled: Optional[pulumi.Input[bool]] = None,
                 confd: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigConfdArgs']] = None,
                 env: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentConfigEnvArgs']]]] = None,
                 external_metrics: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigExternalMetricsArgs']] = None,
                 log_level: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigResourcesArgs']] = None,
                 volume_mounts: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumeMountsArgs']]]] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesArgs']]]] = None):
        """
        Cluster Agent configuration
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigAdmissionControllerArgs'] admission_controller: Configure the Admission Controller
        :param pulumi.Input[bool] cluster_checks_enabled: Enable the Cluster Checks and Endpoint Checks feature on both the cluster-agents and the daemonset ref: https://docs.datadoghq.com/agent/cluster_agent/clusterchecks/ https://docs.datadoghq.com/agent/cluster_agent/endpointschecks/ Autodiscovery via Kube Service annotations is automatically enabled
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigConfdArgs'] confd: Confd Provide additional cluster check configurations. Each key will become a file in /conf.d see https://docs.datadoghq.com/agent/autodiscovery/ for more details.
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentConfigEnvArgs']]] env: The Datadog Agent supports many environment variables Ref: https://docs.datadoghq.com/agent/docker/?tab=standard#environment-variables
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigExternalMetricsArgs'] external_metrics: ExternalMetricsConfig contains the configuration of the external metrics provider in Cluster Agent
        :param pulumi.Input[str] log_level: Set logging verbosity, valid log levels are: trace, debug, info, warn, error, critical, and off
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigResourcesArgs'] resources: Datadog cluster-agent resource requests and limits
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumeMountsArgs']]] volume_mounts: Specify additional volume mounts in the Datadog Cluster Agent container
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesArgs']]] volumes: Specify additional volumes in the Datadog Cluster Agent container
        """
        if admission_controller is not None:
            pulumi.set(__self__, "admission_controller", admission_controller)
        if cluster_checks_enabled is not None:
            pulumi.set(__self__, "cluster_checks_enabled", cluster_checks_enabled)
        if confd is not None:
            pulumi.set(__self__, "confd", confd)
        if env is not None:
            pulumi.set(__self__, "env", env)
        if external_metrics is not None:
            pulumi.set(__self__, "external_metrics", external_metrics)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter(name="admissionController")
    def admission_controller(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigAdmissionControllerArgs']]:
        """
        Configure the Admission Controller
        """
        return pulumi.get(self, "admission_controller")

    @admission_controller.setter
    def admission_controller(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigAdmissionControllerArgs']]):
        pulumi.set(self, "admission_controller", value)

    @property
    @pulumi.getter(name="clusterChecksEnabled")
    def cluster_checks_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable the Cluster Checks and Endpoint Checks feature on both the cluster-agents and the daemonset ref: https://docs.datadoghq.com/agent/cluster_agent/clusterchecks/ https://docs.datadoghq.com/agent/cluster_agent/endpointschecks/ Autodiscovery via Kube Service annotations is automatically enabled
        """
        return pulumi.get(self, "cluster_checks_enabled")

    @cluster_checks_enabled.setter
    def cluster_checks_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cluster_checks_enabled", value)

    @property
    @pulumi.getter
    def confd(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigConfdArgs']]:
        """
        Confd Provide additional cluster check configurations. Each key will become a file in /conf.d see https://docs.datadoghq.com/agent/autodiscovery/ for more details.
        """
        return pulumi.get(self, "confd")

    @confd.setter
    def confd(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigConfdArgs']]):
        pulumi.set(self, "confd", value)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentConfigEnvArgs']]]]:
        """
        The Datadog Agent supports many environment variables Ref: https://docs.datadoghq.com/agent/docker/?tab=standard#environment-variables
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentConfigEnvArgs']]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="externalMetrics")
    def external_metrics(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigExternalMetricsArgs']]:
        """
        ExternalMetricsConfig contains the configuration of the external metrics provider in Cluster Agent
        """
        return pulumi.get(self, "external_metrics")

    @external_metrics.setter
    def external_metrics(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigExternalMetricsArgs']]):
        pulumi.set(self, "external_metrics", value)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[str]]:
        """
        Set logging verbosity, valid log levels are: trace, debug, info, warn, error, critical, and off
        """
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_level", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigResourcesArgs']]:
        """
        Datadog cluster-agent resource requests and limits
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigResourcesArgs']]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumeMountsArgs']]]]:
        """
        Specify additional volume mounts in the Datadog Cluster Agent container
        """
        return pulumi.get(self, "volume_mounts")

    @volume_mounts.setter
    def volume_mounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumeMountsArgs']]]]):
        pulumi.set(self, "volume_mounts", value)

    @property
    @pulumi.getter
    def volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesArgs']]]]:
        """
        Specify additional volumes in the Datadog Cluster Agent container
        """
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesArgs']]]]):
        pulumi.set(self, "volumes", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigAdmissionControllerArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 mutate_unlabelled: Optional[pulumi.Input[bool]] = None,
                 service_name: Optional[pulumi.Input[str]] = None):
        """
        Configure the Admission Controller
        :param pulumi.Input[bool] enabled: Enable the admission controller to be able to inject APM/Dogstatsd config and standard tags (env, service, version) automatically into your pods
        :param pulumi.Input[bool] mutate_unlabelled: MutateUnlabelled enables injecting config without having the pod label 'admission.datadoghq.com/enabled="true"'
        :param pulumi.Input[str] service_name: ServiceName corresponds to the webhook service name
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if mutate_unlabelled is not None:
            pulumi.set(__self__, "mutate_unlabelled", mutate_unlabelled)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable the admission controller to be able to inject APM/Dogstatsd config and standard tags (env, service, version) automatically into your pods
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="mutateUnlabelled")
    def mutate_unlabelled(self) -> Optional[pulumi.Input[bool]]:
        """
        MutateUnlabelled enables injecting config without having the pod label 'admission.datadoghq.com/enabled="true"'
        """
        return pulumi.get(self, "mutate_unlabelled")

    @mutate_unlabelled.setter
    def mutate_unlabelled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mutate_unlabelled", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[pulumi.Input[str]]:
        """
        ServiceName corresponds to the webhook service name
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_name", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigConfdArgs:
    def __init__(__self__, *,
                 config_map_name: Optional[pulumi.Input[str]] = None):
        """
        Confd Provide additional cluster check configurations. Each key will become a file in /conf.d see https://docs.datadoghq.com/agent/autodiscovery/ for more details.
        :param pulumi.Input[str] config_map_name: ConfigMapName name of a ConfigMap used to mount a directory
        """
        if config_map_name is not None:
            pulumi.set(__self__, "config_map_name", config_map_name)

    @property
    @pulumi.getter(name="configMapName")
    def config_map_name(self) -> Optional[pulumi.Input[str]]:
        """
        ConfigMapName name of a ConfigMap used to mount a directory
        """
        return pulumi.get(self, "config_map_name")

    @config_map_name.setter
    def config_map_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_map_name", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigEnvArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None,
                 value_from: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigEnvValueFromArgs']] = None):
        """
        EnvVar represents an environment variable present in a Container.
        :param pulumi.Input[str] name: Name of the environment variable. Must be a C_IDENTIFIER.
        :param pulumi.Input[str] value: Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigEnvValueFromArgs'] value_from: Source for the environment variable's value. Cannot be used if value is not empty.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the environment variable. Must be a C_IDENTIFIER.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigEnvValueFromArgs']]:
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        """
        return pulumi.get(self, "value_from")

    @value_from.setter
    def value_from(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigEnvValueFromArgs']]):
        pulumi.set(self, "value_from", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigEnvValueFromArgs:
    def __init__(__self__, *,
                 config_map_key_ref: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigEnvValueFromConfigMapKeyRefArgs']] = None,
                 field_ref: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigEnvValueFromFieldRefArgs']] = None,
                 resource_field_ref: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigEnvValueFromResourceFieldRefArgs']] = None,
                 secret_key_ref: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigEnvValueFromSecretKeyRefArgs']] = None):
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigEnvValueFromConfigMapKeyRefArgs'] config_map_key_ref: Selects a key of a ConfigMap.
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigEnvValueFromFieldRefArgs'] field_ref: Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigEnvValueFromResourceFieldRefArgs'] resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigEnvValueFromSecretKeyRefArgs'] secret_key_ref: Selects a key of a secret in the pod's namespace
        """
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigEnvValueFromConfigMapKeyRefArgs']]:
        """
        Selects a key of a ConfigMap.
        """
        return pulumi.get(self, "config_map_key_ref")

    @config_map_key_ref.setter
    def config_map_key_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigEnvValueFromConfigMapKeyRefArgs']]):
        pulumi.set(self, "config_map_key_ref", value)

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigEnvValueFromFieldRefArgs']]:
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        """
        return pulumi.get(self, "field_ref")

    @field_ref.setter
    def field_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigEnvValueFromFieldRefArgs']]):
        pulumi.set(self, "field_ref", value)

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigEnvValueFromResourceFieldRefArgs']]:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    @resource_field_ref.setter
    def resource_field_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigEnvValueFromResourceFieldRefArgs']]):
        pulumi.set(self, "resource_field_ref", value)

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigEnvValueFromSecretKeyRefArgs']]:
        """
        Selects a key of a secret in the pod's namespace
        """
        return pulumi.get(self, "secret_key_ref")

    @secret_key_ref.setter
    def secret_key_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigEnvValueFromSecretKeyRefArgs']]):
        pulumi.set(self, "secret_key_ref", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigEnvValueFromConfigMapKeyRefArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        Selects a key of a ConfigMap.
        :param pulumi.Input[str] key: The key to select.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the ConfigMap or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key to select.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the ConfigMap or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigEnvValueFromFieldRefArgs:
    def __init__(__self__, *,
                 field_path: pulumi.Input[str],
                 api_version: Optional[pulumi.Input[str]] = None):
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param pulumi.Input[str] field_path: Path of the field to select in the specified API version.
        :param pulumi.Input[str] api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> pulumi.Input[str]:
        """
        Path of the field to select in the specified API version.
        """
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_path", value)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigEnvValueFromResourceFieldRefArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 container_name: Optional[pulumi.Input[str]] = None,
                 divisor: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigEnvValueFromResourceFieldRefDivisorArgs']] = None):
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param pulumi.Input[str] resource: Required: resource to select
        :param pulumi.Input[str] container_name: Container name: required for volumes, optional for env vars
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigEnvValueFromResourceFieldRefDivisorArgs'] divisor: Specifies the output format of the exposed resources, defaults to "1"
        """
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        """
        Required: resource to select
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Container name: required for volumes, optional for env vars
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter
    def divisor(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigEnvValueFromResourceFieldRefDivisorArgs']]:
        """
        Specifies the output format of the exposed resources, defaults to "1"
        """
        return pulumi.get(self, "divisor")

    @divisor.setter
    def divisor(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigEnvValueFromResourceFieldRefDivisorArgs']]):
        pulumi.set(self, "divisor", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigEnvValueFromResourceFieldRefDivisorArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigEnvValueFromSecretKeyRefArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        Selects a key of a secret in the pod's namespace
        :param pulumi.Input[str] key: The key of the secret to select from.  Must be a valid secret key.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the Secret or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key of the secret to select from.  Must be a valid secret key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the Secret or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigExternalMetricsArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 use_datadog_metrics: Optional[pulumi.Input[bool]] = None):
        """
        ExternalMetricsConfig contains the configuration of the external metrics provider in Cluster Agent
        :param pulumi.Input[bool] enabled: Enable the metricsProvider to be able to scale based on metrics in Datadog
        :param pulumi.Input[int] port: If specified configures the metricsProvider external metrics service port
        :param pulumi.Input[bool] use_datadog_metrics: Enable usage of DatadogMetrics CRD (allow to scale on arbitrary queries)
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if use_datadog_metrics is not None:
            pulumi.set(__self__, "use_datadog_metrics", use_datadog_metrics)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable the metricsProvider to be able to scale based on metrics in Datadog
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        If specified configures the metricsProvider external metrics service port
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="useDatadogMetrics")
    def use_datadog_metrics(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable usage of DatadogMetrics CRD (allow to scale on arbitrary queries)
        """
        return pulumi.get(self, "use_datadog_metrics")

    @use_datadog_metrics.setter
    def use_datadog_metrics(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_datadog_metrics", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecClusterAgentConfigResourcesLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecClusterAgentConfigResourcesRequestsArgs']]]] = None):
        """
        Datadog cluster-agent resource requests and limits
        :param pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecClusterAgentConfigResourcesLimitsArgs']]] limits: Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecClusterAgentConfigResourcesRequestsArgs']]] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecClusterAgentConfigResourcesLimitsArgs']]]]:
        """
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecClusterAgentConfigResourcesLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecClusterAgentConfigResourcesRequestsArgs']]]]:
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecClusterAgentConfigResourcesRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigResourcesLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigResourcesRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumeMountsArgs:
    def __init__(__self__, *,
                 mount_path: pulumi.Input[str],
                 name: pulumi.Input[str],
                 mount_propagation: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 sub_path: Optional[pulumi.Input[str]] = None,
                 sub_path_expr: Optional[pulumi.Input[str]] = None):
        """
        VolumeMount describes a mounting of a Volume within a container.
        :param pulumi.Input[str] mount_path: Path within the container at which the volume should be mounted.  Must not contain ':'.
        :param pulumi.Input[str] name: This must match the Name of a Volume.
        :param pulumi.Input[str] mount_propagation: mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
        :param pulumi.Input[bool] read_only: Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
        :param pulumi.Input[str] sub_path: Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
        :param pulumi.Input[str] sub_path_expr: Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
        """
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> pulumi.Input[str]:
        """
        Path within the container at which the volume should be mounted.  Must not contain ':'.
        """
        return pulumi.get(self, "mount_path")

    @mount_path.setter
    def mount_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "mount_path", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        This must match the Name of a Volume.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[pulumi.Input[str]]:
        """
        mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
        """
        return pulumi.get(self, "mount_propagation")

    @mount_propagation.setter
    def mount_propagation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_propagation", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
        """
        return pulumi.get(self, "sub_path")

    @sub_path.setter
    def sub_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_path", value)

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[pulumi.Input[str]]:
        """
        Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
        """
        return pulumi.get(self, "sub_path_expr")

    @sub_path_expr.setter
    def sub_path_expr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_path_expr", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 aws_elastic_block_store: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesAwsElasticBlockStoreArgs']] = None,
                 azure_disk: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesAzureDiskArgs']] = None,
                 azure_file: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesAzureFileArgs']] = None,
                 cephfs: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesCephfsArgs']] = None,
                 cinder: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesCinderArgs']] = None,
                 config_map: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesConfigMapArgs']] = None,
                 csi: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesCsiArgs']] = None,
                 downward_api: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesDownwardAPIArgs']] = None,
                 empty_dir: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesEmptyDirArgs']] = None,
                 fc: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesFcArgs']] = None,
                 flex_volume: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesFlexVolumeArgs']] = None,
                 flocker: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesFlockerArgs']] = None,
                 gce_persistent_disk: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesGcePersistentDiskArgs']] = None,
                 git_repo: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesGitRepoArgs']] = None,
                 glusterfs: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesGlusterfsArgs']] = None,
                 host_path: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesHostPathArgs']] = None,
                 iscsi: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesIscsiArgs']] = None,
                 nfs: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesNfsArgs']] = None,
                 persistent_volume_claim: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesPersistentVolumeClaimArgs']] = None,
                 photon_persistent_disk: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesPhotonPersistentDiskArgs']] = None,
                 portworx_volume: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesPortworxVolumeArgs']] = None,
                 projected: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedArgs']] = None,
                 quobyte: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesQuobyteArgs']] = None,
                 rbd: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesRbdArgs']] = None,
                 scale_io: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesScaleIOArgs']] = None,
                 secret: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesSecretArgs']] = None,
                 storageos: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesStorageosArgs']] = None,
                 vsphere_volume: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesVsphereVolumeArgs']] = None):
        """
        Volume represents a named volume in a pod that may be accessed by any container in the pod.
        :param pulumi.Input[str] name: Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesAwsElasticBlockStoreArgs'] aws_elastic_block_store: AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesAzureDiskArgs'] azure_disk: AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesAzureFileArgs'] azure_file: AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesCephfsArgs'] cephfs: CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesCinderArgs'] cinder: Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesConfigMapArgs'] config_map: ConfigMap represents a configMap that should populate this volume
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesCsiArgs'] csi: CSI (Container Storage Interface) represents storage that is handled by an external CSI driver (Alpha feature).
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesDownwardAPIArgs'] downward_api: DownwardAPI represents downward API about the pod that should populate this volume
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesEmptyDirArgs'] empty_dir: EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesFcArgs'] fc: FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesFlexVolumeArgs'] flex_volume: FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesFlockerArgs'] flocker: Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesGcePersistentDiskArgs'] gce_persistent_disk: GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesGitRepoArgs'] git_repo: GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesGlusterfsArgs'] glusterfs: Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesHostPathArgs'] host_path: HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesIscsiArgs'] iscsi: ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesNfsArgs'] nfs: NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesPersistentVolumeClaimArgs'] persistent_volume_claim: PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesPhotonPersistentDiskArgs'] photon_persistent_disk: PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesPortworxVolumeArgs'] portworx_volume: PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedArgs'] projected: Items for all in one resources secrets, configmaps, and downward API
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesQuobyteArgs'] quobyte: Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesRbdArgs'] rbd: RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesScaleIOArgs'] scale_io: ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesSecretArgs'] secret: Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesStorageosArgs'] storageos: StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesVsphereVolumeArgs'] vsphere_volume: VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
        """
        pulumi.set(__self__, "name", name)
        if aws_elastic_block_store is not None:
            pulumi.set(__self__, "aws_elastic_block_store", aws_elastic_block_store)
        if azure_disk is not None:
            pulumi.set(__self__, "azure_disk", azure_disk)
        if azure_file is not None:
            pulumi.set(__self__, "azure_file", azure_file)
        if cephfs is not None:
            pulumi.set(__self__, "cephfs", cephfs)
        if cinder is not None:
            pulumi.set(__self__, "cinder", cinder)
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if csi is not None:
            pulumi.set(__self__, "csi", csi)
        if downward_api is not None:
            pulumi.set(__self__, "downward_api", downward_api)
        if empty_dir is not None:
            pulumi.set(__self__, "empty_dir", empty_dir)
        if fc is not None:
            pulumi.set(__self__, "fc", fc)
        if flex_volume is not None:
            pulumi.set(__self__, "flex_volume", flex_volume)
        if flocker is not None:
            pulumi.set(__self__, "flocker", flocker)
        if gce_persistent_disk is not None:
            pulumi.set(__self__, "gce_persistent_disk", gce_persistent_disk)
        if git_repo is not None:
            pulumi.set(__self__, "git_repo", git_repo)
        if glusterfs is not None:
            pulumi.set(__self__, "glusterfs", glusterfs)
        if host_path is not None:
            pulumi.set(__self__, "host_path", host_path)
        if iscsi is not None:
            pulumi.set(__self__, "iscsi", iscsi)
        if nfs is not None:
            pulumi.set(__self__, "nfs", nfs)
        if persistent_volume_claim is not None:
            pulumi.set(__self__, "persistent_volume_claim", persistent_volume_claim)
        if photon_persistent_disk is not None:
            pulumi.set(__self__, "photon_persistent_disk", photon_persistent_disk)
        if portworx_volume is not None:
            pulumi.set(__self__, "portworx_volume", portworx_volume)
        if projected is not None:
            pulumi.set(__self__, "projected", projected)
        if quobyte is not None:
            pulumi.set(__self__, "quobyte", quobyte)
        if rbd is not None:
            pulumi.set(__self__, "rbd", rbd)
        if scale_io is not None:
            pulumi.set(__self__, "scale_io", scale_io)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if storageos is not None:
            pulumi.set(__self__, "storageos", storageos)
        if vsphere_volume is not None:
            pulumi.set(__self__, "vsphere_volume", vsphere_volume)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="awsElasticBlockStore")
    def aws_elastic_block_store(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesAwsElasticBlockStoreArgs']]:
        """
        AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        """
        return pulumi.get(self, "aws_elastic_block_store")

    @aws_elastic_block_store.setter
    def aws_elastic_block_store(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesAwsElasticBlockStoreArgs']]):
        pulumi.set(self, "aws_elastic_block_store", value)

    @property
    @pulumi.getter(name="azureDisk")
    def azure_disk(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesAzureDiskArgs']]:
        """
        AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
        """
        return pulumi.get(self, "azure_disk")

    @azure_disk.setter
    def azure_disk(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesAzureDiskArgs']]):
        pulumi.set(self, "azure_disk", value)

    @property
    @pulumi.getter(name="azureFile")
    def azure_file(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesAzureFileArgs']]:
        """
        AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
        """
        return pulumi.get(self, "azure_file")

    @azure_file.setter
    def azure_file(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesAzureFileArgs']]):
        pulumi.set(self, "azure_file", value)

    @property
    @pulumi.getter
    def cephfs(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesCephfsArgs']]:
        """
        CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
        """
        return pulumi.get(self, "cephfs")

    @cephfs.setter
    def cephfs(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesCephfsArgs']]):
        pulumi.set(self, "cephfs", value)

    @property
    @pulumi.getter
    def cinder(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesCinderArgs']]:
        """
        Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        """
        return pulumi.get(self, "cinder")

    @cinder.setter
    def cinder(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesCinderArgs']]):
        pulumi.set(self, "cinder", value)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesConfigMapArgs']]:
        """
        ConfigMap represents a configMap that should populate this volume
        """
        return pulumi.get(self, "config_map")

    @config_map.setter
    def config_map(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesConfigMapArgs']]):
        pulumi.set(self, "config_map", value)

    @property
    @pulumi.getter
    def csi(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesCsiArgs']]:
        """
        CSI (Container Storage Interface) represents storage that is handled by an external CSI driver (Alpha feature).
        """
        return pulumi.get(self, "csi")

    @csi.setter
    def csi(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesCsiArgs']]):
        pulumi.set(self, "csi", value)

    @property
    @pulumi.getter(name="downwardAPI")
    def downward_api(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesDownwardAPIArgs']]:
        """
        DownwardAPI represents downward API about the pod that should populate this volume
        """
        return pulumi.get(self, "downward_api")

    @downward_api.setter
    def downward_api(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesDownwardAPIArgs']]):
        pulumi.set(self, "downward_api", value)

    @property
    @pulumi.getter(name="emptyDir")
    def empty_dir(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesEmptyDirArgs']]:
        """
        EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
        """
        return pulumi.get(self, "empty_dir")

    @empty_dir.setter
    def empty_dir(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesEmptyDirArgs']]):
        pulumi.set(self, "empty_dir", value)

    @property
    @pulumi.getter
    def fc(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesFcArgs']]:
        """
        FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
        """
        return pulumi.get(self, "fc")

    @fc.setter
    def fc(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesFcArgs']]):
        pulumi.set(self, "fc", value)

    @property
    @pulumi.getter(name="flexVolume")
    def flex_volume(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesFlexVolumeArgs']]:
        """
        FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
        """
        return pulumi.get(self, "flex_volume")

    @flex_volume.setter
    def flex_volume(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesFlexVolumeArgs']]):
        pulumi.set(self, "flex_volume", value)

    @property
    @pulumi.getter
    def flocker(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesFlockerArgs']]:
        """
        Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
        """
        return pulumi.get(self, "flocker")

    @flocker.setter
    def flocker(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesFlockerArgs']]):
        pulumi.set(self, "flocker", value)

    @property
    @pulumi.getter(name="gcePersistentDisk")
    def gce_persistent_disk(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesGcePersistentDiskArgs']]:
        """
        GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        return pulumi.get(self, "gce_persistent_disk")

    @gce_persistent_disk.setter
    def gce_persistent_disk(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesGcePersistentDiskArgs']]):
        pulumi.set(self, "gce_persistent_disk", value)

    @property
    @pulumi.getter(name="gitRepo")
    def git_repo(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesGitRepoArgs']]:
        """
        GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
        """
        return pulumi.get(self, "git_repo")

    @git_repo.setter
    def git_repo(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesGitRepoArgs']]):
        pulumi.set(self, "git_repo", value)

    @property
    @pulumi.getter
    def glusterfs(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesGlusterfsArgs']]:
        """
        Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
        """
        return pulumi.get(self, "glusterfs")

    @glusterfs.setter
    def glusterfs(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesGlusterfsArgs']]):
        pulumi.set(self, "glusterfs", value)

    @property
    @pulumi.getter(name="hostPath")
    def host_path(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesHostPathArgs']]:
        """
        HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
        """
        return pulumi.get(self, "host_path")

    @host_path.setter
    def host_path(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesHostPathArgs']]):
        pulumi.set(self, "host_path", value)

    @property
    @pulumi.getter
    def iscsi(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesIscsiArgs']]:
        """
        ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
        """
        return pulumi.get(self, "iscsi")

    @iscsi.setter
    def iscsi(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesIscsiArgs']]):
        pulumi.set(self, "iscsi", value)

    @property
    @pulumi.getter
    def nfs(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesNfsArgs']]:
        """
        NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
        return pulumi.get(self, "nfs")

    @nfs.setter
    def nfs(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesNfsArgs']]):
        pulumi.set(self, "nfs", value)

    @property
    @pulumi.getter(name="persistentVolumeClaim")
    def persistent_volume_claim(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesPersistentVolumeClaimArgs']]:
        """
        PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        """
        return pulumi.get(self, "persistent_volume_claim")

    @persistent_volume_claim.setter
    def persistent_volume_claim(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesPersistentVolumeClaimArgs']]):
        pulumi.set(self, "persistent_volume_claim", value)

    @property
    @pulumi.getter(name="photonPersistentDisk")
    def photon_persistent_disk(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesPhotonPersistentDiskArgs']]:
        """
        PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
        """
        return pulumi.get(self, "photon_persistent_disk")

    @photon_persistent_disk.setter
    def photon_persistent_disk(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesPhotonPersistentDiskArgs']]):
        pulumi.set(self, "photon_persistent_disk", value)

    @property
    @pulumi.getter(name="portworxVolume")
    def portworx_volume(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesPortworxVolumeArgs']]:
        """
        PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
        """
        return pulumi.get(self, "portworx_volume")

    @portworx_volume.setter
    def portworx_volume(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesPortworxVolumeArgs']]):
        pulumi.set(self, "portworx_volume", value)

    @property
    @pulumi.getter
    def projected(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedArgs']]:
        """
        Items for all in one resources secrets, configmaps, and downward API
        """
        return pulumi.get(self, "projected")

    @projected.setter
    def projected(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedArgs']]):
        pulumi.set(self, "projected", value)

    @property
    @pulumi.getter
    def quobyte(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesQuobyteArgs']]:
        """
        Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
        """
        return pulumi.get(self, "quobyte")

    @quobyte.setter
    def quobyte(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesQuobyteArgs']]):
        pulumi.set(self, "quobyte", value)

    @property
    @pulumi.getter
    def rbd(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesRbdArgs']]:
        """
        RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
        """
        return pulumi.get(self, "rbd")

    @rbd.setter
    def rbd(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesRbdArgs']]):
        pulumi.set(self, "rbd", value)

    @property
    @pulumi.getter(name="scaleIO")
    def scale_io(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesScaleIOArgs']]:
        """
        ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
        """
        return pulumi.get(self, "scale_io")

    @scale_io.setter
    def scale_io(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesScaleIOArgs']]):
        pulumi.set(self, "scale_io", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesSecretArgs']]:
        """
        Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesSecretArgs']]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def storageos(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesStorageosArgs']]:
        """
        StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
        """
        return pulumi.get(self, "storageos")

    @storageos.setter
    def storageos(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesStorageosArgs']]):
        pulumi.set(self, "storageos", value)

    @property
    @pulumi.getter(name="vsphereVolume")
    def vsphere_volume(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesVsphereVolumeArgs']]:
        """
        VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
        """
        return pulumi.get(self, "vsphere_volume")

    @vsphere_volume.setter
    def vsphere_volume(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesVsphereVolumeArgs']]):
        pulumi.set(self, "vsphere_volume", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesAwsElasticBlockStoreArgs:
    def __init__(__self__, *,
                 volume_id: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 partition: Optional[pulumi.Input[int]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        :param pulumi.Input[str] volume_id: Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        :param pulumi.Input[str] fs_type: Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
        :param pulumi.Input[int] partition: The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
        :param pulumi.Input[bool] read_only: Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        """
        pulumi.set(__self__, "volume_id", volume_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if partition is not None:
            pulumi.set(__self__, "partition", partition)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="volumeID")
    def volume_id(self) -> pulumi.Input[str]:
        """
        Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "volume_id", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter
    def partition(self) -> Optional[pulumi.Input[int]]:
        """
        The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
        """
        return pulumi.get(self, "partition")

    @partition.setter
    def partition(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "partition", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesAzureDiskArgs:
    def __init__(__self__, *,
                 disk_name: pulumi.Input[str],
                 disk_uri: pulumi.Input[str],
                 caching_mode: Optional[pulumi.Input[str]] = None,
                 fs_type: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
        :param pulumi.Input[str] disk_name: The Name of the data disk in the blob storage
        :param pulumi.Input[str] disk_uri: The URI the data disk in the blob storage
        :param pulumi.Input[str] caching_mode: Host Caching mode: None, Read Only, Read Write.
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        :param pulumi.Input[str] kind: Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
        :param pulumi.Input[bool] read_only: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        pulumi.set(__self__, "disk_name", disk_name)
        pulumi.set(__self__, "disk_uri", disk_uri)
        if caching_mode is not None:
            pulumi.set(__self__, "caching_mode", caching_mode)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="diskName")
    def disk_name(self) -> pulumi.Input[str]:
        """
        The Name of the data disk in the blob storage
        """
        return pulumi.get(self, "disk_name")

    @disk_name.setter
    def disk_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "disk_name", value)

    @property
    @pulumi.getter(name="diskURI")
    def disk_uri(self) -> pulumi.Input[str]:
        """
        The URI the data disk in the blob storage
        """
        return pulumi.get(self, "disk_uri")

    @disk_uri.setter
    def disk_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "disk_uri", value)

    @property
    @pulumi.getter(name="cachingMode")
    def caching_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Host Caching mode: None, Read Only, Read Write.
        """
        return pulumi.get(self, "caching_mode")

    @caching_mode.setter
    def caching_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "caching_mode", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesAzureFileArgs:
    def __init__(__self__, *,
                 secret_name: pulumi.Input[str],
                 share_name: pulumi.Input[str],
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
        :param pulumi.Input[str] secret_name: the name of secret that contains Azure Storage Account Name and Key
        :param pulumi.Input[str] share_name: Share Name
        :param pulumi.Input[bool] read_only: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        pulumi.set(__self__, "secret_name", secret_name)
        pulumi.set(__self__, "share_name", share_name)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[str]:
        """
        the name of secret that contains Azure Storage Account Name and Key
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_name", value)

    @property
    @pulumi.getter(name="shareName")
    def share_name(self) -> pulumi.Input[str]:
        """
        Share Name
        """
        return pulumi.get(self, "share_name")

    @share_name.setter
    def share_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "share_name", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesCephfsArgs:
    def __init__(__self__, *,
                 monitors: pulumi.Input[Sequence[pulumi.Input[str]]],
                 path: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 secret_file: Optional[pulumi.Input[str]] = None,
                 secret_ref: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesCephfsSecretRefArgs']] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
        :param pulumi.Input[Sequence[pulumi.Input[str]]] monitors: Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        :param pulumi.Input[str] path: Optional: Used as the mounted root, rather than the full Ceph tree, default is /
        :param pulumi.Input[bool] read_only: Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        :param pulumi.Input[str] secret_file: Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesCephfsSecretRefArgs'] secret_ref: Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        :param pulumi.Input[str] user: Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        pulumi.set(__self__, "monitors", monitors)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_file is not None:
            pulumi.set(__self__, "secret_file", secret_file)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def monitors(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        return pulumi.get(self, "monitors")

    @monitors.setter
    def monitors(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "monitors", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: Used as the mounted root, rather than the full Ceph tree, default is /
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="secretFile")
    def secret_file(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        return pulumi.get(self, "secret_file")

    @secret_file.setter
    def secret_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_file", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesCephfsSecretRefArgs']]:
        """
        Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesCephfsSecretRefArgs']]):
        pulumi.set(self, "secret_ref", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesCephfsSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesCinderArgs:
    def __init__(__self__, *,
                 volume_id: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 secret_ref: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesCinderSecretRefArgs']] = None):
        """
        Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        :param pulumi.Input[str] volume_id: volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        :param pulumi.Input[bool] read_only: Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesCinderSecretRefArgs'] secret_ref: Optional: points to a secret object containing parameters used to connect to OpenStack.
        """
        pulumi.set(__self__, "volume_id", volume_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter(name="volumeID")
    def volume_id(self) -> pulumi.Input[str]:
        """
        volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "volume_id", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesCinderSecretRefArgs']]:
        """
        Optional: points to a secret object containing parameters used to connect to OpenStack.
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesCinderSecretRefArgs']]):
        pulumi.set(self, "secret_ref", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesCinderSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Optional: points to a secret object containing parameters used to connect to OpenStack.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesConfigMapArgs:
    def __init__(__self__, *,
                 default_mode: Optional[pulumi.Input[int]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesConfigMapItemsArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        ConfigMap represents a configMap that should populate this volume
        :param pulumi.Input[int] default_mode: Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesConfigMapItemsArgs']]] items: If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the ConfigMap or its keys must be defined
        """
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[int]]:
        """
        Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_mode", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesConfigMapItemsArgs']]]]:
        """
        If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesConfigMapItemsArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the ConfigMap or its keys must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesConfigMapItemsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 path: pulumi.Input[str],
                 mode: Optional[pulumi.Input[int]] = None):
        """
        Maps a string key to a path within a volume.
        :param pulumi.Input[str] key: The key to project.
        :param pulumi.Input[str] path: The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        :param pulumi.Input[int] mode: Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key to project.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesCsiArgs:
    def __init__(__self__, *,
                 driver: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 node_publish_secret_ref: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesCsiNodePublishSecretRefArgs']] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 volume_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        CSI (Container Storage Interface) represents storage that is handled by an external CSI driver (Alpha feature).
        :param pulumi.Input[str] driver: Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesCsiNodePublishSecretRefArgs'] node_publish_secret_ref: NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
        :param pulumi.Input[bool] read_only: Specifies a read-only configuration for the volume. Defaults to false (read/write).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] volume_attributes: VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
        """
        pulumi.set(__self__, "driver", driver)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if node_publish_secret_ref is not None:
            pulumi.set(__self__, "node_publish_secret_ref", node_publish_secret_ref)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if volume_attributes is not None:
            pulumi.set(__self__, "volume_attributes", volume_attributes)

    @property
    @pulumi.getter
    def driver(self) -> pulumi.Input[str]:
        """
        Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
        """
        return pulumi.get(self, "driver")

    @driver.setter
    def driver(self, value: pulumi.Input[str]):
        pulumi.set(self, "driver", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter(name="nodePublishSecretRef")
    def node_publish_secret_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesCsiNodePublishSecretRefArgs']]:
        """
        NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
        """
        return pulumi.get(self, "node_publish_secret_ref")

    @node_publish_secret_ref.setter
    def node_publish_secret_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesCsiNodePublishSecretRefArgs']]):
        pulumi.set(self, "node_publish_secret_ref", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies a read-only configuration for the volume. Defaults to false (read/write).
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="volumeAttributes")
    def volume_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
        """
        return pulumi.get(self, "volume_attributes")

    @volume_attributes.setter
    def volume_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "volume_attributes", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesCsiNodePublishSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesDownwardAPIArgs:
    def __init__(__self__, *,
                 default_mode: Optional[pulumi.Input[int]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesDownwardAPIItemsArgs']]]] = None):
        """
        DownwardAPI represents downward API about the pod that should populate this volume
        :param pulumi.Input[int] default_mode: Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesDownwardAPIItemsArgs']]] items: Items is a list of downward API volume file
        """
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[int]]:
        """
        Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_mode", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesDownwardAPIItemsArgs']]]]:
        """
        Items is a list of downward API volume file
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesDownwardAPIItemsArgs']]]]):
        pulumi.set(self, "items", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesDownwardAPIItemsArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 field_ref: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesDownwardAPIItemsFieldRefArgs']] = None,
                 mode: Optional[pulumi.Input[int]] = None,
                 resource_field_ref: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesDownwardAPIItemsResourceFieldRefArgs']] = None):
        """
        DownwardAPIVolumeFile represents information to create the file containing the pod field
        :param pulumi.Input[str] path: Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesDownwardAPIItemsFieldRefArgs'] field_ref: Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
        :param pulumi.Input[int] mode: Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesDownwardAPIItemsResourceFieldRefArgs'] resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        """
        pulumi.set(__self__, "path", path)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesDownwardAPIItemsFieldRefArgs']]:
        """
        Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
        """
        return pulumi.get(self, "field_ref")

    @field_ref.setter
    def field_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesDownwardAPIItemsFieldRefArgs']]):
        pulumi.set(self, "field_ref", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesDownwardAPIItemsResourceFieldRefArgs']]:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    @resource_field_ref.setter
    def resource_field_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesDownwardAPIItemsResourceFieldRefArgs']]):
        pulumi.set(self, "resource_field_ref", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesDownwardAPIItemsFieldRefArgs:
    def __init__(__self__, *,
                 field_path: pulumi.Input[str],
                 api_version: Optional[pulumi.Input[str]] = None):
        """
        Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
        :param pulumi.Input[str] field_path: Path of the field to select in the specified API version.
        :param pulumi.Input[str] api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> pulumi.Input[str]:
        """
        Path of the field to select in the specified API version.
        """
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_path", value)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesDownwardAPIItemsResourceFieldRefArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 container_name: Optional[pulumi.Input[str]] = None,
                 divisor: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesDownwardAPIItemsResourceFieldRefDivisorArgs']] = None):
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        :param pulumi.Input[str] resource: Required: resource to select
        :param pulumi.Input[str] container_name: Container name: required for volumes, optional for env vars
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesDownwardAPIItemsResourceFieldRefDivisorArgs'] divisor: Specifies the output format of the exposed resources, defaults to "1"
        """
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        """
        Required: resource to select
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Container name: required for volumes, optional for env vars
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter
    def divisor(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesDownwardAPIItemsResourceFieldRefDivisorArgs']]:
        """
        Specifies the output format of the exposed resources, defaults to "1"
        """
        return pulumi.get(self, "divisor")

    @divisor.setter
    def divisor(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesDownwardAPIItemsResourceFieldRefDivisorArgs']]):
        pulumi.set(self, "divisor", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesDownwardAPIItemsResourceFieldRefDivisorArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesEmptyDirArgs:
    def __init__(__self__, *,
                 medium: Optional[pulumi.Input[str]] = None,
                 size_limit: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesEmptyDirSizeLimitArgs']] = None):
        """
        EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
        :param pulumi.Input[str] medium: What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesEmptyDirSizeLimitArgs'] size_limit: Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
        """
        if medium is not None:
            pulumi.set(__self__, "medium", medium)
        if size_limit is not None:
            pulumi.set(__self__, "size_limit", size_limit)

    @property
    @pulumi.getter
    def medium(self) -> Optional[pulumi.Input[str]]:
        """
        What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
        """
        return pulumi.get(self, "medium")

    @medium.setter
    def medium(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "medium", value)

    @property
    @pulumi.getter(name="sizeLimit")
    def size_limit(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesEmptyDirSizeLimitArgs']]:
        """
        Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
        """
        return pulumi.get(self, "size_limit")

    @size_limit.setter
    def size_limit(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesEmptyDirSizeLimitArgs']]):
        pulumi.set(self, "size_limit", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesEmptyDirSizeLimitArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesFcArgs:
    def __init__(__self__, *,
                 fs_type: Optional[pulumi.Input[str]] = None,
                 lun: Optional[pulumi.Input[int]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 target_wwns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 wwids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
        :param pulumi.Input[int] lun: Optional: FC target lun number
        :param pulumi.Input[bool] read_only: Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] target_wwns: Optional: FC target worldwide names (WWNs)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] wwids: Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
        """
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if lun is not None:
            pulumi.set(__self__, "lun", lun)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if target_wwns is not None:
            pulumi.set(__self__, "target_wwns", target_wwns)
        if wwids is not None:
            pulumi.set(__self__, "wwids", wwids)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter
    def lun(self) -> Optional[pulumi.Input[int]]:
        """
        Optional: FC target lun number
        """
        return pulumi.get(self, "lun")

    @lun.setter
    def lun(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lun", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="targetWWNs")
    def target_wwns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Optional: FC target worldwide names (WWNs)
        """
        return pulumi.get(self, "target_wwns")

    @target_wwns.setter
    def target_wwns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "target_wwns", value)

    @property
    @pulumi.getter
    def wwids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
        """
        return pulumi.get(self, "wwids")

    @wwids.setter
    def wwids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "wwids", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesFlexVolumeArgs:
    def __init__(__self__, *,
                 driver: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 secret_ref: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesFlexVolumeSecretRefArgs']] = None):
        """
        FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
        :param pulumi.Input[str] driver: Driver is the name of the driver to use for this volume.
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] options: Optional: Extra command options if any.
        :param pulumi.Input[bool] read_only: Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesFlexVolumeSecretRefArgs'] secret_ref: Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
        """
        pulumi.set(__self__, "driver", driver)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter
    def driver(self) -> pulumi.Input[str]:
        """
        Driver is the name of the driver to use for this volume.
        """
        return pulumi.get(self, "driver")

    @driver.setter
    def driver(self, value: pulumi.Input[str]):
        pulumi.set(self, "driver", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Optional: Extra command options if any.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesFlexVolumeSecretRefArgs']]:
        """
        Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesFlexVolumeSecretRefArgs']]):
        pulumi.set(self, "secret_ref", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesFlexVolumeSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesFlockerArgs:
    def __init__(__self__, *,
                 dataset_name: Optional[pulumi.Input[str]] = None,
                 dataset_uuid: Optional[pulumi.Input[str]] = None):
        """
        Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
        :param pulumi.Input[str] dataset_name: Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
        :param pulumi.Input[str] dataset_uuid: UUID of the dataset. This is unique identifier of a Flocker dataset
        """
        if dataset_name is not None:
            pulumi.set(__self__, "dataset_name", dataset_name)
        if dataset_uuid is not None:
            pulumi.set(__self__, "dataset_uuid", dataset_uuid)

    @property
    @pulumi.getter(name="datasetName")
    def dataset_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
        """
        return pulumi.get(self, "dataset_name")

    @dataset_name.setter
    def dataset_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataset_name", value)

    @property
    @pulumi.getter(name="datasetUUID")
    def dataset_uuid(self) -> Optional[pulumi.Input[str]]:
        """
        UUID of the dataset. This is unique identifier of a Flocker dataset
        """
        return pulumi.get(self, "dataset_uuid")

    @dataset_uuid.setter
    def dataset_uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataset_uuid", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesGcePersistentDiskArgs:
    def __init__(__self__, *,
                 pd_name: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 partition: Optional[pulumi.Input[int]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        :param pulumi.Input[str] pd_name: Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        :param pulumi.Input[str] fs_type: Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
        :param pulumi.Input[int] partition: The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        :param pulumi.Input[bool] read_only: ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        pulumi.set(__self__, "pd_name", pd_name)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if partition is not None:
            pulumi.set(__self__, "partition", partition)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="pdName")
    def pd_name(self) -> pulumi.Input[str]:
        """
        Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        return pulumi.get(self, "pd_name")

    @pd_name.setter
    def pd_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "pd_name", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter
    def partition(self) -> Optional[pulumi.Input[int]]:
        """
        The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        return pulumi.get(self, "partition")

    @partition.setter
    def partition(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "partition", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesGitRepoArgs:
    def __init__(__self__, *,
                 repository: pulumi.Input[str],
                 directory: Optional[pulumi.Input[str]] = None,
                 revision: Optional[pulumi.Input[str]] = None):
        """
        GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
        :param pulumi.Input[str] repository: Repository URL
        :param pulumi.Input[str] directory: Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
        :param pulumi.Input[str] revision: Commit hash for the specified revision.
        """
        pulumi.set(__self__, "repository", repository)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)

    @property
    @pulumi.getter
    def repository(self) -> pulumi.Input[str]:
        """
        Repository URL
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter
    def directory(self) -> Optional[pulumi.Input[str]]:
        """
        Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
        """
        return pulumi.get(self, "directory")

    @directory.setter
    def directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "directory", value)

    @property
    @pulumi.getter
    def revision(self) -> Optional[pulumi.Input[str]]:
        """
        Commit hash for the specified revision.
        """
        return pulumi.get(self, "revision")

    @revision.setter
    def revision(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revision", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesGlusterfsArgs:
    def __init__(__self__, *,
                 endpoints: pulumi.Input[str],
                 path: pulumi.Input[str],
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
        :param pulumi.Input[str] endpoints: EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        :param pulumi.Input[str] path: Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        :param pulumi.Input[bool] read_only: ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        """
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter
    def endpoints(self) -> pulumi.Input[str]:
        """
        EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        """
        return pulumi.get(self, "endpoints")

    @endpoints.setter
    def endpoints(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoints", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesHostPathArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 type: Optional[pulumi.Input[str]] = None):
        """
        HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
        :param pulumi.Input[str] path: Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        :param pulumi.Input[str] type: Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        """
        pulumi.set(__self__, "path", path)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesIscsiArgs:
    def __init__(__self__, *,
                 iqn: pulumi.Input[str],
                 lun: pulumi.Input[int],
                 target_portal: pulumi.Input[str],
                 chap_auth_discovery: Optional[pulumi.Input[bool]] = None,
                 chap_auth_session: Optional[pulumi.Input[bool]] = None,
                 fs_type: Optional[pulumi.Input[str]] = None,
                 initiator_name: Optional[pulumi.Input[str]] = None,
                 iscsi_interface: Optional[pulumi.Input[str]] = None,
                 portals: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 secret_ref: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesIscsiSecretRefArgs']] = None):
        """
        ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
        :param pulumi.Input[str] iqn: Target iSCSI Qualified Name.
        :param pulumi.Input[int] lun: iSCSI Target Lun number.
        :param pulumi.Input[str] target_portal: iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
        :param pulumi.Input[bool] chap_auth_discovery: whether support iSCSI Discovery CHAP authentication
        :param pulumi.Input[bool] chap_auth_session: whether support iSCSI Session CHAP authentication
        :param pulumi.Input[str] fs_type: Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
        :param pulumi.Input[str] initiator_name: Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
        :param pulumi.Input[str] iscsi_interface: iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] portals: iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
        :param pulumi.Input[bool] read_only: ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesIscsiSecretRefArgs'] secret_ref: CHAP Secret for iSCSI target and initiator authentication
        """
        pulumi.set(__self__, "iqn", iqn)
        pulumi.set(__self__, "lun", lun)
        pulumi.set(__self__, "target_portal", target_portal)
        if chap_auth_discovery is not None:
            pulumi.set(__self__, "chap_auth_discovery", chap_auth_discovery)
        if chap_auth_session is not None:
            pulumi.set(__self__, "chap_auth_session", chap_auth_session)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if initiator_name is not None:
            pulumi.set(__self__, "initiator_name", initiator_name)
        if iscsi_interface is not None:
            pulumi.set(__self__, "iscsi_interface", iscsi_interface)
        if portals is not None:
            pulumi.set(__self__, "portals", portals)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter
    def iqn(self) -> pulumi.Input[str]:
        """
        Target iSCSI Qualified Name.
        """
        return pulumi.get(self, "iqn")

    @iqn.setter
    def iqn(self, value: pulumi.Input[str]):
        pulumi.set(self, "iqn", value)

    @property
    @pulumi.getter
    def lun(self) -> pulumi.Input[int]:
        """
        iSCSI Target Lun number.
        """
        return pulumi.get(self, "lun")

    @lun.setter
    def lun(self, value: pulumi.Input[int]):
        pulumi.set(self, "lun", value)

    @property
    @pulumi.getter(name="targetPortal")
    def target_portal(self) -> pulumi.Input[str]:
        """
        iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
        """
        return pulumi.get(self, "target_portal")

    @target_portal.setter
    def target_portal(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_portal", value)

    @property
    @pulumi.getter(name="chapAuthDiscovery")
    def chap_auth_discovery(self) -> Optional[pulumi.Input[bool]]:
        """
        whether support iSCSI Discovery CHAP authentication
        """
        return pulumi.get(self, "chap_auth_discovery")

    @chap_auth_discovery.setter
    def chap_auth_discovery(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "chap_auth_discovery", value)

    @property
    @pulumi.getter(name="chapAuthSession")
    def chap_auth_session(self) -> Optional[pulumi.Input[bool]]:
        """
        whether support iSCSI Session CHAP authentication
        """
        return pulumi.get(self, "chap_auth_session")

    @chap_auth_session.setter
    def chap_auth_session(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "chap_auth_session", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter(name="initiatorName")
    def initiator_name(self) -> Optional[pulumi.Input[str]]:
        """
        Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
        """
        return pulumi.get(self, "initiator_name")

    @initiator_name.setter
    def initiator_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "initiator_name", value)

    @property
    @pulumi.getter(name="iscsiInterface")
    def iscsi_interface(self) -> Optional[pulumi.Input[str]]:
        """
        iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
        """
        return pulumi.get(self, "iscsi_interface")

    @iscsi_interface.setter
    def iscsi_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iscsi_interface", value)

    @property
    @pulumi.getter
    def portals(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
        """
        return pulumi.get(self, "portals")

    @portals.setter
    def portals(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "portals", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesIscsiSecretRefArgs']]:
        """
        CHAP Secret for iSCSI target and initiator authentication
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesIscsiSecretRefArgs']]):
        pulumi.set(self, "secret_ref", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesIscsiSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        CHAP Secret for iSCSI target and initiator authentication
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesNfsArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 server: pulumi.Input[str],
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        :param pulumi.Input[str] path: Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        :param pulumi.Input[str] server: Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        :param pulumi.Input[bool] read_only: ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "server", server)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def server(self) -> pulumi.Input[str]:
        """
        Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input[str]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesPersistentVolumeClaimArgs:
    def __init__(__self__, *,
                 claim_name: pulumi.Input[str],
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        :param pulumi.Input[str] claim_name: ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        :param pulumi.Input[bool] read_only: Will force the ReadOnly setting in VolumeMounts. Default false.
        """
        pulumi.set(__self__, "claim_name", claim_name)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="claimName")
    def claim_name(self) -> pulumi.Input[str]:
        """
        ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        """
        return pulumi.get(self, "claim_name")

    @claim_name.setter
    def claim_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "claim_name", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Will force the ReadOnly setting in VolumeMounts. Default false.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesPhotonPersistentDiskArgs:
    def __init__(__self__, *,
                 pd_id: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None):
        """
        PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
        :param pulumi.Input[str] pd_id: ID that identifies Photon Controller persistent disk
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        pulumi.set(__self__, "pd_id", pd_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)

    @property
    @pulumi.getter(name="pdID")
    def pd_id(self) -> pulumi.Input[str]:
        """
        ID that identifies Photon Controller persistent disk
        """
        return pulumi.get(self, "pd_id")

    @pd_id.setter
    def pd_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "pd_id", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesPortworxVolumeArgs:
    def __init__(__self__, *,
                 volume_id: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
        :param pulumi.Input[str] volume_id: VolumeID uniquely identifies a Portworx volume
        :param pulumi.Input[str] fs_type: FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
        :param pulumi.Input[bool] read_only: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        pulumi.set(__self__, "volume_id", volume_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="volumeID")
    def volume_id(self) -> pulumi.Input[str]:
        """
        VolumeID uniquely identifies a Portworx volume
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "volume_id", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesProjectedArgs:
    def __init__(__self__, *,
                 sources: pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesArgs']]],
                 default_mode: Optional[pulumi.Input[int]] = None):
        """
        Items for all in one resources secrets, configmaps, and downward API
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesArgs']]] sources: list of volume projections
        :param pulumi.Input[int] default_mode: Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        pulumi.set(__self__, "sources", sources)
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesArgs']]]:
        """
        list of volume projections
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesArgs']]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[int]]:
        """
        Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_mode", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesArgs:
    def __init__(__self__, *,
                 config_map: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesConfigMapArgs']] = None,
                 downward_api: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesDownwardAPIArgs']] = None,
                 secret: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesSecretArgs']] = None,
                 service_account_token: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesServiceAccountTokenArgs']] = None):
        """
        Projection that may be projected along with other supported volume types
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesConfigMapArgs'] config_map: information about the configMap data to project
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesDownwardAPIArgs'] downward_api: information about the downwardAPI data to project
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesSecretArgs'] secret: information about the secret data to project
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesServiceAccountTokenArgs'] service_account_token: information about the serviceAccountToken data to project
        """
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if downward_api is not None:
            pulumi.set(__self__, "downward_api", downward_api)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if service_account_token is not None:
            pulumi.set(__self__, "service_account_token", service_account_token)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesConfigMapArgs']]:
        """
        information about the configMap data to project
        """
        return pulumi.get(self, "config_map")

    @config_map.setter
    def config_map(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesConfigMapArgs']]):
        pulumi.set(self, "config_map", value)

    @property
    @pulumi.getter(name="downwardAPI")
    def downward_api(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesDownwardAPIArgs']]:
        """
        information about the downwardAPI data to project
        """
        return pulumi.get(self, "downward_api")

    @downward_api.setter
    def downward_api(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesDownwardAPIArgs']]):
        pulumi.set(self, "downward_api", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesSecretArgs']]:
        """
        information about the secret data to project
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesSecretArgs']]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter(name="serviceAccountToken")
    def service_account_token(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesServiceAccountTokenArgs']]:
        """
        information about the serviceAccountToken data to project
        """
        return pulumi.get(self, "service_account_token")

    @service_account_token.setter
    def service_account_token(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesServiceAccountTokenArgs']]):
        pulumi.set(self, "service_account_token", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesConfigMapArgs:
    def __init__(__self__, *,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesConfigMapItemsArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        information about the configMap data to project
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesConfigMapItemsArgs']]] items: If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the ConfigMap or its keys must be defined
        """
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesConfigMapItemsArgs']]]]:
        """
        If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesConfigMapItemsArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the ConfigMap or its keys must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesConfigMapItemsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 path: pulumi.Input[str],
                 mode: Optional[pulumi.Input[int]] = None):
        """
        Maps a string key to a path within a volume.
        :param pulumi.Input[str] key: The key to project.
        :param pulumi.Input[str] path: The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        :param pulumi.Input[int] mode: Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key to project.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesDownwardAPIArgs:
    def __init__(__self__, *,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesDownwardAPIItemsArgs']]]] = None):
        """
        information about the downwardAPI data to project
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesDownwardAPIItemsArgs']]] items: Items is a list of DownwardAPIVolume file
        """
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesDownwardAPIItemsArgs']]]]:
        """
        Items is a list of DownwardAPIVolume file
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesDownwardAPIItemsArgs']]]]):
        pulumi.set(self, "items", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesDownwardAPIItemsArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 field_ref: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs']] = None,
                 mode: Optional[pulumi.Input[int]] = None,
                 resource_field_ref: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs']] = None):
        """
        DownwardAPIVolumeFile represents information to create the file containing the pod field
        :param pulumi.Input[str] path: Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs'] field_ref: Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
        :param pulumi.Input[int] mode: Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs'] resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        """
        pulumi.set(__self__, "path", path)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs']]:
        """
        Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
        """
        return pulumi.get(self, "field_ref")

    @field_ref.setter
    def field_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs']]):
        pulumi.set(self, "field_ref", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs']]:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    @resource_field_ref.setter
    def resource_field_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs']]):
        pulumi.set(self, "resource_field_ref", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs:
    def __init__(__self__, *,
                 field_path: pulumi.Input[str],
                 api_version: Optional[pulumi.Input[str]] = None):
        """
        Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
        :param pulumi.Input[str] field_path: Path of the field to select in the specified API version.
        :param pulumi.Input[str] api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> pulumi.Input[str]:
        """
        Path of the field to select in the specified API version.
        """
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_path", value)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 container_name: Optional[pulumi.Input[str]] = None,
                 divisor: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisorArgs']] = None):
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        :param pulumi.Input[str] resource: Required: resource to select
        :param pulumi.Input[str] container_name: Container name: required for volumes, optional for env vars
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisorArgs'] divisor: Specifies the output format of the exposed resources, defaults to "1"
        """
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        """
        Required: resource to select
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Container name: required for volumes, optional for env vars
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter
    def divisor(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisorArgs']]:
        """
        Specifies the output format of the exposed resources, defaults to "1"
        """
        return pulumi.get(self, "divisor")

    @divisor.setter
    def divisor(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisorArgs']]):
        pulumi.set(self, "divisor", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisorArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesSecretArgs:
    def __init__(__self__, *,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesSecretItemsArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        information about the secret data to project
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesSecretItemsArgs']]] items: If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the Secret or its key must be defined
        """
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesSecretItemsArgs']]]]:
        """
        If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesSecretItemsArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the Secret or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesSecretItemsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 path: pulumi.Input[str],
                 mode: Optional[pulumi.Input[int]] = None):
        """
        Maps a string key to a path within a volume.
        :param pulumi.Input[str] key: The key to project.
        :param pulumi.Input[str] path: The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        :param pulumi.Input[int] mode: Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key to project.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesProjectedSourcesServiceAccountTokenArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 audience: Optional[pulumi.Input[str]] = None,
                 expiration_seconds: Optional[pulumi.Input[int]] = None):
        """
        information about the serviceAccountToken data to project
        :param pulumi.Input[str] path: Path is the path relative to the mount point of the file to project the token into.
        :param pulumi.Input[str] audience: Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
        :param pulumi.Input[int] expiration_seconds: ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
        """
        pulumi.set(__self__, "path", path)
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if expiration_seconds is not None:
            pulumi.set(__self__, "expiration_seconds", expiration_seconds)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Path is the path relative to the mount point of the file to project the token into.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def audience(self) -> Optional[pulumi.Input[str]]:
        """
        Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
        """
        return pulumi.get(self, "audience")

    @audience.setter
    def audience(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audience", value)

    @property
    @pulumi.getter(name="expirationSeconds")
    def expiration_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
        """
        return pulumi.get(self, "expiration_seconds")

    @expiration_seconds.setter
    def expiration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "expiration_seconds", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesQuobyteArgs:
    def __init__(__self__, *,
                 registry: pulumi.Input[str],
                 volume: pulumi.Input[str],
                 group: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 tenant: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
        :param pulumi.Input[str] registry: Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
        :param pulumi.Input[str] volume: Volume is a string that references an already created Quobyte volume by name.
        :param pulumi.Input[str] group: Group to map volume access to Default is no group
        :param pulumi.Input[bool] read_only: ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
        :param pulumi.Input[str] tenant: Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
        :param pulumi.Input[str] user: User to map volume access to Defaults to serivceaccount user
        """
        pulumi.set(__self__, "registry", registry)
        pulumi.set(__self__, "volume", volume)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if tenant is not None:
            pulumi.set(__self__, "tenant", tenant)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def registry(self) -> pulumi.Input[str]:
        """
        Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
        """
        return pulumi.get(self, "registry")

    @registry.setter
    def registry(self, value: pulumi.Input[str]):
        pulumi.set(self, "registry", value)

    @property
    @pulumi.getter
    def volume(self) -> pulumi.Input[str]:
        """
        Volume is a string that references an already created Quobyte volume by name.
        """
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: pulumi.Input[str]):
        pulumi.set(self, "volume", value)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        """
        Group to map volume access to Default is no group
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter
    def tenant(self) -> Optional[pulumi.Input[str]]:
        """
        Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
        """
        return pulumi.get(self, "tenant")

    @tenant.setter
    def tenant(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        User to map volume access to Defaults to serivceaccount user
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesRbdArgs:
    def __init__(__self__, *,
                 image: pulumi.Input[str],
                 monitors: pulumi.Input[Sequence[pulumi.Input[str]]],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 keyring: Optional[pulumi.Input[str]] = None,
                 pool: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 secret_ref: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesRbdSecretRefArgs']] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
        :param pulumi.Input[str] image: The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input[Sequence[pulumi.Input[str]]] monitors: A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input[str] fs_type: Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
        :param pulumi.Input[str] keyring: Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input[str] pool: The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input[bool] read_only: ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesRbdSecretRefArgs'] secret_ref: SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input[str] user: The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "monitors", monitors)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if keyring is not None:
            pulumi.set(__self__, "keyring", keyring)
        if pool is not None:
            pulumi.set(__self__, "pool", pool)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input[str]:
        """
        The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[str]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def monitors(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        return pulumi.get(self, "monitors")

    @monitors.setter
    def monitors(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "monitors", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter
    def keyring(self) -> Optional[pulumi.Input[str]]:
        """
        Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        return pulumi.get(self, "keyring")

    @keyring.setter
    def keyring(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keyring", value)

    @property
    @pulumi.getter
    def pool(self) -> Optional[pulumi.Input[str]]:
        """
        The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        return pulumi.get(self, "pool")

    @pool.setter
    def pool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pool", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesRbdSecretRefArgs']]:
        """
        SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesRbdSecretRefArgs']]):
        pulumi.set(self, "secret_ref", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesRbdSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesScaleIOArgs:
    def __init__(__self__, *,
                 gateway: pulumi.Input[str],
                 secret_ref: pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesScaleIOSecretRefArgs'],
                 system: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 protection_domain: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 ssl_enabled: Optional[pulumi.Input[bool]] = None,
                 storage_mode: Optional[pulumi.Input[str]] = None,
                 storage_pool: Optional[pulumi.Input[str]] = None,
                 volume_name: Optional[pulumi.Input[str]] = None):
        """
        ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
        :param pulumi.Input[str] gateway: The host address of the ScaleIO API Gateway.
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesScaleIOSecretRefArgs'] secret_ref: SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
        :param pulumi.Input[str] system: The name of the storage system as configured in ScaleIO.
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
        :param pulumi.Input[str] protection_domain: The name of the ScaleIO Protection Domain for the configured storage.
        :param pulumi.Input[bool] read_only: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        :param pulumi.Input[bool] ssl_enabled: Flag to enable/disable SSL communication with Gateway, default false
        :param pulumi.Input[str] storage_mode: Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
        :param pulumi.Input[str] storage_pool: The ScaleIO Storage Pool associated with the protection domain.
        :param pulumi.Input[str] volume_name: The name of a volume already created in the ScaleIO system that is associated with this volume source.
        """
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "secret_ref", secret_ref)
        pulumi.set(__self__, "system", system)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if protection_domain is not None:
            pulumi.set(__self__, "protection_domain", protection_domain)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if ssl_enabled is not None:
            pulumi.set(__self__, "ssl_enabled", ssl_enabled)
        if storage_mode is not None:
            pulumi.set(__self__, "storage_mode", storage_mode)
        if storage_pool is not None:
            pulumi.set(__self__, "storage_pool", storage_pool)
        if volume_name is not None:
            pulumi.set(__self__, "volume_name", volume_name)

    @property
    @pulumi.getter
    def gateway(self) -> pulumi.Input[str]:
        """
        The host address of the ScaleIO API Gateway.
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: pulumi.Input[str]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesScaleIOSecretRefArgs']:
        """
        SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesScaleIOSecretRefArgs']):
        pulumi.set(self, "secret_ref", value)

    @property
    @pulumi.getter
    def system(self) -> pulumi.Input[str]:
        """
        The name of the storage system as configured in ScaleIO.
        """
        return pulumi.get(self, "system")

    @system.setter
    def system(self, value: pulumi.Input[str]):
        pulumi.set(self, "system", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter(name="protectionDomain")
    def protection_domain(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the ScaleIO Protection Domain for the configured storage.
        """
        return pulumi.get(self, "protection_domain")

    @protection_domain.setter
    def protection_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protection_domain", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="sslEnabled")
    def ssl_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to enable/disable SSL communication with Gateway, default false
        """
        return pulumi.get(self, "ssl_enabled")

    @ssl_enabled.setter
    def ssl_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl_enabled", value)

    @property
    @pulumi.getter(name="storageMode")
    def storage_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
        """
        return pulumi.get(self, "storage_mode")

    @storage_mode.setter
    def storage_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_mode", value)

    @property
    @pulumi.getter(name="storagePool")
    def storage_pool(self) -> Optional[pulumi.Input[str]]:
        """
        The ScaleIO Storage Pool associated with the protection domain.
        """
        return pulumi.get(self, "storage_pool")

    @storage_pool.setter
    def storage_pool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_pool", value)

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of a volume already created in the ScaleIO system that is associated with this volume source.
        """
        return pulumi.get(self, "volume_name")

    @volume_name.setter
    def volume_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_name", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesScaleIOSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesSecretArgs:
    def __init__(__self__, *,
                 default_mode: Optional[pulumi.Input[int]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesSecretItemsArgs']]]] = None,
                 optional: Optional[pulumi.Input[bool]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None):
        """
        Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
        :param pulumi.Input[int] default_mode: Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesSecretItemsArgs']]] items: If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        :param pulumi.Input[bool] optional: Specify whether the Secret or its keys must be defined
        :param pulumi.Input[str] secret_name: Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
        """
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[int]]:
        """
        Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_mode", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesSecretItemsArgs']]]]:
        """
        If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesSecretItemsArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the Secret or its keys must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesSecretItemsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 path: pulumi.Input[str],
                 mode: Optional[pulumi.Input[int]] = None):
        """
        Maps a string key to a path within a volume.
        :param pulumi.Input[str] key: The key to project.
        :param pulumi.Input[str] path: The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        :param pulumi.Input[int] mode: Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key to project.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesStorageosArgs:
    def __init__(__self__, *,
                 fs_type: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 secret_ref: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesStorageosSecretRefArgs']] = None,
                 volume_name: Optional[pulumi.Input[str]] = None,
                 volume_namespace: Optional[pulumi.Input[str]] = None):
        """
        StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        :param pulumi.Input[bool] read_only: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        :param pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesStorageosSecretRefArgs'] secret_ref: SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
        :param pulumi.Input[str] volume_name: VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
        :param pulumi.Input[str] volume_namespace: VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
        """
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if volume_name is not None:
            pulumi.set(__self__, "volume_name", volume_name)
        if volume_namespace is not None:
            pulumi.set(__self__, "volume_namespace", volume_namespace)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesStorageosSecretRefArgs']]:
        """
        SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentConfigVolumesStorageosSecretRefArgs']]):
        pulumi.set(self, "secret_ref", value)

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[pulumi.Input[str]]:
        """
        VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
        """
        return pulumi.get(self, "volume_name")

    @volume_name.setter
    def volume_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_name", value)

    @property
    @pulumi.getter(name="volumeNamespace")
    def volume_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
        """
        return pulumi.get(self, "volume_namespace")

    @volume_namespace.setter
    def volume_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_namespace", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesStorageosSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentConfigVolumesVsphereVolumeArgs:
    def __init__(__self__, *,
                 volume_path: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 storage_policy_id: Optional[pulumi.Input[str]] = None,
                 storage_policy_name: Optional[pulumi.Input[str]] = None):
        """
        VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
        :param pulumi.Input[str] volume_path: Path that identifies vSphere volume vmdk
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        :param pulumi.Input[str] storage_policy_id: Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
        :param pulumi.Input[str] storage_policy_name: Storage Policy Based Management (SPBM) profile name.
        """
        pulumi.set(__self__, "volume_path", volume_path)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if storage_policy_id is not None:
            pulumi.set(__self__, "storage_policy_id", storage_policy_id)
        if storage_policy_name is not None:
            pulumi.set(__self__, "storage_policy_name", storage_policy_name)

    @property
    @pulumi.getter(name="volumePath")
    def volume_path(self) -> pulumi.Input[str]:
        """
        Path that identifies vSphere volume vmdk
        """
        return pulumi.get(self, "volume_path")

    @volume_path.setter
    def volume_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "volume_path", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter(name="storagePolicyID")
    def storage_policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
        """
        return pulumi.get(self, "storage_policy_id")

    @storage_policy_id.setter
    def storage_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_policy_id", value)

    @property
    @pulumi.getter(name="storagePolicyName")
    def storage_policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        Storage Policy Based Management (SPBM) profile name.
        """
        return pulumi.get(self, "storage_policy_name")

    @storage_policy_name.setter
    def storage_policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_policy_name", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentCustomConfigArgs:
    def __init__(__self__, *,
                 config_data: Optional[pulumi.Input[str]] = None,
                 config_map: Optional[pulumi.Input['DatadogAgentSpecClusterAgentCustomConfigConfigMapArgs']] = None):
        """
        Allow to put custom configuration for the agent, corresponding to the datadog-cluster.yaml config file
        :param pulumi.Input[str] config_data: ConfigData corresponds to the configuration file content
        :param pulumi.Input['DatadogAgentSpecClusterAgentCustomConfigConfigMapArgs'] config_map: ConfigMap name of a ConfigMap used to mount the configuration file
        """
        if config_data is not None:
            pulumi.set(__self__, "config_data", config_data)
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)

    @property
    @pulumi.getter(name="configData")
    def config_data(self) -> Optional[pulumi.Input[str]]:
        """
        ConfigData corresponds to the configuration file content
        """
        return pulumi.get(self, "config_data")

    @config_data.setter
    def config_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_data", value)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterAgentCustomConfigConfigMapArgs']]:
        """
        ConfigMap name of a ConfigMap used to mount the configuration file
        """
        return pulumi.get(self, "config_map")

    @config_map.setter
    def config_map(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterAgentCustomConfigConfigMapArgs']]):
        pulumi.set(self, "config_map", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentCustomConfigConfigMapArgs:
    def __init__(__self__, *,
                 file_key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        ConfigMap name of a ConfigMap used to mount the configuration file
        :param pulumi.Input[str] file_key: FileKey corresponds to the key used in the ConfigMap.Data to store the configuration file content
        :param pulumi.Input[str] name: Name the ConfigMap name
        """
        if file_key is not None:
            pulumi.set(__self__, "file_key", file_key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="fileKey")
    def file_key(self) -> Optional[pulumi.Input[str]]:
        """
        FileKey corresponds to the key used in the ConfigMap.Data to store the configuration file content
        """
        return pulumi.get(self, "file_key")

    @file_key.setter
    def file_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name the ConfigMap name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentImageArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 pull_secrets: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentImagePullSecretsArgs']]]] = None):
        """
        The container image of the Datadog Cluster Agent
        :param pulumi.Input[str] name: Define the image to use Use "datadog/agent:latest" for Datadog Agent 6 Use "datadog/dogstatsd:latest" for Standalone Datadog Agent DogStatsD6 Use "datadog/cluster-agent:latest" for Datadog Cluster Agent
        :param pulumi.Input[str] pull_policy: The Kubernetes pull policy Use Always, Never or IfNotPresent
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentImagePullSecretsArgs']]] pull_secrets: It is possible to specify docker registry credentials See https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
        """
        pulumi.set(__self__, "name", name)
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if pull_secrets is not None:
            pulumi.set(__self__, "pull_secrets", pull_secrets)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Define the image to use Use "datadog/agent:latest" for Datadog Agent 6 Use "datadog/dogstatsd:latest" for Standalone Datadog Agent DogStatsD6 Use "datadog/cluster-agent:latest" for Datadog Cluster Agent
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        The Kubernetes pull policy Use Always, Never or IfNotPresent
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter(name="pullSecrets")
    def pull_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentImagePullSecretsArgs']]]]:
        """
        It is possible to specify docker registry credentials See https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
        """
        return pulumi.get(self, "pull_secrets")

    @pull_secrets.setter
    def pull_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterAgentImagePullSecretsArgs']]]]):
        pulumi.set(self, "pull_secrets", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentImagePullSecretsArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentRbacArgs:
    def __init__(__self__, *,
                 create: Optional[pulumi.Input[bool]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None):
        """
        RBAC configuration of the Datadog Cluster Agent
        :param pulumi.Input[bool] create: Used to configure RBAC resources creation
        :param pulumi.Input[str] service_account_name: Used to set up the service account name to use Ignored if the field Create is true
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)

    @property
    @pulumi.getter
    def create(self) -> Optional[pulumi.Input[bool]]:
        """
        Used to configure RBAC resources creation
        """
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        Used to set up the service account name to use Ignored if the field Create is true
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)


@pulumi.input_type
class DatadogAgentSpecClusterAgentTolerationsArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 toleration_seconds: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
        :param pulumi.Input[str] effect: Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        :param pulumi.Input[str] key: Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        :param pulumi.Input[str] operator: Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
        :param pulumi.Input[int] toleration_seconds: TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
        :param pulumi.Input[str] value: Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        """
        Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
        """
        return pulumi.get(self, "toleration_seconds")

    @toleration_seconds.setter
    def toleration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "toleration_seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerArgs:
    def __init__(__self__, *,
                 image: pulumi.Input['DatadogAgentSpecClusterChecksRunnerImageArgs'],
                 additional_annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 additional_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 affinity: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityArgs']] = None,
                 config: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigArgs']] = None,
                 custom_config: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerCustomConfigArgs']] = None,
                 deployment_name: Optional[pulumi.Input[str]] = None,
                 node_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 priority_class_name: Optional[pulumi.Input[str]] = None,
                 rbac: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerRbacArgs']] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerTolerationsArgs']]]] = None):
        """
        The desired state of the Cluster Checks Runner as a deployment
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerImageArgs'] image: The container image of the Datadog Cluster Checks Runner
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] additional_annotations: AdditionalAnnotations provide annotations that will be added to the cluster checks runner Pods.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] additional_labels: AdditionalLabels provide labels that will be added to the cluster checks runner Pods.
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityArgs'] affinity: If specified, the pod's scheduling constraints
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigArgs'] config: Agent configuration
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerCustomConfigArgs'] custom_config: Allow to put custom configuration for the agent, corresponding to the datadog.yaml config file See https://docs.datadoghq.com/agent/guide/agent-configuration-files/?tab=agentv6 for more details.
        :param pulumi.Input[str] deployment_name: Name of the cluster checks deployment to create or migrate from
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] node_selector: NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        :param pulumi.Input[str] priority_class_name: If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerRbacArgs'] rbac: RBAC configuration of the Datadog Cluster Checks Runner
        :param pulumi.Input[int] replicas: Number of the Cluster Agent replicas
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerTolerationsArgs']]] tolerations: If specified, the Cluster-Checks pod's tolerations.
        """
        pulumi.set(__self__, "image", image)
        if additional_annotations is not None:
            pulumi.set(__self__, "additional_annotations", additional_annotations)
        if additional_labels is not None:
            pulumi.set(__self__, "additional_labels", additional_labels)
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if custom_config is not None:
            pulumi.set(__self__, "custom_config", custom_config)
        if deployment_name is not None:
            pulumi.set(__self__, "deployment_name", deployment_name)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if rbac is not None:
            pulumi.set(__self__, "rbac", rbac)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input['DatadogAgentSpecClusterChecksRunnerImageArgs']:
        """
        The container image of the Datadog Cluster Checks Runner
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input['DatadogAgentSpecClusterChecksRunnerImageArgs']):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="additionalAnnotations")
    def additional_annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        AdditionalAnnotations provide annotations that will be added to the cluster checks runner Pods.
        """
        return pulumi.get(self, "additional_annotations")

    @additional_annotations.setter
    def additional_annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "additional_annotations", value)

    @property
    @pulumi.getter(name="additionalLabels")
    def additional_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        AdditionalLabels provide labels that will be added to the cluster checks runner Pods.
        """
        return pulumi.get(self, "additional_labels")

    @additional_labels.setter
    def additional_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "additional_labels", value)

    @property
    @pulumi.getter
    def affinity(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityArgs']]:
        """
        If specified, the pod's scheduling constraints
        """
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityArgs']]):
        pulumi.set(self, "affinity", value)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigArgs']]:
        """
        Agent configuration
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="customConfig")
    def custom_config(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerCustomConfigArgs']]:
        """
        Allow to put custom configuration for the agent, corresponding to the datadog.yaml config file See https://docs.datadoghq.com/agent/guide/agent-configuration-files/?tab=agentv6 for more details.
        """
        return pulumi.get(self, "custom_config")

    @custom_config.setter
    def custom_config(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerCustomConfigArgs']]):
        pulumi.set(self, "custom_config", value)

    @property
    @pulumi.getter(name="deploymentName")
    def deployment_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the cluster checks deployment to create or migrate from
        """
        return pulumi.get(self, "deployment_name")

    @deployment_name.setter
    def deployment_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deployment_name", value)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        """
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
        """
        return pulumi.get(self, "priority_class_name")

    @priority_class_name.setter
    def priority_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_class_name", value)

    @property
    @pulumi.getter
    def rbac(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerRbacArgs']]:
        """
        RBAC configuration of the Datadog Cluster Checks Runner
        """
        return pulumi.get(self, "rbac")

    @rbac.setter
    def rbac(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerRbacArgs']]):
        pulumi.set(self, "rbac", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        """
        Number of the Cluster Agent replicas
        """
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerTolerationsArgs']]]]:
        """
        If specified, the Cluster-Checks pod's tolerations.
        """
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerTolerationsArgs']]]]):
        pulumi.set(self, "tolerations", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerAffinityArgs:
    def __init__(__self__, *,
                 node_affinity: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityArgs']] = None,
                 pod_affinity: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityArgs']] = None,
                 pod_anti_affinity: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityArgs']] = None):
        """
        If specified, the pod's scheduling constraints
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityArgs'] node_affinity: Describes node affinity scheduling rules for the pod.
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityArgs'] pod_affinity: Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityArgs'] pod_anti_affinity: Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        """
        if node_affinity is not None:
            pulumi.set(__self__, "node_affinity", node_affinity)
        if pod_affinity is not None:
            pulumi.set(__self__, "pod_affinity", pod_affinity)
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityArgs']]:
        """
        Describes node affinity scheduling rules for the pod.
        """
        return pulumi.get(self, "node_affinity")

    @node_affinity.setter
    def node_affinity(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityArgs']]):
        pulumi.set(self, "node_affinity", value)

    @property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityArgs']]:
        """
        Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        """
        return pulumi.get(self, "pod_affinity")

    @pod_affinity.setter
    def pod_affinity(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityArgs']]):
        pulumi.set(self, "pod_affinity", value)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityArgs']]:
        """
        Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        """
        return pulumi.get(self, "pod_anti_affinity")

    @pod_anti_affinity.setter
    def pod_anti_affinity(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityArgs']]):
        pulumi.set(self, "pod_anti_affinity", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityArgs:
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]] = None,
                 required_during_scheduling_ignored_during_execution: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']] = None):
        """
        Describes node affinity scheduling rules for the pod.
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs'] required_during_scheduling_ignored_during_execution: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]:
        """
        If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 preference: pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs'],
                 weight: pulumi.Input[int]):
        """
        An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs'] preference: A node selector term, associated with the corresponding weight.
        :param pulumi.Input[int] weight: Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        pulumi.set(__self__, "preference", preference)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def preference(self) -> pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs']:
        """
        A node selector term, associated with the corresponding weight.
        """
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs']):
        pulumi.set(self, "preference", value)

    @property
    @pulumi.getter
    def weight(self) -> pulumi.Input[int]:
        """
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: pulumi.Input[int]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs']]]] = None,
                 match_fields: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs']]]] = None):
        """
        A node selector term, associated with the corresponding weight.
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs']]] match_expressions: A list of node selector requirements by node's labels.
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs']]] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs']]]]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs']]]]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")

    @match_fields.setter
    def match_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs']]]]):
        pulumi.set(self, "match_fields", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 node_selector_terms: pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs']]]):
        """
        If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs']]] node_selector_terms: Required. A list of node selector terms. The terms are ORed.
        """
        pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(self) -> pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs']]]:
        """
        Required. A list of node selector terms. The terms are ORed.
        """
        return pulumi.get(self, "node_selector_terms")

    @node_selector_terms.setter
    def node_selector_terms(self, value: pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs']]]):
        pulumi.set(self, "node_selector_terms", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs']]]] = None,
                 match_fields: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs']]]] = None):
        """
        A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs']]] match_expressions: A list of node selector requirements by node's labels.
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs']]] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs']]]]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs']]]]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")

    @match_fields.setter
    def match_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs']]]]):
        pulumi.set(self, "match_fields", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityArgs:
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]] = None,
                 required_during_scheduling_ignored_during_execution: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]] = None):
        """
        Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]] required_during_scheduling_ignored_during_execution: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]]:
        """
        If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]]):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 pod_affinity_term: pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs'],
                 weight: pulumi.Input[int]):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs'] pod_affinity_term: Required. A pod affinity term, associated with the corresponding weight.
        :param pulumi.Input[int] weight: weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
        """
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs']:
        """
        Required. A pod affinity term, associated with the corresponding weight.
        """
        return pulumi.get(self, "pod_affinity_term")

    @pod_affinity_term.setter
    def pod_affinity_term(self, value: pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs']):
        pulumi.set(self, "pod_affinity_term", value)

    @property
    @pulumi.getter
    def weight(self) -> pulumi.Input[int]:
        """
        weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: pulumi.Input[int]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs:
    def __init__(__self__, *,
                 topology_key: pulumi.Input[str],
                 label_selector: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs'] label_selector: A label query over a set of resources, in this case pods.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> pulumi.Input[str]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "topology_key", value)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']]:
        """
        A label query over a set of resources, in this case pods.
        """
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']]):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        A label query over a set of resources, in this case pods.
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]]]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 topology_key: pulumi.Input[str],
                 label_selector: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs'] label_selector: A label query over a set of resources, in this case pods.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> pulumi.Input[str]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "topology_key", value)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']]:
        """
        A label query over a set of resources, in this case pods.
        """
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']]):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        A label query over a set of resources, in this case pods.
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]]]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityArgs:
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]] = None,
                 required_during_scheduling_ignored_during_execution: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]] = None):
        """
        Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]] required_during_scheduling_ignored_during_execution: If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]]:
        """
        If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]]):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 pod_affinity_term: pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs'],
                 weight: pulumi.Input[int]):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs'] pod_affinity_term: Required. A pod affinity term, associated with the corresponding weight.
        :param pulumi.Input[int] weight: weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
        """
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs']:
        """
        Required. A pod affinity term, associated with the corresponding weight.
        """
        return pulumi.get(self, "pod_affinity_term")

    @pod_affinity_term.setter
    def pod_affinity_term(self, value: pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs']):
        pulumi.set(self, "pod_affinity_term", value)

    @property
    @pulumi.getter
    def weight(self) -> pulumi.Input[int]:
        """
        weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: pulumi.Input[int]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs:
    def __init__(__self__, *,
                 topology_key: pulumi.Input[str],
                 label_selector: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs'] label_selector: A label query over a set of resources, in this case pods.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> pulumi.Input[str]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "topology_key", value)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']]:
        """
        A label query over a set of resources, in this case pods.
        """
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']]):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        A label query over a set of resources, in this case pods.
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]]]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 topology_key: pulumi.Input[str],
                 label_selector: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs'] label_selector: A label query over a set of resources, in this case pods.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> pulumi.Input[str]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "topology_key", value)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']]:
        """
        A label query over a set of resources, in this case pods.
        """
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']]):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        A label query over a set of resources, in this case pods.
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]]]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigArgs:
    def __init__(__self__, *,
                 env: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigEnvArgs']]]] = None,
                 log_level: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigResourcesArgs']] = None,
                 volume_mounts: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumeMountsArgs']]]] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesArgs']]]] = None):
        """
        Agent configuration
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigEnvArgs']]] env: The Datadog Agent supports many environment variables Ref: https://docs.datadoghq.com/agent/docker/?tab=standard#environment-variables
        :param pulumi.Input[str] log_level: Set logging verbosity, valid log levels are: trace, debug, info, warn, error, critical, and off
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigResourcesArgs'] resources: Datadog Cluster Checks Runner resource requests and limits
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumeMountsArgs']]] volume_mounts: Specify additional volume mounts in the Datadog Cluster Check Runner container
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesArgs']]] volumes: Specify additional volumes in the Datadog Cluster Check Runner container
        """
        if env is not None:
            pulumi.set(__self__, "env", env)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigEnvArgs']]]]:
        """
        The Datadog Agent supports many environment variables Ref: https://docs.datadoghq.com/agent/docker/?tab=standard#environment-variables
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigEnvArgs']]]]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[str]]:
        """
        Set logging verbosity, valid log levels are: trace, debug, info, warn, error, critical, and off
        """
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_level", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigResourcesArgs']]:
        """
        Datadog Cluster Checks Runner resource requests and limits
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigResourcesArgs']]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumeMountsArgs']]]]:
        """
        Specify additional volume mounts in the Datadog Cluster Check Runner container
        """
        return pulumi.get(self, "volume_mounts")

    @volume_mounts.setter
    def volume_mounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumeMountsArgs']]]]):
        pulumi.set(self, "volume_mounts", value)

    @property
    @pulumi.getter
    def volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesArgs']]]]:
        """
        Specify additional volumes in the Datadog Cluster Check Runner container
        """
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesArgs']]]]):
        pulumi.set(self, "volumes", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigEnvArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None,
                 value_from: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigEnvValueFromArgs']] = None):
        """
        EnvVar represents an environment variable present in a Container.
        :param pulumi.Input[str] name: Name of the environment variable. Must be a C_IDENTIFIER.
        :param pulumi.Input[str] value: Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigEnvValueFromArgs'] value_from: Source for the environment variable's value. Cannot be used if value is not empty.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the environment variable. Must be a C_IDENTIFIER.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigEnvValueFromArgs']]:
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        """
        return pulumi.get(self, "value_from")

    @value_from.setter
    def value_from(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigEnvValueFromArgs']]):
        pulumi.set(self, "value_from", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigEnvValueFromArgs:
    def __init__(__self__, *,
                 config_map_key_ref: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigEnvValueFromConfigMapKeyRefArgs']] = None,
                 field_ref: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigEnvValueFromFieldRefArgs']] = None,
                 resource_field_ref: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigEnvValueFromResourceFieldRefArgs']] = None,
                 secret_key_ref: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigEnvValueFromSecretKeyRefArgs']] = None):
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigEnvValueFromConfigMapKeyRefArgs'] config_map_key_ref: Selects a key of a ConfigMap.
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigEnvValueFromFieldRefArgs'] field_ref: Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigEnvValueFromResourceFieldRefArgs'] resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigEnvValueFromSecretKeyRefArgs'] secret_key_ref: Selects a key of a secret in the pod's namespace
        """
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigEnvValueFromConfigMapKeyRefArgs']]:
        """
        Selects a key of a ConfigMap.
        """
        return pulumi.get(self, "config_map_key_ref")

    @config_map_key_ref.setter
    def config_map_key_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigEnvValueFromConfigMapKeyRefArgs']]):
        pulumi.set(self, "config_map_key_ref", value)

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigEnvValueFromFieldRefArgs']]:
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        """
        return pulumi.get(self, "field_ref")

    @field_ref.setter
    def field_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigEnvValueFromFieldRefArgs']]):
        pulumi.set(self, "field_ref", value)

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigEnvValueFromResourceFieldRefArgs']]:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    @resource_field_ref.setter
    def resource_field_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigEnvValueFromResourceFieldRefArgs']]):
        pulumi.set(self, "resource_field_ref", value)

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigEnvValueFromSecretKeyRefArgs']]:
        """
        Selects a key of a secret in the pod's namespace
        """
        return pulumi.get(self, "secret_key_ref")

    @secret_key_ref.setter
    def secret_key_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigEnvValueFromSecretKeyRefArgs']]):
        pulumi.set(self, "secret_key_ref", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigEnvValueFromConfigMapKeyRefArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        Selects a key of a ConfigMap.
        :param pulumi.Input[str] key: The key to select.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the ConfigMap or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key to select.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the ConfigMap or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigEnvValueFromFieldRefArgs:
    def __init__(__self__, *,
                 field_path: pulumi.Input[str],
                 api_version: Optional[pulumi.Input[str]] = None):
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        :param pulumi.Input[str] field_path: Path of the field to select in the specified API version.
        :param pulumi.Input[str] api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> pulumi.Input[str]:
        """
        Path of the field to select in the specified API version.
        """
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_path", value)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigEnvValueFromResourceFieldRefArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 container_name: Optional[pulumi.Input[str]] = None,
                 divisor: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigEnvValueFromResourceFieldRefDivisorArgs']] = None):
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param pulumi.Input[str] resource: Required: resource to select
        :param pulumi.Input[str] container_name: Container name: required for volumes, optional for env vars
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigEnvValueFromResourceFieldRefDivisorArgs'] divisor: Specifies the output format of the exposed resources, defaults to "1"
        """
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        """
        Required: resource to select
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Container name: required for volumes, optional for env vars
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter
    def divisor(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigEnvValueFromResourceFieldRefDivisorArgs']]:
        """
        Specifies the output format of the exposed resources, defaults to "1"
        """
        return pulumi.get(self, "divisor")

    @divisor.setter
    def divisor(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigEnvValueFromResourceFieldRefDivisorArgs']]):
        pulumi.set(self, "divisor", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigEnvValueFromResourceFieldRefDivisorArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigEnvValueFromSecretKeyRefArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        Selects a key of a secret in the pod's namespace
        :param pulumi.Input[str] key: The key of the secret to select from.  Must be a valid secret key.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the Secret or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key of the secret to select from.  Must be a valid secret key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the Secret or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigResourcesLimitsArgs']]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigResourcesRequestsArgs']]]] = None):
        """
        Datadog Cluster Checks Runner resource requests and limits
        :param pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigResourcesLimitsArgs']]] limits: Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigResourcesRequestsArgs']]] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigResourcesLimitsArgs']]]]:
        """
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigResourcesLimitsArgs']]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigResourcesRequestsArgs']]]]:
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigResourcesRequestsArgs']]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigResourcesLimitsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigResourcesRequestsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumeMountsArgs:
    def __init__(__self__, *,
                 mount_path: pulumi.Input[str],
                 name: pulumi.Input[str],
                 mount_propagation: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 sub_path: Optional[pulumi.Input[str]] = None,
                 sub_path_expr: Optional[pulumi.Input[str]] = None):
        """
        VolumeMount describes a mounting of a Volume within a container.
        :param pulumi.Input[str] mount_path: Path within the container at which the volume should be mounted.  Must not contain ':'.
        :param pulumi.Input[str] name: This must match the Name of a Volume.
        :param pulumi.Input[str] mount_propagation: mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
        :param pulumi.Input[bool] read_only: Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
        :param pulumi.Input[str] sub_path: Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
        :param pulumi.Input[str] sub_path_expr: Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
        """
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> pulumi.Input[str]:
        """
        Path within the container at which the volume should be mounted.  Must not contain ':'.
        """
        return pulumi.get(self, "mount_path")

    @mount_path.setter
    def mount_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "mount_path", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        This must match the Name of a Volume.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[pulumi.Input[str]]:
        """
        mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
        """
        return pulumi.get(self, "mount_propagation")

    @mount_propagation.setter
    def mount_propagation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_propagation", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
        """
        return pulumi.get(self, "sub_path")

    @sub_path.setter
    def sub_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_path", value)

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[pulumi.Input[str]]:
        """
        Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
        """
        return pulumi.get(self, "sub_path_expr")

    @sub_path_expr.setter
    def sub_path_expr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_path_expr", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 aws_elastic_block_store: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesAwsElasticBlockStoreArgs']] = None,
                 azure_disk: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesAzureDiskArgs']] = None,
                 azure_file: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesAzureFileArgs']] = None,
                 cephfs: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesCephfsArgs']] = None,
                 cinder: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesCinderArgs']] = None,
                 config_map: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesConfigMapArgs']] = None,
                 csi: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesCsiArgs']] = None,
                 downward_api: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesDownwardAPIArgs']] = None,
                 empty_dir: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesEmptyDirArgs']] = None,
                 fc: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesFcArgs']] = None,
                 flex_volume: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesFlexVolumeArgs']] = None,
                 flocker: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesFlockerArgs']] = None,
                 gce_persistent_disk: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesGcePersistentDiskArgs']] = None,
                 git_repo: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesGitRepoArgs']] = None,
                 glusterfs: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesGlusterfsArgs']] = None,
                 host_path: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesHostPathArgs']] = None,
                 iscsi: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesIscsiArgs']] = None,
                 nfs: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesNfsArgs']] = None,
                 persistent_volume_claim: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesPersistentVolumeClaimArgs']] = None,
                 photon_persistent_disk: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesPhotonPersistentDiskArgs']] = None,
                 portworx_volume: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesPortworxVolumeArgs']] = None,
                 projected: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedArgs']] = None,
                 quobyte: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesQuobyteArgs']] = None,
                 rbd: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesRbdArgs']] = None,
                 scale_io: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesScaleIOArgs']] = None,
                 secret: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesSecretArgs']] = None,
                 storageos: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesStorageosArgs']] = None,
                 vsphere_volume: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesVsphereVolumeArgs']] = None):
        """
        Volume represents a named volume in a pod that may be accessed by any container in the pod.
        :param pulumi.Input[str] name: Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesAwsElasticBlockStoreArgs'] aws_elastic_block_store: AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesAzureDiskArgs'] azure_disk: AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesAzureFileArgs'] azure_file: AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesCephfsArgs'] cephfs: CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesCinderArgs'] cinder: Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesConfigMapArgs'] config_map: ConfigMap represents a configMap that should populate this volume
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesCsiArgs'] csi: CSI (Container Storage Interface) represents storage that is handled by an external CSI driver (Alpha feature).
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesDownwardAPIArgs'] downward_api: DownwardAPI represents downward API about the pod that should populate this volume
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesEmptyDirArgs'] empty_dir: EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesFcArgs'] fc: FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesFlexVolumeArgs'] flex_volume: FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesFlockerArgs'] flocker: Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesGcePersistentDiskArgs'] gce_persistent_disk: GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesGitRepoArgs'] git_repo: GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesGlusterfsArgs'] glusterfs: Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesHostPathArgs'] host_path: HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesIscsiArgs'] iscsi: ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesNfsArgs'] nfs: NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesPersistentVolumeClaimArgs'] persistent_volume_claim: PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesPhotonPersistentDiskArgs'] photon_persistent_disk: PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesPortworxVolumeArgs'] portworx_volume: PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedArgs'] projected: Items for all in one resources secrets, configmaps, and downward API
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesQuobyteArgs'] quobyte: Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesRbdArgs'] rbd: RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesScaleIOArgs'] scale_io: ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesSecretArgs'] secret: Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesStorageosArgs'] storageos: StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesVsphereVolumeArgs'] vsphere_volume: VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
        """
        pulumi.set(__self__, "name", name)
        if aws_elastic_block_store is not None:
            pulumi.set(__self__, "aws_elastic_block_store", aws_elastic_block_store)
        if azure_disk is not None:
            pulumi.set(__self__, "azure_disk", azure_disk)
        if azure_file is not None:
            pulumi.set(__self__, "azure_file", azure_file)
        if cephfs is not None:
            pulumi.set(__self__, "cephfs", cephfs)
        if cinder is not None:
            pulumi.set(__self__, "cinder", cinder)
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if csi is not None:
            pulumi.set(__self__, "csi", csi)
        if downward_api is not None:
            pulumi.set(__self__, "downward_api", downward_api)
        if empty_dir is not None:
            pulumi.set(__self__, "empty_dir", empty_dir)
        if fc is not None:
            pulumi.set(__self__, "fc", fc)
        if flex_volume is not None:
            pulumi.set(__self__, "flex_volume", flex_volume)
        if flocker is not None:
            pulumi.set(__self__, "flocker", flocker)
        if gce_persistent_disk is not None:
            pulumi.set(__self__, "gce_persistent_disk", gce_persistent_disk)
        if git_repo is not None:
            pulumi.set(__self__, "git_repo", git_repo)
        if glusterfs is not None:
            pulumi.set(__self__, "glusterfs", glusterfs)
        if host_path is not None:
            pulumi.set(__self__, "host_path", host_path)
        if iscsi is not None:
            pulumi.set(__self__, "iscsi", iscsi)
        if nfs is not None:
            pulumi.set(__self__, "nfs", nfs)
        if persistent_volume_claim is not None:
            pulumi.set(__self__, "persistent_volume_claim", persistent_volume_claim)
        if photon_persistent_disk is not None:
            pulumi.set(__self__, "photon_persistent_disk", photon_persistent_disk)
        if portworx_volume is not None:
            pulumi.set(__self__, "portworx_volume", portworx_volume)
        if projected is not None:
            pulumi.set(__self__, "projected", projected)
        if quobyte is not None:
            pulumi.set(__self__, "quobyte", quobyte)
        if rbd is not None:
            pulumi.set(__self__, "rbd", rbd)
        if scale_io is not None:
            pulumi.set(__self__, "scale_io", scale_io)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if storageos is not None:
            pulumi.set(__self__, "storageos", storageos)
        if vsphere_volume is not None:
            pulumi.set(__self__, "vsphere_volume", vsphere_volume)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="awsElasticBlockStore")
    def aws_elastic_block_store(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesAwsElasticBlockStoreArgs']]:
        """
        AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        """
        return pulumi.get(self, "aws_elastic_block_store")

    @aws_elastic_block_store.setter
    def aws_elastic_block_store(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesAwsElasticBlockStoreArgs']]):
        pulumi.set(self, "aws_elastic_block_store", value)

    @property
    @pulumi.getter(name="azureDisk")
    def azure_disk(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesAzureDiskArgs']]:
        """
        AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
        """
        return pulumi.get(self, "azure_disk")

    @azure_disk.setter
    def azure_disk(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesAzureDiskArgs']]):
        pulumi.set(self, "azure_disk", value)

    @property
    @pulumi.getter(name="azureFile")
    def azure_file(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesAzureFileArgs']]:
        """
        AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
        """
        return pulumi.get(self, "azure_file")

    @azure_file.setter
    def azure_file(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesAzureFileArgs']]):
        pulumi.set(self, "azure_file", value)

    @property
    @pulumi.getter
    def cephfs(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesCephfsArgs']]:
        """
        CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
        """
        return pulumi.get(self, "cephfs")

    @cephfs.setter
    def cephfs(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesCephfsArgs']]):
        pulumi.set(self, "cephfs", value)

    @property
    @pulumi.getter
    def cinder(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesCinderArgs']]:
        """
        Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        """
        return pulumi.get(self, "cinder")

    @cinder.setter
    def cinder(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesCinderArgs']]):
        pulumi.set(self, "cinder", value)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesConfigMapArgs']]:
        """
        ConfigMap represents a configMap that should populate this volume
        """
        return pulumi.get(self, "config_map")

    @config_map.setter
    def config_map(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesConfigMapArgs']]):
        pulumi.set(self, "config_map", value)

    @property
    @pulumi.getter
    def csi(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesCsiArgs']]:
        """
        CSI (Container Storage Interface) represents storage that is handled by an external CSI driver (Alpha feature).
        """
        return pulumi.get(self, "csi")

    @csi.setter
    def csi(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesCsiArgs']]):
        pulumi.set(self, "csi", value)

    @property
    @pulumi.getter(name="downwardAPI")
    def downward_api(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesDownwardAPIArgs']]:
        """
        DownwardAPI represents downward API about the pod that should populate this volume
        """
        return pulumi.get(self, "downward_api")

    @downward_api.setter
    def downward_api(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesDownwardAPIArgs']]):
        pulumi.set(self, "downward_api", value)

    @property
    @pulumi.getter(name="emptyDir")
    def empty_dir(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesEmptyDirArgs']]:
        """
        EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
        """
        return pulumi.get(self, "empty_dir")

    @empty_dir.setter
    def empty_dir(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesEmptyDirArgs']]):
        pulumi.set(self, "empty_dir", value)

    @property
    @pulumi.getter
    def fc(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesFcArgs']]:
        """
        FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
        """
        return pulumi.get(self, "fc")

    @fc.setter
    def fc(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesFcArgs']]):
        pulumi.set(self, "fc", value)

    @property
    @pulumi.getter(name="flexVolume")
    def flex_volume(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesFlexVolumeArgs']]:
        """
        FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
        """
        return pulumi.get(self, "flex_volume")

    @flex_volume.setter
    def flex_volume(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesFlexVolumeArgs']]):
        pulumi.set(self, "flex_volume", value)

    @property
    @pulumi.getter
    def flocker(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesFlockerArgs']]:
        """
        Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
        """
        return pulumi.get(self, "flocker")

    @flocker.setter
    def flocker(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesFlockerArgs']]):
        pulumi.set(self, "flocker", value)

    @property
    @pulumi.getter(name="gcePersistentDisk")
    def gce_persistent_disk(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesGcePersistentDiskArgs']]:
        """
        GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        return pulumi.get(self, "gce_persistent_disk")

    @gce_persistent_disk.setter
    def gce_persistent_disk(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesGcePersistentDiskArgs']]):
        pulumi.set(self, "gce_persistent_disk", value)

    @property
    @pulumi.getter(name="gitRepo")
    def git_repo(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesGitRepoArgs']]:
        """
        GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
        """
        return pulumi.get(self, "git_repo")

    @git_repo.setter
    def git_repo(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesGitRepoArgs']]):
        pulumi.set(self, "git_repo", value)

    @property
    @pulumi.getter
    def glusterfs(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesGlusterfsArgs']]:
        """
        Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
        """
        return pulumi.get(self, "glusterfs")

    @glusterfs.setter
    def glusterfs(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesGlusterfsArgs']]):
        pulumi.set(self, "glusterfs", value)

    @property
    @pulumi.getter(name="hostPath")
    def host_path(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesHostPathArgs']]:
        """
        HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
        """
        return pulumi.get(self, "host_path")

    @host_path.setter
    def host_path(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesHostPathArgs']]):
        pulumi.set(self, "host_path", value)

    @property
    @pulumi.getter
    def iscsi(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesIscsiArgs']]:
        """
        ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
        """
        return pulumi.get(self, "iscsi")

    @iscsi.setter
    def iscsi(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesIscsiArgs']]):
        pulumi.set(self, "iscsi", value)

    @property
    @pulumi.getter
    def nfs(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesNfsArgs']]:
        """
        NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
        return pulumi.get(self, "nfs")

    @nfs.setter
    def nfs(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesNfsArgs']]):
        pulumi.set(self, "nfs", value)

    @property
    @pulumi.getter(name="persistentVolumeClaim")
    def persistent_volume_claim(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesPersistentVolumeClaimArgs']]:
        """
        PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        """
        return pulumi.get(self, "persistent_volume_claim")

    @persistent_volume_claim.setter
    def persistent_volume_claim(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesPersistentVolumeClaimArgs']]):
        pulumi.set(self, "persistent_volume_claim", value)

    @property
    @pulumi.getter(name="photonPersistentDisk")
    def photon_persistent_disk(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesPhotonPersistentDiskArgs']]:
        """
        PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
        """
        return pulumi.get(self, "photon_persistent_disk")

    @photon_persistent_disk.setter
    def photon_persistent_disk(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesPhotonPersistentDiskArgs']]):
        pulumi.set(self, "photon_persistent_disk", value)

    @property
    @pulumi.getter(name="portworxVolume")
    def portworx_volume(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesPortworxVolumeArgs']]:
        """
        PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
        """
        return pulumi.get(self, "portworx_volume")

    @portworx_volume.setter
    def portworx_volume(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesPortworxVolumeArgs']]):
        pulumi.set(self, "portworx_volume", value)

    @property
    @pulumi.getter
    def projected(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedArgs']]:
        """
        Items for all in one resources secrets, configmaps, and downward API
        """
        return pulumi.get(self, "projected")

    @projected.setter
    def projected(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedArgs']]):
        pulumi.set(self, "projected", value)

    @property
    @pulumi.getter
    def quobyte(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesQuobyteArgs']]:
        """
        Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
        """
        return pulumi.get(self, "quobyte")

    @quobyte.setter
    def quobyte(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesQuobyteArgs']]):
        pulumi.set(self, "quobyte", value)

    @property
    @pulumi.getter
    def rbd(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesRbdArgs']]:
        """
        RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
        """
        return pulumi.get(self, "rbd")

    @rbd.setter
    def rbd(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesRbdArgs']]):
        pulumi.set(self, "rbd", value)

    @property
    @pulumi.getter(name="scaleIO")
    def scale_io(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesScaleIOArgs']]:
        """
        ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
        """
        return pulumi.get(self, "scale_io")

    @scale_io.setter
    def scale_io(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesScaleIOArgs']]):
        pulumi.set(self, "scale_io", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesSecretArgs']]:
        """
        Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesSecretArgs']]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def storageos(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesStorageosArgs']]:
        """
        StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
        """
        return pulumi.get(self, "storageos")

    @storageos.setter
    def storageos(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesStorageosArgs']]):
        pulumi.set(self, "storageos", value)

    @property
    @pulumi.getter(name="vsphereVolume")
    def vsphere_volume(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesVsphereVolumeArgs']]:
        """
        VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
        """
        return pulumi.get(self, "vsphere_volume")

    @vsphere_volume.setter
    def vsphere_volume(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesVsphereVolumeArgs']]):
        pulumi.set(self, "vsphere_volume", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesAwsElasticBlockStoreArgs:
    def __init__(__self__, *,
                 volume_id: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 partition: Optional[pulumi.Input[int]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        :param pulumi.Input[str] volume_id: Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        :param pulumi.Input[str] fs_type: Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
        :param pulumi.Input[int] partition: The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
        :param pulumi.Input[bool] read_only: Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        """
        pulumi.set(__self__, "volume_id", volume_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if partition is not None:
            pulumi.set(__self__, "partition", partition)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="volumeID")
    def volume_id(self) -> pulumi.Input[str]:
        """
        Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "volume_id", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter
    def partition(self) -> Optional[pulumi.Input[int]]:
        """
        The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
        """
        return pulumi.get(self, "partition")

    @partition.setter
    def partition(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "partition", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesAzureDiskArgs:
    def __init__(__self__, *,
                 disk_name: pulumi.Input[str],
                 disk_uri: pulumi.Input[str],
                 caching_mode: Optional[pulumi.Input[str]] = None,
                 fs_type: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
        :param pulumi.Input[str] disk_name: The Name of the data disk in the blob storage
        :param pulumi.Input[str] disk_uri: The URI the data disk in the blob storage
        :param pulumi.Input[str] caching_mode: Host Caching mode: None, Read Only, Read Write.
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        :param pulumi.Input[str] kind: Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
        :param pulumi.Input[bool] read_only: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        pulumi.set(__self__, "disk_name", disk_name)
        pulumi.set(__self__, "disk_uri", disk_uri)
        if caching_mode is not None:
            pulumi.set(__self__, "caching_mode", caching_mode)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="diskName")
    def disk_name(self) -> pulumi.Input[str]:
        """
        The Name of the data disk in the blob storage
        """
        return pulumi.get(self, "disk_name")

    @disk_name.setter
    def disk_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "disk_name", value)

    @property
    @pulumi.getter(name="diskURI")
    def disk_uri(self) -> pulumi.Input[str]:
        """
        The URI the data disk in the blob storage
        """
        return pulumi.get(self, "disk_uri")

    @disk_uri.setter
    def disk_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "disk_uri", value)

    @property
    @pulumi.getter(name="cachingMode")
    def caching_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Host Caching mode: None, Read Only, Read Write.
        """
        return pulumi.get(self, "caching_mode")

    @caching_mode.setter
    def caching_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "caching_mode", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesAzureFileArgs:
    def __init__(__self__, *,
                 secret_name: pulumi.Input[str],
                 share_name: pulumi.Input[str],
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
        :param pulumi.Input[str] secret_name: the name of secret that contains Azure Storage Account Name and Key
        :param pulumi.Input[str] share_name: Share Name
        :param pulumi.Input[bool] read_only: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        pulumi.set(__self__, "secret_name", secret_name)
        pulumi.set(__self__, "share_name", share_name)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[str]:
        """
        the name of secret that contains Azure Storage Account Name and Key
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_name", value)

    @property
    @pulumi.getter(name="shareName")
    def share_name(self) -> pulumi.Input[str]:
        """
        Share Name
        """
        return pulumi.get(self, "share_name")

    @share_name.setter
    def share_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "share_name", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesCephfsArgs:
    def __init__(__self__, *,
                 monitors: pulumi.Input[Sequence[pulumi.Input[str]]],
                 path: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 secret_file: Optional[pulumi.Input[str]] = None,
                 secret_ref: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesCephfsSecretRefArgs']] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
        :param pulumi.Input[Sequence[pulumi.Input[str]]] monitors: Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        :param pulumi.Input[str] path: Optional: Used as the mounted root, rather than the full Ceph tree, default is /
        :param pulumi.Input[bool] read_only: Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        :param pulumi.Input[str] secret_file: Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesCephfsSecretRefArgs'] secret_ref: Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        :param pulumi.Input[str] user: Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        pulumi.set(__self__, "monitors", monitors)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_file is not None:
            pulumi.set(__self__, "secret_file", secret_file)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def monitors(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        return pulumi.get(self, "monitors")

    @monitors.setter
    def monitors(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "monitors", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: Used as the mounted root, rather than the full Ceph tree, default is /
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="secretFile")
    def secret_file(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        return pulumi.get(self, "secret_file")

    @secret_file.setter
    def secret_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_file", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesCephfsSecretRefArgs']]:
        """
        Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesCephfsSecretRefArgs']]):
        pulumi.set(self, "secret_ref", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesCephfsSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesCinderArgs:
    def __init__(__self__, *,
                 volume_id: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 secret_ref: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesCinderSecretRefArgs']] = None):
        """
        Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        :param pulumi.Input[str] volume_id: volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        :param pulumi.Input[bool] read_only: Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesCinderSecretRefArgs'] secret_ref: Optional: points to a secret object containing parameters used to connect to OpenStack.
        """
        pulumi.set(__self__, "volume_id", volume_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter(name="volumeID")
    def volume_id(self) -> pulumi.Input[str]:
        """
        volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "volume_id", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesCinderSecretRefArgs']]:
        """
        Optional: points to a secret object containing parameters used to connect to OpenStack.
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesCinderSecretRefArgs']]):
        pulumi.set(self, "secret_ref", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesCinderSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Optional: points to a secret object containing parameters used to connect to OpenStack.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesConfigMapArgs:
    def __init__(__self__, *,
                 default_mode: Optional[pulumi.Input[int]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesConfigMapItemsArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        ConfigMap represents a configMap that should populate this volume
        :param pulumi.Input[int] default_mode: Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesConfigMapItemsArgs']]] items: If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the ConfigMap or its keys must be defined
        """
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[int]]:
        """
        Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_mode", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesConfigMapItemsArgs']]]]:
        """
        If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesConfigMapItemsArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the ConfigMap or its keys must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesConfigMapItemsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 path: pulumi.Input[str],
                 mode: Optional[pulumi.Input[int]] = None):
        """
        Maps a string key to a path within a volume.
        :param pulumi.Input[str] key: The key to project.
        :param pulumi.Input[str] path: The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        :param pulumi.Input[int] mode: Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key to project.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesCsiArgs:
    def __init__(__self__, *,
                 driver: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 node_publish_secret_ref: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesCsiNodePublishSecretRefArgs']] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 volume_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        CSI (Container Storage Interface) represents storage that is handled by an external CSI driver (Alpha feature).
        :param pulumi.Input[str] driver: Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesCsiNodePublishSecretRefArgs'] node_publish_secret_ref: NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
        :param pulumi.Input[bool] read_only: Specifies a read-only configuration for the volume. Defaults to false (read/write).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] volume_attributes: VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
        """
        pulumi.set(__self__, "driver", driver)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if node_publish_secret_ref is not None:
            pulumi.set(__self__, "node_publish_secret_ref", node_publish_secret_ref)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if volume_attributes is not None:
            pulumi.set(__self__, "volume_attributes", volume_attributes)

    @property
    @pulumi.getter
    def driver(self) -> pulumi.Input[str]:
        """
        Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
        """
        return pulumi.get(self, "driver")

    @driver.setter
    def driver(self, value: pulumi.Input[str]):
        pulumi.set(self, "driver", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter(name="nodePublishSecretRef")
    def node_publish_secret_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesCsiNodePublishSecretRefArgs']]:
        """
        NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
        """
        return pulumi.get(self, "node_publish_secret_ref")

    @node_publish_secret_ref.setter
    def node_publish_secret_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesCsiNodePublishSecretRefArgs']]):
        pulumi.set(self, "node_publish_secret_ref", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies a read-only configuration for the volume. Defaults to false (read/write).
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="volumeAttributes")
    def volume_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
        """
        return pulumi.get(self, "volume_attributes")

    @volume_attributes.setter
    def volume_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "volume_attributes", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesCsiNodePublishSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesDownwardAPIArgs:
    def __init__(__self__, *,
                 default_mode: Optional[pulumi.Input[int]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesDownwardAPIItemsArgs']]]] = None):
        """
        DownwardAPI represents downward API about the pod that should populate this volume
        :param pulumi.Input[int] default_mode: Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesDownwardAPIItemsArgs']]] items: Items is a list of downward API volume file
        """
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[int]]:
        """
        Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_mode", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesDownwardAPIItemsArgs']]]]:
        """
        Items is a list of downward API volume file
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesDownwardAPIItemsArgs']]]]):
        pulumi.set(self, "items", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesDownwardAPIItemsArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 field_ref: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesDownwardAPIItemsFieldRefArgs']] = None,
                 mode: Optional[pulumi.Input[int]] = None,
                 resource_field_ref: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesDownwardAPIItemsResourceFieldRefArgs']] = None):
        """
        DownwardAPIVolumeFile represents information to create the file containing the pod field
        :param pulumi.Input[str] path: Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesDownwardAPIItemsFieldRefArgs'] field_ref: Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
        :param pulumi.Input[int] mode: Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesDownwardAPIItemsResourceFieldRefArgs'] resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        """
        pulumi.set(__self__, "path", path)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesDownwardAPIItemsFieldRefArgs']]:
        """
        Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
        """
        return pulumi.get(self, "field_ref")

    @field_ref.setter
    def field_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesDownwardAPIItemsFieldRefArgs']]):
        pulumi.set(self, "field_ref", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesDownwardAPIItemsResourceFieldRefArgs']]:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    @resource_field_ref.setter
    def resource_field_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesDownwardAPIItemsResourceFieldRefArgs']]):
        pulumi.set(self, "resource_field_ref", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesDownwardAPIItemsFieldRefArgs:
    def __init__(__self__, *,
                 field_path: pulumi.Input[str],
                 api_version: Optional[pulumi.Input[str]] = None):
        """
        Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
        :param pulumi.Input[str] field_path: Path of the field to select in the specified API version.
        :param pulumi.Input[str] api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> pulumi.Input[str]:
        """
        Path of the field to select in the specified API version.
        """
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_path", value)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesDownwardAPIItemsResourceFieldRefArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 container_name: Optional[pulumi.Input[str]] = None,
                 divisor: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesDownwardAPIItemsResourceFieldRefDivisorArgs']] = None):
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        :param pulumi.Input[str] resource: Required: resource to select
        :param pulumi.Input[str] container_name: Container name: required for volumes, optional for env vars
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesDownwardAPIItemsResourceFieldRefDivisorArgs'] divisor: Specifies the output format of the exposed resources, defaults to "1"
        """
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        """
        Required: resource to select
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Container name: required for volumes, optional for env vars
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter
    def divisor(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesDownwardAPIItemsResourceFieldRefDivisorArgs']]:
        """
        Specifies the output format of the exposed resources, defaults to "1"
        """
        return pulumi.get(self, "divisor")

    @divisor.setter
    def divisor(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesDownwardAPIItemsResourceFieldRefDivisorArgs']]):
        pulumi.set(self, "divisor", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesDownwardAPIItemsResourceFieldRefDivisorArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesEmptyDirArgs:
    def __init__(__self__, *,
                 medium: Optional[pulumi.Input[str]] = None,
                 size_limit: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesEmptyDirSizeLimitArgs']] = None):
        """
        EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
        :param pulumi.Input[str] medium: What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesEmptyDirSizeLimitArgs'] size_limit: Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
        """
        if medium is not None:
            pulumi.set(__self__, "medium", medium)
        if size_limit is not None:
            pulumi.set(__self__, "size_limit", size_limit)

    @property
    @pulumi.getter
    def medium(self) -> Optional[pulumi.Input[str]]:
        """
        What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
        """
        return pulumi.get(self, "medium")

    @medium.setter
    def medium(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "medium", value)

    @property
    @pulumi.getter(name="sizeLimit")
    def size_limit(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesEmptyDirSizeLimitArgs']]:
        """
        Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
        """
        return pulumi.get(self, "size_limit")

    @size_limit.setter
    def size_limit(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesEmptyDirSizeLimitArgs']]):
        pulumi.set(self, "size_limit", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesEmptyDirSizeLimitArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesFcArgs:
    def __init__(__self__, *,
                 fs_type: Optional[pulumi.Input[str]] = None,
                 lun: Optional[pulumi.Input[int]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 target_wwns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 wwids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
        :param pulumi.Input[int] lun: Optional: FC target lun number
        :param pulumi.Input[bool] read_only: Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] target_wwns: Optional: FC target worldwide names (WWNs)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] wwids: Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
        """
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if lun is not None:
            pulumi.set(__self__, "lun", lun)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if target_wwns is not None:
            pulumi.set(__self__, "target_wwns", target_wwns)
        if wwids is not None:
            pulumi.set(__self__, "wwids", wwids)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter
    def lun(self) -> Optional[pulumi.Input[int]]:
        """
        Optional: FC target lun number
        """
        return pulumi.get(self, "lun")

    @lun.setter
    def lun(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lun", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="targetWWNs")
    def target_wwns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Optional: FC target worldwide names (WWNs)
        """
        return pulumi.get(self, "target_wwns")

    @target_wwns.setter
    def target_wwns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "target_wwns", value)

    @property
    @pulumi.getter
    def wwids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
        """
        return pulumi.get(self, "wwids")

    @wwids.setter
    def wwids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "wwids", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesFlexVolumeArgs:
    def __init__(__self__, *,
                 driver: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 secret_ref: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesFlexVolumeSecretRefArgs']] = None):
        """
        FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
        :param pulumi.Input[str] driver: Driver is the name of the driver to use for this volume.
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] options: Optional: Extra command options if any.
        :param pulumi.Input[bool] read_only: Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesFlexVolumeSecretRefArgs'] secret_ref: Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
        """
        pulumi.set(__self__, "driver", driver)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter
    def driver(self) -> pulumi.Input[str]:
        """
        Driver is the name of the driver to use for this volume.
        """
        return pulumi.get(self, "driver")

    @driver.setter
    def driver(self, value: pulumi.Input[str]):
        pulumi.set(self, "driver", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Optional: Extra command options if any.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesFlexVolumeSecretRefArgs']]:
        """
        Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesFlexVolumeSecretRefArgs']]):
        pulumi.set(self, "secret_ref", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesFlexVolumeSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesFlockerArgs:
    def __init__(__self__, *,
                 dataset_name: Optional[pulumi.Input[str]] = None,
                 dataset_uuid: Optional[pulumi.Input[str]] = None):
        """
        Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
        :param pulumi.Input[str] dataset_name: Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
        :param pulumi.Input[str] dataset_uuid: UUID of the dataset. This is unique identifier of a Flocker dataset
        """
        if dataset_name is not None:
            pulumi.set(__self__, "dataset_name", dataset_name)
        if dataset_uuid is not None:
            pulumi.set(__self__, "dataset_uuid", dataset_uuid)

    @property
    @pulumi.getter(name="datasetName")
    def dataset_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
        """
        return pulumi.get(self, "dataset_name")

    @dataset_name.setter
    def dataset_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataset_name", value)

    @property
    @pulumi.getter(name="datasetUUID")
    def dataset_uuid(self) -> Optional[pulumi.Input[str]]:
        """
        UUID of the dataset. This is unique identifier of a Flocker dataset
        """
        return pulumi.get(self, "dataset_uuid")

    @dataset_uuid.setter
    def dataset_uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataset_uuid", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesGcePersistentDiskArgs:
    def __init__(__self__, *,
                 pd_name: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 partition: Optional[pulumi.Input[int]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        :param pulumi.Input[str] pd_name: Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        :param pulumi.Input[str] fs_type: Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
        :param pulumi.Input[int] partition: The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        :param pulumi.Input[bool] read_only: ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        pulumi.set(__self__, "pd_name", pd_name)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if partition is not None:
            pulumi.set(__self__, "partition", partition)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="pdName")
    def pd_name(self) -> pulumi.Input[str]:
        """
        Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        return pulumi.get(self, "pd_name")

    @pd_name.setter
    def pd_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "pd_name", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter
    def partition(self) -> Optional[pulumi.Input[int]]:
        """
        The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        return pulumi.get(self, "partition")

    @partition.setter
    def partition(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "partition", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesGitRepoArgs:
    def __init__(__self__, *,
                 repository: pulumi.Input[str],
                 directory: Optional[pulumi.Input[str]] = None,
                 revision: Optional[pulumi.Input[str]] = None):
        """
        GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
        :param pulumi.Input[str] repository: Repository URL
        :param pulumi.Input[str] directory: Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
        :param pulumi.Input[str] revision: Commit hash for the specified revision.
        """
        pulumi.set(__self__, "repository", repository)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)

    @property
    @pulumi.getter
    def repository(self) -> pulumi.Input[str]:
        """
        Repository URL
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter
    def directory(self) -> Optional[pulumi.Input[str]]:
        """
        Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
        """
        return pulumi.get(self, "directory")

    @directory.setter
    def directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "directory", value)

    @property
    @pulumi.getter
    def revision(self) -> Optional[pulumi.Input[str]]:
        """
        Commit hash for the specified revision.
        """
        return pulumi.get(self, "revision")

    @revision.setter
    def revision(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revision", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesGlusterfsArgs:
    def __init__(__self__, *,
                 endpoints: pulumi.Input[str],
                 path: pulumi.Input[str],
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
        :param pulumi.Input[str] endpoints: EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        :param pulumi.Input[str] path: Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        :param pulumi.Input[bool] read_only: ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        """
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter
    def endpoints(self) -> pulumi.Input[str]:
        """
        EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        """
        return pulumi.get(self, "endpoints")

    @endpoints.setter
    def endpoints(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoints", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesHostPathArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 type: Optional[pulumi.Input[str]] = None):
        """
        HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
        :param pulumi.Input[str] path: Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        :param pulumi.Input[str] type: Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        """
        pulumi.set(__self__, "path", path)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesIscsiArgs:
    def __init__(__self__, *,
                 iqn: pulumi.Input[str],
                 lun: pulumi.Input[int],
                 target_portal: pulumi.Input[str],
                 chap_auth_discovery: Optional[pulumi.Input[bool]] = None,
                 chap_auth_session: Optional[pulumi.Input[bool]] = None,
                 fs_type: Optional[pulumi.Input[str]] = None,
                 initiator_name: Optional[pulumi.Input[str]] = None,
                 iscsi_interface: Optional[pulumi.Input[str]] = None,
                 portals: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 secret_ref: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesIscsiSecretRefArgs']] = None):
        """
        ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
        :param pulumi.Input[str] iqn: Target iSCSI Qualified Name.
        :param pulumi.Input[int] lun: iSCSI Target Lun number.
        :param pulumi.Input[str] target_portal: iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
        :param pulumi.Input[bool] chap_auth_discovery: whether support iSCSI Discovery CHAP authentication
        :param pulumi.Input[bool] chap_auth_session: whether support iSCSI Session CHAP authentication
        :param pulumi.Input[str] fs_type: Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
        :param pulumi.Input[str] initiator_name: Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
        :param pulumi.Input[str] iscsi_interface: iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] portals: iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
        :param pulumi.Input[bool] read_only: ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesIscsiSecretRefArgs'] secret_ref: CHAP Secret for iSCSI target and initiator authentication
        """
        pulumi.set(__self__, "iqn", iqn)
        pulumi.set(__self__, "lun", lun)
        pulumi.set(__self__, "target_portal", target_portal)
        if chap_auth_discovery is not None:
            pulumi.set(__self__, "chap_auth_discovery", chap_auth_discovery)
        if chap_auth_session is not None:
            pulumi.set(__self__, "chap_auth_session", chap_auth_session)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if initiator_name is not None:
            pulumi.set(__self__, "initiator_name", initiator_name)
        if iscsi_interface is not None:
            pulumi.set(__self__, "iscsi_interface", iscsi_interface)
        if portals is not None:
            pulumi.set(__self__, "portals", portals)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter
    def iqn(self) -> pulumi.Input[str]:
        """
        Target iSCSI Qualified Name.
        """
        return pulumi.get(self, "iqn")

    @iqn.setter
    def iqn(self, value: pulumi.Input[str]):
        pulumi.set(self, "iqn", value)

    @property
    @pulumi.getter
    def lun(self) -> pulumi.Input[int]:
        """
        iSCSI Target Lun number.
        """
        return pulumi.get(self, "lun")

    @lun.setter
    def lun(self, value: pulumi.Input[int]):
        pulumi.set(self, "lun", value)

    @property
    @pulumi.getter(name="targetPortal")
    def target_portal(self) -> pulumi.Input[str]:
        """
        iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
        """
        return pulumi.get(self, "target_portal")

    @target_portal.setter
    def target_portal(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_portal", value)

    @property
    @pulumi.getter(name="chapAuthDiscovery")
    def chap_auth_discovery(self) -> Optional[pulumi.Input[bool]]:
        """
        whether support iSCSI Discovery CHAP authentication
        """
        return pulumi.get(self, "chap_auth_discovery")

    @chap_auth_discovery.setter
    def chap_auth_discovery(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "chap_auth_discovery", value)

    @property
    @pulumi.getter(name="chapAuthSession")
    def chap_auth_session(self) -> Optional[pulumi.Input[bool]]:
        """
        whether support iSCSI Session CHAP authentication
        """
        return pulumi.get(self, "chap_auth_session")

    @chap_auth_session.setter
    def chap_auth_session(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "chap_auth_session", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter(name="initiatorName")
    def initiator_name(self) -> Optional[pulumi.Input[str]]:
        """
        Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
        """
        return pulumi.get(self, "initiator_name")

    @initiator_name.setter
    def initiator_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "initiator_name", value)

    @property
    @pulumi.getter(name="iscsiInterface")
    def iscsi_interface(self) -> Optional[pulumi.Input[str]]:
        """
        iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
        """
        return pulumi.get(self, "iscsi_interface")

    @iscsi_interface.setter
    def iscsi_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iscsi_interface", value)

    @property
    @pulumi.getter
    def portals(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
        """
        return pulumi.get(self, "portals")

    @portals.setter
    def portals(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "portals", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesIscsiSecretRefArgs']]:
        """
        CHAP Secret for iSCSI target and initiator authentication
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesIscsiSecretRefArgs']]):
        pulumi.set(self, "secret_ref", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesIscsiSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        CHAP Secret for iSCSI target and initiator authentication
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesNfsArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 server: pulumi.Input[str],
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        :param pulumi.Input[str] path: Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        :param pulumi.Input[str] server: Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        :param pulumi.Input[bool] read_only: ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "server", server)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def server(self) -> pulumi.Input[str]:
        """
        Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input[str]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesPersistentVolumeClaimArgs:
    def __init__(__self__, *,
                 claim_name: pulumi.Input[str],
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        :param pulumi.Input[str] claim_name: ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        :param pulumi.Input[bool] read_only: Will force the ReadOnly setting in VolumeMounts. Default false.
        """
        pulumi.set(__self__, "claim_name", claim_name)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="claimName")
    def claim_name(self) -> pulumi.Input[str]:
        """
        ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        """
        return pulumi.get(self, "claim_name")

    @claim_name.setter
    def claim_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "claim_name", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Will force the ReadOnly setting in VolumeMounts. Default false.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesPhotonPersistentDiskArgs:
    def __init__(__self__, *,
                 pd_id: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None):
        """
        PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
        :param pulumi.Input[str] pd_id: ID that identifies Photon Controller persistent disk
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        pulumi.set(__self__, "pd_id", pd_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)

    @property
    @pulumi.getter(name="pdID")
    def pd_id(self) -> pulumi.Input[str]:
        """
        ID that identifies Photon Controller persistent disk
        """
        return pulumi.get(self, "pd_id")

    @pd_id.setter
    def pd_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "pd_id", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesPortworxVolumeArgs:
    def __init__(__self__, *,
                 volume_id: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
        :param pulumi.Input[str] volume_id: VolumeID uniquely identifies a Portworx volume
        :param pulumi.Input[str] fs_type: FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
        :param pulumi.Input[bool] read_only: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        pulumi.set(__self__, "volume_id", volume_id)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter(name="volumeID")
    def volume_id(self) -> pulumi.Input[str]:
        """
        VolumeID uniquely identifies a Portworx volume
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "volume_id", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedArgs:
    def __init__(__self__, *,
                 sources: pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesArgs']]],
                 default_mode: Optional[pulumi.Input[int]] = None):
        """
        Items for all in one resources secrets, configmaps, and downward API
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesArgs']]] sources: list of volume projections
        :param pulumi.Input[int] default_mode: Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        pulumi.set(__self__, "sources", sources)
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesArgs']]]:
        """
        list of volume projections
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesArgs']]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[int]]:
        """
        Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_mode", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesArgs:
    def __init__(__self__, *,
                 config_map: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesConfigMapArgs']] = None,
                 downward_api: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesDownwardAPIArgs']] = None,
                 secret: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesSecretArgs']] = None,
                 service_account_token: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesServiceAccountTokenArgs']] = None):
        """
        Projection that may be projected along with other supported volume types
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesConfigMapArgs'] config_map: information about the configMap data to project
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesDownwardAPIArgs'] downward_api: information about the downwardAPI data to project
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesSecretArgs'] secret: information about the secret data to project
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesServiceAccountTokenArgs'] service_account_token: information about the serviceAccountToken data to project
        """
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)
        if downward_api is not None:
            pulumi.set(__self__, "downward_api", downward_api)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if service_account_token is not None:
            pulumi.set(__self__, "service_account_token", service_account_token)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesConfigMapArgs']]:
        """
        information about the configMap data to project
        """
        return pulumi.get(self, "config_map")

    @config_map.setter
    def config_map(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesConfigMapArgs']]):
        pulumi.set(self, "config_map", value)

    @property
    @pulumi.getter(name="downwardAPI")
    def downward_api(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesDownwardAPIArgs']]:
        """
        information about the downwardAPI data to project
        """
        return pulumi.get(self, "downward_api")

    @downward_api.setter
    def downward_api(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesDownwardAPIArgs']]):
        pulumi.set(self, "downward_api", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesSecretArgs']]:
        """
        information about the secret data to project
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesSecretArgs']]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter(name="serviceAccountToken")
    def service_account_token(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesServiceAccountTokenArgs']]:
        """
        information about the serviceAccountToken data to project
        """
        return pulumi.get(self, "service_account_token")

    @service_account_token.setter
    def service_account_token(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesServiceAccountTokenArgs']]):
        pulumi.set(self, "service_account_token", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesConfigMapArgs:
    def __init__(__self__, *,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesConfigMapItemsArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        information about the configMap data to project
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesConfigMapItemsArgs']]] items: If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the ConfigMap or its keys must be defined
        """
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesConfigMapItemsArgs']]]]:
        """
        If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesConfigMapItemsArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the ConfigMap or its keys must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesConfigMapItemsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 path: pulumi.Input[str],
                 mode: Optional[pulumi.Input[int]] = None):
        """
        Maps a string key to a path within a volume.
        :param pulumi.Input[str] key: The key to project.
        :param pulumi.Input[str] path: The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        :param pulumi.Input[int] mode: Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key to project.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesDownwardAPIArgs:
    def __init__(__self__, *,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesDownwardAPIItemsArgs']]]] = None):
        """
        information about the downwardAPI data to project
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesDownwardAPIItemsArgs']]] items: Items is a list of DownwardAPIVolume file
        """
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesDownwardAPIItemsArgs']]]]:
        """
        Items is a list of DownwardAPIVolume file
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesDownwardAPIItemsArgs']]]]):
        pulumi.set(self, "items", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesDownwardAPIItemsArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 field_ref: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs']] = None,
                 mode: Optional[pulumi.Input[int]] = None,
                 resource_field_ref: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs']] = None):
        """
        DownwardAPIVolumeFile represents information to create the file containing the pod field
        :param pulumi.Input[str] path: Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs'] field_ref: Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
        :param pulumi.Input[int] mode: Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs'] resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        """
        pulumi.set(__self__, "path", path)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs']]:
        """
        Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
        """
        return pulumi.get(self, "field_ref")

    @field_ref.setter
    def field_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs']]):
        pulumi.set(self, "field_ref", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs']]:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    @resource_field_ref.setter
    def resource_field_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs']]):
        pulumi.set(self, "resource_field_ref", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs:
    def __init__(__self__, *,
                 field_path: pulumi.Input[str],
                 api_version: Optional[pulumi.Input[str]] = None):
        """
        Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
        :param pulumi.Input[str] field_path: Path of the field to select in the specified API version.
        :param pulumi.Input[str] api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> pulumi.Input[str]:
        """
        Path of the field to select in the specified API version.
        """
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_path", value)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 container_name: Optional[pulumi.Input[str]] = None,
                 divisor: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisorArgs']] = None):
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        :param pulumi.Input[str] resource: Required: resource to select
        :param pulumi.Input[str] container_name: Container name: required for volumes, optional for env vars
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisorArgs'] divisor: Specifies the output format of the exposed resources, defaults to "1"
        """
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        """
        Required: resource to select
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Container name: required for volumes, optional for env vars
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter
    def divisor(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisorArgs']]:
        """
        Specifies the output format of the exposed resources, defaults to "1"
        """
        return pulumi.get(self, "divisor")

    @divisor.setter
    def divisor(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisorArgs']]):
        pulumi.set(self, "divisor", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefDivisorArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesSecretArgs:
    def __init__(__self__, *,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesSecretItemsArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        information about the secret data to project
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesSecretItemsArgs']]] items: If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the Secret or its key must be defined
        """
        if items is not None:
            pulumi.set(__self__, "items", items)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesSecretItemsArgs']]]]:
        """
        If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesSecretItemsArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the Secret or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesSecretItemsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 path: pulumi.Input[str],
                 mode: Optional[pulumi.Input[int]] = None):
        """
        Maps a string key to a path within a volume.
        :param pulumi.Input[str] key: The key to project.
        :param pulumi.Input[str] path: The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        :param pulumi.Input[int] mode: Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key to project.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesProjectedSourcesServiceAccountTokenArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 audience: Optional[pulumi.Input[str]] = None,
                 expiration_seconds: Optional[pulumi.Input[int]] = None):
        """
        information about the serviceAccountToken data to project
        :param pulumi.Input[str] path: Path is the path relative to the mount point of the file to project the token into.
        :param pulumi.Input[str] audience: Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
        :param pulumi.Input[int] expiration_seconds: ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
        """
        pulumi.set(__self__, "path", path)
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if expiration_seconds is not None:
            pulumi.set(__self__, "expiration_seconds", expiration_seconds)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Path is the path relative to the mount point of the file to project the token into.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def audience(self) -> Optional[pulumi.Input[str]]:
        """
        Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
        """
        return pulumi.get(self, "audience")

    @audience.setter
    def audience(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audience", value)

    @property
    @pulumi.getter(name="expirationSeconds")
    def expiration_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
        """
        return pulumi.get(self, "expiration_seconds")

    @expiration_seconds.setter
    def expiration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "expiration_seconds", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesQuobyteArgs:
    def __init__(__self__, *,
                 registry: pulumi.Input[str],
                 volume: pulumi.Input[str],
                 group: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 tenant: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
        :param pulumi.Input[str] registry: Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
        :param pulumi.Input[str] volume: Volume is a string that references an already created Quobyte volume by name.
        :param pulumi.Input[str] group: Group to map volume access to Default is no group
        :param pulumi.Input[bool] read_only: ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
        :param pulumi.Input[str] tenant: Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
        :param pulumi.Input[str] user: User to map volume access to Defaults to serivceaccount user
        """
        pulumi.set(__self__, "registry", registry)
        pulumi.set(__self__, "volume", volume)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if tenant is not None:
            pulumi.set(__self__, "tenant", tenant)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def registry(self) -> pulumi.Input[str]:
        """
        Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
        """
        return pulumi.get(self, "registry")

    @registry.setter
    def registry(self, value: pulumi.Input[str]):
        pulumi.set(self, "registry", value)

    @property
    @pulumi.getter
    def volume(self) -> pulumi.Input[str]:
        """
        Volume is a string that references an already created Quobyte volume by name.
        """
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: pulumi.Input[str]):
        pulumi.set(self, "volume", value)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        """
        Group to map volume access to Default is no group
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter
    def tenant(self) -> Optional[pulumi.Input[str]]:
        """
        Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
        """
        return pulumi.get(self, "tenant")

    @tenant.setter
    def tenant(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        User to map volume access to Defaults to serivceaccount user
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesRbdArgs:
    def __init__(__self__, *,
                 image: pulumi.Input[str],
                 monitors: pulumi.Input[Sequence[pulumi.Input[str]]],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 keyring: Optional[pulumi.Input[str]] = None,
                 pool: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 secret_ref: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesRbdSecretRefArgs']] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
        :param pulumi.Input[str] image: The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input[Sequence[pulumi.Input[str]]] monitors: A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input[str] fs_type: Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
        :param pulumi.Input[str] keyring: Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input[str] pool: The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input[bool] read_only: ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesRbdSecretRefArgs'] secret_ref: SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input[str] user: The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "monitors", monitors)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if keyring is not None:
            pulumi.set(__self__, "keyring", keyring)
        if pool is not None:
            pulumi.set(__self__, "pool", pool)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input[str]:
        """
        The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[str]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def monitors(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        return pulumi.get(self, "monitors")

    @monitors.setter
    def monitors(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "monitors", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter
    def keyring(self) -> Optional[pulumi.Input[str]]:
        """
        Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        return pulumi.get(self, "keyring")

    @keyring.setter
    def keyring(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keyring", value)

    @property
    @pulumi.getter
    def pool(self) -> Optional[pulumi.Input[str]]:
        """
        The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        return pulumi.get(self, "pool")

    @pool.setter
    def pool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pool", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesRbdSecretRefArgs']]:
        """
        SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesRbdSecretRefArgs']]):
        pulumi.set(self, "secret_ref", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesRbdSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesScaleIOArgs:
    def __init__(__self__, *,
                 gateway: pulumi.Input[str],
                 secret_ref: pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesScaleIOSecretRefArgs'],
                 system: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 protection_domain: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 ssl_enabled: Optional[pulumi.Input[bool]] = None,
                 storage_mode: Optional[pulumi.Input[str]] = None,
                 storage_pool: Optional[pulumi.Input[str]] = None,
                 volume_name: Optional[pulumi.Input[str]] = None):
        """
        ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
        :param pulumi.Input[str] gateway: The host address of the ScaleIO API Gateway.
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesScaleIOSecretRefArgs'] secret_ref: SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
        :param pulumi.Input[str] system: The name of the storage system as configured in ScaleIO.
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
        :param pulumi.Input[str] protection_domain: The name of the ScaleIO Protection Domain for the configured storage.
        :param pulumi.Input[bool] read_only: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        :param pulumi.Input[bool] ssl_enabled: Flag to enable/disable SSL communication with Gateway, default false
        :param pulumi.Input[str] storage_mode: Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
        :param pulumi.Input[str] storage_pool: The ScaleIO Storage Pool associated with the protection domain.
        :param pulumi.Input[str] volume_name: The name of a volume already created in the ScaleIO system that is associated with this volume source.
        """
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "secret_ref", secret_ref)
        pulumi.set(__self__, "system", system)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if protection_domain is not None:
            pulumi.set(__self__, "protection_domain", protection_domain)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if ssl_enabled is not None:
            pulumi.set(__self__, "ssl_enabled", ssl_enabled)
        if storage_mode is not None:
            pulumi.set(__self__, "storage_mode", storage_mode)
        if storage_pool is not None:
            pulumi.set(__self__, "storage_pool", storage_pool)
        if volume_name is not None:
            pulumi.set(__self__, "volume_name", volume_name)

    @property
    @pulumi.getter
    def gateway(self) -> pulumi.Input[str]:
        """
        The host address of the ScaleIO API Gateway.
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: pulumi.Input[str]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesScaleIOSecretRefArgs']:
        """
        SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesScaleIOSecretRefArgs']):
        pulumi.set(self, "secret_ref", value)

    @property
    @pulumi.getter
    def system(self) -> pulumi.Input[str]:
        """
        The name of the storage system as configured in ScaleIO.
        """
        return pulumi.get(self, "system")

    @system.setter
    def system(self, value: pulumi.Input[str]):
        pulumi.set(self, "system", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter(name="protectionDomain")
    def protection_domain(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the ScaleIO Protection Domain for the configured storage.
        """
        return pulumi.get(self, "protection_domain")

    @protection_domain.setter
    def protection_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protection_domain", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="sslEnabled")
    def ssl_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to enable/disable SSL communication with Gateway, default false
        """
        return pulumi.get(self, "ssl_enabled")

    @ssl_enabled.setter
    def ssl_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl_enabled", value)

    @property
    @pulumi.getter(name="storageMode")
    def storage_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
        """
        return pulumi.get(self, "storage_mode")

    @storage_mode.setter
    def storage_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_mode", value)

    @property
    @pulumi.getter(name="storagePool")
    def storage_pool(self) -> Optional[pulumi.Input[str]]:
        """
        The ScaleIO Storage Pool associated with the protection domain.
        """
        return pulumi.get(self, "storage_pool")

    @storage_pool.setter
    def storage_pool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_pool", value)

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of a volume already created in the ScaleIO system that is associated with this volume source.
        """
        return pulumi.get(self, "volume_name")

    @volume_name.setter
    def volume_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_name", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesScaleIOSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesSecretArgs:
    def __init__(__self__, *,
                 default_mode: Optional[pulumi.Input[int]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesSecretItemsArgs']]]] = None,
                 optional: Optional[pulumi.Input[bool]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None):
        """
        Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
        :param pulumi.Input[int] default_mode: Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesSecretItemsArgs']]] items: If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        :param pulumi.Input[bool] optional: Specify whether the Secret or its keys must be defined
        :param pulumi.Input[str] secret_name: Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
        """
        if default_mode is not None:
            pulumi.set(__self__, "default_mode", default_mode)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="defaultMode")
    def default_mode(self) -> Optional[pulumi.Input[int]]:
        """
        Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "default_mode")

    @default_mode.setter
    def default_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_mode", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesSecretItemsArgs']]]]:
        """
        If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesSecretItemsArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the Secret or its keys must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesSecretItemsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 path: pulumi.Input[str],
                 mode: Optional[pulumi.Input[int]] = None):
        """
        Maps a string key to a path within a volume.
        :param pulumi.Input[str] key: The key to project.
        :param pulumi.Input[str] path: The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        :param pulumi.Input[int] mode: Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "path", path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key to project.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        """
        Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesStorageosArgs:
    def __init__(__self__, *,
                 fs_type: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 secret_ref: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesStorageosSecretRefArgs']] = None,
                 volume_name: Optional[pulumi.Input[str]] = None,
                 volume_namespace: Optional[pulumi.Input[str]] = None):
        """
        StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        :param pulumi.Input[bool] read_only: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesStorageosSecretRefArgs'] secret_ref: SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
        :param pulumi.Input[str] volume_name: VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
        :param pulumi.Input[str] volume_namespace: VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
        """
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if secret_ref is not None:
            pulumi.set(__self__, "secret_ref", secret_ref)
        if volume_name is not None:
            pulumi.set(__self__, "volume_name", volume_name)
        if volume_namespace is not None:
            pulumi.set(__self__, "volume_namespace", volume_namespace)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesStorageosSecretRefArgs']]:
        """
        SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerConfigVolumesStorageosSecretRefArgs']]):
        pulumi.set(self, "secret_ref", value)

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[pulumi.Input[str]]:
        """
        VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
        """
        return pulumi.get(self, "volume_name")

    @volume_name.setter
    def volume_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_name", value)

    @property
    @pulumi.getter(name="volumeNamespace")
    def volume_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
        """
        return pulumi.get(self, "volume_namespace")

    @volume_namespace.setter
    def volume_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_namespace", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesStorageosSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerConfigVolumesVsphereVolumeArgs:
    def __init__(__self__, *,
                 volume_path: pulumi.Input[str],
                 fs_type: Optional[pulumi.Input[str]] = None,
                 storage_policy_id: Optional[pulumi.Input[str]] = None,
                 storage_policy_name: Optional[pulumi.Input[str]] = None):
        """
        VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
        :param pulumi.Input[str] volume_path: Path that identifies vSphere volume vmdk
        :param pulumi.Input[str] fs_type: Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        :param pulumi.Input[str] storage_policy_id: Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
        :param pulumi.Input[str] storage_policy_name: Storage Policy Based Management (SPBM) profile name.
        """
        pulumi.set(__self__, "volume_path", volume_path)
        if fs_type is not None:
            pulumi.set(__self__, "fs_type", fs_type)
        if storage_policy_id is not None:
            pulumi.set(__self__, "storage_policy_id", storage_policy_id)
        if storage_policy_name is not None:
            pulumi.set(__self__, "storage_policy_name", storage_policy_name)

    @property
    @pulumi.getter(name="volumePath")
    def volume_path(self) -> pulumi.Input[str]:
        """
        Path that identifies vSphere volume vmdk
        """
        return pulumi.get(self, "volume_path")

    @volume_path.setter
    def volume_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "volume_path", value)

    @property
    @pulumi.getter(name="fsType")
    def fs_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        """
        return pulumi.get(self, "fs_type")

    @fs_type.setter
    def fs_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fs_type", value)

    @property
    @pulumi.getter(name="storagePolicyID")
    def storage_policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
        """
        return pulumi.get(self, "storage_policy_id")

    @storage_policy_id.setter
    def storage_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_policy_id", value)

    @property
    @pulumi.getter(name="storagePolicyName")
    def storage_policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        Storage Policy Based Management (SPBM) profile name.
        """
        return pulumi.get(self, "storage_policy_name")

    @storage_policy_name.setter
    def storage_policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_policy_name", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerCustomConfigArgs:
    def __init__(__self__, *,
                 config_data: Optional[pulumi.Input[str]] = None,
                 config_map: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerCustomConfigConfigMapArgs']] = None):
        """
        Allow to put custom configuration for the agent, corresponding to the datadog.yaml config file See https://docs.datadoghq.com/agent/guide/agent-configuration-files/?tab=agentv6 for more details.
        :param pulumi.Input[str] config_data: ConfigData corresponds to the configuration file content
        :param pulumi.Input['DatadogAgentSpecClusterChecksRunnerCustomConfigConfigMapArgs'] config_map: ConfigMap name of a ConfigMap used to mount the configuration file
        """
        if config_data is not None:
            pulumi.set(__self__, "config_data", config_data)
        if config_map is not None:
            pulumi.set(__self__, "config_map", config_map)

    @property
    @pulumi.getter(name="configData")
    def config_data(self) -> Optional[pulumi.Input[str]]:
        """
        ConfigData corresponds to the configuration file content
        """
        return pulumi.get(self, "config_data")

    @config_data.setter
    def config_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_data", value)

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerCustomConfigConfigMapArgs']]:
        """
        ConfigMap name of a ConfigMap used to mount the configuration file
        """
        return pulumi.get(self, "config_map")

    @config_map.setter
    def config_map(self, value: Optional[pulumi.Input['DatadogAgentSpecClusterChecksRunnerCustomConfigConfigMapArgs']]):
        pulumi.set(self, "config_map", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerCustomConfigConfigMapArgs:
    def __init__(__self__, *,
                 file_key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        ConfigMap name of a ConfigMap used to mount the configuration file
        :param pulumi.Input[str] file_key: FileKey corresponds to the key used in the ConfigMap.Data to store the configuration file content
        :param pulumi.Input[str] name: Name the ConfigMap name
        """
        if file_key is not None:
            pulumi.set(__self__, "file_key", file_key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="fileKey")
    def file_key(self) -> Optional[pulumi.Input[str]]:
        """
        FileKey corresponds to the key used in the ConfigMap.Data to store the configuration file content
        """
        return pulumi.get(self, "file_key")

    @file_key.setter
    def file_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name the ConfigMap name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerImageArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 pull_policy: Optional[pulumi.Input[str]] = None,
                 pull_secrets: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerImagePullSecretsArgs']]]] = None):
        """
        The container image of the Datadog Cluster Checks Runner
        :param pulumi.Input[str] name: Define the image to use Use "datadog/agent:latest" for Datadog Agent 6 Use "datadog/dogstatsd:latest" for Standalone Datadog Agent DogStatsD6 Use "datadog/cluster-agent:latest" for Datadog Cluster Agent
        :param pulumi.Input[str] pull_policy: The Kubernetes pull policy Use Always, Never or IfNotPresent
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerImagePullSecretsArgs']]] pull_secrets: It is possible to specify docker registry credentials See https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
        """
        pulumi.set(__self__, "name", name)
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)
        if pull_secrets is not None:
            pulumi.set(__self__, "pull_secrets", pull_secrets)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Define the image to use Use "datadog/agent:latest" for Datadog Agent 6 Use "datadog/dogstatsd:latest" for Standalone Datadog Agent DogStatsD6 Use "datadog/cluster-agent:latest" for Datadog Cluster Agent
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        The Kubernetes pull policy Use Always, Never or IfNotPresent
        """
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)

    @property
    @pulumi.getter(name="pullSecrets")
    def pull_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerImagePullSecretsArgs']]]]:
        """
        It is possible to specify docker registry credentials See https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
        """
        return pulumi.get(self, "pull_secrets")

    @pull_secrets.setter
    def pull_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentSpecClusterChecksRunnerImagePullSecretsArgs']]]]):
        pulumi.set(self, "pull_secrets", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerImagePullSecretsArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerRbacArgs:
    def __init__(__self__, *,
                 create: Optional[pulumi.Input[bool]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None):
        """
        RBAC configuration of the Datadog Cluster Checks Runner
        :param pulumi.Input[bool] create: Used to configure RBAC resources creation
        :param pulumi.Input[str] service_account_name: Used to set up the service account name to use Ignored if the field Create is true
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)

    @property
    @pulumi.getter
    def create(self) -> Optional[pulumi.Input[bool]]:
        """
        Used to configure RBAC resources creation
        """
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        Used to set up the service account name to use Ignored if the field Create is true
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)


@pulumi.input_type
class DatadogAgentSpecClusterChecksRunnerTolerationsArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 toleration_seconds: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
        :param pulumi.Input[str] effect: Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        :param pulumi.Input[str] key: Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        :param pulumi.Input[str] operator: Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
        :param pulumi.Input[int] toleration_seconds: TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
        :param pulumi.Input[str] value: Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        """
        Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
        """
        return pulumi.get(self, "toleration_seconds")

    @toleration_seconds.setter
    def toleration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "toleration_seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DatadogAgentSpecCredentialsArgs:
    def __init__(__self__, *,
                 api_key: Optional[pulumi.Input[str]] = None,
                 api_key_existing_secret: Optional[pulumi.Input[str]] = None,
                 api_secret: Optional[pulumi.Input['DatadogAgentSpecCredentialsApiSecretArgs']] = None,
                 app_key: Optional[pulumi.Input[str]] = None,
                 app_key_existing_secret: Optional[pulumi.Input[str]] = None,
                 app_secret: Optional[pulumi.Input['DatadogAgentSpecCredentialsAppSecretArgs']] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 use_secret_backend: Optional[pulumi.Input[bool]] = None):
        """
        Configure the credentials required to run Agents
        :param pulumi.Input[str] api_key: APIKey Set this to your Datadog API key before the Agent runs. ref: https://app.datadoghq.com/account/settings#agent/kubernetes
        :param pulumi.Input[str] api_key_existing_secret: APIKeyExistingSecret is DEPRECATED. In order to pass the API key through an existing secret, please consider "apiSecret" instead. If set, this parameter takes precedence over "apiKey".
        :param pulumi.Input['DatadogAgentSpecCredentialsApiSecretArgs'] api_secret: APISecret Use existing Secret which stores API key instead of creating a new one. If set, this parameter takes precedence over "apiKey" and "apiKeyExistingSecret".
        :param pulumi.Input[str] app_key: If you are using clusterAgent.metricsProvider.enabled = true, you must set a Datadog application key for read access to your metrics.
        :param pulumi.Input[str] app_key_existing_secret: AppKeyExistingSecret is DEPRECATED. In order to pass the APP key through an existing secret, please consider "appSecret" instead. If set, this parameter takes precedence over "appKey".
        :param pulumi.Input['DatadogAgentSpecCredentialsAppSecretArgs'] app_secret: APPSecret Use existing Secret which stores API key instead of creating a new one. If set, this parameter takes precedence over "apiKey" and "appKeyExistingSecret".
        :param pulumi.Input[str] token: This needs to be at least 32 characters a-zA-z It is a preshared key between the node agents and the cluster agent
        :param pulumi.Input[bool] use_secret_backend: UseSecretBackend use the Agent secret backend feature for retreiving all credentials needed by the different components: Agent, Cluster, Cluster-Checks. If `useSecretBackend: true`, other credential parameters will be ignored. default value is false.
        """
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if api_key_existing_secret is not None:
            pulumi.set(__self__, "api_key_existing_secret", api_key_existing_secret)
        if api_secret is not None:
            pulumi.set(__self__, "api_secret", api_secret)
        if app_key is not None:
            pulumi.set(__self__, "app_key", app_key)
        if app_key_existing_secret is not None:
            pulumi.set(__self__, "app_key_existing_secret", app_key_existing_secret)
        if app_secret is not None:
            pulumi.set(__self__, "app_secret", app_secret)
        if token is not None:
            pulumi.set(__self__, "token", token)
        if use_secret_backend is not None:
            pulumi.set(__self__, "use_secret_backend", use_secret_backend)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[pulumi.Input[str]]:
        """
        APIKey Set this to your Datadog API key before the Agent runs. ref: https://app.datadoghq.com/account/settings#agent/kubernetes
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="apiKeyExistingSecret")
    def api_key_existing_secret(self) -> Optional[pulumi.Input[str]]:
        """
        APIKeyExistingSecret is DEPRECATED. In order to pass the API key through an existing secret, please consider "apiSecret" instead. If set, this parameter takes precedence over "apiKey".
        """
        return pulumi.get(self, "api_key_existing_secret")

    @api_key_existing_secret.setter
    def api_key_existing_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_key_existing_secret", value)

    @property
    @pulumi.getter(name="apiSecret")
    def api_secret(self) -> Optional[pulumi.Input['DatadogAgentSpecCredentialsApiSecretArgs']]:
        """
        APISecret Use existing Secret which stores API key instead of creating a new one. If set, this parameter takes precedence over "apiKey" and "apiKeyExistingSecret".
        """
        return pulumi.get(self, "api_secret")

    @api_secret.setter
    def api_secret(self, value: Optional[pulumi.Input['DatadogAgentSpecCredentialsApiSecretArgs']]):
        pulumi.set(self, "api_secret", value)

    @property
    @pulumi.getter(name="appKey")
    def app_key(self) -> Optional[pulumi.Input[str]]:
        """
        If you are using clusterAgent.metricsProvider.enabled = true, you must set a Datadog application key for read access to your metrics.
        """
        return pulumi.get(self, "app_key")

    @app_key.setter
    def app_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_key", value)

    @property
    @pulumi.getter(name="appKeyExistingSecret")
    def app_key_existing_secret(self) -> Optional[pulumi.Input[str]]:
        """
        AppKeyExistingSecret is DEPRECATED. In order to pass the APP key through an existing secret, please consider "appSecret" instead. If set, this parameter takes precedence over "appKey".
        """
        return pulumi.get(self, "app_key_existing_secret")

    @app_key_existing_secret.setter
    def app_key_existing_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_key_existing_secret", value)

    @property
    @pulumi.getter(name="appSecret")
    def app_secret(self) -> Optional[pulumi.Input['DatadogAgentSpecCredentialsAppSecretArgs']]:
        """
        APPSecret Use existing Secret which stores API key instead of creating a new one. If set, this parameter takes precedence over "apiKey" and "appKeyExistingSecret".
        """
        return pulumi.get(self, "app_secret")

    @app_secret.setter
    def app_secret(self, value: Optional[pulumi.Input['DatadogAgentSpecCredentialsAppSecretArgs']]):
        pulumi.set(self, "app_secret", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        """
        This needs to be at least 32 characters a-zA-z It is a preshared key between the node agents and the cluster agent
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter(name="useSecretBackend")
    def use_secret_backend(self) -> Optional[pulumi.Input[bool]]:
        """
        UseSecretBackend use the Agent secret backend feature for retreiving all credentials needed by the different components: Agent, Cluster, Cluster-Checks. If `useSecretBackend: true`, other credential parameters will be ignored. default value is false.
        """
        return pulumi.get(self, "use_secret_backend")

    @use_secret_backend.setter
    def use_secret_backend(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_secret_backend", value)


@pulumi.input_type
class DatadogAgentSpecCredentialsApiSecretArgs:
    def __init__(__self__, *,
                 secret_name: pulumi.Input[str],
                 key_name: Optional[pulumi.Input[str]] = None):
        """
        APISecret Use existing Secret which stores API key instead of creating a new one. If set, this parameter takes precedence over "apiKey" and "apiKeyExistingSecret".
        :param pulumi.Input[str] secret_name: SecretName is the name of the secret
        :param pulumi.Input[str] key_name: KeyName is the key of the secret to use
        """
        pulumi.set(__self__, "secret_name", secret_name)
        if key_name is not None:
            pulumi.set(__self__, "key_name", key_name)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[str]:
        """
        SecretName is the name of the secret
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_name", value)

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> Optional[pulumi.Input[str]]:
        """
        KeyName is the key of the secret to use
        """
        return pulumi.get(self, "key_name")

    @key_name.setter
    def key_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_name", value)


@pulumi.input_type
class DatadogAgentSpecCredentialsAppSecretArgs:
    def __init__(__self__, *,
                 secret_name: pulumi.Input[str],
                 key_name: Optional[pulumi.Input[str]] = None):
        """
        APPSecret Use existing Secret which stores API key instead of creating a new one. If set, this parameter takes precedence over "apiKey" and "appKeyExistingSecret".
        :param pulumi.Input[str] secret_name: SecretName is the name of the secret
        :param pulumi.Input[str] key_name: KeyName is the key of the secret to use
        """
        pulumi.set(__self__, "secret_name", secret_name)
        if key_name is not None:
            pulumi.set(__self__, "key_name", key_name)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[str]:
        """
        SecretName is the name of the secret
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_name", value)

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> Optional[pulumi.Input[str]]:
        """
        KeyName is the key of the secret to use
        """
        return pulumi.get(self, "key_name")

    @key_name.setter
    def key_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_name", value)


@pulumi.input_type
class DatadogAgentStatusArgs:
    def __init__(__self__, *,
                 agent: Optional[pulumi.Input['DatadogAgentStatusAgentArgs']] = None,
                 cluster_agent: Optional[pulumi.Input['DatadogAgentStatusClusterAgentArgs']] = None,
                 cluster_checks_runner: Optional[pulumi.Input['DatadogAgentStatusClusterChecksRunnerArgs']] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentStatusConditionsArgs']]]] = None):
        """
        DatadogAgentStatus defines the observed state of DatadogAgent
        :param pulumi.Input['DatadogAgentStatusAgentArgs'] agent: The actual state of the Agent as an extended daemonset
        :param pulumi.Input['DatadogAgentStatusClusterAgentArgs'] cluster_agent: The actual state of the Cluster Agent as a deployment
        :param pulumi.Input['DatadogAgentStatusClusterChecksRunnerArgs'] cluster_checks_runner: The actual state of the Cluster Checks Runner as a deployment
        :param pulumi.Input[Sequence[pulumi.Input['DatadogAgentStatusConditionsArgs']]] conditions: Conditions Represents the latest available observations of a DatadogAgent's current state.
        """
        if agent is not None:
            pulumi.set(__self__, "agent", agent)
        if cluster_agent is not None:
            pulumi.set(__self__, "cluster_agent", cluster_agent)
        if cluster_checks_runner is not None:
            pulumi.set(__self__, "cluster_checks_runner", cluster_checks_runner)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def agent(self) -> Optional[pulumi.Input['DatadogAgentStatusAgentArgs']]:
        """
        The actual state of the Agent as an extended daemonset
        """
        return pulumi.get(self, "agent")

    @agent.setter
    def agent(self, value: Optional[pulumi.Input['DatadogAgentStatusAgentArgs']]):
        pulumi.set(self, "agent", value)

    @property
    @pulumi.getter(name="clusterAgent")
    def cluster_agent(self) -> Optional[pulumi.Input['DatadogAgentStatusClusterAgentArgs']]:
        """
        The actual state of the Cluster Agent as a deployment
        """
        return pulumi.get(self, "cluster_agent")

    @cluster_agent.setter
    def cluster_agent(self, value: Optional[pulumi.Input['DatadogAgentStatusClusterAgentArgs']]):
        pulumi.set(self, "cluster_agent", value)

    @property
    @pulumi.getter(name="clusterChecksRunner")
    def cluster_checks_runner(self) -> Optional[pulumi.Input['DatadogAgentStatusClusterChecksRunnerArgs']]:
        """
        The actual state of the Cluster Checks Runner as a deployment
        """
        return pulumi.get(self, "cluster_checks_runner")

    @cluster_checks_runner.setter
    def cluster_checks_runner(self, value: Optional[pulumi.Input['DatadogAgentStatusClusterChecksRunnerArgs']]):
        pulumi.set(self, "cluster_checks_runner", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentStatusConditionsArgs']]]]:
        """
        Conditions Represents the latest available observations of a DatadogAgent's current state.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogAgentStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)


@pulumi.input_type
class DatadogAgentStatusAgentArgs:
    def __init__(__self__, *,
                 available: pulumi.Input[int],
                 current: pulumi.Input[int],
                 desired: pulumi.Input[int],
                 ready: pulumi.Input[int],
                 up_to_date: pulumi.Input[int],
                 current_hash: Optional[pulumi.Input[str]] = None,
                 daemonset_name: Optional[pulumi.Input[str]] = None,
                 last_update: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        The actual state of the Agent as an extended daemonset
        :param pulumi.Input[str] daemonset_name: DaemonsetName corresponds to the name of the created DaemonSet
        """
        pulumi.set(__self__, "available", available)
        pulumi.set(__self__, "current", current)
        pulumi.set(__self__, "desired", desired)
        pulumi.set(__self__, "ready", ready)
        pulumi.set(__self__, "up_to_date", up_to_date)
        if current_hash is not None:
            pulumi.set(__self__, "current_hash", current_hash)
        if daemonset_name is not None:
            pulumi.set(__self__, "daemonset_name", daemonset_name)
        if last_update is not None:
            pulumi.set(__self__, "last_update", last_update)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def available(self) -> pulumi.Input[int]:
        return pulumi.get(self, "available")

    @available.setter
    def available(self, value: pulumi.Input[int]):
        pulumi.set(self, "available", value)

    @property
    @pulumi.getter
    def current(self) -> pulumi.Input[int]:
        return pulumi.get(self, "current")

    @current.setter
    def current(self, value: pulumi.Input[int]):
        pulumi.set(self, "current", value)

    @property
    @pulumi.getter
    def desired(self) -> pulumi.Input[int]:
        return pulumi.get(self, "desired")

    @desired.setter
    def desired(self, value: pulumi.Input[int]):
        pulumi.set(self, "desired", value)

    @property
    @pulumi.getter
    def ready(self) -> pulumi.Input[int]:
        return pulumi.get(self, "ready")

    @ready.setter
    def ready(self, value: pulumi.Input[int]):
        pulumi.set(self, "ready", value)

    @property
    @pulumi.getter(name="upToDate")
    def up_to_date(self) -> pulumi.Input[int]:
        return pulumi.get(self, "up_to_date")

    @up_to_date.setter
    def up_to_date(self, value: pulumi.Input[int]):
        pulumi.set(self, "up_to_date", value)

    @property
    @pulumi.getter(name="currentHash")
    def current_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "current_hash")

    @current_hash.setter
    def current_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "current_hash", value)

    @property
    @pulumi.getter(name="daemonsetName")
    def daemonset_name(self) -> Optional[pulumi.Input[str]]:
        """
        DaemonsetName corresponds to the name of the created DaemonSet
        """
        return pulumi.get(self, "daemonset_name")

    @daemonset_name.setter
    def daemonset_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "daemonset_name", value)

    @property
    @pulumi.getter(name="lastUpdate")
    def last_update(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_update")

    @last_update.setter
    def last_update(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_update", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class DatadogAgentStatusClusterAgentArgs:
    def __init__(__self__, *,
                 available_replicas: Optional[pulumi.Input[int]] = None,
                 current_hash: Optional[pulumi.Input[str]] = None,
                 deployment_name: Optional[pulumi.Input[str]] = None,
                 generated_token: Optional[pulumi.Input[str]] = None,
                 last_update: Optional[pulumi.Input[str]] = None,
                 ready_replicas: Optional[pulumi.Input[int]] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 unavailable_replicas: Optional[pulumi.Input[int]] = None,
                 updated_replicas: Optional[pulumi.Input[int]] = None):
        """
        The actual state of the Cluster Agent as a deployment
        :param pulumi.Input[int] available_replicas: Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
        :param pulumi.Input[str] deployment_name: DeploymentName corresponds to the name of the Cluster Agent Deployment
        :param pulumi.Input[str] generated_token: GeneratedToken corresponds to the generated token if any token was provided in the Credential configuration when ClusterAgent is enabled
        :param pulumi.Input[int] ready_replicas: Total number of ready pods targeted by this deployment.
        :param pulumi.Input[int] replicas: Total number of non-terminated pods targeted by this deployment (their labels match the selector).
        :param pulumi.Input[str] state: State corresponds to the ClusterAgent deployment state
        :param pulumi.Input[str] status: Status corresponds to the ClusterAgent deployment computed status
        :param pulumi.Input[int] unavailable_replicas: Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
        :param pulumi.Input[int] updated_replicas: Total number of non-terminated pods targeted by this deployment that have the desired template spec.
        """
        if available_replicas is not None:
            pulumi.set(__self__, "available_replicas", available_replicas)
        if current_hash is not None:
            pulumi.set(__self__, "current_hash", current_hash)
        if deployment_name is not None:
            pulumi.set(__self__, "deployment_name", deployment_name)
        if generated_token is not None:
            pulumi.set(__self__, "generated_token", generated_token)
        if last_update is not None:
            pulumi.set(__self__, "last_update", last_update)
        if ready_replicas is not None:
            pulumi.set(__self__, "ready_replicas", ready_replicas)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if unavailable_replicas is not None:
            pulumi.set(__self__, "unavailable_replicas", unavailable_replicas)
        if updated_replicas is not None:
            pulumi.set(__self__, "updated_replicas", updated_replicas)

    @property
    @pulumi.getter(name="availableReplicas")
    def available_replicas(self) -> Optional[pulumi.Input[int]]:
        """
        Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
        """
        return pulumi.get(self, "available_replicas")

    @available_replicas.setter
    def available_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "available_replicas", value)

    @property
    @pulumi.getter(name="currentHash")
    def current_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "current_hash")

    @current_hash.setter
    def current_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "current_hash", value)

    @property
    @pulumi.getter(name="deploymentName")
    def deployment_name(self) -> Optional[pulumi.Input[str]]:
        """
        DeploymentName corresponds to the name of the Cluster Agent Deployment
        """
        return pulumi.get(self, "deployment_name")

    @deployment_name.setter
    def deployment_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deployment_name", value)

    @property
    @pulumi.getter(name="generatedToken")
    def generated_token(self) -> Optional[pulumi.Input[str]]:
        """
        GeneratedToken corresponds to the generated token if any token was provided in the Credential configuration when ClusterAgent is enabled
        """
        return pulumi.get(self, "generated_token")

    @generated_token.setter
    def generated_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "generated_token", value)

    @property
    @pulumi.getter(name="lastUpdate")
    def last_update(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_update")

    @last_update.setter
    def last_update(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_update", value)

    @property
    @pulumi.getter(name="readyReplicas")
    def ready_replicas(self) -> Optional[pulumi.Input[int]]:
        """
        Total number of ready pods targeted by this deployment.
        """
        return pulumi.get(self, "ready_replicas")

    @ready_replicas.setter
    def ready_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ready_replicas", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        """
        Total number of non-terminated pods targeted by this deployment (their labels match the selector).
        """
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        State corresponds to the ClusterAgent deployment state
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status corresponds to the ClusterAgent deployment computed status
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="unavailableReplicas")
    def unavailable_replicas(self) -> Optional[pulumi.Input[int]]:
        """
        Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
        """
        return pulumi.get(self, "unavailable_replicas")

    @unavailable_replicas.setter
    def unavailable_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "unavailable_replicas", value)

    @property
    @pulumi.getter(name="updatedReplicas")
    def updated_replicas(self) -> Optional[pulumi.Input[int]]:
        """
        Total number of non-terminated pods targeted by this deployment that have the desired template spec.
        """
        return pulumi.get(self, "updated_replicas")

    @updated_replicas.setter
    def updated_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "updated_replicas", value)


@pulumi.input_type
class DatadogAgentStatusClusterChecksRunnerArgs:
    def __init__(__self__, *,
                 available_replicas: Optional[pulumi.Input[int]] = None,
                 current_hash: Optional[pulumi.Input[str]] = None,
                 deployment_name: Optional[pulumi.Input[str]] = None,
                 generated_token: Optional[pulumi.Input[str]] = None,
                 last_update: Optional[pulumi.Input[str]] = None,
                 ready_replicas: Optional[pulumi.Input[int]] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 unavailable_replicas: Optional[pulumi.Input[int]] = None,
                 updated_replicas: Optional[pulumi.Input[int]] = None):
        """
        The actual state of the Cluster Checks Runner as a deployment
        :param pulumi.Input[int] available_replicas: Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
        :param pulumi.Input[str] deployment_name: DeploymentName corresponds to the name of the Cluster Agent Deployment
        :param pulumi.Input[str] generated_token: GeneratedToken corresponds to the generated token if any token was provided in the Credential configuration when ClusterAgent is enabled
        :param pulumi.Input[int] ready_replicas: Total number of ready pods targeted by this deployment.
        :param pulumi.Input[int] replicas: Total number of non-terminated pods targeted by this deployment (their labels match the selector).
        :param pulumi.Input[str] state: State corresponds to the ClusterAgent deployment state
        :param pulumi.Input[str] status: Status corresponds to the ClusterAgent deployment computed status
        :param pulumi.Input[int] unavailable_replicas: Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
        :param pulumi.Input[int] updated_replicas: Total number of non-terminated pods targeted by this deployment that have the desired template spec.
        """
        if available_replicas is not None:
            pulumi.set(__self__, "available_replicas", available_replicas)
        if current_hash is not None:
            pulumi.set(__self__, "current_hash", current_hash)
        if deployment_name is not None:
            pulumi.set(__self__, "deployment_name", deployment_name)
        if generated_token is not None:
            pulumi.set(__self__, "generated_token", generated_token)
        if last_update is not None:
            pulumi.set(__self__, "last_update", last_update)
        if ready_replicas is not None:
            pulumi.set(__self__, "ready_replicas", ready_replicas)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if unavailable_replicas is not None:
            pulumi.set(__self__, "unavailable_replicas", unavailable_replicas)
        if updated_replicas is not None:
            pulumi.set(__self__, "updated_replicas", updated_replicas)

    @property
    @pulumi.getter(name="availableReplicas")
    def available_replicas(self) -> Optional[pulumi.Input[int]]:
        """
        Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
        """
        return pulumi.get(self, "available_replicas")

    @available_replicas.setter
    def available_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "available_replicas", value)

    @property
    @pulumi.getter(name="currentHash")
    def current_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "current_hash")

    @current_hash.setter
    def current_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "current_hash", value)

    @property
    @pulumi.getter(name="deploymentName")
    def deployment_name(self) -> Optional[pulumi.Input[str]]:
        """
        DeploymentName corresponds to the name of the Cluster Agent Deployment
        """
        return pulumi.get(self, "deployment_name")

    @deployment_name.setter
    def deployment_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deployment_name", value)

    @property
    @pulumi.getter(name="generatedToken")
    def generated_token(self) -> Optional[pulumi.Input[str]]:
        """
        GeneratedToken corresponds to the generated token if any token was provided in the Credential configuration when ClusterAgent is enabled
        """
        return pulumi.get(self, "generated_token")

    @generated_token.setter
    def generated_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "generated_token", value)

    @property
    @pulumi.getter(name="lastUpdate")
    def last_update(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_update")

    @last_update.setter
    def last_update(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_update", value)

    @property
    @pulumi.getter(name="readyReplicas")
    def ready_replicas(self) -> Optional[pulumi.Input[int]]:
        """
        Total number of ready pods targeted by this deployment.
        """
        return pulumi.get(self, "ready_replicas")

    @ready_replicas.setter
    def ready_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ready_replicas", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        """
        Total number of non-terminated pods targeted by this deployment (their labels match the selector).
        """
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        State corresponds to the ClusterAgent deployment state
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status corresponds to the ClusterAgent deployment computed status
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="unavailableReplicas")
    def unavailable_replicas(self) -> Optional[pulumi.Input[int]]:
        """
        Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
        """
        return pulumi.get(self, "unavailable_replicas")

    @unavailable_replicas.setter
    def unavailable_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "unavailable_replicas", value)

    @property
    @pulumi.getter(name="updatedReplicas")
    def updated_replicas(self) -> Optional[pulumi.Input[int]]:
        """
        Total number of non-terminated pods targeted by this deployment that have the desired template spec.
        """
        return pulumi.get(self, "updated_replicas")

    @updated_replicas.setter
    def updated_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "updated_replicas", value)


@pulumi.input_type
class DatadogAgentStatusConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 last_update_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        DatadogAgentCondition describes the state of a DatadogAgent at a certain point.
        :param pulumi.Input[str] status: Status of the condition, one of True, False, Unknown.
        :param pulumi.Input[str] type: Type of DatadogAgent condition.
        :param pulumi.Input[str] last_transition_time: Last time the condition transitioned from one status to another.
        :param pulumi.Input[str] last_update_time: Last time the condition was updated.
        :param pulumi.Input[str] message: A human readable message indicating details about the transition.
        :param pulumi.Input[str] reason: The reason for the condition's last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if last_update_time is not None:
            pulumi.set(__self__, "last_update_time", last_update_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status of the condition, one of True, False, Unknown.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of DatadogAgent condition.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        """
        Last time the condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> Optional[pulumi.Input[str]]:
        """
        Last time the condition was updated.
        """
        return pulumi.get(self, "last_update_time")

    @last_update_time.setter
    def last_update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_update_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        A human readable message indicating details about the transition.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        The reason for the condition's last transition.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


@pulumi.input_type
class DatadogMetricSpecArgs:
    def __init__(__self__, *,
                 external_metric_name: Optional[pulumi.Input[str]] = None,
                 query: Optional[pulumi.Input[str]] = None):
        """
        DatadogMetricSpec defines the desired state of DatadogMetric
        :param pulumi.Input[str] external_metric_name: ExternalMetricName is reversed for internal use
        :param pulumi.Input[str] query: Query is the raw datadog query
        """
        if external_metric_name is not None:
            pulumi.set(__self__, "external_metric_name", external_metric_name)
        if query is not None:
            pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter(name="externalMetricName")
    def external_metric_name(self) -> Optional[pulumi.Input[str]]:
        """
        ExternalMetricName is reversed for internal use
        """
        return pulumi.get(self, "external_metric_name")

    @external_metric_name.setter
    def external_metric_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_metric_name", value)

    @property
    @pulumi.getter
    def query(self) -> Optional[pulumi.Input[str]]:
        """
        Query is the raw datadog query
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DatadogMetricStatusArgs:
    def __init__(__self__, *,
                 current_value: pulumi.Input[str],
                 autoscaler_references: Optional[pulumi.Input[str]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogMetricStatusConditionsArgs']]]] = None):
        """
        DatadogMetricStatus defines the observed state of DatadogMetric
        :param pulumi.Input[str] current_value: Value is the latest value of the metric
        :param pulumi.Input[str] autoscaler_references: List of autoscalers currently using this DatadogMetric
        :param pulumi.Input[Sequence[pulumi.Input['DatadogMetricStatusConditionsArgs']]] conditions: Conditions Represents the latest available observations of a DatadogMetric's current state.
        """
        pulumi.set(__self__, "current_value", current_value)
        if autoscaler_references is not None:
            pulumi.set(__self__, "autoscaler_references", autoscaler_references)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter(name="currentValue")
    def current_value(self) -> pulumi.Input[str]:
        """
        Value is the latest value of the metric
        """
        return pulumi.get(self, "current_value")

    @current_value.setter
    def current_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "current_value", value)

    @property
    @pulumi.getter(name="autoscalerReferences")
    def autoscaler_references(self) -> Optional[pulumi.Input[str]]:
        """
        List of autoscalers currently using this DatadogMetric
        """
        return pulumi.get(self, "autoscaler_references")

    @autoscaler_references.setter
    def autoscaler_references(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autoscaler_references", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatadogMetricStatusConditionsArgs']]]]:
        """
        Conditions Represents the latest available observations of a DatadogMetric's current state.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatadogMetricStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)


@pulumi.input_type
class DatadogMetricStatusConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 last_update_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        DatadogMetricCondition describes the state of a DatadogMetric at a certain point.
        :param pulumi.Input[str] status: Status of the condition, one of True, False, Unknown.
        :param pulumi.Input[str] type: Type of DatadogMetric condition.
        :param pulumi.Input[str] last_transition_time: Last time the condition transitioned from one status to another.
        :param pulumi.Input[str] last_update_time: Last time the condition was updated.
        :param pulumi.Input[str] message: A human readable message indicating details about the transition.
        :param pulumi.Input[str] reason: The reason for the condition's last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if last_update_time is not None:
            pulumi.set(__self__, "last_update_time", last_update_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status of the condition, one of True, False, Unknown.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of DatadogMetric condition.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        """
        Last time the condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> Optional[pulumi.Input[str]]:
        """
        Last time the condition was updated.
        """
        return pulumi.get(self, "last_update_time")

    @last_update_time.setter
    def last_update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_update_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        A human readable message indicating details about the transition.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        The reason for the condition's last transition.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)



// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Datadoghq.V1Alpha1
{

    [OutputType]
    public sealed class DatadogAgentSpecAgentSystemProbe
    {
        /// <summary>
        /// AppArmorProfileName specify a apparmor profile
        /// </summary>
        public readonly string AppArmorProfileName;
        /// <summary>
        /// BPFDebugEnabled logging for kernel debug
        /// </summary>
        public readonly bool BpfDebugEnabled;
        /// <summary>
        /// ConntrackEnabled enable the system-probe agent to connect to the netlink/conntrack subsystem to add NAT information to connection data Ref: http://conntrack-tools.netfilter.org/
        /// </summary>
        public readonly bool ConntrackEnabled;
        /// <summary>
        /// DebugPort Specify the port to expose pprof and expvar for system-probe agent
        /// </summary>
        public readonly int DebugPort;
        /// <summary>
        /// Enable this to activate live process monitoring. Note: /etc/passwd is automatically mounted to allow username resolution. ref: https://docs.datadoghq.com/graphing/infrastructure/process/#kubernetes-daemonset
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// The Datadog SystemProbe supports many environment variables Ref: https://docs.datadoghq.com/agent/docker/?tab=standard#environment-variables
        /// </summary>
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Datadoghq.V1Alpha1.DatadogAgentSpecAgentSystemProbeEnv> Env;
        /// <summary>
        /// Datadog SystemProbe resource requests and limits Make sure to keep requests and limits equal to keep the pods in the Guaranteed QoS class Ref: http://kubernetes.io/docs/user-guide/compute-resources/
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Datadoghq.V1Alpha1.DatadogAgentSpecAgentSystemProbeResources Resources;
        /// <summary>
        /// SecCompCustomProfileConfigMap specify a pre-existing ConfigMap containing a custom SecComp profile
        /// </summary>
        public readonly string SecCompCustomProfileConfigMap;
        /// <summary>
        /// SecCompProfileName specify a seccomp profile
        /// </summary>
        public readonly string SecCompProfileName;
        /// <summary>
        /// SecCompRootPath specify the seccomp profile root directory
        /// </summary>
        public readonly string SecCompRootPath;
        /// <summary>
        /// You can modify the security context used to run the containers by modifying the label type
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Datadoghq.V1Alpha1.DatadogAgentSpecAgentSystemProbeSecurityContext SecurityContext;

        [OutputConstructor]
        private DatadogAgentSpecAgentSystemProbe(
            string appArmorProfileName,

            bool bpfDebugEnabled,

            bool conntrackEnabled,

            int debugPort,

            bool enabled,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Datadoghq.V1Alpha1.DatadogAgentSpecAgentSystemProbeEnv> env,

            Pulumi.Kubernetes.Types.Outputs.Datadoghq.V1Alpha1.DatadogAgentSpecAgentSystemProbeResources resources,

            string secCompCustomProfileConfigMap,

            string secCompProfileName,

            string secCompRootPath,

            Pulumi.Kubernetes.Types.Outputs.Datadoghq.V1Alpha1.DatadogAgentSpecAgentSystemProbeSecurityContext securityContext)
        {
            AppArmorProfileName = appArmorProfileName;
            BpfDebugEnabled = bpfDebugEnabled;
            ConntrackEnabled = conntrackEnabled;
            DebugPort = debugPort;
            Enabled = enabled;
            Env = env;
            Resources = resources;
            SecCompCustomProfileConfigMap = secCompCustomProfileConfigMap;
            SecCompProfileName = secCompProfileName;
            SecCompRootPath = secCompRootPath;
            SecurityContext = securityContext;
        }
    }
}

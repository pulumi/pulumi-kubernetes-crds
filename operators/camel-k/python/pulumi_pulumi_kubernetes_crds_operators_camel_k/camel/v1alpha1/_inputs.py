# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'KameletBindingSpecArgs',
    'KameletBindingSpecIntegrationArgs',
    'KameletBindingSpecIntegrationConfigurationArgs',
    'KameletBindingSpecIntegrationResourcesArgs',
    'KameletBindingSpecIntegrationSourcesArgs',
    'KameletBindingSpecIntegrationTraitsArgs',
    'KameletBindingSpecSinkArgs',
    'KameletBindingSpecSinkRefArgs',
    'KameletBindingSpecSourceArgs',
    'KameletBindingSpecSourceRefArgs',
    'KameletBindingStatusArgs',
    'KameletBindingStatusConditionsArgs',
    'KameletSpecArgs',
    'KameletSpecDefinitionArgs',
    'KameletSpecDefinitionExternalDocsArgs',
    'KameletSpecSourcesArgs',
    'KameletSpecTypesArgs',
    'KameletSpecTypesSchemaArgs',
    'KameletSpecTypesSchemaExternalDocsArgs',
    'KameletStatusArgs',
    'KameletStatusConditionsArgs',
    'KameletStatusPropertiesArgs',
]

@pulumi.input_type
class KameletBindingSpecArgs:
    def __init__(__self__, *,
                 integration: Optional[pulumi.Input['KameletBindingSpecIntegrationArgs']] = None,
                 sink: Optional[pulumi.Input['KameletBindingSpecSinkArgs']] = None,
                 source: Optional[pulumi.Input['KameletBindingSpecSourceArgs']] = None):
        """
        KameletBindingSpec --
        :param pulumi.Input['KameletBindingSpecIntegrationArgs'] integration: Integration is an optional integration used to specify custom parameters
        :param pulumi.Input['KameletBindingSpecSinkArgs'] sink: Sink is the destination of the integration defined by this binding
        :param pulumi.Input['KameletBindingSpecSourceArgs'] source: Source is the starting point of the integration defined by this binding
        """
        if integration is not None:
            pulumi.set(__self__, "integration", integration)
        if sink is not None:
            pulumi.set(__self__, "sink", sink)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def integration(self) -> Optional[pulumi.Input['KameletBindingSpecIntegrationArgs']]:
        """
        Integration is an optional integration used to specify custom parameters
        """
        return pulumi.get(self, "integration")

    @integration.setter
    def integration(self, value: Optional[pulumi.Input['KameletBindingSpecIntegrationArgs']]):
        pulumi.set(self, "integration", value)

    @property
    @pulumi.getter
    def sink(self) -> Optional[pulumi.Input['KameletBindingSpecSinkArgs']]:
        """
        Sink is the destination of the integration defined by this binding
        """
        return pulumi.get(self, "sink")

    @sink.setter
    def sink(self, value: Optional[pulumi.Input['KameletBindingSpecSinkArgs']]):
        pulumi.set(self, "sink", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input['KameletBindingSpecSourceArgs']]:
        """
        Source is the starting point of the integration defined by this binding
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input['KameletBindingSpecSourceArgs']]):
        pulumi.set(self, "source", value)


@pulumi.input_type
class KameletBindingSpecIntegrationArgs:
    def __init__(__self__, *,
                 configuration: Optional[pulumi.Input[Sequence[pulumi.Input['KameletBindingSpecIntegrationConfigurationArgs']]]] = None,
                 dependencies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 flows: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]] = None,
                 kit: Optional[pulumi.Input[str]] = None,
                 profile: Optional[pulumi.Input[str]] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 repositories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input['KameletBindingSpecIntegrationResourcesArgs']]]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input['KameletBindingSpecIntegrationSourcesArgs']]]] = None,
                 traits: Optional[pulumi.Input[Mapping[str, pulumi.Input['KameletBindingSpecIntegrationTraitsArgs']]]] = None):
        """
        Integration is an optional integration used to specify custom parameters
        :param pulumi.Input[str] profile: TraitProfile represents lists of traits that are enabled for the specific installation/integration
        """
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if dependencies is not None:
            pulumi.set(__self__, "dependencies", dependencies)
        if flows is not None:
            pulumi.set(__self__, "flows", flows)
        if kit is not None:
            pulumi.set(__self__, "kit", kit)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if repositories is not None:
            pulumi.set(__self__, "repositories", repositories)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if traits is not None:
            pulumi.set(__self__, "traits", traits)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KameletBindingSpecIntegrationConfigurationArgs']]]]:
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KameletBindingSpecIntegrationConfigurationArgs']]]]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter
    def dependencies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "dependencies")

    @dependencies.setter
    def dependencies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dependencies", value)

    @property
    @pulumi.getter
    def flows(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]]:
        return pulumi.get(self, "flows")

    @flows.setter
    def flows(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]]):
        pulumi.set(self, "flows", value)

    @property
    @pulumi.getter
    def kit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kit")

    @kit.setter
    def kit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kit", value)

    @property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[str]]:
        """
        TraitProfile represents lists of traits that are enabled for the specific installation/integration
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def repositories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "repositories")

    @repositories.setter
    def repositories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "repositories", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KameletBindingSpecIntegrationResourcesArgs']]]]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KameletBindingSpecIntegrationResourcesArgs']]]]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KameletBindingSpecIntegrationSourcesArgs']]]]:
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KameletBindingSpecIntegrationSourcesArgs']]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter
    def traits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['KameletBindingSpecIntegrationTraitsArgs']]]]:
        return pulumi.get(self, "traits")

    @traits.setter
    def traits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['KameletBindingSpecIntegrationTraitsArgs']]]]):
        pulumi.set(self, "traits", value)


@pulumi.input_type
class KameletBindingSpecIntegrationConfigurationArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        ConfigurationSpec --
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class KameletBindingSpecIntegrationResourcesArgs:
    def __init__(__self__, *,
                 compression: Optional[pulumi.Input[bool]] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 content_key: Optional[pulumi.Input[str]] = None,
                 content_ref: Optional[pulumi.Input[str]] = None,
                 mount_path: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        ResourceSpec --
        :param pulumi.Input[str] type: ResourceType --
        """
        if compression is not None:
            pulumi.set(__self__, "compression", compression)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if content_key is not None:
            pulumi.set(__self__, "content_key", content_key)
        if content_ref is not None:
            pulumi.set(__self__, "content_ref", content_ref)
        if mount_path is not None:
            pulumi.set(__self__, "mount_path", mount_path)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def compression(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "compression")

    @compression.setter
    def compression(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "compression", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="contentKey")
    def content_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_key")

    @content_key.setter
    def content_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_key", value)

    @property
    @pulumi.getter(name="contentRef")
    def content_ref(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_ref")

    @content_ref.setter
    def content_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_ref", value)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mount_path")

    @mount_path.setter
    def mount_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_path", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        ResourceType --
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class KameletBindingSpecIntegrationSourcesArgs:
    def __init__(__self__, *,
                 compression: Optional[pulumi.Input[bool]] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 content_key: Optional[pulumi.Input[str]] = None,
                 content_ref: Optional[pulumi.Input[str]] = None,
                 interceptors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 language: Optional[pulumi.Input[str]] = None,
                 loader: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 property_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        SourceSpec --
        :param pulumi.Input[Sequence[pulumi.Input[str]]] interceptors: Interceptors are optional identifiers the org.apache.camel.k.RoutesLoader uses to pre/post process sources
        :param pulumi.Input[str] language: Language --
        :param pulumi.Input[str] loader: Loader is an optional id of the org.apache.camel.k.RoutesLoader that will interpret this source at runtime
        :param pulumi.Input[Sequence[pulumi.Input[str]]] property_names: List of property names defined in the source (e.g. if type is "template")
        :param pulumi.Input[str] type: Type defines the kind of source described by this object
        """
        if compression is not None:
            pulumi.set(__self__, "compression", compression)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if content_key is not None:
            pulumi.set(__self__, "content_key", content_key)
        if content_ref is not None:
            pulumi.set(__self__, "content_ref", content_ref)
        if interceptors is not None:
            pulumi.set(__self__, "interceptors", interceptors)
        if language is not None:
            pulumi.set(__self__, "language", language)
        if loader is not None:
            pulumi.set(__self__, "loader", loader)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if property_names is not None:
            pulumi.set(__self__, "property_names", property_names)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def compression(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "compression")

    @compression.setter
    def compression(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "compression", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="contentKey")
    def content_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_key")

    @content_key.setter
    def content_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_key", value)

    @property
    @pulumi.getter(name="contentRef")
    def content_ref(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_ref")

    @content_ref.setter
    def content_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_ref", value)

    @property
    @pulumi.getter
    def interceptors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Interceptors are optional identifiers the org.apache.camel.k.RoutesLoader uses to pre/post process sources
        """
        return pulumi.get(self, "interceptors")

    @interceptors.setter
    def interceptors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "interceptors", value)

    @property
    @pulumi.getter
    def language(self) -> Optional[pulumi.Input[str]]:
        """
        Language --
        """
        return pulumi.get(self, "language")

    @language.setter
    def language(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "language", value)

    @property
    @pulumi.getter
    def loader(self) -> Optional[pulumi.Input[str]]:
        """
        Loader is an optional id of the org.apache.camel.k.RoutesLoader that will interpret this source at runtime
        """
        return pulumi.get(self, "loader")

    @loader.setter
    def loader(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "loader", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="property-names")
    def property_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of property names defined in the source (e.g. if type is "template")
        """
        return pulumi.get(self, "property_names")

    @property_names.setter
    def property_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "property_names", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type defines the kind of source described by this object
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class KameletBindingSpecIntegrationTraitsArgs:
    def __init__(__self__, *,
                 configuration: pulumi.Input[Mapping[str, Any]]):
        """
        A TraitSpec contains the configuration of a trait
        """
        pulumi.set(__self__, "configuration", configuration)

    @property
    @pulumi.getter
    def configuration(self) -> pulumi.Input[Mapping[str, Any]]:
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(self, "configuration", value)


@pulumi.input_type
class KameletBindingSpecSinkArgs:
    def __init__(__self__, *,
                 properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 ref: Optional[pulumi.Input['KameletBindingSpecSinkRefArgs']] = None,
                 uri: Optional[pulumi.Input[str]] = None):
        """
        Sink is the destination of the integration defined by this binding
        :param pulumi.Input[Mapping[str, Any]] properties: Properties are a key value representation of endpoint properties
        :param pulumi.Input['KameletBindingSpecSinkRefArgs'] ref: Ref can be used to declare a Kubernetes resource as source/sink endpoint
        :param pulumi.Input[str] uri: URI can alternatively be used to specify the (Camel) endpoint explicitly
        """
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Properties are a key value representation of endpoint properties
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[pulumi.Input['KameletBindingSpecSinkRefArgs']]:
        """
        Ref can be used to declare a Kubernetes resource as source/sink endpoint
        """
        return pulumi.get(self, "ref")

    @ref.setter
    def ref(self, value: Optional[pulumi.Input['KameletBindingSpecSinkRefArgs']]):
        pulumi.set(self, "ref", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI can alternatively be used to specify the (Camel) endpoint explicitly
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class KameletBindingSpecSinkRefArgs:
    def __init__(__self__, *,
                 api_version: Optional[pulumi.Input[str]] = None,
                 field_path: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 resource_version: Optional[pulumi.Input[str]] = None,
                 uid: Optional[pulumi.Input[str]] = None):
        """
        Ref can be used to declare a Kubernetes resource as source/sink endpoint
        :param pulumi.Input[str] api_version: API version of the referent.
        :param pulumi.Input[str] field_path: If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
        :param pulumi.Input[str] kind: Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[str] namespace: Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param pulumi.Input[str] resource_version: Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        :param pulumi.Input[str] uid: UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if field_path is not None:
            pulumi.set(__self__, "field_path", field_path)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        API version of the referent.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> Optional[pulumi.Input[str]]:
        """
        If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
        """
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_path", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[pulumi.Input[str]]:
        """
        Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        """
        return pulumi.get(self, "resource_version")

    @resource_version.setter
    def resource_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_version", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[str]]:
        """
        UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uid", value)


@pulumi.input_type
class KameletBindingSpecSourceArgs:
    def __init__(__self__, *,
                 properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 ref: Optional[pulumi.Input['KameletBindingSpecSourceRefArgs']] = None,
                 uri: Optional[pulumi.Input[str]] = None):
        """
        Source is the starting point of the integration defined by this binding
        :param pulumi.Input[Mapping[str, Any]] properties: Properties are a key value representation of endpoint properties
        :param pulumi.Input['KameletBindingSpecSourceRefArgs'] ref: Ref can be used to declare a Kubernetes resource as source/sink endpoint
        :param pulumi.Input[str] uri: URI can alternatively be used to specify the (Camel) endpoint explicitly
        """
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Properties are a key value representation of endpoint properties
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[pulumi.Input['KameletBindingSpecSourceRefArgs']]:
        """
        Ref can be used to declare a Kubernetes resource as source/sink endpoint
        """
        return pulumi.get(self, "ref")

    @ref.setter
    def ref(self, value: Optional[pulumi.Input['KameletBindingSpecSourceRefArgs']]):
        pulumi.set(self, "ref", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI can alternatively be used to specify the (Camel) endpoint explicitly
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class KameletBindingSpecSourceRefArgs:
    def __init__(__self__, *,
                 api_version: Optional[pulumi.Input[str]] = None,
                 field_path: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 resource_version: Optional[pulumi.Input[str]] = None,
                 uid: Optional[pulumi.Input[str]] = None):
        """
        Ref can be used to declare a Kubernetes resource as source/sink endpoint
        :param pulumi.Input[str] api_version: API version of the referent.
        :param pulumi.Input[str] field_path: If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
        :param pulumi.Input[str] kind: Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[str] namespace: Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param pulumi.Input[str] resource_version: Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        :param pulumi.Input[str] uid: UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if field_path is not None:
            pulumi.set(__self__, "field_path", field_path)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        API version of the referent.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> Optional[pulumi.Input[str]]:
        """
        If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
        """
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_path", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[pulumi.Input[str]]:
        """
        Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        """
        return pulumi.get(self, "resource_version")

    @resource_version.setter
    def resource_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_version", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[str]]:
        """
        UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uid", value)


@pulumi.input_type
class KameletBindingStatusArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['KameletBindingStatusConditionsArgs']]]] = None,
                 phase: Optional[pulumi.Input[str]] = None):
        """
        KameletBindingStatus --
        :param pulumi.Input[Sequence[pulumi.Input['KameletBindingStatusConditionsArgs']]] conditions: Conditions --
        :param pulumi.Input[str] phase: Phase --
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KameletBindingStatusConditionsArgs']]]]:
        """
        Conditions --
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KameletBindingStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def phase(self) -> Optional[pulumi.Input[str]]:
        """
        Phase --
        """
        return pulumi.get(self, "phase")

    @phase.setter
    def phase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "phase", value)


@pulumi.input_type
class KameletBindingStatusConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 last_update_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        KameletBindingCondition describes the state of a resource at a certain point.
        :param pulumi.Input[str] status: Status of the condition, one of True, False, Unknown.
        :param pulumi.Input[str] type: Type of kameletBinding condition.
        :param pulumi.Input[str] last_transition_time: Last time the condition transitioned from one status to another.
        :param pulumi.Input[str] last_update_time: The last time this condition was updated.
        :param pulumi.Input[str] message: A human readable message indicating details about the transition.
        :param pulumi.Input[str] reason: The reason for the condition's last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if last_update_time is not None:
            pulumi.set(__self__, "last_update_time", last_update_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status of the condition, one of True, False, Unknown.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of kameletBinding condition.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        """
        Last time the condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> Optional[pulumi.Input[str]]:
        """
        The last time this condition was updated.
        """
        return pulumi.get(self, "last_update_time")

    @last_update_time.setter
    def last_update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_update_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        A human readable message indicating details about the transition.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        The reason for the condition's last transition.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


@pulumi.input_type
class KameletSpecArgs:
    def __init__(__self__, *,
                 authorization: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 definition: Optional[pulumi.Input['KameletSpecDefinitionArgs']] = None,
                 dependencies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 flow: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input['KameletSpecSourcesArgs']]]] = None,
                 types: Optional[pulumi.Input[Mapping[str, pulumi.Input['KameletSpecTypesArgs']]]] = None):
        """
        KameletSpec defines the desired state of Kamelet
        :param pulumi.Input[Mapping[str, Any]] authorization: AuthorizationSpec is TODO (oauth information)
        :param pulumi.Input['KameletSpecDefinitionArgs'] definition: JSONSchemaProps is a JSON-Schema definition.
        """
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if definition is not None:
            pulumi.set(__self__, "definition", definition)
        if dependencies is not None:
            pulumi.set(__self__, "dependencies", dependencies)
        if flow is not None:
            pulumi.set(__self__, "flow", flow)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if types is not None:
            pulumi.set(__self__, "types", types)

    @property
    @pulumi.getter
    def authorization(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        AuthorizationSpec is TODO (oauth information)
        """
        return pulumi.get(self, "authorization")

    @authorization.setter
    def authorization(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "authorization", value)

    @property
    @pulumi.getter
    def definition(self) -> Optional[pulumi.Input['KameletSpecDefinitionArgs']]:
        """
        JSONSchemaProps is a JSON-Schema definition.
        """
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: Optional[pulumi.Input['KameletSpecDefinitionArgs']]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter
    def dependencies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "dependencies")

    @dependencies.setter
    def dependencies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dependencies", value)

    @property
    @pulumi.getter
    def flow(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "flow")

    @flow.setter
    def flow(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "flow", value)

    @property
    @pulumi.getter
    def sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KameletSpecSourcesArgs']]]]:
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KameletSpecSourcesArgs']]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter
    def types(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['KameletSpecTypesArgs']]]]:
        return pulumi.get(self, "types")

    @types.setter
    def types(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['KameletSpecTypesArgs']]]]):
        pulumi.set(self, "types", value)


@pulumi.input_type
class KameletSpecDefinitionArgs:
    def __init__(__self__, *,
                 _ref: Optional[pulumi.Input[str]] = None,
                 _schema: Optional[pulumi.Input[str]] = None,
                 additional_items: Optional[pulumi.Input[bool]] = None,
                 additional_properties: Optional[pulumi.Input[bool]] = None,
                 all_of: Optional[pulumi.Input[Sequence[Any]]] = None,
                 any_of: Optional[pulumi.Input[Sequence[Any]]] = None,
                 default: Optional[Any] = None,
                 definitions: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 dependencies: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enum: Optional[pulumi.Input[Sequence[Any]]] = None,
                 example: Optional[Any] = None,
                 exclusive_maximum: Optional[pulumi.Input[bool]] = None,
                 exclusive_minimum: Optional[pulumi.Input[bool]] = None,
                 external_docs: Optional[pulumi.Input['KameletSpecDefinitionExternalDocsArgs']] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 items: Optional[Any] = None,
                 max_items: Optional[pulumi.Input[int]] = None,
                 max_length: Optional[pulumi.Input[int]] = None,
                 max_properties: Optional[pulumi.Input[int]] = None,
                 maximum: Optional[pulumi.Input[str]] = None,
                 min_items: Optional[pulumi.Input[int]] = None,
                 min_length: Optional[pulumi.Input[int]] = None,
                 min_properties: Optional[pulumi.Input[int]] = None,
                 minimum: Optional[pulumi.Input[str]] = None,
                 multiple_of: Optional[pulumi.Input[str]] = None,
                 not_: Optional[Any] = None,
                 nullable: Optional[pulumi.Input[bool]] = None,
                 one_of: Optional[pulumi.Input[Sequence[Any]]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 pattern_properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 required: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unique_items: Optional[pulumi.Input[bool]] = None,
                 x_descriptors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 x_kubernetes_embedded_resource: Optional[pulumi.Input[bool]] = None,
                 x_kubernetes_int_or_string: Optional[pulumi.Input[bool]] = None,
                 x_kubernetes_list_map_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 x_kubernetes_list_type: Optional[pulumi.Input[str]] = None,
                 x_kubernetes_map_type: Optional[pulumi.Input[str]] = None,
                 x_kubernetes_preserve_unknown_fields: Optional[pulumi.Input[bool]] = None):
        """
        JSONSchemaProps is a JSON-Schema definition.
        :param pulumi.Input[str] _schema: JSONSchemaURL represents a schema url.
        :param Any default: default is a default value for undefined object fields. Defaulting is a beta feature under the CustomResourceDefaulting feature gate. Defaulting requires spec.preserveUnknownFields to be false.
        :param pulumi.Input[Mapping[str, Any]] definitions: JSONSchemaDefinitions contains the models explicitly defined in this spec.
        :param pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]] dependencies: JSONSchemaDependencies represent a dependencies property.
        :param pulumi.Input['KameletSpecDefinitionExternalDocsArgs'] external_docs: ExternalDocumentation allows referencing an external resource for extended documentation.
        :param pulumi.Input[str] format: format is an OpenAPI v3 format string. Unknown formats are ignored. The following formats are validated: 
                - bsonobjectid: a bson object ID, i.e. a 24 characters hex string - uri: an URI as parsed by Golang net/url.ParseRequestURI - email: an email address as parsed by Golang net/mail.ParseAddress - hostname: a valid representation for an Internet host name, as defined by RFC 1034, section 3.1 [RFC1034]. - ipv4: an IPv4 IP as parsed by Golang net.ParseIP - ipv6: an IPv6 IP as parsed by Golang net.ParseIP - cidr: a CIDR as parsed by Golang net.ParseCIDR - mac: a MAC address as parsed by Golang net.ParseMAC - uuid: an UUID that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid3: an UUID3 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?3[0-9a-f]{3}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid4: an UUID4 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?4[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - uuid5: an UUID5 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?5[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - isbn: an ISBN10 or ISBN13 number string like "0321751043" or "978-0321751041" - isbn10: an ISBN10 number string like "0321751043" - isbn13: an ISBN13 number string like "978-0321751041" - creditcard: a credit card number defined by the regex ^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$ with any non digit characters mixed in - ssn: a U.S. social security number following the regex ^\\d{3}[- ]?\\d{2}[- ]?\\d{4}$ - hexcolor: an hexadecimal color code like "#FFFFFF: following the regex ^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$ - rgbcolor: an RGB color code like rgb like "rgb(255,255,2559" - byte: base64 encoded binary data - password: any kind of string - date: a date string like "2006-01-02" as defined by full-date in RFC3339 - duration: a duration string like "22 ns" as parsed by Golang time.ParseDuration or compatible with Scala duration format - datetime: a date time string like "2014-12-15T19:30:20.000Z" as defined by date-time in RFC3339.
        :param pulumi.Input[str] maximum: A Number represents a JSON number literal.
        :param pulumi.Input[str] minimum: A Number represents a JSON number literal.
        :param pulumi.Input[str] multiple_of: A Number represents a JSON number literal.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] x_descriptors: x-descriptors annotates an object to define additional display options.
        :param pulumi.Input[bool] x_kubernetes_embedded_resource: x-kubernetes-embedded-resource defines that the value is an embedded Kubernetes runtime.Object, with TypeMeta and ObjectMeta. The type must be object. It is allowed to further restrict the embedded object. kind, apiVersion and metadata are validated automatically. x-kubernetes-preserve-unknown-fields is allowed to be true, but does not have to be if the object is fully specified (up to kind, apiVersion, metadata).
        :param pulumi.Input[bool] x_kubernetes_int_or_string: x-kubernetes-int-or-string specifies that this value is either an integer or a string. If this is true, an empty type is allowed and type as child of anyOf is permitted if following one of the following patterns: 
                1) anyOf:    - type: integer    - type: string 2) allOf:    - anyOf:      - type: integer      - type: string    - ... zero or more
        :param pulumi.Input[Sequence[pulumi.Input[str]]] x_kubernetes_list_map_keys: x-kubernetes-list-map-keys annotates an array with the x-kubernetes-list-type `map` by specifying the keys used as the index of the map. 
                This tag MUST only be used on lists that have the "x-kubernetes-list-type" extension set to "map". Also, the values specified for this attribute must be a scalar typed field of the child structure (no nesting is supported). 
                The properties specified must either be required or have a default value, to ensure those properties are present for all list items.
        :param pulumi.Input[str] x_kubernetes_list_type: x-kubernetes-list-type annotates an array to further describe its topology. This extension must only be used on lists and may have 3 possible values: 
                1) `atomic`: the list is treated as a single entity, like a scalar.      Atomic lists will be entirely replaced when updated. This extension      may be used on any type of list (struct, scalar, ...). 2) `set`:      Sets are lists that must not have multiple items with the same value. Each      value must be a scalar, an object with x-kubernetes-map-type `atomic` or an      array with x-kubernetes-list-type `atomic`. 3) `map`:      These lists are like maps in that their elements have a non-index key      used to identify them. Order is preserved upon merge. The map tag      must only be used on a list with elements of type object. Defaults to atomic for arrays.
        :param pulumi.Input[str] x_kubernetes_map_type: x-kubernetes-map-type annotates an object to further describe its topology. This extension must only be used when type is object and may have 2 possible values: 
                1) `granular`:      These maps are actual maps (key-value pairs) and each fields are independent      from each other (they can each be manipulated by separate actors). This is      the default behaviour for all maps. 2) `atomic`: the list is treated as a single entity, like a scalar.      Atomic maps will be entirely replaced when updated.
        :param pulumi.Input[bool] x_kubernetes_preserve_unknown_fields: x-kubernetes-preserve-unknown-fields stops the API server decoding step from pruning fields which are not specified in the validation schema. This affects fields recursively, but switches back to normal pruning behaviour if nested properties or additionalProperties are specified in the schema. This can either be true or undefined. False is forbidden.
        """
        if _ref is not None:
            pulumi.set(__self__, "_ref", _ref)
        if _schema is not None:
            pulumi.set(__self__, "_schema", _schema)
        if additional_items is not None:
            pulumi.set(__self__, "additional_items", additional_items)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if all_of is not None:
            pulumi.set(__self__, "all_of", all_of)
        if any_of is not None:
            pulumi.set(__self__, "any_of", any_of)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if definitions is not None:
            pulumi.set(__self__, "definitions", definitions)
        if dependencies is not None:
            pulumi.set(__self__, "dependencies", dependencies)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enum is not None:
            pulumi.set(__self__, "enum", enum)
        if example is not None:
            pulumi.set(__self__, "example", example)
        if exclusive_maximum is not None:
            pulumi.set(__self__, "exclusive_maximum", exclusive_maximum)
        if exclusive_minimum is not None:
            pulumi.set(__self__, "exclusive_minimum", exclusive_minimum)
        if external_docs is not None:
            pulumi.set(__self__, "external_docs", external_docs)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if max_items is not None:
            pulumi.set(__self__, "max_items", max_items)
        if max_length is not None:
            pulumi.set(__self__, "max_length", max_length)
        if max_properties is not None:
            pulumi.set(__self__, "max_properties", max_properties)
        if maximum is not None:
            pulumi.set(__self__, "maximum", maximum)
        if min_items is not None:
            pulumi.set(__self__, "min_items", min_items)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if min_properties is not None:
            pulumi.set(__self__, "min_properties", min_properties)
        if minimum is not None:
            pulumi.set(__self__, "minimum", minimum)
        if multiple_of is not None:
            pulumi.set(__self__, "multiple_of", multiple_of)
        if not_ is not None:
            pulumi.set(__self__, "not_", not_)
        if nullable is not None:
            pulumi.set(__self__, "nullable", nullable)
        if one_of is not None:
            pulumi.set(__self__, "one_of", one_of)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if pattern_properties is not None:
            pulumi.set(__self__, "pattern_properties", pattern_properties)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unique_items is not None:
            pulumi.set(__self__, "unique_items", unique_items)
        if x_descriptors is not None:
            pulumi.set(__self__, "x_descriptors", x_descriptors)
        if x_kubernetes_embedded_resource is not None:
            pulumi.set(__self__, "x_kubernetes_embedded_resource", x_kubernetes_embedded_resource)
        if x_kubernetes_int_or_string is not None:
            pulumi.set(__self__, "x_kubernetes_int_or_string", x_kubernetes_int_or_string)
        if x_kubernetes_list_map_keys is not None:
            pulumi.set(__self__, "x_kubernetes_list_map_keys", x_kubernetes_list_map_keys)
        if x_kubernetes_list_type is not None:
            pulumi.set(__self__, "x_kubernetes_list_type", x_kubernetes_list_type)
        if x_kubernetes_map_type is not None:
            pulumi.set(__self__, "x_kubernetes_map_type", x_kubernetes_map_type)
        if x_kubernetes_preserve_unknown_fields is not None:
            pulumi.set(__self__, "x_kubernetes_preserve_unknown_fields", x_kubernetes_preserve_unknown_fields)

    @property
    @pulumi.getter(name="$ref")
    def _ref(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "_ref")

    @_ref.setter
    def _ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "_ref", value)

    @property
    @pulumi.getter(name="$schema")
    def _schema(self) -> Optional[pulumi.Input[str]]:
        """
        JSONSchemaURL represents a schema url.
        """
        return pulumi.get(self, "_schema")

    @_schema.setter
    def _schema(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "_schema", value)

    @property
    @pulumi.getter(name="additionalItems")
    def additional_items(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "additional_items")

    @additional_items.setter
    def additional_items(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "additional_items", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "additional_properties", value)

    @property
    @pulumi.getter(name="allOf")
    def all_of(self) -> Optional[pulumi.Input[Sequence[Any]]]:
        return pulumi.get(self, "all_of")

    @all_of.setter
    def all_of(self, value: Optional[pulumi.Input[Sequence[Any]]]):
        pulumi.set(self, "all_of", value)

    @property
    @pulumi.getter(name="anyOf")
    def any_of(self) -> Optional[pulumi.Input[Sequence[Any]]]:
        return pulumi.get(self, "any_of")

    @any_of.setter
    def any_of(self, value: Optional[pulumi.Input[Sequence[Any]]]):
        pulumi.set(self, "any_of", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[Any]:
        """
        default is a default value for undefined object fields. Defaulting is a beta feature under the CustomResourceDefaulting feature gate. Defaulting requires spec.preserveUnknownFields to be false.
        """
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[Any]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def definitions(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        JSONSchemaDefinitions contains the models explicitly defined in this spec.
        """
        return pulumi.get(self, "definitions")

    @definitions.setter
    def definitions(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "definitions", value)

    @property
    @pulumi.getter
    def dependencies(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]:
        """
        JSONSchemaDependencies represent a dependencies property.
        """
        return pulumi.get(self, "dependencies")

    @dependencies.setter
    def dependencies(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]):
        pulumi.set(self, "dependencies", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enum(self) -> Optional[pulumi.Input[Sequence[Any]]]:
        return pulumi.get(self, "enum")

    @enum.setter
    def enum(self, value: Optional[pulumi.Input[Sequence[Any]]]):
        pulumi.set(self, "enum", value)

    @property
    @pulumi.getter
    def example(self) -> Optional[Any]:
        return pulumi.get(self, "example")

    @example.setter
    def example(self, value: Optional[Any]):
        pulumi.set(self, "example", value)

    @property
    @pulumi.getter(name="exclusiveMaximum")
    def exclusive_maximum(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "exclusive_maximum")

    @exclusive_maximum.setter
    def exclusive_maximum(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "exclusive_maximum", value)

    @property
    @pulumi.getter(name="exclusiveMinimum")
    def exclusive_minimum(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "exclusive_minimum")

    @exclusive_minimum.setter
    def exclusive_minimum(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "exclusive_minimum", value)

    @property
    @pulumi.getter(name="externalDocs")
    def external_docs(self) -> Optional[pulumi.Input['KameletSpecDefinitionExternalDocsArgs']]:
        """
        ExternalDocumentation allows referencing an external resource for extended documentation.
        """
        return pulumi.get(self, "external_docs")

    @external_docs.setter
    def external_docs(self, value: Optional[pulumi.Input['KameletSpecDefinitionExternalDocsArgs']]):
        pulumi.set(self, "external_docs", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        format is an OpenAPI v3 format string. Unknown formats are ignored. The following formats are validated: 
         - bsonobjectid: a bson object ID, i.e. a 24 characters hex string - uri: an URI as parsed by Golang net/url.ParseRequestURI - email: an email address as parsed by Golang net/mail.ParseAddress - hostname: a valid representation for an Internet host name, as defined by RFC 1034, section 3.1 [RFC1034]. - ipv4: an IPv4 IP as parsed by Golang net.ParseIP - ipv6: an IPv6 IP as parsed by Golang net.ParseIP - cidr: a CIDR as parsed by Golang net.ParseCIDR - mac: a MAC address as parsed by Golang net.ParseMAC - uuid: an UUID that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid3: an UUID3 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?3[0-9a-f]{3}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid4: an UUID4 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?4[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - uuid5: an UUID5 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?5[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - isbn: an ISBN10 or ISBN13 number string like "0321751043" or "978-0321751041" - isbn10: an ISBN10 number string like "0321751043" - isbn13: an ISBN13 number string like "978-0321751041" - creditcard: a credit card number defined by the regex ^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$ with any non digit characters mixed in - ssn: a U.S. social security number following the regex ^\\d{3}[- ]?\\d{2}[- ]?\\d{4}$ - hexcolor: an hexadecimal color code like "#FFFFFF: following the regex ^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$ - rgbcolor: an RGB color code like rgb like "rgb(255,255,2559" - byte: base64 encoded binary data - password: any kind of string - date: a date string like "2006-01-02" as defined by full-date in RFC3339 - duration: a duration string like "22 ns" as parsed by Golang time.ParseDuration or compatible with Scala duration format - datetime: a date time string like "2014-12-15T19:30:20.000Z" as defined by date-time in RFC3339.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[Any]:
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[Any]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter(name="maxItems")
    def max_items(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_items")

    @max_items.setter
    def max_items(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_items", value)

    @property
    @pulumi.getter(name="maxLength")
    def max_length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_length")

    @max_length.setter
    def max_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_length", value)

    @property
    @pulumi.getter(name="maxProperties")
    def max_properties(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_properties")

    @max_properties.setter
    def max_properties(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_properties", value)

    @property
    @pulumi.getter
    def maximum(self) -> Optional[pulumi.Input[str]]:
        """
        A Number represents a JSON number literal.
        """
        return pulumi.get(self, "maximum")

    @maximum.setter
    def maximum(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maximum", value)

    @property
    @pulumi.getter(name="minItems")
    def min_items(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_items")

    @min_items.setter
    def min_items(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_items", value)

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_length")

    @min_length.setter
    def min_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_length", value)

    @property
    @pulumi.getter(name="minProperties")
    def min_properties(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_properties")

    @min_properties.setter
    def min_properties(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_properties", value)

    @property
    @pulumi.getter
    def minimum(self) -> Optional[pulumi.Input[str]]:
        """
        A Number represents a JSON number literal.
        """
        return pulumi.get(self, "minimum")

    @minimum.setter
    def minimum(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "minimum", value)

    @property
    @pulumi.getter(name="multipleOf")
    def multiple_of(self) -> Optional[pulumi.Input[str]]:
        """
        A Number represents a JSON number literal.
        """
        return pulumi.get(self, "multiple_of")

    @multiple_of.setter
    def multiple_of(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multiple_of", value)

    @property
    @pulumi.getter(name="not")
    def not_(self) -> Optional[Any]:
        return pulumi.get(self, "not_")

    @not_.setter
    def not_(self, value: Optional[Any]):
        pulumi.set(self, "not_", value)

    @property
    @pulumi.getter
    def nullable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "nullable")

    @nullable.setter
    def nullable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "nullable", value)

    @property
    @pulumi.getter(name="oneOf")
    def one_of(self) -> Optional[pulumi.Input[Sequence[Any]]]:
        return pulumi.get(self, "one_of")

    @one_of.setter
    def one_of(self, value: Optional[pulumi.Input[Sequence[Any]]]):
        pulumi.set(self, "one_of", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter(name="patternProperties")
    def pattern_properties(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "pattern_properties")

    @pattern_properties.setter
    def pattern_properties(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "pattern_properties", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="uniqueItems")
    def unique_items(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "unique_items")

    @unique_items.setter
    def unique_items(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "unique_items", value)

    @property
    @pulumi.getter(name="x-descriptors")
    def x_descriptors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        x-descriptors annotates an object to define additional display options.
        """
        return pulumi.get(self, "x_descriptors")

    @x_descriptors.setter
    def x_descriptors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "x_descriptors", value)

    @property
    @pulumi.getter(name="x-kubernetes-embedded-resource")
    def x_kubernetes_embedded_resource(self) -> Optional[pulumi.Input[bool]]:
        """
        x-kubernetes-embedded-resource defines that the value is an embedded Kubernetes runtime.Object, with TypeMeta and ObjectMeta. The type must be object. It is allowed to further restrict the embedded object. kind, apiVersion and metadata are validated automatically. x-kubernetes-preserve-unknown-fields is allowed to be true, but does not have to be if the object is fully specified (up to kind, apiVersion, metadata).
        """
        return pulumi.get(self, "x_kubernetes_embedded_resource")

    @x_kubernetes_embedded_resource.setter
    def x_kubernetes_embedded_resource(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "x_kubernetes_embedded_resource", value)

    @property
    @pulumi.getter(name="x-kubernetes-int-or-string")
    def x_kubernetes_int_or_string(self) -> Optional[pulumi.Input[bool]]:
        """
        x-kubernetes-int-or-string specifies that this value is either an integer or a string. If this is true, an empty type is allowed and type as child of anyOf is permitted if following one of the following patterns: 
         1) anyOf:    - type: integer    - type: string 2) allOf:    - anyOf:      - type: integer      - type: string    - ... zero or more
        """
        return pulumi.get(self, "x_kubernetes_int_or_string")

    @x_kubernetes_int_or_string.setter
    def x_kubernetes_int_or_string(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "x_kubernetes_int_or_string", value)

    @property
    @pulumi.getter(name="x-kubernetes-list-map-keys")
    def x_kubernetes_list_map_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        x-kubernetes-list-map-keys annotates an array with the x-kubernetes-list-type `map` by specifying the keys used as the index of the map. 
         This tag MUST only be used on lists that have the "x-kubernetes-list-type" extension set to "map". Also, the values specified for this attribute must be a scalar typed field of the child structure (no nesting is supported). 
         The properties specified must either be required or have a default value, to ensure those properties are present for all list items.
        """
        return pulumi.get(self, "x_kubernetes_list_map_keys")

    @x_kubernetes_list_map_keys.setter
    def x_kubernetes_list_map_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "x_kubernetes_list_map_keys", value)

    @property
    @pulumi.getter(name="x-kubernetes-list-type")
    def x_kubernetes_list_type(self) -> Optional[pulumi.Input[str]]:
        """
        x-kubernetes-list-type annotates an array to further describe its topology. This extension must only be used on lists and may have 3 possible values: 
         1) `atomic`: the list is treated as a single entity, like a scalar.      Atomic lists will be entirely replaced when updated. This extension      may be used on any type of list (struct, scalar, ...). 2) `set`:      Sets are lists that must not have multiple items with the same value. Each      value must be a scalar, an object with x-kubernetes-map-type `atomic` or an      array with x-kubernetes-list-type `atomic`. 3) `map`:      These lists are like maps in that their elements have a non-index key      used to identify them. Order is preserved upon merge. The map tag      must only be used on a list with elements of type object. Defaults to atomic for arrays.
        """
        return pulumi.get(self, "x_kubernetes_list_type")

    @x_kubernetes_list_type.setter
    def x_kubernetes_list_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x_kubernetes_list_type", value)

    @property
    @pulumi.getter(name="x-kubernetes-map-type")
    def x_kubernetes_map_type(self) -> Optional[pulumi.Input[str]]:
        """
        x-kubernetes-map-type annotates an object to further describe its topology. This extension must only be used when type is object and may have 2 possible values: 
         1) `granular`:      These maps are actual maps (key-value pairs) and each fields are independent      from each other (they can each be manipulated by separate actors). This is      the default behaviour for all maps. 2) `atomic`: the list is treated as a single entity, like a scalar.      Atomic maps will be entirely replaced when updated.
        """
        return pulumi.get(self, "x_kubernetes_map_type")

    @x_kubernetes_map_type.setter
    def x_kubernetes_map_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x_kubernetes_map_type", value)

    @property
    @pulumi.getter(name="x-kubernetes-preserve-unknown-fields")
    def x_kubernetes_preserve_unknown_fields(self) -> Optional[pulumi.Input[bool]]:
        """
        x-kubernetes-preserve-unknown-fields stops the API server decoding step from pruning fields which are not specified in the validation schema. This affects fields recursively, but switches back to normal pruning behaviour if nested properties or additionalProperties are specified in the schema. This can either be true or undefined. False is forbidden.
        """
        return pulumi.get(self, "x_kubernetes_preserve_unknown_fields")

    @x_kubernetes_preserve_unknown_fields.setter
    def x_kubernetes_preserve_unknown_fields(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "x_kubernetes_preserve_unknown_fields", value)


@pulumi.input_type
class KameletSpecDefinitionExternalDocsArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        ExternalDocumentation allows referencing an external resource for extended documentation.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class KameletSpecSourcesArgs:
    def __init__(__self__, *,
                 compression: Optional[pulumi.Input[bool]] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 content_key: Optional[pulumi.Input[str]] = None,
                 content_ref: Optional[pulumi.Input[str]] = None,
                 interceptors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 language: Optional[pulumi.Input[str]] = None,
                 loader: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 property_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        SourceSpec --
        :param pulumi.Input[Sequence[pulumi.Input[str]]] interceptors: Interceptors are optional identifiers the org.apache.camel.k.RoutesLoader uses to pre/post process sources
        :param pulumi.Input[str] language: Language --
        :param pulumi.Input[str] loader: Loader is an optional id of the org.apache.camel.k.RoutesLoader that will interpret this source at runtime
        :param pulumi.Input[Sequence[pulumi.Input[str]]] property_names: List of property names defined in the source (e.g. if type is "template")
        :param pulumi.Input[str] type: Type defines the kind of source described by this object
        """
        if compression is not None:
            pulumi.set(__self__, "compression", compression)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if content_key is not None:
            pulumi.set(__self__, "content_key", content_key)
        if content_ref is not None:
            pulumi.set(__self__, "content_ref", content_ref)
        if interceptors is not None:
            pulumi.set(__self__, "interceptors", interceptors)
        if language is not None:
            pulumi.set(__self__, "language", language)
        if loader is not None:
            pulumi.set(__self__, "loader", loader)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if property_names is not None:
            pulumi.set(__self__, "property_names", property_names)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def compression(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "compression")

    @compression.setter
    def compression(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "compression", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="contentKey")
    def content_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_key")

    @content_key.setter
    def content_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_key", value)

    @property
    @pulumi.getter(name="contentRef")
    def content_ref(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_ref")

    @content_ref.setter
    def content_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_ref", value)

    @property
    @pulumi.getter
    def interceptors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Interceptors are optional identifiers the org.apache.camel.k.RoutesLoader uses to pre/post process sources
        """
        return pulumi.get(self, "interceptors")

    @interceptors.setter
    def interceptors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "interceptors", value)

    @property
    @pulumi.getter
    def language(self) -> Optional[pulumi.Input[str]]:
        """
        Language --
        """
        return pulumi.get(self, "language")

    @language.setter
    def language(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "language", value)

    @property
    @pulumi.getter
    def loader(self) -> Optional[pulumi.Input[str]]:
        """
        Loader is an optional id of the org.apache.camel.k.RoutesLoader that will interpret this source at runtime
        """
        return pulumi.get(self, "loader")

    @loader.setter
    def loader(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "loader", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="property-names")
    def property_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of property names defined in the source (e.g. if type is "template")
        """
        return pulumi.get(self, "property_names")

    @property_names.setter
    def property_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "property_names", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type defines the kind of source described by this object
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class KameletSpecTypesArgs:
    def __init__(__self__, *,
                 media_type: Optional[pulumi.Input[str]] = None,
                 schema: Optional[pulumi.Input['KameletSpecTypesSchemaArgs']] = None):
        """
        :param pulumi.Input['KameletSpecTypesSchemaArgs'] schema: JSONSchemaProps is a JSON-Schema definition.
        """
        if media_type is not None:
            pulumi.set(__self__, "media_type", media_type)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter(name="mediaType")
    def media_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "media_type")

    @media_type.setter
    def media_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "media_type", value)

    @property
    @pulumi.getter
    def schema(self) -> Optional[pulumi.Input['KameletSpecTypesSchemaArgs']]:
        """
        JSONSchemaProps is a JSON-Schema definition.
        """
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: Optional[pulumi.Input['KameletSpecTypesSchemaArgs']]):
        pulumi.set(self, "schema", value)


@pulumi.input_type
class KameletSpecTypesSchemaArgs:
    def __init__(__self__, *,
                 _ref: Optional[pulumi.Input[str]] = None,
                 _schema: Optional[pulumi.Input[str]] = None,
                 additional_items: Optional[pulumi.Input[bool]] = None,
                 additional_properties: Optional[pulumi.Input[bool]] = None,
                 all_of: Optional[pulumi.Input[Sequence[Any]]] = None,
                 any_of: Optional[pulumi.Input[Sequence[Any]]] = None,
                 default: Optional[Any] = None,
                 definitions: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 dependencies: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enum: Optional[pulumi.Input[Sequence[Any]]] = None,
                 example: Optional[Any] = None,
                 exclusive_maximum: Optional[pulumi.Input[bool]] = None,
                 exclusive_minimum: Optional[pulumi.Input[bool]] = None,
                 external_docs: Optional[pulumi.Input['KameletSpecTypesSchemaExternalDocsArgs']] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 items: Optional[Any] = None,
                 max_items: Optional[pulumi.Input[int]] = None,
                 max_length: Optional[pulumi.Input[int]] = None,
                 max_properties: Optional[pulumi.Input[int]] = None,
                 maximum: Optional[pulumi.Input[str]] = None,
                 min_items: Optional[pulumi.Input[int]] = None,
                 min_length: Optional[pulumi.Input[int]] = None,
                 min_properties: Optional[pulumi.Input[int]] = None,
                 minimum: Optional[pulumi.Input[str]] = None,
                 multiple_of: Optional[pulumi.Input[str]] = None,
                 not_: Optional[Any] = None,
                 nullable: Optional[pulumi.Input[bool]] = None,
                 one_of: Optional[pulumi.Input[Sequence[Any]]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 pattern_properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 required: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unique_items: Optional[pulumi.Input[bool]] = None,
                 x_descriptors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 x_kubernetes_embedded_resource: Optional[pulumi.Input[bool]] = None,
                 x_kubernetes_int_or_string: Optional[pulumi.Input[bool]] = None,
                 x_kubernetes_list_map_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 x_kubernetes_list_type: Optional[pulumi.Input[str]] = None,
                 x_kubernetes_map_type: Optional[pulumi.Input[str]] = None,
                 x_kubernetes_preserve_unknown_fields: Optional[pulumi.Input[bool]] = None):
        """
        JSONSchemaProps is a JSON-Schema definition.
        :param pulumi.Input[str] _schema: JSONSchemaURL represents a schema url.
        :param Any default: default is a default value for undefined object fields. Defaulting is a beta feature under the CustomResourceDefaulting feature gate. Defaulting requires spec.preserveUnknownFields to be false.
        :param pulumi.Input[Mapping[str, Any]] definitions: JSONSchemaDefinitions contains the models explicitly defined in this spec.
        :param pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]] dependencies: JSONSchemaDependencies represent a dependencies property.
        :param pulumi.Input['KameletSpecTypesSchemaExternalDocsArgs'] external_docs: ExternalDocumentation allows referencing an external resource for extended documentation.
        :param pulumi.Input[str] format: format is an OpenAPI v3 format string. Unknown formats are ignored. The following formats are validated: 
                - bsonobjectid: a bson object ID, i.e. a 24 characters hex string - uri: an URI as parsed by Golang net/url.ParseRequestURI - email: an email address as parsed by Golang net/mail.ParseAddress - hostname: a valid representation for an Internet host name, as defined by RFC 1034, section 3.1 [RFC1034]. - ipv4: an IPv4 IP as parsed by Golang net.ParseIP - ipv6: an IPv6 IP as parsed by Golang net.ParseIP - cidr: a CIDR as parsed by Golang net.ParseCIDR - mac: a MAC address as parsed by Golang net.ParseMAC - uuid: an UUID that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid3: an UUID3 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?3[0-9a-f]{3}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid4: an UUID4 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?4[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - uuid5: an UUID5 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?5[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - isbn: an ISBN10 or ISBN13 number string like "0321751043" or "978-0321751041" - isbn10: an ISBN10 number string like "0321751043" - isbn13: an ISBN13 number string like "978-0321751041" - creditcard: a credit card number defined by the regex ^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$ with any non digit characters mixed in - ssn: a U.S. social security number following the regex ^\\d{3}[- ]?\\d{2}[- ]?\\d{4}$ - hexcolor: an hexadecimal color code like "#FFFFFF: following the regex ^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$ - rgbcolor: an RGB color code like rgb like "rgb(255,255,2559" - byte: base64 encoded binary data - password: any kind of string - date: a date string like "2006-01-02" as defined by full-date in RFC3339 - duration: a duration string like "22 ns" as parsed by Golang time.ParseDuration or compatible with Scala duration format - datetime: a date time string like "2014-12-15T19:30:20.000Z" as defined by date-time in RFC3339.
        :param pulumi.Input[str] maximum: A Number represents a JSON number literal.
        :param pulumi.Input[str] minimum: A Number represents a JSON number literal.
        :param pulumi.Input[str] multiple_of: A Number represents a JSON number literal.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] x_descriptors: x-descriptors annotates an object to define additional display options.
        :param pulumi.Input[bool] x_kubernetes_embedded_resource: x-kubernetes-embedded-resource defines that the value is an embedded Kubernetes runtime.Object, with TypeMeta and ObjectMeta. The type must be object. It is allowed to further restrict the embedded object. kind, apiVersion and metadata are validated automatically. x-kubernetes-preserve-unknown-fields is allowed to be true, but does not have to be if the object is fully specified (up to kind, apiVersion, metadata).
        :param pulumi.Input[bool] x_kubernetes_int_or_string: x-kubernetes-int-or-string specifies that this value is either an integer or a string. If this is true, an empty type is allowed and type as child of anyOf is permitted if following one of the following patterns: 
                1) anyOf:    - type: integer    - type: string 2) allOf:    - anyOf:      - type: integer      - type: string    - ... zero or more
        :param pulumi.Input[Sequence[pulumi.Input[str]]] x_kubernetes_list_map_keys: x-kubernetes-list-map-keys annotates an array with the x-kubernetes-list-type `map` by specifying the keys used as the index of the map. 
                This tag MUST only be used on lists that have the "x-kubernetes-list-type" extension set to "map". Also, the values specified for this attribute must be a scalar typed field of the child structure (no nesting is supported). 
                The properties specified must either be required or have a default value, to ensure those properties are present for all list items.
        :param pulumi.Input[str] x_kubernetes_list_type: x-kubernetes-list-type annotates an array to further describe its topology. This extension must only be used on lists and may have 3 possible values: 
                1) `atomic`: the list is treated as a single entity, like a scalar.      Atomic lists will be entirely replaced when updated. This extension      may be used on any type of list (struct, scalar, ...). 2) `set`:      Sets are lists that must not have multiple items with the same value. Each      value must be a scalar, an object with x-kubernetes-map-type `atomic` or an      array with x-kubernetes-list-type `atomic`. 3) `map`:      These lists are like maps in that their elements have a non-index key      used to identify them. Order is preserved upon merge. The map tag      must only be used on a list with elements of type object. Defaults to atomic for arrays.
        :param pulumi.Input[str] x_kubernetes_map_type: x-kubernetes-map-type annotates an object to further describe its topology. This extension must only be used when type is object and may have 2 possible values: 
                1) `granular`:      These maps are actual maps (key-value pairs) and each fields are independent      from each other (they can each be manipulated by separate actors). This is      the default behaviour for all maps. 2) `atomic`: the list is treated as a single entity, like a scalar.      Atomic maps will be entirely replaced when updated.
        :param pulumi.Input[bool] x_kubernetes_preserve_unknown_fields: x-kubernetes-preserve-unknown-fields stops the API server decoding step from pruning fields which are not specified in the validation schema. This affects fields recursively, but switches back to normal pruning behaviour if nested properties or additionalProperties are specified in the schema. This can either be true or undefined. False is forbidden.
        """
        if _ref is not None:
            pulumi.set(__self__, "_ref", _ref)
        if _schema is not None:
            pulumi.set(__self__, "_schema", _schema)
        if additional_items is not None:
            pulumi.set(__self__, "additional_items", additional_items)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if all_of is not None:
            pulumi.set(__self__, "all_of", all_of)
        if any_of is not None:
            pulumi.set(__self__, "any_of", any_of)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if definitions is not None:
            pulumi.set(__self__, "definitions", definitions)
        if dependencies is not None:
            pulumi.set(__self__, "dependencies", dependencies)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enum is not None:
            pulumi.set(__self__, "enum", enum)
        if example is not None:
            pulumi.set(__self__, "example", example)
        if exclusive_maximum is not None:
            pulumi.set(__self__, "exclusive_maximum", exclusive_maximum)
        if exclusive_minimum is not None:
            pulumi.set(__self__, "exclusive_minimum", exclusive_minimum)
        if external_docs is not None:
            pulumi.set(__self__, "external_docs", external_docs)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if max_items is not None:
            pulumi.set(__self__, "max_items", max_items)
        if max_length is not None:
            pulumi.set(__self__, "max_length", max_length)
        if max_properties is not None:
            pulumi.set(__self__, "max_properties", max_properties)
        if maximum is not None:
            pulumi.set(__self__, "maximum", maximum)
        if min_items is not None:
            pulumi.set(__self__, "min_items", min_items)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if min_properties is not None:
            pulumi.set(__self__, "min_properties", min_properties)
        if minimum is not None:
            pulumi.set(__self__, "minimum", minimum)
        if multiple_of is not None:
            pulumi.set(__self__, "multiple_of", multiple_of)
        if not_ is not None:
            pulumi.set(__self__, "not_", not_)
        if nullable is not None:
            pulumi.set(__self__, "nullable", nullable)
        if one_of is not None:
            pulumi.set(__self__, "one_of", one_of)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if pattern_properties is not None:
            pulumi.set(__self__, "pattern_properties", pattern_properties)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unique_items is not None:
            pulumi.set(__self__, "unique_items", unique_items)
        if x_descriptors is not None:
            pulumi.set(__self__, "x_descriptors", x_descriptors)
        if x_kubernetes_embedded_resource is not None:
            pulumi.set(__self__, "x_kubernetes_embedded_resource", x_kubernetes_embedded_resource)
        if x_kubernetes_int_or_string is not None:
            pulumi.set(__self__, "x_kubernetes_int_or_string", x_kubernetes_int_or_string)
        if x_kubernetes_list_map_keys is not None:
            pulumi.set(__self__, "x_kubernetes_list_map_keys", x_kubernetes_list_map_keys)
        if x_kubernetes_list_type is not None:
            pulumi.set(__self__, "x_kubernetes_list_type", x_kubernetes_list_type)
        if x_kubernetes_map_type is not None:
            pulumi.set(__self__, "x_kubernetes_map_type", x_kubernetes_map_type)
        if x_kubernetes_preserve_unknown_fields is not None:
            pulumi.set(__self__, "x_kubernetes_preserve_unknown_fields", x_kubernetes_preserve_unknown_fields)

    @property
    @pulumi.getter(name="$ref")
    def _ref(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "_ref")

    @_ref.setter
    def _ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "_ref", value)

    @property
    @pulumi.getter(name="$schema")
    def _schema(self) -> Optional[pulumi.Input[str]]:
        """
        JSONSchemaURL represents a schema url.
        """
        return pulumi.get(self, "_schema")

    @_schema.setter
    def _schema(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "_schema", value)

    @property
    @pulumi.getter(name="additionalItems")
    def additional_items(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "additional_items")

    @additional_items.setter
    def additional_items(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "additional_items", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "additional_properties", value)

    @property
    @pulumi.getter(name="allOf")
    def all_of(self) -> Optional[pulumi.Input[Sequence[Any]]]:
        return pulumi.get(self, "all_of")

    @all_of.setter
    def all_of(self, value: Optional[pulumi.Input[Sequence[Any]]]):
        pulumi.set(self, "all_of", value)

    @property
    @pulumi.getter(name="anyOf")
    def any_of(self) -> Optional[pulumi.Input[Sequence[Any]]]:
        return pulumi.get(self, "any_of")

    @any_of.setter
    def any_of(self, value: Optional[pulumi.Input[Sequence[Any]]]):
        pulumi.set(self, "any_of", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[Any]:
        """
        default is a default value for undefined object fields. Defaulting is a beta feature under the CustomResourceDefaulting feature gate. Defaulting requires spec.preserveUnknownFields to be false.
        """
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[Any]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def definitions(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        JSONSchemaDefinitions contains the models explicitly defined in this spec.
        """
        return pulumi.get(self, "definitions")

    @definitions.setter
    def definitions(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "definitions", value)

    @property
    @pulumi.getter
    def dependencies(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]:
        """
        JSONSchemaDependencies represent a dependencies property.
        """
        return pulumi.get(self, "dependencies")

    @dependencies.setter
    def dependencies(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]):
        pulumi.set(self, "dependencies", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enum(self) -> Optional[pulumi.Input[Sequence[Any]]]:
        return pulumi.get(self, "enum")

    @enum.setter
    def enum(self, value: Optional[pulumi.Input[Sequence[Any]]]):
        pulumi.set(self, "enum", value)

    @property
    @pulumi.getter
    def example(self) -> Optional[Any]:
        return pulumi.get(self, "example")

    @example.setter
    def example(self, value: Optional[Any]):
        pulumi.set(self, "example", value)

    @property
    @pulumi.getter(name="exclusiveMaximum")
    def exclusive_maximum(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "exclusive_maximum")

    @exclusive_maximum.setter
    def exclusive_maximum(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "exclusive_maximum", value)

    @property
    @pulumi.getter(name="exclusiveMinimum")
    def exclusive_minimum(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "exclusive_minimum")

    @exclusive_minimum.setter
    def exclusive_minimum(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "exclusive_minimum", value)

    @property
    @pulumi.getter(name="externalDocs")
    def external_docs(self) -> Optional[pulumi.Input['KameletSpecTypesSchemaExternalDocsArgs']]:
        """
        ExternalDocumentation allows referencing an external resource for extended documentation.
        """
        return pulumi.get(self, "external_docs")

    @external_docs.setter
    def external_docs(self, value: Optional[pulumi.Input['KameletSpecTypesSchemaExternalDocsArgs']]):
        pulumi.set(self, "external_docs", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        format is an OpenAPI v3 format string. Unknown formats are ignored. The following formats are validated: 
         - bsonobjectid: a bson object ID, i.e. a 24 characters hex string - uri: an URI as parsed by Golang net/url.ParseRequestURI - email: an email address as parsed by Golang net/mail.ParseAddress - hostname: a valid representation for an Internet host name, as defined by RFC 1034, section 3.1 [RFC1034]. - ipv4: an IPv4 IP as parsed by Golang net.ParseIP - ipv6: an IPv6 IP as parsed by Golang net.ParseIP - cidr: a CIDR as parsed by Golang net.ParseCIDR - mac: a MAC address as parsed by Golang net.ParseMAC - uuid: an UUID that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid3: an UUID3 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?3[0-9a-f]{3}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid4: an UUID4 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?4[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - uuid5: an UUID5 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?5[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - isbn: an ISBN10 or ISBN13 number string like "0321751043" or "978-0321751041" - isbn10: an ISBN10 number string like "0321751043" - isbn13: an ISBN13 number string like "978-0321751041" - creditcard: a credit card number defined by the regex ^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$ with any non digit characters mixed in - ssn: a U.S. social security number following the regex ^\\d{3}[- ]?\\d{2}[- ]?\\d{4}$ - hexcolor: an hexadecimal color code like "#FFFFFF: following the regex ^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$ - rgbcolor: an RGB color code like rgb like "rgb(255,255,2559" - byte: base64 encoded binary data - password: any kind of string - date: a date string like "2006-01-02" as defined by full-date in RFC3339 - duration: a duration string like "22 ns" as parsed by Golang time.ParseDuration or compatible with Scala duration format - datetime: a date time string like "2014-12-15T19:30:20.000Z" as defined by date-time in RFC3339.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[Any]:
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[Any]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter(name="maxItems")
    def max_items(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_items")

    @max_items.setter
    def max_items(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_items", value)

    @property
    @pulumi.getter(name="maxLength")
    def max_length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_length")

    @max_length.setter
    def max_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_length", value)

    @property
    @pulumi.getter(name="maxProperties")
    def max_properties(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_properties")

    @max_properties.setter
    def max_properties(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_properties", value)

    @property
    @pulumi.getter
    def maximum(self) -> Optional[pulumi.Input[str]]:
        """
        A Number represents a JSON number literal.
        """
        return pulumi.get(self, "maximum")

    @maximum.setter
    def maximum(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maximum", value)

    @property
    @pulumi.getter(name="minItems")
    def min_items(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_items")

    @min_items.setter
    def min_items(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_items", value)

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_length")

    @min_length.setter
    def min_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_length", value)

    @property
    @pulumi.getter(name="minProperties")
    def min_properties(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_properties")

    @min_properties.setter
    def min_properties(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_properties", value)

    @property
    @pulumi.getter
    def minimum(self) -> Optional[pulumi.Input[str]]:
        """
        A Number represents a JSON number literal.
        """
        return pulumi.get(self, "minimum")

    @minimum.setter
    def minimum(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "minimum", value)

    @property
    @pulumi.getter(name="multipleOf")
    def multiple_of(self) -> Optional[pulumi.Input[str]]:
        """
        A Number represents a JSON number literal.
        """
        return pulumi.get(self, "multiple_of")

    @multiple_of.setter
    def multiple_of(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multiple_of", value)

    @property
    @pulumi.getter(name="not")
    def not_(self) -> Optional[Any]:
        return pulumi.get(self, "not_")

    @not_.setter
    def not_(self, value: Optional[Any]):
        pulumi.set(self, "not_", value)

    @property
    @pulumi.getter
    def nullable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "nullable")

    @nullable.setter
    def nullable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "nullable", value)

    @property
    @pulumi.getter(name="oneOf")
    def one_of(self) -> Optional[pulumi.Input[Sequence[Any]]]:
        return pulumi.get(self, "one_of")

    @one_of.setter
    def one_of(self, value: Optional[pulumi.Input[Sequence[Any]]]):
        pulumi.set(self, "one_of", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter(name="patternProperties")
    def pattern_properties(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "pattern_properties")

    @pattern_properties.setter
    def pattern_properties(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "pattern_properties", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="uniqueItems")
    def unique_items(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "unique_items")

    @unique_items.setter
    def unique_items(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "unique_items", value)

    @property
    @pulumi.getter(name="x-descriptors")
    def x_descriptors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        x-descriptors annotates an object to define additional display options.
        """
        return pulumi.get(self, "x_descriptors")

    @x_descriptors.setter
    def x_descriptors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "x_descriptors", value)

    @property
    @pulumi.getter(name="x-kubernetes-embedded-resource")
    def x_kubernetes_embedded_resource(self) -> Optional[pulumi.Input[bool]]:
        """
        x-kubernetes-embedded-resource defines that the value is an embedded Kubernetes runtime.Object, with TypeMeta and ObjectMeta. The type must be object. It is allowed to further restrict the embedded object. kind, apiVersion and metadata are validated automatically. x-kubernetes-preserve-unknown-fields is allowed to be true, but does not have to be if the object is fully specified (up to kind, apiVersion, metadata).
        """
        return pulumi.get(self, "x_kubernetes_embedded_resource")

    @x_kubernetes_embedded_resource.setter
    def x_kubernetes_embedded_resource(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "x_kubernetes_embedded_resource", value)

    @property
    @pulumi.getter(name="x-kubernetes-int-or-string")
    def x_kubernetes_int_or_string(self) -> Optional[pulumi.Input[bool]]:
        """
        x-kubernetes-int-or-string specifies that this value is either an integer or a string. If this is true, an empty type is allowed and type as child of anyOf is permitted if following one of the following patterns: 
         1) anyOf:    - type: integer    - type: string 2) allOf:    - anyOf:      - type: integer      - type: string    - ... zero or more
        """
        return pulumi.get(self, "x_kubernetes_int_or_string")

    @x_kubernetes_int_or_string.setter
    def x_kubernetes_int_or_string(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "x_kubernetes_int_or_string", value)

    @property
    @pulumi.getter(name="x-kubernetes-list-map-keys")
    def x_kubernetes_list_map_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        x-kubernetes-list-map-keys annotates an array with the x-kubernetes-list-type `map` by specifying the keys used as the index of the map. 
         This tag MUST only be used on lists that have the "x-kubernetes-list-type" extension set to "map". Also, the values specified for this attribute must be a scalar typed field of the child structure (no nesting is supported). 
         The properties specified must either be required or have a default value, to ensure those properties are present for all list items.
        """
        return pulumi.get(self, "x_kubernetes_list_map_keys")

    @x_kubernetes_list_map_keys.setter
    def x_kubernetes_list_map_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "x_kubernetes_list_map_keys", value)

    @property
    @pulumi.getter(name="x-kubernetes-list-type")
    def x_kubernetes_list_type(self) -> Optional[pulumi.Input[str]]:
        """
        x-kubernetes-list-type annotates an array to further describe its topology. This extension must only be used on lists and may have 3 possible values: 
         1) `atomic`: the list is treated as a single entity, like a scalar.      Atomic lists will be entirely replaced when updated. This extension      may be used on any type of list (struct, scalar, ...). 2) `set`:      Sets are lists that must not have multiple items with the same value. Each      value must be a scalar, an object with x-kubernetes-map-type `atomic` or an      array with x-kubernetes-list-type `atomic`. 3) `map`:      These lists are like maps in that their elements have a non-index key      used to identify them. Order is preserved upon merge. The map tag      must only be used on a list with elements of type object. Defaults to atomic for arrays.
        """
        return pulumi.get(self, "x_kubernetes_list_type")

    @x_kubernetes_list_type.setter
    def x_kubernetes_list_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x_kubernetes_list_type", value)

    @property
    @pulumi.getter(name="x-kubernetes-map-type")
    def x_kubernetes_map_type(self) -> Optional[pulumi.Input[str]]:
        """
        x-kubernetes-map-type annotates an object to further describe its topology. This extension must only be used when type is object and may have 2 possible values: 
         1) `granular`:      These maps are actual maps (key-value pairs) and each fields are independent      from each other (they can each be manipulated by separate actors). This is      the default behaviour for all maps. 2) `atomic`: the list is treated as a single entity, like a scalar.      Atomic maps will be entirely replaced when updated.
        """
        return pulumi.get(self, "x_kubernetes_map_type")

    @x_kubernetes_map_type.setter
    def x_kubernetes_map_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x_kubernetes_map_type", value)

    @property
    @pulumi.getter(name="x-kubernetes-preserve-unknown-fields")
    def x_kubernetes_preserve_unknown_fields(self) -> Optional[pulumi.Input[bool]]:
        """
        x-kubernetes-preserve-unknown-fields stops the API server decoding step from pruning fields which are not specified in the validation schema. This affects fields recursively, but switches back to normal pruning behaviour if nested properties or additionalProperties are specified in the schema. This can either be true or undefined. False is forbidden.
        """
        return pulumi.get(self, "x_kubernetes_preserve_unknown_fields")

    @x_kubernetes_preserve_unknown_fields.setter
    def x_kubernetes_preserve_unknown_fields(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "x_kubernetes_preserve_unknown_fields", value)


@pulumi.input_type
class KameletSpecTypesSchemaExternalDocsArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        ExternalDocumentation allows referencing an external resource for extended documentation.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class KameletStatusArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['KameletStatusConditionsArgs']]]] = None,
                 phase: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Sequence[pulumi.Input['KameletStatusPropertiesArgs']]]] = None):
        """
        KameletStatus defines the observed state of Kamelet
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KameletStatusConditionsArgs']]]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KameletStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def phase(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "phase")

    @phase.setter
    def phase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "phase", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KameletStatusPropertiesArgs']]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KameletStatusPropertiesArgs']]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class KameletStatusConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 last_update_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        KameletCondition describes the state of a resource at a certain point.
        :param pulumi.Input[str] status: Status of the condition, one of True, False, Unknown.
        :param pulumi.Input[str] type: Type of kamelet condition.
        :param pulumi.Input[str] last_transition_time: Last time the condition transitioned from one status to another.
        :param pulumi.Input[str] last_update_time: The last time this condition was updated.
        :param pulumi.Input[str] message: A human readable message indicating details about the transition.
        :param pulumi.Input[str] reason: The reason for the condition's last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if last_update_time is not None:
            pulumi.set(__self__, "last_update_time", last_update_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status of the condition, one of True, False, Unknown.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of kamelet condition.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        """
        Last time the condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> Optional[pulumi.Input[str]]:
        """
        The last time this condition was updated.
        """
        return pulumi.get(self, "last_update_time")

    @last_update_time.setter
    def last_update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_update_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        A human readable message indicating details about the transition.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        The reason for the condition's last transition.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


@pulumi.input_type
class KameletStatusPropertiesArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)



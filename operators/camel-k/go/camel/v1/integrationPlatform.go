// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// IntegrationPlatform is the Schema for the integrationplatforms API
type IntegrationPlatform struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// IntegrationPlatformSpec defines the desired state of IntegrationPlatform
	Spec IntegrationPlatformSpecPtrOutput `pulumi:"spec"`
	// IntegrationPlatformStatus defines the observed state of IntegrationPlatform
	Status IntegrationPlatformStatusPtrOutput `pulumi:"status"`
}

// NewIntegrationPlatform registers a new resource with the given unique name, arguments, and options.
func NewIntegrationPlatform(ctx *pulumi.Context,
	name string, args *IntegrationPlatformArgs, opts ...pulumi.ResourceOption) (*IntegrationPlatform, error) {
	if args == nil {
		args = &IntegrationPlatformArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("camel.apache.org/v1")
	args.Kind = pulumi.StringPtr("IntegrationPlatform")
	var resource IntegrationPlatform
	err := ctx.RegisterResource("kubernetes:camel.apache.org/v1:IntegrationPlatform", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegrationPlatform gets an existing IntegrationPlatform resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegrationPlatform(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationPlatformState, opts ...pulumi.ResourceOption) (*IntegrationPlatform, error) {
	var resource IntegrationPlatform
	err := ctx.ReadResource("kubernetes:camel.apache.org/v1:IntegrationPlatform", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IntegrationPlatform resources.
type integrationPlatformState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// IntegrationPlatformSpec defines the desired state of IntegrationPlatform
	Spec *IntegrationPlatformSpec `pulumi:"spec"`
	// IntegrationPlatformStatus defines the observed state of IntegrationPlatform
	Status *IntegrationPlatformStatus `pulumi:"status"`
}

type IntegrationPlatformState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// IntegrationPlatformSpec defines the desired state of IntegrationPlatform
	Spec IntegrationPlatformSpecPtrInput
	// IntegrationPlatformStatus defines the observed state of IntegrationPlatform
	Status IntegrationPlatformStatusPtrInput
}

func (IntegrationPlatformState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationPlatformState)(nil)).Elem()
}

type integrationPlatformArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// IntegrationPlatformSpec defines the desired state of IntegrationPlatform
	Spec *IntegrationPlatformSpec `pulumi:"spec"`
	// IntegrationPlatformStatus defines the observed state of IntegrationPlatform
	Status *IntegrationPlatformStatus `pulumi:"status"`
}

// The set of arguments for constructing a IntegrationPlatform resource.
type IntegrationPlatformArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// IntegrationPlatformSpec defines the desired state of IntegrationPlatform
	Spec IntegrationPlatformSpecPtrInput
	// IntegrationPlatformStatus defines the observed state of IntegrationPlatform
	Status IntegrationPlatformStatusPtrInput
}

func (IntegrationPlatformArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationPlatformArgs)(nil)).Elem()
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// IntegrationKit is the Schema for the integrationkits API
type IntegrationKit struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// IntegrationKitSpec defines the desired state of IntegrationKit
	Spec IntegrationKitSpecPtrOutput `pulumi:"spec"`
	// IntegrationKitStatus defines the observed state of IntegrationKit
	Status IntegrationKitStatusPtrOutput `pulumi:"status"`
}

// NewIntegrationKit registers a new resource with the given unique name, arguments, and options.
func NewIntegrationKit(ctx *pulumi.Context,
	name string, args *IntegrationKitArgs, opts ...pulumi.ResourceOption) (*IntegrationKit, error) {
	if args == nil {
		args = &IntegrationKitArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("camel.apache.org/v1")
	args.Kind = pulumi.StringPtr("IntegrationKit")
	var resource IntegrationKit
	err := ctx.RegisterResource("kubernetes:camel.apache.org/v1:IntegrationKit", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegrationKit gets an existing IntegrationKit resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegrationKit(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationKitState, opts ...pulumi.ResourceOption) (*IntegrationKit, error) {
	var resource IntegrationKit
	err := ctx.ReadResource("kubernetes:camel.apache.org/v1:IntegrationKit", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IntegrationKit resources.
type integrationKitState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// IntegrationKitSpec defines the desired state of IntegrationKit
	Spec *IntegrationKitSpec `pulumi:"spec"`
	// IntegrationKitStatus defines the observed state of IntegrationKit
	Status *IntegrationKitStatus `pulumi:"status"`
}

type IntegrationKitState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// IntegrationKitSpec defines the desired state of IntegrationKit
	Spec IntegrationKitSpecPtrInput
	// IntegrationKitStatus defines the observed state of IntegrationKit
	Status IntegrationKitStatusPtrInput
}

func (IntegrationKitState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationKitState)(nil)).Elem()
}

type integrationKitArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// IntegrationKitSpec defines the desired state of IntegrationKit
	Spec *IntegrationKitSpec `pulumi:"spec"`
	// IntegrationKitStatus defines the observed state of IntegrationKit
	Status *IntegrationKitStatus `pulumi:"status"`
}

// The set of arguments for constructing a IntegrationKit resource.
type IntegrationKitArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// IntegrationKitSpec defines the desired state of IntegrationKit
	Spec IntegrationKitSpecPtrInput
	// IntegrationKitStatus defines the observed state of IntegrationKit
	Status IntegrationKitStatusPtrInput
}

func (IntegrationKitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationKitArgs)(nil)).Elem()
}

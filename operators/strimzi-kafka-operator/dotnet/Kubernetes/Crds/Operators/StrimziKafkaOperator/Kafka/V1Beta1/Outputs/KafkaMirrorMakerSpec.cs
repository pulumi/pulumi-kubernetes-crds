// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1
{

    [OutputType]
    public sealed class KafkaMirrorMakerSpec
    {
        /// <summary>
        /// The pod's affinity rules.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaMirrorMakerSpecAffinity Affinity;
        /// <summary>
        /// Configuration of source cluster.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaMirrorMakerSpecConsumer Consumer;
        /// <summary>
        /// The docker image for the pods.
        /// </summary>
        public readonly string Image;
        /// <summary>
        /// JVM Options for pods.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaMirrorMakerSpecJvmOptions JvmOptions;
        /// <summary>
        /// Pod liveness checking.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaMirrorMakerSpecLivenessProbe LivenessProbe;
        /// <summary>
        /// Logging configuration for MirrorMaker.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaMirrorMakerSpecLogging Logging;
        /// <summary>
        /// The Prometheus JMX Exporter configuration. See {JMXExporter} for details of the structure of this configuration.
        /// </summary>
        public readonly ImmutableDictionary<string, object> Metrics;
        /// <summary>
        /// Configuration of target cluster.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaMirrorMakerSpecProducer Producer;
        /// <summary>
        /// Pod readiness checking.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaMirrorMakerSpecReadinessProbe ReadinessProbe;
        /// <summary>
        /// The number of pods in the `Deployment`.
        /// </summary>
        public readonly int Replicas;
        /// <summary>
        /// CPU and memory resources to reserve.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaMirrorMakerSpecResources Resources;
        /// <summary>
        /// Template to specify how Kafka MirrorMaker resources, `Deployments` and `Pods`, are generated.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaMirrorMakerSpecTemplate Template;
        /// <summary>
        /// The pod's tolerations.
        /// </summary>
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaMirrorMakerSpecTolerations> Tolerations;
        /// <summary>
        /// The configuration of tracing in Kafka MirrorMaker.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaMirrorMakerSpecTracing Tracing;
        /// <summary>
        /// The Kafka MirrorMaker version. Defaults to {DefaultKafkaVersion}. Consult the documentation to understand the process required to upgrade or downgrade the version.
        /// </summary>
        public readonly string Version;
        /// <summary>
        /// List of topics which are included for mirroring. This option allows any regular expression using Java-style regular expressions. Mirroring two topics named A and B is achieved by using the whitelist `'A\|B'`. Or, as a special case, you can mirror all topics using the whitelist '*'. You can also specify multiple regular expressions separated by commas.
        /// </summary>
        public readonly string Whitelist;

        [OutputConstructor]
        private KafkaMirrorMakerSpec(
            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaMirrorMakerSpecAffinity affinity,

            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaMirrorMakerSpecConsumer consumer,

            string image,

            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaMirrorMakerSpecJvmOptions jvmOptions,

            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaMirrorMakerSpecLivenessProbe livenessProbe,

            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaMirrorMakerSpecLogging logging,

            ImmutableDictionary<string, object> metrics,

            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaMirrorMakerSpecProducer producer,

            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaMirrorMakerSpecReadinessProbe readinessProbe,

            int replicas,

            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaMirrorMakerSpecResources resources,

            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaMirrorMakerSpecTemplate template,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaMirrorMakerSpecTolerations> tolerations,

            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaMirrorMakerSpecTracing tracing,

            string version,

            string whitelist)
        {
            Affinity = affinity;
            Consumer = consumer;
            Image = image;
            JvmOptions = jvmOptions;
            LivenessProbe = livenessProbe;
            Logging = logging;
            Metrics = metrics;
            Producer = producer;
            ReadinessProbe = readinessProbe;
            Replicas = replicas;
            Resources = resources;
            Template = template;
            Tolerations = tolerations;
            Tracing = tracing;
            Version = version;
            Whitelist = whitelist;
        }
    }
}

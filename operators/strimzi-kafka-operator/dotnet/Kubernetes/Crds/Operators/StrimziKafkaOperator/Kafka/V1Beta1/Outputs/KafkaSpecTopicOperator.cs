// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1
{

    [OutputType]
    public sealed class KafkaSpecTopicOperator
    {
        /// <summary>
        /// Pod affinity rules.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecTopicOperatorAffinity Affinity;
        /// <summary>
        /// The image to use for the Topic Operator.
        /// </summary>
        public readonly string Image;
        /// <summary>
        /// JVM Options for pods.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecTopicOperatorJvmOptions JvmOptions;
        /// <summary>
        /// Pod liveness checking.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecTopicOperatorLivenessProbe LivenessProbe;
        /// <summary>
        /// Logging configuration.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecTopicOperatorLogging Logging;
        /// <summary>
        /// Pod readiness checking.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecTopicOperatorReadinessProbe ReadinessProbe;
        /// <summary>
        /// Interval between periodic reconciliations.
        /// </summary>
        public readonly int ReconciliationIntervalSeconds;
        /// <summary>
        /// CPU and memory resources to reserve.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecTopicOperatorResources Resources;
        /// <summary>
        /// TLS sidecar configuration.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecTopicOperatorTlsSidecar TlsSidecar;
        /// <summary>
        /// The number of attempts at getting topic metadata.
        /// </summary>
        public readonly int TopicMetadataMaxAttempts;
        /// <summary>
        /// The namespace the Topic Operator should watch.
        /// </summary>
        public readonly string WatchedNamespace;
        /// <summary>
        /// Timeout for the ZooKeeper session.
        /// </summary>
        public readonly int ZookeeperSessionTimeoutSeconds;

        [OutputConstructor]
        private KafkaSpecTopicOperator(
            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecTopicOperatorAffinity affinity,

            string image,

            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecTopicOperatorJvmOptions jvmOptions,

            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecTopicOperatorLivenessProbe livenessProbe,

            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecTopicOperatorLogging logging,

            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecTopicOperatorReadinessProbe readinessProbe,

            int reconciliationIntervalSeconds,

            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecTopicOperatorResources resources,

            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecTopicOperatorTlsSidecar tlsSidecar,

            int topicMetadataMaxAttempts,

            string watchedNamespace,

            int zookeeperSessionTimeoutSeconds)
        {
            Affinity = affinity;
            Image = image;
            JvmOptions = jvmOptions;
            LivenessProbe = livenessProbe;
            Logging = logging;
            ReadinessProbe = readinessProbe;
            ReconciliationIntervalSeconds = reconciliationIntervalSeconds;
            Resources = resources;
            TlsSidecar = tlsSidecar;
            TopicMetadataMaxAttempts = topicMetadataMaxAttempts;
            WatchedNamespace = watchedNamespace;
            ZookeeperSessionTimeoutSeconds = zookeeperSessionTimeoutSeconds;
        }
    }
}

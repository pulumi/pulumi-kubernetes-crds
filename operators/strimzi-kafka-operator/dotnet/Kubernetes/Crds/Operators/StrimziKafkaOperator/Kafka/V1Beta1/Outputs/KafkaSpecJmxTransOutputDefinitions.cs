// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1
{

    [OutputType]
    public sealed class KafkaSpecJmxTransOutputDefinitions
    {
        /// <summary>
        /// How many seconds the JmxTrans waits before pushing a new set of data out.
        /// </summary>
        public readonly int FlushDelayInSeconds;
        /// <summary>
        /// The DNS/hostname of the remote host that the data is pushed to.
        /// </summary>
        public readonly string Host;
        /// <summary>
        /// Template for setting the name of the output definition. This is used to identify where to send the results of queries should be sent.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Template for setting the format of the data that will be pushed.For more information see https://github.com/jmxtrans/jmxtrans/wiki/OutputWriters[JmxTrans OutputWriters].
        /// </summary>
        public readonly string OutputType;
        /// <summary>
        /// The port of the remote host that the data is pushed to.
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// Template for filtering data to be included in response to a wildcard query. For more information see https://github.com/jmxtrans/jmxtrans/wiki/Queries[JmxTrans queries].
        /// </summary>
        public readonly ImmutableArray<string> TypeNames;

        [OutputConstructor]
        private KafkaSpecJmxTransOutputDefinitions(
            int flushDelayInSeconds,

            string host,

            string name,

            string outputType,

            int port,

            ImmutableArray<string> typeNames)
        {
            FlushDelayInSeconds = flushDelayInSeconds;
            Host = host;
            Name = name;
            OutputType = outputType;
            Port = port;
            TypeNames = typeNames;
        }
    }
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1
{

    [OutputType]
    public sealed class KafkaSpecKafkaListenersOneOf0Configuration
    {
        /// <summary>
        /// Bootstrap configuration.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafkaListenersOneOf0ConfigurationBootstrap Bootstrap;
        /// <summary>
        /// Reference to the `Secret` which holds the certificate and private key pair which will be used for this listener. The certificate can optionally contain the whole chain. This field can be used only with listeners with enabled TLS encryption.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafkaListenersOneOf0ConfigurationBrokerCertChainAndKey BrokerCertChainAndKey;
        /// <summary>
        /// Per-broker configurations.
        /// </summary>
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafkaListenersOneOf0ConfigurationBrokers> Brokers;
        /// <summary>
        /// Configures the `Ingress` class that defines which `Ingress` controller will be used. If not set, the `Ingress` class is set to `nginx`. This field can be used only with `ingress` type listener.
        /// </summary>
        public readonly string Class;
        /// <summary>
        /// Specifies whether the service routes external traffic to node-local or cluster-wide endpoints. `Cluster` may cause a second hop to another node and obscures the client source IP. `Local` avoids a second hop for LoadBalancer and Nodeport type services and preserves the client source IP (when supported by the infrastructure). If unspecified, Kubernetes will use `Cluster` as the default.This field can be used only with `loadbalancer` or `nodeport` type listener.
        /// </summary>
        public readonly string ExternalTrafficPolicy;
        /// <summary>
        /// A list of CIDR ranges (for example `10.0.0.0/8` or `130.211.204.1/32`) from which clients can connect to load balancer type listeners. If supported by the platform, traffic through the loadbalancer is restricted to the specified CIDR ranges. This field is applicable only for loadbalancer type services and is ignored if the cloud provider does not support the feature. For more information, see https://v1-17.docs.kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/. This field can be used only with `loadbalancer` type listener.
        /// </summary>
        public readonly ImmutableArray<string> LoadBalancerSourceRanges;
        /// <summary>
        /// Defines which address type should be used as the node address. Available types are: `ExternalDNS`, `ExternalIP`, `InternalDNS`, `InternalIP` and `Hostname`. By default, the addresses will be used in the following order (the first one found will be used):
        /// * `ExternalDNS`
        /// * `ExternalIP`
        /// * `InternalDNS`
        /// * `InternalIP`
        /// * `Hostname`
        /// 
        /// This field can be used to select the address type which will be used as the preferred type and checked first. In case no address will be found for this address type, the other types will be used in the default order.This field can be used only with `nodeport` type listener..
        /// </summary>
        public readonly string PreferredNodePortAddressType;
        /// <summary>
        /// Configures whether the Kubernetes service DNS domain should be used or not. If set to `true`, the generated addresses with contain the service DNS domain suffix (by default `.cluster.local`, can be configured using environment variable `KUBERNETES_SERVICE_DNS_DOMAIN`). Defaults to `false`.This field can be used only with `internal` type listener.
        /// </summary>
        public readonly bool UseServiceDnsDomain;

        [OutputConstructor]
        private KafkaSpecKafkaListenersOneOf0Configuration(
            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafkaListenersOneOf0ConfigurationBootstrap bootstrap,

            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafkaListenersOneOf0ConfigurationBrokerCertChainAndKey brokerCertChainAndKey,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafkaListenersOneOf0ConfigurationBrokers> brokers,

            string @class,

            string externalTrafficPolicy,

            ImmutableArray<string> loadBalancerSourceRanges,

            string preferredNodePortAddressType,

            bool useServiceDnsDomain)
        {
            Bootstrap = bootstrap;
            BrokerCertChainAndKey = brokerCertChainAndKey;
            Brokers = brokers;
            Class = @class;
            ExternalTrafficPolicy = externalTrafficPolicy;
            LoadBalancerSourceRanges = loadBalancerSourceRanges;
            PreferredNodePortAddressType = preferredNodePortAddressType;
            UseServiceDnsDomain = useServiceDnsDomain;
        }
    }
}

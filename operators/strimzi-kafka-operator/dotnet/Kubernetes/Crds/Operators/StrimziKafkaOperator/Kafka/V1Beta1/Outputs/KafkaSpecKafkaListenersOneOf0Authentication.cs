// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1
{

    [OutputType]
    public sealed class KafkaSpecKafkaListenersOneOf0Authentication
    {
        /// <summary>
        /// Configure whether the access token is treated as JWT. This must be set to `false` if the authorization server returns opaque tokens. Defaults to `true`.
        /// </summary>
        public readonly bool AccessTokenIsJwt;
        /// <summary>
        /// Configure whether the access token type check is performed or not. This should be set to `false` if the authorization server does not include 'typ' claim in JWT token. Defaults to `true`.
        /// </summary>
        public readonly bool CheckAccessTokenType;
        /// <summary>
        /// Enable or disable issuer checking. By default issuer is checked using the value configured by `validIssuerUri`. Default value is `true`.
        /// </summary>
        public readonly bool CheckIssuer;
        /// <summary>
        /// OAuth Client ID which the Kafka broker can use to authenticate against the authorization server and use the introspect endpoint URI.
        /// </summary>
        public readonly string ClientId;
        /// <summary>
        /// Link to Kubernetes Secret containing the OAuth client secret which the Kafka broker can use to authenticate against the authorization server and use the introspect endpoint URI.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafkaListenersOneOf0AuthenticationClientSecret ClientSecret;
        /// <summary>
        /// Enable or disable TLS hostname verification. Default value is `false`.
        /// </summary>
        public readonly bool DisableTlsHostnameVerification;
        /// <summary>
        /// Enable or disable ECDSA support by installing BouncyCastle crypto provider. Default value is `false`.
        /// </summary>
        public readonly bool EnableECDSA;
        /// <summary>
        /// The fallback username claim to be used for the user id if the claim specified by `userNameClaim` is not present. This is useful when `client_credentials` authentication only results in the client id being provided in another claim. It only takes effect if `userNameClaim` is set.
        /// </summary>
        public readonly string FallbackUserNameClaim;
        /// <summary>
        /// The prefix to use with the value of `fallbackUserNameClaim` to construct the user id. This only takes effect if `fallbackUserNameClaim` is true, and the value is present for the claim. Mapping usernames and client ids into the same user id space is useful in preventing name collisions.
        /// </summary>
        public readonly string FallbackUserNamePrefix;
        /// <summary>
        /// URI of the token introspection endpoint which can be used to validate opaque non-JWT tokens.
        /// </summary>
        public readonly string IntrospectionEndpointUri;
        /// <summary>
        /// URI of the JWKS certificate endpoint, which can be used for local JWT validation.
        /// </summary>
        public readonly string JwksEndpointUri;
        /// <summary>
        /// Configures how often are the JWKS certificates considered valid. The expiry interval has to be at least 60 seconds longer then the refresh interval specified in `jwksRefreshSeconds`. Defaults to 360 seconds.
        /// </summary>
        public readonly int JwksExpirySeconds;
        /// <summary>
        /// The minimum pause between two consecutive refreshes. When an unknown signing key is encountered the refresh is scheduled immediately, but will always wait for this minimum pause. Defaults to 1 second.
        /// </summary>
        public readonly int JwksMinRefreshPauseSeconds;
        /// <summary>
        /// Configures how often are the JWKS certificates refreshed. The refresh interval has to be at least 60 seconds shorter then the expiry interval specified in `jwksExpirySeconds`. Defaults to 300 seconds.
        /// </summary>
        public readonly int JwksRefreshSeconds;
        /// <summary>
        /// Maximum number of seconds the authenticated session remains valid without re-authentication. This enables Apache Kafka re-authentication feature, and causes sessions to expire when the access token expires. If the access token expires before max time or if max time is reached, the client has to re-authenticate, otherwise the server will drop the connection. Not set by default - the authenticated session does not expire when the access token expires.
        /// </summary>
        public readonly int MaxSecondsWithoutReauthentication;
        /// <summary>
        /// Trusted certificates for TLS connection to the OAuth server.
        /// </summary>
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafkaListenersOneOf0AuthenticationTlsTrustedCertificates> TlsTrustedCertificates;
        /// <summary>
        /// Authentication type. `oauth` type uses SASL OAUTHBEARER Authentication. `scram-sha-512` type uses SASL SCRAM-SHA-512 Authentication. `tls` type uses TLS Client Authentication. `tls` type is supported only on TLS listeners.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// URI of the User Info Endpoint to use as a fallback to obtaining the user id when the Introspection Endpoint does not return information that can be used for the user id. 
        /// </summary>
        public readonly string UserInfoEndpointUri;
        /// <summary>
        /// Name of the claim from the JWT authentication token, Introspection Endpoint response or User Info Endpoint response which will be used to extract the user id. Defaults to `sub`.
        /// </summary>
        public readonly string UserNameClaim;
        /// <summary>
        /// URI of the token issuer used for authentication.
        /// </summary>
        public readonly string ValidIssuerUri;
        /// <summary>
        /// Valid value for the `token_type` attribute returned by the Introspection Endpoint. No default value, and not checked by default.
        /// </summary>
        public readonly string ValidTokenType;

        [OutputConstructor]
        private KafkaSpecKafkaListenersOneOf0Authentication(
            bool accessTokenIsJwt,

            bool checkAccessTokenType,

            bool checkIssuer,

            string clientId,

            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafkaListenersOneOf0AuthenticationClientSecret clientSecret,

            bool disableTlsHostnameVerification,

            bool enableECDSA,

            string fallbackUserNameClaim,

            string fallbackUserNamePrefix,

            string introspectionEndpointUri,

            string jwksEndpointUri,

            int jwksExpirySeconds,

            int jwksMinRefreshPauseSeconds,

            int jwksRefreshSeconds,

            int maxSecondsWithoutReauthentication,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafkaListenersOneOf0AuthenticationTlsTrustedCertificates> tlsTrustedCertificates,

            string type,

            string userInfoEndpointUri,

            string userNameClaim,

            string validIssuerUri,

            string validTokenType)
        {
            AccessTokenIsJwt = accessTokenIsJwt;
            CheckAccessTokenType = checkAccessTokenType;
            CheckIssuer = checkIssuer;
            ClientId = clientId;
            ClientSecret = clientSecret;
            DisableTlsHostnameVerification = disableTlsHostnameVerification;
            EnableECDSA = enableECDSA;
            FallbackUserNameClaim = fallbackUserNameClaim;
            FallbackUserNamePrefix = fallbackUserNamePrefix;
            IntrospectionEndpointUri = introspectionEndpointUri;
            JwksEndpointUri = jwksEndpointUri;
            JwksExpirySeconds = jwksExpirySeconds;
            JwksMinRefreshPauseSeconds = jwksMinRefreshPauseSeconds;
            JwksRefreshSeconds = jwksRefreshSeconds;
            MaxSecondsWithoutReauthentication = maxSecondsWithoutReauthentication;
            TlsTrustedCertificates = tlsTrustedCertificates;
            Type = type;
            UserInfoEndpointUri = userInfoEndpointUri;
            UserNameClaim = userNameClaim;
            ValidIssuerUri = validIssuerUri;
            ValidTokenType = validTokenType;
        }
    }
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1
{

    [OutputType]
    public sealed class KafkaSpecKafkaTemplate
    {
        /// <summary>
        /// Template for Kafka bootstrap `Service`.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafkaTemplateBootstrapService BootstrapService;
        /// <summary>
        /// Template for Kafka broker `Service`.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafkaTemplateBrokersService BrokersService;
        /// <summary>
        /// Template for Kafka external bootstrap `Ingress`.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafkaTemplateExternalBootstrapIngress ExternalBootstrapIngress;
        /// <summary>
        /// Template for Kafka external bootstrap `Route`.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafkaTemplateExternalBootstrapRoute ExternalBootstrapRoute;
        /// <summary>
        /// Template for Kafka external bootstrap `Service`.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafkaTemplateExternalBootstrapService ExternalBootstrapService;
        /// <summary>
        /// Template for the Kafka init container.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafkaTemplateInitContainer InitContainer;
        /// <summary>
        /// Template for the Kafka broker container.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafkaTemplateKafkaContainer KafkaContainer;
        /// <summary>
        /// Template for Kafka per-pod `Ingress` used for access from outside of Kubernetes.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafkaTemplatePerPodIngress PerPodIngress;
        /// <summary>
        /// Template for Kafka per-pod `Routes` used for access from outside of OpenShift.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafkaTemplatePerPodRoute PerPodRoute;
        /// <summary>
        /// Template for Kafka per-pod `Services` used for access from outside of Kubernetes.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafkaTemplatePerPodService PerPodService;
        /// <summary>
        /// Template for all Kafka `PersistentVolumeClaims`.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafkaTemplatePersistentVolumeClaim PersistentVolumeClaim;
        /// <summary>
        /// Template for Kafka `Pods`.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafkaTemplatePod Pod;
        /// <summary>
        /// Template for Kafka `PodDisruptionBudget`.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafkaTemplatePodDisruptionBudget PodDisruptionBudget;
        /// <summary>
        /// Template for Kafka `StatefulSet`.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafkaTemplateStatefulset Statefulset;
        /// <summary>
        /// Template for the Kafka broker TLS sidecar container.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafkaTemplateTlsSidecarContainer TlsSidecarContainer;

        [OutputConstructor]
        private KafkaSpecKafkaTemplate(
            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafkaTemplateBootstrapService bootstrapService,

            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafkaTemplateBrokersService brokersService,

            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafkaTemplateExternalBootstrapIngress externalBootstrapIngress,

            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafkaTemplateExternalBootstrapRoute externalBootstrapRoute,

            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafkaTemplateExternalBootstrapService externalBootstrapService,

            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafkaTemplateInitContainer initContainer,

            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafkaTemplateKafkaContainer kafkaContainer,

            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafkaTemplatePerPodIngress perPodIngress,

            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafkaTemplatePerPodRoute perPodRoute,

            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafkaTemplatePerPodService perPodService,

            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafkaTemplatePersistentVolumeClaim persistentVolumeClaim,

            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafkaTemplatePod pod,

            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafkaTemplatePodDisruptionBudget podDisruptionBudget,

            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafkaTemplateStatefulset statefulset,

            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafkaTemplateTlsSidecarContainer tlsSidecarContainer)
        {
            BootstrapService = bootstrapService;
            BrokersService = brokersService;
            ExternalBootstrapIngress = externalBootstrapIngress;
            ExternalBootstrapRoute = externalBootstrapRoute;
            ExternalBootstrapService = externalBootstrapService;
            InitContainer = initContainer;
            KafkaContainer = kafkaContainer;
            PerPodIngress = perPodIngress;
            PerPodRoute = perPodRoute;
            PerPodService = perPodService;
            PersistentVolumeClaim = persistentVolumeClaim;
            Pod = pod;
            PodDisruptionBudget = podDisruptionBudget;
            Statefulset = statefulset;
            TlsSidecarContainer = tlsSidecarContainer;
        }
    }
}

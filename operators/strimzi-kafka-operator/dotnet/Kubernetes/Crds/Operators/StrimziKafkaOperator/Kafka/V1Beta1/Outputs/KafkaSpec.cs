// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1
{

    [OutputType]
    public sealed class KafkaSpec
    {
        /// <summary>
        /// Configuration of the clients certificate authority.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecClientsCa ClientsCa;
        /// <summary>
        /// Configuration of the cluster certificate authority.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecClusterCa ClusterCa;
        /// <summary>
        /// Configuration for Cruise Control deployment. Deploys a Cruise Control instance when specified.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecCruiseControl CruiseControl;
        /// <summary>
        /// Configuration of the Entity Operator.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecEntityOperator EntityOperator;
        /// <summary>
        /// Configuration for JmxTrans. When the property is present a JmxTrans deployment is created for gathering JMX metrics from each Kafka broker. For more information see https://github.com/jmxtrans/jmxtrans[JmxTrans GitHub].
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecJmxTrans JmxTrans;
        /// <summary>
        /// Configuration of the Kafka cluster.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafka Kafka;
        /// <summary>
        /// Configuration of the Kafka Exporter. Kafka Exporter can provide additional metrics, for example lag of consumer group at topic/partition.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafkaExporter KafkaExporter;
        /// <summary>
        /// A list of time windows for maintenance tasks (that is, certificates renewal). Each time window is defined by a cron expression.
        /// </summary>
        public readonly ImmutableArray<string> MaintenanceTimeWindows;
        /// <summary>
        /// Configuration of the Topic Operator.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecTopicOperator TopicOperator;
        /// <summary>
        /// Configuration of the ZooKeeper cluster.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecZookeeper Zookeeper;

        [OutputConstructor]
        private KafkaSpec(
            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecClientsCa clientsCa,

            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecClusterCa clusterCa,

            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecCruiseControl cruiseControl,

            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecEntityOperator entityOperator,

            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecJmxTrans jmxTrans,

            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafka kafka,

            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecKafkaExporter kafkaExporter,

            ImmutableArray<string> maintenanceTimeWindows,

            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecTopicOperator topicOperator,

            Pulumi.Kubernetes.Types.Outputs.Kafka.V1Beta1.KafkaSpecZookeeper zookeeper)
        {
            ClientsCa = clientsCa;
            ClusterCa = clusterCa;
            CruiseControl = cruiseControl;
            EntityOperator = entityOperator;
            JmxTrans = jmxTrans;
            Kafka = kafka;
            KafkaExporter = kafkaExporter;
            MaintenanceTimeWindows = maintenanceTimeWindows;
            TopicOperator = topicOperator;
            Zookeeper = zookeeper;
        }
    }
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Operator is the Schema for the operators API
type OperatorType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// OperatorSpec defines the desired state of Operator
	Spec *OperatorSpec `pulumi:"spec"`
	// OperatorStatus defines the observed state of Operator
	Status *OperatorStatus `pulumi:"status"`
}

// OperatorTypeInput is an input type that accepts OperatorTypeArgs and OperatorTypeOutput values.
// You can construct a concrete instance of `OperatorTypeInput` via:
//
//          OperatorTypeArgs{...}
type OperatorTypeInput interface {
	pulumi.Input

	ToOperatorTypeOutput() OperatorTypeOutput
	ToOperatorTypeOutputWithContext(context.Context) OperatorTypeOutput
}

// Operator is the Schema for the operators API
type OperatorTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// OperatorSpec defines the desired state of Operator
	Spec OperatorSpecPtrInput `pulumi:"spec"`
	// OperatorStatus defines the observed state of Operator
	Status OperatorStatusPtrInput `pulumi:"status"`
}

func (OperatorTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorType)(nil)).Elem()
}

func (i OperatorTypeArgs) ToOperatorTypeOutput() OperatorTypeOutput {
	return i.ToOperatorTypeOutputWithContext(context.Background())
}

func (i OperatorTypeArgs) ToOperatorTypeOutputWithContext(ctx context.Context) OperatorTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorTypeOutput)
}

// Operator is the Schema for the operators API
type OperatorTypeOutput struct{ *pulumi.OutputState }

func (OperatorTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorType)(nil)).Elem()
}

func (o OperatorTypeOutput) ToOperatorTypeOutput() OperatorTypeOutput {
	return o
}

func (o OperatorTypeOutput) ToOperatorTypeOutputWithContext(ctx context.Context) OperatorTypeOutput {
	return o
}

func (o OperatorTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o OperatorTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o OperatorTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v OperatorType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// OperatorSpec defines the desired state of Operator
func (o OperatorTypeOutput) Spec() OperatorSpecPtrOutput {
	return o.ApplyT(func(v OperatorType) *OperatorSpec { return v.Spec }).(OperatorSpecPtrOutput)
}

// OperatorStatus defines the observed state of Operator
func (o OperatorTypeOutput) Status() OperatorStatusPtrOutput {
	return o.ApplyT(func(v OperatorType) *OperatorStatus { return v.Status }).(OperatorStatusPtrOutput)
}

type OperatorMetadata struct {
}

// OperatorMetadataInput is an input type that accepts OperatorMetadataArgs and OperatorMetadataOutput values.
// You can construct a concrete instance of `OperatorMetadataInput` via:
//
//          OperatorMetadataArgs{...}
type OperatorMetadataInput interface {
	pulumi.Input

	ToOperatorMetadataOutput() OperatorMetadataOutput
	ToOperatorMetadataOutputWithContext(context.Context) OperatorMetadataOutput
}

type OperatorMetadataArgs struct {
}

func (OperatorMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorMetadata)(nil)).Elem()
}

func (i OperatorMetadataArgs) ToOperatorMetadataOutput() OperatorMetadataOutput {
	return i.ToOperatorMetadataOutputWithContext(context.Background())
}

func (i OperatorMetadataArgs) ToOperatorMetadataOutputWithContext(ctx context.Context) OperatorMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorMetadataOutput)
}

type OperatorMetadataOutput struct{ *pulumi.OutputState }

func (OperatorMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorMetadata)(nil)).Elem()
}

func (o OperatorMetadataOutput) ToOperatorMetadataOutput() OperatorMetadataOutput {
	return o
}

func (o OperatorMetadataOutput) ToOperatorMetadataOutputWithContext(ctx context.Context) OperatorMetadataOutput {
	return o
}

// OperatorSpec defines the desired state of Operator
type OperatorSpec struct {
	Core  *OperatorSpecCore  `pulumi:"core"`
	Tools *OperatorSpecTools `pulumi:"tools"`
}

// OperatorSpecInput is an input type that accepts OperatorSpecArgs and OperatorSpecOutput values.
// You can construct a concrete instance of `OperatorSpecInput` via:
//
//          OperatorSpecArgs{...}
type OperatorSpecInput interface {
	pulumi.Input

	ToOperatorSpecOutput() OperatorSpecOutput
	ToOperatorSpecOutputWithContext(context.Context) OperatorSpecOutput
}

// OperatorSpec defines the desired state of Operator
type OperatorSpecArgs struct {
	Core  OperatorSpecCorePtrInput  `pulumi:"core"`
	Tools OperatorSpecToolsPtrInput `pulumi:"tools"`
}

func (OperatorSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorSpec)(nil)).Elem()
}

func (i OperatorSpecArgs) ToOperatorSpecOutput() OperatorSpecOutput {
	return i.ToOperatorSpecOutputWithContext(context.Background())
}

func (i OperatorSpecArgs) ToOperatorSpecOutputWithContext(ctx context.Context) OperatorSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorSpecOutput)
}

func (i OperatorSpecArgs) ToOperatorSpecPtrOutput() OperatorSpecPtrOutput {
	return i.ToOperatorSpecPtrOutputWithContext(context.Background())
}

func (i OperatorSpecArgs) ToOperatorSpecPtrOutputWithContext(ctx context.Context) OperatorSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorSpecOutput).ToOperatorSpecPtrOutputWithContext(ctx)
}

// OperatorSpecPtrInput is an input type that accepts OperatorSpecArgs, OperatorSpecPtr and OperatorSpecPtrOutput values.
// You can construct a concrete instance of `OperatorSpecPtrInput` via:
//
//          OperatorSpecArgs{...}
//
//  or:
//
//          nil
type OperatorSpecPtrInput interface {
	pulumi.Input

	ToOperatorSpecPtrOutput() OperatorSpecPtrOutput
	ToOperatorSpecPtrOutputWithContext(context.Context) OperatorSpecPtrOutput
}

type operatorSpecPtrType OperatorSpecArgs

func OperatorSpecPtr(v *OperatorSpecArgs) OperatorSpecPtrInput {
	return (*operatorSpecPtrType)(v)
}

func (*operatorSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorSpec)(nil)).Elem()
}

func (i *operatorSpecPtrType) ToOperatorSpecPtrOutput() OperatorSpecPtrOutput {
	return i.ToOperatorSpecPtrOutputWithContext(context.Background())
}

func (i *operatorSpecPtrType) ToOperatorSpecPtrOutputWithContext(ctx context.Context) OperatorSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorSpecPtrOutput)
}

// OperatorSpec defines the desired state of Operator
type OperatorSpecOutput struct{ *pulumi.OutputState }

func (OperatorSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorSpec)(nil)).Elem()
}

func (o OperatorSpecOutput) ToOperatorSpecOutput() OperatorSpecOutput {
	return o
}

func (o OperatorSpecOutput) ToOperatorSpecOutputWithContext(ctx context.Context) OperatorSpecOutput {
	return o
}

func (o OperatorSpecOutput) ToOperatorSpecPtrOutput() OperatorSpecPtrOutput {
	return o.ToOperatorSpecPtrOutputWithContext(context.Background())
}

func (o OperatorSpecOutput) ToOperatorSpecPtrOutputWithContext(ctx context.Context) OperatorSpecPtrOutput {
	return o.ApplyT(func(v OperatorSpec) *OperatorSpec {
		return &v
	}).(OperatorSpecPtrOutput)
}
func (o OperatorSpecOutput) Core() OperatorSpecCorePtrOutput {
	return o.ApplyT(func(v OperatorSpec) *OperatorSpecCore { return v.Core }).(OperatorSpecCorePtrOutput)
}

func (o OperatorSpecOutput) Tools() OperatorSpecToolsPtrOutput {
	return o.ApplyT(func(v OperatorSpec) *OperatorSpecTools { return v.Tools }).(OperatorSpecToolsPtrOutput)
}

type OperatorSpecPtrOutput struct{ *pulumi.OutputState }

func (OperatorSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorSpec)(nil)).Elem()
}

func (o OperatorSpecPtrOutput) ToOperatorSpecPtrOutput() OperatorSpecPtrOutput {
	return o
}

func (o OperatorSpecPtrOutput) ToOperatorSpecPtrOutputWithContext(ctx context.Context) OperatorSpecPtrOutput {
	return o
}

func (o OperatorSpecPtrOutput) Elem() OperatorSpecOutput {
	return o.ApplyT(func(v *OperatorSpec) OperatorSpec { return *v }).(OperatorSpecOutput)
}

func (o OperatorSpecPtrOutput) Core() OperatorSpecCorePtrOutput {
	return o.ApplyT(func(v *OperatorSpec) *OperatorSpecCore {
		if v == nil {
			return nil
		}
		return v.Core
	}).(OperatorSpecCorePtrOutput)
}

func (o OperatorSpecPtrOutput) Tools() OperatorSpecToolsPtrOutput {
	return o.ApplyT(func(v *OperatorSpec) *OperatorSpecTools {
		if v == nil {
			return nil
		}
		return v.Tools
	}).(OperatorSpecToolsPtrOutput)
}

type OperatorSpecCore struct {
	Deployable *OperatorSpecCoreDeployable `pulumi:"deployable"`
}

// OperatorSpecCoreInput is an input type that accepts OperatorSpecCoreArgs and OperatorSpecCoreOutput values.
// You can construct a concrete instance of `OperatorSpecCoreInput` via:
//
//          OperatorSpecCoreArgs{...}
type OperatorSpecCoreInput interface {
	pulumi.Input

	ToOperatorSpecCoreOutput() OperatorSpecCoreOutput
	ToOperatorSpecCoreOutputWithContext(context.Context) OperatorSpecCoreOutput
}

type OperatorSpecCoreArgs struct {
	Deployable OperatorSpecCoreDeployablePtrInput `pulumi:"deployable"`
}

func (OperatorSpecCoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorSpecCore)(nil)).Elem()
}

func (i OperatorSpecCoreArgs) ToOperatorSpecCoreOutput() OperatorSpecCoreOutput {
	return i.ToOperatorSpecCoreOutputWithContext(context.Background())
}

func (i OperatorSpecCoreArgs) ToOperatorSpecCoreOutputWithContext(ctx context.Context) OperatorSpecCoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorSpecCoreOutput)
}

func (i OperatorSpecCoreArgs) ToOperatorSpecCorePtrOutput() OperatorSpecCorePtrOutput {
	return i.ToOperatorSpecCorePtrOutputWithContext(context.Background())
}

func (i OperatorSpecCoreArgs) ToOperatorSpecCorePtrOutputWithContext(ctx context.Context) OperatorSpecCorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorSpecCoreOutput).ToOperatorSpecCorePtrOutputWithContext(ctx)
}

// OperatorSpecCorePtrInput is an input type that accepts OperatorSpecCoreArgs, OperatorSpecCorePtr and OperatorSpecCorePtrOutput values.
// You can construct a concrete instance of `OperatorSpecCorePtrInput` via:
//
//          OperatorSpecCoreArgs{...}
//
//  or:
//
//          nil
type OperatorSpecCorePtrInput interface {
	pulumi.Input

	ToOperatorSpecCorePtrOutput() OperatorSpecCorePtrOutput
	ToOperatorSpecCorePtrOutputWithContext(context.Context) OperatorSpecCorePtrOutput
}

type operatorSpecCorePtrType OperatorSpecCoreArgs

func OperatorSpecCorePtr(v *OperatorSpecCoreArgs) OperatorSpecCorePtrInput {
	return (*operatorSpecCorePtrType)(v)
}

func (*operatorSpecCorePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorSpecCore)(nil)).Elem()
}

func (i *operatorSpecCorePtrType) ToOperatorSpecCorePtrOutput() OperatorSpecCorePtrOutput {
	return i.ToOperatorSpecCorePtrOutputWithContext(context.Background())
}

func (i *operatorSpecCorePtrType) ToOperatorSpecCorePtrOutputWithContext(ctx context.Context) OperatorSpecCorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorSpecCorePtrOutput)
}

type OperatorSpecCoreOutput struct{ *pulumi.OutputState }

func (OperatorSpecCoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorSpecCore)(nil)).Elem()
}

func (o OperatorSpecCoreOutput) ToOperatorSpecCoreOutput() OperatorSpecCoreOutput {
	return o
}

func (o OperatorSpecCoreOutput) ToOperatorSpecCoreOutputWithContext(ctx context.Context) OperatorSpecCoreOutput {
	return o
}

func (o OperatorSpecCoreOutput) ToOperatorSpecCorePtrOutput() OperatorSpecCorePtrOutput {
	return o.ToOperatorSpecCorePtrOutputWithContext(context.Background())
}

func (o OperatorSpecCoreOutput) ToOperatorSpecCorePtrOutputWithContext(ctx context.Context) OperatorSpecCorePtrOutput {
	return o.ApplyT(func(v OperatorSpecCore) *OperatorSpecCore {
		return &v
	}).(OperatorSpecCorePtrOutput)
}
func (o OperatorSpecCoreOutput) Deployable() OperatorSpecCoreDeployablePtrOutput {
	return o.ApplyT(func(v OperatorSpecCore) *OperatorSpecCoreDeployable { return v.Deployable }).(OperatorSpecCoreDeployablePtrOutput)
}

type OperatorSpecCorePtrOutput struct{ *pulumi.OutputState }

func (OperatorSpecCorePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorSpecCore)(nil)).Elem()
}

func (o OperatorSpecCorePtrOutput) ToOperatorSpecCorePtrOutput() OperatorSpecCorePtrOutput {
	return o
}

func (o OperatorSpecCorePtrOutput) ToOperatorSpecCorePtrOutputWithContext(ctx context.Context) OperatorSpecCorePtrOutput {
	return o
}

func (o OperatorSpecCorePtrOutput) Elem() OperatorSpecCoreOutput {
	return o.ApplyT(func(v *OperatorSpecCore) OperatorSpecCore { return *v }).(OperatorSpecCoreOutput)
}

func (o OperatorSpecCorePtrOutput) Deployable() OperatorSpecCoreDeployablePtrOutput {
	return o.ApplyT(func(v *OperatorSpecCore) *OperatorSpecCoreDeployable {
		if v == nil {
			return nil
		}
		return v.Deployable
	}).(OperatorSpecCoreDeployablePtrOutput)
}

type OperatorSpecCoreDeployable struct {
	Args    []string `pulumi:"args"`
	Command []string `pulumi:"command"`
	Enabled *bool    `pulumi:"enabled"`
	Image   *string  `pulumi:"image"`
	Name    *string  `pulumi:"name"`
}

// OperatorSpecCoreDeployableInput is an input type that accepts OperatorSpecCoreDeployableArgs and OperatorSpecCoreDeployableOutput values.
// You can construct a concrete instance of `OperatorSpecCoreDeployableInput` via:
//
//          OperatorSpecCoreDeployableArgs{...}
type OperatorSpecCoreDeployableInput interface {
	pulumi.Input

	ToOperatorSpecCoreDeployableOutput() OperatorSpecCoreDeployableOutput
	ToOperatorSpecCoreDeployableOutputWithContext(context.Context) OperatorSpecCoreDeployableOutput
}

type OperatorSpecCoreDeployableArgs struct {
	Args    pulumi.StringArrayInput `pulumi:"args"`
	Command pulumi.StringArrayInput `pulumi:"command"`
	Enabled pulumi.BoolPtrInput     `pulumi:"enabled"`
	Image   pulumi.StringPtrInput   `pulumi:"image"`
	Name    pulumi.StringPtrInput   `pulumi:"name"`
}

func (OperatorSpecCoreDeployableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorSpecCoreDeployable)(nil)).Elem()
}

func (i OperatorSpecCoreDeployableArgs) ToOperatorSpecCoreDeployableOutput() OperatorSpecCoreDeployableOutput {
	return i.ToOperatorSpecCoreDeployableOutputWithContext(context.Background())
}

func (i OperatorSpecCoreDeployableArgs) ToOperatorSpecCoreDeployableOutputWithContext(ctx context.Context) OperatorSpecCoreDeployableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorSpecCoreDeployableOutput)
}

func (i OperatorSpecCoreDeployableArgs) ToOperatorSpecCoreDeployablePtrOutput() OperatorSpecCoreDeployablePtrOutput {
	return i.ToOperatorSpecCoreDeployablePtrOutputWithContext(context.Background())
}

func (i OperatorSpecCoreDeployableArgs) ToOperatorSpecCoreDeployablePtrOutputWithContext(ctx context.Context) OperatorSpecCoreDeployablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorSpecCoreDeployableOutput).ToOperatorSpecCoreDeployablePtrOutputWithContext(ctx)
}

// OperatorSpecCoreDeployablePtrInput is an input type that accepts OperatorSpecCoreDeployableArgs, OperatorSpecCoreDeployablePtr and OperatorSpecCoreDeployablePtrOutput values.
// You can construct a concrete instance of `OperatorSpecCoreDeployablePtrInput` via:
//
//          OperatorSpecCoreDeployableArgs{...}
//
//  or:
//
//          nil
type OperatorSpecCoreDeployablePtrInput interface {
	pulumi.Input

	ToOperatorSpecCoreDeployablePtrOutput() OperatorSpecCoreDeployablePtrOutput
	ToOperatorSpecCoreDeployablePtrOutputWithContext(context.Context) OperatorSpecCoreDeployablePtrOutput
}

type operatorSpecCoreDeployablePtrType OperatorSpecCoreDeployableArgs

func OperatorSpecCoreDeployablePtr(v *OperatorSpecCoreDeployableArgs) OperatorSpecCoreDeployablePtrInput {
	return (*operatorSpecCoreDeployablePtrType)(v)
}

func (*operatorSpecCoreDeployablePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorSpecCoreDeployable)(nil)).Elem()
}

func (i *operatorSpecCoreDeployablePtrType) ToOperatorSpecCoreDeployablePtrOutput() OperatorSpecCoreDeployablePtrOutput {
	return i.ToOperatorSpecCoreDeployablePtrOutputWithContext(context.Background())
}

func (i *operatorSpecCoreDeployablePtrType) ToOperatorSpecCoreDeployablePtrOutputWithContext(ctx context.Context) OperatorSpecCoreDeployablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorSpecCoreDeployablePtrOutput)
}

type OperatorSpecCoreDeployableOutput struct{ *pulumi.OutputState }

func (OperatorSpecCoreDeployableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorSpecCoreDeployable)(nil)).Elem()
}

func (o OperatorSpecCoreDeployableOutput) ToOperatorSpecCoreDeployableOutput() OperatorSpecCoreDeployableOutput {
	return o
}

func (o OperatorSpecCoreDeployableOutput) ToOperatorSpecCoreDeployableOutputWithContext(ctx context.Context) OperatorSpecCoreDeployableOutput {
	return o
}

func (o OperatorSpecCoreDeployableOutput) ToOperatorSpecCoreDeployablePtrOutput() OperatorSpecCoreDeployablePtrOutput {
	return o.ToOperatorSpecCoreDeployablePtrOutputWithContext(context.Background())
}

func (o OperatorSpecCoreDeployableOutput) ToOperatorSpecCoreDeployablePtrOutputWithContext(ctx context.Context) OperatorSpecCoreDeployablePtrOutput {
	return o.ApplyT(func(v OperatorSpecCoreDeployable) *OperatorSpecCoreDeployable {
		return &v
	}).(OperatorSpecCoreDeployablePtrOutput)
}
func (o OperatorSpecCoreDeployableOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OperatorSpecCoreDeployable) []string { return v.Args }).(pulumi.StringArrayOutput)
}

func (o OperatorSpecCoreDeployableOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OperatorSpecCoreDeployable) []string { return v.Command }).(pulumi.StringArrayOutput)
}

func (o OperatorSpecCoreDeployableOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OperatorSpecCoreDeployable) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o OperatorSpecCoreDeployableOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorSpecCoreDeployable) *string { return v.Image }).(pulumi.StringPtrOutput)
}

func (o OperatorSpecCoreDeployableOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorSpecCoreDeployable) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type OperatorSpecCoreDeployablePtrOutput struct{ *pulumi.OutputState }

func (OperatorSpecCoreDeployablePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorSpecCoreDeployable)(nil)).Elem()
}

func (o OperatorSpecCoreDeployablePtrOutput) ToOperatorSpecCoreDeployablePtrOutput() OperatorSpecCoreDeployablePtrOutput {
	return o
}

func (o OperatorSpecCoreDeployablePtrOutput) ToOperatorSpecCoreDeployablePtrOutputWithContext(ctx context.Context) OperatorSpecCoreDeployablePtrOutput {
	return o
}

func (o OperatorSpecCoreDeployablePtrOutput) Elem() OperatorSpecCoreDeployableOutput {
	return o.ApplyT(func(v *OperatorSpecCoreDeployable) OperatorSpecCoreDeployable { return *v }).(OperatorSpecCoreDeployableOutput)
}

func (o OperatorSpecCoreDeployablePtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OperatorSpecCoreDeployable) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

func (o OperatorSpecCoreDeployablePtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OperatorSpecCoreDeployable) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

func (o OperatorSpecCoreDeployablePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OperatorSpecCoreDeployable) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o OperatorSpecCoreDeployablePtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorSpecCoreDeployable) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

func (o OperatorSpecCoreDeployablePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorSpecCoreDeployable) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type OperatorSpecTools struct {
	Assembler  *OperatorSpecToolsAssembler  `pulumi:"assembler"`
	Discoverer *OperatorSpecToolsDiscoverer `pulumi:"discoverer"`
}

// OperatorSpecToolsInput is an input type that accepts OperatorSpecToolsArgs and OperatorSpecToolsOutput values.
// You can construct a concrete instance of `OperatorSpecToolsInput` via:
//
//          OperatorSpecToolsArgs{...}
type OperatorSpecToolsInput interface {
	pulumi.Input

	ToOperatorSpecToolsOutput() OperatorSpecToolsOutput
	ToOperatorSpecToolsOutputWithContext(context.Context) OperatorSpecToolsOutput
}

type OperatorSpecToolsArgs struct {
	Assembler  OperatorSpecToolsAssemblerPtrInput  `pulumi:"assembler"`
	Discoverer OperatorSpecToolsDiscovererPtrInput `pulumi:"discoverer"`
}

func (OperatorSpecToolsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorSpecTools)(nil)).Elem()
}

func (i OperatorSpecToolsArgs) ToOperatorSpecToolsOutput() OperatorSpecToolsOutput {
	return i.ToOperatorSpecToolsOutputWithContext(context.Background())
}

func (i OperatorSpecToolsArgs) ToOperatorSpecToolsOutputWithContext(ctx context.Context) OperatorSpecToolsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorSpecToolsOutput)
}

func (i OperatorSpecToolsArgs) ToOperatorSpecToolsPtrOutput() OperatorSpecToolsPtrOutput {
	return i.ToOperatorSpecToolsPtrOutputWithContext(context.Background())
}

func (i OperatorSpecToolsArgs) ToOperatorSpecToolsPtrOutputWithContext(ctx context.Context) OperatorSpecToolsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorSpecToolsOutput).ToOperatorSpecToolsPtrOutputWithContext(ctx)
}

// OperatorSpecToolsPtrInput is an input type that accepts OperatorSpecToolsArgs, OperatorSpecToolsPtr and OperatorSpecToolsPtrOutput values.
// You can construct a concrete instance of `OperatorSpecToolsPtrInput` via:
//
//          OperatorSpecToolsArgs{...}
//
//  or:
//
//          nil
type OperatorSpecToolsPtrInput interface {
	pulumi.Input

	ToOperatorSpecToolsPtrOutput() OperatorSpecToolsPtrOutput
	ToOperatorSpecToolsPtrOutputWithContext(context.Context) OperatorSpecToolsPtrOutput
}

type operatorSpecToolsPtrType OperatorSpecToolsArgs

func OperatorSpecToolsPtr(v *OperatorSpecToolsArgs) OperatorSpecToolsPtrInput {
	return (*operatorSpecToolsPtrType)(v)
}

func (*operatorSpecToolsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorSpecTools)(nil)).Elem()
}

func (i *operatorSpecToolsPtrType) ToOperatorSpecToolsPtrOutput() OperatorSpecToolsPtrOutput {
	return i.ToOperatorSpecToolsPtrOutputWithContext(context.Background())
}

func (i *operatorSpecToolsPtrType) ToOperatorSpecToolsPtrOutputWithContext(ctx context.Context) OperatorSpecToolsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorSpecToolsPtrOutput)
}

type OperatorSpecToolsOutput struct{ *pulumi.OutputState }

func (OperatorSpecToolsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorSpecTools)(nil)).Elem()
}

func (o OperatorSpecToolsOutput) ToOperatorSpecToolsOutput() OperatorSpecToolsOutput {
	return o
}

func (o OperatorSpecToolsOutput) ToOperatorSpecToolsOutputWithContext(ctx context.Context) OperatorSpecToolsOutput {
	return o
}

func (o OperatorSpecToolsOutput) ToOperatorSpecToolsPtrOutput() OperatorSpecToolsPtrOutput {
	return o.ToOperatorSpecToolsPtrOutputWithContext(context.Background())
}

func (o OperatorSpecToolsOutput) ToOperatorSpecToolsPtrOutputWithContext(ctx context.Context) OperatorSpecToolsPtrOutput {
	return o.ApplyT(func(v OperatorSpecTools) *OperatorSpecTools {
		return &v
	}).(OperatorSpecToolsPtrOutput)
}
func (o OperatorSpecToolsOutput) Assembler() OperatorSpecToolsAssemblerPtrOutput {
	return o.ApplyT(func(v OperatorSpecTools) *OperatorSpecToolsAssembler { return v.Assembler }).(OperatorSpecToolsAssemblerPtrOutput)
}

func (o OperatorSpecToolsOutput) Discoverer() OperatorSpecToolsDiscovererPtrOutput {
	return o.ApplyT(func(v OperatorSpecTools) *OperatorSpecToolsDiscoverer { return v.Discoverer }).(OperatorSpecToolsDiscovererPtrOutput)
}

type OperatorSpecToolsPtrOutput struct{ *pulumi.OutputState }

func (OperatorSpecToolsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorSpecTools)(nil)).Elem()
}

func (o OperatorSpecToolsPtrOutput) ToOperatorSpecToolsPtrOutput() OperatorSpecToolsPtrOutput {
	return o
}

func (o OperatorSpecToolsPtrOutput) ToOperatorSpecToolsPtrOutputWithContext(ctx context.Context) OperatorSpecToolsPtrOutput {
	return o
}

func (o OperatorSpecToolsPtrOutput) Elem() OperatorSpecToolsOutput {
	return o.ApplyT(func(v *OperatorSpecTools) OperatorSpecTools { return *v }).(OperatorSpecToolsOutput)
}

func (o OperatorSpecToolsPtrOutput) Assembler() OperatorSpecToolsAssemblerPtrOutput {
	return o.ApplyT(func(v *OperatorSpecTools) *OperatorSpecToolsAssembler {
		if v == nil {
			return nil
		}
		return v.Assembler
	}).(OperatorSpecToolsAssemblerPtrOutput)
}

func (o OperatorSpecToolsPtrOutput) Discoverer() OperatorSpecToolsDiscovererPtrOutput {
	return o.ApplyT(func(v *OperatorSpecTools) *OperatorSpecToolsDiscoverer {
		if v == nil {
			return nil
		}
		return v.Discoverer
	}).(OperatorSpecToolsDiscovererPtrOutput)
}

type OperatorSpecToolsAssembler struct {
	Args    []string `pulumi:"args"`
	Command []string `pulumi:"command"`
	Enabled *bool    `pulumi:"enabled"`
	Image   *string  `pulumi:"image"`
	Name    *string  `pulumi:"name"`
}

// OperatorSpecToolsAssemblerInput is an input type that accepts OperatorSpecToolsAssemblerArgs and OperatorSpecToolsAssemblerOutput values.
// You can construct a concrete instance of `OperatorSpecToolsAssemblerInput` via:
//
//          OperatorSpecToolsAssemblerArgs{...}
type OperatorSpecToolsAssemblerInput interface {
	pulumi.Input

	ToOperatorSpecToolsAssemblerOutput() OperatorSpecToolsAssemblerOutput
	ToOperatorSpecToolsAssemblerOutputWithContext(context.Context) OperatorSpecToolsAssemblerOutput
}

type OperatorSpecToolsAssemblerArgs struct {
	Args    pulumi.StringArrayInput `pulumi:"args"`
	Command pulumi.StringArrayInput `pulumi:"command"`
	Enabled pulumi.BoolPtrInput     `pulumi:"enabled"`
	Image   pulumi.StringPtrInput   `pulumi:"image"`
	Name    pulumi.StringPtrInput   `pulumi:"name"`
}

func (OperatorSpecToolsAssemblerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorSpecToolsAssembler)(nil)).Elem()
}

func (i OperatorSpecToolsAssemblerArgs) ToOperatorSpecToolsAssemblerOutput() OperatorSpecToolsAssemblerOutput {
	return i.ToOperatorSpecToolsAssemblerOutputWithContext(context.Background())
}

func (i OperatorSpecToolsAssemblerArgs) ToOperatorSpecToolsAssemblerOutputWithContext(ctx context.Context) OperatorSpecToolsAssemblerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorSpecToolsAssemblerOutput)
}

func (i OperatorSpecToolsAssemblerArgs) ToOperatorSpecToolsAssemblerPtrOutput() OperatorSpecToolsAssemblerPtrOutput {
	return i.ToOperatorSpecToolsAssemblerPtrOutputWithContext(context.Background())
}

func (i OperatorSpecToolsAssemblerArgs) ToOperatorSpecToolsAssemblerPtrOutputWithContext(ctx context.Context) OperatorSpecToolsAssemblerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorSpecToolsAssemblerOutput).ToOperatorSpecToolsAssemblerPtrOutputWithContext(ctx)
}

// OperatorSpecToolsAssemblerPtrInput is an input type that accepts OperatorSpecToolsAssemblerArgs, OperatorSpecToolsAssemblerPtr and OperatorSpecToolsAssemblerPtrOutput values.
// You can construct a concrete instance of `OperatorSpecToolsAssemblerPtrInput` via:
//
//          OperatorSpecToolsAssemblerArgs{...}
//
//  or:
//
//          nil
type OperatorSpecToolsAssemblerPtrInput interface {
	pulumi.Input

	ToOperatorSpecToolsAssemblerPtrOutput() OperatorSpecToolsAssemblerPtrOutput
	ToOperatorSpecToolsAssemblerPtrOutputWithContext(context.Context) OperatorSpecToolsAssemblerPtrOutput
}

type operatorSpecToolsAssemblerPtrType OperatorSpecToolsAssemblerArgs

func OperatorSpecToolsAssemblerPtr(v *OperatorSpecToolsAssemblerArgs) OperatorSpecToolsAssemblerPtrInput {
	return (*operatorSpecToolsAssemblerPtrType)(v)
}

func (*operatorSpecToolsAssemblerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorSpecToolsAssembler)(nil)).Elem()
}

func (i *operatorSpecToolsAssemblerPtrType) ToOperatorSpecToolsAssemblerPtrOutput() OperatorSpecToolsAssemblerPtrOutput {
	return i.ToOperatorSpecToolsAssemblerPtrOutputWithContext(context.Background())
}

func (i *operatorSpecToolsAssemblerPtrType) ToOperatorSpecToolsAssemblerPtrOutputWithContext(ctx context.Context) OperatorSpecToolsAssemblerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorSpecToolsAssemblerPtrOutput)
}

type OperatorSpecToolsAssemblerOutput struct{ *pulumi.OutputState }

func (OperatorSpecToolsAssemblerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorSpecToolsAssembler)(nil)).Elem()
}

func (o OperatorSpecToolsAssemblerOutput) ToOperatorSpecToolsAssemblerOutput() OperatorSpecToolsAssemblerOutput {
	return o
}

func (o OperatorSpecToolsAssemblerOutput) ToOperatorSpecToolsAssemblerOutputWithContext(ctx context.Context) OperatorSpecToolsAssemblerOutput {
	return o
}

func (o OperatorSpecToolsAssemblerOutput) ToOperatorSpecToolsAssemblerPtrOutput() OperatorSpecToolsAssemblerPtrOutput {
	return o.ToOperatorSpecToolsAssemblerPtrOutputWithContext(context.Background())
}

func (o OperatorSpecToolsAssemblerOutput) ToOperatorSpecToolsAssemblerPtrOutputWithContext(ctx context.Context) OperatorSpecToolsAssemblerPtrOutput {
	return o.ApplyT(func(v OperatorSpecToolsAssembler) *OperatorSpecToolsAssembler {
		return &v
	}).(OperatorSpecToolsAssemblerPtrOutput)
}
func (o OperatorSpecToolsAssemblerOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OperatorSpecToolsAssembler) []string { return v.Args }).(pulumi.StringArrayOutput)
}

func (o OperatorSpecToolsAssemblerOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OperatorSpecToolsAssembler) []string { return v.Command }).(pulumi.StringArrayOutput)
}

func (o OperatorSpecToolsAssemblerOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OperatorSpecToolsAssembler) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o OperatorSpecToolsAssemblerOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorSpecToolsAssembler) *string { return v.Image }).(pulumi.StringPtrOutput)
}

func (o OperatorSpecToolsAssemblerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorSpecToolsAssembler) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type OperatorSpecToolsAssemblerPtrOutput struct{ *pulumi.OutputState }

func (OperatorSpecToolsAssemblerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorSpecToolsAssembler)(nil)).Elem()
}

func (o OperatorSpecToolsAssemblerPtrOutput) ToOperatorSpecToolsAssemblerPtrOutput() OperatorSpecToolsAssemblerPtrOutput {
	return o
}

func (o OperatorSpecToolsAssemblerPtrOutput) ToOperatorSpecToolsAssemblerPtrOutputWithContext(ctx context.Context) OperatorSpecToolsAssemblerPtrOutput {
	return o
}

func (o OperatorSpecToolsAssemblerPtrOutput) Elem() OperatorSpecToolsAssemblerOutput {
	return o.ApplyT(func(v *OperatorSpecToolsAssembler) OperatorSpecToolsAssembler { return *v }).(OperatorSpecToolsAssemblerOutput)
}

func (o OperatorSpecToolsAssemblerPtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OperatorSpecToolsAssembler) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

func (o OperatorSpecToolsAssemblerPtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OperatorSpecToolsAssembler) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

func (o OperatorSpecToolsAssemblerPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OperatorSpecToolsAssembler) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o OperatorSpecToolsAssemblerPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorSpecToolsAssembler) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

func (o OperatorSpecToolsAssemblerPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorSpecToolsAssembler) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type OperatorSpecToolsDiscoverer struct {
	Args             []string                              `pulumi:"args"`
	Clustername      string                                `pulumi:"clustername"`
	Clusternamespace string                                `pulumi:"clusternamespace"`
	Command          []string                              `pulumi:"command"`
	Enabled          *bool                                 `pulumi:"enabled"`
	Hubconfig        *OperatorSpecToolsDiscovererHubconfig `pulumi:"hubconfig"`
	Image            *string                               `pulumi:"image"`
	Name             *string                               `pulumi:"name"`
}

// OperatorSpecToolsDiscovererInput is an input type that accepts OperatorSpecToolsDiscovererArgs and OperatorSpecToolsDiscovererOutput values.
// You can construct a concrete instance of `OperatorSpecToolsDiscovererInput` via:
//
//          OperatorSpecToolsDiscovererArgs{...}
type OperatorSpecToolsDiscovererInput interface {
	pulumi.Input

	ToOperatorSpecToolsDiscovererOutput() OperatorSpecToolsDiscovererOutput
	ToOperatorSpecToolsDiscovererOutputWithContext(context.Context) OperatorSpecToolsDiscovererOutput
}

type OperatorSpecToolsDiscovererArgs struct {
	Args             pulumi.StringArrayInput                      `pulumi:"args"`
	Clustername      pulumi.StringInput                           `pulumi:"clustername"`
	Clusternamespace pulumi.StringInput                           `pulumi:"clusternamespace"`
	Command          pulumi.StringArrayInput                      `pulumi:"command"`
	Enabled          pulumi.BoolPtrInput                          `pulumi:"enabled"`
	Hubconfig        OperatorSpecToolsDiscovererHubconfigPtrInput `pulumi:"hubconfig"`
	Image            pulumi.StringPtrInput                        `pulumi:"image"`
	Name             pulumi.StringPtrInput                        `pulumi:"name"`
}

func (OperatorSpecToolsDiscovererArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorSpecToolsDiscoverer)(nil)).Elem()
}

func (i OperatorSpecToolsDiscovererArgs) ToOperatorSpecToolsDiscovererOutput() OperatorSpecToolsDiscovererOutput {
	return i.ToOperatorSpecToolsDiscovererOutputWithContext(context.Background())
}

func (i OperatorSpecToolsDiscovererArgs) ToOperatorSpecToolsDiscovererOutputWithContext(ctx context.Context) OperatorSpecToolsDiscovererOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorSpecToolsDiscovererOutput)
}

func (i OperatorSpecToolsDiscovererArgs) ToOperatorSpecToolsDiscovererPtrOutput() OperatorSpecToolsDiscovererPtrOutput {
	return i.ToOperatorSpecToolsDiscovererPtrOutputWithContext(context.Background())
}

func (i OperatorSpecToolsDiscovererArgs) ToOperatorSpecToolsDiscovererPtrOutputWithContext(ctx context.Context) OperatorSpecToolsDiscovererPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorSpecToolsDiscovererOutput).ToOperatorSpecToolsDiscovererPtrOutputWithContext(ctx)
}

// OperatorSpecToolsDiscovererPtrInput is an input type that accepts OperatorSpecToolsDiscovererArgs, OperatorSpecToolsDiscovererPtr and OperatorSpecToolsDiscovererPtrOutput values.
// You can construct a concrete instance of `OperatorSpecToolsDiscovererPtrInput` via:
//
//          OperatorSpecToolsDiscovererArgs{...}
//
//  or:
//
//          nil
type OperatorSpecToolsDiscovererPtrInput interface {
	pulumi.Input

	ToOperatorSpecToolsDiscovererPtrOutput() OperatorSpecToolsDiscovererPtrOutput
	ToOperatorSpecToolsDiscovererPtrOutputWithContext(context.Context) OperatorSpecToolsDiscovererPtrOutput
}

type operatorSpecToolsDiscovererPtrType OperatorSpecToolsDiscovererArgs

func OperatorSpecToolsDiscovererPtr(v *OperatorSpecToolsDiscovererArgs) OperatorSpecToolsDiscovererPtrInput {
	return (*operatorSpecToolsDiscovererPtrType)(v)
}

func (*operatorSpecToolsDiscovererPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorSpecToolsDiscoverer)(nil)).Elem()
}

func (i *operatorSpecToolsDiscovererPtrType) ToOperatorSpecToolsDiscovererPtrOutput() OperatorSpecToolsDiscovererPtrOutput {
	return i.ToOperatorSpecToolsDiscovererPtrOutputWithContext(context.Background())
}

func (i *operatorSpecToolsDiscovererPtrType) ToOperatorSpecToolsDiscovererPtrOutputWithContext(ctx context.Context) OperatorSpecToolsDiscovererPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorSpecToolsDiscovererPtrOutput)
}

type OperatorSpecToolsDiscovererOutput struct{ *pulumi.OutputState }

func (OperatorSpecToolsDiscovererOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorSpecToolsDiscoverer)(nil)).Elem()
}

func (o OperatorSpecToolsDiscovererOutput) ToOperatorSpecToolsDiscovererOutput() OperatorSpecToolsDiscovererOutput {
	return o
}

func (o OperatorSpecToolsDiscovererOutput) ToOperatorSpecToolsDiscovererOutputWithContext(ctx context.Context) OperatorSpecToolsDiscovererOutput {
	return o
}

func (o OperatorSpecToolsDiscovererOutput) ToOperatorSpecToolsDiscovererPtrOutput() OperatorSpecToolsDiscovererPtrOutput {
	return o.ToOperatorSpecToolsDiscovererPtrOutputWithContext(context.Background())
}

func (o OperatorSpecToolsDiscovererOutput) ToOperatorSpecToolsDiscovererPtrOutputWithContext(ctx context.Context) OperatorSpecToolsDiscovererPtrOutput {
	return o.ApplyT(func(v OperatorSpecToolsDiscoverer) *OperatorSpecToolsDiscoverer {
		return &v
	}).(OperatorSpecToolsDiscovererPtrOutput)
}
func (o OperatorSpecToolsDiscovererOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OperatorSpecToolsDiscoverer) []string { return v.Args }).(pulumi.StringArrayOutput)
}

func (o OperatorSpecToolsDiscovererOutput) Clustername() pulumi.StringOutput {
	return o.ApplyT(func(v OperatorSpecToolsDiscoverer) string { return v.Clustername }).(pulumi.StringOutput)
}

func (o OperatorSpecToolsDiscovererOutput) Clusternamespace() pulumi.StringOutput {
	return o.ApplyT(func(v OperatorSpecToolsDiscoverer) string { return v.Clusternamespace }).(pulumi.StringOutput)
}

func (o OperatorSpecToolsDiscovererOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OperatorSpecToolsDiscoverer) []string { return v.Command }).(pulumi.StringArrayOutput)
}

func (o OperatorSpecToolsDiscovererOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OperatorSpecToolsDiscoverer) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o OperatorSpecToolsDiscovererOutput) Hubconfig() OperatorSpecToolsDiscovererHubconfigPtrOutput {
	return o.ApplyT(func(v OperatorSpecToolsDiscoverer) *OperatorSpecToolsDiscovererHubconfig { return v.Hubconfig }).(OperatorSpecToolsDiscovererHubconfigPtrOutput)
}

func (o OperatorSpecToolsDiscovererOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorSpecToolsDiscoverer) *string { return v.Image }).(pulumi.StringPtrOutput)
}

func (o OperatorSpecToolsDiscovererOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorSpecToolsDiscoverer) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type OperatorSpecToolsDiscovererPtrOutput struct{ *pulumi.OutputState }

func (OperatorSpecToolsDiscovererPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorSpecToolsDiscoverer)(nil)).Elem()
}

func (o OperatorSpecToolsDiscovererPtrOutput) ToOperatorSpecToolsDiscovererPtrOutput() OperatorSpecToolsDiscovererPtrOutput {
	return o
}

func (o OperatorSpecToolsDiscovererPtrOutput) ToOperatorSpecToolsDiscovererPtrOutputWithContext(ctx context.Context) OperatorSpecToolsDiscovererPtrOutput {
	return o
}

func (o OperatorSpecToolsDiscovererPtrOutput) Elem() OperatorSpecToolsDiscovererOutput {
	return o.ApplyT(func(v *OperatorSpecToolsDiscoverer) OperatorSpecToolsDiscoverer { return *v }).(OperatorSpecToolsDiscovererOutput)
}

func (o OperatorSpecToolsDiscovererPtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OperatorSpecToolsDiscoverer) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

func (o OperatorSpecToolsDiscovererPtrOutput) Clustername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorSpecToolsDiscoverer) *string {
		if v == nil {
			return nil
		}
		return &v.Clustername
	}).(pulumi.StringPtrOutput)
}

func (o OperatorSpecToolsDiscovererPtrOutput) Clusternamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorSpecToolsDiscoverer) *string {
		if v == nil {
			return nil
		}
		return &v.Clusternamespace
	}).(pulumi.StringPtrOutput)
}

func (o OperatorSpecToolsDiscovererPtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OperatorSpecToolsDiscoverer) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

func (o OperatorSpecToolsDiscovererPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OperatorSpecToolsDiscoverer) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o OperatorSpecToolsDiscovererPtrOutput) Hubconfig() OperatorSpecToolsDiscovererHubconfigPtrOutput {
	return o.ApplyT(func(v *OperatorSpecToolsDiscoverer) *OperatorSpecToolsDiscovererHubconfig {
		if v == nil {
			return nil
		}
		return v.Hubconfig
	}).(OperatorSpecToolsDiscovererHubconfigPtrOutput)
}

func (o OperatorSpecToolsDiscovererPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorSpecToolsDiscoverer) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

func (o OperatorSpecToolsDiscovererPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorSpecToolsDiscoverer) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type OperatorSpecToolsDiscovererHubconfig struct {
	Kubeconfig *string `pulumi:"kubeconfig"`
	Mountpath  string  `pulumi:"mountpath"`
	// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
	SecretRef OperatorSpecToolsDiscovererHubconfigSecretRef `pulumi:"secretRef"`
}

// OperatorSpecToolsDiscovererHubconfigInput is an input type that accepts OperatorSpecToolsDiscovererHubconfigArgs and OperatorSpecToolsDiscovererHubconfigOutput values.
// You can construct a concrete instance of `OperatorSpecToolsDiscovererHubconfigInput` via:
//
//          OperatorSpecToolsDiscovererHubconfigArgs{...}
type OperatorSpecToolsDiscovererHubconfigInput interface {
	pulumi.Input

	ToOperatorSpecToolsDiscovererHubconfigOutput() OperatorSpecToolsDiscovererHubconfigOutput
	ToOperatorSpecToolsDiscovererHubconfigOutputWithContext(context.Context) OperatorSpecToolsDiscovererHubconfigOutput
}

type OperatorSpecToolsDiscovererHubconfigArgs struct {
	Kubeconfig pulumi.StringPtrInput `pulumi:"kubeconfig"`
	Mountpath  pulumi.StringInput    `pulumi:"mountpath"`
	// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
	SecretRef OperatorSpecToolsDiscovererHubconfigSecretRefInput `pulumi:"secretRef"`
}

func (OperatorSpecToolsDiscovererHubconfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorSpecToolsDiscovererHubconfig)(nil)).Elem()
}

func (i OperatorSpecToolsDiscovererHubconfigArgs) ToOperatorSpecToolsDiscovererHubconfigOutput() OperatorSpecToolsDiscovererHubconfigOutput {
	return i.ToOperatorSpecToolsDiscovererHubconfigOutputWithContext(context.Background())
}

func (i OperatorSpecToolsDiscovererHubconfigArgs) ToOperatorSpecToolsDiscovererHubconfigOutputWithContext(ctx context.Context) OperatorSpecToolsDiscovererHubconfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorSpecToolsDiscovererHubconfigOutput)
}

func (i OperatorSpecToolsDiscovererHubconfigArgs) ToOperatorSpecToolsDiscovererHubconfigPtrOutput() OperatorSpecToolsDiscovererHubconfigPtrOutput {
	return i.ToOperatorSpecToolsDiscovererHubconfigPtrOutputWithContext(context.Background())
}

func (i OperatorSpecToolsDiscovererHubconfigArgs) ToOperatorSpecToolsDiscovererHubconfigPtrOutputWithContext(ctx context.Context) OperatorSpecToolsDiscovererHubconfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorSpecToolsDiscovererHubconfigOutput).ToOperatorSpecToolsDiscovererHubconfigPtrOutputWithContext(ctx)
}

// OperatorSpecToolsDiscovererHubconfigPtrInput is an input type that accepts OperatorSpecToolsDiscovererHubconfigArgs, OperatorSpecToolsDiscovererHubconfigPtr and OperatorSpecToolsDiscovererHubconfigPtrOutput values.
// You can construct a concrete instance of `OperatorSpecToolsDiscovererHubconfigPtrInput` via:
//
//          OperatorSpecToolsDiscovererHubconfigArgs{...}
//
//  or:
//
//          nil
type OperatorSpecToolsDiscovererHubconfigPtrInput interface {
	pulumi.Input

	ToOperatorSpecToolsDiscovererHubconfigPtrOutput() OperatorSpecToolsDiscovererHubconfigPtrOutput
	ToOperatorSpecToolsDiscovererHubconfigPtrOutputWithContext(context.Context) OperatorSpecToolsDiscovererHubconfigPtrOutput
}

type operatorSpecToolsDiscovererHubconfigPtrType OperatorSpecToolsDiscovererHubconfigArgs

func OperatorSpecToolsDiscovererHubconfigPtr(v *OperatorSpecToolsDiscovererHubconfigArgs) OperatorSpecToolsDiscovererHubconfigPtrInput {
	return (*operatorSpecToolsDiscovererHubconfigPtrType)(v)
}

func (*operatorSpecToolsDiscovererHubconfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorSpecToolsDiscovererHubconfig)(nil)).Elem()
}

func (i *operatorSpecToolsDiscovererHubconfigPtrType) ToOperatorSpecToolsDiscovererHubconfigPtrOutput() OperatorSpecToolsDiscovererHubconfigPtrOutput {
	return i.ToOperatorSpecToolsDiscovererHubconfigPtrOutputWithContext(context.Background())
}

func (i *operatorSpecToolsDiscovererHubconfigPtrType) ToOperatorSpecToolsDiscovererHubconfigPtrOutputWithContext(ctx context.Context) OperatorSpecToolsDiscovererHubconfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorSpecToolsDiscovererHubconfigPtrOutput)
}

type OperatorSpecToolsDiscovererHubconfigOutput struct{ *pulumi.OutputState }

func (OperatorSpecToolsDiscovererHubconfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorSpecToolsDiscovererHubconfig)(nil)).Elem()
}

func (o OperatorSpecToolsDiscovererHubconfigOutput) ToOperatorSpecToolsDiscovererHubconfigOutput() OperatorSpecToolsDiscovererHubconfigOutput {
	return o
}

func (o OperatorSpecToolsDiscovererHubconfigOutput) ToOperatorSpecToolsDiscovererHubconfigOutputWithContext(ctx context.Context) OperatorSpecToolsDiscovererHubconfigOutput {
	return o
}

func (o OperatorSpecToolsDiscovererHubconfigOutput) ToOperatorSpecToolsDiscovererHubconfigPtrOutput() OperatorSpecToolsDiscovererHubconfigPtrOutput {
	return o.ToOperatorSpecToolsDiscovererHubconfigPtrOutputWithContext(context.Background())
}

func (o OperatorSpecToolsDiscovererHubconfigOutput) ToOperatorSpecToolsDiscovererHubconfigPtrOutputWithContext(ctx context.Context) OperatorSpecToolsDiscovererHubconfigPtrOutput {
	return o.ApplyT(func(v OperatorSpecToolsDiscovererHubconfig) *OperatorSpecToolsDiscovererHubconfig {
		return &v
	}).(OperatorSpecToolsDiscovererHubconfigPtrOutput)
}
func (o OperatorSpecToolsDiscovererHubconfigOutput) Kubeconfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorSpecToolsDiscovererHubconfig) *string { return v.Kubeconfig }).(pulumi.StringPtrOutput)
}

func (o OperatorSpecToolsDiscovererHubconfigOutput) Mountpath() pulumi.StringOutput {
	return o.ApplyT(func(v OperatorSpecToolsDiscovererHubconfig) string { return v.Mountpath }).(pulumi.StringOutput)
}

// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
func (o OperatorSpecToolsDiscovererHubconfigOutput) SecretRef() OperatorSpecToolsDiscovererHubconfigSecretRefOutput {
	return o.ApplyT(func(v OperatorSpecToolsDiscovererHubconfig) OperatorSpecToolsDiscovererHubconfigSecretRef {
		return v.SecretRef
	}).(OperatorSpecToolsDiscovererHubconfigSecretRefOutput)
}

type OperatorSpecToolsDiscovererHubconfigPtrOutput struct{ *pulumi.OutputState }

func (OperatorSpecToolsDiscovererHubconfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorSpecToolsDiscovererHubconfig)(nil)).Elem()
}

func (o OperatorSpecToolsDiscovererHubconfigPtrOutput) ToOperatorSpecToolsDiscovererHubconfigPtrOutput() OperatorSpecToolsDiscovererHubconfigPtrOutput {
	return o
}

func (o OperatorSpecToolsDiscovererHubconfigPtrOutput) ToOperatorSpecToolsDiscovererHubconfigPtrOutputWithContext(ctx context.Context) OperatorSpecToolsDiscovererHubconfigPtrOutput {
	return o
}

func (o OperatorSpecToolsDiscovererHubconfigPtrOutput) Elem() OperatorSpecToolsDiscovererHubconfigOutput {
	return o.ApplyT(func(v *OperatorSpecToolsDiscovererHubconfig) OperatorSpecToolsDiscovererHubconfig { return *v }).(OperatorSpecToolsDiscovererHubconfigOutput)
}

func (o OperatorSpecToolsDiscovererHubconfigPtrOutput) Kubeconfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorSpecToolsDiscovererHubconfig) *string {
		if v == nil {
			return nil
		}
		return v.Kubeconfig
	}).(pulumi.StringPtrOutput)
}

func (o OperatorSpecToolsDiscovererHubconfigPtrOutput) Mountpath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorSpecToolsDiscovererHubconfig) *string {
		if v == nil {
			return nil
		}
		return &v.Mountpath
	}).(pulumi.StringPtrOutput)
}

// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
func (o OperatorSpecToolsDiscovererHubconfigPtrOutput) SecretRef() OperatorSpecToolsDiscovererHubconfigSecretRefPtrOutput {
	return o.ApplyT(func(v *OperatorSpecToolsDiscovererHubconfig) *OperatorSpecToolsDiscovererHubconfigSecretRef {
		if v == nil {
			return nil
		}
		return &v.SecretRef
	}).(OperatorSpecToolsDiscovererHubconfigSecretRefPtrOutput)
}

// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
type OperatorSpecToolsDiscovererHubconfigSecretRef struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
}

// OperatorSpecToolsDiscovererHubconfigSecretRefInput is an input type that accepts OperatorSpecToolsDiscovererHubconfigSecretRefArgs and OperatorSpecToolsDiscovererHubconfigSecretRefOutput values.
// You can construct a concrete instance of `OperatorSpecToolsDiscovererHubconfigSecretRefInput` via:
//
//          OperatorSpecToolsDiscovererHubconfigSecretRefArgs{...}
type OperatorSpecToolsDiscovererHubconfigSecretRefInput interface {
	pulumi.Input

	ToOperatorSpecToolsDiscovererHubconfigSecretRefOutput() OperatorSpecToolsDiscovererHubconfigSecretRefOutput
	ToOperatorSpecToolsDiscovererHubconfigSecretRefOutputWithContext(context.Context) OperatorSpecToolsDiscovererHubconfigSecretRefOutput
}

// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
type OperatorSpecToolsDiscovererHubconfigSecretRefArgs struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (OperatorSpecToolsDiscovererHubconfigSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorSpecToolsDiscovererHubconfigSecretRef)(nil)).Elem()
}

func (i OperatorSpecToolsDiscovererHubconfigSecretRefArgs) ToOperatorSpecToolsDiscovererHubconfigSecretRefOutput() OperatorSpecToolsDiscovererHubconfigSecretRefOutput {
	return i.ToOperatorSpecToolsDiscovererHubconfigSecretRefOutputWithContext(context.Background())
}

func (i OperatorSpecToolsDiscovererHubconfigSecretRefArgs) ToOperatorSpecToolsDiscovererHubconfigSecretRefOutputWithContext(ctx context.Context) OperatorSpecToolsDiscovererHubconfigSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorSpecToolsDiscovererHubconfigSecretRefOutput)
}

func (i OperatorSpecToolsDiscovererHubconfigSecretRefArgs) ToOperatorSpecToolsDiscovererHubconfigSecretRefPtrOutput() OperatorSpecToolsDiscovererHubconfigSecretRefPtrOutput {
	return i.ToOperatorSpecToolsDiscovererHubconfigSecretRefPtrOutputWithContext(context.Background())
}

func (i OperatorSpecToolsDiscovererHubconfigSecretRefArgs) ToOperatorSpecToolsDiscovererHubconfigSecretRefPtrOutputWithContext(ctx context.Context) OperatorSpecToolsDiscovererHubconfigSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorSpecToolsDiscovererHubconfigSecretRefOutput).ToOperatorSpecToolsDiscovererHubconfigSecretRefPtrOutputWithContext(ctx)
}

// OperatorSpecToolsDiscovererHubconfigSecretRefPtrInput is an input type that accepts OperatorSpecToolsDiscovererHubconfigSecretRefArgs, OperatorSpecToolsDiscovererHubconfigSecretRefPtr and OperatorSpecToolsDiscovererHubconfigSecretRefPtrOutput values.
// You can construct a concrete instance of `OperatorSpecToolsDiscovererHubconfigSecretRefPtrInput` via:
//
//          OperatorSpecToolsDiscovererHubconfigSecretRefArgs{...}
//
//  or:
//
//          nil
type OperatorSpecToolsDiscovererHubconfigSecretRefPtrInput interface {
	pulumi.Input

	ToOperatorSpecToolsDiscovererHubconfigSecretRefPtrOutput() OperatorSpecToolsDiscovererHubconfigSecretRefPtrOutput
	ToOperatorSpecToolsDiscovererHubconfigSecretRefPtrOutputWithContext(context.Context) OperatorSpecToolsDiscovererHubconfigSecretRefPtrOutput
}

type operatorSpecToolsDiscovererHubconfigSecretRefPtrType OperatorSpecToolsDiscovererHubconfigSecretRefArgs

func OperatorSpecToolsDiscovererHubconfigSecretRefPtr(v *OperatorSpecToolsDiscovererHubconfigSecretRefArgs) OperatorSpecToolsDiscovererHubconfigSecretRefPtrInput {
	return (*operatorSpecToolsDiscovererHubconfigSecretRefPtrType)(v)
}

func (*operatorSpecToolsDiscovererHubconfigSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorSpecToolsDiscovererHubconfigSecretRef)(nil)).Elem()
}

func (i *operatorSpecToolsDiscovererHubconfigSecretRefPtrType) ToOperatorSpecToolsDiscovererHubconfigSecretRefPtrOutput() OperatorSpecToolsDiscovererHubconfigSecretRefPtrOutput {
	return i.ToOperatorSpecToolsDiscovererHubconfigSecretRefPtrOutputWithContext(context.Background())
}

func (i *operatorSpecToolsDiscovererHubconfigSecretRefPtrType) ToOperatorSpecToolsDiscovererHubconfigSecretRefPtrOutputWithContext(ctx context.Context) OperatorSpecToolsDiscovererHubconfigSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorSpecToolsDiscovererHubconfigSecretRefPtrOutput)
}

// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
type OperatorSpecToolsDiscovererHubconfigSecretRefOutput struct{ *pulumi.OutputState }

func (OperatorSpecToolsDiscovererHubconfigSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorSpecToolsDiscovererHubconfigSecretRef)(nil)).Elem()
}

func (o OperatorSpecToolsDiscovererHubconfigSecretRefOutput) ToOperatorSpecToolsDiscovererHubconfigSecretRefOutput() OperatorSpecToolsDiscovererHubconfigSecretRefOutput {
	return o
}

func (o OperatorSpecToolsDiscovererHubconfigSecretRefOutput) ToOperatorSpecToolsDiscovererHubconfigSecretRefOutputWithContext(ctx context.Context) OperatorSpecToolsDiscovererHubconfigSecretRefOutput {
	return o
}

func (o OperatorSpecToolsDiscovererHubconfigSecretRefOutput) ToOperatorSpecToolsDiscovererHubconfigSecretRefPtrOutput() OperatorSpecToolsDiscovererHubconfigSecretRefPtrOutput {
	return o.ToOperatorSpecToolsDiscovererHubconfigSecretRefPtrOutputWithContext(context.Background())
}

func (o OperatorSpecToolsDiscovererHubconfigSecretRefOutput) ToOperatorSpecToolsDiscovererHubconfigSecretRefPtrOutputWithContext(ctx context.Context) OperatorSpecToolsDiscovererHubconfigSecretRefPtrOutput {
	return o.ApplyT(func(v OperatorSpecToolsDiscovererHubconfigSecretRef) *OperatorSpecToolsDiscovererHubconfigSecretRef {
		return &v
	}).(OperatorSpecToolsDiscovererHubconfigSecretRefPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o OperatorSpecToolsDiscovererHubconfigSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorSpecToolsDiscovererHubconfigSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type OperatorSpecToolsDiscovererHubconfigSecretRefPtrOutput struct{ *pulumi.OutputState }

func (OperatorSpecToolsDiscovererHubconfigSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorSpecToolsDiscovererHubconfigSecretRef)(nil)).Elem()
}

func (o OperatorSpecToolsDiscovererHubconfigSecretRefPtrOutput) ToOperatorSpecToolsDiscovererHubconfigSecretRefPtrOutput() OperatorSpecToolsDiscovererHubconfigSecretRefPtrOutput {
	return o
}

func (o OperatorSpecToolsDiscovererHubconfigSecretRefPtrOutput) ToOperatorSpecToolsDiscovererHubconfigSecretRefPtrOutputWithContext(ctx context.Context) OperatorSpecToolsDiscovererHubconfigSecretRefPtrOutput {
	return o
}

func (o OperatorSpecToolsDiscovererHubconfigSecretRefPtrOutput) Elem() OperatorSpecToolsDiscovererHubconfigSecretRefOutput {
	return o.ApplyT(func(v *OperatorSpecToolsDiscovererHubconfigSecretRef) OperatorSpecToolsDiscovererHubconfigSecretRef {
		return *v
	}).(OperatorSpecToolsDiscovererHubconfigSecretRefOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o OperatorSpecToolsDiscovererHubconfigSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorSpecToolsDiscovererHubconfigSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// OperatorStatus defines the observed state of Operator
type OperatorStatus struct {
	// Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
	Conditions []OperatorStatusConditions `pulumi:"conditions"`
	// The list has one entry per container in the manifest. Each entry is currently the output of `docker inspect`. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
	ContainerStatuses []OperatorStatusContainerStatuses `pulumi:"containerStatuses"`
	// Status for any ephemeral containers that have run in this pod. This field is alpha-level and is only populated by servers that enable the EphemeralContainers feature.
	EphemeralContainerStatuses []OperatorStatusEphemeralContainerStatuses `pulumi:"ephemeralContainerStatuses"`
	// IP address of the host to which the pod is assigned. Empty if not yet scheduled.
	HostIP *string `pulumi:"hostIP"`
	// The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
	InitContainerStatuses []OperatorStatusInitContainerStatuses `pulumi:"initContainerStatuses"`
	// A human readable message indicating details about why the pod is in this condition.
	Message *string `pulumi:"message"`
	// nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.
	NominatedNodeName *string `pulumi:"nominatedNodeName"`
	// The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:
	//  Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.
	//  More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
	Phase *string `pulumi:"phase"`
	// IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
	PodIP *string `pulumi:"podIP"`
	// podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.
	PodIPs []OperatorStatusPodIPs `pulumi:"podIPs"`
	// The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md
	QosClass *string `pulumi:"qosClass"`
	// A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'
	Reason *string `pulumi:"reason"`
	// RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.
	StartTime *string `pulumi:"startTime"`
}

// OperatorStatusInput is an input type that accepts OperatorStatusArgs and OperatorStatusOutput values.
// You can construct a concrete instance of `OperatorStatusInput` via:
//
//          OperatorStatusArgs{...}
type OperatorStatusInput interface {
	pulumi.Input

	ToOperatorStatusOutput() OperatorStatusOutput
	ToOperatorStatusOutputWithContext(context.Context) OperatorStatusOutput
}

// OperatorStatus defines the observed state of Operator
type OperatorStatusArgs struct {
	// Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
	Conditions OperatorStatusConditionsArrayInput `pulumi:"conditions"`
	// The list has one entry per container in the manifest. Each entry is currently the output of `docker inspect`. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
	ContainerStatuses OperatorStatusContainerStatusesArrayInput `pulumi:"containerStatuses"`
	// Status for any ephemeral containers that have run in this pod. This field is alpha-level and is only populated by servers that enable the EphemeralContainers feature.
	EphemeralContainerStatuses OperatorStatusEphemeralContainerStatusesArrayInput `pulumi:"ephemeralContainerStatuses"`
	// IP address of the host to which the pod is assigned. Empty if not yet scheduled.
	HostIP pulumi.StringPtrInput `pulumi:"hostIP"`
	// The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
	InitContainerStatuses OperatorStatusInitContainerStatusesArrayInput `pulumi:"initContainerStatuses"`
	// A human readable message indicating details about why the pod is in this condition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.
	NominatedNodeName pulumi.StringPtrInput `pulumi:"nominatedNodeName"`
	// The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:
	//  Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.
	//  More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
	Phase pulumi.StringPtrInput `pulumi:"phase"`
	// IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
	PodIP pulumi.StringPtrInput `pulumi:"podIP"`
	// podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.
	PodIPs OperatorStatusPodIPsArrayInput `pulumi:"podIPs"`
	// The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md
	QosClass pulumi.StringPtrInput `pulumi:"qosClass"`
	// A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (OperatorStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatus)(nil)).Elem()
}

func (i OperatorStatusArgs) ToOperatorStatusOutput() OperatorStatusOutput {
	return i.ToOperatorStatusOutputWithContext(context.Background())
}

func (i OperatorStatusArgs) ToOperatorStatusOutputWithContext(ctx context.Context) OperatorStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusOutput)
}

func (i OperatorStatusArgs) ToOperatorStatusPtrOutput() OperatorStatusPtrOutput {
	return i.ToOperatorStatusPtrOutputWithContext(context.Background())
}

func (i OperatorStatusArgs) ToOperatorStatusPtrOutputWithContext(ctx context.Context) OperatorStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusOutput).ToOperatorStatusPtrOutputWithContext(ctx)
}

// OperatorStatusPtrInput is an input type that accepts OperatorStatusArgs, OperatorStatusPtr and OperatorStatusPtrOutput values.
// You can construct a concrete instance of `OperatorStatusPtrInput` via:
//
//          OperatorStatusArgs{...}
//
//  or:
//
//          nil
type OperatorStatusPtrInput interface {
	pulumi.Input

	ToOperatorStatusPtrOutput() OperatorStatusPtrOutput
	ToOperatorStatusPtrOutputWithContext(context.Context) OperatorStatusPtrOutput
}

type operatorStatusPtrType OperatorStatusArgs

func OperatorStatusPtr(v *OperatorStatusArgs) OperatorStatusPtrInput {
	return (*operatorStatusPtrType)(v)
}

func (*operatorStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatus)(nil)).Elem()
}

func (i *operatorStatusPtrType) ToOperatorStatusPtrOutput() OperatorStatusPtrOutput {
	return i.ToOperatorStatusPtrOutputWithContext(context.Background())
}

func (i *operatorStatusPtrType) ToOperatorStatusPtrOutputWithContext(ctx context.Context) OperatorStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusPtrOutput)
}

// OperatorStatus defines the observed state of Operator
type OperatorStatusOutput struct{ *pulumi.OutputState }

func (OperatorStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatus)(nil)).Elem()
}

func (o OperatorStatusOutput) ToOperatorStatusOutput() OperatorStatusOutput {
	return o
}

func (o OperatorStatusOutput) ToOperatorStatusOutputWithContext(ctx context.Context) OperatorStatusOutput {
	return o
}

func (o OperatorStatusOutput) ToOperatorStatusPtrOutput() OperatorStatusPtrOutput {
	return o.ToOperatorStatusPtrOutputWithContext(context.Background())
}

func (o OperatorStatusOutput) ToOperatorStatusPtrOutputWithContext(ctx context.Context) OperatorStatusPtrOutput {
	return o.ApplyT(func(v OperatorStatus) *OperatorStatus {
		return &v
	}).(OperatorStatusPtrOutput)
}

// Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
func (o OperatorStatusOutput) Conditions() OperatorStatusConditionsArrayOutput {
	return o.ApplyT(func(v OperatorStatus) []OperatorStatusConditions { return v.Conditions }).(OperatorStatusConditionsArrayOutput)
}

// The list has one entry per container in the manifest. Each entry is currently the output of `docker inspect`. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
func (o OperatorStatusOutput) ContainerStatuses() OperatorStatusContainerStatusesArrayOutput {
	return o.ApplyT(func(v OperatorStatus) []OperatorStatusContainerStatuses { return v.ContainerStatuses }).(OperatorStatusContainerStatusesArrayOutput)
}

// Status for any ephemeral containers that have run in this pod. This field is alpha-level and is only populated by servers that enable the EphemeralContainers feature.
func (o OperatorStatusOutput) EphemeralContainerStatuses() OperatorStatusEphemeralContainerStatusesArrayOutput {
	return o.ApplyT(func(v OperatorStatus) []OperatorStatusEphemeralContainerStatuses { return v.EphemeralContainerStatuses }).(OperatorStatusEphemeralContainerStatusesArrayOutput)
}

// IP address of the host to which the pod is assigned. Empty if not yet scheduled.
func (o OperatorStatusOutput) HostIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatus) *string { return v.HostIP }).(pulumi.StringPtrOutput)
}

// The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
func (o OperatorStatusOutput) InitContainerStatuses() OperatorStatusInitContainerStatusesArrayOutput {
	return o.ApplyT(func(v OperatorStatus) []OperatorStatusInitContainerStatuses { return v.InitContainerStatuses }).(OperatorStatusInitContainerStatusesArrayOutput)
}

// A human readable message indicating details about why the pod is in this condition.
func (o OperatorStatusOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatus) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.
func (o OperatorStatusOutput) NominatedNodeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatus) *string { return v.NominatedNodeName }).(pulumi.StringPtrOutput)
}

// The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:
//  Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.
//  More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
func (o OperatorStatusOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatus) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

// IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
func (o OperatorStatusOutput) PodIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatus) *string { return v.PodIP }).(pulumi.StringPtrOutput)
}

// podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.
func (o OperatorStatusOutput) PodIPs() OperatorStatusPodIPsArrayOutput {
	return o.ApplyT(func(v OperatorStatus) []OperatorStatusPodIPs { return v.PodIPs }).(OperatorStatusPodIPsArrayOutput)
}

// The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md
func (o OperatorStatusOutput) QosClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatus) *string { return v.QosClass }).(pulumi.StringPtrOutput)
}

// A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'
func (o OperatorStatusOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatus) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.
func (o OperatorStatusOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatus) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type OperatorStatusPtrOutput struct{ *pulumi.OutputState }

func (OperatorStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatus)(nil)).Elem()
}

func (o OperatorStatusPtrOutput) ToOperatorStatusPtrOutput() OperatorStatusPtrOutput {
	return o
}

func (o OperatorStatusPtrOutput) ToOperatorStatusPtrOutputWithContext(ctx context.Context) OperatorStatusPtrOutput {
	return o
}

func (o OperatorStatusPtrOutput) Elem() OperatorStatusOutput {
	return o.ApplyT(func(v *OperatorStatus) OperatorStatus { return *v }).(OperatorStatusOutput)
}

// Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
func (o OperatorStatusPtrOutput) Conditions() OperatorStatusConditionsArrayOutput {
	return o.ApplyT(func(v *OperatorStatus) []OperatorStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(OperatorStatusConditionsArrayOutput)
}

// The list has one entry per container in the manifest. Each entry is currently the output of `docker inspect`. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
func (o OperatorStatusPtrOutput) ContainerStatuses() OperatorStatusContainerStatusesArrayOutput {
	return o.ApplyT(func(v *OperatorStatus) []OperatorStatusContainerStatuses {
		if v == nil {
			return nil
		}
		return v.ContainerStatuses
	}).(OperatorStatusContainerStatusesArrayOutput)
}

// Status for any ephemeral containers that have run in this pod. This field is alpha-level and is only populated by servers that enable the EphemeralContainers feature.
func (o OperatorStatusPtrOutput) EphemeralContainerStatuses() OperatorStatusEphemeralContainerStatusesArrayOutput {
	return o.ApplyT(func(v *OperatorStatus) []OperatorStatusEphemeralContainerStatuses {
		if v == nil {
			return nil
		}
		return v.EphemeralContainerStatuses
	}).(OperatorStatusEphemeralContainerStatusesArrayOutput)
}

// IP address of the host to which the pod is assigned. Empty if not yet scheduled.
func (o OperatorStatusPtrOutput) HostIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatus) *string {
		if v == nil {
			return nil
		}
		return v.HostIP
	}).(pulumi.StringPtrOutput)
}

// The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
func (o OperatorStatusPtrOutput) InitContainerStatuses() OperatorStatusInitContainerStatusesArrayOutput {
	return o.ApplyT(func(v *OperatorStatus) []OperatorStatusInitContainerStatuses {
		if v == nil {
			return nil
		}
		return v.InitContainerStatuses
	}).(OperatorStatusInitContainerStatusesArrayOutput)
}

// A human readable message indicating details about why the pod is in this condition.
func (o OperatorStatusPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatus) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.
func (o OperatorStatusPtrOutput) NominatedNodeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatus) *string {
		if v == nil {
			return nil
		}
		return v.NominatedNodeName
	}).(pulumi.StringPtrOutput)
}

// The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:
//  Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.
//  More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
func (o OperatorStatusPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatus) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

// IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
func (o OperatorStatusPtrOutput) PodIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatus) *string {
		if v == nil {
			return nil
		}
		return v.PodIP
	}).(pulumi.StringPtrOutput)
}

// podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.
func (o OperatorStatusPtrOutput) PodIPs() OperatorStatusPodIPsArrayOutput {
	return o.ApplyT(func(v *OperatorStatus) []OperatorStatusPodIPs {
		if v == nil {
			return nil
		}
		return v.PodIPs
	}).(OperatorStatusPodIPsArrayOutput)
}

// The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md
func (o OperatorStatusPtrOutput) QosClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatus) *string {
		if v == nil {
			return nil
		}
		return v.QosClass
	}).(pulumi.StringPtrOutput)
}

// A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'
func (o OperatorStatusPtrOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatus) *string {
		if v == nil {
			return nil
		}
		return v.Reason
	}).(pulumi.StringPtrOutput)
}

// RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.
func (o OperatorStatusPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatus) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// PodCondition contains details for the current condition of this pod.
type OperatorStatusConditions struct {
	// Last time we probed the condition.
	LastProbeTime *string `pulumi:"lastProbeTime"`
	// Last time the condition transitioned from one status to another.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// Human-readable message indicating details about last transition.
	Message *string `pulumi:"message"`
	// Unique, one-word, CamelCase reason for the condition's last transition.
	Reason *string `pulumi:"reason"`
	// Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
	Status string `pulumi:"status"`
	// Type is the type of the condition. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
	Type string `pulumi:"type"`
}

// OperatorStatusConditionsInput is an input type that accepts OperatorStatusConditionsArgs and OperatorStatusConditionsOutput values.
// You can construct a concrete instance of `OperatorStatusConditionsInput` via:
//
//          OperatorStatusConditionsArgs{...}
type OperatorStatusConditionsInput interface {
	pulumi.Input

	ToOperatorStatusConditionsOutput() OperatorStatusConditionsOutput
	ToOperatorStatusConditionsOutputWithContext(context.Context) OperatorStatusConditionsOutput
}

// PodCondition contains details for the current condition of this pod.
type OperatorStatusConditionsArgs struct {
	// Last time we probed the condition.
	LastProbeTime pulumi.StringPtrInput `pulumi:"lastProbeTime"`
	// Last time the condition transitioned from one status to another.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// Human-readable message indicating details about last transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Unique, one-word, CamelCase reason for the condition's last transition.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
	Status pulumi.StringInput `pulumi:"status"`
	// Type is the type of the condition. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
	Type pulumi.StringInput `pulumi:"type"`
}

func (OperatorStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusConditions)(nil)).Elem()
}

func (i OperatorStatusConditionsArgs) ToOperatorStatusConditionsOutput() OperatorStatusConditionsOutput {
	return i.ToOperatorStatusConditionsOutputWithContext(context.Background())
}

func (i OperatorStatusConditionsArgs) ToOperatorStatusConditionsOutputWithContext(ctx context.Context) OperatorStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusConditionsOutput)
}

// OperatorStatusConditionsArrayInput is an input type that accepts OperatorStatusConditionsArray and OperatorStatusConditionsArrayOutput values.
// You can construct a concrete instance of `OperatorStatusConditionsArrayInput` via:
//
//          OperatorStatusConditionsArray{ OperatorStatusConditionsArgs{...} }
type OperatorStatusConditionsArrayInput interface {
	pulumi.Input

	ToOperatorStatusConditionsArrayOutput() OperatorStatusConditionsArrayOutput
	ToOperatorStatusConditionsArrayOutputWithContext(context.Context) OperatorStatusConditionsArrayOutput
}

type OperatorStatusConditionsArray []OperatorStatusConditionsInput

func (OperatorStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OperatorStatusConditions)(nil)).Elem()
}

func (i OperatorStatusConditionsArray) ToOperatorStatusConditionsArrayOutput() OperatorStatusConditionsArrayOutput {
	return i.ToOperatorStatusConditionsArrayOutputWithContext(context.Background())
}

func (i OperatorStatusConditionsArray) ToOperatorStatusConditionsArrayOutputWithContext(ctx context.Context) OperatorStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusConditionsArrayOutput)
}

// PodCondition contains details for the current condition of this pod.
type OperatorStatusConditionsOutput struct{ *pulumi.OutputState }

func (OperatorStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusConditions)(nil)).Elem()
}

func (o OperatorStatusConditionsOutput) ToOperatorStatusConditionsOutput() OperatorStatusConditionsOutput {
	return o
}

func (o OperatorStatusConditionsOutput) ToOperatorStatusConditionsOutputWithContext(ctx context.Context) OperatorStatusConditionsOutput {
	return o
}

// Last time we probed the condition.
func (o OperatorStatusConditionsOutput) LastProbeTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusConditions) *string { return v.LastProbeTime }).(pulumi.StringPtrOutput)
}

// Last time the condition transitioned from one status to another.
func (o OperatorStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// Human-readable message indicating details about last transition.
func (o OperatorStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Unique, one-word, CamelCase reason for the condition's last transition.
func (o OperatorStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
func (o OperatorStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v OperatorStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// Type is the type of the condition. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
func (o OperatorStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OperatorStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type OperatorStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (OperatorStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OperatorStatusConditions)(nil)).Elem()
}

func (o OperatorStatusConditionsArrayOutput) ToOperatorStatusConditionsArrayOutput() OperatorStatusConditionsArrayOutput {
	return o
}

func (o OperatorStatusConditionsArrayOutput) ToOperatorStatusConditionsArrayOutputWithContext(ctx context.Context) OperatorStatusConditionsArrayOutput {
	return o
}

func (o OperatorStatusConditionsArrayOutput) Index(i pulumi.IntInput) OperatorStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OperatorStatusConditions {
		return vs[0].([]OperatorStatusConditions)[vs[1].(int)]
	}).(OperatorStatusConditionsOutput)
}

// ContainerStatus contains details for the current status of this container.
type OperatorStatusContainerStatuses struct {
	// Container's ID in the format 'docker://<container_id>'.
	ContainerID *string `pulumi:"containerID"`
	// The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images TODO(dchen1107): Which image the container is running with?
	Image string `pulumi:"image"`
	// ImageID of the container's image.
	ImageID string `pulumi:"imageID"`
	// Details about the container's last termination condition.
	LastState *OperatorStatusContainerStatusesLastState `pulumi:"lastState"`
	// This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
	Name string `pulumi:"name"`
	// Specifies whether the container has passed its readiness probe.
	Ready bool `pulumi:"ready"`
	// The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.
	RestartCount int `pulumi:"restartCount"`
	// Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
	Started *bool `pulumi:"started"`
	// Details about the container's current condition.
	State *OperatorStatusContainerStatusesState `pulumi:"state"`
}

// OperatorStatusContainerStatusesInput is an input type that accepts OperatorStatusContainerStatusesArgs and OperatorStatusContainerStatusesOutput values.
// You can construct a concrete instance of `OperatorStatusContainerStatusesInput` via:
//
//          OperatorStatusContainerStatusesArgs{...}
type OperatorStatusContainerStatusesInput interface {
	pulumi.Input

	ToOperatorStatusContainerStatusesOutput() OperatorStatusContainerStatusesOutput
	ToOperatorStatusContainerStatusesOutputWithContext(context.Context) OperatorStatusContainerStatusesOutput
}

// ContainerStatus contains details for the current status of this container.
type OperatorStatusContainerStatusesArgs struct {
	// Container's ID in the format 'docker://<container_id>'.
	ContainerID pulumi.StringPtrInput `pulumi:"containerID"`
	// The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images TODO(dchen1107): Which image the container is running with?
	Image pulumi.StringInput `pulumi:"image"`
	// ImageID of the container's image.
	ImageID pulumi.StringInput `pulumi:"imageID"`
	// Details about the container's last termination condition.
	LastState OperatorStatusContainerStatusesLastStatePtrInput `pulumi:"lastState"`
	// This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies whether the container has passed its readiness probe.
	Ready pulumi.BoolInput `pulumi:"ready"`
	// The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.
	RestartCount pulumi.IntInput `pulumi:"restartCount"`
	// Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
	Started pulumi.BoolPtrInput `pulumi:"started"`
	// Details about the container's current condition.
	State OperatorStatusContainerStatusesStatePtrInput `pulumi:"state"`
}

func (OperatorStatusContainerStatusesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusContainerStatuses)(nil)).Elem()
}

func (i OperatorStatusContainerStatusesArgs) ToOperatorStatusContainerStatusesOutput() OperatorStatusContainerStatusesOutput {
	return i.ToOperatorStatusContainerStatusesOutputWithContext(context.Background())
}

func (i OperatorStatusContainerStatusesArgs) ToOperatorStatusContainerStatusesOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusContainerStatusesOutput)
}

// OperatorStatusContainerStatusesArrayInput is an input type that accepts OperatorStatusContainerStatusesArray and OperatorStatusContainerStatusesArrayOutput values.
// You can construct a concrete instance of `OperatorStatusContainerStatusesArrayInput` via:
//
//          OperatorStatusContainerStatusesArray{ OperatorStatusContainerStatusesArgs{...} }
type OperatorStatusContainerStatusesArrayInput interface {
	pulumi.Input

	ToOperatorStatusContainerStatusesArrayOutput() OperatorStatusContainerStatusesArrayOutput
	ToOperatorStatusContainerStatusesArrayOutputWithContext(context.Context) OperatorStatusContainerStatusesArrayOutput
}

type OperatorStatusContainerStatusesArray []OperatorStatusContainerStatusesInput

func (OperatorStatusContainerStatusesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OperatorStatusContainerStatuses)(nil)).Elem()
}

func (i OperatorStatusContainerStatusesArray) ToOperatorStatusContainerStatusesArrayOutput() OperatorStatusContainerStatusesArrayOutput {
	return i.ToOperatorStatusContainerStatusesArrayOutputWithContext(context.Background())
}

func (i OperatorStatusContainerStatusesArray) ToOperatorStatusContainerStatusesArrayOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusContainerStatusesArrayOutput)
}

// ContainerStatus contains details for the current status of this container.
type OperatorStatusContainerStatusesOutput struct{ *pulumi.OutputState }

func (OperatorStatusContainerStatusesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusContainerStatuses)(nil)).Elem()
}

func (o OperatorStatusContainerStatusesOutput) ToOperatorStatusContainerStatusesOutput() OperatorStatusContainerStatusesOutput {
	return o
}

func (o OperatorStatusContainerStatusesOutput) ToOperatorStatusContainerStatusesOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesOutput {
	return o
}

// Container's ID in the format 'docker://<container_id>'.
func (o OperatorStatusContainerStatusesOutput) ContainerID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusContainerStatuses) *string { return v.ContainerID }).(pulumi.StringPtrOutput)
}

// The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images TODO(dchen1107): Which image the container is running with?
func (o OperatorStatusContainerStatusesOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v OperatorStatusContainerStatuses) string { return v.Image }).(pulumi.StringOutput)
}

// ImageID of the container's image.
func (o OperatorStatusContainerStatusesOutput) ImageID() pulumi.StringOutput {
	return o.ApplyT(func(v OperatorStatusContainerStatuses) string { return v.ImageID }).(pulumi.StringOutput)
}

// Details about the container's last termination condition.
func (o OperatorStatusContainerStatusesOutput) LastState() OperatorStatusContainerStatusesLastStatePtrOutput {
	return o.ApplyT(func(v OperatorStatusContainerStatuses) *OperatorStatusContainerStatusesLastState { return v.LastState }).(OperatorStatusContainerStatusesLastStatePtrOutput)
}

// This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
func (o OperatorStatusContainerStatusesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v OperatorStatusContainerStatuses) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies whether the container has passed its readiness probe.
func (o OperatorStatusContainerStatusesOutput) Ready() pulumi.BoolOutput {
	return o.ApplyT(func(v OperatorStatusContainerStatuses) bool { return v.Ready }).(pulumi.BoolOutput)
}

// The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.
func (o OperatorStatusContainerStatusesOutput) RestartCount() pulumi.IntOutput {
	return o.ApplyT(func(v OperatorStatusContainerStatuses) int { return v.RestartCount }).(pulumi.IntOutput)
}

// Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
func (o OperatorStatusContainerStatusesOutput) Started() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OperatorStatusContainerStatuses) *bool { return v.Started }).(pulumi.BoolPtrOutput)
}

// Details about the container's current condition.
func (o OperatorStatusContainerStatusesOutput) State() OperatorStatusContainerStatusesStatePtrOutput {
	return o.ApplyT(func(v OperatorStatusContainerStatuses) *OperatorStatusContainerStatusesState { return v.State }).(OperatorStatusContainerStatusesStatePtrOutput)
}

type OperatorStatusContainerStatusesArrayOutput struct{ *pulumi.OutputState }

func (OperatorStatusContainerStatusesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OperatorStatusContainerStatuses)(nil)).Elem()
}

func (o OperatorStatusContainerStatusesArrayOutput) ToOperatorStatusContainerStatusesArrayOutput() OperatorStatusContainerStatusesArrayOutput {
	return o
}

func (o OperatorStatusContainerStatusesArrayOutput) ToOperatorStatusContainerStatusesArrayOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesArrayOutput {
	return o
}

func (o OperatorStatusContainerStatusesArrayOutput) Index(i pulumi.IntInput) OperatorStatusContainerStatusesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OperatorStatusContainerStatuses {
		return vs[0].([]OperatorStatusContainerStatuses)[vs[1].(int)]
	}).(OperatorStatusContainerStatusesOutput)
}

// Details about the container's last termination condition.
type OperatorStatusContainerStatusesLastState struct {
	// Details about a running container
	Running *OperatorStatusContainerStatusesLastStateRunning `pulumi:"running"`
	// Details about a terminated container
	Terminated *OperatorStatusContainerStatusesLastStateTerminated `pulumi:"terminated"`
	// Details about a waiting container
	Waiting *OperatorStatusContainerStatusesLastStateWaiting `pulumi:"waiting"`
}

// OperatorStatusContainerStatusesLastStateInput is an input type that accepts OperatorStatusContainerStatusesLastStateArgs and OperatorStatusContainerStatusesLastStateOutput values.
// You can construct a concrete instance of `OperatorStatusContainerStatusesLastStateInput` via:
//
//          OperatorStatusContainerStatusesLastStateArgs{...}
type OperatorStatusContainerStatusesLastStateInput interface {
	pulumi.Input

	ToOperatorStatusContainerStatusesLastStateOutput() OperatorStatusContainerStatusesLastStateOutput
	ToOperatorStatusContainerStatusesLastStateOutputWithContext(context.Context) OperatorStatusContainerStatusesLastStateOutput
}

// Details about the container's last termination condition.
type OperatorStatusContainerStatusesLastStateArgs struct {
	// Details about a running container
	Running OperatorStatusContainerStatusesLastStateRunningPtrInput `pulumi:"running"`
	// Details about a terminated container
	Terminated OperatorStatusContainerStatusesLastStateTerminatedPtrInput `pulumi:"terminated"`
	// Details about a waiting container
	Waiting OperatorStatusContainerStatusesLastStateWaitingPtrInput `pulumi:"waiting"`
}

func (OperatorStatusContainerStatusesLastStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusContainerStatusesLastState)(nil)).Elem()
}

func (i OperatorStatusContainerStatusesLastStateArgs) ToOperatorStatusContainerStatusesLastStateOutput() OperatorStatusContainerStatusesLastStateOutput {
	return i.ToOperatorStatusContainerStatusesLastStateOutputWithContext(context.Background())
}

func (i OperatorStatusContainerStatusesLastStateArgs) ToOperatorStatusContainerStatusesLastStateOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesLastStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusContainerStatusesLastStateOutput)
}

func (i OperatorStatusContainerStatusesLastStateArgs) ToOperatorStatusContainerStatusesLastStatePtrOutput() OperatorStatusContainerStatusesLastStatePtrOutput {
	return i.ToOperatorStatusContainerStatusesLastStatePtrOutputWithContext(context.Background())
}

func (i OperatorStatusContainerStatusesLastStateArgs) ToOperatorStatusContainerStatusesLastStatePtrOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesLastStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusContainerStatusesLastStateOutput).ToOperatorStatusContainerStatusesLastStatePtrOutputWithContext(ctx)
}

// OperatorStatusContainerStatusesLastStatePtrInput is an input type that accepts OperatorStatusContainerStatusesLastStateArgs, OperatorStatusContainerStatusesLastStatePtr and OperatorStatusContainerStatusesLastStatePtrOutput values.
// You can construct a concrete instance of `OperatorStatusContainerStatusesLastStatePtrInput` via:
//
//          OperatorStatusContainerStatusesLastStateArgs{...}
//
//  or:
//
//          nil
type OperatorStatusContainerStatusesLastStatePtrInput interface {
	pulumi.Input

	ToOperatorStatusContainerStatusesLastStatePtrOutput() OperatorStatusContainerStatusesLastStatePtrOutput
	ToOperatorStatusContainerStatusesLastStatePtrOutputWithContext(context.Context) OperatorStatusContainerStatusesLastStatePtrOutput
}

type operatorStatusContainerStatusesLastStatePtrType OperatorStatusContainerStatusesLastStateArgs

func OperatorStatusContainerStatusesLastStatePtr(v *OperatorStatusContainerStatusesLastStateArgs) OperatorStatusContainerStatusesLastStatePtrInput {
	return (*operatorStatusContainerStatusesLastStatePtrType)(v)
}

func (*operatorStatusContainerStatusesLastStatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusContainerStatusesLastState)(nil)).Elem()
}

func (i *operatorStatusContainerStatusesLastStatePtrType) ToOperatorStatusContainerStatusesLastStatePtrOutput() OperatorStatusContainerStatusesLastStatePtrOutput {
	return i.ToOperatorStatusContainerStatusesLastStatePtrOutputWithContext(context.Background())
}

func (i *operatorStatusContainerStatusesLastStatePtrType) ToOperatorStatusContainerStatusesLastStatePtrOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesLastStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusContainerStatusesLastStatePtrOutput)
}

// Details about the container's last termination condition.
type OperatorStatusContainerStatusesLastStateOutput struct{ *pulumi.OutputState }

func (OperatorStatusContainerStatusesLastStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusContainerStatusesLastState)(nil)).Elem()
}

func (o OperatorStatusContainerStatusesLastStateOutput) ToOperatorStatusContainerStatusesLastStateOutput() OperatorStatusContainerStatusesLastStateOutput {
	return o
}

func (o OperatorStatusContainerStatusesLastStateOutput) ToOperatorStatusContainerStatusesLastStateOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesLastStateOutput {
	return o
}

func (o OperatorStatusContainerStatusesLastStateOutput) ToOperatorStatusContainerStatusesLastStatePtrOutput() OperatorStatusContainerStatusesLastStatePtrOutput {
	return o.ToOperatorStatusContainerStatusesLastStatePtrOutputWithContext(context.Background())
}

func (o OperatorStatusContainerStatusesLastStateOutput) ToOperatorStatusContainerStatusesLastStatePtrOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesLastStatePtrOutput {
	return o.ApplyT(func(v OperatorStatusContainerStatusesLastState) *OperatorStatusContainerStatusesLastState {
		return &v
	}).(OperatorStatusContainerStatusesLastStatePtrOutput)
}

// Details about a running container
func (o OperatorStatusContainerStatusesLastStateOutput) Running() OperatorStatusContainerStatusesLastStateRunningPtrOutput {
	return o.ApplyT(func(v OperatorStatusContainerStatusesLastState) *OperatorStatusContainerStatusesLastStateRunning {
		return v.Running
	}).(OperatorStatusContainerStatusesLastStateRunningPtrOutput)
}

// Details about a terminated container
func (o OperatorStatusContainerStatusesLastStateOutput) Terminated() OperatorStatusContainerStatusesLastStateTerminatedPtrOutput {
	return o.ApplyT(func(v OperatorStatusContainerStatusesLastState) *OperatorStatusContainerStatusesLastStateTerminated {
		return v.Terminated
	}).(OperatorStatusContainerStatusesLastStateTerminatedPtrOutput)
}

// Details about a waiting container
func (o OperatorStatusContainerStatusesLastStateOutput) Waiting() OperatorStatusContainerStatusesLastStateWaitingPtrOutput {
	return o.ApplyT(func(v OperatorStatusContainerStatusesLastState) *OperatorStatusContainerStatusesLastStateWaiting {
		return v.Waiting
	}).(OperatorStatusContainerStatusesLastStateWaitingPtrOutput)
}

type OperatorStatusContainerStatusesLastStatePtrOutput struct{ *pulumi.OutputState }

func (OperatorStatusContainerStatusesLastStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusContainerStatusesLastState)(nil)).Elem()
}

func (o OperatorStatusContainerStatusesLastStatePtrOutput) ToOperatorStatusContainerStatusesLastStatePtrOutput() OperatorStatusContainerStatusesLastStatePtrOutput {
	return o
}

func (o OperatorStatusContainerStatusesLastStatePtrOutput) ToOperatorStatusContainerStatusesLastStatePtrOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesLastStatePtrOutput {
	return o
}

func (o OperatorStatusContainerStatusesLastStatePtrOutput) Elem() OperatorStatusContainerStatusesLastStateOutput {
	return o.ApplyT(func(v *OperatorStatusContainerStatusesLastState) OperatorStatusContainerStatusesLastState { return *v }).(OperatorStatusContainerStatusesLastStateOutput)
}

// Details about a running container
func (o OperatorStatusContainerStatusesLastStatePtrOutput) Running() OperatorStatusContainerStatusesLastStateRunningPtrOutput {
	return o.ApplyT(func(v *OperatorStatusContainerStatusesLastState) *OperatorStatusContainerStatusesLastStateRunning {
		if v == nil {
			return nil
		}
		return v.Running
	}).(OperatorStatusContainerStatusesLastStateRunningPtrOutput)
}

// Details about a terminated container
func (o OperatorStatusContainerStatusesLastStatePtrOutput) Terminated() OperatorStatusContainerStatusesLastStateTerminatedPtrOutput {
	return o.ApplyT(func(v *OperatorStatusContainerStatusesLastState) *OperatorStatusContainerStatusesLastStateTerminated {
		if v == nil {
			return nil
		}
		return v.Terminated
	}).(OperatorStatusContainerStatusesLastStateTerminatedPtrOutput)
}

// Details about a waiting container
func (o OperatorStatusContainerStatusesLastStatePtrOutput) Waiting() OperatorStatusContainerStatusesLastStateWaitingPtrOutput {
	return o.ApplyT(func(v *OperatorStatusContainerStatusesLastState) *OperatorStatusContainerStatusesLastStateWaiting {
		if v == nil {
			return nil
		}
		return v.Waiting
	}).(OperatorStatusContainerStatusesLastStateWaitingPtrOutput)
}

// Details about a running container
type OperatorStatusContainerStatusesLastStateRunning struct {
	// Time at which the container was last (re-)started
	StartedAt *string `pulumi:"startedAt"`
}

// OperatorStatusContainerStatusesLastStateRunningInput is an input type that accepts OperatorStatusContainerStatusesLastStateRunningArgs and OperatorStatusContainerStatusesLastStateRunningOutput values.
// You can construct a concrete instance of `OperatorStatusContainerStatusesLastStateRunningInput` via:
//
//          OperatorStatusContainerStatusesLastStateRunningArgs{...}
type OperatorStatusContainerStatusesLastStateRunningInput interface {
	pulumi.Input

	ToOperatorStatusContainerStatusesLastStateRunningOutput() OperatorStatusContainerStatusesLastStateRunningOutput
	ToOperatorStatusContainerStatusesLastStateRunningOutputWithContext(context.Context) OperatorStatusContainerStatusesLastStateRunningOutput
}

// Details about a running container
type OperatorStatusContainerStatusesLastStateRunningArgs struct {
	// Time at which the container was last (re-)started
	StartedAt pulumi.StringPtrInput `pulumi:"startedAt"`
}

func (OperatorStatusContainerStatusesLastStateRunningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusContainerStatusesLastStateRunning)(nil)).Elem()
}

func (i OperatorStatusContainerStatusesLastStateRunningArgs) ToOperatorStatusContainerStatusesLastStateRunningOutput() OperatorStatusContainerStatusesLastStateRunningOutput {
	return i.ToOperatorStatusContainerStatusesLastStateRunningOutputWithContext(context.Background())
}

func (i OperatorStatusContainerStatusesLastStateRunningArgs) ToOperatorStatusContainerStatusesLastStateRunningOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesLastStateRunningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusContainerStatusesLastStateRunningOutput)
}

func (i OperatorStatusContainerStatusesLastStateRunningArgs) ToOperatorStatusContainerStatusesLastStateRunningPtrOutput() OperatorStatusContainerStatusesLastStateRunningPtrOutput {
	return i.ToOperatorStatusContainerStatusesLastStateRunningPtrOutputWithContext(context.Background())
}

func (i OperatorStatusContainerStatusesLastStateRunningArgs) ToOperatorStatusContainerStatusesLastStateRunningPtrOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesLastStateRunningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusContainerStatusesLastStateRunningOutput).ToOperatorStatusContainerStatusesLastStateRunningPtrOutputWithContext(ctx)
}

// OperatorStatusContainerStatusesLastStateRunningPtrInput is an input type that accepts OperatorStatusContainerStatusesLastStateRunningArgs, OperatorStatusContainerStatusesLastStateRunningPtr and OperatorStatusContainerStatusesLastStateRunningPtrOutput values.
// You can construct a concrete instance of `OperatorStatusContainerStatusesLastStateRunningPtrInput` via:
//
//          OperatorStatusContainerStatusesLastStateRunningArgs{...}
//
//  or:
//
//          nil
type OperatorStatusContainerStatusesLastStateRunningPtrInput interface {
	pulumi.Input

	ToOperatorStatusContainerStatusesLastStateRunningPtrOutput() OperatorStatusContainerStatusesLastStateRunningPtrOutput
	ToOperatorStatusContainerStatusesLastStateRunningPtrOutputWithContext(context.Context) OperatorStatusContainerStatusesLastStateRunningPtrOutput
}

type operatorStatusContainerStatusesLastStateRunningPtrType OperatorStatusContainerStatusesLastStateRunningArgs

func OperatorStatusContainerStatusesLastStateRunningPtr(v *OperatorStatusContainerStatusesLastStateRunningArgs) OperatorStatusContainerStatusesLastStateRunningPtrInput {
	return (*operatorStatusContainerStatusesLastStateRunningPtrType)(v)
}

func (*operatorStatusContainerStatusesLastStateRunningPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusContainerStatusesLastStateRunning)(nil)).Elem()
}

func (i *operatorStatusContainerStatusesLastStateRunningPtrType) ToOperatorStatusContainerStatusesLastStateRunningPtrOutput() OperatorStatusContainerStatusesLastStateRunningPtrOutput {
	return i.ToOperatorStatusContainerStatusesLastStateRunningPtrOutputWithContext(context.Background())
}

func (i *operatorStatusContainerStatusesLastStateRunningPtrType) ToOperatorStatusContainerStatusesLastStateRunningPtrOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesLastStateRunningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusContainerStatusesLastStateRunningPtrOutput)
}

// Details about a running container
type OperatorStatusContainerStatusesLastStateRunningOutput struct{ *pulumi.OutputState }

func (OperatorStatusContainerStatusesLastStateRunningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusContainerStatusesLastStateRunning)(nil)).Elem()
}

func (o OperatorStatusContainerStatusesLastStateRunningOutput) ToOperatorStatusContainerStatusesLastStateRunningOutput() OperatorStatusContainerStatusesLastStateRunningOutput {
	return o
}

func (o OperatorStatusContainerStatusesLastStateRunningOutput) ToOperatorStatusContainerStatusesLastStateRunningOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesLastStateRunningOutput {
	return o
}

func (o OperatorStatusContainerStatusesLastStateRunningOutput) ToOperatorStatusContainerStatusesLastStateRunningPtrOutput() OperatorStatusContainerStatusesLastStateRunningPtrOutput {
	return o.ToOperatorStatusContainerStatusesLastStateRunningPtrOutputWithContext(context.Background())
}

func (o OperatorStatusContainerStatusesLastStateRunningOutput) ToOperatorStatusContainerStatusesLastStateRunningPtrOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesLastStateRunningPtrOutput {
	return o.ApplyT(func(v OperatorStatusContainerStatusesLastStateRunning) *OperatorStatusContainerStatusesLastStateRunning {
		return &v
	}).(OperatorStatusContainerStatusesLastStateRunningPtrOutput)
}

// Time at which the container was last (re-)started
func (o OperatorStatusContainerStatusesLastStateRunningOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusContainerStatusesLastStateRunning) *string { return v.StartedAt }).(pulumi.StringPtrOutput)
}

type OperatorStatusContainerStatusesLastStateRunningPtrOutput struct{ *pulumi.OutputState }

func (OperatorStatusContainerStatusesLastStateRunningPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusContainerStatusesLastStateRunning)(nil)).Elem()
}

func (o OperatorStatusContainerStatusesLastStateRunningPtrOutput) ToOperatorStatusContainerStatusesLastStateRunningPtrOutput() OperatorStatusContainerStatusesLastStateRunningPtrOutput {
	return o
}

func (o OperatorStatusContainerStatusesLastStateRunningPtrOutput) ToOperatorStatusContainerStatusesLastStateRunningPtrOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesLastStateRunningPtrOutput {
	return o
}

func (o OperatorStatusContainerStatusesLastStateRunningPtrOutput) Elem() OperatorStatusContainerStatusesLastStateRunningOutput {
	return o.ApplyT(func(v *OperatorStatusContainerStatusesLastStateRunning) OperatorStatusContainerStatusesLastStateRunning {
		return *v
	}).(OperatorStatusContainerStatusesLastStateRunningOutput)
}

// Time at which the container was last (re-)started
func (o OperatorStatusContainerStatusesLastStateRunningPtrOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusContainerStatusesLastStateRunning) *string {
		if v == nil {
			return nil
		}
		return v.StartedAt
	}).(pulumi.StringPtrOutput)
}

// Details about a terminated container
type OperatorStatusContainerStatusesLastStateTerminated struct {
	// Container's ID in the format 'docker://<container_id>'
	ContainerID *string `pulumi:"containerID"`
	// Exit status from the last termination of the container
	ExitCode int `pulumi:"exitCode"`
	// Time at which the container last terminated
	FinishedAt *string `pulumi:"finishedAt"`
	// Message regarding the last termination of the container
	Message *string `pulumi:"message"`
	// (brief) reason from the last termination of the container
	Reason *string `pulumi:"reason"`
	// Signal from the last termination of the container
	Signal *int `pulumi:"signal"`
	// Time at which previous execution of the container started
	StartedAt *string `pulumi:"startedAt"`
}

// OperatorStatusContainerStatusesLastStateTerminatedInput is an input type that accepts OperatorStatusContainerStatusesLastStateTerminatedArgs and OperatorStatusContainerStatusesLastStateTerminatedOutput values.
// You can construct a concrete instance of `OperatorStatusContainerStatusesLastStateTerminatedInput` via:
//
//          OperatorStatusContainerStatusesLastStateTerminatedArgs{...}
type OperatorStatusContainerStatusesLastStateTerminatedInput interface {
	pulumi.Input

	ToOperatorStatusContainerStatusesLastStateTerminatedOutput() OperatorStatusContainerStatusesLastStateTerminatedOutput
	ToOperatorStatusContainerStatusesLastStateTerminatedOutputWithContext(context.Context) OperatorStatusContainerStatusesLastStateTerminatedOutput
}

// Details about a terminated container
type OperatorStatusContainerStatusesLastStateTerminatedArgs struct {
	// Container's ID in the format 'docker://<container_id>'
	ContainerID pulumi.StringPtrInput `pulumi:"containerID"`
	// Exit status from the last termination of the container
	ExitCode pulumi.IntInput `pulumi:"exitCode"`
	// Time at which the container last terminated
	FinishedAt pulumi.StringPtrInput `pulumi:"finishedAt"`
	// Message regarding the last termination of the container
	Message pulumi.StringPtrInput `pulumi:"message"`
	// (brief) reason from the last termination of the container
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Signal from the last termination of the container
	Signal pulumi.IntPtrInput `pulumi:"signal"`
	// Time at which previous execution of the container started
	StartedAt pulumi.StringPtrInput `pulumi:"startedAt"`
}

func (OperatorStatusContainerStatusesLastStateTerminatedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusContainerStatusesLastStateTerminated)(nil)).Elem()
}

func (i OperatorStatusContainerStatusesLastStateTerminatedArgs) ToOperatorStatusContainerStatusesLastStateTerminatedOutput() OperatorStatusContainerStatusesLastStateTerminatedOutput {
	return i.ToOperatorStatusContainerStatusesLastStateTerminatedOutputWithContext(context.Background())
}

func (i OperatorStatusContainerStatusesLastStateTerminatedArgs) ToOperatorStatusContainerStatusesLastStateTerminatedOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesLastStateTerminatedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusContainerStatusesLastStateTerminatedOutput)
}

func (i OperatorStatusContainerStatusesLastStateTerminatedArgs) ToOperatorStatusContainerStatusesLastStateTerminatedPtrOutput() OperatorStatusContainerStatusesLastStateTerminatedPtrOutput {
	return i.ToOperatorStatusContainerStatusesLastStateTerminatedPtrOutputWithContext(context.Background())
}

func (i OperatorStatusContainerStatusesLastStateTerminatedArgs) ToOperatorStatusContainerStatusesLastStateTerminatedPtrOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesLastStateTerminatedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusContainerStatusesLastStateTerminatedOutput).ToOperatorStatusContainerStatusesLastStateTerminatedPtrOutputWithContext(ctx)
}

// OperatorStatusContainerStatusesLastStateTerminatedPtrInput is an input type that accepts OperatorStatusContainerStatusesLastStateTerminatedArgs, OperatorStatusContainerStatusesLastStateTerminatedPtr and OperatorStatusContainerStatusesLastStateTerminatedPtrOutput values.
// You can construct a concrete instance of `OperatorStatusContainerStatusesLastStateTerminatedPtrInput` via:
//
//          OperatorStatusContainerStatusesLastStateTerminatedArgs{...}
//
//  or:
//
//          nil
type OperatorStatusContainerStatusesLastStateTerminatedPtrInput interface {
	pulumi.Input

	ToOperatorStatusContainerStatusesLastStateTerminatedPtrOutput() OperatorStatusContainerStatusesLastStateTerminatedPtrOutput
	ToOperatorStatusContainerStatusesLastStateTerminatedPtrOutputWithContext(context.Context) OperatorStatusContainerStatusesLastStateTerminatedPtrOutput
}

type operatorStatusContainerStatusesLastStateTerminatedPtrType OperatorStatusContainerStatusesLastStateTerminatedArgs

func OperatorStatusContainerStatusesLastStateTerminatedPtr(v *OperatorStatusContainerStatusesLastStateTerminatedArgs) OperatorStatusContainerStatusesLastStateTerminatedPtrInput {
	return (*operatorStatusContainerStatusesLastStateTerminatedPtrType)(v)
}

func (*operatorStatusContainerStatusesLastStateTerminatedPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusContainerStatusesLastStateTerminated)(nil)).Elem()
}

func (i *operatorStatusContainerStatusesLastStateTerminatedPtrType) ToOperatorStatusContainerStatusesLastStateTerminatedPtrOutput() OperatorStatusContainerStatusesLastStateTerminatedPtrOutput {
	return i.ToOperatorStatusContainerStatusesLastStateTerminatedPtrOutputWithContext(context.Background())
}

func (i *operatorStatusContainerStatusesLastStateTerminatedPtrType) ToOperatorStatusContainerStatusesLastStateTerminatedPtrOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesLastStateTerminatedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusContainerStatusesLastStateTerminatedPtrOutput)
}

// Details about a terminated container
type OperatorStatusContainerStatusesLastStateTerminatedOutput struct{ *pulumi.OutputState }

func (OperatorStatusContainerStatusesLastStateTerminatedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusContainerStatusesLastStateTerminated)(nil)).Elem()
}

func (o OperatorStatusContainerStatusesLastStateTerminatedOutput) ToOperatorStatusContainerStatusesLastStateTerminatedOutput() OperatorStatusContainerStatusesLastStateTerminatedOutput {
	return o
}

func (o OperatorStatusContainerStatusesLastStateTerminatedOutput) ToOperatorStatusContainerStatusesLastStateTerminatedOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesLastStateTerminatedOutput {
	return o
}

func (o OperatorStatusContainerStatusesLastStateTerminatedOutput) ToOperatorStatusContainerStatusesLastStateTerminatedPtrOutput() OperatorStatusContainerStatusesLastStateTerminatedPtrOutput {
	return o.ToOperatorStatusContainerStatusesLastStateTerminatedPtrOutputWithContext(context.Background())
}

func (o OperatorStatusContainerStatusesLastStateTerminatedOutput) ToOperatorStatusContainerStatusesLastStateTerminatedPtrOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesLastStateTerminatedPtrOutput {
	return o.ApplyT(func(v OperatorStatusContainerStatusesLastStateTerminated) *OperatorStatusContainerStatusesLastStateTerminated {
		return &v
	}).(OperatorStatusContainerStatusesLastStateTerminatedPtrOutput)
}

// Container's ID in the format 'docker://<container_id>'
func (o OperatorStatusContainerStatusesLastStateTerminatedOutput) ContainerID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusContainerStatusesLastStateTerminated) *string { return v.ContainerID }).(pulumi.StringPtrOutput)
}

// Exit status from the last termination of the container
func (o OperatorStatusContainerStatusesLastStateTerminatedOutput) ExitCode() pulumi.IntOutput {
	return o.ApplyT(func(v OperatorStatusContainerStatusesLastStateTerminated) int { return v.ExitCode }).(pulumi.IntOutput)
}

// Time at which the container last terminated
func (o OperatorStatusContainerStatusesLastStateTerminatedOutput) FinishedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusContainerStatusesLastStateTerminated) *string { return v.FinishedAt }).(pulumi.StringPtrOutput)
}

// Message regarding the last termination of the container
func (o OperatorStatusContainerStatusesLastStateTerminatedOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusContainerStatusesLastStateTerminated) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// (brief) reason from the last termination of the container
func (o OperatorStatusContainerStatusesLastStateTerminatedOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusContainerStatusesLastStateTerminated) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Signal from the last termination of the container
func (o OperatorStatusContainerStatusesLastStateTerminatedOutput) Signal() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OperatorStatusContainerStatusesLastStateTerminated) *int { return v.Signal }).(pulumi.IntPtrOutput)
}

// Time at which previous execution of the container started
func (o OperatorStatusContainerStatusesLastStateTerminatedOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusContainerStatusesLastStateTerminated) *string { return v.StartedAt }).(pulumi.StringPtrOutput)
}

type OperatorStatusContainerStatusesLastStateTerminatedPtrOutput struct{ *pulumi.OutputState }

func (OperatorStatusContainerStatusesLastStateTerminatedPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusContainerStatusesLastStateTerminated)(nil)).Elem()
}

func (o OperatorStatusContainerStatusesLastStateTerminatedPtrOutput) ToOperatorStatusContainerStatusesLastStateTerminatedPtrOutput() OperatorStatusContainerStatusesLastStateTerminatedPtrOutput {
	return o
}

func (o OperatorStatusContainerStatusesLastStateTerminatedPtrOutput) ToOperatorStatusContainerStatusesLastStateTerminatedPtrOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesLastStateTerminatedPtrOutput {
	return o
}

func (o OperatorStatusContainerStatusesLastStateTerminatedPtrOutput) Elem() OperatorStatusContainerStatusesLastStateTerminatedOutput {
	return o.ApplyT(func(v *OperatorStatusContainerStatusesLastStateTerminated) OperatorStatusContainerStatusesLastStateTerminated {
		return *v
	}).(OperatorStatusContainerStatusesLastStateTerminatedOutput)
}

// Container's ID in the format 'docker://<container_id>'
func (o OperatorStatusContainerStatusesLastStateTerminatedPtrOutput) ContainerID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusContainerStatusesLastStateTerminated) *string {
		if v == nil {
			return nil
		}
		return v.ContainerID
	}).(pulumi.StringPtrOutput)
}

// Exit status from the last termination of the container
func (o OperatorStatusContainerStatusesLastStateTerminatedPtrOutput) ExitCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OperatorStatusContainerStatusesLastStateTerminated) *int {
		if v == nil {
			return nil
		}
		return &v.ExitCode
	}).(pulumi.IntPtrOutput)
}

// Time at which the container last terminated
func (o OperatorStatusContainerStatusesLastStateTerminatedPtrOutput) FinishedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusContainerStatusesLastStateTerminated) *string {
		if v == nil {
			return nil
		}
		return v.FinishedAt
	}).(pulumi.StringPtrOutput)
}

// Message regarding the last termination of the container
func (o OperatorStatusContainerStatusesLastStateTerminatedPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusContainerStatusesLastStateTerminated) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// (brief) reason from the last termination of the container
func (o OperatorStatusContainerStatusesLastStateTerminatedPtrOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusContainerStatusesLastStateTerminated) *string {
		if v == nil {
			return nil
		}
		return v.Reason
	}).(pulumi.StringPtrOutput)
}

// Signal from the last termination of the container
func (o OperatorStatusContainerStatusesLastStateTerminatedPtrOutput) Signal() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OperatorStatusContainerStatusesLastStateTerminated) *int {
		if v == nil {
			return nil
		}
		return v.Signal
	}).(pulumi.IntPtrOutput)
}

// Time at which previous execution of the container started
func (o OperatorStatusContainerStatusesLastStateTerminatedPtrOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusContainerStatusesLastStateTerminated) *string {
		if v == nil {
			return nil
		}
		return v.StartedAt
	}).(pulumi.StringPtrOutput)
}

// Details about a waiting container
type OperatorStatusContainerStatusesLastStateWaiting struct {
	// Message regarding why the container is not yet running.
	Message *string `pulumi:"message"`
	// (brief) reason the container is not yet running.
	Reason *string `pulumi:"reason"`
}

// OperatorStatusContainerStatusesLastStateWaitingInput is an input type that accepts OperatorStatusContainerStatusesLastStateWaitingArgs and OperatorStatusContainerStatusesLastStateWaitingOutput values.
// You can construct a concrete instance of `OperatorStatusContainerStatusesLastStateWaitingInput` via:
//
//          OperatorStatusContainerStatusesLastStateWaitingArgs{...}
type OperatorStatusContainerStatusesLastStateWaitingInput interface {
	pulumi.Input

	ToOperatorStatusContainerStatusesLastStateWaitingOutput() OperatorStatusContainerStatusesLastStateWaitingOutput
	ToOperatorStatusContainerStatusesLastStateWaitingOutputWithContext(context.Context) OperatorStatusContainerStatusesLastStateWaitingOutput
}

// Details about a waiting container
type OperatorStatusContainerStatusesLastStateWaitingArgs struct {
	// Message regarding why the container is not yet running.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// (brief) reason the container is not yet running.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
}

func (OperatorStatusContainerStatusesLastStateWaitingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusContainerStatusesLastStateWaiting)(nil)).Elem()
}

func (i OperatorStatusContainerStatusesLastStateWaitingArgs) ToOperatorStatusContainerStatusesLastStateWaitingOutput() OperatorStatusContainerStatusesLastStateWaitingOutput {
	return i.ToOperatorStatusContainerStatusesLastStateWaitingOutputWithContext(context.Background())
}

func (i OperatorStatusContainerStatusesLastStateWaitingArgs) ToOperatorStatusContainerStatusesLastStateWaitingOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesLastStateWaitingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusContainerStatusesLastStateWaitingOutput)
}

func (i OperatorStatusContainerStatusesLastStateWaitingArgs) ToOperatorStatusContainerStatusesLastStateWaitingPtrOutput() OperatorStatusContainerStatusesLastStateWaitingPtrOutput {
	return i.ToOperatorStatusContainerStatusesLastStateWaitingPtrOutputWithContext(context.Background())
}

func (i OperatorStatusContainerStatusesLastStateWaitingArgs) ToOperatorStatusContainerStatusesLastStateWaitingPtrOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesLastStateWaitingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusContainerStatusesLastStateWaitingOutput).ToOperatorStatusContainerStatusesLastStateWaitingPtrOutputWithContext(ctx)
}

// OperatorStatusContainerStatusesLastStateWaitingPtrInput is an input type that accepts OperatorStatusContainerStatusesLastStateWaitingArgs, OperatorStatusContainerStatusesLastStateWaitingPtr and OperatorStatusContainerStatusesLastStateWaitingPtrOutput values.
// You can construct a concrete instance of `OperatorStatusContainerStatusesLastStateWaitingPtrInput` via:
//
//          OperatorStatusContainerStatusesLastStateWaitingArgs{...}
//
//  or:
//
//          nil
type OperatorStatusContainerStatusesLastStateWaitingPtrInput interface {
	pulumi.Input

	ToOperatorStatusContainerStatusesLastStateWaitingPtrOutput() OperatorStatusContainerStatusesLastStateWaitingPtrOutput
	ToOperatorStatusContainerStatusesLastStateWaitingPtrOutputWithContext(context.Context) OperatorStatusContainerStatusesLastStateWaitingPtrOutput
}

type operatorStatusContainerStatusesLastStateWaitingPtrType OperatorStatusContainerStatusesLastStateWaitingArgs

func OperatorStatusContainerStatusesLastStateWaitingPtr(v *OperatorStatusContainerStatusesLastStateWaitingArgs) OperatorStatusContainerStatusesLastStateWaitingPtrInput {
	return (*operatorStatusContainerStatusesLastStateWaitingPtrType)(v)
}

func (*operatorStatusContainerStatusesLastStateWaitingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusContainerStatusesLastStateWaiting)(nil)).Elem()
}

func (i *operatorStatusContainerStatusesLastStateWaitingPtrType) ToOperatorStatusContainerStatusesLastStateWaitingPtrOutput() OperatorStatusContainerStatusesLastStateWaitingPtrOutput {
	return i.ToOperatorStatusContainerStatusesLastStateWaitingPtrOutputWithContext(context.Background())
}

func (i *operatorStatusContainerStatusesLastStateWaitingPtrType) ToOperatorStatusContainerStatusesLastStateWaitingPtrOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesLastStateWaitingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusContainerStatusesLastStateWaitingPtrOutput)
}

// Details about a waiting container
type OperatorStatusContainerStatusesLastStateWaitingOutput struct{ *pulumi.OutputState }

func (OperatorStatusContainerStatusesLastStateWaitingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusContainerStatusesLastStateWaiting)(nil)).Elem()
}

func (o OperatorStatusContainerStatusesLastStateWaitingOutput) ToOperatorStatusContainerStatusesLastStateWaitingOutput() OperatorStatusContainerStatusesLastStateWaitingOutput {
	return o
}

func (o OperatorStatusContainerStatusesLastStateWaitingOutput) ToOperatorStatusContainerStatusesLastStateWaitingOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesLastStateWaitingOutput {
	return o
}

func (o OperatorStatusContainerStatusesLastStateWaitingOutput) ToOperatorStatusContainerStatusesLastStateWaitingPtrOutput() OperatorStatusContainerStatusesLastStateWaitingPtrOutput {
	return o.ToOperatorStatusContainerStatusesLastStateWaitingPtrOutputWithContext(context.Background())
}

func (o OperatorStatusContainerStatusesLastStateWaitingOutput) ToOperatorStatusContainerStatusesLastStateWaitingPtrOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesLastStateWaitingPtrOutput {
	return o.ApplyT(func(v OperatorStatusContainerStatusesLastStateWaiting) *OperatorStatusContainerStatusesLastStateWaiting {
		return &v
	}).(OperatorStatusContainerStatusesLastStateWaitingPtrOutput)
}

// Message regarding why the container is not yet running.
func (o OperatorStatusContainerStatusesLastStateWaitingOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusContainerStatusesLastStateWaiting) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// (brief) reason the container is not yet running.
func (o OperatorStatusContainerStatusesLastStateWaitingOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusContainerStatusesLastStateWaiting) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

type OperatorStatusContainerStatusesLastStateWaitingPtrOutput struct{ *pulumi.OutputState }

func (OperatorStatusContainerStatusesLastStateWaitingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusContainerStatusesLastStateWaiting)(nil)).Elem()
}

func (o OperatorStatusContainerStatusesLastStateWaitingPtrOutput) ToOperatorStatusContainerStatusesLastStateWaitingPtrOutput() OperatorStatusContainerStatusesLastStateWaitingPtrOutput {
	return o
}

func (o OperatorStatusContainerStatusesLastStateWaitingPtrOutput) ToOperatorStatusContainerStatusesLastStateWaitingPtrOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesLastStateWaitingPtrOutput {
	return o
}

func (o OperatorStatusContainerStatusesLastStateWaitingPtrOutput) Elem() OperatorStatusContainerStatusesLastStateWaitingOutput {
	return o.ApplyT(func(v *OperatorStatusContainerStatusesLastStateWaiting) OperatorStatusContainerStatusesLastStateWaiting {
		return *v
	}).(OperatorStatusContainerStatusesLastStateWaitingOutput)
}

// Message regarding why the container is not yet running.
func (o OperatorStatusContainerStatusesLastStateWaitingPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusContainerStatusesLastStateWaiting) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// (brief) reason the container is not yet running.
func (o OperatorStatusContainerStatusesLastStateWaitingPtrOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusContainerStatusesLastStateWaiting) *string {
		if v == nil {
			return nil
		}
		return v.Reason
	}).(pulumi.StringPtrOutput)
}

// Details about the container's current condition.
type OperatorStatusContainerStatusesState struct {
	// Details about a running container
	Running *OperatorStatusContainerStatusesStateRunning `pulumi:"running"`
	// Details about a terminated container
	Terminated *OperatorStatusContainerStatusesStateTerminated `pulumi:"terminated"`
	// Details about a waiting container
	Waiting *OperatorStatusContainerStatusesStateWaiting `pulumi:"waiting"`
}

// OperatorStatusContainerStatusesStateInput is an input type that accepts OperatorStatusContainerStatusesStateArgs and OperatorStatusContainerStatusesStateOutput values.
// You can construct a concrete instance of `OperatorStatusContainerStatusesStateInput` via:
//
//          OperatorStatusContainerStatusesStateArgs{...}
type OperatorStatusContainerStatusesStateInput interface {
	pulumi.Input

	ToOperatorStatusContainerStatusesStateOutput() OperatorStatusContainerStatusesStateOutput
	ToOperatorStatusContainerStatusesStateOutputWithContext(context.Context) OperatorStatusContainerStatusesStateOutput
}

// Details about the container's current condition.
type OperatorStatusContainerStatusesStateArgs struct {
	// Details about a running container
	Running OperatorStatusContainerStatusesStateRunningPtrInput `pulumi:"running"`
	// Details about a terminated container
	Terminated OperatorStatusContainerStatusesStateTerminatedPtrInput `pulumi:"terminated"`
	// Details about a waiting container
	Waiting OperatorStatusContainerStatusesStateWaitingPtrInput `pulumi:"waiting"`
}

func (OperatorStatusContainerStatusesStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusContainerStatusesState)(nil)).Elem()
}

func (i OperatorStatusContainerStatusesStateArgs) ToOperatorStatusContainerStatusesStateOutput() OperatorStatusContainerStatusesStateOutput {
	return i.ToOperatorStatusContainerStatusesStateOutputWithContext(context.Background())
}

func (i OperatorStatusContainerStatusesStateArgs) ToOperatorStatusContainerStatusesStateOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusContainerStatusesStateOutput)
}

func (i OperatorStatusContainerStatusesStateArgs) ToOperatorStatusContainerStatusesStatePtrOutput() OperatorStatusContainerStatusesStatePtrOutput {
	return i.ToOperatorStatusContainerStatusesStatePtrOutputWithContext(context.Background())
}

func (i OperatorStatusContainerStatusesStateArgs) ToOperatorStatusContainerStatusesStatePtrOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusContainerStatusesStateOutput).ToOperatorStatusContainerStatusesStatePtrOutputWithContext(ctx)
}

// OperatorStatusContainerStatusesStatePtrInput is an input type that accepts OperatorStatusContainerStatusesStateArgs, OperatorStatusContainerStatusesStatePtr and OperatorStatusContainerStatusesStatePtrOutput values.
// You can construct a concrete instance of `OperatorStatusContainerStatusesStatePtrInput` via:
//
//          OperatorStatusContainerStatusesStateArgs{...}
//
//  or:
//
//          nil
type OperatorStatusContainerStatusesStatePtrInput interface {
	pulumi.Input

	ToOperatorStatusContainerStatusesStatePtrOutput() OperatorStatusContainerStatusesStatePtrOutput
	ToOperatorStatusContainerStatusesStatePtrOutputWithContext(context.Context) OperatorStatusContainerStatusesStatePtrOutput
}

type operatorStatusContainerStatusesStatePtrType OperatorStatusContainerStatusesStateArgs

func OperatorStatusContainerStatusesStatePtr(v *OperatorStatusContainerStatusesStateArgs) OperatorStatusContainerStatusesStatePtrInput {
	return (*operatorStatusContainerStatusesStatePtrType)(v)
}

func (*operatorStatusContainerStatusesStatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusContainerStatusesState)(nil)).Elem()
}

func (i *operatorStatusContainerStatusesStatePtrType) ToOperatorStatusContainerStatusesStatePtrOutput() OperatorStatusContainerStatusesStatePtrOutput {
	return i.ToOperatorStatusContainerStatusesStatePtrOutputWithContext(context.Background())
}

func (i *operatorStatusContainerStatusesStatePtrType) ToOperatorStatusContainerStatusesStatePtrOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusContainerStatusesStatePtrOutput)
}

// Details about the container's current condition.
type OperatorStatusContainerStatusesStateOutput struct{ *pulumi.OutputState }

func (OperatorStatusContainerStatusesStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusContainerStatusesState)(nil)).Elem()
}

func (o OperatorStatusContainerStatusesStateOutput) ToOperatorStatusContainerStatusesStateOutput() OperatorStatusContainerStatusesStateOutput {
	return o
}

func (o OperatorStatusContainerStatusesStateOutput) ToOperatorStatusContainerStatusesStateOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesStateOutput {
	return o
}

func (o OperatorStatusContainerStatusesStateOutput) ToOperatorStatusContainerStatusesStatePtrOutput() OperatorStatusContainerStatusesStatePtrOutput {
	return o.ToOperatorStatusContainerStatusesStatePtrOutputWithContext(context.Background())
}

func (o OperatorStatusContainerStatusesStateOutput) ToOperatorStatusContainerStatusesStatePtrOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesStatePtrOutput {
	return o.ApplyT(func(v OperatorStatusContainerStatusesState) *OperatorStatusContainerStatusesState {
		return &v
	}).(OperatorStatusContainerStatusesStatePtrOutput)
}

// Details about a running container
func (o OperatorStatusContainerStatusesStateOutput) Running() OperatorStatusContainerStatusesStateRunningPtrOutput {
	return o.ApplyT(func(v OperatorStatusContainerStatusesState) *OperatorStatusContainerStatusesStateRunning {
		return v.Running
	}).(OperatorStatusContainerStatusesStateRunningPtrOutput)
}

// Details about a terminated container
func (o OperatorStatusContainerStatusesStateOutput) Terminated() OperatorStatusContainerStatusesStateTerminatedPtrOutput {
	return o.ApplyT(func(v OperatorStatusContainerStatusesState) *OperatorStatusContainerStatusesStateTerminated {
		return v.Terminated
	}).(OperatorStatusContainerStatusesStateTerminatedPtrOutput)
}

// Details about a waiting container
func (o OperatorStatusContainerStatusesStateOutput) Waiting() OperatorStatusContainerStatusesStateWaitingPtrOutput {
	return o.ApplyT(func(v OperatorStatusContainerStatusesState) *OperatorStatusContainerStatusesStateWaiting {
		return v.Waiting
	}).(OperatorStatusContainerStatusesStateWaitingPtrOutput)
}

type OperatorStatusContainerStatusesStatePtrOutput struct{ *pulumi.OutputState }

func (OperatorStatusContainerStatusesStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusContainerStatusesState)(nil)).Elem()
}

func (o OperatorStatusContainerStatusesStatePtrOutput) ToOperatorStatusContainerStatusesStatePtrOutput() OperatorStatusContainerStatusesStatePtrOutput {
	return o
}

func (o OperatorStatusContainerStatusesStatePtrOutput) ToOperatorStatusContainerStatusesStatePtrOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesStatePtrOutput {
	return o
}

func (o OperatorStatusContainerStatusesStatePtrOutput) Elem() OperatorStatusContainerStatusesStateOutput {
	return o.ApplyT(func(v *OperatorStatusContainerStatusesState) OperatorStatusContainerStatusesState { return *v }).(OperatorStatusContainerStatusesStateOutput)
}

// Details about a running container
func (o OperatorStatusContainerStatusesStatePtrOutput) Running() OperatorStatusContainerStatusesStateRunningPtrOutput {
	return o.ApplyT(func(v *OperatorStatusContainerStatusesState) *OperatorStatusContainerStatusesStateRunning {
		if v == nil {
			return nil
		}
		return v.Running
	}).(OperatorStatusContainerStatusesStateRunningPtrOutput)
}

// Details about a terminated container
func (o OperatorStatusContainerStatusesStatePtrOutput) Terminated() OperatorStatusContainerStatusesStateTerminatedPtrOutput {
	return o.ApplyT(func(v *OperatorStatusContainerStatusesState) *OperatorStatusContainerStatusesStateTerminated {
		if v == nil {
			return nil
		}
		return v.Terminated
	}).(OperatorStatusContainerStatusesStateTerminatedPtrOutput)
}

// Details about a waiting container
func (o OperatorStatusContainerStatusesStatePtrOutput) Waiting() OperatorStatusContainerStatusesStateWaitingPtrOutput {
	return o.ApplyT(func(v *OperatorStatusContainerStatusesState) *OperatorStatusContainerStatusesStateWaiting {
		if v == nil {
			return nil
		}
		return v.Waiting
	}).(OperatorStatusContainerStatusesStateWaitingPtrOutput)
}

// Details about a running container
type OperatorStatusContainerStatusesStateRunning struct {
	// Time at which the container was last (re-)started
	StartedAt *string `pulumi:"startedAt"`
}

// OperatorStatusContainerStatusesStateRunningInput is an input type that accepts OperatorStatusContainerStatusesStateRunningArgs and OperatorStatusContainerStatusesStateRunningOutput values.
// You can construct a concrete instance of `OperatorStatusContainerStatusesStateRunningInput` via:
//
//          OperatorStatusContainerStatusesStateRunningArgs{...}
type OperatorStatusContainerStatusesStateRunningInput interface {
	pulumi.Input

	ToOperatorStatusContainerStatusesStateRunningOutput() OperatorStatusContainerStatusesStateRunningOutput
	ToOperatorStatusContainerStatusesStateRunningOutputWithContext(context.Context) OperatorStatusContainerStatusesStateRunningOutput
}

// Details about a running container
type OperatorStatusContainerStatusesStateRunningArgs struct {
	// Time at which the container was last (re-)started
	StartedAt pulumi.StringPtrInput `pulumi:"startedAt"`
}

func (OperatorStatusContainerStatusesStateRunningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusContainerStatusesStateRunning)(nil)).Elem()
}

func (i OperatorStatusContainerStatusesStateRunningArgs) ToOperatorStatusContainerStatusesStateRunningOutput() OperatorStatusContainerStatusesStateRunningOutput {
	return i.ToOperatorStatusContainerStatusesStateRunningOutputWithContext(context.Background())
}

func (i OperatorStatusContainerStatusesStateRunningArgs) ToOperatorStatusContainerStatusesStateRunningOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesStateRunningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusContainerStatusesStateRunningOutput)
}

func (i OperatorStatusContainerStatusesStateRunningArgs) ToOperatorStatusContainerStatusesStateRunningPtrOutput() OperatorStatusContainerStatusesStateRunningPtrOutput {
	return i.ToOperatorStatusContainerStatusesStateRunningPtrOutputWithContext(context.Background())
}

func (i OperatorStatusContainerStatusesStateRunningArgs) ToOperatorStatusContainerStatusesStateRunningPtrOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesStateRunningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusContainerStatusesStateRunningOutput).ToOperatorStatusContainerStatusesStateRunningPtrOutputWithContext(ctx)
}

// OperatorStatusContainerStatusesStateRunningPtrInput is an input type that accepts OperatorStatusContainerStatusesStateRunningArgs, OperatorStatusContainerStatusesStateRunningPtr and OperatorStatusContainerStatusesStateRunningPtrOutput values.
// You can construct a concrete instance of `OperatorStatusContainerStatusesStateRunningPtrInput` via:
//
//          OperatorStatusContainerStatusesStateRunningArgs{...}
//
//  or:
//
//          nil
type OperatorStatusContainerStatusesStateRunningPtrInput interface {
	pulumi.Input

	ToOperatorStatusContainerStatusesStateRunningPtrOutput() OperatorStatusContainerStatusesStateRunningPtrOutput
	ToOperatorStatusContainerStatusesStateRunningPtrOutputWithContext(context.Context) OperatorStatusContainerStatusesStateRunningPtrOutput
}

type operatorStatusContainerStatusesStateRunningPtrType OperatorStatusContainerStatusesStateRunningArgs

func OperatorStatusContainerStatusesStateRunningPtr(v *OperatorStatusContainerStatusesStateRunningArgs) OperatorStatusContainerStatusesStateRunningPtrInput {
	return (*operatorStatusContainerStatusesStateRunningPtrType)(v)
}

func (*operatorStatusContainerStatusesStateRunningPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusContainerStatusesStateRunning)(nil)).Elem()
}

func (i *operatorStatusContainerStatusesStateRunningPtrType) ToOperatorStatusContainerStatusesStateRunningPtrOutput() OperatorStatusContainerStatusesStateRunningPtrOutput {
	return i.ToOperatorStatusContainerStatusesStateRunningPtrOutputWithContext(context.Background())
}

func (i *operatorStatusContainerStatusesStateRunningPtrType) ToOperatorStatusContainerStatusesStateRunningPtrOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesStateRunningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusContainerStatusesStateRunningPtrOutput)
}

// Details about a running container
type OperatorStatusContainerStatusesStateRunningOutput struct{ *pulumi.OutputState }

func (OperatorStatusContainerStatusesStateRunningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusContainerStatusesStateRunning)(nil)).Elem()
}

func (o OperatorStatusContainerStatusesStateRunningOutput) ToOperatorStatusContainerStatusesStateRunningOutput() OperatorStatusContainerStatusesStateRunningOutput {
	return o
}

func (o OperatorStatusContainerStatusesStateRunningOutput) ToOperatorStatusContainerStatusesStateRunningOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesStateRunningOutput {
	return o
}

func (o OperatorStatusContainerStatusesStateRunningOutput) ToOperatorStatusContainerStatusesStateRunningPtrOutput() OperatorStatusContainerStatusesStateRunningPtrOutput {
	return o.ToOperatorStatusContainerStatusesStateRunningPtrOutputWithContext(context.Background())
}

func (o OperatorStatusContainerStatusesStateRunningOutput) ToOperatorStatusContainerStatusesStateRunningPtrOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesStateRunningPtrOutput {
	return o.ApplyT(func(v OperatorStatusContainerStatusesStateRunning) *OperatorStatusContainerStatusesStateRunning {
		return &v
	}).(OperatorStatusContainerStatusesStateRunningPtrOutput)
}

// Time at which the container was last (re-)started
func (o OperatorStatusContainerStatusesStateRunningOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusContainerStatusesStateRunning) *string { return v.StartedAt }).(pulumi.StringPtrOutput)
}

type OperatorStatusContainerStatusesStateRunningPtrOutput struct{ *pulumi.OutputState }

func (OperatorStatusContainerStatusesStateRunningPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusContainerStatusesStateRunning)(nil)).Elem()
}

func (o OperatorStatusContainerStatusesStateRunningPtrOutput) ToOperatorStatusContainerStatusesStateRunningPtrOutput() OperatorStatusContainerStatusesStateRunningPtrOutput {
	return o
}

func (o OperatorStatusContainerStatusesStateRunningPtrOutput) ToOperatorStatusContainerStatusesStateRunningPtrOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesStateRunningPtrOutput {
	return o
}

func (o OperatorStatusContainerStatusesStateRunningPtrOutput) Elem() OperatorStatusContainerStatusesStateRunningOutput {
	return o.ApplyT(func(v *OperatorStatusContainerStatusesStateRunning) OperatorStatusContainerStatusesStateRunning {
		return *v
	}).(OperatorStatusContainerStatusesStateRunningOutput)
}

// Time at which the container was last (re-)started
func (o OperatorStatusContainerStatusesStateRunningPtrOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusContainerStatusesStateRunning) *string {
		if v == nil {
			return nil
		}
		return v.StartedAt
	}).(pulumi.StringPtrOutput)
}

// Details about a terminated container
type OperatorStatusContainerStatusesStateTerminated struct {
	// Container's ID in the format 'docker://<container_id>'
	ContainerID *string `pulumi:"containerID"`
	// Exit status from the last termination of the container
	ExitCode int `pulumi:"exitCode"`
	// Time at which the container last terminated
	FinishedAt *string `pulumi:"finishedAt"`
	// Message regarding the last termination of the container
	Message *string `pulumi:"message"`
	// (brief) reason from the last termination of the container
	Reason *string `pulumi:"reason"`
	// Signal from the last termination of the container
	Signal *int `pulumi:"signal"`
	// Time at which previous execution of the container started
	StartedAt *string `pulumi:"startedAt"`
}

// OperatorStatusContainerStatusesStateTerminatedInput is an input type that accepts OperatorStatusContainerStatusesStateTerminatedArgs and OperatorStatusContainerStatusesStateTerminatedOutput values.
// You can construct a concrete instance of `OperatorStatusContainerStatusesStateTerminatedInput` via:
//
//          OperatorStatusContainerStatusesStateTerminatedArgs{...}
type OperatorStatusContainerStatusesStateTerminatedInput interface {
	pulumi.Input

	ToOperatorStatusContainerStatusesStateTerminatedOutput() OperatorStatusContainerStatusesStateTerminatedOutput
	ToOperatorStatusContainerStatusesStateTerminatedOutputWithContext(context.Context) OperatorStatusContainerStatusesStateTerminatedOutput
}

// Details about a terminated container
type OperatorStatusContainerStatusesStateTerminatedArgs struct {
	// Container's ID in the format 'docker://<container_id>'
	ContainerID pulumi.StringPtrInput `pulumi:"containerID"`
	// Exit status from the last termination of the container
	ExitCode pulumi.IntInput `pulumi:"exitCode"`
	// Time at which the container last terminated
	FinishedAt pulumi.StringPtrInput `pulumi:"finishedAt"`
	// Message regarding the last termination of the container
	Message pulumi.StringPtrInput `pulumi:"message"`
	// (brief) reason from the last termination of the container
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Signal from the last termination of the container
	Signal pulumi.IntPtrInput `pulumi:"signal"`
	// Time at which previous execution of the container started
	StartedAt pulumi.StringPtrInput `pulumi:"startedAt"`
}

func (OperatorStatusContainerStatusesStateTerminatedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusContainerStatusesStateTerminated)(nil)).Elem()
}

func (i OperatorStatusContainerStatusesStateTerminatedArgs) ToOperatorStatusContainerStatusesStateTerminatedOutput() OperatorStatusContainerStatusesStateTerminatedOutput {
	return i.ToOperatorStatusContainerStatusesStateTerminatedOutputWithContext(context.Background())
}

func (i OperatorStatusContainerStatusesStateTerminatedArgs) ToOperatorStatusContainerStatusesStateTerminatedOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesStateTerminatedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusContainerStatusesStateTerminatedOutput)
}

func (i OperatorStatusContainerStatusesStateTerminatedArgs) ToOperatorStatusContainerStatusesStateTerminatedPtrOutput() OperatorStatusContainerStatusesStateTerminatedPtrOutput {
	return i.ToOperatorStatusContainerStatusesStateTerminatedPtrOutputWithContext(context.Background())
}

func (i OperatorStatusContainerStatusesStateTerminatedArgs) ToOperatorStatusContainerStatusesStateTerminatedPtrOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesStateTerminatedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusContainerStatusesStateTerminatedOutput).ToOperatorStatusContainerStatusesStateTerminatedPtrOutputWithContext(ctx)
}

// OperatorStatusContainerStatusesStateTerminatedPtrInput is an input type that accepts OperatorStatusContainerStatusesStateTerminatedArgs, OperatorStatusContainerStatusesStateTerminatedPtr and OperatorStatusContainerStatusesStateTerminatedPtrOutput values.
// You can construct a concrete instance of `OperatorStatusContainerStatusesStateTerminatedPtrInput` via:
//
//          OperatorStatusContainerStatusesStateTerminatedArgs{...}
//
//  or:
//
//          nil
type OperatorStatusContainerStatusesStateTerminatedPtrInput interface {
	pulumi.Input

	ToOperatorStatusContainerStatusesStateTerminatedPtrOutput() OperatorStatusContainerStatusesStateTerminatedPtrOutput
	ToOperatorStatusContainerStatusesStateTerminatedPtrOutputWithContext(context.Context) OperatorStatusContainerStatusesStateTerminatedPtrOutput
}

type operatorStatusContainerStatusesStateTerminatedPtrType OperatorStatusContainerStatusesStateTerminatedArgs

func OperatorStatusContainerStatusesStateTerminatedPtr(v *OperatorStatusContainerStatusesStateTerminatedArgs) OperatorStatusContainerStatusesStateTerminatedPtrInput {
	return (*operatorStatusContainerStatusesStateTerminatedPtrType)(v)
}

func (*operatorStatusContainerStatusesStateTerminatedPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusContainerStatusesStateTerminated)(nil)).Elem()
}

func (i *operatorStatusContainerStatusesStateTerminatedPtrType) ToOperatorStatusContainerStatusesStateTerminatedPtrOutput() OperatorStatusContainerStatusesStateTerminatedPtrOutput {
	return i.ToOperatorStatusContainerStatusesStateTerminatedPtrOutputWithContext(context.Background())
}

func (i *operatorStatusContainerStatusesStateTerminatedPtrType) ToOperatorStatusContainerStatusesStateTerminatedPtrOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesStateTerminatedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusContainerStatusesStateTerminatedPtrOutput)
}

// Details about a terminated container
type OperatorStatusContainerStatusesStateTerminatedOutput struct{ *pulumi.OutputState }

func (OperatorStatusContainerStatusesStateTerminatedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusContainerStatusesStateTerminated)(nil)).Elem()
}

func (o OperatorStatusContainerStatusesStateTerminatedOutput) ToOperatorStatusContainerStatusesStateTerminatedOutput() OperatorStatusContainerStatusesStateTerminatedOutput {
	return o
}

func (o OperatorStatusContainerStatusesStateTerminatedOutput) ToOperatorStatusContainerStatusesStateTerminatedOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesStateTerminatedOutput {
	return o
}

func (o OperatorStatusContainerStatusesStateTerminatedOutput) ToOperatorStatusContainerStatusesStateTerminatedPtrOutput() OperatorStatusContainerStatusesStateTerminatedPtrOutput {
	return o.ToOperatorStatusContainerStatusesStateTerminatedPtrOutputWithContext(context.Background())
}

func (o OperatorStatusContainerStatusesStateTerminatedOutput) ToOperatorStatusContainerStatusesStateTerminatedPtrOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesStateTerminatedPtrOutput {
	return o.ApplyT(func(v OperatorStatusContainerStatusesStateTerminated) *OperatorStatusContainerStatusesStateTerminated {
		return &v
	}).(OperatorStatusContainerStatusesStateTerminatedPtrOutput)
}

// Container's ID in the format 'docker://<container_id>'
func (o OperatorStatusContainerStatusesStateTerminatedOutput) ContainerID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusContainerStatusesStateTerminated) *string { return v.ContainerID }).(pulumi.StringPtrOutput)
}

// Exit status from the last termination of the container
func (o OperatorStatusContainerStatusesStateTerminatedOutput) ExitCode() pulumi.IntOutput {
	return o.ApplyT(func(v OperatorStatusContainerStatusesStateTerminated) int { return v.ExitCode }).(pulumi.IntOutput)
}

// Time at which the container last terminated
func (o OperatorStatusContainerStatusesStateTerminatedOutput) FinishedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusContainerStatusesStateTerminated) *string { return v.FinishedAt }).(pulumi.StringPtrOutput)
}

// Message regarding the last termination of the container
func (o OperatorStatusContainerStatusesStateTerminatedOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusContainerStatusesStateTerminated) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// (brief) reason from the last termination of the container
func (o OperatorStatusContainerStatusesStateTerminatedOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusContainerStatusesStateTerminated) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Signal from the last termination of the container
func (o OperatorStatusContainerStatusesStateTerminatedOutput) Signal() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OperatorStatusContainerStatusesStateTerminated) *int { return v.Signal }).(pulumi.IntPtrOutput)
}

// Time at which previous execution of the container started
func (o OperatorStatusContainerStatusesStateTerminatedOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusContainerStatusesStateTerminated) *string { return v.StartedAt }).(pulumi.StringPtrOutput)
}

type OperatorStatusContainerStatusesStateTerminatedPtrOutput struct{ *pulumi.OutputState }

func (OperatorStatusContainerStatusesStateTerminatedPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusContainerStatusesStateTerminated)(nil)).Elem()
}

func (o OperatorStatusContainerStatusesStateTerminatedPtrOutput) ToOperatorStatusContainerStatusesStateTerminatedPtrOutput() OperatorStatusContainerStatusesStateTerminatedPtrOutput {
	return o
}

func (o OperatorStatusContainerStatusesStateTerminatedPtrOutput) ToOperatorStatusContainerStatusesStateTerminatedPtrOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesStateTerminatedPtrOutput {
	return o
}

func (o OperatorStatusContainerStatusesStateTerminatedPtrOutput) Elem() OperatorStatusContainerStatusesStateTerminatedOutput {
	return o.ApplyT(func(v *OperatorStatusContainerStatusesStateTerminated) OperatorStatusContainerStatusesStateTerminated {
		return *v
	}).(OperatorStatusContainerStatusesStateTerminatedOutput)
}

// Container's ID in the format 'docker://<container_id>'
func (o OperatorStatusContainerStatusesStateTerminatedPtrOutput) ContainerID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusContainerStatusesStateTerminated) *string {
		if v == nil {
			return nil
		}
		return v.ContainerID
	}).(pulumi.StringPtrOutput)
}

// Exit status from the last termination of the container
func (o OperatorStatusContainerStatusesStateTerminatedPtrOutput) ExitCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OperatorStatusContainerStatusesStateTerminated) *int {
		if v == nil {
			return nil
		}
		return &v.ExitCode
	}).(pulumi.IntPtrOutput)
}

// Time at which the container last terminated
func (o OperatorStatusContainerStatusesStateTerminatedPtrOutput) FinishedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusContainerStatusesStateTerminated) *string {
		if v == nil {
			return nil
		}
		return v.FinishedAt
	}).(pulumi.StringPtrOutput)
}

// Message regarding the last termination of the container
func (o OperatorStatusContainerStatusesStateTerminatedPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusContainerStatusesStateTerminated) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// (brief) reason from the last termination of the container
func (o OperatorStatusContainerStatusesStateTerminatedPtrOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusContainerStatusesStateTerminated) *string {
		if v == nil {
			return nil
		}
		return v.Reason
	}).(pulumi.StringPtrOutput)
}

// Signal from the last termination of the container
func (o OperatorStatusContainerStatusesStateTerminatedPtrOutput) Signal() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OperatorStatusContainerStatusesStateTerminated) *int {
		if v == nil {
			return nil
		}
		return v.Signal
	}).(pulumi.IntPtrOutput)
}

// Time at which previous execution of the container started
func (o OperatorStatusContainerStatusesStateTerminatedPtrOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusContainerStatusesStateTerminated) *string {
		if v == nil {
			return nil
		}
		return v.StartedAt
	}).(pulumi.StringPtrOutput)
}

// Details about a waiting container
type OperatorStatusContainerStatusesStateWaiting struct {
	// Message regarding why the container is not yet running.
	Message *string `pulumi:"message"`
	// (brief) reason the container is not yet running.
	Reason *string `pulumi:"reason"`
}

// OperatorStatusContainerStatusesStateWaitingInput is an input type that accepts OperatorStatusContainerStatusesStateWaitingArgs and OperatorStatusContainerStatusesStateWaitingOutput values.
// You can construct a concrete instance of `OperatorStatusContainerStatusesStateWaitingInput` via:
//
//          OperatorStatusContainerStatusesStateWaitingArgs{...}
type OperatorStatusContainerStatusesStateWaitingInput interface {
	pulumi.Input

	ToOperatorStatusContainerStatusesStateWaitingOutput() OperatorStatusContainerStatusesStateWaitingOutput
	ToOperatorStatusContainerStatusesStateWaitingOutputWithContext(context.Context) OperatorStatusContainerStatusesStateWaitingOutput
}

// Details about a waiting container
type OperatorStatusContainerStatusesStateWaitingArgs struct {
	// Message regarding why the container is not yet running.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// (brief) reason the container is not yet running.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
}

func (OperatorStatusContainerStatusesStateWaitingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusContainerStatusesStateWaiting)(nil)).Elem()
}

func (i OperatorStatusContainerStatusesStateWaitingArgs) ToOperatorStatusContainerStatusesStateWaitingOutput() OperatorStatusContainerStatusesStateWaitingOutput {
	return i.ToOperatorStatusContainerStatusesStateWaitingOutputWithContext(context.Background())
}

func (i OperatorStatusContainerStatusesStateWaitingArgs) ToOperatorStatusContainerStatusesStateWaitingOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesStateWaitingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusContainerStatusesStateWaitingOutput)
}

func (i OperatorStatusContainerStatusesStateWaitingArgs) ToOperatorStatusContainerStatusesStateWaitingPtrOutput() OperatorStatusContainerStatusesStateWaitingPtrOutput {
	return i.ToOperatorStatusContainerStatusesStateWaitingPtrOutputWithContext(context.Background())
}

func (i OperatorStatusContainerStatusesStateWaitingArgs) ToOperatorStatusContainerStatusesStateWaitingPtrOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesStateWaitingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusContainerStatusesStateWaitingOutput).ToOperatorStatusContainerStatusesStateWaitingPtrOutputWithContext(ctx)
}

// OperatorStatusContainerStatusesStateWaitingPtrInput is an input type that accepts OperatorStatusContainerStatusesStateWaitingArgs, OperatorStatusContainerStatusesStateWaitingPtr and OperatorStatusContainerStatusesStateWaitingPtrOutput values.
// You can construct a concrete instance of `OperatorStatusContainerStatusesStateWaitingPtrInput` via:
//
//          OperatorStatusContainerStatusesStateWaitingArgs{...}
//
//  or:
//
//          nil
type OperatorStatusContainerStatusesStateWaitingPtrInput interface {
	pulumi.Input

	ToOperatorStatusContainerStatusesStateWaitingPtrOutput() OperatorStatusContainerStatusesStateWaitingPtrOutput
	ToOperatorStatusContainerStatusesStateWaitingPtrOutputWithContext(context.Context) OperatorStatusContainerStatusesStateWaitingPtrOutput
}

type operatorStatusContainerStatusesStateWaitingPtrType OperatorStatusContainerStatusesStateWaitingArgs

func OperatorStatusContainerStatusesStateWaitingPtr(v *OperatorStatusContainerStatusesStateWaitingArgs) OperatorStatusContainerStatusesStateWaitingPtrInput {
	return (*operatorStatusContainerStatusesStateWaitingPtrType)(v)
}

func (*operatorStatusContainerStatusesStateWaitingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusContainerStatusesStateWaiting)(nil)).Elem()
}

func (i *operatorStatusContainerStatusesStateWaitingPtrType) ToOperatorStatusContainerStatusesStateWaitingPtrOutput() OperatorStatusContainerStatusesStateWaitingPtrOutput {
	return i.ToOperatorStatusContainerStatusesStateWaitingPtrOutputWithContext(context.Background())
}

func (i *operatorStatusContainerStatusesStateWaitingPtrType) ToOperatorStatusContainerStatusesStateWaitingPtrOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesStateWaitingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusContainerStatusesStateWaitingPtrOutput)
}

// Details about a waiting container
type OperatorStatusContainerStatusesStateWaitingOutput struct{ *pulumi.OutputState }

func (OperatorStatusContainerStatusesStateWaitingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusContainerStatusesStateWaiting)(nil)).Elem()
}

func (o OperatorStatusContainerStatusesStateWaitingOutput) ToOperatorStatusContainerStatusesStateWaitingOutput() OperatorStatusContainerStatusesStateWaitingOutput {
	return o
}

func (o OperatorStatusContainerStatusesStateWaitingOutput) ToOperatorStatusContainerStatusesStateWaitingOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesStateWaitingOutput {
	return o
}

func (o OperatorStatusContainerStatusesStateWaitingOutput) ToOperatorStatusContainerStatusesStateWaitingPtrOutput() OperatorStatusContainerStatusesStateWaitingPtrOutput {
	return o.ToOperatorStatusContainerStatusesStateWaitingPtrOutputWithContext(context.Background())
}

func (o OperatorStatusContainerStatusesStateWaitingOutput) ToOperatorStatusContainerStatusesStateWaitingPtrOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesStateWaitingPtrOutput {
	return o.ApplyT(func(v OperatorStatusContainerStatusesStateWaiting) *OperatorStatusContainerStatusesStateWaiting {
		return &v
	}).(OperatorStatusContainerStatusesStateWaitingPtrOutput)
}

// Message regarding why the container is not yet running.
func (o OperatorStatusContainerStatusesStateWaitingOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusContainerStatusesStateWaiting) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// (brief) reason the container is not yet running.
func (o OperatorStatusContainerStatusesStateWaitingOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusContainerStatusesStateWaiting) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

type OperatorStatusContainerStatusesStateWaitingPtrOutput struct{ *pulumi.OutputState }

func (OperatorStatusContainerStatusesStateWaitingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusContainerStatusesStateWaiting)(nil)).Elem()
}

func (o OperatorStatusContainerStatusesStateWaitingPtrOutput) ToOperatorStatusContainerStatusesStateWaitingPtrOutput() OperatorStatusContainerStatusesStateWaitingPtrOutput {
	return o
}

func (o OperatorStatusContainerStatusesStateWaitingPtrOutput) ToOperatorStatusContainerStatusesStateWaitingPtrOutputWithContext(ctx context.Context) OperatorStatusContainerStatusesStateWaitingPtrOutput {
	return o
}

func (o OperatorStatusContainerStatusesStateWaitingPtrOutput) Elem() OperatorStatusContainerStatusesStateWaitingOutput {
	return o.ApplyT(func(v *OperatorStatusContainerStatusesStateWaiting) OperatorStatusContainerStatusesStateWaiting {
		return *v
	}).(OperatorStatusContainerStatusesStateWaitingOutput)
}

// Message regarding why the container is not yet running.
func (o OperatorStatusContainerStatusesStateWaitingPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusContainerStatusesStateWaiting) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// (brief) reason the container is not yet running.
func (o OperatorStatusContainerStatusesStateWaitingPtrOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusContainerStatusesStateWaiting) *string {
		if v == nil {
			return nil
		}
		return v.Reason
	}).(pulumi.StringPtrOutput)
}

// ContainerStatus contains details for the current status of this container.
type OperatorStatusEphemeralContainerStatuses struct {
	// Container's ID in the format 'docker://<container_id>'.
	ContainerID *string `pulumi:"containerID"`
	// The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images TODO(dchen1107): Which image the container is running with?
	Image string `pulumi:"image"`
	// ImageID of the container's image.
	ImageID string `pulumi:"imageID"`
	// Details about the container's last termination condition.
	LastState *OperatorStatusEphemeralContainerStatusesLastState `pulumi:"lastState"`
	// This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
	Name string `pulumi:"name"`
	// Specifies whether the container has passed its readiness probe.
	Ready bool `pulumi:"ready"`
	// The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.
	RestartCount int `pulumi:"restartCount"`
	// Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
	Started *bool `pulumi:"started"`
	// Details about the container's current condition.
	State *OperatorStatusEphemeralContainerStatusesState `pulumi:"state"`
}

// OperatorStatusEphemeralContainerStatusesInput is an input type that accepts OperatorStatusEphemeralContainerStatusesArgs and OperatorStatusEphemeralContainerStatusesOutput values.
// You can construct a concrete instance of `OperatorStatusEphemeralContainerStatusesInput` via:
//
//          OperatorStatusEphemeralContainerStatusesArgs{...}
type OperatorStatusEphemeralContainerStatusesInput interface {
	pulumi.Input

	ToOperatorStatusEphemeralContainerStatusesOutput() OperatorStatusEphemeralContainerStatusesOutput
	ToOperatorStatusEphemeralContainerStatusesOutputWithContext(context.Context) OperatorStatusEphemeralContainerStatusesOutput
}

// ContainerStatus contains details for the current status of this container.
type OperatorStatusEphemeralContainerStatusesArgs struct {
	// Container's ID in the format 'docker://<container_id>'.
	ContainerID pulumi.StringPtrInput `pulumi:"containerID"`
	// The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images TODO(dchen1107): Which image the container is running with?
	Image pulumi.StringInput `pulumi:"image"`
	// ImageID of the container's image.
	ImageID pulumi.StringInput `pulumi:"imageID"`
	// Details about the container's last termination condition.
	LastState OperatorStatusEphemeralContainerStatusesLastStatePtrInput `pulumi:"lastState"`
	// This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies whether the container has passed its readiness probe.
	Ready pulumi.BoolInput `pulumi:"ready"`
	// The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.
	RestartCount pulumi.IntInput `pulumi:"restartCount"`
	// Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
	Started pulumi.BoolPtrInput `pulumi:"started"`
	// Details about the container's current condition.
	State OperatorStatusEphemeralContainerStatusesStatePtrInput `pulumi:"state"`
}

func (OperatorStatusEphemeralContainerStatusesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusEphemeralContainerStatuses)(nil)).Elem()
}

func (i OperatorStatusEphemeralContainerStatusesArgs) ToOperatorStatusEphemeralContainerStatusesOutput() OperatorStatusEphemeralContainerStatusesOutput {
	return i.ToOperatorStatusEphemeralContainerStatusesOutputWithContext(context.Background())
}

func (i OperatorStatusEphemeralContainerStatusesArgs) ToOperatorStatusEphemeralContainerStatusesOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusEphemeralContainerStatusesOutput)
}

// OperatorStatusEphemeralContainerStatusesArrayInput is an input type that accepts OperatorStatusEphemeralContainerStatusesArray and OperatorStatusEphemeralContainerStatusesArrayOutput values.
// You can construct a concrete instance of `OperatorStatusEphemeralContainerStatusesArrayInput` via:
//
//          OperatorStatusEphemeralContainerStatusesArray{ OperatorStatusEphemeralContainerStatusesArgs{...} }
type OperatorStatusEphemeralContainerStatusesArrayInput interface {
	pulumi.Input

	ToOperatorStatusEphemeralContainerStatusesArrayOutput() OperatorStatusEphemeralContainerStatusesArrayOutput
	ToOperatorStatusEphemeralContainerStatusesArrayOutputWithContext(context.Context) OperatorStatusEphemeralContainerStatusesArrayOutput
}

type OperatorStatusEphemeralContainerStatusesArray []OperatorStatusEphemeralContainerStatusesInput

func (OperatorStatusEphemeralContainerStatusesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OperatorStatusEphemeralContainerStatuses)(nil)).Elem()
}

func (i OperatorStatusEphemeralContainerStatusesArray) ToOperatorStatusEphemeralContainerStatusesArrayOutput() OperatorStatusEphemeralContainerStatusesArrayOutput {
	return i.ToOperatorStatusEphemeralContainerStatusesArrayOutputWithContext(context.Background())
}

func (i OperatorStatusEphemeralContainerStatusesArray) ToOperatorStatusEphemeralContainerStatusesArrayOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusEphemeralContainerStatusesArrayOutput)
}

// ContainerStatus contains details for the current status of this container.
type OperatorStatusEphemeralContainerStatusesOutput struct{ *pulumi.OutputState }

func (OperatorStatusEphemeralContainerStatusesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusEphemeralContainerStatuses)(nil)).Elem()
}

func (o OperatorStatusEphemeralContainerStatusesOutput) ToOperatorStatusEphemeralContainerStatusesOutput() OperatorStatusEphemeralContainerStatusesOutput {
	return o
}

func (o OperatorStatusEphemeralContainerStatusesOutput) ToOperatorStatusEphemeralContainerStatusesOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesOutput {
	return o
}

// Container's ID in the format 'docker://<container_id>'.
func (o OperatorStatusEphemeralContainerStatusesOutput) ContainerID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusEphemeralContainerStatuses) *string { return v.ContainerID }).(pulumi.StringPtrOutput)
}

// The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images TODO(dchen1107): Which image the container is running with?
func (o OperatorStatusEphemeralContainerStatusesOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v OperatorStatusEphemeralContainerStatuses) string { return v.Image }).(pulumi.StringOutput)
}

// ImageID of the container's image.
func (o OperatorStatusEphemeralContainerStatusesOutput) ImageID() pulumi.StringOutput {
	return o.ApplyT(func(v OperatorStatusEphemeralContainerStatuses) string { return v.ImageID }).(pulumi.StringOutput)
}

// Details about the container's last termination condition.
func (o OperatorStatusEphemeralContainerStatusesOutput) LastState() OperatorStatusEphemeralContainerStatusesLastStatePtrOutput {
	return o.ApplyT(func(v OperatorStatusEphemeralContainerStatuses) *OperatorStatusEphemeralContainerStatusesLastState {
		return v.LastState
	}).(OperatorStatusEphemeralContainerStatusesLastStatePtrOutput)
}

// This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
func (o OperatorStatusEphemeralContainerStatusesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v OperatorStatusEphemeralContainerStatuses) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies whether the container has passed its readiness probe.
func (o OperatorStatusEphemeralContainerStatusesOutput) Ready() pulumi.BoolOutput {
	return o.ApplyT(func(v OperatorStatusEphemeralContainerStatuses) bool { return v.Ready }).(pulumi.BoolOutput)
}

// The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.
func (o OperatorStatusEphemeralContainerStatusesOutput) RestartCount() pulumi.IntOutput {
	return o.ApplyT(func(v OperatorStatusEphemeralContainerStatuses) int { return v.RestartCount }).(pulumi.IntOutput)
}

// Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
func (o OperatorStatusEphemeralContainerStatusesOutput) Started() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OperatorStatusEphemeralContainerStatuses) *bool { return v.Started }).(pulumi.BoolPtrOutput)
}

// Details about the container's current condition.
func (o OperatorStatusEphemeralContainerStatusesOutput) State() OperatorStatusEphemeralContainerStatusesStatePtrOutput {
	return o.ApplyT(func(v OperatorStatusEphemeralContainerStatuses) *OperatorStatusEphemeralContainerStatusesState {
		return v.State
	}).(OperatorStatusEphemeralContainerStatusesStatePtrOutput)
}

type OperatorStatusEphemeralContainerStatusesArrayOutput struct{ *pulumi.OutputState }

func (OperatorStatusEphemeralContainerStatusesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OperatorStatusEphemeralContainerStatuses)(nil)).Elem()
}

func (o OperatorStatusEphemeralContainerStatusesArrayOutput) ToOperatorStatusEphemeralContainerStatusesArrayOutput() OperatorStatusEphemeralContainerStatusesArrayOutput {
	return o
}

func (o OperatorStatusEphemeralContainerStatusesArrayOutput) ToOperatorStatusEphemeralContainerStatusesArrayOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesArrayOutput {
	return o
}

func (o OperatorStatusEphemeralContainerStatusesArrayOutput) Index(i pulumi.IntInput) OperatorStatusEphemeralContainerStatusesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OperatorStatusEphemeralContainerStatuses {
		return vs[0].([]OperatorStatusEphemeralContainerStatuses)[vs[1].(int)]
	}).(OperatorStatusEphemeralContainerStatusesOutput)
}

// Details about the container's last termination condition.
type OperatorStatusEphemeralContainerStatusesLastState struct {
	// Details about a running container
	Running *OperatorStatusEphemeralContainerStatusesLastStateRunning `pulumi:"running"`
	// Details about a terminated container
	Terminated *OperatorStatusEphemeralContainerStatusesLastStateTerminated `pulumi:"terminated"`
	// Details about a waiting container
	Waiting *OperatorStatusEphemeralContainerStatusesLastStateWaiting `pulumi:"waiting"`
}

// OperatorStatusEphemeralContainerStatusesLastStateInput is an input type that accepts OperatorStatusEphemeralContainerStatusesLastStateArgs and OperatorStatusEphemeralContainerStatusesLastStateOutput values.
// You can construct a concrete instance of `OperatorStatusEphemeralContainerStatusesLastStateInput` via:
//
//          OperatorStatusEphemeralContainerStatusesLastStateArgs{...}
type OperatorStatusEphemeralContainerStatusesLastStateInput interface {
	pulumi.Input

	ToOperatorStatusEphemeralContainerStatusesLastStateOutput() OperatorStatusEphemeralContainerStatusesLastStateOutput
	ToOperatorStatusEphemeralContainerStatusesLastStateOutputWithContext(context.Context) OperatorStatusEphemeralContainerStatusesLastStateOutput
}

// Details about the container's last termination condition.
type OperatorStatusEphemeralContainerStatusesLastStateArgs struct {
	// Details about a running container
	Running OperatorStatusEphemeralContainerStatusesLastStateRunningPtrInput `pulumi:"running"`
	// Details about a terminated container
	Terminated OperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrInput `pulumi:"terminated"`
	// Details about a waiting container
	Waiting OperatorStatusEphemeralContainerStatusesLastStateWaitingPtrInput `pulumi:"waiting"`
}

func (OperatorStatusEphemeralContainerStatusesLastStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusEphemeralContainerStatusesLastState)(nil)).Elem()
}

func (i OperatorStatusEphemeralContainerStatusesLastStateArgs) ToOperatorStatusEphemeralContainerStatusesLastStateOutput() OperatorStatusEphemeralContainerStatusesLastStateOutput {
	return i.ToOperatorStatusEphemeralContainerStatusesLastStateOutputWithContext(context.Background())
}

func (i OperatorStatusEphemeralContainerStatusesLastStateArgs) ToOperatorStatusEphemeralContainerStatusesLastStateOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesLastStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusEphemeralContainerStatusesLastStateOutput)
}

func (i OperatorStatusEphemeralContainerStatusesLastStateArgs) ToOperatorStatusEphemeralContainerStatusesLastStatePtrOutput() OperatorStatusEphemeralContainerStatusesLastStatePtrOutput {
	return i.ToOperatorStatusEphemeralContainerStatusesLastStatePtrOutputWithContext(context.Background())
}

func (i OperatorStatusEphemeralContainerStatusesLastStateArgs) ToOperatorStatusEphemeralContainerStatusesLastStatePtrOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesLastStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusEphemeralContainerStatusesLastStateOutput).ToOperatorStatusEphemeralContainerStatusesLastStatePtrOutputWithContext(ctx)
}

// OperatorStatusEphemeralContainerStatusesLastStatePtrInput is an input type that accepts OperatorStatusEphemeralContainerStatusesLastStateArgs, OperatorStatusEphemeralContainerStatusesLastStatePtr and OperatorStatusEphemeralContainerStatusesLastStatePtrOutput values.
// You can construct a concrete instance of `OperatorStatusEphemeralContainerStatusesLastStatePtrInput` via:
//
//          OperatorStatusEphemeralContainerStatusesLastStateArgs{...}
//
//  or:
//
//          nil
type OperatorStatusEphemeralContainerStatusesLastStatePtrInput interface {
	pulumi.Input

	ToOperatorStatusEphemeralContainerStatusesLastStatePtrOutput() OperatorStatusEphemeralContainerStatusesLastStatePtrOutput
	ToOperatorStatusEphemeralContainerStatusesLastStatePtrOutputWithContext(context.Context) OperatorStatusEphemeralContainerStatusesLastStatePtrOutput
}

type operatorStatusEphemeralContainerStatusesLastStatePtrType OperatorStatusEphemeralContainerStatusesLastStateArgs

func OperatorStatusEphemeralContainerStatusesLastStatePtr(v *OperatorStatusEphemeralContainerStatusesLastStateArgs) OperatorStatusEphemeralContainerStatusesLastStatePtrInput {
	return (*operatorStatusEphemeralContainerStatusesLastStatePtrType)(v)
}

func (*operatorStatusEphemeralContainerStatusesLastStatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusEphemeralContainerStatusesLastState)(nil)).Elem()
}

func (i *operatorStatusEphemeralContainerStatusesLastStatePtrType) ToOperatorStatusEphemeralContainerStatusesLastStatePtrOutput() OperatorStatusEphemeralContainerStatusesLastStatePtrOutput {
	return i.ToOperatorStatusEphemeralContainerStatusesLastStatePtrOutputWithContext(context.Background())
}

func (i *operatorStatusEphemeralContainerStatusesLastStatePtrType) ToOperatorStatusEphemeralContainerStatusesLastStatePtrOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesLastStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusEphemeralContainerStatusesLastStatePtrOutput)
}

// Details about the container's last termination condition.
type OperatorStatusEphemeralContainerStatusesLastStateOutput struct{ *pulumi.OutputState }

func (OperatorStatusEphemeralContainerStatusesLastStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusEphemeralContainerStatusesLastState)(nil)).Elem()
}

func (o OperatorStatusEphemeralContainerStatusesLastStateOutput) ToOperatorStatusEphemeralContainerStatusesLastStateOutput() OperatorStatusEphemeralContainerStatusesLastStateOutput {
	return o
}

func (o OperatorStatusEphemeralContainerStatusesLastStateOutput) ToOperatorStatusEphemeralContainerStatusesLastStateOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesLastStateOutput {
	return o
}

func (o OperatorStatusEphemeralContainerStatusesLastStateOutput) ToOperatorStatusEphemeralContainerStatusesLastStatePtrOutput() OperatorStatusEphemeralContainerStatusesLastStatePtrOutput {
	return o.ToOperatorStatusEphemeralContainerStatusesLastStatePtrOutputWithContext(context.Background())
}

func (o OperatorStatusEphemeralContainerStatusesLastStateOutput) ToOperatorStatusEphemeralContainerStatusesLastStatePtrOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesLastStatePtrOutput {
	return o.ApplyT(func(v OperatorStatusEphemeralContainerStatusesLastState) *OperatorStatusEphemeralContainerStatusesLastState {
		return &v
	}).(OperatorStatusEphemeralContainerStatusesLastStatePtrOutput)
}

// Details about a running container
func (o OperatorStatusEphemeralContainerStatusesLastStateOutput) Running() OperatorStatusEphemeralContainerStatusesLastStateRunningPtrOutput {
	return o.ApplyT(func(v OperatorStatusEphemeralContainerStatusesLastState) *OperatorStatusEphemeralContainerStatusesLastStateRunning {
		return v.Running
	}).(OperatorStatusEphemeralContainerStatusesLastStateRunningPtrOutput)
}

// Details about a terminated container
func (o OperatorStatusEphemeralContainerStatusesLastStateOutput) Terminated() OperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutput {
	return o.ApplyT(func(v OperatorStatusEphemeralContainerStatusesLastState) *OperatorStatusEphemeralContainerStatusesLastStateTerminated {
		return v.Terminated
	}).(OperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutput)
}

// Details about a waiting container
func (o OperatorStatusEphemeralContainerStatusesLastStateOutput) Waiting() OperatorStatusEphemeralContainerStatusesLastStateWaitingPtrOutput {
	return o.ApplyT(func(v OperatorStatusEphemeralContainerStatusesLastState) *OperatorStatusEphemeralContainerStatusesLastStateWaiting {
		return v.Waiting
	}).(OperatorStatusEphemeralContainerStatusesLastStateWaitingPtrOutput)
}

type OperatorStatusEphemeralContainerStatusesLastStatePtrOutput struct{ *pulumi.OutputState }

func (OperatorStatusEphemeralContainerStatusesLastStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusEphemeralContainerStatusesLastState)(nil)).Elem()
}

func (o OperatorStatusEphemeralContainerStatusesLastStatePtrOutput) ToOperatorStatusEphemeralContainerStatusesLastStatePtrOutput() OperatorStatusEphemeralContainerStatusesLastStatePtrOutput {
	return o
}

func (o OperatorStatusEphemeralContainerStatusesLastStatePtrOutput) ToOperatorStatusEphemeralContainerStatusesLastStatePtrOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesLastStatePtrOutput {
	return o
}

func (o OperatorStatusEphemeralContainerStatusesLastStatePtrOutput) Elem() OperatorStatusEphemeralContainerStatusesLastStateOutput {
	return o.ApplyT(func(v *OperatorStatusEphemeralContainerStatusesLastState) OperatorStatusEphemeralContainerStatusesLastState {
		return *v
	}).(OperatorStatusEphemeralContainerStatusesLastStateOutput)
}

// Details about a running container
func (o OperatorStatusEphemeralContainerStatusesLastStatePtrOutput) Running() OperatorStatusEphemeralContainerStatusesLastStateRunningPtrOutput {
	return o.ApplyT(func(v *OperatorStatusEphemeralContainerStatusesLastState) *OperatorStatusEphemeralContainerStatusesLastStateRunning {
		if v == nil {
			return nil
		}
		return v.Running
	}).(OperatorStatusEphemeralContainerStatusesLastStateRunningPtrOutput)
}

// Details about a terminated container
func (o OperatorStatusEphemeralContainerStatusesLastStatePtrOutput) Terminated() OperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutput {
	return o.ApplyT(func(v *OperatorStatusEphemeralContainerStatusesLastState) *OperatorStatusEphemeralContainerStatusesLastStateTerminated {
		if v == nil {
			return nil
		}
		return v.Terminated
	}).(OperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutput)
}

// Details about a waiting container
func (o OperatorStatusEphemeralContainerStatusesLastStatePtrOutput) Waiting() OperatorStatusEphemeralContainerStatusesLastStateWaitingPtrOutput {
	return o.ApplyT(func(v *OperatorStatusEphemeralContainerStatusesLastState) *OperatorStatusEphemeralContainerStatusesLastStateWaiting {
		if v == nil {
			return nil
		}
		return v.Waiting
	}).(OperatorStatusEphemeralContainerStatusesLastStateWaitingPtrOutput)
}

// Details about a running container
type OperatorStatusEphemeralContainerStatusesLastStateRunning struct {
	// Time at which the container was last (re-)started
	StartedAt *string `pulumi:"startedAt"`
}

// OperatorStatusEphemeralContainerStatusesLastStateRunningInput is an input type that accepts OperatorStatusEphemeralContainerStatusesLastStateRunningArgs and OperatorStatusEphemeralContainerStatusesLastStateRunningOutput values.
// You can construct a concrete instance of `OperatorStatusEphemeralContainerStatusesLastStateRunningInput` via:
//
//          OperatorStatusEphemeralContainerStatusesLastStateRunningArgs{...}
type OperatorStatusEphemeralContainerStatusesLastStateRunningInput interface {
	pulumi.Input

	ToOperatorStatusEphemeralContainerStatusesLastStateRunningOutput() OperatorStatusEphemeralContainerStatusesLastStateRunningOutput
	ToOperatorStatusEphemeralContainerStatusesLastStateRunningOutputWithContext(context.Context) OperatorStatusEphemeralContainerStatusesLastStateRunningOutput
}

// Details about a running container
type OperatorStatusEphemeralContainerStatusesLastStateRunningArgs struct {
	// Time at which the container was last (re-)started
	StartedAt pulumi.StringPtrInput `pulumi:"startedAt"`
}

func (OperatorStatusEphemeralContainerStatusesLastStateRunningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusEphemeralContainerStatusesLastStateRunning)(nil)).Elem()
}

func (i OperatorStatusEphemeralContainerStatusesLastStateRunningArgs) ToOperatorStatusEphemeralContainerStatusesLastStateRunningOutput() OperatorStatusEphemeralContainerStatusesLastStateRunningOutput {
	return i.ToOperatorStatusEphemeralContainerStatusesLastStateRunningOutputWithContext(context.Background())
}

func (i OperatorStatusEphemeralContainerStatusesLastStateRunningArgs) ToOperatorStatusEphemeralContainerStatusesLastStateRunningOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesLastStateRunningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusEphemeralContainerStatusesLastStateRunningOutput)
}

func (i OperatorStatusEphemeralContainerStatusesLastStateRunningArgs) ToOperatorStatusEphemeralContainerStatusesLastStateRunningPtrOutput() OperatorStatusEphemeralContainerStatusesLastStateRunningPtrOutput {
	return i.ToOperatorStatusEphemeralContainerStatusesLastStateRunningPtrOutputWithContext(context.Background())
}

func (i OperatorStatusEphemeralContainerStatusesLastStateRunningArgs) ToOperatorStatusEphemeralContainerStatusesLastStateRunningPtrOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesLastStateRunningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusEphemeralContainerStatusesLastStateRunningOutput).ToOperatorStatusEphemeralContainerStatusesLastStateRunningPtrOutputWithContext(ctx)
}

// OperatorStatusEphemeralContainerStatusesLastStateRunningPtrInput is an input type that accepts OperatorStatusEphemeralContainerStatusesLastStateRunningArgs, OperatorStatusEphemeralContainerStatusesLastStateRunningPtr and OperatorStatusEphemeralContainerStatusesLastStateRunningPtrOutput values.
// You can construct a concrete instance of `OperatorStatusEphemeralContainerStatusesLastStateRunningPtrInput` via:
//
//          OperatorStatusEphemeralContainerStatusesLastStateRunningArgs{...}
//
//  or:
//
//          nil
type OperatorStatusEphemeralContainerStatusesLastStateRunningPtrInput interface {
	pulumi.Input

	ToOperatorStatusEphemeralContainerStatusesLastStateRunningPtrOutput() OperatorStatusEphemeralContainerStatusesLastStateRunningPtrOutput
	ToOperatorStatusEphemeralContainerStatusesLastStateRunningPtrOutputWithContext(context.Context) OperatorStatusEphemeralContainerStatusesLastStateRunningPtrOutput
}

type operatorStatusEphemeralContainerStatusesLastStateRunningPtrType OperatorStatusEphemeralContainerStatusesLastStateRunningArgs

func OperatorStatusEphemeralContainerStatusesLastStateRunningPtr(v *OperatorStatusEphemeralContainerStatusesLastStateRunningArgs) OperatorStatusEphemeralContainerStatusesLastStateRunningPtrInput {
	return (*operatorStatusEphemeralContainerStatusesLastStateRunningPtrType)(v)
}

func (*operatorStatusEphemeralContainerStatusesLastStateRunningPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusEphemeralContainerStatusesLastStateRunning)(nil)).Elem()
}

func (i *operatorStatusEphemeralContainerStatusesLastStateRunningPtrType) ToOperatorStatusEphemeralContainerStatusesLastStateRunningPtrOutput() OperatorStatusEphemeralContainerStatusesLastStateRunningPtrOutput {
	return i.ToOperatorStatusEphemeralContainerStatusesLastStateRunningPtrOutputWithContext(context.Background())
}

func (i *operatorStatusEphemeralContainerStatusesLastStateRunningPtrType) ToOperatorStatusEphemeralContainerStatusesLastStateRunningPtrOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesLastStateRunningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusEphemeralContainerStatusesLastStateRunningPtrOutput)
}

// Details about a running container
type OperatorStatusEphemeralContainerStatusesLastStateRunningOutput struct{ *pulumi.OutputState }

func (OperatorStatusEphemeralContainerStatusesLastStateRunningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusEphemeralContainerStatusesLastStateRunning)(nil)).Elem()
}

func (o OperatorStatusEphemeralContainerStatusesLastStateRunningOutput) ToOperatorStatusEphemeralContainerStatusesLastStateRunningOutput() OperatorStatusEphemeralContainerStatusesLastStateRunningOutput {
	return o
}

func (o OperatorStatusEphemeralContainerStatusesLastStateRunningOutput) ToOperatorStatusEphemeralContainerStatusesLastStateRunningOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesLastStateRunningOutput {
	return o
}

func (o OperatorStatusEphemeralContainerStatusesLastStateRunningOutput) ToOperatorStatusEphemeralContainerStatusesLastStateRunningPtrOutput() OperatorStatusEphemeralContainerStatusesLastStateRunningPtrOutput {
	return o.ToOperatorStatusEphemeralContainerStatusesLastStateRunningPtrOutputWithContext(context.Background())
}

func (o OperatorStatusEphemeralContainerStatusesLastStateRunningOutput) ToOperatorStatusEphemeralContainerStatusesLastStateRunningPtrOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesLastStateRunningPtrOutput {
	return o.ApplyT(func(v OperatorStatusEphemeralContainerStatusesLastStateRunning) *OperatorStatusEphemeralContainerStatusesLastStateRunning {
		return &v
	}).(OperatorStatusEphemeralContainerStatusesLastStateRunningPtrOutput)
}

// Time at which the container was last (re-)started
func (o OperatorStatusEphemeralContainerStatusesLastStateRunningOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusEphemeralContainerStatusesLastStateRunning) *string { return v.StartedAt }).(pulumi.StringPtrOutput)
}

type OperatorStatusEphemeralContainerStatusesLastStateRunningPtrOutput struct{ *pulumi.OutputState }

func (OperatorStatusEphemeralContainerStatusesLastStateRunningPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusEphemeralContainerStatusesLastStateRunning)(nil)).Elem()
}

func (o OperatorStatusEphemeralContainerStatusesLastStateRunningPtrOutput) ToOperatorStatusEphemeralContainerStatusesLastStateRunningPtrOutput() OperatorStatusEphemeralContainerStatusesLastStateRunningPtrOutput {
	return o
}

func (o OperatorStatusEphemeralContainerStatusesLastStateRunningPtrOutput) ToOperatorStatusEphemeralContainerStatusesLastStateRunningPtrOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesLastStateRunningPtrOutput {
	return o
}

func (o OperatorStatusEphemeralContainerStatusesLastStateRunningPtrOutput) Elem() OperatorStatusEphemeralContainerStatusesLastStateRunningOutput {
	return o.ApplyT(func(v *OperatorStatusEphemeralContainerStatusesLastStateRunning) OperatorStatusEphemeralContainerStatusesLastStateRunning {
		return *v
	}).(OperatorStatusEphemeralContainerStatusesLastStateRunningOutput)
}

// Time at which the container was last (re-)started
func (o OperatorStatusEphemeralContainerStatusesLastStateRunningPtrOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusEphemeralContainerStatusesLastStateRunning) *string {
		if v == nil {
			return nil
		}
		return v.StartedAt
	}).(pulumi.StringPtrOutput)
}

// Details about a terminated container
type OperatorStatusEphemeralContainerStatusesLastStateTerminated struct {
	// Container's ID in the format 'docker://<container_id>'
	ContainerID *string `pulumi:"containerID"`
	// Exit status from the last termination of the container
	ExitCode int `pulumi:"exitCode"`
	// Time at which the container last terminated
	FinishedAt *string `pulumi:"finishedAt"`
	// Message regarding the last termination of the container
	Message *string `pulumi:"message"`
	// (brief) reason from the last termination of the container
	Reason *string `pulumi:"reason"`
	// Signal from the last termination of the container
	Signal *int `pulumi:"signal"`
	// Time at which previous execution of the container started
	StartedAt *string `pulumi:"startedAt"`
}

// OperatorStatusEphemeralContainerStatusesLastStateTerminatedInput is an input type that accepts OperatorStatusEphemeralContainerStatusesLastStateTerminatedArgs and OperatorStatusEphemeralContainerStatusesLastStateTerminatedOutput values.
// You can construct a concrete instance of `OperatorStatusEphemeralContainerStatusesLastStateTerminatedInput` via:
//
//          OperatorStatusEphemeralContainerStatusesLastStateTerminatedArgs{...}
type OperatorStatusEphemeralContainerStatusesLastStateTerminatedInput interface {
	pulumi.Input

	ToOperatorStatusEphemeralContainerStatusesLastStateTerminatedOutput() OperatorStatusEphemeralContainerStatusesLastStateTerminatedOutput
	ToOperatorStatusEphemeralContainerStatusesLastStateTerminatedOutputWithContext(context.Context) OperatorStatusEphemeralContainerStatusesLastStateTerminatedOutput
}

// Details about a terminated container
type OperatorStatusEphemeralContainerStatusesLastStateTerminatedArgs struct {
	// Container's ID in the format 'docker://<container_id>'
	ContainerID pulumi.StringPtrInput `pulumi:"containerID"`
	// Exit status from the last termination of the container
	ExitCode pulumi.IntInput `pulumi:"exitCode"`
	// Time at which the container last terminated
	FinishedAt pulumi.StringPtrInput `pulumi:"finishedAt"`
	// Message regarding the last termination of the container
	Message pulumi.StringPtrInput `pulumi:"message"`
	// (brief) reason from the last termination of the container
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Signal from the last termination of the container
	Signal pulumi.IntPtrInput `pulumi:"signal"`
	// Time at which previous execution of the container started
	StartedAt pulumi.StringPtrInput `pulumi:"startedAt"`
}

func (OperatorStatusEphemeralContainerStatusesLastStateTerminatedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusEphemeralContainerStatusesLastStateTerminated)(nil)).Elem()
}

func (i OperatorStatusEphemeralContainerStatusesLastStateTerminatedArgs) ToOperatorStatusEphemeralContainerStatusesLastStateTerminatedOutput() OperatorStatusEphemeralContainerStatusesLastStateTerminatedOutput {
	return i.ToOperatorStatusEphemeralContainerStatusesLastStateTerminatedOutputWithContext(context.Background())
}

func (i OperatorStatusEphemeralContainerStatusesLastStateTerminatedArgs) ToOperatorStatusEphemeralContainerStatusesLastStateTerminatedOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesLastStateTerminatedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusEphemeralContainerStatusesLastStateTerminatedOutput)
}

func (i OperatorStatusEphemeralContainerStatusesLastStateTerminatedArgs) ToOperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutput() OperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutput {
	return i.ToOperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutputWithContext(context.Background())
}

func (i OperatorStatusEphemeralContainerStatusesLastStateTerminatedArgs) ToOperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusEphemeralContainerStatusesLastStateTerminatedOutput).ToOperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutputWithContext(ctx)
}

// OperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrInput is an input type that accepts OperatorStatusEphemeralContainerStatusesLastStateTerminatedArgs, OperatorStatusEphemeralContainerStatusesLastStateTerminatedPtr and OperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutput values.
// You can construct a concrete instance of `OperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrInput` via:
//
//          OperatorStatusEphemeralContainerStatusesLastStateTerminatedArgs{...}
//
//  or:
//
//          nil
type OperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrInput interface {
	pulumi.Input

	ToOperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutput() OperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutput
	ToOperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutputWithContext(context.Context) OperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutput
}

type operatorStatusEphemeralContainerStatusesLastStateTerminatedPtrType OperatorStatusEphemeralContainerStatusesLastStateTerminatedArgs

func OperatorStatusEphemeralContainerStatusesLastStateTerminatedPtr(v *OperatorStatusEphemeralContainerStatusesLastStateTerminatedArgs) OperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrInput {
	return (*operatorStatusEphemeralContainerStatusesLastStateTerminatedPtrType)(v)
}

func (*operatorStatusEphemeralContainerStatusesLastStateTerminatedPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusEphemeralContainerStatusesLastStateTerminated)(nil)).Elem()
}

func (i *operatorStatusEphemeralContainerStatusesLastStateTerminatedPtrType) ToOperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutput() OperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutput {
	return i.ToOperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutputWithContext(context.Background())
}

func (i *operatorStatusEphemeralContainerStatusesLastStateTerminatedPtrType) ToOperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutput)
}

// Details about a terminated container
type OperatorStatusEphemeralContainerStatusesLastStateTerminatedOutput struct{ *pulumi.OutputState }

func (OperatorStatusEphemeralContainerStatusesLastStateTerminatedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusEphemeralContainerStatusesLastStateTerminated)(nil)).Elem()
}

func (o OperatorStatusEphemeralContainerStatusesLastStateTerminatedOutput) ToOperatorStatusEphemeralContainerStatusesLastStateTerminatedOutput() OperatorStatusEphemeralContainerStatusesLastStateTerminatedOutput {
	return o
}

func (o OperatorStatusEphemeralContainerStatusesLastStateTerminatedOutput) ToOperatorStatusEphemeralContainerStatusesLastStateTerminatedOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesLastStateTerminatedOutput {
	return o
}

func (o OperatorStatusEphemeralContainerStatusesLastStateTerminatedOutput) ToOperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutput() OperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutput {
	return o.ToOperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutputWithContext(context.Background())
}

func (o OperatorStatusEphemeralContainerStatusesLastStateTerminatedOutput) ToOperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutput {
	return o.ApplyT(func(v OperatorStatusEphemeralContainerStatusesLastStateTerminated) *OperatorStatusEphemeralContainerStatusesLastStateTerminated {
		return &v
	}).(OperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutput)
}

// Container's ID in the format 'docker://<container_id>'
func (o OperatorStatusEphemeralContainerStatusesLastStateTerminatedOutput) ContainerID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusEphemeralContainerStatusesLastStateTerminated) *string { return v.ContainerID }).(pulumi.StringPtrOutput)
}

// Exit status from the last termination of the container
func (o OperatorStatusEphemeralContainerStatusesLastStateTerminatedOutput) ExitCode() pulumi.IntOutput {
	return o.ApplyT(func(v OperatorStatusEphemeralContainerStatusesLastStateTerminated) int { return v.ExitCode }).(pulumi.IntOutput)
}

// Time at which the container last terminated
func (o OperatorStatusEphemeralContainerStatusesLastStateTerminatedOutput) FinishedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusEphemeralContainerStatusesLastStateTerminated) *string { return v.FinishedAt }).(pulumi.StringPtrOutput)
}

// Message regarding the last termination of the container
func (o OperatorStatusEphemeralContainerStatusesLastStateTerminatedOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusEphemeralContainerStatusesLastStateTerminated) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// (brief) reason from the last termination of the container
func (o OperatorStatusEphemeralContainerStatusesLastStateTerminatedOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusEphemeralContainerStatusesLastStateTerminated) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Signal from the last termination of the container
func (o OperatorStatusEphemeralContainerStatusesLastStateTerminatedOutput) Signal() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OperatorStatusEphemeralContainerStatusesLastStateTerminated) *int { return v.Signal }).(pulumi.IntPtrOutput)
}

// Time at which previous execution of the container started
func (o OperatorStatusEphemeralContainerStatusesLastStateTerminatedOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusEphemeralContainerStatusesLastStateTerminated) *string { return v.StartedAt }).(pulumi.StringPtrOutput)
}

type OperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutput struct{ *pulumi.OutputState }

func (OperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusEphemeralContainerStatusesLastStateTerminated)(nil)).Elem()
}

func (o OperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutput) ToOperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutput() OperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutput {
	return o
}

func (o OperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutput) ToOperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutput {
	return o
}

func (o OperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutput) Elem() OperatorStatusEphemeralContainerStatusesLastStateTerminatedOutput {
	return o.ApplyT(func(v *OperatorStatusEphemeralContainerStatusesLastStateTerminated) OperatorStatusEphemeralContainerStatusesLastStateTerminated {
		return *v
	}).(OperatorStatusEphemeralContainerStatusesLastStateTerminatedOutput)
}

// Container's ID in the format 'docker://<container_id>'
func (o OperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutput) ContainerID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusEphemeralContainerStatusesLastStateTerminated) *string {
		if v == nil {
			return nil
		}
		return v.ContainerID
	}).(pulumi.StringPtrOutput)
}

// Exit status from the last termination of the container
func (o OperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutput) ExitCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OperatorStatusEphemeralContainerStatusesLastStateTerminated) *int {
		if v == nil {
			return nil
		}
		return &v.ExitCode
	}).(pulumi.IntPtrOutput)
}

// Time at which the container last terminated
func (o OperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutput) FinishedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusEphemeralContainerStatusesLastStateTerminated) *string {
		if v == nil {
			return nil
		}
		return v.FinishedAt
	}).(pulumi.StringPtrOutput)
}

// Message regarding the last termination of the container
func (o OperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusEphemeralContainerStatusesLastStateTerminated) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// (brief) reason from the last termination of the container
func (o OperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusEphemeralContainerStatusesLastStateTerminated) *string {
		if v == nil {
			return nil
		}
		return v.Reason
	}).(pulumi.StringPtrOutput)
}

// Signal from the last termination of the container
func (o OperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutput) Signal() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OperatorStatusEphemeralContainerStatusesLastStateTerminated) *int {
		if v == nil {
			return nil
		}
		return v.Signal
	}).(pulumi.IntPtrOutput)
}

// Time at which previous execution of the container started
func (o OperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusEphemeralContainerStatusesLastStateTerminated) *string {
		if v == nil {
			return nil
		}
		return v.StartedAt
	}).(pulumi.StringPtrOutput)
}

// Details about a waiting container
type OperatorStatusEphemeralContainerStatusesLastStateWaiting struct {
	// Message regarding why the container is not yet running.
	Message *string `pulumi:"message"`
	// (brief) reason the container is not yet running.
	Reason *string `pulumi:"reason"`
}

// OperatorStatusEphemeralContainerStatusesLastStateWaitingInput is an input type that accepts OperatorStatusEphemeralContainerStatusesLastStateWaitingArgs and OperatorStatusEphemeralContainerStatusesLastStateWaitingOutput values.
// You can construct a concrete instance of `OperatorStatusEphemeralContainerStatusesLastStateWaitingInput` via:
//
//          OperatorStatusEphemeralContainerStatusesLastStateWaitingArgs{...}
type OperatorStatusEphemeralContainerStatusesLastStateWaitingInput interface {
	pulumi.Input

	ToOperatorStatusEphemeralContainerStatusesLastStateWaitingOutput() OperatorStatusEphemeralContainerStatusesLastStateWaitingOutput
	ToOperatorStatusEphemeralContainerStatusesLastStateWaitingOutputWithContext(context.Context) OperatorStatusEphemeralContainerStatusesLastStateWaitingOutput
}

// Details about a waiting container
type OperatorStatusEphemeralContainerStatusesLastStateWaitingArgs struct {
	// Message regarding why the container is not yet running.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// (brief) reason the container is not yet running.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
}

func (OperatorStatusEphemeralContainerStatusesLastStateWaitingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusEphemeralContainerStatusesLastStateWaiting)(nil)).Elem()
}

func (i OperatorStatusEphemeralContainerStatusesLastStateWaitingArgs) ToOperatorStatusEphemeralContainerStatusesLastStateWaitingOutput() OperatorStatusEphemeralContainerStatusesLastStateWaitingOutput {
	return i.ToOperatorStatusEphemeralContainerStatusesLastStateWaitingOutputWithContext(context.Background())
}

func (i OperatorStatusEphemeralContainerStatusesLastStateWaitingArgs) ToOperatorStatusEphemeralContainerStatusesLastStateWaitingOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesLastStateWaitingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusEphemeralContainerStatusesLastStateWaitingOutput)
}

func (i OperatorStatusEphemeralContainerStatusesLastStateWaitingArgs) ToOperatorStatusEphemeralContainerStatusesLastStateWaitingPtrOutput() OperatorStatusEphemeralContainerStatusesLastStateWaitingPtrOutput {
	return i.ToOperatorStatusEphemeralContainerStatusesLastStateWaitingPtrOutputWithContext(context.Background())
}

func (i OperatorStatusEphemeralContainerStatusesLastStateWaitingArgs) ToOperatorStatusEphemeralContainerStatusesLastStateWaitingPtrOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesLastStateWaitingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusEphemeralContainerStatusesLastStateWaitingOutput).ToOperatorStatusEphemeralContainerStatusesLastStateWaitingPtrOutputWithContext(ctx)
}

// OperatorStatusEphemeralContainerStatusesLastStateWaitingPtrInput is an input type that accepts OperatorStatusEphemeralContainerStatusesLastStateWaitingArgs, OperatorStatusEphemeralContainerStatusesLastStateWaitingPtr and OperatorStatusEphemeralContainerStatusesLastStateWaitingPtrOutput values.
// You can construct a concrete instance of `OperatorStatusEphemeralContainerStatusesLastStateWaitingPtrInput` via:
//
//          OperatorStatusEphemeralContainerStatusesLastStateWaitingArgs{...}
//
//  or:
//
//          nil
type OperatorStatusEphemeralContainerStatusesLastStateWaitingPtrInput interface {
	pulumi.Input

	ToOperatorStatusEphemeralContainerStatusesLastStateWaitingPtrOutput() OperatorStatusEphemeralContainerStatusesLastStateWaitingPtrOutput
	ToOperatorStatusEphemeralContainerStatusesLastStateWaitingPtrOutputWithContext(context.Context) OperatorStatusEphemeralContainerStatusesLastStateWaitingPtrOutput
}

type operatorStatusEphemeralContainerStatusesLastStateWaitingPtrType OperatorStatusEphemeralContainerStatusesLastStateWaitingArgs

func OperatorStatusEphemeralContainerStatusesLastStateWaitingPtr(v *OperatorStatusEphemeralContainerStatusesLastStateWaitingArgs) OperatorStatusEphemeralContainerStatusesLastStateWaitingPtrInput {
	return (*operatorStatusEphemeralContainerStatusesLastStateWaitingPtrType)(v)
}

func (*operatorStatusEphemeralContainerStatusesLastStateWaitingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusEphemeralContainerStatusesLastStateWaiting)(nil)).Elem()
}

func (i *operatorStatusEphemeralContainerStatusesLastStateWaitingPtrType) ToOperatorStatusEphemeralContainerStatusesLastStateWaitingPtrOutput() OperatorStatusEphemeralContainerStatusesLastStateWaitingPtrOutput {
	return i.ToOperatorStatusEphemeralContainerStatusesLastStateWaitingPtrOutputWithContext(context.Background())
}

func (i *operatorStatusEphemeralContainerStatusesLastStateWaitingPtrType) ToOperatorStatusEphemeralContainerStatusesLastStateWaitingPtrOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesLastStateWaitingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusEphemeralContainerStatusesLastStateWaitingPtrOutput)
}

// Details about a waiting container
type OperatorStatusEphemeralContainerStatusesLastStateWaitingOutput struct{ *pulumi.OutputState }

func (OperatorStatusEphemeralContainerStatusesLastStateWaitingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusEphemeralContainerStatusesLastStateWaiting)(nil)).Elem()
}

func (o OperatorStatusEphemeralContainerStatusesLastStateWaitingOutput) ToOperatorStatusEphemeralContainerStatusesLastStateWaitingOutput() OperatorStatusEphemeralContainerStatusesLastStateWaitingOutput {
	return o
}

func (o OperatorStatusEphemeralContainerStatusesLastStateWaitingOutput) ToOperatorStatusEphemeralContainerStatusesLastStateWaitingOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesLastStateWaitingOutput {
	return o
}

func (o OperatorStatusEphemeralContainerStatusesLastStateWaitingOutput) ToOperatorStatusEphemeralContainerStatusesLastStateWaitingPtrOutput() OperatorStatusEphemeralContainerStatusesLastStateWaitingPtrOutput {
	return o.ToOperatorStatusEphemeralContainerStatusesLastStateWaitingPtrOutputWithContext(context.Background())
}

func (o OperatorStatusEphemeralContainerStatusesLastStateWaitingOutput) ToOperatorStatusEphemeralContainerStatusesLastStateWaitingPtrOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesLastStateWaitingPtrOutput {
	return o.ApplyT(func(v OperatorStatusEphemeralContainerStatusesLastStateWaiting) *OperatorStatusEphemeralContainerStatusesLastStateWaiting {
		return &v
	}).(OperatorStatusEphemeralContainerStatusesLastStateWaitingPtrOutput)
}

// Message regarding why the container is not yet running.
func (o OperatorStatusEphemeralContainerStatusesLastStateWaitingOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusEphemeralContainerStatusesLastStateWaiting) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// (brief) reason the container is not yet running.
func (o OperatorStatusEphemeralContainerStatusesLastStateWaitingOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusEphemeralContainerStatusesLastStateWaiting) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

type OperatorStatusEphemeralContainerStatusesLastStateWaitingPtrOutput struct{ *pulumi.OutputState }

func (OperatorStatusEphemeralContainerStatusesLastStateWaitingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusEphemeralContainerStatusesLastStateWaiting)(nil)).Elem()
}

func (o OperatorStatusEphemeralContainerStatusesLastStateWaitingPtrOutput) ToOperatorStatusEphemeralContainerStatusesLastStateWaitingPtrOutput() OperatorStatusEphemeralContainerStatusesLastStateWaitingPtrOutput {
	return o
}

func (o OperatorStatusEphemeralContainerStatusesLastStateWaitingPtrOutput) ToOperatorStatusEphemeralContainerStatusesLastStateWaitingPtrOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesLastStateWaitingPtrOutput {
	return o
}

func (o OperatorStatusEphemeralContainerStatusesLastStateWaitingPtrOutput) Elem() OperatorStatusEphemeralContainerStatusesLastStateWaitingOutput {
	return o.ApplyT(func(v *OperatorStatusEphemeralContainerStatusesLastStateWaiting) OperatorStatusEphemeralContainerStatusesLastStateWaiting {
		return *v
	}).(OperatorStatusEphemeralContainerStatusesLastStateWaitingOutput)
}

// Message regarding why the container is not yet running.
func (o OperatorStatusEphemeralContainerStatusesLastStateWaitingPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusEphemeralContainerStatusesLastStateWaiting) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// (brief) reason the container is not yet running.
func (o OperatorStatusEphemeralContainerStatusesLastStateWaitingPtrOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusEphemeralContainerStatusesLastStateWaiting) *string {
		if v == nil {
			return nil
		}
		return v.Reason
	}).(pulumi.StringPtrOutput)
}

// Details about the container's current condition.
type OperatorStatusEphemeralContainerStatusesState struct {
	// Details about a running container
	Running *OperatorStatusEphemeralContainerStatusesStateRunning `pulumi:"running"`
	// Details about a terminated container
	Terminated *OperatorStatusEphemeralContainerStatusesStateTerminated `pulumi:"terminated"`
	// Details about a waiting container
	Waiting *OperatorStatusEphemeralContainerStatusesStateWaiting `pulumi:"waiting"`
}

// OperatorStatusEphemeralContainerStatusesStateInput is an input type that accepts OperatorStatusEphemeralContainerStatusesStateArgs and OperatorStatusEphemeralContainerStatusesStateOutput values.
// You can construct a concrete instance of `OperatorStatusEphemeralContainerStatusesStateInput` via:
//
//          OperatorStatusEphemeralContainerStatusesStateArgs{...}
type OperatorStatusEphemeralContainerStatusesStateInput interface {
	pulumi.Input

	ToOperatorStatusEphemeralContainerStatusesStateOutput() OperatorStatusEphemeralContainerStatusesStateOutput
	ToOperatorStatusEphemeralContainerStatusesStateOutputWithContext(context.Context) OperatorStatusEphemeralContainerStatusesStateOutput
}

// Details about the container's current condition.
type OperatorStatusEphemeralContainerStatusesStateArgs struct {
	// Details about a running container
	Running OperatorStatusEphemeralContainerStatusesStateRunningPtrInput `pulumi:"running"`
	// Details about a terminated container
	Terminated OperatorStatusEphemeralContainerStatusesStateTerminatedPtrInput `pulumi:"terminated"`
	// Details about a waiting container
	Waiting OperatorStatusEphemeralContainerStatusesStateWaitingPtrInput `pulumi:"waiting"`
}

func (OperatorStatusEphemeralContainerStatusesStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusEphemeralContainerStatusesState)(nil)).Elem()
}

func (i OperatorStatusEphemeralContainerStatusesStateArgs) ToOperatorStatusEphemeralContainerStatusesStateOutput() OperatorStatusEphemeralContainerStatusesStateOutput {
	return i.ToOperatorStatusEphemeralContainerStatusesStateOutputWithContext(context.Background())
}

func (i OperatorStatusEphemeralContainerStatusesStateArgs) ToOperatorStatusEphemeralContainerStatusesStateOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusEphemeralContainerStatusesStateOutput)
}

func (i OperatorStatusEphemeralContainerStatusesStateArgs) ToOperatorStatusEphemeralContainerStatusesStatePtrOutput() OperatorStatusEphemeralContainerStatusesStatePtrOutput {
	return i.ToOperatorStatusEphemeralContainerStatusesStatePtrOutputWithContext(context.Background())
}

func (i OperatorStatusEphemeralContainerStatusesStateArgs) ToOperatorStatusEphemeralContainerStatusesStatePtrOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusEphemeralContainerStatusesStateOutput).ToOperatorStatusEphemeralContainerStatusesStatePtrOutputWithContext(ctx)
}

// OperatorStatusEphemeralContainerStatusesStatePtrInput is an input type that accepts OperatorStatusEphemeralContainerStatusesStateArgs, OperatorStatusEphemeralContainerStatusesStatePtr and OperatorStatusEphemeralContainerStatusesStatePtrOutput values.
// You can construct a concrete instance of `OperatorStatusEphemeralContainerStatusesStatePtrInput` via:
//
//          OperatorStatusEphemeralContainerStatusesStateArgs{...}
//
//  or:
//
//          nil
type OperatorStatusEphemeralContainerStatusesStatePtrInput interface {
	pulumi.Input

	ToOperatorStatusEphemeralContainerStatusesStatePtrOutput() OperatorStatusEphemeralContainerStatusesStatePtrOutput
	ToOperatorStatusEphemeralContainerStatusesStatePtrOutputWithContext(context.Context) OperatorStatusEphemeralContainerStatusesStatePtrOutput
}

type operatorStatusEphemeralContainerStatusesStatePtrType OperatorStatusEphemeralContainerStatusesStateArgs

func OperatorStatusEphemeralContainerStatusesStatePtr(v *OperatorStatusEphemeralContainerStatusesStateArgs) OperatorStatusEphemeralContainerStatusesStatePtrInput {
	return (*operatorStatusEphemeralContainerStatusesStatePtrType)(v)
}

func (*operatorStatusEphemeralContainerStatusesStatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusEphemeralContainerStatusesState)(nil)).Elem()
}

func (i *operatorStatusEphemeralContainerStatusesStatePtrType) ToOperatorStatusEphemeralContainerStatusesStatePtrOutput() OperatorStatusEphemeralContainerStatusesStatePtrOutput {
	return i.ToOperatorStatusEphemeralContainerStatusesStatePtrOutputWithContext(context.Background())
}

func (i *operatorStatusEphemeralContainerStatusesStatePtrType) ToOperatorStatusEphemeralContainerStatusesStatePtrOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusEphemeralContainerStatusesStatePtrOutput)
}

// Details about the container's current condition.
type OperatorStatusEphemeralContainerStatusesStateOutput struct{ *pulumi.OutputState }

func (OperatorStatusEphemeralContainerStatusesStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusEphemeralContainerStatusesState)(nil)).Elem()
}

func (o OperatorStatusEphemeralContainerStatusesStateOutput) ToOperatorStatusEphemeralContainerStatusesStateOutput() OperatorStatusEphemeralContainerStatusesStateOutput {
	return o
}

func (o OperatorStatusEphemeralContainerStatusesStateOutput) ToOperatorStatusEphemeralContainerStatusesStateOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesStateOutput {
	return o
}

func (o OperatorStatusEphemeralContainerStatusesStateOutput) ToOperatorStatusEphemeralContainerStatusesStatePtrOutput() OperatorStatusEphemeralContainerStatusesStatePtrOutput {
	return o.ToOperatorStatusEphemeralContainerStatusesStatePtrOutputWithContext(context.Background())
}

func (o OperatorStatusEphemeralContainerStatusesStateOutput) ToOperatorStatusEphemeralContainerStatusesStatePtrOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesStatePtrOutput {
	return o.ApplyT(func(v OperatorStatusEphemeralContainerStatusesState) *OperatorStatusEphemeralContainerStatusesState {
		return &v
	}).(OperatorStatusEphemeralContainerStatusesStatePtrOutput)
}

// Details about a running container
func (o OperatorStatusEphemeralContainerStatusesStateOutput) Running() OperatorStatusEphemeralContainerStatusesStateRunningPtrOutput {
	return o.ApplyT(func(v OperatorStatusEphemeralContainerStatusesState) *OperatorStatusEphemeralContainerStatusesStateRunning {
		return v.Running
	}).(OperatorStatusEphemeralContainerStatusesStateRunningPtrOutput)
}

// Details about a terminated container
func (o OperatorStatusEphemeralContainerStatusesStateOutput) Terminated() OperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutput {
	return o.ApplyT(func(v OperatorStatusEphemeralContainerStatusesState) *OperatorStatusEphemeralContainerStatusesStateTerminated {
		return v.Terminated
	}).(OperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutput)
}

// Details about a waiting container
func (o OperatorStatusEphemeralContainerStatusesStateOutput) Waiting() OperatorStatusEphemeralContainerStatusesStateWaitingPtrOutput {
	return o.ApplyT(func(v OperatorStatusEphemeralContainerStatusesState) *OperatorStatusEphemeralContainerStatusesStateWaiting {
		return v.Waiting
	}).(OperatorStatusEphemeralContainerStatusesStateWaitingPtrOutput)
}

type OperatorStatusEphemeralContainerStatusesStatePtrOutput struct{ *pulumi.OutputState }

func (OperatorStatusEphemeralContainerStatusesStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusEphemeralContainerStatusesState)(nil)).Elem()
}

func (o OperatorStatusEphemeralContainerStatusesStatePtrOutput) ToOperatorStatusEphemeralContainerStatusesStatePtrOutput() OperatorStatusEphemeralContainerStatusesStatePtrOutput {
	return o
}

func (o OperatorStatusEphemeralContainerStatusesStatePtrOutput) ToOperatorStatusEphemeralContainerStatusesStatePtrOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesStatePtrOutput {
	return o
}

func (o OperatorStatusEphemeralContainerStatusesStatePtrOutput) Elem() OperatorStatusEphemeralContainerStatusesStateOutput {
	return o.ApplyT(func(v *OperatorStatusEphemeralContainerStatusesState) OperatorStatusEphemeralContainerStatusesState {
		return *v
	}).(OperatorStatusEphemeralContainerStatusesStateOutput)
}

// Details about a running container
func (o OperatorStatusEphemeralContainerStatusesStatePtrOutput) Running() OperatorStatusEphemeralContainerStatusesStateRunningPtrOutput {
	return o.ApplyT(func(v *OperatorStatusEphemeralContainerStatusesState) *OperatorStatusEphemeralContainerStatusesStateRunning {
		if v == nil {
			return nil
		}
		return v.Running
	}).(OperatorStatusEphemeralContainerStatusesStateRunningPtrOutput)
}

// Details about a terminated container
func (o OperatorStatusEphemeralContainerStatusesStatePtrOutput) Terminated() OperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutput {
	return o.ApplyT(func(v *OperatorStatusEphemeralContainerStatusesState) *OperatorStatusEphemeralContainerStatusesStateTerminated {
		if v == nil {
			return nil
		}
		return v.Terminated
	}).(OperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutput)
}

// Details about a waiting container
func (o OperatorStatusEphemeralContainerStatusesStatePtrOutput) Waiting() OperatorStatusEphemeralContainerStatusesStateWaitingPtrOutput {
	return o.ApplyT(func(v *OperatorStatusEphemeralContainerStatusesState) *OperatorStatusEphemeralContainerStatusesStateWaiting {
		if v == nil {
			return nil
		}
		return v.Waiting
	}).(OperatorStatusEphemeralContainerStatusesStateWaitingPtrOutput)
}

// Details about a running container
type OperatorStatusEphemeralContainerStatusesStateRunning struct {
	// Time at which the container was last (re-)started
	StartedAt *string `pulumi:"startedAt"`
}

// OperatorStatusEphemeralContainerStatusesStateRunningInput is an input type that accepts OperatorStatusEphemeralContainerStatusesStateRunningArgs and OperatorStatusEphemeralContainerStatusesStateRunningOutput values.
// You can construct a concrete instance of `OperatorStatusEphemeralContainerStatusesStateRunningInput` via:
//
//          OperatorStatusEphemeralContainerStatusesStateRunningArgs{...}
type OperatorStatusEphemeralContainerStatusesStateRunningInput interface {
	pulumi.Input

	ToOperatorStatusEphemeralContainerStatusesStateRunningOutput() OperatorStatusEphemeralContainerStatusesStateRunningOutput
	ToOperatorStatusEphemeralContainerStatusesStateRunningOutputWithContext(context.Context) OperatorStatusEphemeralContainerStatusesStateRunningOutput
}

// Details about a running container
type OperatorStatusEphemeralContainerStatusesStateRunningArgs struct {
	// Time at which the container was last (re-)started
	StartedAt pulumi.StringPtrInput `pulumi:"startedAt"`
}

func (OperatorStatusEphemeralContainerStatusesStateRunningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusEphemeralContainerStatusesStateRunning)(nil)).Elem()
}

func (i OperatorStatusEphemeralContainerStatusesStateRunningArgs) ToOperatorStatusEphemeralContainerStatusesStateRunningOutput() OperatorStatusEphemeralContainerStatusesStateRunningOutput {
	return i.ToOperatorStatusEphemeralContainerStatusesStateRunningOutputWithContext(context.Background())
}

func (i OperatorStatusEphemeralContainerStatusesStateRunningArgs) ToOperatorStatusEphemeralContainerStatusesStateRunningOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesStateRunningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusEphemeralContainerStatusesStateRunningOutput)
}

func (i OperatorStatusEphemeralContainerStatusesStateRunningArgs) ToOperatorStatusEphemeralContainerStatusesStateRunningPtrOutput() OperatorStatusEphemeralContainerStatusesStateRunningPtrOutput {
	return i.ToOperatorStatusEphemeralContainerStatusesStateRunningPtrOutputWithContext(context.Background())
}

func (i OperatorStatusEphemeralContainerStatusesStateRunningArgs) ToOperatorStatusEphemeralContainerStatusesStateRunningPtrOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesStateRunningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusEphemeralContainerStatusesStateRunningOutput).ToOperatorStatusEphemeralContainerStatusesStateRunningPtrOutputWithContext(ctx)
}

// OperatorStatusEphemeralContainerStatusesStateRunningPtrInput is an input type that accepts OperatorStatusEphemeralContainerStatusesStateRunningArgs, OperatorStatusEphemeralContainerStatusesStateRunningPtr and OperatorStatusEphemeralContainerStatusesStateRunningPtrOutput values.
// You can construct a concrete instance of `OperatorStatusEphemeralContainerStatusesStateRunningPtrInput` via:
//
//          OperatorStatusEphemeralContainerStatusesStateRunningArgs{...}
//
//  or:
//
//          nil
type OperatorStatusEphemeralContainerStatusesStateRunningPtrInput interface {
	pulumi.Input

	ToOperatorStatusEphemeralContainerStatusesStateRunningPtrOutput() OperatorStatusEphemeralContainerStatusesStateRunningPtrOutput
	ToOperatorStatusEphemeralContainerStatusesStateRunningPtrOutputWithContext(context.Context) OperatorStatusEphemeralContainerStatusesStateRunningPtrOutput
}

type operatorStatusEphemeralContainerStatusesStateRunningPtrType OperatorStatusEphemeralContainerStatusesStateRunningArgs

func OperatorStatusEphemeralContainerStatusesStateRunningPtr(v *OperatorStatusEphemeralContainerStatusesStateRunningArgs) OperatorStatusEphemeralContainerStatusesStateRunningPtrInput {
	return (*operatorStatusEphemeralContainerStatusesStateRunningPtrType)(v)
}

func (*operatorStatusEphemeralContainerStatusesStateRunningPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusEphemeralContainerStatusesStateRunning)(nil)).Elem()
}

func (i *operatorStatusEphemeralContainerStatusesStateRunningPtrType) ToOperatorStatusEphemeralContainerStatusesStateRunningPtrOutput() OperatorStatusEphemeralContainerStatusesStateRunningPtrOutput {
	return i.ToOperatorStatusEphemeralContainerStatusesStateRunningPtrOutputWithContext(context.Background())
}

func (i *operatorStatusEphemeralContainerStatusesStateRunningPtrType) ToOperatorStatusEphemeralContainerStatusesStateRunningPtrOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesStateRunningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusEphemeralContainerStatusesStateRunningPtrOutput)
}

// Details about a running container
type OperatorStatusEphemeralContainerStatusesStateRunningOutput struct{ *pulumi.OutputState }

func (OperatorStatusEphemeralContainerStatusesStateRunningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusEphemeralContainerStatusesStateRunning)(nil)).Elem()
}

func (o OperatorStatusEphemeralContainerStatusesStateRunningOutput) ToOperatorStatusEphemeralContainerStatusesStateRunningOutput() OperatorStatusEphemeralContainerStatusesStateRunningOutput {
	return o
}

func (o OperatorStatusEphemeralContainerStatusesStateRunningOutput) ToOperatorStatusEphemeralContainerStatusesStateRunningOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesStateRunningOutput {
	return o
}

func (o OperatorStatusEphemeralContainerStatusesStateRunningOutput) ToOperatorStatusEphemeralContainerStatusesStateRunningPtrOutput() OperatorStatusEphemeralContainerStatusesStateRunningPtrOutput {
	return o.ToOperatorStatusEphemeralContainerStatusesStateRunningPtrOutputWithContext(context.Background())
}

func (o OperatorStatusEphemeralContainerStatusesStateRunningOutput) ToOperatorStatusEphemeralContainerStatusesStateRunningPtrOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesStateRunningPtrOutput {
	return o.ApplyT(func(v OperatorStatusEphemeralContainerStatusesStateRunning) *OperatorStatusEphemeralContainerStatusesStateRunning {
		return &v
	}).(OperatorStatusEphemeralContainerStatusesStateRunningPtrOutput)
}

// Time at which the container was last (re-)started
func (o OperatorStatusEphemeralContainerStatusesStateRunningOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusEphemeralContainerStatusesStateRunning) *string { return v.StartedAt }).(pulumi.StringPtrOutput)
}

type OperatorStatusEphemeralContainerStatusesStateRunningPtrOutput struct{ *pulumi.OutputState }

func (OperatorStatusEphemeralContainerStatusesStateRunningPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusEphemeralContainerStatusesStateRunning)(nil)).Elem()
}

func (o OperatorStatusEphemeralContainerStatusesStateRunningPtrOutput) ToOperatorStatusEphemeralContainerStatusesStateRunningPtrOutput() OperatorStatusEphemeralContainerStatusesStateRunningPtrOutput {
	return o
}

func (o OperatorStatusEphemeralContainerStatusesStateRunningPtrOutput) ToOperatorStatusEphemeralContainerStatusesStateRunningPtrOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesStateRunningPtrOutput {
	return o
}

func (o OperatorStatusEphemeralContainerStatusesStateRunningPtrOutput) Elem() OperatorStatusEphemeralContainerStatusesStateRunningOutput {
	return o.ApplyT(func(v *OperatorStatusEphemeralContainerStatusesStateRunning) OperatorStatusEphemeralContainerStatusesStateRunning {
		return *v
	}).(OperatorStatusEphemeralContainerStatusesStateRunningOutput)
}

// Time at which the container was last (re-)started
func (o OperatorStatusEphemeralContainerStatusesStateRunningPtrOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusEphemeralContainerStatusesStateRunning) *string {
		if v == nil {
			return nil
		}
		return v.StartedAt
	}).(pulumi.StringPtrOutput)
}

// Details about a terminated container
type OperatorStatusEphemeralContainerStatusesStateTerminated struct {
	// Container's ID in the format 'docker://<container_id>'
	ContainerID *string `pulumi:"containerID"`
	// Exit status from the last termination of the container
	ExitCode int `pulumi:"exitCode"`
	// Time at which the container last terminated
	FinishedAt *string `pulumi:"finishedAt"`
	// Message regarding the last termination of the container
	Message *string `pulumi:"message"`
	// (brief) reason from the last termination of the container
	Reason *string `pulumi:"reason"`
	// Signal from the last termination of the container
	Signal *int `pulumi:"signal"`
	// Time at which previous execution of the container started
	StartedAt *string `pulumi:"startedAt"`
}

// OperatorStatusEphemeralContainerStatusesStateTerminatedInput is an input type that accepts OperatorStatusEphemeralContainerStatusesStateTerminatedArgs and OperatorStatusEphemeralContainerStatusesStateTerminatedOutput values.
// You can construct a concrete instance of `OperatorStatusEphemeralContainerStatusesStateTerminatedInput` via:
//
//          OperatorStatusEphemeralContainerStatusesStateTerminatedArgs{...}
type OperatorStatusEphemeralContainerStatusesStateTerminatedInput interface {
	pulumi.Input

	ToOperatorStatusEphemeralContainerStatusesStateTerminatedOutput() OperatorStatusEphemeralContainerStatusesStateTerminatedOutput
	ToOperatorStatusEphemeralContainerStatusesStateTerminatedOutputWithContext(context.Context) OperatorStatusEphemeralContainerStatusesStateTerminatedOutput
}

// Details about a terminated container
type OperatorStatusEphemeralContainerStatusesStateTerminatedArgs struct {
	// Container's ID in the format 'docker://<container_id>'
	ContainerID pulumi.StringPtrInput `pulumi:"containerID"`
	// Exit status from the last termination of the container
	ExitCode pulumi.IntInput `pulumi:"exitCode"`
	// Time at which the container last terminated
	FinishedAt pulumi.StringPtrInput `pulumi:"finishedAt"`
	// Message regarding the last termination of the container
	Message pulumi.StringPtrInput `pulumi:"message"`
	// (brief) reason from the last termination of the container
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Signal from the last termination of the container
	Signal pulumi.IntPtrInput `pulumi:"signal"`
	// Time at which previous execution of the container started
	StartedAt pulumi.StringPtrInput `pulumi:"startedAt"`
}

func (OperatorStatusEphemeralContainerStatusesStateTerminatedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusEphemeralContainerStatusesStateTerminated)(nil)).Elem()
}

func (i OperatorStatusEphemeralContainerStatusesStateTerminatedArgs) ToOperatorStatusEphemeralContainerStatusesStateTerminatedOutput() OperatorStatusEphemeralContainerStatusesStateTerminatedOutput {
	return i.ToOperatorStatusEphemeralContainerStatusesStateTerminatedOutputWithContext(context.Background())
}

func (i OperatorStatusEphemeralContainerStatusesStateTerminatedArgs) ToOperatorStatusEphemeralContainerStatusesStateTerminatedOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesStateTerminatedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusEphemeralContainerStatusesStateTerminatedOutput)
}

func (i OperatorStatusEphemeralContainerStatusesStateTerminatedArgs) ToOperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutput() OperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutput {
	return i.ToOperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutputWithContext(context.Background())
}

func (i OperatorStatusEphemeralContainerStatusesStateTerminatedArgs) ToOperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusEphemeralContainerStatusesStateTerminatedOutput).ToOperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutputWithContext(ctx)
}

// OperatorStatusEphemeralContainerStatusesStateTerminatedPtrInput is an input type that accepts OperatorStatusEphemeralContainerStatusesStateTerminatedArgs, OperatorStatusEphemeralContainerStatusesStateTerminatedPtr and OperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutput values.
// You can construct a concrete instance of `OperatorStatusEphemeralContainerStatusesStateTerminatedPtrInput` via:
//
//          OperatorStatusEphemeralContainerStatusesStateTerminatedArgs{...}
//
//  or:
//
//          nil
type OperatorStatusEphemeralContainerStatusesStateTerminatedPtrInput interface {
	pulumi.Input

	ToOperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutput() OperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutput
	ToOperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutputWithContext(context.Context) OperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutput
}

type operatorStatusEphemeralContainerStatusesStateTerminatedPtrType OperatorStatusEphemeralContainerStatusesStateTerminatedArgs

func OperatorStatusEphemeralContainerStatusesStateTerminatedPtr(v *OperatorStatusEphemeralContainerStatusesStateTerminatedArgs) OperatorStatusEphemeralContainerStatusesStateTerminatedPtrInput {
	return (*operatorStatusEphemeralContainerStatusesStateTerminatedPtrType)(v)
}

func (*operatorStatusEphemeralContainerStatusesStateTerminatedPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusEphemeralContainerStatusesStateTerminated)(nil)).Elem()
}

func (i *operatorStatusEphemeralContainerStatusesStateTerminatedPtrType) ToOperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutput() OperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutput {
	return i.ToOperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutputWithContext(context.Background())
}

func (i *operatorStatusEphemeralContainerStatusesStateTerminatedPtrType) ToOperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutput)
}

// Details about a terminated container
type OperatorStatusEphemeralContainerStatusesStateTerminatedOutput struct{ *pulumi.OutputState }

func (OperatorStatusEphemeralContainerStatusesStateTerminatedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusEphemeralContainerStatusesStateTerminated)(nil)).Elem()
}

func (o OperatorStatusEphemeralContainerStatusesStateTerminatedOutput) ToOperatorStatusEphemeralContainerStatusesStateTerminatedOutput() OperatorStatusEphemeralContainerStatusesStateTerminatedOutput {
	return o
}

func (o OperatorStatusEphemeralContainerStatusesStateTerminatedOutput) ToOperatorStatusEphemeralContainerStatusesStateTerminatedOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesStateTerminatedOutput {
	return o
}

func (o OperatorStatusEphemeralContainerStatusesStateTerminatedOutput) ToOperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutput() OperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutput {
	return o.ToOperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutputWithContext(context.Background())
}

func (o OperatorStatusEphemeralContainerStatusesStateTerminatedOutput) ToOperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutput {
	return o.ApplyT(func(v OperatorStatusEphemeralContainerStatusesStateTerminated) *OperatorStatusEphemeralContainerStatusesStateTerminated {
		return &v
	}).(OperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutput)
}

// Container's ID in the format 'docker://<container_id>'
func (o OperatorStatusEphemeralContainerStatusesStateTerminatedOutput) ContainerID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusEphemeralContainerStatusesStateTerminated) *string { return v.ContainerID }).(pulumi.StringPtrOutput)
}

// Exit status from the last termination of the container
func (o OperatorStatusEphemeralContainerStatusesStateTerminatedOutput) ExitCode() pulumi.IntOutput {
	return o.ApplyT(func(v OperatorStatusEphemeralContainerStatusesStateTerminated) int { return v.ExitCode }).(pulumi.IntOutput)
}

// Time at which the container last terminated
func (o OperatorStatusEphemeralContainerStatusesStateTerminatedOutput) FinishedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusEphemeralContainerStatusesStateTerminated) *string { return v.FinishedAt }).(pulumi.StringPtrOutput)
}

// Message regarding the last termination of the container
func (o OperatorStatusEphemeralContainerStatusesStateTerminatedOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusEphemeralContainerStatusesStateTerminated) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// (brief) reason from the last termination of the container
func (o OperatorStatusEphemeralContainerStatusesStateTerminatedOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusEphemeralContainerStatusesStateTerminated) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Signal from the last termination of the container
func (o OperatorStatusEphemeralContainerStatusesStateTerminatedOutput) Signal() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OperatorStatusEphemeralContainerStatusesStateTerminated) *int { return v.Signal }).(pulumi.IntPtrOutput)
}

// Time at which previous execution of the container started
func (o OperatorStatusEphemeralContainerStatusesStateTerminatedOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusEphemeralContainerStatusesStateTerminated) *string { return v.StartedAt }).(pulumi.StringPtrOutput)
}

type OperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutput struct{ *pulumi.OutputState }

func (OperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusEphemeralContainerStatusesStateTerminated)(nil)).Elem()
}

func (o OperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutput) ToOperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutput() OperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutput {
	return o
}

func (o OperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutput) ToOperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutput {
	return o
}

func (o OperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutput) Elem() OperatorStatusEphemeralContainerStatusesStateTerminatedOutput {
	return o.ApplyT(func(v *OperatorStatusEphemeralContainerStatusesStateTerminated) OperatorStatusEphemeralContainerStatusesStateTerminated {
		return *v
	}).(OperatorStatusEphemeralContainerStatusesStateTerminatedOutput)
}

// Container's ID in the format 'docker://<container_id>'
func (o OperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutput) ContainerID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusEphemeralContainerStatusesStateTerminated) *string {
		if v == nil {
			return nil
		}
		return v.ContainerID
	}).(pulumi.StringPtrOutput)
}

// Exit status from the last termination of the container
func (o OperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutput) ExitCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OperatorStatusEphemeralContainerStatusesStateTerminated) *int {
		if v == nil {
			return nil
		}
		return &v.ExitCode
	}).(pulumi.IntPtrOutput)
}

// Time at which the container last terminated
func (o OperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutput) FinishedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusEphemeralContainerStatusesStateTerminated) *string {
		if v == nil {
			return nil
		}
		return v.FinishedAt
	}).(pulumi.StringPtrOutput)
}

// Message regarding the last termination of the container
func (o OperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusEphemeralContainerStatusesStateTerminated) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// (brief) reason from the last termination of the container
func (o OperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusEphemeralContainerStatusesStateTerminated) *string {
		if v == nil {
			return nil
		}
		return v.Reason
	}).(pulumi.StringPtrOutput)
}

// Signal from the last termination of the container
func (o OperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutput) Signal() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OperatorStatusEphemeralContainerStatusesStateTerminated) *int {
		if v == nil {
			return nil
		}
		return v.Signal
	}).(pulumi.IntPtrOutput)
}

// Time at which previous execution of the container started
func (o OperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusEphemeralContainerStatusesStateTerminated) *string {
		if v == nil {
			return nil
		}
		return v.StartedAt
	}).(pulumi.StringPtrOutput)
}

// Details about a waiting container
type OperatorStatusEphemeralContainerStatusesStateWaiting struct {
	// Message regarding why the container is not yet running.
	Message *string `pulumi:"message"`
	// (brief) reason the container is not yet running.
	Reason *string `pulumi:"reason"`
}

// OperatorStatusEphemeralContainerStatusesStateWaitingInput is an input type that accepts OperatorStatusEphemeralContainerStatusesStateWaitingArgs and OperatorStatusEphemeralContainerStatusesStateWaitingOutput values.
// You can construct a concrete instance of `OperatorStatusEphemeralContainerStatusesStateWaitingInput` via:
//
//          OperatorStatusEphemeralContainerStatusesStateWaitingArgs{...}
type OperatorStatusEphemeralContainerStatusesStateWaitingInput interface {
	pulumi.Input

	ToOperatorStatusEphemeralContainerStatusesStateWaitingOutput() OperatorStatusEphemeralContainerStatusesStateWaitingOutput
	ToOperatorStatusEphemeralContainerStatusesStateWaitingOutputWithContext(context.Context) OperatorStatusEphemeralContainerStatusesStateWaitingOutput
}

// Details about a waiting container
type OperatorStatusEphemeralContainerStatusesStateWaitingArgs struct {
	// Message regarding why the container is not yet running.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// (brief) reason the container is not yet running.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
}

func (OperatorStatusEphemeralContainerStatusesStateWaitingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusEphemeralContainerStatusesStateWaiting)(nil)).Elem()
}

func (i OperatorStatusEphemeralContainerStatusesStateWaitingArgs) ToOperatorStatusEphemeralContainerStatusesStateWaitingOutput() OperatorStatusEphemeralContainerStatusesStateWaitingOutput {
	return i.ToOperatorStatusEphemeralContainerStatusesStateWaitingOutputWithContext(context.Background())
}

func (i OperatorStatusEphemeralContainerStatusesStateWaitingArgs) ToOperatorStatusEphemeralContainerStatusesStateWaitingOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesStateWaitingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusEphemeralContainerStatusesStateWaitingOutput)
}

func (i OperatorStatusEphemeralContainerStatusesStateWaitingArgs) ToOperatorStatusEphemeralContainerStatusesStateWaitingPtrOutput() OperatorStatusEphemeralContainerStatusesStateWaitingPtrOutput {
	return i.ToOperatorStatusEphemeralContainerStatusesStateWaitingPtrOutputWithContext(context.Background())
}

func (i OperatorStatusEphemeralContainerStatusesStateWaitingArgs) ToOperatorStatusEphemeralContainerStatusesStateWaitingPtrOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesStateWaitingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusEphemeralContainerStatusesStateWaitingOutput).ToOperatorStatusEphemeralContainerStatusesStateWaitingPtrOutputWithContext(ctx)
}

// OperatorStatusEphemeralContainerStatusesStateWaitingPtrInput is an input type that accepts OperatorStatusEphemeralContainerStatusesStateWaitingArgs, OperatorStatusEphemeralContainerStatusesStateWaitingPtr and OperatorStatusEphemeralContainerStatusesStateWaitingPtrOutput values.
// You can construct a concrete instance of `OperatorStatusEphemeralContainerStatusesStateWaitingPtrInput` via:
//
//          OperatorStatusEphemeralContainerStatusesStateWaitingArgs{...}
//
//  or:
//
//          nil
type OperatorStatusEphemeralContainerStatusesStateWaitingPtrInput interface {
	pulumi.Input

	ToOperatorStatusEphemeralContainerStatusesStateWaitingPtrOutput() OperatorStatusEphemeralContainerStatusesStateWaitingPtrOutput
	ToOperatorStatusEphemeralContainerStatusesStateWaitingPtrOutputWithContext(context.Context) OperatorStatusEphemeralContainerStatusesStateWaitingPtrOutput
}

type operatorStatusEphemeralContainerStatusesStateWaitingPtrType OperatorStatusEphemeralContainerStatusesStateWaitingArgs

func OperatorStatusEphemeralContainerStatusesStateWaitingPtr(v *OperatorStatusEphemeralContainerStatusesStateWaitingArgs) OperatorStatusEphemeralContainerStatusesStateWaitingPtrInput {
	return (*operatorStatusEphemeralContainerStatusesStateWaitingPtrType)(v)
}

func (*operatorStatusEphemeralContainerStatusesStateWaitingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusEphemeralContainerStatusesStateWaiting)(nil)).Elem()
}

func (i *operatorStatusEphemeralContainerStatusesStateWaitingPtrType) ToOperatorStatusEphemeralContainerStatusesStateWaitingPtrOutput() OperatorStatusEphemeralContainerStatusesStateWaitingPtrOutput {
	return i.ToOperatorStatusEphemeralContainerStatusesStateWaitingPtrOutputWithContext(context.Background())
}

func (i *operatorStatusEphemeralContainerStatusesStateWaitingPtrType) ToOperatorStatusEphemeralContainerStatusesStateWaitingPtrOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesStateWaitingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusEphemeralContainerStatusesStateWaitingPtrOutput)
}

// Details about a waiting container
type OperatorStatusEphemeralContainerStatusesStateWaitingOutput struct{ *pulumi.OutputState }

func (OperatorStatusEphemeralContainerStatusesStateWaitingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusEphemeralContainerStatusesStateWaiting)(nil)).Elem()
}

func (o OperatorStatusEphemeralContainerStatusesStateWaitingOutput) ToOperatorStatusEphemeralContainerStatusesStateWaitingOutput() OperatorStatusEphemeralContainerStatusesStateWaitingOutput {
	return o
}

func (o OperatorStatusEphemeralContainerStatusesStateWaitingOutput) ToOperatorStatusEphemeralContainerStatusesStateWaitingOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesStateWaitingOutput {
	return o
}

func (o OperatorStatusEphemeralContainerStatusesStateWaitingOutput) ToOperatorStatusEphemeralContainerStatusesStateWaitingPtrOutput() OperatorStatusEphemeralContainerStatusesStateWaitingPtrOutput {
	return o.ToOperatorStatusEphemeralContainerStatusesStateWaitingPtrOutputWithContext(context.Background())
}

func (o OperatorStatusEphemeralContainerStatusesStateWaitingOutput) ToOperatorStatusEphemeralContainerStatusesStateWaitingPtrOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesStateWaitingPtrOutput {
	return o.ApplyT(func(v OperatorStatusEphemeralContainerStatusesStateWaiting) *OperatorStatusEphemeralContainerStatusesStateWaiting {
		return &v
	}).(OperatorStatusEphemeralContainerStatusesStateWaitingPtrOutput)
}

// Message regarding why the container is not yet running.
func (o OperatorStatusEphemeralContainerStatusesStateWaitingOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusEphemeralContainerStatusesStateWaiting) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// (brief) reason the container is not yet running.
func (o OperatorStatusEphemeralContainerStatusesStateWaitingOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusEphemeralContainerStatusesStateWaiting) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

type OperatorStatusEphemeralContainerStatusesStateWaitingPtrOutput struct{ *pulumi.OutputState }

func (OperatorStatusEphemeralContainerStatusesStateWaitingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusEphemeralContainerStatusesStateWaiting)(nil)).Elem()
}

func (o OperatorStatusEphemeralContainerStatusesStateWaitingPtrOutput) ToOperatorStatusEphemeralContainerStatusesStateWaitingPtrOutput() OperatorStatusEphemeralContainerStatusesStateWaitingPtrOutput {
	return o
}

func (o OperatorStatusEphemeralContainerStatusesStateWaitingPtrOutput) ToOperatorStatusEphemeralContainerStatusesStateWaitingPtrOutputWithContext(ctx context.Context) OperatorStatusEphemeralContainerStatusesStateWaitingPtrOutput {
	return o
}

func (o OperatorStatusEphemeralContainerStatusesStateWaitingPtrOutput) Elem() OperatorStatusEphemeralContainerStatusesStateWaitingOutput {
	return o.ApplyT(func(v *OperatorStatusEphemeralContainerStatusesStateWaiting) OperatorStatusEphemeralContainerStatusesStateWaiting {
		return *v
	}).(OperatorStatusEphemeralContainerStatusesStateWaitingOutput)
}

// Message regarding why the container is not yet running.
func (o OperatorStatusEphemeralContainerStatusesStateWaitingPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusEphemeralContainerStatusesStateWaiting) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// (brief) reason the container is not yet running.
func (o OperatorStatusEphemeralContainerStatusesStateWaitingPtrOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusEphemeralContainerStatusesStateWaiting) *string {
		if v == nil {
			return nil
		}
		return v.Reason
	}).(pulumi.StringPtrOutput)
}

// ContainerStatus contains details for the current status of this container.
type OperatorStatusInitContainerStatuses struct {
	// Container's ID in the format 'docker://<container_id>'.
	ContainerID *string `pulumi:"containerID"`
	// The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images TODO(dchen1107): Which image the container is running with?
	Image string `pulumi:"image"`
	// ImageID of the container's image.
	ImageID string `pulumi:"imageID"`
	// Details about the container's last termination condition.
	LastState *OperatorStatusInitContainerStatusesLastState `pulumi:"lastState"`
	// This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
	Name string `pulumi:"name"`
	// Specifies whether the container has passed its readiness probe.
	Ready bool `pulumi:"ready"`
	// The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.
	RestartCount int `pulumi:"restartCount"`
	// Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
	Started *bool `pulumi:"started"`
	// Details about the container's current condition.
	State *OperatorStatusInitContainerStatusesState `pulumi:"state"`
}

// OperatorStatusInitContainerStatusesInput is an input type that accepts OperatorStatusInitContainerStatusesArgs and OperatorStatusInitContainerStatusesOutput values.
// You can construct a concrete instance of `OperatorStatusInitContainerStatusesInput` via:
//
//          OperatorStatusInitContainerStatusesArgs{...}
type OperatorStatusInitContainerStatusesInput interface {
	pulumi.Input

	ToOperatorStatusInitContainerStatusesOutput() OperatorStatusInitContainerStatusesOutput
	ToOperatorStatusInitContainerStatusesOutputWithContext(context.Context) OperatorStatusInitContainerStatusesOutput
}

// ContainerStatus contains details for the current status of this container.
type OperatorStatusInitContainerStatusesArgs struct {
	// Container's ID in the format 'docker://<container_id>'.
	ContainerID pulumi.StringPtrInput `pulumi:"containerID"`
	// The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images TODO(dchen1107): Which image the container is running with?
	Image pulumi.StringInput `pulumi:"image"`
	// ImageID of the container's image.
	ImageID pulumi.StringInput `pulumi:"imageID"`
	// Details about the container's last termination condition.
	LastState OperatorStatusInitContainerStatusesLastStatePtrInput `pulumi:"lastState"`
	// This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies whether the container has passed its readiness probe.
	Ready pulumi.BoolInput `pulumi:"ready"`
	// The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.
	RestartCount pulumi.IntInput `pulumi:"restartCount"`
	// Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
	Started pulumi.BoolPtrInput `pulumi:"started"`
	// Details about the container's current condition.
	State OperatorStatusInitContainerStatusesStatePtrInput `pulumi:"state"`
}

func (OperatorStatusInitContainerStatusesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusInitContainerStatuses)(nil)).Elem()
}

func (i OperatorStatusInitContainerStatusesArgs) ToOperatorStatusInitContainerStatusesOutput() OperatorStatusInitContainerStatusesOutput {
	return i.ToOperatorStatusInitContainerStatusesOutputWithContext(context.Background())
}

func (i OperatorStatusInitContainerStatusesArgs) ToOperatorStatusInitContainerStatusesOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusInitContainerStatusesOutput)
}

// OperatorStatusInitContainerStatusesArrayInput is an input type that accepts OperatorStatusInitContainerStatusesArray and OperatorStatusInitContainerStatusesArrayOutput values.
// You can construct a concrete instance of `OperatorStatusInitContainerStatusesArrayInput` via:
//
//          OperatorStatusInitContainerStatusesArray{ OperatorStatusInitContainerStatusesArgs{...} }
type OperatorStatusInitContainerStatusesArrayInput interface {
	pulumi.Input

	ToOperatorStatusInitContainerStatusesArrayOutput() OperatorStatusInitContainerStatusesArrayOutput
	ToOperatorStatusInitContainerStatusesArrayOutputWithContext(context.Context) OperatorStatusInitContainerStatusesArrayOutput
}

type OperatorStatusInitContainerStatusesArray []OperatorStatusInitContainerStatusesInput

func (OperatorStatusInitContainerStatusesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OperatorStatusInitContainerStatuses)(nil)).Elem()
}

func (i OperatorStatusInitContainerStatusesArray) ToOperatorStatusInitContainerStatusesArrayOutput() OperatorStatusInitContainerStatusesArrayOutput {
	return i.ToOperatorStatusInitContainerStatusesArrayOutputWithContext(context.Background())
}

func (i OperatorStatusInitContainerStatusesArray) ToOperatorStatusInitContainerStatusesArrayOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusInitContainerStatusesArrayOutput)
}

// ContainerStatus contains details for the current status of this container.
type OperatorStatusInitContainerStatusesOutput struct{ *pulumi.OutputState }

func (OperatorStatusInitContainerStatusesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusInitContainerStatuses)(nil)).Elem()
}

func (o OperatorStatusInitContainerStatusesOutput) ToOperatorStatusInitContainerStatusesOutput() OperatorStatusInitContainerStatusesOutput {
	return o
}

func (o OperatorStatusInitContainerStatusesOutput) ToOperatorStatusInitContainerStatusesOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesOutput {
	return o
}

// Container's ID in the format 'docker://<container_id>'.
func (o OperatorStatusInitContainerStatusesOutput) ContainerID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusInitContainerStatuses) *string { return v.ContainerID }).(pulumi.StringPtrOutput)
}

// The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images TODO(dchen1107): Which image the container is running with?
func (o OperatorStatusInitContainerStatusesOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v OperatorStatusInitContainerStatuses) string { return v.Image }).(pulumi.StringOutput)
}

// ImageID of the container's image.
func (o OperatorStatusInitContainerStatusesOutput) ImageID() pulumi.StringOutput {
	return o.ApplyT(func(v OperatorStatusInitContainerStatuses) string { return v.ImageID }).(pulumi.StringOutput)
}

// Details about the container's last termination condition.
func (o OperatorStatusInitContainerStatusesOutput) LastState() OperatorStatusInitContainerStatusesLastStatePtrOutput {
	return o.ApplyT(func(v OperatorStatusInitContainerStatuses) *OperatorStatusInitContainerStatusesLastState {
		return v.LastState
	}).(OperatorStatusInitContainerStatusesLastStatePtrOutput)
}

// This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
func (o OperatorStatusInitContainerStatusesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v OperatorStatusInitContainerStatuses) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies whether the container has passed its readiness probe.
func (o OperatorStatusInitContainerStatusesOutput) Ready() pulumi.BoolOutput {
	return o.ApplyT(func(v OperatorStatusInitContainerStatuses) bool { return v.Ready }).(pulumi.BoolOutput)
}

// The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.
func (o OperatorStatusInitContainerStatusesOutput) RestartCount() pulumi.IntOutput {
	return o.ApplyT(func(v OperatorStatusInitContainerStatuses) int { return v.RestartCount }).(pulumi.IntOutput)
}

// Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
func (o OperatorStatusInitContainerStatusesOutput) Started() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OperatorStatusInitContainerStatuses) *bool { return v.Started }).(pulumi.BoolPtrOutput)
}

// Details about the container's current condition.
func (o OperatorStatusInitContainerStatusesOutput) State() OperatorStatusInitContainerStatusesStatePtrOutput {
	return o.ApplyT(func(v OperatorStatusInitContainerStatuses) *OperatorStatusInitContainerStatusesState { return v.State }).(OperatorStatusInitContainerStatusesStatePtrOutput)
}

type OperatorStatusInitContainerStatusesArrayOutput struct{ *pulumi.OutputState }

func (OperatorStatusInitContainerStatusesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OperatorStatusInitContainerStatuses)(nil)).Elem()
}

func (o OperatorStatusInitContainerStatusesArrayOutput) ToOperatorStatusInitContainerStatusesArrayOutput() OperatorStatusInitContainerStatusesArrayOutput {
	return o
}

func (o OperatorStatusInitContainerStatusesArrayOutput) ToOperatorStatusInitContainerStatusesArrayOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesArrayOutput {
	return o
}

func (o OperatorStatusInitContainerStatusesArrayOutput) Index(i pulumi.IntInput) OperatorStatusInitContainerStatusesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OperatorStatusInitContainerStatuses {
		return vs[0].([]OperatorStatusInitContainerStatuses)[vs[1].(int)]
	}).(OperatorStatusInitContainerStatusesOutput)
}

// Details about the container's last termination condition.
type OperatorStatusInitContainerStatusesLastState struct {
	// Details about a running container
	Running *OperatorStatusInitContainerStatusesLastStateRunning `pulumi:"running"`
	// Details about a terminated container
	Terminated *OperatorStatusInitContainerStatusesLastStateTerminated `pulumi:"terminated"`
	// Details about a waiting container
	Waiting *OperatorStatusInitContainerStatusesLastStateWaiting `pulumi:"waiting"`
}

// OperatorStatusInitContainerStatusesLastStateInput is an input type that accepts OperatorStatusInitContainerStatusesLastStateArgs and OperatorStatusInitContainerStatusesLastStateOutput values.
// You can construct a concrete instance of `OperatorStatusInitContainerStatusesLastStateInput` via:
//
//          OperatorStatusInitContainerStatusesLastStateArgs{...}
type OperatorStatusInitContainerStatusesLastStateInput interface {
	pulumi.Input

	ToOperatorStatusInitContainerStatusesLastStateOutput() OperatorStatusInitContainerStatusesLastStateOutput
	ToOperatorStatusInitContainerStatusesLastStateOutputWithContext(context.Context) OperatorStatusInitContainerStatusesLastStateOutput
}

// Details about the container's last termination condition.
type OperatorStatusInitContainerStatusesLastStateArgs struct {
	// Details about a running container
	Running OperatorStatusInitContainerStatusesLastStateRunningPtrInput `pulumi:"running"`
	// Details about a terminated container
	Terminated OperatorStatusInitContainerStatusesLastStateTerminatedPtrInput `pulumi:"terminated"`
	// Details about a waiting container
	Waiting OperatorStatusInitContainerStatusesLastStateWaitingPtrInput `pulumi:"waiting"`
}

func (OperatorStatusInitContainerStatusesLastStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusInitContainerStatusesLastState)(nil)).Elem()
}

func (i OperatorStatusInitContainerStatusesLastStateArgs) ToOperatorStatusInitContainerStatusesLastStateOutput() OperatorStatusInitContainerStatusesLastStateOutput {
	return i.ToOperatorStatusInitContainerStatusesLastStateOutputWithContext(context.Background())
}

func (i OperatorStatusInitContainerStatusesLastStateArgs) ToOperatorStatusInitContainerStatusesLastStateOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesLastStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusInitContainerStatusesLastStateOutput)
}

func (i OperatorStatusInitContainerStatusesLastStateArgs) ToOperatorStatusInitContainerStatusesLastStatePtrOutput() OperatorStatusInitContainerStatusesLastStatePtrOutput {
	return i.ToOperatorStatusInitContainerStatusesLastStatePtrOutputWithContext(context.Background())
}

func (i OperatorStatusInitContainerStatusesLastStateArgs) ToOperatorStatusInitContainerStatusesLastStatePtrOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesLastStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusInitContainerStatusesLastStateOutput).ToOperatorStatusInitContainerStatusesLastStatePtrOutputWithContext(ctx)
}

// OperatorStatusInitContainerStatusesLastStatePtrInput is an input type that accepts OperatorStatusInitContainerStatusesLastStateArgs, OperatorStatusInitContainerStatusesLastStatePtr and OperatorStatusInitContainerStatusesLastStatePtrOutput values.
// You can construct a concrete instance of `OperatorStatusInitContainerStatusesLastStatePtrInput` via:
//
//          OperatorStatusInitContainerStatusesLastStateArgs{...}
//
//  or:
//
//          nil
type OperatorStatusInitContainerStatusesLastStatePtrInput interface {
	pulumi.Input

	ToOperatorStatusInitContainerStatusesLastStatePtrOutput() OperatorStatusInitContainerStatusesLastStatePtrOutput
	ToOperatorStatusInitContainerStatusesLastStatePtrOutputWithContext(context.Context) OperatorStatusInitContainerStatusesLastStatePtrOutput
}

type operatorStatusInitContainerStatusesLastStatePtrType OperatorStatusInitContainerStatusesLastStateArgs

func OperatorStatusInitContainerStatusesLastStatePtr(v *OperatorStatusInitContainerStatusesLastStateArgs) OperatorStatusInitContainerStatusesLastStatePtrInput {
	return (*operatorStatusInitContainerStatusesLastStatePtrType)(v)
}

func (*operatorStatusInitContainerStatusesLastStatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusInitContainerStatusesLastState)(nil)).Elem()
}

func (i *operatorStatusInitContainerStatusesLastStatePtrType) ToOperatorStatusInitContainerStatusesLastStatePtrOutput() OperatorStatusInitContainerStatusesLastStatePtrOutput {
	return i.ToOperatorStatusInitContainerStatusesLastStatePtrOutputWithContext(context.Background())
}

func (i *operatorStatusInitContainerStatusesLastStatePtrType) ToOperatorStatusInitContainerStatusesLastStatePtrOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesLastStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusInitContainerStatusesLastStatePtrOutput)
}

// Details about the container's last termination condition.
type OperatorStatusInitContainerStatusesLastStateOutput struct{ *pulumi.OutputState }

func (OperatorStatusInitContainerStatusesLastStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusInitContainerStatusesLastState)(nil)).Elem()
}

func (o OperatorStatusInitContainerStatusesLastStateOutput) ToOperatorStatusInitContainerStatusesLastStateOutput() OperatorStatusInitContainerStatusesLastStateOutput {
	return o
}

func (o OperatorStatusInitContainerStatusesLastStateOutput) ToOperatorStatusInitContainerStatusesLastStateOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesLastStateOutput {
	return o
}

func (o OperatorStatusInitContainerStatusesLastStateOutput) ToOperatorStatusInitContainerStatusesLastStatePtrOutput() OperatorStatusInitContainerStatusesLastStatePtrOutput {
	return o.ToOperatorStatusInitContainerStatusesLastStatePtrOutputWithContext(context.Background())
}

func (o OperatorStatusInitContainerStatusesLastStateOutput) ToOperatorStatusInitContainerStatusesLastStatePtrOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesLastStatePtrOutput {
	return o.ApplyT(func(v OperatorStatusInitContainerStatusesLastState) *OperatorStatusInitContainerStatusesLastState {
		return &v
	}).(OperatorStatusInitContainerStatusesLastStatePtrOutput)
}

// Details about a running container
func (o OperatorStatusInitContainerStatusesLastStateOutput) Running() OperatorStatusInitContainerStatusesLastStateRunningPtrOutput {
	return o.ApplyT(func(v OperatorStatusInitContainerStatusesLastState) *OperatorStatusInitContainerStatusesLastStateRunning {
		return v.Running
	}).(OperatorStatusInitContainerStatusesLastStateRunningPtrOutput)
}

// Details about a terminated container
func (o OperatorStatusInitContainerStatusesLastStateOutput) Terminated() OperatorStatusInitContainerStatusesLastStateTerminatedPtrOutput {
	return o.ApplyT(func(v OperatorStatusInitContainerStatusesLastState) *OperatorStatusInitContainerStatusesLastStateTerminated {
		return v.Terminated
	}).(OperatorStatusInitContainerStatusesLastStateTerminatedPtrOutput)
}

// Details about a waiting container
func (o OperatorStatusInitContainerStatusesLastStateOutput) Waiting() OperatorStatusInitContainerStatusesLastStateWaitingPtrOutput {
	return o.ApplyT(func(v OperatorStatusInitContainerStatusesLastState) *OperatorStatusInitContainerStatusesLastStateWaiting {
		return v.Waiting
	}).(OperatorStatusInitContainerStatusesLastStateWaitingPtrOutput)
}

type OperatorStatusInitContainerStatusesLastStatePtrOutput struct{ *pulumi.OutputState }

func (OperatorStatusInitContainerStatusesLastStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusInitContainerStatusesLastState)(nil)).Elem()
}

func (o OperatorStatusInitContainerStatusesLastStatePtrOutput) ToOperatorStatusInitContainerStatusesLastStatePtrOutput() OperatorStatusInitContainerStatusesLastStatePtrOutput {
	return o
}

func (o OperatorStatusInitContainerStatusesLastStatePtrOutput) ToOperatorStatusInitContainerStatusesLastStatePtrOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesLastStatePtrOutput {
	return o
}

func (o OperatorStatusInitContainerStatusesLastStatePtrOutput) Elem() OperatorStatusInitContainerStatusesLastStateOutput {
	return o.ApplyT(func(v *OperatorStatusInitContainerStatusesLastState) OperatorStatusInitContainerStatusesLastState {
		return *v
	}).(OperatorStatusInitContainerStatusesLastStateOutput)
}

// Details about a running container
func (o OperatorStatusInitContainerStatusesLastStatePtrOutput) Running() OperatorStatusInitContainerStatusesLastStateRunningPtrOutput {
	return o.ApplyT(func(v *OperatorStatusInitContainerStatusesLastState) *OperatorStatusInitContainerStatusesLastStateRunning {
		if v == nil {
			return nil
		}
		return v.Running
	}).(OperatorStatusInitContainerStatusesLastStateRunningPtrOutput)
}

// Details about a terminated container
func (o OperatorStatusInitContainerStatusesLastStatePtrOutput) Terminated() OperatorStatusInitContainerStatusesLastStateTerminatedPtrOutput {
	return o.ApplyT(func(v *OperatorStatusInitContainerStatusesLastState) *OperatorStatusInitContainerStatusesLastStateTerminated {
		if v == nil {
			return nil
		}
		return v.Terminated
	}).(OperatorStatusInitContainerStatusesLastStateTerminatedPtrOutput)
}

// Details about a waiting container
func (o OperatorStatusInitContainerStatusesLastStatePtrOutput) Waiting() OperatorStatusInitContainerStatusesLastStateWaitingPtrOutput {
	return o.ApplyT(func(v *OperatorStatusInitContainerStatusesLastState) *OperatorStatusInitContainerStatusesLastStateWaiting {
		if v == nil {
			return nil
		}
		return v.Waiting
	}).(OperatorStatusInitContainerStatusesLastStateWaitingPtrOutput)
}

// Details about a running container
type OperatorStatusInitContainerStatusesLastStateRunning struct {
	// Time at which the container was last (re-)started
	StartedAt *string `pulumi:"startedAt"`
}

// OperatorStatusInitContainerStatusesLastStateRunningInput is an input type that accepts OperatorStatusInitContainerStatusesLastStateRunningArgs and OperatorStatusInitContainerStatusesLastStateRunningOutput values.
// You can construct a concrete instance of `OperatorStatusInitContainerStatusesLastStateRunningInput` via:
//
//          OperatorStatusInitContainerStatusesLastStateRunningArgs{...}
type OperatorStatusInitContainerStatusesLastStateRunningInput interface {
	pulumi.Input

	ToOperatorStatusInitContainerStatusesLastStateRunningOutput() OperatorStatusInitContainerStatusesLastStateRunningOutput
	ToOperatorStatusInitContainerStatusesLastStateRunningOutputWithContext(context.Context) OperatorStatusInitContainerStatusesLastStateRunningOutput
}

// Details about a running container
type OperatorStatusInitContainerStatusesLastStateRunningArgs struct {
	// Time at which the container was last (re-)started
	StartedAt pulumi.StringPtrInput `pulumi:"startedAt"`
}

func (OperatorStatusInitContainerStatusesLastStateRunningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusInitContainerStatusesLastStateRunning)(nil)).Elem()
}

func (i OperatorStatusInitContainerStatusesLastStateRunningArgs) ToOperatorStatusInitContainerStatusesLastStateRunningOutput() OperatorStatusInitContainerStatusesLastStateRunningOutput {
	return i.ToOperatorStatusInitContainerStatusesLastStateRunningOutputWithContext(context.Background())
}

func (i OperatorStatusInitContainerStatusesLastStateRunningArgs) ToOperatorStatusInitContainerStatusesLastStateRunningOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesLastStateRunningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusInitContainerStatusesLastStateRunningOutput)
}

func (i OperatorStatusInitContainerStatusesLastStateRunningArgs) ToOperatorStatusInitContainerStatusesLastStateRunningPtrOutput() OperatorStatusInitContainerStatusesLastStateRunningPtrOutput {
	return i.ToOperatorStatusInitContainerStatusesLastStateRunningPtrOutputWithContext(context.Background())
}

func (i OperatorStatusInitContainerStatusesLastStateRunningArgs) ToOperatorStatusInitContainerStatusesLastStateRunningPtrOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesLastStateRunningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusInitContainerStatusesLastStateRunningOutput).ToOperatorStatusInitContainerStatusesLastStateRunningPtrOutputWithContext(ctx)
}

// OperatorStatusInitContainerStatusesLastStateRunningPtrInput is an input type that accepts OperatorStatusInitContainerStatusesLastStateRunningArgs, OperatorStatusInitContainerStatusesLastStateRunningPtr and OperatorStatusInitContainerStatusesLastStateRunningPtrOutput values.
// You can construct a concrete instance of `OperatorStatusInitContainerStatusesLastStateRunningPtrInput` via:
//
//          OperatorStatusInitContainerStatusesLastStateRunningArgs{...}
//
//  or:
//
//          nil
type OperatorStatusInitContainerStatusesLastStateRunningPtrInput interface {
	pulumi.Input

	ToOperatorStatusInitContainerStatusesLastStateRunningPtrOutput() OperatorStatusInitContainerStatusesLastStateRunningPtrOutput
	ToOperatorStatusInitContainerStatusesLastStateRunningPtrOutputWithContext(context.Context) OperatorStatusInitContainerStatusesLastStateRunningPtrOutput
}

type operatorStatusInitContainerStatusesLastStateRunningPtrType OperatorStatusInitContainerStatusesLastStateRunningArgs

func OperatorStatusInitContainerStatusesLastStateRunningPtr(v *OperatorStatusInitContainerStatusesLastStateRunningArgs) OperatorStatusInitContainerStatusesLastStateRunningPtrInput {
	return (*operatorStatusInitContainerStatusesLastStateRunningPtrType)(v)
}

func (*operatorStatusInitContainerStatusesLastStateRunningPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusInitContainerStatusesLastStateRunning)(nil)).Elem()
}

func (i *operatorStatusInitContainerStatusesLastStateRunningPtrType) ToOperatorStatusInitContainerStatusesLastStateRunningPtrOutput() OperatorStatusInitContainerStatusesLastStateRunningPtrOutput {
	return i.ToOperatorStatusInitContainerStatusesLastStateRunningPtrOutputWithContext(context.Background())
}

func (i *operatorStatusInitContainerStatusesLastStateRunningPtrType) ToOperatorStatusInitContainerStatusesLastStateRunningPtrOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesLastStateRunningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusInitContainerStatusesLastStateRunningPtrOutput)
}

// Details about a running container
type OperatorStatusInitContainerStatusesLastStateRunningOutput struct{ *pulumi.OutputState }

func (OperatorStatusInitContainerStatusesLastStateRunningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusInitContainerStatusesLastStateRunning)(nil)).Elem()
}

func (o OperatorStatusInitContainerStatusesLastStateRunningOutput) ToOperatorStatusInitContainerStatusesLastStateRunningOutput() OperatorStatusInitContainerStatusesLastStateRunningOutput {
	return o
}

func (o OperatorStatusInitContainerStatusesLastStateRunningOutput) ToOperatorStatusInitContainerStatusesLastStateRunningOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesLastStateRunningOutput {
	return o
}

func (o OperatorStatusInitContainerStatusesLastStateRunningOutput) ToOperatorStatusInitContainerStatusesLastStateRunningPtrOutput() OperatorStatusInitContainerStatusesLastStateRunningPtrOutput {
	return o.ToOperatorStatusInitContainerStatusesLastStateRunningPtrOutputWithContext(context.Background())
}

func (o OperatorStatusInitContainerStatusesLastStateRunningOutput) ToOperatorStatusInitContainerStatusesLastStateRunningPtrOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesLastStateRunningPtrOutput {
	return o.ApplyT(func(v OperatorStatusInitContainerStatusesLastStateRunning) *OperatorStatusInitContainerStatusesLastStateRunning {
		return &v
	}).(OperatorStatusInitContainerStatusesLastStateRunningPtrOutput)
}

// Time at which the container was last (re-)started
func (o OperatorStatusInitContainerStatusesLastStateRunningOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusInitContainerStatusesLastStateRunning) *string { return v.StartedAt }).(pulumi.StringPtrOutput)
}

type OperatorStatusInitContainerStatusesLastStateRunningPtrOutput struct{ *pulumi.OutputState }

func (OperatorStatusInitContainerStatusesLastStateRunningPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusInitContainerStatusesLastStateRunning)(nil)).Elem()
}

func (o OperatorStatusInitContainerStatusesLastStateRunningPtrOutput) ToOperatorStatusInitContainerStatusesLastStateRunningPtrOutput() OperatorStatusInitContainerStatusesLastStateRunningPtrOutput {
	return o
}

func (o OperatorStatusInitContainerStatusesLastStateRunningPtrOutput) ToOperatorStatusInitContainerStatusesLastStateRunningPtrOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesLastStateRunningPtrOutput {
	return o
}

func (o OperatorStatusInitContainerStatusesLastStateRunningPtrOutput) Elem() OperatorStatusInitContainerStatusesLastStateRunningOutput {
	return o.ApplyT(func(v *OperatorStatusInitContainerStatusesLastStateRunning) OperatorStatusInitContainerStatusesLastStateRunning {
		return *v
	}).(OperatorStatusInitContainerStatusesLastStateRunningOutput)
}

// Time at which the container was last (re-)started
func (o OperatorStatusInitContainerStatusesLastStateRunningPtrOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusInitContainerStatusesLastStateRunning) *string {
		if v == nil {
			return nil
		}
		return v.StartedAt
	}).(pulumi.StringPtrOutput)
}

// Details about a terminated container
type OperatorStatusInitContainerStatusesLastStateTerminated struct {
	// Container's ID in the format 'docker://<container_id>'
	ContainerID *string `pulumi:"containerID"`
	// Exit status from the last termination of the container
	ExitCode int `pulumi:"exitCode"`
	// Time at which the container last terminated
	FinishedAt *string `pulumi:"finishedAt"`
	// Message regarding the last termination of the container
	Message *string `pulumi:"message"`
	// (brief) reason from the last termination of the container
	Reason *string `pulumi:"reason"`
	// Signal from the last termination of the container
	Signal *int `pulumi:"signal"`
	// Time at which previous execution of the container started
	StartedAt *string `pulumi:"startedAt"`
}

// OperatorStatusInitContainerStatusesLastStateTerminatedInput is an input type that accepts OperatorStatusInitContainerStatusesLastStateTerminatedArgs and OperatorStatusInitContainerStatusesLastStateTerminatedOutput values.
// You can construct a concrete instance of `OperatorStatusInitContainerStatusesLastStateTerminatedInput` via:
//
//          OperatorStatusInitContainerStatusesLastStateTerminatedArgs{...}
type OperatorStatusInitContainerStatusesLastStateTerminatedInput interface {
	pulumi.Input

	ToOperatorStatusInitContainerStatusesLastStateTerminatedOutput() OperatorStatusInitContainerStatusesLastStateTerminatedOutput
	ToOperatorStatusInitContainerStatusesLastStateTerminatedOutputWithContext(context.Context) OperatorStatusInitContainerStatusesLastStateTerminatedOutput
}

// Details about a terminated container
type OperatorStatusInitContainerStatusesLastStateTerminatedArgs struct {
	// Container's ID in the format 'docker://<container_id>'
	ContainerID pulumi.StringPtrInput `pulumi:"containerID"`
	// Exit status from the last termination of the container
	ExitCode pulumi.IntInput `pulumi:"exitCode"`
	// Time at which the container last terminated
	FinishedAt pulumi.StringPtrInput `pulumi:"finishedAt"`
	// Message regarding the last termination of the container
	Message pulumi.StringPtrInput `pulumi:"message"`
	// (brief) reason from the last termination of the container
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Signal from the last termination of the container
	Signal pulumi.IntPtrInput `pulumi:"signal"`
	// Time at which previous execution of the container started
	StartedAt pulumi.StringPtrInput `pulumi:"startedAt"`
}

func (OperatorStatusInitContainerStatusesLastStateTerminatedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusInitContainerStatusesLastStateTerminated)(nil)).Elem()
}

func (i OperatorStatusInitContainerStatusesLastStateTerminatedArgs) ToOperatorStatusInitContainerStatusesLastStateTerminatedOutput() OperatorStatusInitContainerStatusesLastStateTerminatedOutput {
	return i.ToOperatorStatusInitContainerStatusesLastStateTerminatedOutputWithContext(context.Background())
}

func (i OperatorStatusInitContainerStatusesLastStateTerminatedArgs) ToOperatorStatusInitContainerStatusesLastStateTerminatedOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesLastStateTerminatedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusInitContainerStatusesLastStateTerminatedOutput)
}

func (i OperatorStatusInitContainerStatusesLastStateTerminatedArgs) ToOperatorStatusInitContainerStatusesLastStateTerminatedPtrOutput() OperatorStatusInitContainerStatusesLastStateTerminatedPtrOutput {
	return i.ToOperatorStatusInitContainerStatusesLastStateTerminatedPtrOutputWithContext(context.Background())
}

func (i OperatorStatusInitContainerStatusesLastStateTerminatedArgs) ToOperatorStatusInitContainerStatusesLastStateTerminatedPtrOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesLastStateTerminatedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusInitContainerStatusesLastStateTerminatedOutput).ToOperatorStatusInitContainerStatusesLastStateTerminatedPtrOutputWithContext(ctx)
}

// OperatorStatusInitContainerStatusesLastStateTerminatedPtrInput is an input type that accepts OperatorStatusInitContainerStatusesLastStateTerminatedArgs, OperatorStatusInitContainerStatusesLastStateTerminatedPtr and OperatorStatusInitContainerStatusesLastStateTerminatedPtrOutput values.
// You can construct a concrete instance of `OperatorStatusInitContainerStatusesLastStateTerminatedPtrInput` via:
//
//          OperatorStatusInitContainerStatusesLastStateTerminatedArgs{...}
//
//  or:
//
//          nil
type OperatorStatusInitContainerStatusesLastStateTerminatedPtrInput interface {
	pulumi.Input

	ToOperatorStatusInitContainerStatusesLastStateTerminatedPtrOutput() OperatorStatusInitContainerStatusesLastStateTerminatedPtrOutput
	ToOperatorStatusInitContainerStatusesLastStateTerminatedPtrOutputWithContext(context.Context) OperatorStatusInitContainerStatusesLastStateTerminatedPtrOutput
}

type operatorStatusInitContainerStatusesLastStateTerminatedPtrType OperatorStatusInitContainerStatusesLastStateTerminatedArgs

func OperatorStatusInitContainerStatusesLastStateTerminatedPtr(v *OperatorStatusInitContainerStatusesLastStateTerminatedArgs) OperatorStatusInitContainerStatusesLastStateTerminatedPtrInput {
	return (*operatorStatusInitContainerStatusesLastStateTerminatedPtrType)(v)
}

func (*operatorStatusInitContainerStatusesLastStateTerminatedPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusInitContainerStatusesLastStateTerminated)(nil)).Elem()
}

func (i *operatorStatusInitContainerStatusesLastStateTerminatedPtrType) ToOperatorStatusInitContainerStatusesLastStateTerminatedPtrOutput() OperatorStatusInitContainerStatusesLastStateTerminatedPtrOutput {
	return i.ToOperatorStatusInitContainerStatusesLastStateTerminatedPtrOutputWithContext(context.Background())
}

func (i *operatorStatusInitContainerStatusesLastStateTerminatedPtrType) ToOperatorStatusInitContainerStatusesLastStateTerminatedPtrOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesLastStateTerminatedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusInitContainerStatusesLastStateTerminatedPtrOutput)
}

// Details about a terminated container
type OperatorStatusInitContainerStatusesLastStateTerminatedOutput struct{ *pulumi.OutputState }

func (OperatorStatusInitContainerStatusesLastStateTerminatedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusInitContainerStatusesLastStateTerminated)(nil)).Elem()
}

func (o OperatorStatusInitContainerStatusesLastStateTerminatedOutput) ToOperatorStatusInitContainerStatusesLastStateTerminatedOutput() OperatorStatusInitContainerStatusesLastStateTerminatedOutput {
	return o
}

func (o OperatorStatusInitContainerStatusesLastStateTerminatedOutput) ToOperatorStatusInitContainerStatusesLastStateTerminatedOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesLastStateTerminatedOutput {
	return o
}

func (o OperatorStatusInitContainerStatusesLastStateTerminatedOutput) ToOperatorStatusInitContainerStatusesLastStateTerminatedPtrOutput() OperatorStatusInitContainerStatusesLastStateTerminatedPtrOutput {
	return o.ToOperatorStatusInitContainerStatusesLastStateTerminatedPtrOutputWithContext(context.Background())
}

func (o OperatorStatusInitContainerStatusesLastStateTerminatedOutput) ToOperatorStatusInitContainerStatusesLastStateTerminatedPtrOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesLastStateTerminatedPtrOutput {
	return o.ApplyT(func(v OperatorStatusInitContainerStatusesLastStateTerminated) *OperatorStatusInitContainerStatusesLastStateTerminated {
		return &v
	}).(OperatorStatusInitContainerStatusesLastStateTerminatedPtrOutput)
}

// Container's ID in the format 'docker://<container_id>'
func (o OperatorStatusInitContainerStatusesLastStateTerminatedOutput) ContainerID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusInitContainerStatusesLastStateTerminated) *string { return v.ContainerID }).(pulumi.StringPtrOutput)
}

// Exit status from the last termination of the container
func (o OperatorStatusInitContainerStatusesLastStateTerminatedOutput) ExitCode() pulumi.IntOutput {
	return o.ApplyT(func(v OperatorStatusInitContainerStatusesLastStateTerminated) int { return v.ExitCode }).(pulumi.IntOutput)
}

// Time at which the container last terminated
func (o OperatorStatusInitContainerStatusesLastStateTerminatedOutput) FinishedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusInitContainerStatusesLastStateTerminated) *string { return v.FinishedAt }).(pulumi.StringPtrOutput)
}

// Message regarding the last termination of the container
func (o OperatorStatusInitContainerStatusesLastStateTerminatedOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusInitContainerStatusesLastStateTerminated) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// (brief) reason from the last termination of the container
func (o OperatorStatusInitContainerStatusesLastStateTerminatedOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusInitContainerStatusesLastStateTerminated) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Signal from the last termination of the container
func (o OperatorStatusInitContainerStatusesLastStateTerminatedOutput) Signal() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OperatorStatusInitContainerStatusesLastStateTerminated) *int { return v.Signal }).(pulumi.IntPtrOutput)
}

// Time at which previous execution of the container started
func (o OperatorStatusInitContainerStatusesLastStateTerminatedOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusInitContainerStatusesLastStateTerminated) *string { return v.StartedAt }).(pulumi.StringPtrOutput)
}

type OperatorStatusInitContainerStatusesLastStateTerminatedPtrOutput struct{ *pulumi.OutputState }

func (OperatorStatusInitContainerStatusesLastStateTerminatedPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusInitContainerStatusesLastStateTerminated)(nil)).Elem()
}

func (o OperatorStatusInitContainerStatusesLastStateTerminatedPtrOutput) ToOperatorStatusInitContainerStatusesLastStateTerminatedPtrOutput() OperatorStatusInitContainerStatusesLastStateTerminatedPtrOutput {
	return o
}

func (o OperatorStatusInitContainerStatusesLastStateTerminatedPtrOutput) ToOperatorStatusInitContainerStatusesLastStateTerminatedPtrOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesLastStateTerminatedPtrOutput {
	return o
}

func (o OperatorStatusInitContainerStatusesLastStateTerminatedPtrOutput) Elem() OperatorStatusInitContainerStatusesLastStateTerminatedOutput {
	return o.ApplyT(func(v *OperatorStatusInitContainerStatusesLastStateTerminated) OperatorStatusInitContainerStatusesLastStateTerminated {
		return *v
	}).(OperatorStatusInitContainerStatusesLastStateTerminatedOutput)
}

// Container's ID in the format 'docker://<container_id>'
func (o OperatorStatusInitContainerStatusesLastStateTerminatedPtrOutput) ContainerID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusInitContainerStatusesLastStateTerminated) *string {
		if v == nil {
			return nil
		}
		return v.ContainerID
	}).(pulumi.StringPtrOutput)
}

// Exit status from the last termination of the container
func (o OperatorStatusInitContainerStatusesLastStateTerminatedPtrOutput) ExitCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OperatorStatusInitContainerStatusesLastStateTerminated) *int {
		if v == nil {
			return nil
		}
		return &v.ExitCode
	}).(pulumi.IntPtrOutput)
}

// Time at which the container last terminated
func (o OperatorStatusInitContainerStatusesLastStateTerminatedPtrOutput) FinishedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusInitContainerStatusesLastStateTerminated) *string {
		if v == nil {
			return nil
		}
		return v.FinishedAt
	}).(pulumi.StringPtrOutput)
}

// Message regarding the last termination of the container
func (o OperatorStatusInitContainerStatusesLastStateTerminatedPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusInitContainerStatusesLastStateTerminated) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// (brief) reason from the last termination of the container
func (o OperatorStatusInitContainerStatusesLastStateTerminatedPtrOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusInitContainerStatusesLastStateTerminated) *string {
		if v == nil {
			return nil
		}
		return v.Reason
	}).(pulumi.StringPtrOutput)
}

// Signal from the last termination of the container
func (o OperatorStatusInitContainerStatusesLastStateTerminatedPtrOutput) Signal() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OperatorStatusInitContainerStatusesLastStateTerminated) *int {
		if v == nil {
			return nil
		}
		return v.Signal
	}).(pulumi.IntPtrOutput)
}

// Time at which previous execution of the container started
func (o OperatorStatusInitContainerStatusesLastStateTerminatedPtrOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusInitContainerStatusesLastStateTerminated) *string {
		if v == nil {
			return nil
		}
		return v.StartedAt
	}).(pulumi.StringPtrOutput)
}

// Details about a waiting container
type OperatorStatusInitContainerStatusesLastStateWaiting struct {
	// Message regarding why the container is not yet running.
	Message *string `pulumi:"message"`
	// (brief) reason the container is not yet running.
	Reason *string `pulumi:"reason"`
}

// OperatorStatusInitContainerStatusesLastStateWaitingInput is an input type that accepts OperatorStatusInitContainerStatusesLastStateWaitingArgs and OperatorStatusInitContainerStatusesLastStateWaitingOutput values.
// You can construct a concrete instance of `OperatorStatusInitContainerStatusesLastStateWaitingInput` via:
//
//          OperatorStatusInitContainerStatusesLastStateWaitingArgs{...}
type OperatorStatusInitContainerStatusesLastStateWaitingInput interface {
	pulumi.Input

	ToOperatorStatusInitContainerStatusesLastStateWaitingOutput() OperatorStatusInitContainerStatusesLastStateWaitingOutput
	ToOperatorStatusInitContainerStatusesLastStateWaitingOutputWithContext(context.Context) OperatorStatusInitContainerStatusesLastStateWaitingOutput
}

// Details about a waiting container
type OperatorStatusInitContainerStatusesLastStateWaitingArgs struct {
	// Message regarding why the container is not yet running.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// (brief) reason the container is not yet running.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
}

func (OperatorStatusInitContainerStatusesLastStateWaitingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusInitContainerStatusesLastStateWaiting)(nil)).Elem()
}

func (i OperatorStatusInitContainerStatusesLastStateWaitingArgs) ToOperatorStatusInitContainerStatusesLastStateWaitingOutput() OperatorStatusInitContainerStatusesLastStateWaitingOutput {
	return i.ToOperatorStatusInitContainerStatusesLastStateWaitingOutputWithContext(context.Background())
}

func (i OperatorStatusInitContainerStatusesLastStateWaitingArgs) ToOperatorStatusInitContainerStatusesLastStateWaitingOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesLastStateWaitingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusInitContainerStatusesLastStateWaitingOutput)
}

func (i OperatorStatusInitContainerStatusesLastStateWaitingArgs) ToOperatorStatusInitContainerStatusesLastStateWaitingPtrOutput() OperatorStatusInitContainerStatusesLastStateWaitingPtrOutput {
	return i.ToOperatorStatusInitContainerStatusesLastStateWaitingPtrOutputWithContext(context.Background())
}

func (i OperatorStatusInitContainerStatusesLastStateWaitingArgs) ToOperatorStatusInitContainerStatusesLastStateWaitingPtrOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesLastStateWaitingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusInitContainerStatusesLastStateWaitingOutput).ToOperatorStatusInitContainerStatusesLastStateWaitingPtrOutputWithContext(ctx)
}

// OperatorStatusInitContainerStatusesLastStateWaitingPtrInput is an input type that accepts OperatorStatusInitContainerStatusesLastStateWaitingArgs, OperatorStatusInitContainerStatusesLastStateWaitingPtr and OperatorStatusInitContainerStatusesLastStateWaitingPtrOutput values.
// You can construct a concrete instance of `OperatorStatusInitContainerStatusesLastStateWaitingPtrInput` via:
//
//          OperatorStatusInitContainerStatusesLastStateWaitingArgs{...}
//
//  or:
//
//          nil
type OperatorStatusInitContainerStatusesLastStateWaitingPtrInput interface {
	pulumi.Input

	ToOperatorStatusInitContainerStatusesLastStateWaitingPtrOutput() OperatorStatusInitContainerStatusesLastStateWaitingPtrOutput
	ToOperatorStatusInitContainerStatusesLastStateWaitingPtrOutputWithContext(context.Context) OperatorStatusInitContainerStatusesLastStateWaitingPtrOutput
}

type operatorStatusInitContainerStatusesLastStateWaitingPtrType OperatorStatusInitContainerStatusesLastStateWaitingArgs

func OperatorStatusInitContainerStatusesLastStateWaitingPtr(v *OperatorStatusInitContainerStatusesLastStateWaitingArgs) OperatorStatusInitContainerStatusesLastStateWaitingPtrInput {
	return (*operatorStatusInitContainerStatusesLastStateWaitingPtrType)(v)
}

func (*operatorStatusInitContainerStatusesLastStateWaitingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusInitContainerStatusesLastStateWaiting)(nil)).Elem()
}

func (i *operatorStatusInitContainerStatusesLastStateWaitingPtrType) ToOperatorStatusInitContainerStatusesLastStateWaitingPtrOutput() OperatorStatusInitContainerStatusesLastStateWaitingPtrOutput {
	return i.ToOperatorStatusInitContainerStatusesLastStateWaitingPtrOutputWithContext(context.Background())
}

func (i *operatorStatusInitContainerStatusesLastStateWaitingPtrType) ToOperatorStatusInitContainerStatusesLastStateWaitingPtrOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesLastStateWaitingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusInitContainerStatusesLastStateWaitingPtrOutput)
}

// Details about a waiting container
type OperatorStatusInitContainerStatusesLastStateWaitingOutput struct{ *pulumi.OutputState }

func (OperatorStatusInitContainerStatusesLastStateWaitingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusInitContainerStatusesLastStateWaiting)(nil)).Elem()
}

func (o OperatorStatusInitContainerStatusesLastStateWaitingOutput) ToOperatorStatusInitContainerStatusesLastStateWaitingOutput() OperatorStatusInitContainerStatusesLastStateWaitingOutput {
	return o
}

func (o OperatorStatusInitContainerStatusesLastStateWaitingOutput) ToOperatorStatusInitContainerStatusesLastStateWaitingOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesLastStateWaitingOutput {
	return o
}

func (o OperatorStatusInitContainerStatusesLastStateWaitingOutput) ToOperatorStatusInitContainerStatusesLastStateWaitingPtrOutput() OperatorStatusInitContainerStatusesLastStateWaitingPtrOutput {
	return o.ToOperatorStatusInitContainerStatusesLastStateWaitingPtrOutputWithContext(context.Background())
}

func (o OperatorStatusInitContainerStatusesLastStateWaitingOutput) ToOperatorStatusInitContainerStatusesLastStateWaitingPtrOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesLastStateWaitingPtrOutput {
	return o.ApplyT(func(v OperatorStatusInitContainerStatusesLastStateWaiting) *OperatorStatusInitContainerStatusesLastStateWaiting {
		return &v
	}).(OperatorStatusInitContainerStatusesLastStateWaitingPtrOutput)
}

// Message regarding why the container is not yet running.
func (o OperatorStatusInitContainerStatusesLastStateWaitingOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusInitContainerStatusesLastStateWaiting) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// (brief) reason the container is not yet running.
func (o OperatorStatusInitContainerStatusesLastStateWaitingOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusInitContainerStatusesLastStateWaiting) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

type OperatorStatusInitContainerStatusesLastStateWaitingPtrOutput struct{ *pulumi.OutputState }

func (OperatorStatusInitContainerStatusesLastStateWaitingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusInitContainerStatusesLastStateWaiting)(nil)).Elem()
}

func (o OperatorStatusInitContainerStatusesLastStateWaitingPtrOutput) ToOperatorStatusInitContainerStatusesLastStateWaitingPtrOutput() OperatorStatusInitContainerStatusesLastStateWaitingPtrOutput {
	return o
}

func (o OperatorStatusInitContainerStatusesLastStateWaitingPtrOutput) ToOperatorStatusInitContainerStatusesLastStateWaitingPtrOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesLastStateWaitingPtrOutput {
	return o
}

func (o OperatorStatusInitContainerStatusesLastStateWaitingPtrOutput) Elem() OperatorStatusInitContainerStatusesLastStateWaitingOutput {
	return o.ApplyT(func(v *OperatorStatusInitContainerStatusesLastStateWaiting) OperatorStatusInitContainerStatusesLastStateWaiting {
		return *v
	}).(OperatorStatusInitContainerStatusesLastStateWaitingOutput)
}

// Message regarding why the container is not yet running.
func (o OperatorStatusInitContainerStatusesLastStateWaitingPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusInitContainerStatusesLastStateWaiting) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// (brief) reason the container is not yet running.
func (o OperatorStatusInitContainerStatusesLastStateWaitingPtrOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusInitContainerStatusesLastStateWaiting) *string {
		if v == nil {
			return nil
		}
		return v.Reason
	}).(pulumi.StringPtrOutput)
}

// Details about the container's current condition.
type OperatorStatusInitContainerStatusesState struct {
	// Details about a running container
	Running *OperatorStatusInitContainerStatusesStateRunning `pulumi:"running"`
	// Details about a terminated container
	Terminated *OperatorStatusInitContainerStatusesStateTerminated `pulumi:"terminated"`
	// Details about a waiting container
	Waiting *OperatorStatusInitContainerStatusesStateWaiting `pulumi:"waiting"`
}

// OperatorStatusInitContainerStatusesStateInput is an input type that accepts OperatorStatusInitContainerStatusesStateArgs and OperatorStatusInitContainerStatusesStateOutput values.
// You can construct a concrete instance of `OperatorStatusInitContainerStatusesStateInput` via:
//
//          OperatorStatusInitContainerStatusesStateArgs{...}
type OperatorStatusInitContainerStatusesStateInput interface {
	pulumi.Input

	ToOperatorStatusInitContainerStatusesStateOutput() OperatorStatusInitContainerStatusesStateOutput
	ToOperatorStatusInitContainerStatusesStateOutputWithContext(context.Context) OperatorStatusInitContainerStatusesStateOutput
}

// Details about the container's current condition.
type OperatorStatusInitContainerStatusesStateArgs struct {
	// Details about a running container
	Running OperatorStatusInitContainerStatusesStateRunningPtrInput `pulumi:"running"`
	// Details about a terminated container
	Terminated OperatorStatusInitContainerStatusesStateTerminatedPtrInput `pulumi:"terminated"`
	// Details about a waiting container
	Waiting OperatorStatusInitContainerStatusesStateWaitingPtrInput `pulumi:"waiting"`
}

func (OperatorStatusInitContainerStatusesStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusInitContainerStatusesState)(nil)).Elem()
}

func (i OperatorStatusInitContainerStatusesStateArgs) ToOperatorStatusInitContainerStatusesStateOutput() OperatorStatusInitContainerStatusesStateOutput {
	return i.ToOperatorStatusInitContainerStatusesStateOutputWithContext(context.Background())
}

func (i OperatorStatusInitContainerStatusesStateArgs) ToOperatorStatusInitContainerStatusesStateOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusInitContainerStatusesStateOutput)
}

func (i OperatorStatusInitContainerStatusesStateArgs) ToOperatorStatusInitContainerStatusesStatePtrOutput() OperatorStatusInitContainerStatusesStatePtrOutput {
	return i.ToOperatorStatusInitContainerStatusesStatePtrOutputWithContext(context.Background())
}

func (i OperatorStatusInitContainerStatusesStateArgs) ToOperatorStatusInitContainerStatusesStatePtrOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusInitContainerStatusesStateOutput).ToOperatorStatusInitContainerStatusesStatePtrOutputWithContext(ctx)
}

// OperatorStatusInitContainerStatusesStatePtrInput is an input type that accepts OperatorStatusInitContainerStatusesStateArgs, OperatorStatusInitContainerStatusesStatePtr and OperatorStatusInitContainerStatusesStatePtrOutput values.
// You can construct a concrete instance of `OperatorStatusInitContainerStatusesStatePtrInput` via:
//
//          OperatorStatusInitContainerStatusesStateArgs{...}
//
//  or:
//
//          nil
type OperatorStatusInitContainerStatusesStatePtrInput interface {
	pulumi.Input

	ToOperatorStatusInitContainerStatusesStatePtrOutput() OperatorStatusInitContainerStatusesStatePtrOutput
	ToOperatorStatusInitContainerStatusesStatePtrOutputWithContext(context.Context) OperatorStatusInitContainerStatusesStatePtrOutput
}

type operatorStatusInitContainerStatusesStatePtrType OperatorStatusInitContainerStatusesStateArgs

func OperatorStatusInitContainerStatusesStatePtr(v *OperatorStatusInitContainerStatusesStateArgs) OperatorStatusInitContainerStatusesStatePtrInput {
	return (*operatorStatusInitContainerStatusesStatePtrType)(v)
}

func (*operatorStatusInitContainerStatusesStatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusInitContainerStatusesState)(nil)).Elem()
}

func (i *operatorStatusInitContainerStatusesStatePtrType) ToOperatorStatusInitContainerStatusesStatePtrOutput() OperatorStatusInitContainerStatusesStatePtrOutput {
	return i.ToOperatorStatusInitContainerStatusesStatePtrOutputWithContext(context.Background())
}

func (i *operatorStatusInitContainerStatusesStatePtrType) ToOperatorStatusInitContainerStatusesStatePtrOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusInitContainerStatusesStatePtrOutput)
}

// Details about the container's current condition.
type OperatorStatusInitContainerStatusesStateOutput struct{ *pulumi.OutputState }

func (OperatorStatusInitContainerStatusesStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusInitContainerStatusesState)(nil)).Elem()
}

func (o OperatorStatusInitContainerStatusesStateOutput) ToOperatorStatusInitContainerStatusesStateOutput() OperatorStatusInitContainerStatusesStateOutput {
	return o
}

func (o OperatorStatusInitContainerStatusesStateOutput) ToOperatorStatusInitContainerStatusesStateOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesStateOutput {
	return o
}

func (o OperatorStatusInitContainerStatusesStateOutput) ToOperatorStatusInitContainerStatusesStatePtrOutput() OperatorStatusInitContainerStatusesStatePtrOutput {
	return o.ToOperatorStatusInitContainerStatusesStatePtrOutputWithContext(context.Background())
}

func (o OperatorStatusInitContainerStatusesStateOutput) ToOperatorStatusInitContainerStatusesStatePtrOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesStatePtrOutput {
	return o.ApplyT(func(v OperatorStatusInitContainerStatusesState) *OperatorStatusInitContainerStatusesState {
		return &v
	}).(OperatorStatusInitContainerStatusesStatePtrOutput)
}

// Details about a running container
func (o OperatorStatusInitContainerStatusesStateOutput) Running() OperatorStatusInitContainerStatusesStateRunningPtrOutput {
	return o.ApplyT(func(v OperatorStatusInitContainerStatusesState) *OperatorStatusInitContainerStatusesStateRunning {
		return v.Running
	}).(OperatorStatusInitContainerStatusesStateRunningPtrOutput)
}

// Details about a terminated container
func (o OperatorStatusInitContainerStatusesStateOutput) Terminated() OperatorStatusInitContainerStatusesStateTerminatedPtrOutput {
	return o.ApplyT(func(v OperatorStatusInitContainerStatusesState) *OperatorStatusInitContainerStatusesStateTerminated {
		return v.Terminated
	}).(OperatorStatusInitContainerStatusesStateTerminatedPtrOutput)
}

// Details about a waiting container
func (o OperatorStatusInitContainerStatusesStateOutput) Waiting() OperatorStatusInitContainerStatusesStateWaitingPtrOutput {
	return o.ApplyT(func(v OperatorStatusInitContainerStatusesState) *OperatorStatusInitContainerStatusesStateWaiting {
		return v.Waiting
	}).(OperatorStatusInitContainerStatusesStateWaitingPtrOutput)
}

type OperatorStatusInitContainerStatusesStatePtrOutput struct{ *pulumi.OutputState }

func (OperatorStatusInitContainerStatusesStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusInitContainerStatusesState)(nil)).Elem()
}

func (o OperatorStatusInitContainerStatusesStatePtrOutput) ToOperatorStatusInitContainerStatusesStatePtrOutput() OperatorStatusInitContainerStatusesStatePtrOutput {
	return o
}

func (o OperatorStatusInitContainerStatusesStatePtrOutput) ToOperatorStatusInitContainerStatusesStatePtrOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesStatePtrOutput {
	return o
}

func (o OperatorStatusInitContainerStatusesStatePtrOutput) Elem() OperatorStatusInitContainerStatusesStateOutput {
	return o.ApplyT(func(v *OperatorStatusInitContainerStatusesState) OperatorStatusInitContainerStatusesState { return *v }).(OperatorStatusInitContainerStatusesStateOutput)
}

// Details about a running container
func (o OperatorStatusInitContainerStatusesStatePtrOutput) Running() OperatorStatusInitContainerStatusesStateRunningPtrOutput {
	return o.ApplyT(func(v *OperatorStatusInitContainerStatusesState) *OperatorStatusInitContainerStatusesStateRunning {
		if v == nil {
			return nil
		}
		return v.Running
	}).(OperatorStatusInitContainerStatusesStateRunningPtrOutput)
}

// Details about a terminated container
func (o OperatorStatusInitContainerStatusesStatePtrOutput) Terminated() OperatorStatusInitContainerStatusesStateTerminatedPtrOutput {
	return o.ApplyT(func(v *OperatorStatusInitContainerStatusesState) *OperatorStatusInitContainerStatusesStateTerminated {
		if v == nil {
			return nil
		}
		return v.Terminated
	}).(OperatorStatusInitContainerStatusesStateTerminatedPtrOutput)
}

// Details about a waiting container
func (o OperatorStatusInitContainerStatusesStatePtrOutput) Waiting() OperatorStatusInitContainerStatusesStateWaitingPtrOutput {
	return o.ApplyT(func(v *OperatorStatusInitContainerStatusesState) *OperatorStatusInitContainerStatusesStateWaiting {
		if v == nil {
			return nil
		}
		return v.Waiting
	}).(OperatorStatusInitContainerStatusesStateWaitingPtrOutput)
}

// Details about a running container
type OperatorStatusInitContainerStatusesStateRunning struct {
	// Time at which the container was last (re-)started
	StartedAt *string `pulumi:"startedAt"`
}

// OperatorStatusInitContainerStatusesStateRunningInput is an input type that accepts OperatorStatusInitContainerStatusesStateRunningArgs and OperatorStatusInitContainerStatusesStateRunningOutput values.
// You can construct a concrete instance of `OperatorStatusInitContainerStatusesStateRunningInput` via:
//
//          OperatorStatusInitContainerStatusesStateRunningArgs{...}
type OperatorStatusInitContainerStatusesStateRunningInput interface {
	pulumi.Input

	ToOperatorStatusInitContainerStatusesStateRunningOutput() OperatorStatusInitContainerStatusesStateRunningOutput
	ToOperatorStatusInitContainerStatusesStateRunningOutputWithContext(context.Context) OperatorStatusInitContainerStatusesStateRunningOutput
}

// Details about a running container
type OperatorStatusInitContainerStatusesStateRunningArgs struct {
	// Time at which the container was last (re-)started
	StartedAt pulumi.StringPtrInput `pulumi:"startedAt"`
}

func (OperatorStatusInitContainerStatusesStateRunningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusInitContainerStatusesStateRunning)(nil)).Elem()
}

func (i OperatorStatusInitContainerStatusesStateRunningArgs) ToOperatorStatusInitContainerStatusesStateRunningOutput() OperatorStatusInitContainerStatusesStateRunningOutput {
	return i.ToOperatorStatusInitContainerStatusesStateRunningOutputWithContext(context.Background())
}

func (i OperatorStatusInitContainerStatusesStateRunningArgs) ToOperatorStatusInitContainerStatusesStateRunningOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesStateRunningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusInitContainerStatusesStateRunningOutput)
}

func (i OperatorStatusInitContainerStatusesStateRunningArgs) ToOperatorStatusInitContainerStatusesStateRunningPtrOutput() OperatorStatusInitContainerStatusesStateRunningPtrOutput {
	return i.ToOperatorStatusInitContainerStatusesStateRunningPtrOutputWithContext(context.Background())
}

func (i OperatorStatusInitContainerStatusesStateRunningArgs) ToOperatorStatusInitContainerStatusesStateRunningPtrOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesStateRunningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusInitContainerStatusesStateRunningOutput).ToOperatorStatusInitContainerStatusesStateRunningPtrOutputWithContext(ctx)
}

// OperatorStatusInitContainerStatusesStateRunningPtrInput is an input type that accepts OperatorStatusInitContainerStatusesStateRunningArgs, OperatorStatusInitContainerStatusesStateRunningPtr and OperatorStatusInitContainerStatusesStateRunningPtrOutput values.
// You can construct a concrete instance of `OperatorStatusInitContainerStatusesStateRunningPtrInput` via:
//
//          OperatorStatusInitContainerStatusesStateRunningArgs{...}
//
//  or:
//
//          nil
type OperatorStatusInitContainerStatusesStateRunningPtrInput interface {
	pulumi.Input

	ToOperatorStatusInitContainerStatusesStateRunningPtrOutput() OperatorStatusInitContainerStatusesStateRunningPtrOutput
	ToOperatorStatusInitContainerStatusesStateRunningPtrOutputWithContext(context.Context) OperatorStatusInitContainerStatusesStateRunningPtrOutput
}

type operatorStatusInitContainerStatusesStateRunningPtrType OperatorStatusInitContainerStatusesStateRunningArgs

func OperatorStatusInitContainerStatusesStateRunningPtr(v *OperatorStatusInitContainerStatusesStateRunningArgs) OperatorStatusInitContainerStatusesStateRunningPtrInput {
	return (*operatorStatusInitContainerStatusesStateRunningPtrType)(v)
}

func (*operatorStatusInitContainerStatusesStateRunningPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusInitContainerStatusesStateRunning)(nil)).Elem()
}

func (i *operatorStatusInitContainerStatusesStateRunningPtrType) ToOperatorStatusInitContainerStatusesStateRunningPtrOutput() OperatorStatusInitContainerStatusesStateRunningPtrOutput {
	return i.ToOperatorStatusInitContainerStatusesStateRunningPtrOutputWithContext(context.Background())
}

func (i *operatorStatusInitContainerStatusesStateRunningPtrType) ToOperatorStatusInitContainerStatusesStateRunningPtrOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesStateRunningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusInitContainerStatusesStateRunningPtrOutput)
}

// Details about a running container
type OperatorStatusInitContainerStatusesStateRunningOutput struct{ *pulumi.OutputState }

func (OperatorStatusInitContainerStatusesStateRunningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusInitContainerStatusesStateRunning)(nil)).Elem()
}

func (o OperatorStatusInitContainerStatusesStateRunningOutput) ToOperatorStatusInitContainerStatusesStateRunningOutput() OperatorStatusInitContainerStatusesStateRunningOutput {
	return o
}

func (o OperatorStatusInitContainerStatusesStateRunningOutput) ToOperatorStatusInitContainerStatusesStateRunningOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesStateRunningOutput {
	return o
}

func (o OperatorStatusInitContainerStatusesStateRunningOutput) ToOperatorStatusInitContainerStatusesStateRunningPtrOutput() OperatorStatusInitContainerStatusesStateRunningPtrOutput {
	return o.ToOperatorStatusInitContainerStatusesStateRunningPtrOutputWithContext(context.Background())
}

func (o OperatorStatusInitContainerStatusesStateRunningOutput) ToOperatorStatusInitContainerStatusesStateRunningPtrOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesStateRunningPtrOutput {
	return o.ApplyT(func(v OperatorStatusInitContainerStatusesStateRunning) *OperatorStatusInitContainerStatusesStateRunning {
		return &v
	}).(OperatorStatusInitContainerStatusesStateRunningPtrOutput)
}

// Time at which the container was last (re-)started
func (o OperatorStatusInitContainerStatusesStateRunningOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusInitContainerStatusesStateRunning) *string { return v.StartedAt }).(pulumi.StringPtrOutput)
}

type OperatorStatusInitContainerStatusesStateRunningPtrOutput struct{ *pulumi.OutputState }

func (OperatorStatusInitContainerStatusesStateRunningPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusInitContainerStatusesStateRunning)(nil)).Elem()
}

func (o OperatorStatusInitContainerStatusesStateRunningPtrOutput) ToOperatorStatusInitContainerStatusesStateRunningPtrOutput() OperatorStatusInitContainerStatusesStateRunningPtrOutput {
	return o
}

func (o OperatorStatusInitContainerStatusesStateRunningPtrOutput) ToOperatorStatusInitContainerStatusesStateRunningPtrOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesStateRunningPtrOutput {
	return o
}

func (o OperatorStatusInitContainerStatusesStateRunningPtrOutput) Elem() OperatorStatusInitContainerStatusesStateRunningOutput {
	return o.ApplyT(func(v *OperatorStatusInitContainerStatusesStateRunning) OperatorStatusInitContainerStatusesStateRunning {
		return *v
	}).(OperatorStatusInitContainerStatusesStateRunningOutput)
}

// Time at which the container was last (re-)started
func (o OperatorStatusInitContainerStatusesStateRunningPtrOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusInitContainerStatusesStateRunning) *string {
		if v == nil {
			return nil
		}
		return v.StartedAt
	}).(pulumi.StringPtrOutput)
}

// Details about a terminated container
type OperatorStatusInitContainerStatusesStateTerminated struct {
	// Container's ID in the format 'docker://<container_id>'
	ContainerID *string `pulumi:"containerID"`
	// Exit status from the last termination of the container
	ExitCode int `pulumi:"exitCode"`
	// Time at which the container last terminated
	FinishedAt *string `pulumi:"finishedAt"`
	// Message regarding the last termination of the container
	Message *string `pulumi:"message"`
	// (brief) reason from the last termination of the container
	Reason *string `pulumi:"reason"`
	// Signal from the last termination of the container
	Signal *int `pulumi:"signal"`
	// Time at which previous execution of the container started
	StartedAt *string `pulumi:"startedAt"`
}

// OperatorStatusInitContainerStatusesStateTerminatedInput is an input type that accepts OperatorStatusInitContainerStatusesStateTerminatedArgs and OperatorStatusInitContainerStatusesStateTerminatedOutput values.
// You can construct a concrete instance of `OperatorStatusInitContainerStatusesStateTerminatedInput` via:
//
//          OperatorStatusInitContainerStatusesStateTerminatedArgs{...}
type OperatorStatusInitContainerStatusesStateTerminatedInput interface {
	pulumi.Input

	ToOperatorStatusInitContainerStatusesStateTerminatedOutput() OperatorStatusInitContainerStatusesStateTerminatedOutput
	ToOperatorStatusInitContainerStatusesStateTerminatedOutputWithContext(context.Context) OperatorStatusInitContainerStatusesStateTerminatedOutput
}

// Details about a terminated container
type OperatorStatusInitContainerStatusesStateTerminatedArgs struct {
	// Container's ID in the format 'docker://<container_id>'
	ContainerID pulumi.StringPtrInput `pulumi:"containerID"`
	// Exit status from the last termination of the container
	ExitCode pulumi.IntInput `pulumi:"exitCode"`
	// Time at which the container last terminated
	FinishedAt pulumi.StringPtrInput `pulumi:"finishedAt"`
	// Message regarding the last termination of the container
	Message pulumi.StringPtrInput `pulumi:"message"`
	// (brief) reason from the last termination of the container
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Signal from the last termination of the container
	Signal pulumi.IntPtrInput `pulumi:"signal"`
	// Time at which previous execution of the container started
	StartedAt pulumi.StringPtrInput `pulumi:"startedAt"`
}

func (OperatorStatusInitContainerStatusesStateTerminatedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusInitContainerStatusesStateTerminated)(nil)).Elem()
}

func (i OperatorStatusInitContainerStatusesStateTerminatedArgs) ToOperatorStatusInitContainerStatusesStateTerminatedOutput() OperatorStatusInitContainerStatusesStateTerminatedOutput {
	return i.ToOperatorStatusInitContainerStatusesStateTerminatedOutputWithContext(context.Background())
}

func (i OperatorStatusInitContainerStatusesStateTerminatedArgs) ToOperatorStatusInitContainerStatusesStateTerminatedOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesStateTerminatedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusInitContainerStatusesStateTerminatedOutput)
}

func (i OperatorStatusInitContainerStatusesStateTerminatedArgs) ToOperatorStatusInitContainerStatusesStateTerminatedPtrOutput() OperatorStatusInitContainerStatusesStateTerminatedPtrOutput {
	return i.ToOperatorStatusInitContainerStatusesStateTerminatedPtrOutputWithContext(context.Background())
}

func (i OperatorStatusInitContainerStatusesStateTerminatedArgs) ToOperatorStatusInitContainerStatusesStateTerminatedPtrOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesStateTerminatedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusInitContainerStatusesStateTerminatedOutput).ToOperatorStatusInitContainerStatusesStateTerminatedPtrOutputWithContext(ctx)
}

// OperatorStatusInitContainerStatusesStateTerminatedPtrInput is an input type that accepts OperatorStatusInitContainerStatusesStateTerminatedArgs, OperatorStatusInitContainerStatusesStateTerminatedPtr and OperatorStatusInitContainerStatusesStateTerminatedPtrOutput values.
// You can construct a concrete instance of `OperatorStatusInitContainerStatusesStateTerminatedPtrInput` via:
//
//          OperatorStatusInitContainerStatusesStateTerminatedArgs{...}
//
//  or:
//
//          nil
type OperatorStatusInitContainerStatusesStateTerminatedPtrInput interface {
	pulumi.Input

	ToOperatorStatusInitContainerStatusesStateTerminatedPtrOutput() OperatorStatusInitContainerStatusesStateTerminatedPtrOutput
	ToOperatorStatusInitContainerStatusesStateTerminatedPtrOutputWithContext(context.Context) OperatorStatusInitContainerStatusesStateTerminatedPtrOutput
}

type operatorStatusInitContainerStatusesStateTerminatedPtrType OperatorStatusInitContainerStatusesStateTerminatedArgs

func OperatorStatusInitContainerStatusesStateTerminatedPtr(v *OperatorStatusInitContainerStatusesStateTerminatedArgs) OperatorStatusInitContainerStatusesStateTerminatedPtrInput {
	return (*operatorStatusInitContainerStatusesStateTerminatedPtrType)(v)
}

func (*operatorStatusInitContainerStatusesStateTerminatedPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusInitContainerStatusesStateTerminated)(nil)).Elem()
}

func (i *operatorStatusInitContainerStatusesStateTerminatedPtrType) ToOperatorStatusInitContainerStatusesStateTerminatedPtrOutput() OperatorStatusInitContainerStatusesStateTerminatedPtrOutput {
	return i.ToOperatorStatusInitContainerStatusesStateTerminatedPtrOutputWithContext(context.Background())
}

func (i *operatorStatusInitContainerStatusesStateTerminatedPtrType) ToOperatorStatusInitContainerStatusesStateTerminatedPtrOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesStateTerminatedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusInitContainerStatusesStateTerminatedPtrOutput)
}

// Details about a terminated container
type OperatorStatusInitContainerStatusesStateTerminatedOutput struct{ *pulumi.OutputState }

func (OperatorStatusInitContainerStatusesStateTerminatedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusInitContainerStatusesStateTerminated)(nil)).Elem()
}

func (o OperatorStatusInitContainerStatusesStateTerminatedOutput) ToOperatorStatusInitContainerStatusesStateTerminatedOutput() OperatorStatusInitContainerStatusesStateTerminatedOutput {
	return o
}

func (o OperatorStatusInitContainerStatusesStateTerminatedOutput) ToOperatorStatusInitContainerStatusesStateTerminatedOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesStateTerminatedOutput {
	return o
}

func (o OperatorStatusInitContainerStatusesStateTerminatedOutput) ToOperatorStatusInitContainerStatusesStateTerminatedPtrOutput() OperatorStatusInitContainerStatusesStateTerminatedPtrOutput {
	return o.ToOperatorStatusInitContainerStatusesStateTerminatedPtrOutputWithContext(context.Background())
}

func (o OperatorStatusInitContainerStatusesStateTerminatedOutput) ToOperatorStatusInitContainerStatusesStateTerminatedPtrOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesStateTerminatedPtrOutput {
	return o.ApplyT(func(v OperatorStatusInitContainerStatusesStateTerminated) *OperatorStatusInitContainerStatusesStateTerminated {
		return &v
	}).(OperatorStatusInitContainerStatusesStateTerminatedPtrOutput)
}

// Container's ID in the format 'docker://<container_id>'
func (o OperatorStatusInitContainerStatusesStateTerminatedOutput) ContainerID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusInitContainerStatusesStateTerminated) *string { return v.ContainerID }).(pulumi.StringPtrOutput)
}

// Exit status from the last termination of the container
func (o OperatorStatusInitContainerStatusesStateTerminatedOutput) ExitCode() pulumi.IntOutput {
	return o.ApplyT(func(v OperatorStatusInitContainerStatusesStateTerminated) int { return v.ExitCode }).(pulumi.IntOutput)
}

// Time at which the container last terminated
func (o OperatorStatusInitContainerStatusesStateTerminatedOutput) FinishedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusInitContainerStatusesStateTerminated) *string { return v.FinishedAt }).(pulumi.StringPtrOutput)
}

// Message regarding the last termination of the container
func (o OperatorStatusInitContainerStatusesStateTerminatedOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusInitContainerStatusesStateTerminated) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// (brief) reason from the last termination of the container
func (o OperatorStatusInitContainerStatusesStateTerminatedOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusInitContainerStatusesStateTerminated) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Signal from the last termination of the container
func (o OperatorStatusInitContainerStatusesStateTerminatedOutput) Signal() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OperatorStatusInitContainerStatusesStateTerminated) *int { return v.Signal }).(pulumi.IntPtrOutput)
}

// Time at which previous execution of the container started
func (o OperatorStatusInitContainerStatusesStateTerminatedOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusInitContainerStatusesStateTerminated) *string { return v.StartedAt }).(pulumi.StringPtrOutput)
}

type OperatorStatusInitContainerStatusesStateTerminatedPtrOutput struct{ *pulumi.OutputState }

func (OperatorStatusInitContainerStatusesStateTerminatedPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusInitContainerStatusesStateTerminated)(nil)).Elem()
}

func (o OperatorStatusInitContainerStatusesStateTerminatedPtrOutput) ToOperatorStatusInitContainerStatusesStateTerminatedPtrOutput() OperatorStatusInitContainerStatusesStateTerminatedPtrOutput {
	return o
}

func (o OperatorStatusInitContainerStatusesStateTerminatedPtrOutput) ToOperatorStatusInitContainerStatusesStateTerminatedPtrOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesStateTerminatedPtrOutput {
	return o
}

func (o OperatorStatusInitContainerStatusesStateTerminatedPtrOutput) Elem() OperatorStatusInitContainerStatusesStateTerminatedOutput {
	return o.ApplyT(func(v *OperatorStatusInitContainerStatusesStateTerminated) OperatorStatusInitContainerStatusesStateTerminated {
		return *v
	}).(OperatorStatusInitContainerStatusesStateTerminatedOutput)
}

// Container's ID in the format 'docker://<container_id>'
func (o OperatorStatusInitContainerStatusesStateTerminatedPtrOutput) ContainerID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusInitContainerStatusesStateTerminated) *string {
		if v == nil {
			return nil
		}
		return v.ContainerID
	}).(pulumi.StringPtrOutput)
}

// Exit status from the last termination of the container
func (o OperatorStatusInitContainerStatusesStateTerminatedPtrOutput) ExitCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OperatorStatusInitContainerStatusesStateTerminated) *int {
		if v == nil {
			return nil
		}
		return &v.ExitCode
	}).(pulumi.IntPtrOutput)
}

// Time at which the container last terminated
func (o OperatorStatusInitContainerStatusesStateTerminatedPtrOutput) FinishedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusInitContainerStatusesStateTerminated) *string {
		if v == nil {
			return nil
		}
		return v.FinishedAt
	}).(pulumi.StringPtrOutput)
}

// Message regarding the last termination of the container
func (o OperatorStatusInitContainerStatusesStateTerminatedPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusInitContainerStatusesStateTerminated) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// (brief) reason from the last termination of the container
func (o OperatorStatusInitContainerStatusesStateTerminatedPtrOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusInitContainerStatusesStateTerminated) *string {
		if v == nil {
			return nil
		}
		return v.Reason
	}).(pulumi.StringPtrOutput)
}

// Signal from the last termination of the container
func (o OperatorStatusInitContainerStatusesStateTerminatedPtrOutput) Signal() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OperatorStatusInitContainerStatusesStateTerminated) *int {
		if v == nil {
			return nil
		}
		return v.Signal
	}).(pulumi.IntPtrOutput)
}

// Time at which previous execution of the container started
func (o OperatorStatusInitContainerStatusesStateTerminatedPtrOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusInitContainerStatusesStateTerminated) *string {
		if v == nil {
			return nil
		}
		return v.StartedAt
	}).(pulumi.StringPtrOutput)
}

// Details about a waiting container
type OperatorStatusInitContainerStatusesStateWaiting struct {
	// Message regarding why the container is not yet running.
	Message *string `pulumi:"message"`
	// (brief) reason the container is not yet running.
	Reason *string `pulumi:"reason"`
}

// OperatorStatusInitContainerStatusesStateWaitingInput is an input type that accepts OperatorStatusInitContainerStatusesStateWaitingArgs and OperatorStatusInitContainerStatusesStateWaitingOutput values.
// You can construct a concrete instance of `OperatorStatusInitContainerStatusesStateWaitingInput` via:
//
//          OperatorStatusInitContainerStatusesStateWaitingArgs{...}
type OperatorStatusInitContainerStatusesStateWaitingInput interface {
	pulumi.Input

	ToOperatorStatusInitContainerStatusesStateWaitingOutput() OperatorStatusInitContainerStatusesStateWaitingOutput
	ToOperatorStatusInitContainerStatusesStateWaitingOutputWithContext(context.Context) OperatorStatusInitContainerStatusesStateWaitingOutput
}

// Details about a waiting container
type OperatorStatusInitContainerStatusesStateWaitingArgs struct {
	// Message regarding why the container is not yet running.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// (brief) reason the container is not yet running.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
}

func (OperatorStatusInitContainerStatusesStateWaitingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusInitContainerStatusesStateWaiting)(nil)).Elem()
}

func (i OperatorStatusInitContainerStatusesStateWaitingArgs) ToOperatorStatusInitContainerStatusesStateWaitingOutput() OperatorStatusInitContainerStatusesStateWaitingOutput {
	return i.ToOperatorStatusInitContainerStatusesStateWaitingOutputWithContext(context.Background())
}

func (i OperatorStatusInitContainerStatusesStateWaitingArgs) ToOperatorStatusInitContainerStatusesStateWaitingOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesStateWaitingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusInitContainerStatusesStateWaitingOutput)
}

func (i OperatorStatusInitContainerStatusesStateWaitingArgs) ToOperatorStatusInitContainerStatusesStateWaitingPtrOutput() OperatorStatusInitContainerStatusesStateWaitingPtrOutput {
	return i.ToOperatorStatusInitContainerStatusesStateWaitingPtrOutputWithContext(context.Background())
}

func (i OperatorStatusInitContainerStatusesStateWaitingArgs) ToOperatorStatusInitContainerStatusesStateWaitingPtrOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesStateWaitingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusInitContainerStatusesStateWaitingOutput).ToOperatorStatusInitContainerStatusesStateWaitingPtrOutputWithContext(ctx)
}

// OperatorStatusInitContainerStatusesStateWaitingPtrInput is an input type that accepts OperatorStatusInitContainerStatusesStateWaitingArgs, OperatorStatusInitContainerStatusesStateWaitingPtr and OperatorStatusInitContainerStatusesStateWaitingPtrOutput values.
// You can construct a concrete instance of `OperatorStatusInitContainerStatusesStateWaitingPtrInput` via:
//
//          OperatorStatusInitContainerStatusesStateWaitingArgs{...}
//
//  or:
//
//          nil
type OperatorStatusInitContainerStatusesStateWaitingPtrInput interface {
	pulumi.Input

	ToOperatorStatusInitContainerStatusesStateWaitingPtrOutput() OperatorStatusInitContainerStatusesStateWaitingPtrOutput
	ToOperatorStatusInitContainerStatusesStateWaitingPtrOutputWithContext(context.Context) OperatorStatusInitContainerStatusesStateWaitingPtrOutput
}

type operatorStatusInitContainerStatusesStateWaitingPtrType OperatorStatusInitContainerStatusesStateWaitingArgs

func OperatorStatusInitContainerStatusesStateWaitingPtr(v *OperatorStatusInitContainerStatusesStateWaitingArgs) OperatorStatusInitContainerStatusesStateWaitingPtrInput {
	return (*operatorStatusInitContainerStatusesStateWaitingPtrType)(v)
}

func (*operatorStatusInitContainerStatusesStateWaitingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusInitContainerStatusesStateWaiting)(nil)).Elem()
}

func (i *operatorStatusInitContainerStatusesStateWaitingPtrType) ToOperatorStatusInitContainerStatusesStateWaitingPtrOutput() OperatorStatusInitContainerStatusesStateWaitingPtrOutput {
	return i.ToOperatorStatusInitContainerStatusesStateWaitingPtrOutputWithContext(context.Background())
}

func (i *operatorStatusInitContainerStatusesStateWaitingPtrType) ToOperatorStatusInitContainerStatusesStateWaitingPtrOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesStateWaitingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusInitContainerStatusesStateWaitingPtrOutput)
}

// Details about a waiting container
type OperatorStatusInitContainerStatusesStateWaitingOutput struct{ *pulumi.OutputState }

func (OperatorStatusInitContainerStatusesStateWaitingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusInitContainerStatusesStateWaiting)(nil)).Elem()
}

func (o OperatorStatusInitContainerStatusesStateWaitingOutput) ToOperatorStatusInitContainerStatusesStateWaitingOutput() OperatorStatusInitContainerStatusesStateWaitingOutput {
	return o
}

func (o OperatorStatusInitContainerStatusesStateWaitingOutput) ToOperatorStatusInitContainerStatusesStateWaitingOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesStateWaitingOutput {
	return o
}

func (o OperatorStatusInitContainerStatusesStateWaitingOutput) ToOperatorStatusInitContainerStatusesStateWaitingPtrOutput() OperatorStatusInitContainerStatusesStateWaitingPtrOutput {
	return o.ToOperatorStatusInitContainerStatusesStateWaitingPtrOutputWithContext(context.Background())
}

func (o OperatorStatusInitContainerStatusesStateWaitingOutput) ToOperatorStatusInitContainerStatusesStateWaitingPtrOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesStateWaitingPtrOutput {
	return o.ApplyT(func(v OperatorStatusInitContainerStatusesStateWaiting) *OperatorStatusInitContainerStatusesStateWaiting {
		return &v
	}).(OperatorStatusInitContainerStatusesStateWaitingPtrOutput)
}

// Message regarding why the container is not yet running.
func (o OperatorStatusInitContainerStatusesStateWaitingOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusInitContainerStatusesStateWaiting) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// (brief) reason the container is not yet running.
func (o OperatorStatusInitContainerStatusesStateWaitingOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusInitContainerStatusesStateWaiting) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

type OperatorStatusInitContainerStatusesStateWaitingPtrOutput struct{ *pulumi.OutputState }

func (OperatorStatusInitContainerStatusesStateWaitingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorStatusInitContainerStatusesStateWaiting)(nil)).Elem()
}

func (o OperatorStatusInitContainerStatusesStateWaitingPtrOutput) ToOperatorStatusInitContainerStatusesStateWaitingPtrOutput() OperatorStatusInitContainerStatusesStateWaitingPtrOutput {
	return o
}

func (o OperatorStatusInitContainerStatusesStateWaitingPtrOutput) ToOperatorStatusInitContainerStatusesStateWaitingPtrOutputWithContext(ctx context.Context) OperatorStatusInitContainerStatusesStateWaitingPtrOutput {
	return o
}

func (o OperatorStatusInitContainerStatusesStateWaitingPtrOutput) Elem() OperatorStatusInitContainerStatusesStateWaitingOutput {
	return o.ApplyT(func(v *OperatorStatusInitContainerStatusesStateWaiting) OperatorStatusInitContainerStatusesStateWaiting {
		return *v
	}).(OperatorStatusInitContainerStatusesStateWaitingOutput)
}

// Message regarding why the container is not yet running.
func (o OperatorStatusInitContainerStatusesStateWaitingPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusInitContainerStatusesStateWaiting) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// (brief) reason the container is not yet running.
func (o OperatorStatusInitContainerStatusesStateWaitingPtrOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorStatusInitContainerStatusesStateWaiting) *string {
		if v == nil {
			return nil
		}
		return v.Reason
	}).(pulumi.StringPtrOutput)
}

// IP address information for entries in the (plural) PodIPs field. Each entry includes:    IP: An IP address allocated to the pod. Routable at least within the cluster.
type OperatorStatusPodIPs struct {
	// ip is an IP address (IPv4 or IPv6) assigned to the pod
	Ip *string `pulumi:"ip"`
}

// OperatorStatusPodIPsInput is an input type that accepts OperatorStatusPodIPsArgs and OperatorStatusPodIPsOutput values.
// You can construct a concrete instance of `OperatorStatusPodIPsInput` via:
//
//          OperatorStatusPodIPsArgs{...}
type OperatorStatusPodIPsInput interface {
	pulumi.Input

	ToOperatorStatusPodIPsOutput() OperatorStatusPodIPsOutput
	ToOperatorStatusPodIPsOutputWithContext(context.Context) OperatorStatusPodIPsOutput
}

// IP address information for entries in the (plural) PodIPs field. Each entry includes:    IP: An IP address allocated to the pod. Routable at least within the cluster.
type OperatorStatusPodIPsArgs struct {
	// ip is an IP address (IPv4 or IPv6) assigned to the pod
	Ip pulumi.StringPtrInput `pulumi:"ip"`
}

func (OperatorStatusPodIPsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusPodIPs)(nil)).Elem()
}

func (i OperatorStatusPodIPsArgs) ToOperatorStatusPodIPsOutput() OperatorStatusPodIPsOutput {
	return i.ToOperatorStatusPodIPsOutputWithContext(context.Background())
}

func (i OperatorStatusPodIPsArgs) ToOperatorStatusPodIPsOutputWithContext(ctx context.Context) OperatorStatusPodIPsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusPodIPsOutput)
}

// OperatorStatusPodIPsArrayInput is an input type that accepts OperatorStatusPodIPsArray and OperatorStatusPodIPsArrayOutput values.
// You can construct a concrete instance of `OperatorStatusPodIPsArrayInput` via:
//
//          OperatorStatusPodIPsArray{ OperatorStatusPodIPsArgs{...} }
type OperatorStatusPodIPsArrayInput interface {
	pulumi.Input

	ToOperatorStatusPodIPsArrayOutput() OperatorStatusPodIPsArrayOutput
	ToOperatorStatusPodIPsArrayOutputWithContext(context.Context) OperatorStatusPodIPsArrayOutput
}

type OperatorStatusPodIPsArray []OperatorStatusPodIPsInput

func (OperatorStatusPodIPsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OperatorStatusPodIPs)(nil)).Elem()
}

func (i OperatorStatusPodIPsArray) ToOperatorStatusPodIPsArrayOutput() OperatorStatusPodIPsArrayOutput {
	return i.ToOperatorStatusPodIPsArrayOutputWithContext(context.Background())
}

func (i OperatorStatusPodIPsArray) ToOperatorStatusPodIPsArrayOutputWithContext(ctx context.Context) OperatorStatusPodIPsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorStatusPodIPsArrayOutput)
}

// IP address information for entries in the (plural) PodIPs field. Each entry includes:    IP: An IP address allocated to the pod. Routable at least within the cluster.
type OperatorStatusPodIPsOutput struct{ *pulumi.OutputState }

func (OperatorStatusPodIPsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorStatusPodIPs)(nil)).Elem()
}

func (o OperatorStatusPodIPsOutput) ToOperatorStatusPodIPsOutput() OperatorStatusPodIPsOutput {
	return o
}

func (o OperatorStatusPodIPsOutput) ToOperatorStatusPodIPsOutputWithContext(ctx context.Context) OperatorStatusPodIPsOutput {
	return o
}

// ip is an IP address (IPv4 or IPv6) assigned to the pod
func (o OperatorStatusPodIPsOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperatorStatusPodIPs) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

type OperatorStatusPodIPsArrayOutput struct{ *pulumi.OutputState }

func (OperatorStatusPodIPsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OperatorStatusPodIPs)(nil)).Elem()
}

func (o OperatorStatusPodIPsArrayOutput) ToOperatorStatusPodIPsArrayOutput() OperatorStatusPodIPsArrayOutput {
	return o
}

func (o OperatorStatusPodIPsArrayOutput) ToOperatorStatusPodIPsArrayOutputWithContext(ctx context.Context) OperatorStatusPodIPsArrayOutput {
	return o
}

func (o OperatorStatusPodIPsArrayOutput) Index(i pulumi.IntInput) OperatorStatusPodIPsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OperatorStatusPodIPs {
		return vs[0].([]OperatorStatusPodIPs)[vs[1].(int)]
	}).(OperatorStatusPodIPsOutput)
}

func init() {
	pulumi.RegisterOutputType(OperatorTypeOutput{})
	pulumi.RegisterOutputType(OperatorMetadataOutput{})
	pulumi.RegisterOutputType(OperatorSpecOutput{})
	pulumi.RegisterOutputType(OperatorSpecPtrOutput{})
	pulumi.RegisterOutputType(OperatorSpecCoreOutput{})
	pulumi.RegisterOutputType(OperatorSpecCorePtrOutput{})
	pulumi.RegisterOutputType(OperatorSpecCoreDeployableOutput{})
	pulumi.RegisterOutputType(OperatorSpecCoreDeployablePtrOutput{})
	pulumi.RegisterOutputType(OperatorSpecToolsOutput{})
	pulumi.RegisterOutputType(OperatorSpecToolsPtrOutput{})
	pulumi.RegisterOutputType(OperatorSpecToolsAssemblerOutput{})
	pulumi.RegisterOutputType(OperatorSpecToolsAssemblerPtrOutput{})
	pulumi.RegisterOutputType(OperatorSpecToolsDiscovererOutput{})
	pulumi.RegisterOutputType(OperatorSpecToolsDiscovererPtrOutput{})
	pulumi.RegisterOutputType(OperatorSpecToolsDiscovererHubconfigOutput{})
	pulumi.RegisterOutputType(OperatorSpecToolsDiscovererHubconfigPtrOutput{})
	pulumi.RegisterOutputType(OperatorSpecToolsDiscovererHubconfigSecretRefOutput{})
	pulumi.RegisterOutputType(OperatorSpecToolsDiscovererHubconfigSecretRefPtrOutput{})
	pulumi.RegisterOutputType(OperatorStatusOutput{})
	pulumi.RegisterOutputType(OperatorStatusPtrOutput{})
	pulumi.RegisterOutputType(OperatorStatusConditionsOutput{})
	pulumi.RegisterOutputType(OperatorStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(OperatorStatusContainerStatusesOutput{})
	pulumi.RegisterOutputType(OperatorStatusContainerStatusesArrayOutput{})
	pulumi.RegisterOutputType(OperatorStatusContainerStatusesLastStateOutput{})
	pulumi.RegisterOutputType(OperatorStatusContainerStatusesLastStatePtrOutput{})
	pulumi.RegisterOutputType(OperatorStatusContainerStatusesLastStateRunningOutput{})
	pulumi.RegisterOutputType(OperatorStatusContainerStatusesLastStateRunningPtrOutput{})
	pulumi.RegisterOutputType(OperatorStatusContainerStatusesLastStateTerminatedOutput{})
	pulumi.RegisterOutputType(OperatorStatusContainerStatusesLastStateTerminatedPtrOutput{})
	pulumi.RegisterOutputType(OperatorStatusContainerStatusesLastStateWaitingOutput{})
	pulumi.RegisterOutputType(OperatorStatusContainerStatusesLastStateWaitingPtrOutput{})
	pulumi.RegisterOutputType(OperatorStatusContainerStatusesStateOutput{})
	pulumi.RegisterOutputType(OperatorStatusContainerStatusesStatePtrOutput{})
	pulumi.RegisterOutputType(OperatorStatusContainerStatusesStateRunningOutput{})
	pulumi.RegisterOutputType(OperatorStatusContainerStatusesStateRunningPtrOutput{})
	pulumi.RegisterOutputType(OperatorStatusContainerStatusesStateTerminatedOutput{})
	pulumi.RegisterOutputType(OperatorStatusContainerStatusesStateTerminatedPtrOutput{})
	pulumi.RegisterOutputType(OperatorStatusContainerStatusesStateWaitingOutput{})
	pulumi.RegisterOutputType(OperatorStatusContainerStatusesStateWaitingPtrOutput{})
	pulumi.RegisterOutputType(OperatorStatusEphemeralContainerStatusesOutput{})
	pulumi.RegisterOutputType(OperatorStatusEphemeralContainerStatusesArrayOutput{})
	pulumi.RegisterOutputType(OperatorStatusEphemeralContainerStatusesLastStateOutput{})
	pulumi.RegisterOutputType(OperatorStatusEphemeralContainerStatusesLastStatePtrOutput{})
	pulumi.RegisterOutputType(OperatorStatusEphemeralContainerStatusesLastStateRunningOutput{})
	pulumi.RegisterOutputType(OperatorStatusEphemeralContainerStatusesLastStateRunningPtrOutput{})
	pulumi.RegisterOutputType(OperatorStatusEphemeralContainerStatusesLastStateTerminatedOutput{})
	pulumi.RegisterOutputType(OperatorStatusEphemeralContainerStatusesLastStateTerminatedPtrOutput{})
	pulumi.RegisterOutputType(OperatorStatusEphemeralContainerStatusesLastStateWaitingOutput{})
	pulumi.RegisterOutputType(OperatorStatusEphemeralContainerStatusesLastStateWaitingPtrOutput{})
	pulumi.RegisterOutputType(OperatorStatusEphemeralContainerStatusesStateOutput{})
	pulumi.RegisterOutputType(OperatorStatusEphemeralContainerStatusesStatePtrOutput{})
	pulumi.RegisterOutputType(OperatorStatusEphemeralContainerStatusesStateRunningOutput{})
	pulumi.RegisterOutputType(OperatorStatusEphemeralContainerStatusesStateRunningPtrOutput{})
	pulumi.RegisterOutputType(OperatorStatusEphemeralContainerStatusesStateTerminatedOutput{})
	pulumi.RegisterOutputType(OperatorStatusEphemeralContainerStatusesStateTerminatedPtrOutput{})
	pulumi.RegisterOutputType(OperatorStatusEphemeralContainerStatusesStateWaitingOutput{})
	pulumi.RegisterOutputType(OperatorStatusEphemeralContainerStatusesStateWaitingPtrOutput{})
	pulumi.RegisterOutputType(OperatorStatusInitContainerStatusesOutput{})
	pulumi.RegisterOutputType(OperatorStatusInitContainerStatusesArrayOutput{})
	pulumi.RegisterOutputType(OperatorStatusInitContainerStatusesLastStateOutput{})
	pulumi.RegisterOutputType(OperatorStatusInitContainerStatusesLastStatePtrOutput{})
	pulumi.RegisterOutputType(OperatorStatusInitContainerStatusesLastStateRunningOutput{})
	pulumi.RegisterOutputType(OperatorStatusInitContainerStatusesLastStateRunningPtrOutput{})
	pulumi.RegisterOutputType(OperatorStatusInitContainerStatusesLastStateTerminatedOutput{})
	pulumi.RegisterOutputType(OperatorStatusInitContainerStatusesLastStateTerminatedPtrOutput{})
	pulumi.RegisterOutputType(OperatorStatusInitContainerStatusesLastStateWaitingOutput{})
	pulumi.RegisterOutputType(OperatorStatusInitContainerStatusesLastStateWaitingPtrOutput{})
	pulumi.RegisterOutputType(OperatorStatusInitContainerStatusesStateOutput{})
	pulumi.RegisterOutputType(OperatorStatusInitContainerStatusesStatePtrOutput{})
	pulumi.RegisterOutputType(OperatorStatusInitContainerStatusesStateRunningOutput{})
	pulumi.RegisterOutputType(OperatorStatusInitContainerStatusesStateRunningPtrOutput{})
	pulumi.RegisterOutputType(OperatorStatusInitContainerStatusesStateTerminatedOutput{})
	pulumi.RegisterOutputType(OperatorStatusInitContainerStatusesStateTerminatedPtrOutput{})
	pulumi.RegisterOutputType(OperatorStatusInitContainerStatusesStateWaitingOutput{})
	pulumi.RegisterOutputType(OperatorStatusInitContainerStatusesStateWaitingPtrOutput{})
	pulumi.RegisterOutputType(OperatorStatusPodIPsOutput{})
	pulumi.RegisterOutputType(OperatorStatusPodIPsArrayOutput{})
}

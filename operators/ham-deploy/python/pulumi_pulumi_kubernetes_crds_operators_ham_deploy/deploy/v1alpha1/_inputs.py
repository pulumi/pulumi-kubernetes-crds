# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'OperatorSpecArgs',
    'OperatorSpecCoreArgs',
    'OperatorSpecCoreDeployableArgs',
    'OperatorSpecToolsArgs',
    'OperatorSpecToolsAssemblerArgs',
    'OperatorSpecToolsDiscovererArgs',
    'OperatorSpecToolsDiscovererHubconfigArgs',
    'OperatorSpecToolsDiscovererHubconfigSecretRefArgs',
    'OperatorStatusArgs',
    'OperatorStatusConditionsArgs',
    'OperatorStatusContainerStatusesArgs',
    'OperatorStatusContainerStatusesLastStateArgs',
    'OperatorStatusContainerStatusesLastStateRunningArgs',
    'OperatorStatusContainerStatusesLastStateTerminatedArgs',
    'OperatorStatusContainerStatusesLastStateWaitingArgs',
    'OperatorStatusContainerStatusesStateArgs',
    'OperatorStatusContainerStatusesStateRunningArgs',
    'OperatorStatusContainerStatusesStateTerminatedArgs',
    'OperatorStatusContainerStatusesStateWaitingArgs',
    'OperatorStatusEphemeralContainerStatusesArgs',
    'OperatorStatusEphemeralContainerStatusesLastStateArgs',
    'OperatorStatusEphemeralContainerStatusesLastStateRunningArgs',
    'OperatorStatusEphemeralContainerStatusesLastStateTerminatedArgs',
    'OperatorStatusEphemeralContainerStatusesLastStateWaitingArgs',
    'OperatorStatusEphemeralContainerStatusesStateArgs',
    'OperatorStatusEphemeralContainerStatusesStateRunningArgs',
    'OperatorStatusEphemeralContainerStatusesStateTerminatedArgs',
    'OperatorStatusEphemeralContainerStatusesStateWaitingArgs',
    'OperatorStatusInitContainerStatusesArgs',
    'OperatorStatusInitContainerStatusesLastStateArgs',
    'OperatorStatusInitContainerStatusesLastStateRunningArgs',
    'OperatorStatusInitContainerStatusesLastStateTerminatedArgs',
    'OperatorStatusInitContainerStatusesLastStateWaitingArgs',
    'OperatorStatusInitContainerStatusesStateArgs',
    'OperatorStatusInitContainerStatusesStateRunningArgs',
    'OperatorStatusInitContainerStatusesStateTerminatedArgs',
    'OperatorStatusInitContainerStatusesStateWaitingArgs',
    'OperatorStatusPodIPsArgs',
]

@pulumi.input_type
class OperatorSpecArgs:
    def __init__(__self__, *,
                 core: Optional[pulumi.Input['OperatorSpecCoreArgs']] = None,
                 tools: Optional[pulumi.Input['OperatorSpecToolsArgs']] = None):
        """
        OperatorSpec defines the desired state of Operator
        """
        if core is not None:
            pulumi.set(__self__, "core", core)
        if tools is not None:
            pulumi.set(__self__, "tools", tools)

    @property
    @pulumi.getter
    def core(self) -> Optional[pulumi.Input['OperatorSpecCoreArgs']]:
        return pulumi.get(self, "core")

    @core.setter
    def core(self, value: Optional[pulumi.Input['OperatorSpecCoreArgs']]):
        pulumi.set(self, "core", value)

    @property
    @pulumi.getter
    def tools(self) -> Optional[pulumi.Input['OperatorSpecToolsArgs']]:
        return pulumi.get(self, "tools")

    @tools.setter
    def tools(self, value: Optional[pulumi.Input['OperatorSpecToolsArgs']]):
        pulumi.set(self, "tools", value)


@pulumi.input_type
class OperatorSpecCoreArgs:
    def __init__(__self__, *,
                 deployable: Optional[pulumi.Input['OperatorSpecCoreDeployableArgs']] = None):
        if deployable is not None:
            pulumi.set(__self__, "deployable", deployable)

    @property
    @pulumi.getter
    def deployable(self) -> Optional[pulumi.Input['OperatorSpecCoreDeployableArgs']]:
        return pulumi.get(self, "deployable")

    @deployable.setter
    def deployable(self, value: Optional[pulumi.Input['OperatorSpecCoreDeployableArgs']]):
        pulumi.set(self, "deployable", value)


@pulumi.input_type
class OperatorSpecCoreDeployableArgs:
    def __init__(__self__, *,
                 args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 command: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if args is not None:
            pulumi.set(__self__, "args", args)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "args")

    @args.setter
    def args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "args", value)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "command", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class OperatorSpecToolsArgs:
    def __init__(__self__, *,
                 assembler: Optional[pulumi.Input['OperatorSpecToolsAssemblerArgs']] = None,
                 discoverer: Optional[pulumi.Input['OperatorSpecToolsDiscovererArgs']] = None):
        if assembler is not None:
            pulumi.set(__self__, "assembler", assembler)
        if discoverer is not None:
            pulumi.set(__self__, "discoverer", discoverer)

    @property
    @pulumi.getter
    def assembler(self) -> Optional[pulumi.Input['OperatorSpecToolsAssemblerArgs']]:
        return pulumi.get(self, "assembler")

    @assembler.setter
    def assembler(self, value: Optional[pulumi.Input['OperatorSpecToolsAssemblerArgs']]):
        pulumi.set(self, "assembler", value)

    @property
    @pulumi.getter
    def discoverer(self) -> Optional[pulumi.Input['OperatorSpecToolsDiscovererArgs']]:
        return pulumi.get(self, "discoverer")

    @discoverer.setter
    def discoverer(self, value: Optional[pulumi.Input['OperatorSpecToolsDiscovererArgs']]):
        pulumi.set(self, "discoverer", value)


@pulumi.input_type
class OperatorSpecToolsAssemblerArgs:
    def __init__(__self__, *,
                 args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 command: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if args is not None:
            pulumi.set(__self__, "args", args)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "args")

    @args.setter
    def args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "args", value)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "command", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class OperatorSpecToolsDiscovererArgs:
    def __init__(__self__, *,
                 clustername: pulumi.Input[str],
                 clusternamespace: pulumi.Input[str],
                 args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 command: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 hubconfig: Optional[pulumi.Input['OperatorSpecToolsDiscovererHubconfigArgs']] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "clustername", clustername)
        pulumi.set(__self__, "clusternamespace", clusternamespace)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hubconfig is not None:
            pulumi.set(__self__, "hubconfig", hubconfig)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def clustername(self) -> pulumi.Input[str]:
        return pulumi.get(self, "clustername")

    @clustername.setter
    def clustername(self, value: pulumi.Input[str]):
        pulumi.set(self, "clustername", value)

    @property
    @pulumi.getter
    def clusternamespace(self) -> pulumi.Input[str]:
        return pulumi.get(self, "clusternamespace")

    @clusternamespace.setter
    def clusternamespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "clusternamespace", value)

    @property
    @pulumi.getter
    def args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "args")

    @args.setter
    def args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "args", value)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "command", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def hubconfig(self) -> Optional[pulumi.Input['OperatorSpecToolsDiscovererHubconfigArgs']]:
        return pulumi.get(self, "hubconfig")

    @hubconfig.setter
    def hubconfig(self, value: Optional[pulumi.Input['OperatorSpecToolsDiscovererHubconfigArgs']]):
        pulumi.set(self, "hubconfig", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class OperatorSpecToolsDiscovererHubconfigArgs:
    def __init__(__self__, *,
                 mountpath: pulumi.Input[str],
                 secret_ref: pulumi.Input['OperatorSpecToolsDiscovererHubconfigSecretRefArgs'],
                 kubeconfig: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['OperatorSpecToolsDiscovererHubconfigSecretRefArgs'] secret_ref: LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
        """
        pulumi.set(__self__, "mountpath", mountpath)
        pulumi.set(__self__, "secret_ref", secret_ref)
        if kubeconfig is not None:
            pulumi.set(__self__, "kubeconfig", kubeconfig)

    @property
    @pulumi.getter
    def mountpath(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mountpath")

    @mountpath.setter
    def mountpath(self, value: pulumi.Input[str]):
        pulumi.set(self, "mountpath", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> pulumi.Input['OperatorSpecToolsDiscovererHubconfigSecretRefArgs']:
        """
        LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: pulumi.Input['OperatorSpecToolsDiscovererHubconfigSecretRefArgs']):
        pulumi.set(self, "secret_ref", value)

    @property
    @pulumi.getter
    def kubeconfig(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kubeconfig")

    @kubeconfig.setter
    def kubeconfig(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubeconfig", value)


@pulumi.input_type
class OperatorSpecToolsDiscovererHubconfigSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class OperatorStatusArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['OperatorStatusConditionsArgs']]]] = None,
                 container_statuses: Optional[pulumi.Input[Sequence[pulumi.Input['OperatorStatusContainerStatusesArgs']]]] = None,
                 ephemeral_container_statuses: Optional[pulumi.Input[Sequence[pulumi.Input['OperatorStatusEphemeralContainerStatusesArgs']]]] = None,
                 host_ip: Optional[pulumi.Input[str]] = None,
                 init_container_statuses: Optional[pulumi.Input[Sequence[pulumi.Input['OperatorStatusInitContainerStatusesArgs']]]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 nominated_node_name: Optional[pulumi.Input[str]] = None,
                 phase: Optional[pulumi.Input[str]] = None,
                 pod_ip: Optional[pulumi.Input[str]] = None,
                 pod_ips: Optional[pulumi.Input[Sequence[pulumi.Input['OperatorStatusPodIPsArgs']]]] = None,
                 qos_class: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[str]] = None):
        """
        OperatorStatus defines the observed state of Operator
        :param pulumi.Input[Sequence[pulumi.Input['OperatorStatusConditionsArgs']]] conditions: Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
        :param pulumi.Input[Sequence[pulumi.Input['OperatorStatusContainerStatusesArgs']]] container_statuses: The list has one entry per container in the manifest. Each entry is currently the output of `docker inspect`. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
        :param pulumi.Input[Sequence[pulumi.Input['OperatorStatusEphemeralContainerStatusesArgs']]] ephemeral_container_statuses: Status for any ephemeral containers that have run in this pod. This field is alpha-level and is only populated by servers that enable the EphemeralContainers feature.
        :param pulumi.Input[str] host_ip: IP address of the host to which the pod is assigned. Empty if not yet scheduled.
        :param pulumi.Input[Sequence[pulumi.Input['OperatorStatusInitContainerStatusesArgs']]] init_container_statuses: The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
        :param pulumi.Input[str] message: A human readable message indicating details about why the pod is in this condition.
        :param pulumi.Input[str] nominated_node_name: nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.
        :param pulumi.Input[str] phase: The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values: 
                Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod. 
                More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
        :param pulumi.Input[str] pod_ip: IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
        :param pulumi.Input[Sequence[pulumi.Input['OperatorStatusPodIPsArgs']]] pod_ips: podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.
        :param pulumi.Input[str] qos_class: The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md
        :param pulumi.Input[str] reason: A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'
        :param pulumi.Input[str] start_time: RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if container_statuses is not None:
            pulumi.set(__self__, "container_statuses", container_statuses)
        if ephemeral_container_statuses is not None:
            pulumi.set(__self__, "ephemeral_container_statuses", ephemeral_container_statuses)
        if host_ip is not None:
            pulumi.set(__self__, "host_ip", host_ip)
        if init_container_statuses is not None:
            pulumi.set(__self__, "init_container_statuses", init_container_statuses)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if nominated_node_name is not None:
            pulumi.set(__self__, "nominated_node_name", nominated_node_name)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)
        if pod_ip is not None:
            pulumi.set(__self__, "pod_ip", pod_ip)
        if pod_ips is not None:
            pulumi.set(__self__, "pod_ips", pod_ips)
        if qos_class is not None:
            pulumi.set(__self__, "qos_class", qos_class)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OperatorStatusConditionsArgs']]]]:
        """
        Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OperatorStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="containerStatuses")
    def container_statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OperatorStatusContainerStatusesArgs']]]]:
        """
        The list has one entry per container in the manifest. Each entry is currently the output of `docker inspect`. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
        """
        return pulumi.get(self, "container_statuses")

    @container_statuses.setter
    def container_statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OperatorStatusContainerStatusesArgs']]]]):
        pulumi.set(self, "container_statuses", value)

    @property
    @pulumi.getter(name="ephemeralContainerStatuses")
    def ephemeral_container_statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OperatorStatusEphemeralContainerStatusesArgs']]]]:
        """
        Status for any ephemeral containers that have run in this pod. This field is alpha-level and is only populated by servers that enable the EphemeralContainers feature.
        """
        return pulumi.get(self, "ephemeral_container_statuses")

    @ephemeral_container_statuses.setter
    def ephemeral_container_statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OperatorStatusEphemeralContainerStatusesArgs']]]]):
        pulumi.set(self, "ephemeral_container_statuses", value)

    @property
    @pulumi.getter(name="hostIP")
    def host_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of the host to which the pod is assigned. Empty if not yet scheduled.
        """
        return pulumi.get(self, "host_ip")

    @host_ip.setter
    def host_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_ip", value)

    @property
    @pulumi.getter(name="initContainerStatuses")
    def init_container_statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OperatorStatusInitContainerStatusesArgs']]]]:
        """
        The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
        """
        return pulumi.get(self, "init_container_statuses")

    @init_container_statuses.setter
    def init_container_statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OperatorStatusInitContainerStatusesArgs']]]]):
        pulumi.set(self, "init_container_statuses", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        A human readable message indicating details about why the pod is in this condition.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter(name="nominatedNodeName")
    def nominated_node_name(self) -> Optional[pulumi.Input[str]]:
        """
        nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.
        """
        return pulumi.get(self, "nominated_node_name")

    @nominated_node_name.setter
    def nominated_node_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nominated_node_name", value)

    @property
    @pulumi.getter
    def phase(self) -> Optional[pulumi.Input[str]]:
        """
        The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values: 
         Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod. 
         More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
        """
        return pulumi.get(self, "phase")

    @phase.setter
    def phase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "phase", value)

    @property
    @pulumi.getter(name="podIP")
    def pod_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
        """
        return pulumi.get(self, "pod_ip")

    @pod_ip.setter
    def pod_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pod_ip", value)

    @property
    @pulumi.getter(name="podIPs")
    def pod_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OperatorStatusPodIPsArgs']]]]:
        """
        podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.
        """
        return pulumi.get(self, "pod_ips")

    @pod_ips.setter
    def pod_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OperatorStatusPodIPsArgs']]]]):
        pulumi.set(self, "pod_ips", value)

    @property
    @pulumi.getter(name="qosClass")
    def qos_class(self) -> Optional[pulumi.Input[str]]:
        """
        The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md
        """
        return pulumi.get(self, "qos_class")

    @qos_class.setter
    def qos_class(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "qos_class", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        """
        RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)


@pulumi.input_type
class OperatorStatusConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_probe_time: Optional[pulumi.Input[str]] = None,
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        PodCondition contains details for the current condition of this pod.
        :param pulumi.Input[str] status: Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
        :param pulumi.Input[str] type: Type is the type of the condition. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
        :param pulumi.Input[str] last_probe_time: Last time we probed the condition.
        :param pulumi.Input[str] last_transition_time: Last time the condition transitioned from one status to another.
        :param pulumi.Input[str] message: Human-readable message indicating details about last transition.
        :param pulumi.Input[str] reason: Unique, one-word, CamelCase reason for the condition's last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_probe_time is not None:
            pulumi.set(__self__, "last_probe_time", last_probe_time)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type is the type of the condition. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastProbeTime")
    def last_probe_time(self) -> Optional[pulumi.Input[str]]:
        """
        Last time we probed the condition.
        """
        return pulumi.get(self, "last_probe_time")

    @last_probe_time.setter
    def last_probe_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_probe_time", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        """
        Last time the condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Human-readable message indicating details about last transition.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        Unique, one-word, CamelCase reason for the condition's last transition.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


@pulumi.input_type
class OperatorStatusContainerStatusesArgs:
    def __init__(__self__, *,
                 image: pulumi.Input[str],
                 image_id: pulumi.Input[str],
                 name: pulumi.Input[str],
                 ready: pulumi.Input[bool],
                 restart_count: pulumi.Input[int],
                 container_id: Optional[pulumi.Input[str]] = None,
                 last_state: Optional[pulumi.Input['OperatorStatusContainerStatusesLastStateArgs']] = None,
                 started: Optional[pulumi.Input[bool]] = None,
                 state: Optional[pulumi.Input['OperatorStatusContainerStatusesStateArgs']] = None):
        """
        ContainerStatus contains details for the current status of this container.
        :param pulumi.Input[str] image: The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images TODO(dchen1107): Which image the container is running with?
        :param pulumi.Input[str] image_id: ImageID of the container's image.
        :param pulumi.Input[str] name: This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
        :param pulumi.Input[bool] ready: Specifies whether the container has passed its readiness probe.
        :param pulumi.Input[int] restart_count: The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.
        :param pulumi.Input[str] container_id: Container's ID in the format 'docker://<container_id>'.
        :param pulumi.Input['OperatorStatusContainerStatusesLastStateArgs'] last_state: Details about the container's last termination condition.
        :param pulumi.Input[bool] started: Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
        :param pulumi.Input['OperatorStatusContainerStatusesStateArgs'] state: Details about the container's current condition.
        """
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ready", ready)
        pulumi.set(__self__, "restart_count", restart_count)
        if container_id is not None:
            pulumi.set(__self__, "container_id", container_id)
        if last_state is not None:
            pulumi.set(__self__, "last_state", last_state)
        if started is not None:
            pulumi.set(__self__, "started", started)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input[str]:
        """
        The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images TODO(dchen1107): Which image the container is running with?
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[str]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="imageID")
    def image_id(self) -> pulumi.Input[str]:
        """
        ImageID of the container's image.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def ready(self) -> pulumi.Input[bool]:
        """
        Specifies whether the container has passed its readiness probe.
        """
        return pulumi.get(self, "ready")

    @ready.setter
    def ready(self, value: pulumi.Input[bool]):
        pulumi.set(self, "ready", value)

    @property
    @pulumi.getter(name="restartCount")
    def restart_count(self) -> pulumi.Input[int]:
        """
        The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.
        """
        return pulumi.get(self, "restart_count")

    @restart_count.setter
    def restart_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "restart_count", value)

    @property
    @pulumi.getter(name="containerID")
    def container_id(self) -> Optional[pulumi.Input[str]]:
        """
        Container's ID in the format 'docker://<container_id>'.
        """
        return pulumi.get(self, "container_id")

    @container_id.setter
    def container_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_id", value)

    @property
    @pulumi.getter(name="lastState")
    def last_state(self) -> Optional[pulumi.Input['OperatorStatusContainerStatusesLastStateArgs']]:
        """
        Details about the container's last termination condition.
        """
        return pulumi.get(self, "last_state")

    @last_state.setter
    def last_state(self, value: Optional[pulumi.Input['OperatorStatusContainerStatusesLastStateArgs']]):
        pulumi.set(self, "last_state", value)

    @property
    @pulumi.getter
    def started(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
        """
        return pulumi.get(self, "started")

    @started.setter
    def started(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "started", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input['OperatorStatusContainerStatusesStateArgs']]:
        """
        Details about the container's current condition.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input['OperatorStatusContainerStatusesStateArgs']]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class OperatorStatusContainerStatusesLastStateArgs:
    def __init__(__self__, *,
                 running: Optional[pulumi.Input['OperatorStatusContainerStatusesLastStateRunningArgs']] = None,
                 terminated: Optional[pulumi.Input['OperatorStatusContainerStatusesLastStateTerminatedArgs']] = None,
                 waiting: Optional[pulumi.Input['OperatorStatusContainerStatusesLastStateWaitingArgs']] = None):
        """
        Details about the container's last termination condition.
        :param pulumi.Input['OperatorStatusContainerStatusesLastStateRunningArgs'] running: Details about a running container
        :param pulumi.Input['OperatorStatusContainerStatusesLastStateTerminatedArgs'] terminated: Details about a terminated container
        :param pulumi.Input['OperatorStatusContainerStatusesLastStateWaitingArgs'] waiting: Details about a waiting container
        """
        if running is not None:
            pulumi.set(__self__, "running", running)
        if terminated is not None:
            pulumi.set(__self__, "terminated", terminated)
        if waiting is not None:
            pulumi.set(__self__, "waiting", waiting)

    @property
    @pulumi.getter
    def running(self) -> Optional[pulumi.Input['OperatorStatusContainerStatusesLastStateRunningArgs']]:
        """
        Details about a running container
        """
        return pulumi.get(self, "running")

    @running.setter
    def running(self, value: Optional[pulumi.Input['OperatorStatusContainerStatusesLastStateRunningArgs']]):
        pulumi.set(self, "running", value)

    @property
    @pulumi.getter
    def terminated(self) -> Optional[pulumi.Input['OperatorStatusContainerStatusesLastStateTerminatedArgs']]:
        """
        Details about a terminated container
        """
        return pulumi.get(self, "terminated")

    @terminated.setter
    def terminated(self, value: Optional[pulumi.Input['OperatorStatusContainerStatusesLastStateTerminatedArgs']]):
        pulumi.set(self, "terminated", value)

    @property
    @pulumi.getter
    def waiting(self) -> Optional[pulumi.Input['OperatorStatusContainerStatusesLastStateWaitingArgs']]:
        """
        Details about a waiting container
        """
        return pulumi.get(self, "waiting")

    @waiting.setter
    def waiting(self, value: Optional[pulumi.Input['OperatorStatusContainerStatusesLastStateWaitingArgs']]):
        pulumi.set(self, "waiting", value)


@pulumi.input_type
class OperatorStatusContainerStatusesLastStateRunningArgs:
    def __init__(__self__, *,
                 started_at: Optional[pulumi.Input[str]] = None):
        """
        Details about a running container
        :param pulumi.Input[str] started_at: Time at which the container was last (re-)started
        """
        if started_at is not None:
            pulumi.set(__self__, "started_at", started_at)

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> Optional[pulumi.Input[str]]:
        """
        Time at which the container was last (re-)started
        """
        return pulumi.get(self, "started_at")

    @started_at.setter
    def started_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "started_at", value)


@pulumi.input_type
class OperatorStatusContainerStatusesLastStateTerminatedArgs:
    def __init__(__self__, *,
                 exit_code: pulumi.Input[int],
                 container_id: Optional[pulumi.Input[str]] = None,
                 finished_at: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None,
                 signal: Optional[pulumi.Input[int]] = None,
                 started_at: Optional[pulumi.Input[str]] = None):
        """
        Details about a terminated container
        :param pulumi.Input[int] exit_code: Exit status from the last termination of the container
        :param pulumi.Input[str] container_id: Container's ID in the format 'docker://<container_id>'
        :param pulumi.Input[str] finished_at: Time at which the container last terminated
        :param pulumi.Input[str] message: Message regarding the last termination of the container
        :param pulumi.Input[str] reason: (brief) reason from the last termination of the container
        :param pulumi.Input[int] signal: Signal from the last termination of the container
        :param pulumi.Input[str] started_at: Time at which previous execution of the container started
        """
        pulumi.set(__self__, "exit_code", exit_code)
        if container_id is not None:
            pulumi.set(__self__, "container_id", container_id)
        if finished_at is not None:
            pulumi.set(__self__, "finished_at", finished_at)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if signal is not None:
            pulumi.set(__self__, "signal", signal)
        if started_at is not None:
            pulumi.set(__self__, "started_at", started_at)

    @property
    @pulumi.getter(name="exitCode")
    def exit_code(self) -> pulumi.Input[int]:
        """
        Exit status from the last termination of the container
        """
        return pulumi.get(self, "exit_code")

    @exit_code.setter
    def exit_code(self, value: pulumi.Input[int]):
        pulumi.set(self, "exit_code", value)

    @property
    @pulumi.getter(name="containerID")
    def container_id(self) -> Optional[pulumi.Input[str]]:
        """
        Container's ID in the format 'docker://<container_id>'
        """
        return pulumi.get(self, "container_id")

    @container_id.setter
    def container_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_id", value)

    @property
    @pulumi.getter(name="finishedAt")
    def finished_at(self) -> Optional[pulumi.Input[str]]:
        """
        Time at which the container last terminated
        """
        return pulumi.get(self, "finished_at")

    @finished_at.setter
    def finished_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "finished_at", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Message regarding the last termination of the container
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        (brief) reason from the last termination of the container
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def signal(self) -> Optional[pulumi.Input[int]]:
        """
        Signal from the last termination of the container
        """
        return pulumi.get(self, "signal")

    @signal.setter
    def signal(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "signal", value)

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> Optional[pulumi.Input[str]]:
        """
        Time at which previous execution of the container started
        """
        return pulumi.get(self, "started_at")

    @started_at.setter
    def started_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "started_at", value)


@pulumi.input_type
class OperatorStatusContainerStatusesLastStateWaitingArgs:
    def __init__(__self__, *,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        Details about a waiting container
        :param pulumi.Input[str] message: Message regarding why the container is not yet running.
        :param pulumi.Input[str] reason: (brief) reason the container is not yet running.
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Message regarding why the container is not yet running.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        (brief) reason the container is not yet running.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


@pulumi.input_type
class OperatorStatusContainerStatusesStateArgs:
    def __init__(__self__, *,
                 running: Optional[pulumi.Input['OperatorStatusContainerStatusesStateRunningArgs']] = None,
                 terminated: Optional[pulumi.Input['OperatorStatusContainerStatusesStateTerminatedArgs']] = None,
                 waiting: Optional[pulumi.Input['OperatorStatusContainerStatusesStateWaitingArgs']] = None):
        """
        Details about the container's current condition.
        :param pulumi.Input['OperatorStatusContainerStatusesStateRunningArgs'] running: Details about a running container
        :param pulumi.Input['OperatorStatusContainerStatusesStateTerminatedArgs'] terminated: Details about a terminated container
        :param pulumi.Input['OperatorStatusContainerStatusesStateWaitingArgs'] waiting: Details about a waiting container
        """
        if running is not None:
            pulumi.set(__self__, "running", running)
        if terminated is not None:
            pulumi.set(__self__, "terminated", terminated)
        if waiting is not None:
            pulumi.set(__self__, "waiting", waiting)

    @property
    @pulumi.getter
    def running(self) -> Optional[pulumi.Input['OperatorStatusContainerStatusesStateRunningArgs']]:
        """
        Details about a running container
        """
        return pulumi.get(self, "running")

    @running.setter
    def running(self, value: Optional[pulumi.Input['OperatorStatusContainerStatusesStateRunningArgs']]):
        pulumi.set(self, "running", value)

    @property
    @pulumi.getter
    def terminated(self) -> Optional[pulumi.Input['OperatorStatusContainerStatusesStateTerminatedArgs']]:
        """
        Details about a terminated container
        """
        return pulumi.get(self, "terminated")

    @terminated.setter
    def terminated(self, value: Optional[pulumi.Input['OperatorStatusContainerStatusesStateTerminatedArgs']]):
        pulumi.set(self, "terminated", value)

    @property
    @pulumi.getter
    def waiting(self) -> Optional[pulumi.Input['OperatorStatusContainerStatusesStateWaitingArgs']]:
        """
        Details about a waiting container
        """
        return pulumi.get(self, "waiting")

    @waiting.setter
    def waiting(self, value: Optional[pulumi.Input['OperatorStatusContainerStatusesStateWaitingArgs']]):
        pulumi.set(self, "waiting", value)


@pulumi.input_type
class OperatorStatusContainerStatusesStateRunningArgs:
    def __init__(__self__, *,
                 started_at: Optional[pulumi.Input[str]] = None):
        """
        Details about a running container
        :param pulumi.Input[str] started_at: Time at which the container was last (re-)started
        """
        if started_at is not None:
            pulumi.set(__self__, "started_at", started_at)

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> Optional[pulumi.Input[str]]:
        """
        Time at which the container was last (re-)started
        """
        return pulumi.get(self, "started_at")

    @started_at.setter
    def started_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "started_at", value)


@pulumi.input_type
class OperatorStatusContainerStatusesStateTerminatedArgs:
    def __init__(__self__, *,
                 exit_code: pulumi.Input[int],
                 container_id: Optional[pulumi.Input[str]] = None,
                 finished_at: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None,
                 signal: Optional[pulumi.Input[int]] = None,
                 started_at: Optional[pulumi.Input[str]] = None):
        """
        Details about a terminated container
        :param pulumi.Input[int] exit_code: Exit status from the last termination of the container
        :param pulumi.Input[str] container_id: Container's ID in the format 'docker://<container_id>'
        :param pulumi.Input[str] finished_at: Time at which the container last terminated
        :param pulumi.Input[str] message: Message regarding the last termination of the container
        :param pulumi.Input[str] reason: (brief) reason from the last termination of the container
        :param pulumi.Input[int] signal: Signal from the last termination of the container
        :param pulumi.Input[str] started_at: Time at which previous execution of the container started
        """
        pulumi.set(__self__, "exit_code", exit_code)
        if container_id is not None:
            pulumi.set(__self__, "container_id", container_id)
        if finished_at is not None:
            pulumi.set(__self__, "finished_at", finished_at)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if signal is not None:
            pulumi.set(__self__, "signal", signal)
        if started_at is not None:
            pulumi.set(__self__, "started_at", started_at)

    @property
    @pulumi.getter(name="exitCode")
    def exit_code(self) -> pulumi.Input[int]:
        """
        Exit status from the last termination of the container
        """
        return pulumi.get(self, "exit_code")

    @exit_code.setter
    def exit_code(self, value: pulumi.Input[int]):
        pulumi.set(self, "exit_code", value)

    @property
    @pulumi.getter(name="containerID")
    def container_id(self) -> Optional[pulumi.Input[str]]:
        """
        Container's ID in the format 'docker://<container_id>'
        """
        return pulumi.get(self, "container_id")

    @container_id.setter
    def container_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_id", value)

    @property
    @pulumi.getter(name="finishedAt")
    def finished_at(self) -> Optional[pulumi.Input[str]]:
        """
        Time at which the container last terminated
        """
        return pulumi.get(self, "finished_at")

    @finished_at.setter
    def finished_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "finished_at", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Message regarding the last termination of the container
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        (brief) reason from the last termination of the container
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def signal(self) -> Optional[pulumi.Input[int]]:
        """
        Signal from the last termination of the container
        """
        return pulumi.get(self, "signal")

    @signal.setter
    def signal(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "signal", value)

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> Optional[pulumi.Input[str]]:
        """
        Time at which previous execution of the container started
        """
        return pulumi.get(self, "started_at")

    @started_at.setter
    def started_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "started_at", value)


@pulumi.input_type
class OperatorStatusContainerStatusesStateWaitingArgs:
    def __init__(__self__, *,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        Details about a waiting container
        :param pulumi.Input[str] message: Message regarding why the container is not yet running.
        :param pulumi.Input[str] reason: (brief) reason the container is not yet running.
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Message regarding why the container is not yet running.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        (brief) reason the container is not yet running.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


@pulumi.input_type
class OperatorStatusEphemeralContainerStatusesArgs:
    def __init__(__self__, *,
                 image: pulumi.Input[str],
                 image_id: pulumi.Input[str],
                 name: pulumi.Input[str],
                 ready: pulumi.Input[bool],
                 restart_count: pulumi.Input[int],
                 container_id: Optional[pulumi.Input[str]] = None,
                 last_state: Optional[pulumi.Input['OperatorStatusEphemeralContainerStatusesLastStateArgs']] = None,
                 started: Optional[pulumi.Input[bool]] = None,
                 state: Optional[pulumi.Input['OperatorStatusEphemeralContainerStatusesStateArgs']] = None):
        """
        ContainerStatus contains details for the current status of this container.
        :param pulumi.Input[str] image: The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images TODO(dchen1107): Which image the container is running with?
        :param pulumi.Input[str] image_id: ImageID of the container's image.
        :param pulumi.Input[str] name: This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
        :param pulumi.Input[bool] ready: Specifies whether the container has passed its readiness probe.
        :param pulumi.Input[int] restart_count: The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.
        :param pulumi.Input[str] container_id: Container's ID in the format 'docker://<container_id>'.
        :param pulumi.Input['OperatorStatusEphemeralContainerStatusesLastStateArgs'] last_state: Details about the container's last termination condition.
        :param pulumi.Input[bool] started: Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
        :param pulumi.Input['OperatorStatusEphemeralContainerStatusesStateArgs'] state: Details about the container's current condition.
        """
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ready", ready)
        pulumi.set(__self__, "restart_count", restart_count)
        if container_id is not None:
            pulumi.set(__self__, "container_id", container_id)
        if last_state is not None:
            pulumi.set(__self__, "last_state", last_state)
        if started is not None:
            pulumi.set(__self__, "started", started)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input[str]:
        """
        The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images TODO(dchen1107): Which image the container is running with?
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[str]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="imageID")
    def image_id(self) -> pulumi.Input[str]:
        """
        ImageID of the container's image.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def ready(self) -> pulumi.Input[bool]:
        """
        Specifies whether the container has passed its readiness probe.
        """
        return pulumi.get(self, "ready")

    @ready.setter
    def ready(self, value: pulumi.Input[bool]):
        pulumi.set(self, "ready", value)

    @property
    @pulumi.getter(name="restartCount")
    def restart_count(self) -> pulumi.Input[int]:
        """
        The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.
        """
        return pulumi.get(self, "restart_count")

    @restart_count.setter
    def restart_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "restart_count", value)

    @property
    @pulumi.getter(name="containerID")
    def container_id(self) -> Optional[pulumi.Input[str]]:
        """
        Container's ID in the format 'docker://<container_id>'.
        """
        return pulumi.get(self, "container_id")

    @container_id.setter
    def container_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_id", value)

    @property
    @pulumi.getter(name="lastState")
    def last_state(self) -> Optional[pulumi.Input['OperatorStatusEphemeralContainerStatusesLastStateArgs']]:
        """
        Details about the container's last termination condition.
        """
        return pulumi.get(self, "last_state")

    @last_state.setter
    def last_state(self, value: Optional[pulumi.Input['OperatorStatusEphemeralContainerStatusesLastStateArgs']]):
        pulumi.set(self, "last_state", value)

    @property
    @pulumi.getter
    def started(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
        """
        return pulumi.get(self, "started")

    @started.setter
    def started(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "started", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input['OperatorStatusEphemeralContainerStatusesStateArgs']]:
        """
        Details about the container's current condition.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input['OperatorStatusEphemeralContainerStatusesStateArgs']]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class OperatorStatusEphemeralContainerStatusesLastStateArgs:
    def __init__(__self__, *,
                 running: Optional[pulumi.Input['OperatorStatusEphemeralContainerStatusesLastStateRunningArgs']] = None,
                 terminated: Optional[pulumi.Input['OperatorStatusEphemeralContainerStatusesLastStateTerminatedArgs']] = None,
                 waiting: Optional[pulumi.Input['OperatorStatusEphemeralContainerStatusesLastStateWaitingArgs']] = None):
        """
        Details about the container's last termination condition.
        :param pulumi.Input['OperatorStatusEphemeralContainerStatusesLastStateRunningArgs'] running: Details about a running container
        :param pulumi.Input['OperatorStatusEphemeralContainerStatusesLastStateTerminatedArgs'] terminated: Details about a terminated container
        :param pulumi.Input['OperatorStatusEphemeralContainerStatusesLastStateWaitingArgs'] waiting: Details about a waiting container
        """
        if running is not None:
            pulumi.set(__self__, "running", running)
        if terminated is not None:
            pulumi.set(__self__, "terminated", terminated)
        if waiting is not None:
            pulumi.set(__self__, "waiting", waiting)

    @property
    @pulumi.getter
    def running(self) -> Optional[pulumi.Input['OperatorStatusEphemeralContainerStatusesLastStateRunningArgs']]:
        """
        Details about a running container
        """
        return pulumi.get(self, "running")

    @running.setter
    def running(self, value: Optional[pulumi.Input['OperatorStatusEphemeralContainerStatusesLastStateRunningArgs']]):
        pulumi.set(self, "running", value)

    @property
    @pulumi.getter
    def terminated(self) -> Optional[pulumi.Input['OperatorStatusEphemeralContainerStatusesLastStateTerminatedArgs']]:
        """
        Details about a terminated container
        """
        return pulumi.get(self, "terminated")

    @terminated.setter
    def terminated(self, value: Optional[pulumi.Input['OperatorStatusEphemeralContainerStatusesLastStateTerminatedArgs']]):
        pulumi.set(self, "terminated", value)

    @property
    @pulumi.getter
    def waiting(self) -> Optional[pulumi.Input['OperatorStatusEphemeralContainerStatusesLastStateWaitingArgs']]:
        """
        Details about a waiting container
        """
        return pulumi.get(self, "waiting")

    @waiting.setter
    def waiting(self, value: Optional[pulumi.Input['OperatorStatusEphemeralContainerStatusesLastStateWaitingArgs']]):
        pulumi.set(self, "waiting", value)


@pulumi.input_type
class OperatorStatusEphemeralContainerStatusesLastStateRunningArgs:
    def __init__(__self__, *,
                 started_at: Optional[pulumi.Input[str]] = None):
        """
        Details about a running container
        :param pulumi.Input[str] started_at: Time at which the container was last (re-)started
        """
        if started_at is not None:
            pulumi.set(__self__, "started_at", started_at)

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> Optional[pulumi.Input[str]]:
        """
        Time at which the container was last (re-)started
        """
        return pulumi.get(self, "started_at")

    @started_at.setter
    def started_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "started_at", value)


@pulumi.input_type
class OperatorStatusEphemeralContainerStatusesLastStateTerminatedArgs:
    def __init__(__self__, *,
                 exit_code: pulumi.Input[int],
                 container_id: Optional[pulumi.Input[str]] = None,
                 finished_at: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None,
                 signal: Optional[pulumi.Input[int]] = None,
                 started_at: Optional[pulumi.Input[str]] = None):
        """
        Details about a terminated container
        :param pulumi.Input[int] exit_code: Exit status from the last termination of the container
        :param pulumi.Input[str] container_id: Container's ID in the format 'docker://<container_id>'
        :param pulumi.Input[str] finished_at: Time at which the container last terminated
        :param pulumi.Input[str] message: Message regarding the last termination of the container
        :param pulumi.Input[str] reason: (brief) reason from the last termination of the container
        :param pulumi.Input[int] signal: Signal from the last termination of the container
        :param pulumi.Input[str] started_at: Time at which previous execution of the container started
        """
        pulumi.set(__self__, "exit_code", exit_code)
        if container_id is not None:
            pulumi.set(__self__, "container_id", container_id)
        if finished_at is not None:
            pulumi.set(__self__, "finished_at", finished_at)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if signal is not None:
            pulumi.set(__self__, "signal", signal)
        if started_at is not None:
            pulumi.set(__self__, "started_at", started_at)

    @property
    @pulumi.getter(name="exitCode")
    def exit_code(self) -> pulumi.Input[int]:
        """
        Exit status from the last termination of the container
        """
        return pulumi.get(self, "exit_code")

    @exit_code.setter
    def exit_code(self, value: pulumi.Input[int]):
        pulumi.set(self, "exit_code", value)

    @property
    @pulumi.getter(name="containerID")
    def container_id(self) -> Optional[pulumi.Input[str]]:
        """
        Container's ID in the format 'docker://<container_id>'
        """
        return pulumi.get(self, "container_id")

    @container_id.setter
    def container_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_id", value)

    @property
    @pulumi.getter(name="finishedAt")
    def finished_at(self) -> Optional[pulumi.Input[str]]:
        """
        Time at which the container last terminated
        """
        return pulumi.get(self, "finished_at")

    @finished_at.setter
    def finished_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "finished_at", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Message regarding the last termination of the container
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        (brief) reason from the last termination of the container
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def signal(self) -> Optional[pulumi.Input[int]]:
        """
        Signal from the last termination of the container
        """
        return pulumi.get(self, "signal")

    @signal.setter
    def signal(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "signal", value)

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> Optional[pulumi.Input[str]]:
        """
        Time at which previous execution of the container started
        """
        return pulumi.get(self, "started_at")

    @started_at.setter
    def started_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "started_at", value)


@pulumi.input_type
class OperatorStatusEphemeralContainerStatusesLastStateWaitingArgs:
    def __init__(__self__, *,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        Details about a waiting container
        :param pulumi.Input[str] message: Message regarding why the container is not yet running.
        :param pulumi.Input[str] reason: (brief) reason the container is not yet running.
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Message regarding why the container is not yet running.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        (brief) reason the container is not yet running.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


@pulumi.input_type
class OperatorStatusEphemeralContainerStatusesStateArgs:
    def __init__(__self__, *,
                 running: Optional[pulumi.Input['OperatorStatusEphemeralContainerStatusesStateRunningArgs']] = None,
                 terminated: Optional[pulumi.Input['OperatorStatusEphemeralContainerStatusesStateTerminatedArgs']] = None,
                 waiting: Optional[pulumi.Input['OperatorStatusEphemeralContainerStatusesStateWaitingArgs']] = None):
        """
        Details about the container's current condition.
        :param pulumi.Input['OperatorStatusEphemeralContainerStatusesStateRunningArgs'] running: Details about a running container
        :param pulumi.Input['OperatorStatusEphemeralContainerStatusesStateTerminatedArgs'] terminated: Details about a terminated container
        :param pulumi.Input['OperatorStatusEphemeralContainerStatusesStateWaitingArgs'] waiting: Details about a waiting container
        """
        if running is not None:
            pulumi.set(__self__, "running", running)
        if terminated is not None:
            pulumi.set(__self__, "terminated", terminated)
        if waiting is not None:
            pulumi.set(__self__, "waiting", waiting)

    @property
    @pulumi.getter
    def running(self) -> Optional[pulumi.Input['OperatorStatusEphemeralContainerStatusesStateRunningArgs']]:
        """
        Details about a running container
        """
        return pulumi.get(self, "running")

    @running.setter
    def running(self, value: Optional[pulumi.Input['OperatorStatusEphemeralContainerStatusesStateRunningArgs']]):
        pulumi.set(self, "running", value)

    @property
    @pulumi.getter
    def terminated(self) -> Optional[pulumi.Input['OperatorStatusEphemeralContainerStatusesStateTerminatedArgs']]:
        """
        Details about a terminated container
        """
        return pulumi.get(self, "terminated")

    @terminated.setter
    def terminated(self, value: Optional[pulumi.Input['OperatorStatusEphemeralContainerStatusesStateTerminatedArgs']]):
        pulumi.set(self, "terminated", value)

    @property
    @pulumi.getter
    def waiting(self) -> Optional[pulumi.Input['OperatorStatusEphemeralContainerStatusesStateWaitingArgs']]:
        """
        Details about a waiting container
        """
        return pulumi.get(self, "waiting")

    @waiting.setter
    def waiting(self, value: Optional[pulumi.Input['OperatorStatusEphemeralContainerStatusesStateWaitingArgs']]):
        pulumi.set(self, "waiting", value)


@pulumi.input_type
class OperatorStatusEphemeralContainerStatusesStateRunningArgs:
    def __init__(__self__, *,
                 started_at: Optional[pulumi.Input[str]] = None):
        """
        Details about a running container
        :param pulumi.Input[str] started_at: Time at which the container was last (re-)started
        """
        if started_at is not None:
            pulumi.set(__self__, "started_at", started_at)

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> Optional[pulumi.Input[str]]:
        """
        Time at which the container was last (re-)started
        """
        return pulumi.get(self, "started_at")

    @started_at.setter
    def started_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "started_at", value)


@pulumi.input_type
class OperatorStatusEphemeralContainerStatusesStateTerminatedArgs:
    def __init__(__self__, *,
                 exit_code: pulumi.Input[int],
                 container_id: Optional[pulumi.Input[str]] = None,
                 finished_at: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None,
                 signal: Optional[pulumi.Input[int]] = None,
                 started_at: Optional[pulumi.Input[str]] = None):
        """
        Details about a terminated container
        :param pulumi.Input[int] exit_code: Exit status from the last termination of the container
        :param pulumi.Input[str] container_id: Container's ID in the format 'docker://<container_id>'
        :param pulumi.Input[str] finished_at: Time at which the container last terminated
        :param pulumi.Input[str] message: Message regarding the last termination of the container
        :param pulumi.Input[str] reason: (brief) reason from the last termination of the container
        :param pulumi.Input[int] signal: Signal from the last termination of the container
        :param pulumi.Input[str] started_at: Time at which previous execution of the container started
        """
        pulumi.set(__self__, "exit_code", exit_code)
        if container_id is not None:
            pulumi.set(__self__, "container_id", container_id)
        if finished_at is not None:
            pulumi.set(__self__, "finished_at", finished_at)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if signal is not None:
            pulumi.set(__self__, "signal", signal)
        if started_at is not None:
            pulumi.set(__self__, "started_at", started_at)

    @property
    @pulumi.getter(name="exitCode")
    def exit_code(self) -> pulumi.Input[int]:
        """
        Exit status from the last termination of the container
        """
        return pulumi.get(self, "exit_code")

    @exit_code.setter
    def exit_code(self, value: pulumi.Input[int]):
        pulumi.set(self, "exit_code", value)

    @property
    @pulumi.getter(name="containerID")
    def container_id(self) -> Optional[pulumi.Input[str]]:
        """
        Container's ID in the format 'docker://<container_id>'
        """
        return pulumi.get(self, "container_id")

    @container_id.setter
    def container_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_id", value)

    @property
    @pulumi.getter(name="finishedAt")
    def finished_at(self) -> Optional[pulumi.Input[str]]:
        """
        Time at which the container last terminated
        """
        return pulumi.get(self, "finished_at")

    @finished_at.setter
    def finished_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "finished_at", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Message regarding the last termination of the container
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        (brief) reason from the last termination of the container
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def signal(self) -> Optional[pulumi.Input[int]]:
        """
        Signal from the last termination of the container
        """
        return pulumi.get(self, "signal")

    @signal.setter
    def signal(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "signal", value)

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> Optional[pulumi.Input[str]]:
        """
        Time at which previous execution of the container started
        """
        return pulumi.get(self, "started_at")

    @started_at.setter
    def started_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "started_at", value)


@pulumi.input_type
class OperatorStatusEphemeralContainerStatusesStateWaitingArgs:
    def __init__(__self__, *,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        Details about a waiting container
        :param pulumi.Input[str] message: Message regarding why the container is not yet running.
        :param pulumi.Input[str] reason: (brief) reason the container is not yet running.
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Message regarding why the container is not yet running.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        (brief) reason the container is not yet running.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


@pulumi.input_type
class OperatorStatusInitContainerStatusesArgs:
    def __init__(__self__, *,
                 image: pulumi.Input[str],
                 image_id: pulumi.Input[str],
                 name: pulumi.Input[str],
                 ready: pulumi.Input[bool],
                 restart_count: pulumi.Input[int],
                 container_id: Optional[pulumi.Input[str]] = None,
                 last_state: Optional[pulumi.Input['OperatorStatusInitContainerStatusesLastStateArgs']] = None,
                 started: Optional[pulumi.Input[bool]] = None,
                 state: Optional[pulumi.Input['OperatorStatusInitContainerStatusesStateArgs']] = None):
        """
        ContainerStatus contains details for the current status of this container.
        :param pulumi.Input[str] image: The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images TODO(dchen1107): Which image the container is running with?
        :param pulumi.Input[str] image_id: ImageID of the container's image.
        :param pulumi.Input[str] name: This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
        :param pulumi.Input[bool] ready: Specifies whether the container has passed its readiness probe.
        :param pulumi.Input[int] restart_count: The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.
        :param pulumi.Input[str] container_id: Container's ID in the format 'docker://<container_id>'.
        :param pulumi.Input['OperatorStatusInitContainerStatusesLastStateArgs'] last_state: Details about the container's last termination condition.
        :param pulumi.Input[bool] started: Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
        :param pulumi.Input['OperatorStatusInitContainerStatusesStateArgs'] state: Details about the container's current condition.
        """
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ready", ready)
        pulumi.set(__self__, "restart_count", restart_count)
        if container_id is not None:
            pulumi.set(__self__, "container_id", container_id)
        if last_state is not None:
            pulumi.set(__self__, "last_state", last_state)
        if started is not None:
            pulumi.set(__self__, "started", started)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input[str]:
        """
        The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images TODO(dchen1107): Which image the container is running with?
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[str]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="imageID")
    def image_id(self) -> pulumi.Input[str]:
        """
        ImageID of the container's image.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def ready(self) -> pulumi.Input[bool]:
        """
        Specifies whether the container has passed its readiness probe.
        """
        return pulumi.get(self, "ready")

    @ready.setter
    def ready(self, value: pulumi.Input[bool]):
        pulumi.set(self, "ready", value)

    @property
    @pulumi.getter(name="restartCount")
    def restart_count(self) -> pulumi.Input[int]:
        """
        The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.
        """
        return pulumi.get(self, "restart_count")

    @restart_count.setter
    def restart_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "restart_count", value)

    @property
    @pulumi.getter(name="containerID")
    def container_id(self) -> Optional[pulumi.Input[str]]:
        """
        Container's ID in the format 'docker://<container_id>'.
        """
        return pulumi.get(self, "container_id")

    @container_id.setter
    def container_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_id", value)

    @property
    @pulumi.getter(name="lastState")
    def last_state(self) -> Optional[pulumi.Input['OperatorStatusInitContainerStatusesLastStateArgs']]:
        """
        Details about the container's last termination condition.
        """
        return pulumi.get(self, "last_state")

    @last_state.setter
    def last_state(self, value: Optional[pulumi.Input['OperatorStatusInitContainerStatusesLastStateArgs']]):
        pulumi.set(self, "last_state", value)

    @property
    @pulumi.getter
    def started(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
        """
        return pulumi.get(self, "started")

    @started.setter
    def started(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "started", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input['OperatorStatusInitContainerStatusesStateArgs']]:
        """
        Details about the container's current condition.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input['OperatorStatusInitContainerStatusesStateArgs']]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class OperatorStatusInitContainerStatusesLastStateArgs:
    def __init__(__self__, *,
                 running: Optional[pulumi.Input['OperatorStatusInitContainerStatusesLastStateRunningArgs']] = None,
                 terminated: Optional[pulumi.Input['OperatorStatusInitContainerStatusesLastStateTerminatedArgs']] = None,
                 waiting: Optional[pulumi.Input['OperatorStatusInitContainerStatusesLastStateWaitingArgs']] = None):
        """
        Details about the container's last termination condition.
        :param pulumi.Input['OperatorStatusInitContainerStatusesLastStateRunningArgs'] running: Details about a running container
        :param pulumi.Input['OperatorStatusInitContainerStatusesLastStateTerminatedArgs'] terminated: Details about a terminated container
        :param pulumi.Input['OperatorStatusInitContainerStatusesLastStateWaitingArgs'] waiting: Details about a waiting container
        """
        if running is not None:
            pulumi.set(__self__, "running", running)
        if terminated is not None:
            pulumi.set(__self__, "terminated", terminated)
        if waiting is not None:
            pulumi.set(__self__, "waiting", waiting)

    @property
    @pulumi.getter
    def running(self) -> Optional[pulumi.Input['OperatorStatusInitContainerStatusesLastStateRunningArgs']]:
        """
        Details about a running container
        """
        return pulumi.get(self, "running")

    @running.setter
    def running(self, value: Optional[pulumi.Input['OperatorStatusInitContainerStatusesLastStateRunningArgs']]):
        pulumi.set(self, "running", value)

    @property
    @pulumi.getter
    def terminated(self) -> Optional[pulumi.Input['OperatorStatusInitContainerStatusesLastStateTerminatedArgs']]:
        """
        Details about a terminated container
        """
        return pulumi.get(self, "terminated")

    @terminated.setter
    def terminated(self, value: Optional[pulumi.Input['OperatorStatusInitContainerStatusesLastStateTerminatedArgs']]):
        pulumi.set(self, "terminated", value)

    @property
    @pulumi.getter
    def waiting(self) -> Optional[pulumi.Input['OperatorStatusInitContainerStatusesLastStateWaitingArgs']]:
        """
        Details about a waiting container
        """
        return pulumi.get(self, "waiting")

    @waiting.setter
    def waiting(self, value: Optional[pulumi.Input['OperatorStatusInitContainerStatusesLastStateWaitingArgs']]):
        pulumi.set(self, "waiting", value)


@pulumi.input_type
class OperatorStatusInitContainerStatusesLastStateRunningArgs:
    def __init__(__self__, *,
                 started_at: Optional[pulumi.Input[str]] = None):
        """
        Details about a running container
        :param pulumi.Input[str] started_at: Time at which the container was last (re-)started
        """
        if started_at is not None:
            pulumi.set(__self__, "started_at", started_at)

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> Optional[pulumi.Input[str]]:
        """
        Time at which the container was last (re-)started
        """
        return pulumi.get(self, "started_at")

    @started_at.setter
    def started_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "started_at", value)


@pulumi.input_type
class OperatorStatusInitContainerStatusesLastStateTerminatedArgs:
    def __init__(__self__, *,
                 exit_code: pulumi.Input[int],
                 container_id: Optional[pulumi.Input[str]] = None,
                 finished_at: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None,
                 signal: Optional[pulumi.Input[int]] = None,
                 started_at: Optional[pulumi.Input[str]] = None):
        """
        Details about a terminated container
        :param pulumi.Input[int] exit_code: Exit status from the last termination of the container
        :param pulumi.Input[str] container_id: Container's ID in the format 'docker://<container_id>'
        :param pulumi.Input[str] finished_at: Time at which the container last terminated
        :param pulumi.Input[str] message: Message regarding the last termination of the container
        :param pulumi.Input[str] reason: (brief) reason from the last termination of the container
        :param pulumi.Input[int] signal: Signal from the last termination of the container
        :param pulumi.Input[str] started_at: Time at which previous execution of the container started
        """
        pulumi.set(__self__, "exit_code", exit_code)
        if container_id is not None:
            pulumi.set(__self__, "container_id", container_id)
        if finished_at is not None:
            pulumi.set(__self__, "finished_at", finished_at)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if signal is not None:
            pulumi.set(__self__, "signal", signal)
        if started_at is not None:
            pulumi.set(__self__, "started_at", started_at)

    @property
    @pulumi.getter(name="exitCode")
    def exit_code(self) -> pulumi.Input[int]:
        """
        Exit status from the last termination of the container
        """
        return pulumi.get(self, "exit_code")

    @exit_code.setter
    def exit_code(self, value: pulumi.Input[int]):
        pulumi.set(self, "exit_code", value)

    @property
    @pulumi.getter(name="containerID")
    def container_id(self) -> Optional[pulumi.Input[str]]:
        """
        Container's ID in the format 'docker://<container_id>'
        """
        return pulumi.get(self, "container_id")

    @container_id.setter
    def container_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_id", value)

    @property
    @pulumi.getter(name="finishedAt")
    def finished_at(self) -> Optional[pulumi.Input[str]]:
        """
        Time at which the container last terminated
        """
        return pulumi.get(self, "finished_at")

    @finished_at.setter
    def finished_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "finished_at", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Message regarding the last termination of the container
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        (brief) reason from the last termination of the container
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def signal(self) -> Optional[pulumi.Input[int]]:
        """
        Signal from the last termination of the container
        """
        return pulumi.get(self, "signal")

    @signal.setter
    def signal(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "signal", value)

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> Optional[pulumi.Input[str]]:
        """
        Time at which previous execution of the container started
        """
        return pulumi.get(self, "started_at")

    @started_at.setter
    def started_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "started_at", value)


@pulumi.input_type
class OperatorStatusInitContainerStatusesLastStateWaitingArgs:
    def __init__(__self__, *,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        Details about a waiting container
        :param pulumi.Input[str] message: Message regarding why the container is not yet running.
        :param pulumi.Input[str] reason: (brief) reason the container is not yet running.
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Message regarding why the container is not yet running.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        (brief) reason the container is not yet running.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


@pulumi.input_type
class OperatorStatusInitContainerStatusesStateArgs:
    def __init__(__self__, *,
                 running: Optional[pulumi.Input['OperatorStatusInitContainerStatusesStateRunningArgs']] = None,
                 terminated: Optional[pulumi.Input['OperatorStatusInitContainerStatusesStateTerminatedArgs']] = None,
                 waiting: Optional[pulumi.Input['OperatorStatusInitContainerStatusesStateWaitingArgs']] = None):
        """
        Details about the container's current condition.
        :param pulumi.Input['OperatorStatusInitContainerStatusesStateRunningArgs'] running: Details about a running container
        :param pulumi.Input['OperatorStatusInitContainerStatusesStateTerminatedArgs'] terminated: Details about a terminated container
        :param pulumi.Input['OperatorStatusInitContainerStatusesStateWaitingArgs'] waiting: Details about a waiting container
        """
        if running is not None:
            pulumi.set(__self__, "running", running)
        if terminated is not None:
            pulumi.set(__self__, "terminated", terminated)
        if waiting is not None:
            pulumi.set(__self__, "waiting", waiting)

    @property
    @pulumi.getter
    def running(self) -> Optional[pulumi.Input['OperatorStatusInitContainerStatusesStateRunningArgs']]:
        """
        Details about a running container
        """
        return pulumi.get(self, "running")

    @running.setter
    def running(self, value: Optional[pulumi.Input['OperatorStatusInitContainerStatusesStateRunningArgs']]):
        pulumi.set(self, "running", value)

    @property
    @pulumi.getter
    def terminated(self) -> Optional[pulumi.Input['OperatorStatusInitContainerStatusesStateTerminatedArgs']]:
        """
        Details about a terminated container
        """
        return pulumi.get(self, "terminated")

    @terminated.setter
    def terminated(self, value: Optional[pulumi.Input['OperatorStatusInitContainerStatusesStateTerminatedArgs']]):
        pulumi.set(self, "terminated", value)

    @property
    @pulumi.getter
    def waiting(self) -> Optional[pulumi.Input['OperatorStatusInitContainerStatusesStateWaitingArgs']]:
        """
        Details about a waiting container
        """
        return pulumi.get(self, "waiting")

    @waiting.setter
    def waiting(self, value: Optional[pulumi.Input['OperatorStatusInitContainerStatusesStateWaitingArgs']]):
        pulumi.set(self, "waiting", value)


@pulumi.input_type
class OperatorStatusInitContainerStatusesStateRunningArgs:
    def __init__(__self__, *,
                 started_at: Optional[pulumi.Input[str]] = None):
        """
        Details about a running container
        :param pulumi.Input[str] started_at: Time at which the container was last (re-)started
        """
        if started_at is not None:
            pulumi.set(__self__, "started_at", started_at)

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> Optional[pulumi.Input[str]]:
        """
        Time at which the container was last (re-)started
        """
        return pulumi.get(self, "started_at")

    @started_at.setter
    def started_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "started_at", value)


@pulumi.input_type
class OperatorStatusInitContainerStatusesStateTerminatedArgs:
    def __init__(__self__, *,
                 exit_code: pulumi.Input[int],
                 container_id: Optional[pulumi.Input[str]] = None,
                 finished_at: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None,
                 signal: Optional[pulumi.Input[int]] = None,
                 started_at: Optional[pulumi.Input[str]] = None):
        """
        Details about a terminated container
        :param pulumi.Input[int] exit_code: Exit status from the last termination of the container
        :param pulumi.Input[str] container_id: Container's ID in the format 'docker://<container_id>'
        :param pulumi.Input[str] finished_at: Time at which the container last terminated
        :param pulumi.Input[str] message: Message regarding the last termination of the container
        :param pulumi.Input[str] reason: (brief) reason from the last termination of the container
        :param pulumi.Input[int] signal: Signal from the last termination of the container
        :param pulumi.Input[str] started_at: Time at which previous execution of the container started
        """
        pulumi.set(__self__, "exit_code", exit_code)
        if container_id is not None:
            pulumi.set(__self__, "container_id", container_id)
        if finished_at is not None:
            pulumi.set(__self__, "finished_at", finished_at)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if signal is not None:
            pulumi.set(__self__, "signal", signal)
        if started_at is not None:
            pulumi.set(__self__, "started_at", started_at)

    @property
    @pulumi.getter(name="exitCode")
    def exit_code(self) -> pulumi.Input[int]:
        """
        Exit status from the last termination of the container
        """
        return pulumi.get(self, "exit_code")

    @exit_code.setter
    def exit_code(self, value: pulumi.Input[int]):
        pulumi.set(self, "exit_code", value)

    @property
    @pulumi.getter(name="containerID")
    def container_id(self) -> Optional[pulumi.Input[str]]:
        """
        Container's ID in the format 'docker://<container_id>'
        """
        return pulumi.get(self, "container_id")

    @container_id.setter
    def container_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_id", value)

    @property
    @pulumi.getter(name="finishedAt")
    def finished_at(self) -> Optional[pulumi.Input[str]]:
        """
        Time at which the container last terminated
        """
        return pulumi.get(self, "finished_at")

    @finished_at.setter
    def finished_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "finished_at", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Message regarding the last termination of the container
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        (brief) reason from the last termination of the container
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def signal(self) -> Optional[pulumi.Input[int]]:
        """
        Signal from the last termination of the container
        """
        return pulumi.get(self, "signal")

    @signal.setter
    def signal(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "signal", value)

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> Optional[pulumi.Input[str]]:
        """
        Time at which previous execution of the container started
        """
        return pulumi.get(self, "started_at")

    @started_at.setter
    def started_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "started_at", value)


@pulumi.input_type
class OperatorStatusInitContainerStatusesStateWaitingArgs:
    def __init__(__self__, *,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        Details about a waiting container
        :param pulumi.Input[str] message: Message regarding why the container is not yet running.
        :param pulumi.Input[str] reason: (brief) reason the container is not yet running.
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Message regarding why the container is not yet running.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        (brief) reason the container is not yet running.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


@pulumi.input_type
class OperatorStatusPodIPsArgs:
    def __init__(__self__, *,
                 ip: Optional[pulumi.Input[str]] = None):
        """
        IP address information for entries in the (plural) PodIPs field. Each entry includes:    IP: An IP address allocated to the pod. Routable at least within the cluster.
        :param pulumi.Input[str] ip: ip is an IP address (IPv4 or IPv6) assigned to the pod
        """
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        ip is an IP address (IPv4 or IPv6) assigned to the pod
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)



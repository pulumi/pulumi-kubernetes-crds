# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'OperatorSpec',
    'OperatorSpecCore',
    'OperatorSpecCoreDeployable',
    'OperatorSpecTools',
    'OperatorSpecToolsAssembler',
    'OperatorSpecToolsDiscoverer',
    'OperatorSpecToolsDiscovererHubconfig',
    'OperatorSpecToolsDiscovererHubconfigSecretRef',
    'OperatorStatus',
    'OperatorStatusConditions',
    'OperatorStatusContainerStatuses',
    'OperatorStatusContainerStatusesLastState',
    'OperatorStatusContainerStatusesLastStateRunning',
    'OperatorStatusContainerStatusesLastStateTerminated',
    'OperatorStatusContainerStatusesLastStateWaiting',
    'OperatorStatusContainerStatusesState',
    'OperatorStatusContainerStatusesStateRunning',
    'OperatorStatusContainerStatusesStateTerminated',
    'OperatorStatusContainerStatusesStateWaiting',
    'OperatorStatusEphemeralContainerStatuses',
    'OperatorStatusEphemeralContainerStatusesLastState',
    'OperatorStatusEphemeralContainerStatusesLastStateRunning',
    'OperatorStatusEphemeralContainerStatusesLastStateTerminated',
    'OperatorStatusEphemeralContainerStatusesLastStateWaiting',
    'OperatorStatusEphemeralContainerStatusesState',
    'OperatorStatusEphemeralContainerStatusesStateRunning',
    'OperatorStatusEphemeralContainerStatusesStateTerminated',
    'OperatorStatusEphemeralContainerStatusesStateWaiting',
    'OperatorStatusInitContainerStatuses',
    'OperatorStatusInitContainerStatusesLastState',
    'OperatorStatusInitContainerStatusesLastStateRunning',
    'OperatorStatusInitContainerStatusesLastStateTerminated',
    'OperatorStatusInitContainerStatusesLastStateWaiting',
    'OperatorStatusInitContainerStatusesState',
    'OperatorStatusInitContainerStatusesStateRunning',
    'OperatorStatusInitContainerStatusesStateTerminated',
    'OperatorStatusInitContainerStatusesStateWaiting',
    'OperatorStatusPodIPs',
]

@pulumi.output_type
class OperatorSpec(dict):
    """
    OperatorSpec defines the desired state of Operator
    """
    def __init__(__self__, *,
                 core: Optional['outputs.OperatorSpecCore'] = None,
                 tools: Optional['outputs.OperatorSpecTools'] = None):
        """
        OperatorSpec defines the desired state of Operator
        """
        if core is not None:
            pulumi.set(__self__, "core", core)
        if tools is not None:
            pulumi.set(__self__, "tools", tools)

    @property
    @pulumi.getter
    def core(self) -> Optional['outputs.OperatorSpecCore']:
        return pulumi.get(self, "core")

    @property
    @pulumi.getter
    def tools(self) -> Optional['outputs.OperatorSpecTools']:
        return pulumi.get(self, "tools")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OperatorSpecCore(dict):
    def __init__(__self__, *,
                 deployable: Optional['outputs.OperatorSpecCoreDeployable'] = None):
        if deployable is not None:
            pulumi.set(__self__, "deployable", deployable)

    @property
    @pulumi.getter
    def deployable(self) -> Optional['outputs.OperatorSpecCoreDeployable']:
        return pulumi.get(self, "deployable")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OperatorSpecCoreDeployable(dict):
    def __init__(__self__, *,
                 args: Optional[Sequence[str]] = None,
                 command: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None,
                 image: Optional[str] = None,
                 name: Optional[str] = None):
        if args is not None:
            pulumi.set(__self__, "args", args)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def args(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OperatorSpecTools(dict):
    def __init__(__self__, *,
                 assembler: Optional['outputs.OperatorSpecToolsAssembler'] = None,
                 discoverer: Optional['outputs.OperatorSpecToolsDiscoverer'] = None):
        if assembler is not None:
            pulumi.set(__self__, "assembler", assembler)
        if discoverer is not None:
            pulumi.set(__self__, "discoverer", discoverer)

    @property
    @pulumi.getter
    def assembler(self) -> Optional['outputs.OperatorSpecToolsAssembler']:
        return pulumi.get(self, "assembler")

    @property
    @pulumi.getter
    def discoverer(self) -> Optional['outputs.OperatorSpecToolsDiscoverer']:
        return pulumi.get(self, "discoverer")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OperatorSpecToolsAssembler(dict):
    def __init__(__self__, *,
                 args: Optional[Sequence[str]] = None,
                 command: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None,
                 image: Optional[str] = None,
                 name: Optional[str] = None):
        if args is not None:
            pulumi.set(__self__, "args", args)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def args(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OperatorSpecToolsDiscoverer(dict):
    def __init__(__self__, *,
                 clustername: str,
                 clusternamespace: str,
                 args: Optional[Sequence[str]] = None,
                 command: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None,
                 hubconfig: Optional['outputs.OperatorSpecToolsDiscovererHubconfig'] = None,
                 image: Optional[str] = None,
                 name: Optional[str] = None):
        pulumi.set(__self__, "clustername", clustername)
        pulumi.set(__self__, "clusternamespace", clusternamespace)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hubconfig is not None:
            pulumi.set(__self__, "hubconfig", hubconfig)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def clustername(self) -> str:
        return pulumi.get(self, "clustername")

    @property
    @pulumi.getter
    def clusternamespace(self) -> str:
        return pulumi.get(self, "clusternamespace")

    @property
    @pulumi.getter
    def args(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def command(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "command")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def hubconfig(self) -> Optional['outputs.OperatorSpecToolsDiscovererHubconfig']:
        return pulumi.get(self, "hubconfig")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OperatorSpecToolsDiscovererHubconfig(dict):
    def __init__(__self__, *,
                 mountpath: str,
                 secret_ref: 'outputs.OperatorSpecToolsDiscovererHubconfigSecretRef',
                 kubeconfig: Optional[str] = None):
        """
        :param 'OperatorSpecToolsDiscovererHubconfigSecretRefArgs' secret_ref: LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
        """
        pulumi.set(__self__, "mountpath", mountpath)
        pulumi.set(__self__, "secret_ref", secret_ref)
        if kubeconfig is not None:
            pulumi.set(__self__, "kubeconfig", kubeconfig)

    @property
    @pulumi.getter
    def mountpath(self) -> str:
        return pulumi.get(self, "mountpath")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> 'outputs.OperatorSpecToolsDiscovererHubconfigSecretRef':
        """
        LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
        """
        return pulumi.get(self, "secret_ref")

    @property
    @pulumi.getter
    def kubeconfig(self) -> Optional[str]:
        return pulumi.get(self, "kubeconfig")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OperatorSpecToolsDiscovererHubconfigSecretRef(dict):
    """
    LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OperatorStatus(dict):
    """
    OperatorStatus defines the observed state of Operator
    """
    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.OperatorStatusConditions']] = None,
                 container_statuses: Optional[Sequence['outputs.OperatorStatusContainerStatuses']] = None,
                 ephemeral_container_statuses: Optional[Sequence['outputs.OperatorStatusEphemeralContainerStatuses']] = None,
                 host_ip: Optional[str] = None,
                 init_container_statuses: Optional[Sequence['outputs.OperatorStatusInitContainerStatuses']] = None,
                 message: Optional[str] = None,
                 nominated_node_name: Optional[str] = None,
                 phase: Optional[str] = None,
                 pod_ip: Optional[str] = None,
                 pod_ips: Optional[Sequence['outputs.OperatorStatusPodIPs']] = None,
                 qos_class: Optional[str] = None,
                 reason: Optional[str] = None,
                 start_time: Optional[str] = None):
        """
        OperatorStatus defines the observed state of Operator
        :param Sequence['OperatorStatusConditionsArgs'] conditions: Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
        :param Sequence['OperatorStatusContainerStatusesArgs'] container_statuses: The list has one entry per container in the manifest. Each entry is currently the output of `docker inspect`. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
        :param Sequence['OperatorStatusEphemeralContainerStatusesArgs'] ephemeral_container_statuses: Status for any ephemeral containers that have run in this pod. This field is alpha-level and is only populated by servers that enable the EphemeralContainers feature.
        :param str host_ip: IP address of the host to which the pod is assigned. Empty if not yet scheduled.
        :param Sequence['OperatorStatusInitContainerStatusesArgs'] init_container_statuses: The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
        :param str message: A human readable message indicating details about why the pod is in this condition.
        :param str nominated_node_name: nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.
        :param str phase: The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values: 
                Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod. 
                More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
        :param str pod_ip: IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
        :param Sequence['OperatorStatusPodIPsArgs'] pod_ips: podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.
        :param str qos_class: The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md
        :param str reason: A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'
        :param str start_time: RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if container_statuses is not None:
            pulumi.set(__self__, "container_statuses", container_statuses)
        if ephemeral_container_statuses is not None:
            pulumi.set(__self__, "ephemeral_container_statuses", ephemeral_container_statuses)
        if host_ip is not None:
            pulumi.set(__self__, "host_ip", host_ip)
        if init_container_statuses is not None:
            pulumi.set(__self__, "init_container_statuses", init_container_statuses)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if nominated_node_name is not None:
            pulumi.set(__self__, "nominated_node_name", nominated_node_name)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)
        if pod_ip is not None:
            pulumi.set(__self__, "pod_ip", pod_ip)
        if pod_ips is not None:
            pulumi.set(__self__, "pod_ips", pod_ips)
        if qos_class is not None:
            pulumi.set(__self__, "qos_class", qos_class)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.OperatorStatusConditions']]:
        """
        Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="containerStatuses")
    def container_statuses(self) -> Optional[Sequence['outputs.OperatorStatusContainerStatuses']]:
        """
        The list has one entry per container in the manifest. Each entry is currently the output of `docker inspect`. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
        """
        return pulumi.get(self, "container_statuses")

    @property
    @pulumi.getter(name="ephemeralContainerStatuses")
    def ephemeral_container_statuses(self) -> Optional[Sequence['outputs.OperatorStatusEphemeralContainerStatuses']]:
        """
        Status for any ephemeral containers that have run in this pod. This field is alpha-level and is only populated by servers that enable the EphemeralContainers feature.
        """
        return pulumi.get(self, "ephemeral_container_statuses")

    @property
    @pulumi.getter(name="hostIP")
    def host_ip(self) -> Optional[str]:
        """
        IP address of the host to which the pod is assigned. Empty if not yet scheduled.
        """
        return pulumi.get(self, "host_ip")

    @property
    @pulumi.getter(name="initContainerStatuses")
    def init_container_statuses(self) -> Optional[Sequence['outputs.OperatorStatusInitContainerStatuses']]:
        """
        The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
        """
        return pulumi.get(self, "init_container_statuses")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        A human readable message indicating details about why the pod is in this condition.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="nominatedNodeName")
    def nominated_node_name(self) -> Optional[str]:
        """
        nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.
        """
        return pulumi.get(self, "nominated_node_name")

    @property
    @pulumi.getter
    def phase(self) -> Optional[str]:
        """
        The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values: 
         Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod. 
         More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
        """
        return pulumi.get(self, "phase")

    @property
    @pulumi.getter(name="podIP")
    def pod_ip(self) -> Optional[str]:
        """
        IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
        """
        return pulumi.get(self, "pod_ip")

    @property
    @pulumi.getter(name="podIPs")
    def pod_ips(self) -> Optional[Sequence['outputs.OperatorStatusPodIPs']]:
        """
        podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.
        """
        return pulumi.get(self, "pod_ips")

    @property
    @pulumi.getter(name="qosClass")
    def qos_class(self) -> Optional[str]:
        """
        The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md
        """
        return pulumi.get(self, "qos_class")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        """
        RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.
        """
        return pulumi.get(self, "start_time")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OperatorStatusConditions(dict):
    """
    PodCondition contains details for the current condition of this pod.
    """
    def __init__(__self__, *,
                 status: str,
                 type: str,
                 last_probe_time: Optional[str] = None,
                 last_transition_time: Optional[str] = None,
                 message: Optional[str] = None,
                 reason: Optional[str] = None):
        """
        PodCondition contains details for the current condition of this pod.
        :param str status: Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
        :param str type: Type is the type of the condition. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
        :param str last_probe_time: Last time we probed the condition.
        :param str last_transition_time: Last time the condition transitioned from one status to another.
        :param str message: Human-readable message indicating details about last transition.
        :param str reason: Unique, one-word, CamelCase reason for the condition's last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_probe_time is not None:
            pulumi.set(__self__, "last_probe_time", last_probe_time)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type is the type of the condition. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="lastProbeTime")
    def last_probe_time(self) -> Optional[str]:
        """
        Last time we probed the condition.
        """
        return pulumi.get(self, "last_probe_time")

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[str]:
        """
        Last time the condition transitioned from one status to another.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Human-readable message indicating details about last transition.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        Unique, one-word, CamelCase reason for the condition's last transition.
        """
        return pulumi.get(self, "reason")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OperatorStatusContainerStatuses(dict):
    """
    ContainerStatus contains details for the current status of this container.
    """
    def __init__(__self__, *,
                 image: str,
                 image_id: str,
                 name: str,
                 ready: bool,
                 restart_count: int,
                 container_id: Optional[str] = None,
                 last_state: Optional['outputs.OperatorStatusContainerStatusesLastState'] = None,
                 started: Optional[bool] = None,
                 state: Optional['outputs.OperatorStatusContainerStatusesState'] = None):
        """
        ContainerStatus contains details for the current status of this container.
        :param str image: The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images TODO(dchen1107): Which image the container is running with?
        :param str image_id: ImageID of the container's image.
        :param str name: This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
        :param bool ready: Specifies whether the container has passed its readiness probe.
        :param int restart_count: The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.
        :param str container_id: Container's ID in the format 'docker://<container_id>'.
        :param 'OperatorStatusContainerStatusesLastStateArgs' last_state: Details about the container's last termination condition.
        :param bool started: Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
        :param 'OperatorStatusContainerStatusesStateArgs' state: Details about the container's current condition.
        """
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ready", ready)
        pulumi.set(__self__, "restart_count", restart_count)
        if container_id is not None:
            pulumi.set(__self__, "container_id", container_id)
        if last_state is not None:
            pulumi.set(__self__, "last_state", last_state)
        if started is not None:
            pulumi.set(__self__, "started", started)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def image(self) -> str:
        """
        The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images TODO(dchen1107): Which image the container is running with?
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imageID")
    def image_id(self) -> str:
        """
        ImageID of the container's image.
        """
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ready(self) -> bool:
        """
        Specifies whether the container has passed its readiness probe.
        """
        return pulumi.get(self, "ready")

    @property
    @pulumi.getter(name="restartCount")
    def restart_count(self) -> int:
        """
        The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.
        """
        return pulumi.get(self, "restart_count")

    @property
    @pulumi.getter(name="containerID")
    def container_id(self) -> Optional[str]:
        """
        Container's ID in the format 'docker://<container_id>'.
        """
        return pulumi.get(self, "container_id")

    @property
    @pulumi.getter(name="lastState")
    def last_state(self) -> Optional['outputs.OperatorStatusContainerStatusesLastState']:
        """
        Details about the container's last termination condition.
        """
        return pulumi.get(self, "last_state")

    @property
    @pulumi.getter
    def started(self) -> Optional[bool]:
        """
        Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
        """
        return pulumi.get(self, "started")

    @property
    @pulumi.getter
    def state(self) -> Optional['outputs.OperatorStatusContainerStatusesState']:
        """
        Details about the container's current condition.
        """
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OperatorStatusContainerStatusesLastState(dict):
    """
    Details about the container's last termination condition.
    """
    def __init__(__self__, *,
                 running: Optional['outputs.OperatorStatusContainerStatusesLastStateRunning'] = None,
                 terminated: Optional['outputs.OperatorStatusContainerStatusesLastStateTerminated'] = None,
                 waiting: Optional['outputs.OperatorStatusContainerStatusesLastStateWaiting'] = None):
        """
        Details about the container's last termination condition.
        :param 'OperatorStatusContainerStatusesLastStateRunningArgs' running: Details about a running container
        :param 'OperatorStatusContainerStatusesLastStateTerminatedArgs' terminated: Details about a terminated container
        :param 'OperatorStatusContainerStatusesLastStateWaitingArgs' waiting: Details about a waiting container
        """
        if running is not None:
            pulumi.set(__self__, "running", running)
        if terminated is not None:
            pulumi.set(__self__, "terminated", terminated)
        if waiting is not None:
            pulumi.set(__self__, "waiting", waiting)

    @property
    @pulumi.getter
    def running(self) -> Optional['outputs.OperatorStatusContainerStatusesLastStateRunning']:
        """
        Details about a running container
        """
        return pulumi.get(self, "running")

    @property
    @pulumi.getter
    def terminated(self) -> Optional['outputs.OperatorStatusContainerStatusesLastStateTerminated']:
        """
        Details about a terminated container
        """
        return pulumi.get(self, "terminated")

    @property
    @pulumi.getter
    def waiting(self) -> Optional['outputs.OperatorStatusContainerStatusesLastStateWaiting']:
        """
        Details about a waiting container
        """
        return pulumi.get(self, "waiting")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OperatorStatusContainerStatusesLastStateRunning(dict):
    """
    Details about a running container
    """
    def __init__(__self__, *,
                 started_at: Optional[str] = None):
        """
        Details about a running container
        :param str started_at: Time at which the container was last (re-)started
        """
        if started_at is not None:
            pulumi.set(__self__, "started_at", started_at)

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> Optional[str]:
        """
        Time at which the container was last (re-)started
        """
        return pulumi.get(self, "started_at")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OperatorStatusContainerStatusesLastStateTerminated(dict):
    """
    Details about a terminated container
    """
    def __init__(__self__, *,
                 exit_code: int,
                 container_id: Optional[str] = None,
                 finished_at: Optional[str] = None,
                 message: Optional[str] = None,
                 reason: Optional[str] = None,
                 signal: Optional[int] = None,
                 started_at: Optional[str] = None):
        """
        Details about a terminated container
        :param int exit_code: Exit status from the last termination of the container
        :param str container_id: Container's ID in the format 'docker://<container_id>'
        :param str finished_at: Time at which the container last terminated
        :param str message: Message regarding the last termination of the container
        :param str reason: (brief) reason from the last termination of the container
        :param int signal: Signal from the last termination of the container
        :param str started_at: Time at which previous execution of the container started
        """
        pulumi.set(__self__, "exit_code", exit_code)
        if container_id is not None:
            pulumi.set(__self__, "container_id", container_id)
        if finished_at is not None:
            pulumi.set(__self__, "finished_at", finished_at)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if signal is not None:
            pulumi.set(__self__, "signal", signal)
        if started_at is not None:
            pulumi.set(__self__, "started_at", started_at)

    @property
    @pulumi.getter(name="exitCode")
    def exit_code(self) -> int:
        """
        Exit status from the last termination of the container
        """
        return pulumi.get(self, "exit_code")

    @property
    @pulumi.getter(name="containerID")
    def container_id(self) -> Optional[str]:
        """
        Container's ID in the format 'docker://<container_id>'
        """
        return pulumi.get(self, "container_id")

    @property
    @pulumi.getter(name="finishedAt")
    def finished_at(self) -> Optional[str]:
        """
        Time at which the container last terminated
        """
        return pulumi.get(self, "finished_at")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Message regarding the last termination of the container
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        (brief) reason from the last termination of the container
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def signal(self) -> Optional[int]:
        """
        Signal from the last termination of the container
        """
        return pulumi.get(self, "signal")

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> Optional[str]:
        """
        Time at which previous execution of the container started
        """
        return pulumi.get(self, "started_at")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OperatorStatusContainerStatusesLastStateWaiting(dict):
    """
    Details about a waiting container
    """
    def __init__(__self__, *,
                 message: Optional[str] = None,
                 reason: Optional[str] = None):
        """
        Details about a waiting container
        :param str message: Message regarding why the container is not yet running.
        :param str reason: (brief) reason the container is not yet running.
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Message regarding why the container is not yet running.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        (brief) reason the container is not yet running.
        """
        return pulumi.get(self, "reason")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OperatorStatusContainerStatusesState(dict):
    """
    Details about the container's current condition.
    """
    def __init__(__self__, *,
                 running: Optional['outputs.OperatorStatusContainerStatusesStateRunning'] = None,
                 terminated: Optional['outputs.OperatorStatusContainerStatusesStateTerminated'] = None,
                 waiting: Optional['outputs.OperatorStatusContainerStatusesStateWaiting'] = None):
        """
        Details about the container's current condition.
        :param 'OperatorStatusContainerStatusesStateRunningArgs' running: Details about a running container
        :param 'OperatorStatusContainerStatusesStateTerminatedArgs' terminated: Details about a terminated container
        :param 'OperatorStatusContainerStatusesStateWaitingArgs' waiting: Details about a waiting container
        """
        if running is not None:
            pulumi.set(__self__, "running", running)
        if terminated is not None:
            pulumi.set(__self__, "terminated", terminated)
        if waiting is not None:
            pulumi.set(__self__, "waiting", waiting)

    @property
    @pulumi.getter
    def running(self) -> Optional['outputs.OperatorStatusContainerStatusesStateRunning']:
        """
        Details about a running container
        """
        return pulumi.get(self, "running")

    @property
    @pulumi.getter
    def terminated(self) -> Optional['outputs.OperatorStatusContainerStatusesStateTerminated']:
        """
        Details about a terminated container
        """
        return pulumi.get(self, "terminated")

    @property
    @pulumi.getter
    def waiting(self) -> Optional['outputs.OperatorStatusContainerStatusesStateWaiting']:
        """
        Details about a waiting container
        """
        return pulumi.get(self, "waiting")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OperatorStatusContainerStatusesStateRunning(dict):
    """
    Details about a running container
    """
    def __init__(__self__, *,
                 started_at: Optional[str] = None):
        """
        Details about a running container
        :param str started_at: Time at which the container was last (re-)started
        """
        if started_at is not None:
            pulumi.set(__self__, "started_at", started_at)

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> Optional[str]:
        """
        Time at which the container was last (re-)started
        """
        return pulumi.get(self, "started_at")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OperatorStatusContainerStatusesStateTerminated(dict):
    """
    Details about a terminated container
    """
    def __init__(__self__, *,
                 exit_code: int,
                 container_id: Optional[str] = None,
                 finished_at: Optional[str] = None,
                 message: Optional[str] = None,
                 reason: Optional[str] = None,
                 signal: Optional[int] = None,
                 started_at: Optional[str] = None):
        """
        Details about a terminated container
        :param int exit_code: Exit status from the last termination of the container
        :param str container_id: Container's ID in the format 'docker://<container_id>'
        :param str finished_at: Time at which the container last terminated
        :param str message: Message regarding the last termination of the container
        :param str reason: (brief) reason from the last termination of the container
        :param int signal: Signal from the last termination of the container
        :param str started_at: Time at which previous execution of the container started
        """
        pulumi.set(__self__, "exit_code", exit_code)
        if container_id is not None:
            pulumi.set(__self__, "container_id", container_id)
        if finished_at is not None:
            pulumi.set(__self__, "finished_at", finished_at)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if signal is not None:
            pulumi.set(__self__, "signal", signal)
        if started_at is not None:
            pulumi.set(__self__, "started_at", started_at)

    @property
    @pulumi.getter(name="exitCode")
    def exit_code(self) -> int:
        """
        Exit status from the last termination of the container
        """
        return pulumi.get(self, "exit_code")

    @property
    @pulumi.getter(name="containerID")
    def container_id(self) -> Optional[str]:
        """
        Container's ID in the format 'docker://<container_id>'
        """
        return pulumi.get(self, "container_id")

    @property
    @pulumi.getter(name="finishedAt")
    def finished_at(self) -> Optional[str]:
        """
        Time at which the container last terminated
        """
        return pulumi.get(self, "finished_at")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Message regarding the last termination of the container
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        (brief) reason from the last termination of the container
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def signal(self) -> Optional[int]:
        """
        Signal from the last termination of the container
        """
        return pulumi.get(self, "signal")

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> Optional[str]:
        """
        Time at which previous execution of the container started
        """
        return pulumi.get(self, "started_at")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OperatorStatusContainerStatusesStateWaiting(dict):
    """
    Details about a waiting container
    """
    def __init__(__self__, *,
                 message: Optional[str] = None,
                 reason: Optional[str] = None):
        """
        Details about a waiting container
        :param str message: Message regarding why the container is not yet running.
        :param str reason: (brief) reason the container is not yet running.
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Message regarding why the container is not yet running.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        (brief) reason the container is not yet running.
        """
        return pulumi.get(self, "reason")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OperatorStatusEphemeralContainerStatuses(dict):
    """
    ContainerStatus contains details for the current status of this container.
    """
    def __init__(__self__, *,
                 image: str,
                 image_id: str,
                 name: str,
                 ready: bool,
                 restart_count: int,
                 container_id: Optional[str] = None,
                 last_state: Optional['outputs.OperatorStatusEphemeralContainerStatusesLastState'] = None,
                 started: Optional[bool] = None,
                 state: Optional['outputs.OperatorStatusEphemeralContainerStatusesState'] = None):
        """
        ContainerStatus contains details for the current status of this container.
        :param str image: The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images TODO(dchen1107): Which image the container is running with?
        :param str image_id: ImageID of the container's image.
        :param str name: This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
        :param bool ready: Specifies whether the container has passed its readiness probe.
        :param int restart_count: The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.
        :param str container_id: Container's ID in the format 'docker://<container_id>'.
        :param 'OperatorStatusEphemeralContainerStatusesLastStateArgs' last_state: Details about the container's last termination condition.
        :param bool started: Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
        :param 'OperatorStatusEphemeralContainerStatusesStateArgs' state: Details about the container's current condition.
        """
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ready", ready)
        pulumi.set(__self__, "restart_count", restart_count)
        if container_id is not None:
            pulumi.set(__self__, "container_id", container_id)
        if last_state is not None:
            pulumi.set(__self__, "last_state", last_state)
        if started is not None:
            pulumi.set(__self__, "started", started)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def image(self) -> str:
        """
        The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images TODO(dchen1107): Which image the container is running with?
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imageID")
    def image_id(self) -> str:
        """
        ImageID of the container's image.
        """
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ready(self) -> bool:
        """
        Specifies whether the container has passed its readiness probe.
        """
        return pulumi.get(self, "ready")

    @property
    @pulumi.getter(name="restartCount")
    def restart_count(self) -> int:
        """
        The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.
        """
        return pulumi.get(self, "restart_count")

    @property
    @pulumi.getter(name="containerID")
    def container_id(self) -> Optional[str]:
        """
        Container's ID in the format 'docker://<container_id>'.
        """
        return pulumi.get(self, "container_id")

    @property
    @pulumi.getter(name="lastState")
    def last_state(self) -> Optional['outputs.OperatorStatusEphemeralContainerStatusesLastState']:
        """
        Details about the container's last termination condition.
        """
        return pulumi.get(self, "last_state")

    @property
    @pulumi.getter
    def started(self) -> Optional[bool]:
        """
        Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
        """
        return pulumi.get(self, "started")

    @property
    @pulumi.getter
    def state(self) -> Optional['outputs.OperatorStatusEphemeralContainerStatusesState']:
        """
        Details about the container's current condition.
        """
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OperatorStatusEphemeralContainerStatusesLastState(dict):
    """
    Details about the container's last termination condition.
    """
    def __init__(__self__, *,
                 running: Optional['outputs.OperatorStatusEphemeralContainerStatusesLastStateRunning'] = None,
                 terminated: Optional['outputs.OperatorStatusEphemeralContainerStatusesLastStateTerminated'] = None,
                 waiting: Optional['outputs.OperatorStatusEphemeralContainerStatusesLastStateWaiting'] = None):
        """
        Details about the container's last termination condition.
        :param 'OperatorStatusEphemeralContainerStatusesLastStateRunningArgs' running: Details about a running container
        :param 'OperatorStatusEphemeralContainerStatusesLastStateTerminatedArgs' terminated: Details about a terminated container
        :param 'OperatorStatusEphemeralContainerStatusesLastStateWaitingArgs' waiting: Details about a waiting container
        """
        if running is not None:
            pulumi.set(__self__, "running", running)
        if terminated is not None:
            pulumi.set(__self__, "terminated", terminated)
        if waiting is not None:
            pulumi.set(__self__, "waiting", waiting)

    @property
    @pulumi.getter
    def running(self) -> Optional['outputs.OperatorStatusEphemeralContainerStatusesLastStateRunning']:
        """
        Details about a running container
        """
        return pulumi.get(self, "running")

    @property
    @pulumi.getter
    def terminated(self) -> Optional['outputs.OperatorStatusEphemeralContainerStatusesLastStateTerminated']:
        """
        Details about a terminated container
        """
        return pulumi.get(self, "terminated")

    @property
    @pulumi.getter
    def waiting(self) -> Optional['outputs.OperatorStatusEphemeralContainerStatusesLastStateWaiting']:
        """
        Details about a waiting container
        """
        return pulumi.get(self, "waiting")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OperatorStatusEphemeralContainerStatusesLastStateRunning(dict):
    """
    Details about a running container
    """
    def __init__(__self__, *,
                 started_at: Optional[str] = None):
        """
        Details about a running container
        :param str started_at: Time at which the container was last (re-)started
        """
        if started_at is not None:
            pulumi.set(__self__, "started_at", started_at)

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> Optional[str]:
        """
        Time at which the container was last (re-)started
        """
        return pulumi.get(self, "started_at")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OperatorStatusEphemeralContainerStatusesLastStateTerminated(dict):
    """
    Details about a terminated container
    """
    def __init__(__self__, *,
                 exit_code: int,
                 container_id: Optional[str] = None,
                 finished_at: Optional[str] = None,
                 message: Optional[str] = None,
                 reason: Optional[str] = None,
                 signal: Optional[int] = None,
                 started_at: Optional[str] = None):
        """
        Details about a terminated container
        :param int exit_code: Exit status from the last termination of the container
        :param str container_id: Container's ID in the format 'docker://<container_id>'
        :param str finished_at: Time at which the container last terminated
        :param str message: Message regarding the last termination of the container
        :param str reason: (brief) reason from the last termination of the container
        :param int signal: Signal from the last termination of the container
        :param str started_at: Time at which previous execution of the container started
        """
        pulumi.set(__self__, "exit_code", exit_code)
        if container_id is not None:
            pulumi.set(__self__, "container_id", container_id)
        if finished_at is not None:
            pulumi.set(__self__, "finished_at", finished_at)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if signal is not None:
            pulumi.set(__self__, "signal", signal)
        if started_at is not None:
            pulumi.set(__self__, "started_at", started_at)

    @property
    @pulumi.getter(name="exitCode")
    def exit_code(self) -> int:
        """
        Exit status from the last termination of the container
        """
        return pulumi.get(self, "exit_code")

    @property
    @pulumi.getter(name="containerID")
    def container_id(self) -> Optional[str]:
        """
        Container's ID in the format 'docker://<container_id>'
        """
        return pulumi.get(self, "container_id")

    @property
    @pulumi.getter(name="finishedAt")
    def finished_at(self) -> Optional[str]:
        """
        Time at which the container last terminated
        """
        return pulumi.get(self, "finished_at")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Message regarding the last termination of the container
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        (brief) reason from the last termination of the container
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def signal(self) -> Optional[int]:
        """
        Signal from the last termination of the container
        """
        return pulumi.get(self, "signal")

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> Optional[str]:
        """
        Time at which previous execution of the container started
        """
        return pulumi.get(self, "started_at")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OperatorStatusEphemeralContainerStatusesLastStateWaiting(dict):
    """
    Details about a waiting container
    """
    def __init__(__self__, *,
                 message: Optional[str] = None,
                 reason: Optional[str] = None):
        """
        Details about a waiting container
        :param str message: Message regarding why the container is not yet running.
        :param str reason: (brief) reason the container is not yet running.
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Message regarding why the container is not yet running.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        (brief) reason the container is not yet running.
        """
        return pulumi.get(self, "reason")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OperatorStatusEphemeralContainerStatusesState(dict):
    """
    Details about the container's current condition.
    """
    def __init__(__self__, *,
                 running: Optional['outputs.OperatorStatusEphemeralContainerStatusesStateRunning'] = None,
                 terminated: Optional['outputs.OperatorStatusEphemeralContainerStatusesStateTerminated'] = None,
                 waiting: Optional['outputs.OperatorStatusEphemeralContainerStatusesStateWaiting'] = None):
        """
        Details about the container's current condition.
        :param 'OperatorStatusEphemeralContainerStatusesStateRunningArgs' running: Details about a running container
        :param 'OperatorStatusEphemeralContainerStatusesStateTerminatedArgs' terminated: Details about a terminated container
        :param 'OperatorStatusEphemeralContainerStatusesStateWaitingArgs' waiting: Details about a waiting container
        """
        if running is not None:
            pulumi.set(__self__, "running", running)
        if terminated is not None:
            pulumi.set(__self__, "terminated", terminated)
        if waiting is not None:
            pulumi.set(__self__, "waiting", waiting)

    @property
    @pulumi.getter
    def running(self) -> Optional['outputs.OperatorStatusEphemeralContainerStatusesStateRunning']:
        """
        Details about a running container
        """
        return pulumi.get(self, "running")

    @property
    @pulumi.getter
    def terminated(self) -> Optional['outputs.OperatorStatusEphemeralContainerStatusesStateTerminated']:
        """
        Details about a terminated container
        """
        return pulumi.get(self, "terminated")

    @property
    @pulumi.getter
    def waiting(self) -> Optional['outputs.OperatorStatusEphemeralContainerStatusesStateWaiting']:
        """
        Details about a waiting container
        """
        return pulumi.get(self, "waiting")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OperatorStatusEphemeralContainerStatusesStateRunning(dict):
    """
    Details about a running container
    """
    def __init__(__self__, *,
                 started_at: Optional[str] = None):
        """
        Details about a running container
        :param str started_at: Time at which the container was last (re-)started
        """
        if started_at is not None:
            pulumi.set(__self__, "started_at", started_at)

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> Optional[str]:
        """
        Time at which the container was last (re-)started
        """
        return pulumi.get(self, "started_at")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OperatorStatusEphemeralContainerStatusesStateTerminated(dict):
    """
    Details about a terminated container
    """
    def __init__(__self__, *,
                 exit_code: int,
                 container_id: Optional[str] = None,
                 finished_at: Optional[str] = None,
                 message: Optional[str] = None,
                 reason: Optional[str] = None,
                 signal: Optional[int] = None,
                 started_at: Optional[str] = None):
        """
        Details about a terminated container
        :param int exit_code: Exit status from the last termination of the container
        :param str container_id: Container's ID in the format 'docker://<container_id>'
        :param str finished_at: Time at which the container last terminated
        :param str message: Message regarding the last termination of the container
        :param str reason: (brief) reason from the last termination of the container
        :param int signal: Signal from the last termination of the container
        :param str started_at: Time at which previous execution of the container started
        """
        pulumi.set(__self__, "exit_code", exit_code)
        if container_id is not None:
            pulumi.set(__self__, "container_id", container_id)
        if finished_at is not None:
            pulumi.set(__self__, "finished_at", finished_at)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if signal is not None:
            pulumi.set(__self__, "signal", signal)
        if started_at is not None:
            pulumi.set(__self__, "started_at", started_at)

    @property
    @pulumi.getter(name="exitCode")
    def exit_code(self) -> int:
        """
        Exit status from the last termination of the container
        """
        return pulumi.get(self, "exit_code")

    @property
    @pulumi.getter(name="containerID")
    def container_id(self) -> Optional[str]:
        """
        Container's ID in the format 'docker://<container_id>'
        """
        return pulumi.get(self, "container_id")

    @property
    @pulumi.getter(name="finishedAt")
    def finished_at(self) -> Optional[str]:
        """
        Time at which the container last terminated
        """
        return pulumi.get(self, "finished_at")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Message regarding the last termination of the container
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        (brief) reason from the last termination of the container
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def signal(self) -> Optional[int]:
        """
        Signal from the last termination of the container
        """
        return pulumi.get(self, "signal")

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> Optional[str]:
        """
        Time at which previous execution of the container started
        """
        return pulumi.get(self, "started_at")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OperatorStatusEphemeralContainerStatusesStateWaiting(dict):
    """
    Details about a waiting container
    """
    def __init__(__self__, *,
                 message: Optional[str] = None,
                 reason: Optional[str] = None):
        """
        Details about a waiting container
        :param str message: Message regarding why the container is not yet running.
        :param str reason: (brief) reason the container is not yet running.
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Message regarding why the container is not yet running.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        (brief) reason the container is not yet running.
        """
        return pulumi.get(self, "reason")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OperatorStatusInitContainerStatuses(dict):
    """
    ContainerStatus contains details for the current status of this container.
    """
    def __init__(__self__, *,
                 image: str,
                 image_id: str,
                 name: str,
                 ready: bool,
                 restart_count: int,
                 container_id: Optional[str] = None,
                 last_state: Optional['outputs.OperatorStatusInitContainerStatusesLastState'] = None,
                 started: Optional[bool] = None,
                 state: Optional['outputs.OperatorStatusInitContainerStatusesState'] = None):
        """
        ContainerStatus contains details for the current status of this container.
        :param str image: The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images TODO(dchen1107): Which image the container is running with?
        :param str image_id: ImageID of the container's image.
        :param str name: This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
        :param bool ready: Specifies whether the container has passed its readiness probe.
        :param int restart_count: The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.
        :param str container_id: Container's ID in the format 'docker://<container_id>'.
        :param 'OperatorStatusInitContainerStatusesLastStateArgs' last_state: Details about the container's last termination condition.
        :param bool started: Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
        :param 'OperatorStatusInitContainerStatusesStateArgs' state: Details about the container's current condition.
        """
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ready", ready)
        pulumi.set(__self__, "restart_count", restart_count)
        if container_id is not None:
            pulumi.set(__self__, "container_id", container_id)
        if last_state is not None:
            pulumi.set(__self__, "last_state", last_state)
        if started is not None:
            pulumi.set(__self__, "started", started)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def image(self) -> str:
        """
        The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images TODO(dchen1107): Which image the container is running with?
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imageID")
    def image_id(self) -> str:
        """
        ImageID of the container's image.
        """
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ready(self) -> bool:
        """
        Specifies whether the container has passed its readiness probe.
        """
        return pulumi.get(self, "ready")

    @property
    @pulumi.getter(name="restartCount")
    def restart_count(self) -> int:
        """
        The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.
        """
        return pulumi.get(self, "restart_count")

    @property
    @pulumi.getter(name="containerID")
    def container_id(self) -> Optional[str]:
        """
        Container's ID in the format 'docker://<container_id>'.
        """
        return pulumi.get(self, "container_id")

    @property
    @pulumi.getter(name="lastState")
    def last_state(self) -> Optional['outputs.OperatorStatusInitContainerStatusesLastState']:
        """
        Details about the container's last termination condition.
        """
        return pulumi.get(self, "last_state")

    @property
    @pulumi.getter
    def started(self) -> Optional[bool]:
        """
        Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
        """
        return pulumi.get(self, "started")

    @property
    @pulumi.getter
    def state(self) -> Optional['outputs.OperatorStatusInitContainerStatusesState']:
        """
        Details about the container's current condition.
        """
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OperatorStatusInitContainerStatusesLastState(dict):
    """
    Details about the container's last termination condition.
    """
    def __init__(__self__, *,
                 running: Optional['outputs.OperatorStatusInitContainerStatusesLastStateRunning'] = None,
                 terminated: Optional['outputs.OperatorStatusInitContainerStatusesLastStateTerminated'] = None,
                 waiting: Optional['outputs.OperatorStatusInitContainerStatusesLastStateWaiting'] = None):
        """
        Details about the container's last termination condition.
        :param 'OperatorStatusInitContainerStatusesLastStateRunningArgs' running: Details about a running container
        :param 'OperatorStatusInitContainerStatusesLastStateTerminatedArgs' terminated: Details about a terminated container
        :param 'OperatorStatusInitContainerStatusesLastStateWaitingArgs' waiting: Details about a waiting container
        """
        if running is not None:
            pulumi.set(__self__, "running", running)
        if terminated is not None:
            pulumi.set(__self__, "terminated", terminated)
        if waiting is not None:
            pulumi.set(__self__, "waiting", waiting)

    @property
    @pulumi.getter
    def running(self) -> Optional['outputs.OperatorStatusInitContainerStatusesLastStateRunning']:
        """
        Details about a running container
        """
        return pulumi.get(self, "running")

    @property
    @pulumi.getter
    def terminated(self) -> Optional['outputs.OperatorStatusInitContainerStatusesLastStateTerminated']:
        """
        Details about a terminated container
        """
        return pulumi.get(self, "terminated")

    @property
    @pulumi.getter
    def waiting(self) -> Optional['outputs.OperatorStatusInitContainerStatusesLastStateWaiting']:
        """
        Details about a waiting container
        """
        return pulumi.get(self, "waiting")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OperatorStatusInitContainerStatusesLastStateRunning(dict):
    """
    Details about a running container
    """
    def __init__(__self__, *,
                 started_at: Optional[str] = None):
        """
        Details about a running container
        :param str started_at: Time at which the container was last (re-)started
        """
        if started_at is not None:
            pulumi.set(__self__, "started_at", started_at)

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> Optional[str]:
        """
        Time at which the container was last (re-)started
        """
        return pulumi.get(self, "started_at")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OperatorStatusInitContainerStatusesLastStateTerminated(dict):
    """
    Details about a terminated container
    """
    def __init__(__self__, *,
                 exit_code: int,
                 container_id: Optional[str] = None,
                 finished_at: Optional[str] = None,
                 message: Optional[str] = None,
                 reason: Optional[str] = None,
                 signal: Optional[int] = None,
                 started_at: Optional[str] = None):
        """
        Details about a terminated container
        :param int exit_code: Exit status from the last termination of the container
        :param str container_id: Container's ID in the format 'docker://<container_id>'
        :param str finished_at: Time at which the container last terminated
        :param str message: Message regarding the last termination of the container
        :param str reason: (brief) reason from the last termination of the container
        :param int signal: Signal from the last termination of the container
        :param str started_at: Time at which previous execution of the container started
        """
        pulumi.set(__self__, "exit_code", exit_code)
        if container_id is not None:
            pulumi.set(__self__, "container_id", container_id)
        if finished_at is not None:
            pulumi.set(__self__, "finished_at", finished_at)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if signal is not None:
            pulumi.set(__self__, "signal", signal)
        if started_at is not None:
            pulumi.set(__self__, "started_at", started_at)

    @property
    @pulumi.getter(name="exitCode")
    def exit_code(self) -> int:
        """
        Exit status from the last termination of the container
        """
        return pulumi.get(self, "exit_code")

    @property
    @pulumi.getter(name="containerID")
    def container_id(self) -> Optional[str]:
        """
        Container's ID in the format 'docker://<container_id>'
        """
        return pulumi.get(self, "container_id")

    @property
    @pulumi.getter(name="finishedAt")
    def finished_at(self) -> Optional[str]:
        """
        Time at which the container last terminated
        """
        return pulumi.get(self, "finished_at")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Message regarding the last termination of the container
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        (brief) reason from the last termination of the container
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def signal(self) -> Optional[int]:
        """
        Signal from the last termination of the container
        """
        return pulumi.get(self, "signal")

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> Optional[str]:
        """
        Time at which previous execution of the container started
        """
        return pulumi.get(self, "started_at")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OperatorStatusInitContainerStatusesLastStateWaiting(dict):
    """
    Details about a waiting container
    """
    def __init__(__self__, *,
                 message: Optional[str] = None,
                 reason: Optional[str] = None):
        """
        Details about a waiting container
        :param str message: Message regarding why the container is not yet running.
        :param str reason: (brief) reason the container is not yet running.
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Message regarding why the container is not yet running.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        (brief) reason the container is not yet running.
        """
        return pulumi.get(self, "reason")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OperatorStatusInitContainerStatusesState(dict):
    """
    Details about the container's current condition.
    """
    def __init__(__self__, *,
                 running: Optional['outputs.OperatorStatusInitContainerStatusesStateRunning'] = None,
                 terminated: Optional['outputs.OperatorStatusInitContainerStatusesStateTerminated'] = None,
                 waiting: Optional['outputs.OperatorStatusInitContainerStatusesStateWaiting'] = None):
        """
        Details about the container's current condition.
        :param 'OperatorStatusInitContainerStatusesStateRunningArgs' running: Details about a running container
        :param 'OperatorStatusInitContainerStatusesStateTerminatedArgs' terminated: Details about a terminated container
        :param 'OperatorStatusInitContainerStatusesStateWaitingArgs' waiting: Details about a waiting container
        """
        if running is not None:
            pulumi.set(__self__, "running", running)
        if terminated is not None:
            pulumi.set(__self__, "terminated", terminated)
        if waiting is not None:
            pulumi.set(__self__, "waiting", waiting)

    @property
    @pulumi.getter
    def running(self) -> Optional['outputs.OperatorStatusInitContainerStatusesStateRunning']:
        """
        Details about a running container
        """
        return pulumi.get(self, "running")

    @property
    @pulumi.getter
    def terminated(self) -> Optional['outputs.OperatorStatusInitContainerStatusesStateTerminated']:
        """
        Details about a terminated container
        """
        return pulumi.get(self, "terminated")

    @property
    @pulumi.getter
    def waiting(self) -> Optional['outputs.OperatorStatusInitContainerStatusesStateWaiting']:
        """
        Details about a waiting container
        """
        return pulumi.get(self, "waiting")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OperatorStatusInitContainerStatusesStateRunning(dict):
    """
    Details about a running container
    """
    def __init__(__self__, *,
                 started_at: Optional[str] = None):
        """
        Details about a running container
        :param str started_at: Time at which the container was last (re-)started
        """
        if started_at is not None:
            pulumi.set(__self__, "started_at", started_at)

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> Optional[str]:
        """
        Time at which the container was last (re-)started
        """
        return pulumi.get(self, "started_at")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OperatorStatusInitContainerStatusesStateTerminated(dict):
    """
    Details about a terminated container
    """
    def __init__(__self__, *,
                 exit_code: int,
                 container_id: Optional[str] = None,
                 finished_at: Optional[str] = None,
                 message: Optional[str] = None,
                 reason: Optional[str] = None,
                 signal: Optional[int] = None,
                 started_at: Optional[str] = None):
        """
        Details about a terminated container
        :param int exit_code: Exit status from the last termination of the container
        :param str container_id: Container's ID in the format 'docker://<container_id>'
        :param str finished_at: Time at which the container last terminated
        :param str message: Message regarding the last termination of the container
        :param str reason: (brief) reason from the last termination of the container
        :param int signal: Signal from the last termination of the container
        :param str started_at: Time at which previous execution of the container started
        """
        pulumi.set(__self__, "exit_code", exit_code)
        if container_id is not None:
            pulumi.set(__self__, "container_id", container_id)
        if finished_at is not None:
            pulumi.set(__self__, "finished_at", finished_at)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if signal is not None:
            pulumi.set(__self__, "signal", signal)
        if started_at is not None:
            pulumi.set(__self__, "started_at", started_at)

    @property
    @pulumi.getter(name="exitCode")
    def exit_code(self) -> int:
        """
        Exit status from the last termination of the container
        """
        return pulumi.get(self, "exit_code")

    @property
    @pulumi.getter(name="containerID")
    def container_id(self) -> Optional[str]:
        """
        Container's ID in the format 'docker://<container_id>'
        """
        return pulumi.get(self, "container_id")

    @property
    @pulumi.getter(name="finishedAt")
    def finished_at(self) -> Optional[str]:
        """
        Time at which the container last terminated
        """
        return pulumi.get(self, "finished_at")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Message regarding the last termination of the container
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        (brief) reason from the last termination of the container
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def signal(self) -> Optional[int]:
        """
        Signal from the last termination of the container
        """
        return pulumi.get(self, "signal")

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> Optional[str]:
        """
        Time at which previous execution of the container started
        """
        return pulumi.get(self, "started_at")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OperatorStatusInitContainerStatusesStateWaiting(dict):
    """
    Details about a waiting container
    """
    def __init__(__self__, *,
                 message: Optional[str] = None,
                 reason: Optional[str] = None):
        """
        Details about a waiting container
        :param str message: Message regarding why the container is not yet running.
        :param str reason: (brief) reason the container is not yet running.
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Message regarding why the container is not yet running.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        (brief) reason the container is not yet running.
        """
        return pulumi.get(self, "reason")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OperatorStatusPodIPs(dict):
    """
    IP address information for entries in the (plural) PodIPs field. Each entry includes:    IP: An IP address allocated to the pod. Routable at least within the cluster.
    """
    def __init__(__self__, *,
                 ip: Optional[str] = None):
        """
        IP address information for entries in the (plural) PodIPs field. Each entry includes:    IP: An IP address allocated to the pod. Routable at least within the cluster.
        :param str ip: ip is an IP address (IPv4 or IPv6) assigned to the pod
        """
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        ip is an IP address (IPv4 or IPv6) assigned to the pod
        """
        return pulumi.get(self, "ip")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



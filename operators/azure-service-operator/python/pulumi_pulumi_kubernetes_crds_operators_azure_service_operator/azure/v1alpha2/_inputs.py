# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'BlobContainerSpecArgs',
    'BlobContainerStatusArgs',
    'MySQLServerSpecArgs',
    'MySQLServerSpecReplicaPropertiesArgs',
    'MySQLServerSpecSkuArgs',
    'MySQLServerSpecStorageProfileArgs',
    'MySQLServerStatusArgs',
    'PostgreSQLServerSpecArgs',
    'PostgreSQLServerSpecReplicaPropertiesArgs',
    'PostgreSQLServerSpecSkuArgs',
    'PostgreSQLServerSpecStorageProfileArgs',
    'PostgreSQLServerStatusArgs',
]

@pulumi.input_type
class BlobContainerSpecArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[str],
                 resource_group: pulumi.Input[str],
                 access_level: Optional[pulumi.Input[str]] = None,
                 account_name: Optional[pulumi.Input[str]] = None):
        """
        BlobContainerSpec defines the desired state of BlobContainer
        :param pulumi.Input[str] location: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        :param pulumi.Input[str] access_level: PublicAccess enumerates the values for public access.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_group", resource_group)
        if access_level is not None:
            pulumi.set(__self__, "access_level", access_level)
        if account_name is not None:
            pulumi.set(__self__, "account_name", account_name)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> Optional[pulumi.Input[str]]:
        """
        PublicAccess enumerates the values for public access.
        """
        return pulumi.get(self, "access_level")

    @access_level.setter
    def access_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_level", value)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_name", value)


@pulumi.input_type
class BlobContainerStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class MySQLServerSpecArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[str],
                 resource_group: pulumi.Input[str],
                 create_mode: Optional[pulumi.Input[str]] = None,
                 key_vault_to_store_secrets: Optional[pulumi.Input[str]] = None,
                 replica_properties: Optional[pulumi.Input['MySQLServerSpecReplicaPropertiesArgs']] = None,
                 server_version: Optional[pulumi.Input[str]] = None,
                 sku: Optional[pulumi.Input['MySQLServerSpecSkuArgs']] = None,
                 ssl_enforcement: Optional[pulumi.Input[str]] = None,
                 storage_profile: Optional[pulumi.Input['MySQLServerSpecStorageProfileArgs']] = None):
        """
        MySQLServerSpec defines the desired state of MySQLServer
        :param pulumi.Input[str] server_version: ServerVersion enumerates the values for server version.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_group", resource_group)
        if create_mode is not None:
            pulumi.set(__self__, "create_mode", create_mode)
        if key_vault_to_store_secrets is not None:
            pulumi.set(__self__, "key_vault_to_store_secrets", key_vault_to_store_secrets)
        if replica_properties is not None:
            pulumi.set(__self__, "replica_properties", replica_properties)
        if server_version is not None:
            pulumi.set(__self__, "server_version", server_version)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)
        if ssl_enforcement is not None:
            pulumi.set(__self__, "ssl_enforcement", ssl_enforcement)
        if storage_profile is not None:
            pulumi.set(__self__, "storage_profile", storage_profile)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="createMode")
    def create_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "create_mode")

    @create_mode.setter
    def create_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_mode", value)

    @property
    @pulumi.getter(name="keyVaultToStoreSecrets")
    def key_vault_to_store_secrets(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_vault_to_store_secrets")

    @key_vault_to_store_secrets.setter
    def key_vault_to_store_secrets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_vault_to_store_secrets", value)

    @property
    @pulumi.getter(name="replicaProperties")
    def replica_properties(self) -> Optional[pulumi.Input['MySQLServerSpecReplicaPropertiesArgs']]:
        return pulumi.get(self, "replica_properties")

    @replica_properties.setter
    def replica_properties(self, value: Optional[pulumi.Input['MySQLServerSpecReplicaPropertiesArgs']]):
        pulumi.set(self, "replica_properties", value)

    @property
    @pulumi.getter(name="serverVersion")
    def server_version(self) -> Optional[pulumi.Input[str]]:
        """
        ServerVersion enumerates the values for server version.
        """
        return pulumi.get(self, "server_version")

    @server_version.setter
    def server_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_version", value)

    @property
    @pulumi.getter
    def sku(self) -> Optional[pulumi.Input['MySQLServerSpecSkuArgs']]:
        return pulumi.get(self, "sku")

    @sku.setter
    def sku(self, value: Optional[pulumi.Input['MySQLServerSpecSkuArgs']]):
        pulumi.set(self, "sku", value)

    @property
    @pulumi.getter(name="sslEnforcement")
    def ssl_enforcement(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_enforcement")

    @ssl_enforcement.setter
    def ssl_enforcement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_enforcement", value)

    @property
    @pulumi.getter(name="storageProfile")
    def storage_profile(self) -> Optional[pulumi.Input['MySQLServerSpecStorageProfileArgs']]:
        return pulumi.get(self, "storage_profile")

    @storage_profile.setter
    def storage_profile(self, value: Optional[pulumi.Input['MySQLServerSpecStorageProfileArgs']]):
        pulumi.set(self, "storage_profile", value)


@pulumi.input_type
class MySQLServerSpecReplicaPropertiesArgs:
    def __init__(__self__, *,
                 source_server_id: Optional[pulumi.Input[str]] = None):
        if source_server_id is not None:
            pulumi.set(__self__, "source_server_id", source_server_id)

    @property
    @pulumi.getter(name="sourceServerId")
    def source_server_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_server_id")

    @source_server_id.setter
    def source_server_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_server_id", value)


@pulumi.input_type
class MySQLServerSpecSkuArgs:
    def __init__(__self__, *,
                 capacity: Optional[pulumi.Input[int]] = None,
                 family: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 tier: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] capacity: Capacity - The scale up/out capacity, representing server's compute units.
        :param pulumi.Input[str] family: Family - The family of hardware.
        :param pulumi.Input[str] name: Name - The name of the sku, typically, tier + family + cores, e.g. B_Gen4_1, GP_Gen5_8.
        :param pulumi.Input[str] size: Size - The size code, to be interpreted by resource as appropriate.
        :param pulumi.Input[str] tier: Tier - The tier of the particular SKU, e.g. Basic. Possible values include: 'Basic', 'GeneralPurpose', 'MemoryOptimized'
        """
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Capacity - The scale up/out capacity, representing server's compute units.
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter
    def family(self) -> Optional[pulumi.Input[str]]:
        """
        Family - The family of hardware.
        """
        return pulumi.get(self, "family")

    @family.setter
    def family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "family", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name - The name of the sku, typically, tier + family + cores, e.g. B_Gen4_1, GP_Gen5_8.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        """
        Size - The size code, to be interpreted by resource as appropriate.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def tier(self) -> Optional[pulumi.Input[str]]:
        """
        Tier - The tier of the particular SKU, e.g. Basic. Possible values include: 'Basic', 'GeneralPurpose', 'MemoryOptimized'
        """
        return pulumi.get(self, "tier")

    @tier.setter
    def tier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tier", value)


@pulumi.input_type
class MySQLServerSpecStorageProfileArgs:
    def __init__(__self__, *,
                 backup_retention_days: Optional[pulumi.Input[int]] = None,
                 geo_redundant_backup: Optional[pulumi.Input[str]] = None,
                 storage_autogrow: Optional[pulumi.Input[str]] = None,
                 storage_mb: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] backup_retention_days: BackupRetentionDays - Backup retention days for the server.
        :param pulumi.Input[str] geo_redundant_backup: GeoRedundantBackup - Enable Geo-redundant or not for server backup. Possible values include: 'Enabled', 'Disabled'
        :param pulumi.Input[str] storage_autogrow: StorageAutogrow - Enable Storage Auto Grow. Possible values include: 'StorageAutogrowEnabled', 'StorageAutogrowDisabled'
        :param pulumi.Input[int] storage_mb: StorageMB - Max storage allowed for a server.
        """
        if backup_retention_days is not None:
            pulumi.set(__self__, "backup_retention_days", backup_retention_days)
        if geo_redundant_backup is not None:
            pulumi.set(__self__, "geo_redundant_backup", geo_redundant_backup)
        if storage_autogrow is not None:
            pulumi.set(__self__, "storage_autogrow", storage_autogrow)
        if storage_mb is not None:
            pulumi.set(__self__, "storage_mb", storage_mb)

    @property
    @pulumi.getter(name="backupRetentionDays")
    def backup_retention_days(self) -> Optional[pulumi.Input[int]]:
        """
        BackupRetentionDays - Backup retention days for the server.
        """
        return pulumi.get(self, "backup_retention_days")

    @backup_retention_days.setter
    def backup_retention_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "backup_retention_days", value)

    @property
    @pulumi.getter(name="geoRedundantBackup")
    def geo_redundant_backup(self) -> Optional[pulumi.Input[str]]:
        """
        GeoRedundantBackup - Enable Geo-redundant or not for server backup. Possible values include: 'Enabled', 'Disabled'
        """
        return pulumi.get(self, "geo_redundant_backup")

    @geo_redundant_backup.setter
    def geo_redundant_backup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "geo_redundant_backup", value)

    @property
    @pulumi.getter(name="storageAutogrow")
    def storage_autogrow(self) -> Optional[pulumi.Input[str]]:
        """
        StorageAutogrow - Enable Storage Auto Grow. Possible values include: 'StorageAutogrowEnabled', 'StorageAutogrowDisabled'
        """
        return pulumi.get(self, "storage_autogrow")

    @storage_autogrow.setter
    def storage_autogrow(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_autogrow", value)

    @property
    @pulumi.getter(name="storageMB")
    def storage_mb(self) -> Optional[pulumi.Input[int]]:
        """
        StorageMB - Max storage allowed for a server.
        """
        return pulumi.get(self, "storage_mb")

    @storage_mb.setter
    def storage_mb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage_mb", value)


@pulumi.input_type
class MySQLServerStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class PostgreSQLServerSpecArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[str],
                 resource_group: pulumi.Input[str],
                 create_mode: Optional[pulumi.Input[str]] = None,
                 key_vault_to_store_secrets: Optional[pulumi.Input[str]] = None,
                 replica_properties: Optional[pulumi.Input['PostgreSQLServerSpecReplicaPropertiesArgs']] = None,
                 server_version: Optional[pulumi.Input[str]] = None,
                 sku: Optional[pulumi.Input['PostgreSQLServerSpecSkuArgs']] = None,
                 ssl_enforcement: Optional[pulumi.Input[str]] = None,
                 storage_profile: Optional[pulumi.Input['PostgreSQLServerSpecStorageProfileArgs']] = None):
        """
        PostgreSQLServerSpec defines the desired state of PostgreSQLServer
        :param pulumi.Input[str] server_version: ServerVersion enumerates the values for server version.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_group", resource_group)
        if create_mode is not None:
            pulumi.set(__self__, "create_mode", create_mode)
        if key_vault_to_store_secrets is not None:
            pulumi.set(__self__, "key_vault_to_store_secrets", key_vault_to_store_secrets)
        if replica_properties is not None:
            pulumi.set(__self__, "replica_properties", replica_properties)
        if server_version is not None:
            pulumi.set(__self__, "server_version", server_version)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)
        if ssl_enforcement is not None:
            pulumi.set(__self__, "ssl_enforcement", ssl_enforcement)
        if storage_profile is not None:
            pulumi.set(__self__, "storage_profile", storage_profile)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="createMode")
    def create_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "create_mode")

    @create_mode.setter
    def create_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_mode", value)

    @property
    @pulumi.getter(name="keyVaultToStoreSecrets")
    def key_vault_to_store_secrets(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_vault_to_store_secrets")

    @key_vault_to_store_secrets.setter
    def key_vault_to_store_secrets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_vault_to_store_secrets", value)

    @property
    @pulumi.getter(name="replicaProperties")
    def replica_properties(self) -> Optional[pulumi.Input['PostgreSQLServerSpecReplicaPropertiesArgs']]:
        return pulumi.get(self, "replica_properties")

    @replica_properties.setter
    def replica_properties(self, value: Optional[pulumi.Input['PostgreSQLServerSpecReplicaPropertiesArgs']]):
        pulumi.set(self, "replica_properties", value)

    @property
    @pulumi.getter(name="serverVersion")
    def server_version(self) -> Optional[pulumi.Input[str]]:
        """
        ServerVersion enumerates the values for server version.
        """
        return pulumi.get(self, "server_version")

    @server_version.setter
    def server_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_version", value)

    @property
    @pulumi.getter
    def sku(self) -> Optional[pulumi.Input['PostgreSQLServerSpecSkuArgs']]:
        return pulumi.get(self, "sku")

    @sku.setter
    def sku(self, value: Optional[pulumi.Input['PostgreSQLServerSpecSkuArgs']]):
        pulumi.set(self, "sku", value)

    @property
    @pulumi.getter(name="sslEnforcement")
    def ssl_enforcement(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_enforcement")

    @ssl_enforcement.setter
    def ssl_enforcement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_enforcement", value)

    @property
    @pulumi.getter(name="storageProfile")
    def storage_profile(self) -> Optional[pulumi.Input['PostgreSQLServerSpecStorageProfileArgs']]:
        return pulumi.get(self, "storage_profile")

    @storage_profile.setter
    def storage_profile(self, value: Optional[pulumi.Input['PostgreSQLServerSpecStorageProfileArgs']]):
        pulumi.set(self, "storage_profile", value)


@pulumi.input_type
class PostgreSQLServerSpecReplicaPropertiesArgs:
    def __init__(__self__, *,
                 source_server_id: Optional[pulumi.Input[str]] = None):
        if source_server_id is not None:
            pulumi.set(__self__, "source_server_id", source_server_id)

    @property
    @pulumi.getter(name="sourceServerId")
    def source_server_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_server_id")

    @source_server_id.setter
    def source_server_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_server_id", value)


@pulumi.input_type
class PostgreSQLServerSpecSkuArgs:
    def __init__(__self__, *,
                 capacity: Optional[pulumi.Input[int]] = None,
                 family: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 tier: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] capacity: Capacity - The scale up/out capacity, representing server's compute units.
        :param pulumi.Input[str] family: Family - The family of hardware.
        :param pulumi.Input[str] name: Name - The name of the sku, typically, tier + family + cores, e.g. B_Gen4_1, GP_Gen5_8.
        :param pulumi.Input[str] size: Size - The size code, to be interpreted by resource as appropriate.
        :param pulumi.Input[str] tier: Tier - The tier of the particular SKU, e.g. Basic. Possible values include: 'Basic', 'GeneralPurpose', 'MemoryOptimized'
        """
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Capacity - The scale up/out capacity, representing server's compute units.
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter
    def family(self) -> Optional[pulumi.Input[str]]:
        """
        Family - The family of hardware.
        """
        return pulumi.get(self, "family")

    @family.setter
    def family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "family", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name - The name of the sku, typically, tier + family + cores, e.g. B_Gen4_1, GP_Gen5_8.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        """
        Size - The size code, to be interpreted by resource as appropriate.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def tier(self) -> Optional[pulumi.Input[str]]:
        """
        Tier - The tier of the particular SKU, e.g. Basic. Possible values include: 'Basic', 'GeneralPurpose', 'MemoryOptimized'
        """
        return pulumi.get(self, "tier")

    @tier.setter
    def tier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tier", value)


@pulumi.input_type
class PostgreSQLServerSpecStorageProfileArgs:
    def __init__(__self__, *,
                 backup_retention_days: Optional[pulumi.Input[int]] = None,
                 geo_redundant_backup: Optional[pulumi.Input[str]] = None,
                 storage_autogrow: Optional[pulumi.Input[str]] = None,
                 storage_mb: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] backup_retention_days: BackupRetentionDays - Backup retention days for the server.
        :param pulumi.Input[str] geo_redundant_backup: GeoRedundantBackup - Enable Geo-redundant or not for server backup. Possible values include: 'Enabled', 'Disabled'
        :param pulumi.Input[str] storage_autogrow: StorageAutogrow - Enable Storage Auto Grow. Possible values include: 'StorageAutogrowEnabled', 'StorageAutogrowDisabled'
        :param pulumi.Input[int] storage_mb: StorageMB - Max storage allowed for a server.
        """
        if backup_retention_days is not None:
            pulumi.set(__self__, "backup_retention_days", backup_retention_days)
        if geo_redundant_backup is not None:
            pulumi.set(__self__, "geo_redundant_backup", geo_redundant_backup)
        if storage_autogrow is not None:
            pulumi.set(__self__, "storage_autogrow", storage_autogrow)
        if storage_mb is not None:
            pulumi.set(__self__, "storage_mb", storage_mb)

    @property
    @pulumi.getter(name="backupRetentionDays")
    def backup_retention_days(self) -> Optional[pulumi.Input[int]]:
        """
        BackupRetentionDays - Backup retention days for the server.
        """
        return pulumi.get(self, "backup_retention_days")

    @backup_retention_days.setter
    def backup_retention_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "backup_retention_days", value)

    @property
    @pulumi.getter(name="geoRedundantBackup")
    def geo_redundant_backup(self) -> Optional[pulumi.Input[str]]:
        """
        GeoRedundantBackup - Enable Geo-redundant or not for server backup. Possible values include: 'Enabled', 'Disabled'
        """
        return pulumi.get(self, "geo_redundant_backup")

    @geo_redundant_backup.setter
    def geo_redundant_backup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "geo_redundant_backup", value)

    @property
    @pulumi.getter(name="storageAutogrow")
    def storage_autogrow(self) -> Optional[pulumi.Input[str]]:
        """
        StorageAutogrow - Enable Storage Auto Grow. Possible values include: 'StorageAutogrowEnabled', 'StorageAutogrowDisabled'
        """
        return pulumi.get(self, "storage_autogrow")

    @storage_autogrow.setter
    def storage_autogrow(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_autogrow", value)

    @property
    @pulumi.getter(name="storageMB")
    def storage_mb(self) -> Optional[pulumi.Input[int]]:
        """
        StorageMB - Max storage allowed for a server.
        """
        return pulumi.get(self, "storage_mb")

    @storage_mb.setter
    def storage_mb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage_mb", value)


@pulumi.input_type
class PostgreSQLServerStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)



# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'APIMgmtAPISpecArgs',
    'APIMgmtAPISpecPropertiesArgs',
    'APIMgmtAPISpecPropertiesApiVersionSetsArgs',
    'APIMgmtAPIStatusArgs',
    'ApimServiceSpecArgs',
    'ApimServiceStatusArgs',
    'AppInsightsApiKeySpecArgs',
    'AppInsightsApiKeyStatusArgs',
    'AppInsightsSpecArgs',
    'AppInsightsStatusArgs',
    'AzureLoadBalancerSpecArgs',
    'AzureLoadBalancerStatusArgs',
    'AzureNetworkInterfaceSpecArgs',
    'AzureNetworkInterfaceStatusArgs',
    'AzurePublicIPAddressSpecArgs',
    'AzurePublicIPAddressStatusArgs',
    'AzureSQLManagedUserSpecArgs',
    'AzureSQLManagedUserStatusArgs',
    'AzureSQLUserSpecArgs',
    'AzureSQLUserStatusArgs',
    'AzureSQLVNetRuleSpecArgs',
    'AzureSQLVNetRuleStatusArgs',
    'AzureSqlActionSpecArgs',
    'AzureSqlActionStatusArgs',
    'AzureSqlDatabaseSpecArgs',
    'AzureSqlDatabaseStatusArgs',
    'AzureSqlFailoverGroupSpecArgs',
    'AzureSqlFailoverGroupStatusArgs',
    'AzureSqlFirewallRuleSpecArgs',
    'AzureSqlFirewallRuleStatusArgs',
    'AzureSqlServerSpecArgs',
    'AzureSqlServerStatusArgs',
    'AzureVMScaleSetSpecArgs',
    'AzureVMScaleSetStatusArgs',
    'AzureVirtualMachineExtensionSpecArgs',
    'AzureVirtualMachineExtensionStatusArgs',
    'AzureVirtualMachineSpecArgs',
    'AzureVirtualMachineStatusArgs',
    'BlobContainerSpecArgs',
    'BlobContainerStatusArgs',
    'ConsumerGroupSpecArgs',
    'ConsumerGroupStatusArgs',
    'CosmosDBSpecArgs',
    'CosmosDBSpecLocationsArgs',
    'CosmosDBSpecPropertiesArgs',
    'CosmosDBSpecPropertiesCapabilitiesArgs',
    'CosmosDBSpecVirtualNetworkRulesArgs',
    'CosmosDBStatusArgs',
    'EventhubNamespaceSpecArgs',
    'EventhubNamespaceSpecNetworkRuleArgs',
    'EventhubNamespaceSpecNetworkRuleIpRulesArgs',
    'EventhubNamespaceSpecNetworkRuleVirtualNetworkRulesArgs',
    'EventhubNamespaceSpecPropertiesArgs',
    'EventhubNamespaceSpecSkuArgs',
    'EventhubNamespaceStatusArgs',
    'EventhubSpecArgs',
    'EventhubSpecAuthorizationRuleArgs',
    'EventhubSpecPropertiesArgs',
    'EventhubSpecPropertiesCaptureDescriptionArgs',
    'EventhubSpecPropertiesCaptureDescriptionDestinationArgs',
    'EventhubSpecPropertiesCaptureDescriptionDestinationStorageAccountArgs',
    'EventhubStatusArgs',
    'KeyVaultKeySpecArgs',
    'KeyVaultKeyStatusArgs',
    'KeyVaultSpecArgs',
    'KeyVaultSpecAccessPoliciesArgs',
    'KeyVaultSpecAccessPoliciesPermissionsArgs',
    'KeyVaultSpecNetworkPoliciesArgs',
    'KeyVaultSpecSkuArgs',
    'KeyVaultStatusArgs',
    'MySQLDatabaseSpecArgs',
    'MySQLDatabaseStatusArgs',
    'MySQLFirewallRuleSpecArgs',
    'MySQLFirewallRuleStatusArgs',
    'MySQLServerSpecArgs',
    'MySQLServerSpecReplicaPropertiesArgs',
    'MySQLServerSpecSkuArgs',
    'MySQLServerStatusArgs',
    'MySQLUserSpecArgs',
    'MySQLUserStatusArgs',
    'MySQLVNetRuleSpecArgs',
    'MySQLVNetRuleStatusArgs',
    'PostgreSQLDatabaseSpecArgs',
    'PostgreSQLDatabaseStatusArgs',
    'PostgreSQLFirewallRuleSpecArgs',
    'PostgreSQLFirewallRuleStatusArgs',
    'PostgreSQLServerSpecArgs',
    'PostgreSQLServerSpecReplicaPropertiesArgs',
    'PostgreSQLServerSpecSkuArgs',
    'PostgreSQLServerStatusArgs',
    'PostgreSQLUserSpecArgs',
    'PostgreSQLUserStatusArgs',
    'PostgreSQLVNetRuleSpecArgs',
    'PostgreSQLVNetRuleStatusArgs',
    'RedisCacheActionSpecArgs',
    'RedisCacheActionStatusArgs',
    'RedisCacheFirewallRuleSpecArgs',
    'RedisCacheFirewallRuleSpecPropertiesArgs',
    'RedisCacheFirewallRuleStatusArgs',
    'RedisCacheSpecArgs',
    'RedisCacheSpecPropertiesArgs',
    'RedisCacheSpecPropertiesSkuArgs',
    'RedisCacheStatusArgs',
    'ResourceGroupSpecArgs',
    'ResourceGroupStatusArgs',
    'StorageAccountAdditionalResourcesArgs',
    'StorageAccountOutputArgs',
    'StorageAccountSpecArgs',
    'StorageAccountSpecNetworkRuleArgs',
    'StorageAccountSpecNetworkRuleIpRulesArgs',
    'StorageAccountSpecNetworkRuleVirtualNetworkRulesArgs',
    'StorageAccountSpecSkuArgs',
    'StorageAccountStatusArgs',
    'VirtualNetworkSpecArgs',
    'VirtualNetworkSpecSubnetsArgs',
    'VirtualNetworkStatusArgs',
]

@pulumi.input_type
class APIMgmtAPISpecArgs:
    def __init__(__self__, *,
                 api_id: pulumi.Input[str],
                 api_service: pulumi.Input[str],
                 location: pulumi.Input[str],
                 properties: pulumi.Input['APIMgmtAPISpecPropertiesArgs'],
                 resource_group: pulumi.Input[str]):
        """
        APIMgmtSpec defines the desired state of APIMgmt
        """
        pulumi.set(__self__, "api_id", api_id)
        pulumi.set(__self__, "api_service", api_service)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "resource_group", resource_group)

    @property
    @pulumi.getter(name="apiId")
    def api_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_id")

    @api_id.setter
    def api_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_id", value)

    @property
    @pulumi.getter(name="apiService")
    def api_service(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_service")

    @api_service.setter
    def api_service(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_service", value)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def properties(self) -> pulumi.Input['APIMgmtAPISpecPropertiesArgs']:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: pulumi.Input['APIMgmtAPISpecPropertiesArgs']):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)


@pulumi.input_type
class APIMgmtAPISpecPropertiesArgs:
    def __init__(__self__, *,
                 api_revision: Optional[pulumi.Input[str]] = None,
                 api_revision_description: Optional[pulumi.Input[str]] = None,
                 api_version: Optional[pulumi.Input[str]] = None,
                 api_version_description: Optional[pulumi.Input[str]] = None,
                 api_version_set_id: Optional[pulumi.Input[str]] = None,
                 api_version_sets: Optional[pulumi.Input['APIMgmtAPISpecPropertiesApiVersionSetsArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 is_current: Optional[pulumi.Input[bool]] = None,
                 is_online: Optional[pulumi.Input[bool]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service_url: Optional[pulumi.Input[str]] = None,
                 source_api_id: Optional[pulumi.Input[str]] = None,
                 subscription_required: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] api_revision: APIRevision - Describes the Revision of the Api. If no value is provided, default revision 1 is created
        :param pulumi.Input[str] api_revision_description: APIRevisionDescription - Description of the Api Revision.
        :param pulumi.Input[str] api_version: APIVersion - Indicates the Version identifier of the API if the API is versioned
        :param pulumi.Input[str] api_version_description: APIVersionDescription - Description of the Api Version.
        :param pulumi.Input[str] api_version_set_id: APIVersionSetID - A resource identifier for the related ApiVersionSet.
        :param pulumi.Input['APIMgmtAPISpecPropertiesApiVersionSetsArgs'] api_version_sets: APIVersionSet - APIVersionSetContractDetails an API Version Set contains the common configuration for a set of API versions.
        :param pulumi.Input[str] description: Description - Description of the API. May include HTML formatting tags.
        :param pulumi.Input[str] display_name: DisplayName - API name. Must be 1 to 300 characters long.
        :param pulumi.Input[str] format:  Format - Format of the Content in which the API is getting imported. Possible values include: 	'WadlXML', 'WadlLinkJSON', 'SwaggerJSON', 'SwaggerLinkJSON', 'Wsdl', 'WsdlLink', 'Openapi', 'Openapijson', 'OpenapiLink'
        :param pulumi.Input[bool] is_current: IsCurrent - Indicates if API revision is current api revision.
        :param pulumi.Input[bool] is_online: IsOnline - READ-ONLY; Indicates if API revision is accessible via the gateway.
        :param pulumi.Input[str] path:  Path - Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. 	It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protocols: Protocols - Describes on which protocols the operations in this API can be invoked.
        :param pulumi.Input[str] service_url: ServiceURL - Absolute URL of the backend service implementing this API. Cannot be more than 2000 characters long.
        :param pulumi.Input[str] source_api_id: SourceAPIID - API identifier of the source API.
        :param pulumi.Input[bool] subscription_required: SubscriptionRequired - Specifies whether an API or Product subscription is required for accessing the API.
        """
        if api_revision is not None:
            pulumi.set(__self__, "api_revision", api_revision)
        if api_revision_description is not None:
            pulumi.set(__self__, "api_revision_description", api_revision_description)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if api_version_description is not None:
            pulumi.set(__self__, "api_version_description", api_version_description)
        if api_version_set_id is not None:
            pulumi.set(__self__, "api_version_set_id", api_version_set_id)
        if api_version_sets is not None:
            pulumi.set(__self__, "api_version_sets", api_version_sets)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if is_current is not None:
            pulumi.set(__self__, "is_current", is_current)
        if is_online is not None:
            pulumi.set(__self__, "is_online", is_online)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if service_url is not None:
            pulumi.set(__self__, "service_url", service_url)
        if source_api_id is not None:
            pulumi.set(__self__, "source_api_id", source_api_id)
        if subscription_required is not None:
            pulumi.set(__self__, "subscription_required", subscription_required)

    @property
    @pulumi.getter(name="apiRevision")
    def api_revision(self) -> Optional[pulumi.Input[str]]:
        """
        APIRevision - Describes the Revision of the Api. If no value is provided, default revision 1 is created
        """
        return pulumi.get(self, "api_revision")

    @api_revision.setter
    def api_revision(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_revision", value)

    @property
    @pulumi.getter(name="apiRevisionDescription")
    def api_revision_description(self) -> Optional[pulumi.Input[str]]:
        """
        APIRevisionDescription - Description of the Api Revision.
        """
        return pulumi.get(self, "api_revision_description")

    @api_revision_description.setter
    def api_revision_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_revision_description", value)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        APIVersion - Indicates the Version identifier of the API if the API is versioned
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter(name="apiVersionDescription")
    def api_version_description(self) -> Optional[pulumi.Input[str]]:
        """
        APIVersionDescription - Description of the Api Version.
        """
        return pulumi.get(self, "api_version_description")

    @api_version_description.setter
    def api_version_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version_description", value)

    @property
    @pulumi.getter(name="apiVersionSetId")
    def api_version_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        APIVersionSetID - A resource identifier for the related ApiVersionSet.
        """
        return pulumi.get(self, "api_version_set_id")

    @api_version_set_id.setter
    def api_version_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version_set_id", value)

    @property
    @pulumi.getter(name="apiVersionSets")
    def api_version_sets(self) -> Optional[pulumi.Input['APIMgmtAPISpecPropertiesApiVersionSetsArgs']]:
        """
        APIVersionSet - APIVersionSetContractDetails an API Version Set contains the common configuration for a set of API versions.
        """
        return pulumi.get(self, "api_version_sets")

    @api_version_sets.setter
    def api_version_sets(self, value: Optional[pulumi.Input['APIMgmtAPISpecPropertiesApiVersionSetsArgs']]):
        pulumi.set(self, "api_version_sets", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description - Description of the API. May include HTML formatting tags.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        DisplayName - API name. Must be 1 to 300 characters long.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
         Format - Format of the Content in which the API is getting imported. Possible values include: 	'WadlXML', 'WadlLinkJSON', 'SwaggerJSON', 'SwaggerLinkJSON', 'Wsdl', 'WsdlLink', 'Openapi', 'Openapijson', 'OpenapiLink'
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="isCurrent")
    def is_current(self) -> Optional[pulumi.Input[bool]]:
        """
        IsCurrent - Indicates if API revision is current api revision.
        """
        return pulumi.get(self, "is_current")

    @is_current.setter
    def is_current(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_current", value)

    @property
    @pulumi.getter(name="isOnline")
    def is_online(self) -> Optional[pulumi.Input[bool]]:
        """
        IsOnline - READ-ONLY; Indicates if API revision is accessible via the gateway.
        """
        return pulumi.get(self, "is_online")

    @is_online.setter
    def is_online(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_online", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
         Path - Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. 	It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def protocols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Protocols - Describes on which protocols the operations in this API can be invoked.
        """
        return pulumi.get(self, "protocols")

    @protocols.setter
    def protocols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "protocols", value)

    @property
    @pulumi.getter(name="serviceUrl")
    def service_url(self) -> Optional[pulumi.Input[str]]:
        """
        ServiceURL - Absolute URL of the backend service implementing this API. Cannot be more than 2000 characters long.
        """
        return pulumi.get(self, "service_url")

    @service_url.setter
    def service_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_url", value)

    @property
    @pulumi.getter(name="sourceApiId")
    def source_api_id(self) -> Optional[pulumi.Input[str]]:
        """
        SourceAPIID - API identifier of the source API.
        """
        return pulumi.get(self, "source_api_id")

    @source_api_id.setter
    def source_api_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_api_id", value)

    @property
    @pulumi.getter(name="subscriptionRequired")
    def subscription_required(self) -> Optional[pulumi.Input[bool]]:
        """
        SubscriptionRequired - Specifies whether an API or Product subscription is required for accessing the API.
        """
        return pulumi.get(self, "subscription_required")

    @subscription_required.setter
    def subscription_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "subscription_required", value)


@pulumi.input_type
class APIMgmtAPISpecPropertiesApiVersionSetsArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        APIVersionSet - APIVersionSetContractDetails an API Version Set contains the common configuration for a set of API versions.
        :param pulumi.Input[str] description: Description - Description of API Version Set.
        :param pulumi.Input[str] id: ID - Identifier for existing API Version Set. Omit this value to create a new Version Set.
        :param pulumi.Input[str] name: Name - The display Name of the API Version Set.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description - Description of API Version Set.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        ID - Identifier for existing API Version Set. Omit this value to create a new Version Set.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name - The display Name of the API Version Set.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class APIMgmtAPIStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class ApimServiceSpecArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[str],
                 publisher_email: pulumi.Input[str],
                 publisher_name: pulumi.Input[str],
                 resource_group: pulumi.Input[str],
                 vnet_resource_group: pulumi.Input[str],
                 app_insights_name: Optional[pulumi.Input[str]] = None,
                 app_insights_resource_group: Optional[pulumi.Input[str]] = None,
                 tier: Optional[pulumi.Input[str]] = None,
                 vnet_name: Optional[pulumi.Input[str]] = None,
                 vnet_subnet_name: Optional[pulumi.Input[str]] = None,
                 vnet_type: Optional[pulumi.Input[str]] = None):
        """
        ApimServiceSpec defines the desired state of ApimService
        :param pulumi.Input[str] tier: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "publisher_email", publisher_email)
        pulumi.set(__self__, "publisher_name", publisher_name)
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "vnet_resource_group", vnet_resource_group)
        if app_insights_name is not None:
            pulumi.set(__self__, "app_insights_name", app_insights_name)
        if app_insights_resource_group is not None:
            pulumi.set(__self__, "app_insights_resource_group", app_insights_resource_group)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)
        if vnet_name is not None:
            pulumi.set(__self__, "vnet_name", vnet_name)
        if vnet_subnet_name is not None:
            pulumi.set(__self__, "vnet_subnet_name", vnet_subnet_name)
        if vnet_type is not None:
            pulumi.set(__self__, "vnet_type", vnet_type)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="publisherEmail")
    def publisher_email(self) -> pulumi.Input[str]:
        return pulumi.get(self, "publisher_email")

    @publisher_email.setter
    def publisher_email(self, value: pulumi.Input[str]):
        pulumi.set(self, "publisher_email", value)

    @property
    @pulumi.getter(name="publisherName")
    def publisher_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "publisher_name")

    @publisher_name.setter
    def publisher_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "publisher_name", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="vnetResourceGroup")
    def vnet_resource_group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vnet_resource_group")

    @vnet_resource_group.setter
    def vnet_resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "vnet_resource_group", value)

    @property
    @pulumi.getter(name="appInsightsName")
    def app_insights_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app_insights_name")

    @app_insights_name.setter
    def app_insights_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_insights_name", value)

    @property
    @pulumi.getter(name="appInsightsResourceGroup")
    def app_insights_resource_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app_insights_resource_group")

    @app_insights_resource_group.setter
    def app_insights_resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_insights_resource_group", value)

    @property
    @pulumi.getter
    def tier(self) -> Optional[pulumi.Input[str]]:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "tier")

    @tier.setter
    def tier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tier", value)

    @property
    @pulumi.getter(name="vnetName")
    def vnet_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vnet_name")

    @vnet_name.setter
    def vnet_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vnet_name", value)

    @property
    @pulumi.getter(name="vnetSubnetName")
    def vnet_subnet_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vnet_subnet_name")

    @vnet_subnet_name.setter
    def vnet_subnet_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vnet_subnet_name", value)

    @property
    @pulumi.getter(name="vnetType")
    def vnet_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vnet_type")

    @vnet_type.setter
    def vnet_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vnet_type", value)


@pulumi.input_type
class ApimServiceStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class AppInsightsApiKeySpecArgs:
    def __init__(__self__, *,
                 app_insights: pulumi.Input[str],
                 resource_group: pulumi.Input[str],
                 auth_sdk_control_channel: Optional[pulumi.Input[bool]] = None,
                 read_telemetry: Optional[pulumi.Input[bool]] = None,
                 write_annotations: Optional[pulumi.Input[bool]] = None):
        """
        AppInsightsApiKeySpec defines the desired state of AppInsightsApiKey
        """
        pulumi.set(__self__, "app_insights", app_insights)
        pulumi.set(__self__, "resource_group", resource_group)
        if auth_sdk_control_channel is not None:
            pulumi.set(__self__, "auth_sdk_control_channel", auth_sdk_control_channel)
        if read_telemetry is not None:
            pulumi.set(__self__, "read_telemetry", read_telemetry)
        if write_annotations is not None:
            pulumi.set(__self__, "write_annotations", write_annotations)

    @property
    @pulumi.getter(name="appInsights")
    def app_insights(self) -> pulumi.Input[str]:
        return pulumi.get(self, "app_insights")

    @app_insights.setter
    def app_insights(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_insights", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="authSDKControlChannel")
    def auth_sdk_control_channel(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "auth_sdk_control_channel")

    @auth_sdk_control_channel.setter
    def auth_sdk_control_channel(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auth_sdk_control_channel", value)

    @property
    @pulumi.getter(name="readTelemetry")
    def read_telemetry(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "read_telemetry")

    @read_telemetry.setter
    def read_telemetry(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_telemetry", value)

    @property
    @pulumi.getter(name="writeAnnotations")
    def write_annotations(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "write_annotations")

    @write_annotations.setter
    def write_annotations(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "write_annotations", value)


@pulumi.input_type
class AppInsightsApiKeyStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class AppInsightsSpecArgs:
    def __init__(__self__, *,
                 application_type: pulumi.Input[str],
                 kind: pulumi.Input[str],
                 location: pulumi.Input[str],
                 resource_group: pulumi.Input[str],
                 key_vault_to_store_secrets: Optional[pulumi.Input[str]] = None):
        """
        AppInsightsSpec defines the desired state of AppInsights
        """
        pulumi.set(__self__, "application_type", application_type)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_group", resource_group)
        if key_vault_to_store_secrets is not None:
            pulumi.set(__self__, "key_vault_to_store_secrets", key_vault_to_store_secrets)

    @property
    @pulumi.getter(name="applicationType")
    def application_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "application_type")

    @application_type.setter
    def application_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "application_type", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="keyVaultToStoreSecrets")
    def key_vault_to_store_secrets(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_vault_to_store_secrets")

    @key_vault_to_store_secrets.setter
    def key_vault_to_store_secrets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_vault_to_store_secrets", value)


@pulumi.input_type
class AppInsightsStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class AzureLoadBalancerSpecArgs:
    def __init__(__self__, *,
                 backend_address_pool_name: pulumi.Input[str],
                 backend_port: pulumi.Input[int],
                 frontend_port_range_end: pulumi.Input[int],
                 frontend_port_range_start: pulumi.Input[int],
                 inbound_nat_pool_name: pulumi.Input[str],
                 location: pulumi.Input[str],
                 public_ip_address_name: pulumi.Input[str],
                 resource_group: pulumi.Input[str]):
        """
        AzureLoadBalancerSpec defines the desired state of AzureLoadBalancer
        :param pulumi.Input[str] location: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        pulumi.set(__self__, "backend_address_pool_name", backend_address_pool_name)
        pulumi.set(__self__, "backend_port", backend_port)
        pulumi.set(__self__, "frontend_port_range_end", frontend_port_range_end)
        pulumi.set(__self__, "frontend_port_range_start", frontend_port_range_start)
        pulumi.set(__self__, "inbound_nat_pool_name", inbound_nat_pool_name)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "public_ip_address_name", public_ip_address_name)
        pulumi.set(__self__, "resource_group", resource_group)

    @property
    @pulumi.getter(name="backendAddressPoolName")
    def backend_address_pool_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "backend_address_pool_name")

    @backend_address_pool_name.setter
    def backend_address_pool_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "backend_address_pool_name", value)

    @property
    @pulumi.getter(name="backendPort")
    def backend_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "backend_port")

    @backend_port.setter
    def backend_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "backend_port", value)

    @property
    @pulumi.getter(name="frontendPortRangeEnd")
    def frontend_port_range_end(self) -> pulumi.Input[int]:
        return pulumi.get(self, "frontend_port_range_end")

    @frontend_port_range_end.setter
    def frontend_port_range_end(self, value: pulumi.Input[int]):
        pulumi.set(self, "frontend_port_range_end", value)

    @property
    @pulumi.getter(name="frontendPortRangeStart")
    def frontend_port_range_start(self) -> pulumi.Input[int]:
        return pulumi.get(self, "frontend_port_range_start")

    @frontend_port_range_start.setter
    def frontend_port_range_start(self, value: pulumi.Input[int]):
        pulumi.set(self, "frontend_port_range_start", value)

    @property
    @pulumi.getter(name="inboundNatPoolName")
    def inbound_nat_pool_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "inbound_nat_pool_name")

    @inbound_nat_pool_name.setter
    def inbound_nat_pool_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "inbound_nat_pool_name", value)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="publicIPAddressName")
    def public_ip_address_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "public_ip_address_name")

    @public_ip_address_name.setter
    def public_ip_address_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "public_ip_address_name", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)


@pulumi.input_type
class AzureLoadBalancerStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class AzureNetworkInterfaceSpecArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[str],
                 public_ip_address_name: pulumi.Input[str],
                 resource_group: pulumi.Input[str],
                 subnet_name: pulumi.Input[str],
                 vnet_name: pulumi.Input[str]):
        """
        AzureNetworkInterfaceSpec defines the desired state of AzureNetworkInterface
        :param pulumi.Input[str] location: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "public_ip_address_name", public_ip_address_name)
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "subnet_name", subnet_name)
        pulumi.set(__self__, "vnet_name", vnet_name)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="publicIPAddressName")
    def public_ip_address_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "public_ip_address_name")

    @public_ip_address_name.setter
    def public_ip_address_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "public_ip_address_name", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="subnetName")
    def subnet_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "subnet_name")

    @subnet_name.setter
    def subnet_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_name", value)

    @property
    @pulumi.getter(name="vnetName")
    def vnet_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vnet_name")

    @vnet_name.setter
    def vnet_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "vnet_name", value)


@pulumi.input_type
class AzureNetworkInterfaceStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class AzurePublicIPAddressSpecArgs:
    def __init__(__self__, *,
                 idle_timeout_in_minutes: pulumi.Input[int],
                 location: pulumi.Input[str],
                 public_ip_address_version: pulumi.Input[str],
                 public_ip_allocation_method: pulumi.Input[str],
                 resource_group: pulumi.Input[str],
                 sku_name: pulumi.Input[str],
                 ip_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        AzurePublicIPAddressSpec defines the desired state of AzurePublicIPAddress
        """
        pulumi.set(__self__, "idle_timeout_in_minutes", idle_timeout_in_minutes)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "public_ip_address_version", public_ip_address_version)
        pulumi.set(__self__, "public_ip_allocation_method", public_ip_allocation_method)
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "sku_name", sku_name)
        if ip_tags is not None:
            pulumi.set(__self__, "ip_tags", ip_tags)

    @property
    @pulumi.getter(name="idleTimeoutInMinutes")
    def idle_timeout_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "idle_timeout_in_minutes")

    @idle_timeout_in_minutes.setter
    def idle_timeout_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "idle_timeout_in_minutes", value)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="publicIPAddressVersion")
    def public_ip_address_version(self) -> pulumi.Input[str]:
        return pulumi.get(self, "public_ip_address_version")

    @public_ip_address_version.setter
    def public_ip_address_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "public_ip_address_version", value)

    @property
    @pulumi.getter(name="publicIPAllocationMethod")
    def public_ip_allocation_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "public_ip_allocation_method")

    @public_ip_allocation_method.setter
    def public_ip_allocation_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "public_ip_allocation_method", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="skuName")
    def sku_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sku_name")

    @sku_name.setter
    def sku_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "sku_name", value)

    @property
    @pulumi.getter(name="ipTags")
    def ip_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_tags")

    @ip_tags.setter
    def ip_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "ip_tags", value)


@pulumi.input_type
class AzurePublicIPAddressStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class AzureSQLManagedUserSpecArgs:
    def __init__(__self__, *,
                 db_name: pulumi.Input[str],
                 managed_identity_client_id: pulumi.Input[str],
                 resource_group: pulumi.Input[str],
                 roles: pulumi.Input[Sequence[pulumi.Input[str]]],
                 server: pulumi.Input[str],
                 key_vault_secret_prefix: Optional[pulumi.Input[str]] = None,
                 key_vault_to_store_secrets: Optional[pulumi.Input[str]] = None,
                 managed_identity_name: Optional[pulumi.Input[str]] = None):
        """
        AzureSQLManagedUserSpec defines the desired state of AzureSQLManagedUser
        :param pulumi.Input[str] server: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        pulumi.set(__self__, "db_name", db_name)
        pulumi.set(__self__, "managed_identity_client_id", managed_identity_client_id)
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "server", server)
        if key_vault_secret_prefix is not None:
            pulumi.set(__self__, "key_vault_secret_prefix", key_vault_secret_prefix)
        if key_vault_to_store_secrets is not None:
            pulumi.set(__self__, "key_vault_to_store_secrets", key_vault_to_store_secrets)
        if managed_identity_name is not None:
            pulumi.set(__self__, "managed_identity_name", managed_identity_name)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "db_name")

    @db_name.setter
    def db_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "db_name", value)

    @property
    @pulumi.getter(name="managedIdentityClientId")
    def managed_identity_client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "managed_identity_client_id")

    @managed_identity_client_id.setter
    def managed_identity_client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "managed_identity_client_id", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter
    def roles(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter
    def server(self) -> pulumi.Input[str]:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input[str]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="keyVaultSecretPrefix")
    def key_vault_secret_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_vault_secret_prefix")

    @key_vault_secret_prefix.setter
    def key_vault_secret_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_vault_secret_prefix", value)

    @property
    @pulumi.getter(name="keyVaultToStoreSecrets")
    def key_vault_to_store_secrets(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_vault_to_store_secrets")

    @key_vault_to_store_secrets.setter
    def key_vault_to_store_secrets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_vault_to_store_secrets", value)

    @property
    @pulumi.getter(name="managedIdentityName")
    def managed_identity_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "managed_identity_name")

    @managed_identity_name.setter
    def managed_identity_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "managed_identity_name", value)


@pulumi.input_type
class AzureSQLManagedUserStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class AzureSQLUserSpecArgs:
    def __init__(__self__, *,
                 db_name: pulumi.Input[str],
                 resource_group: pulumi.Input[str],
                 roles: pulumi.Input[Sequence[pulumi.Input[str]]],
                 server: pulumi.Input[str],
                 admin_secret: Optional[pulumi.Input[str]] = None,
                 admin_secret_key_vault: Optional[pulumi.Input[str]] = None,
                 key_vault_secret_formats: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 key_vault_secret_prefix: Optional[pulumi.Input[str]] = None,
                 key_vault_to_store_secrets: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        AzureSQLUserSpec defines the desired state of SqlUser
        :param pulumi.Input[str] server: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        :param pulumi.Input[str] admin_secret: optional
        """
        pulumi.set(__self__, "db_name", db_name)
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "server", server)
        if admin_secret is not None:
            pulumi.set(__self__, "admin_secret", admin_secret)
        if admin_secret_key_vault is not None:
            pulumi.set(__self__, "admin_secret_key_vault", admin_secret_key_vault)
        if key_vault_secret_formats is not None:
            pulumi.set(__self__, "key_vault_secret_formats", key_vault_secret_formats)
        if key_vault_secret_prefix is not None:
            pulumi.set(__self__, "key_vault_secret_prefix", key_vault_secret_prefix)
        if key_vault_to_store_secrets is not None:
            pulumi.set(__self__, "key_vault_to_store_secrets", key_vault_to_store_secrets)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "db_name")

    @db_name.setter
    def db_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "db_name", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter
    def roles(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter
    def server(self) -> pulumi.Input[str]:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input[str]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="adminSecret")
    def admin_secret(self) -> Optional[pulumi.Input[str]]:
        """
        optional
        """
        return pulumi.get(self, "admin_secret")

    @admin_secret.setter
    def admin_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_secret", value)

    @property
    @pulumi.getter(name="adminSecretKeyVault")
    def admin_secret_key_vault(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_secret_key_vault")

    @admin_secret_key_vault.setter
    def admin_secret_key_vault(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_secret_key_vault", value)

    @property
    @pulumi.getter(name="keyVaultSecretFormats")
    def key_vault_secret_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "key_vault_secret_formats")

    @key_vault_secret_formats.setter
    def key_vault_secret_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "key_vault_secret_formats", value)

    @property
    @pulumi.getter(name="keyVaultSecretPrefix")
    def key_vault_secret_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_vault_secret_prefix")

    @key_vault_secret_prefix.setter
    def key_vault_secret_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_vault_secret_prefix", value)

    @property
    @pulumi.getter(name="keyVaultToStoreSecrets")
    def key_vault_to_store_secrets(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_vault_to_store_secrets")

    @key_vault_to_store_secrets.setter
    def key_vault_to_store_secrets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_vault_to_store_secrets", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class AzureSQLUserStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class AzureSQLVNetRuleSpecArgs:
    def __init__(__self__, *,
                 resource_group: pulumi.Input[str],
                 server: pulumi.Input[str],
                 subnet_name: pulumi.Input[str],
                 v_net_name: pulumi.Input[str],
                 v_net_resource_group: pulumi.Input[str],
                 ignore_missing_service_endpoint: Optional[pulumi.Input[bool]] = None):
        """
        NOTE: json tags are required.  Any new fields you add must have json tags for the fields to be serialized. AzureSQLVNetRuleSpec defines the desired state of AzureSQLVNetRule
        :param pulumi.Input[str] resource_group: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "server", server)
        pulumi.set(__self__, "subnet_name", subnet_name)
        pulumi.set(__self__, "v_net_name", v_net_name)
        pulumi.set(__self__, "v_net_resource_group", v_net_resource_group)
        if ignore_missing_service_endpoint is not None:
            pulumi.set(__self__, "ignore_missing_service_endpoint", ignore_missing_service_endpoint)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter
    def server(self) -> pulumi.Input[str]:
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input[str]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="subnetName")
    def subnet_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "subnet_name")

    @subnet_name.setter
    def subnet_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_name", value)

    @property
    @pulumi.getter(name="vNetName")
    def v_net_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "v_net_name")

    @v_net_name.setter
    def v_net_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "v_net_name", value)

    @property
    @pulumi.getter(name="vNetResourceGroup")
    def v_net_resource_group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "v_net_resource_group")

    @v_net_resource_group.setter
    def v_net_resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "v_net_resource_group", value)

    @property
    @pulumi.getter(name="ignoreMissingServiceEndpoint")
    def ignore_missing_service_endpoint(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ignore_missing_service_endpoint")

    @ignore_missing_service_endpoint.setter
    def ignore_missing_service_endpoint(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_missing_service_endpoint", value)


@pulumi.input_type
class AzureSQLVNetRuleStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class AzureSqlActionSpecArgs:
    def __init__(__self__, *,
                 action_name: pulumi.Input[str],
                 resource_group: pulumi.Input[str],
                 server_name: pulumi.Input[str],
                 db_name: Optional[pulumi.Input[str]] = None,
                 db_user: Optional[pulumi.Input[str]] = None,
                 server_admin_secret_name: Optional[pulumi.Input[str]] = None,
                 server_secret_key_vault: Optional[pulumi.Input[str]] = None,
                 user_secret_key_vault: Optional[pulumi.Input[str]] = None):
        """
        AzureSqlActionSpec defines the desired state of AzureSqlAction
        :param pulumi.Input[str] resource_group: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        pulumi.set(__self__, "action_name", action_name)
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "server_name", server_name)
        if db_name is not None:
            pulumi.set(__self__, "db_name", db_name)
        if db_user is not None:
            pulumi.set(__self__, "db_user", db_user)
        if server_admin_secret_name is not None:
            pulumi.set(__self__, "server_admin_secret_name", server_admin_secret_name)
        if server_secret_key_vault is not None:
            pulumi.set(__self__, "server_secret_key_vault", server_secret_key_vault)
        if user_secret_key_vault is not None:
            pulumi.set(__self__, "user_secret_key_vault", user_secret_key_vault)

    @property
    @pulumi.getter(name="actionName")
    def action_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "action_name")

    @action_name.setter
    def action_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "action_name", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "server_name")

    @server_name.setter
    def server_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "server_name", value)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "db_name")

    @db_name.setter
    def db_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_name", value)

    @property
    @pulumi.getter(name="dbUser")
    def db_user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "db_user")

    @db_user.setter
    def db_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_user", value)

    @property
    @pulumi.getter(name="serverAdminSecretName")
    def server_admin_secret_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_admin_secret_name")

    @server_admin_secret_name.setter
    def server_admin_secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_admin_secret_name", value)

    @property
    @pulumi.getter(name="serverSecretKeyVault")
    def server_secret_key_vault(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_secret_key_vault")

    @server_secret_key_vault.setter
    def server_secret_key_vault(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_secret_key_vault", value)

    @property
    @pulumi.getter(name="userSecretKeyVault")
    def user_secret_key_vault(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_secret_key_vault")

    @user_secret_key_vault.setter
    def user_secret_key_vault(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_secret_key_vault", value)


@pulumi.input_type
class AzureSqlActionStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class AzureSqlDatabaseSpecArgs:
    def __init__(__self__, *,
                 edition: pulumi.Input[int],
                 location: pulumi.Input[str],
                 resourcegroup: pulumi.Input[str],
                 server: pulumi.Input[str],
                 db_name: Optional[pulumi.Input[str]] = None):
        """
        AzureSqlDatabaseSpec defines the desired state of AzureSqlDatabase
        :param pulumi.Input[int] edition: DBEdition - wraps: https://godoc.org/github.com/Azure/azure-sdk-for-go/services/preview/sql/mgmt/v3.0/sql#DatabaseEdition
        :param pulumi.Input[str] location: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        :param pulumi.Input[str] db_name: optional
        """
        pulumi.set(__self__, "edition", edition)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resourcegroup", resourcegroup)
        pulumi.set(__self__, "server", server)
        if db_name is not None:
            pulumi.set(__self__, "db_name", db_name)

    @property
    @pulumi.getter
    def edition(self) -> pulumi.Input[int]:
        """
        DBEdition - wraps: https://godoc.org/github.com/Azure/azure-sdk-for-go/services/preview/sql/mgmt/v3.0/sql#DatabaseEdition
        """
        return pulumi.get(self, "edition")

    @edition.setter
    def edition(self, value: pulumi.Input[int]):
        pulumi.set(self, "edition", value)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def resourcegroup(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resourcegroup")

    @resourcegroup.setter
    def resourcegroup(self, value: pulumi.Input[str]):
        pulumi.set(self, "resourcegroup", value)

    @property
    @pulumi.getter
    def server(self) -> pulumi.Input[str]:
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input[str]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> Optional[pulumi.Input[str]]:
        """
        optional
        """
        return pulumi.get(self, "db_name")

    @db_name.setter
    def db_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_name", value)


@pulumi.input_type
class AzureSqlDatabaseStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class AzureSqlFailoverGroupSpecArgs:
    def __init__(__self__, *,
                 databaselist: pulumi.Input[Sequence[pulumi.Input[str]]],
                 failovergraceperiod: pulumi.Input[int],
                 failoverpolicy: pulumi.Input[str],
                 location: pulumi.Input[str],
                 resourcegroup: pulumi.Input[str],
                 secondaryserver: pulumi.Input[str],
                 secondaryserverresourcegroup: pulumi.Input[str],
                 server: pulumi.Input[str],
                 key_vault_to_store_secrets: Optional[pulumi.Input[str]] = None):
        """
        AzureSqlFailoverGroupSpec defines the desired state of AzureSqlFailoverGroup
        :param pulumi.Input[str] failoverpolicy: ReadWriteEndpointFailoverPolicy - wraps https://godoc.org/github.com/Azure/azure-sdk-for-go/services/preview/sql/mgmt/v3.0/sql#ReadWriteEndpointFailoverPolicy
        :param pulumi.Input[str] location: Important: Run "make" to regenerate code after modifying this file
        """
        pulumi.set(__self__, "databaselist", databaselist)
        pulumi.set(__self__, "failovergraceperiod", failovergraceperiod)
        pulumi.set(__self__, "failoverpolicy", failoverpolicy)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resourcegroup", resourcegroup)
        pulumi.set(__self__, "secondaryserver", secondaryserver)
        pulumi.set(__self__, "secondaryserverresourcegroup", secondaryserverresourcegroup)
        pulumi.set(__self__, "server", server)
        if key_vault_to_store_secrets is not None:
            pulumi.set(__self__, "key_vault_to_store_secrets", key_vault_to_store_secrets)

    @property
    @pulumi.getter
    def databaselist(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "databaselist")

    @databaselist.setter
    def databaselist(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "databaselist", value)

    @property
    @pulumi.getter
    def failovergraceperiod(self) -> pulumi.Input[int]:
        return pulumi.get(self, "failovergraceperiod")

    @failovergraceperiod.setter
    def failovergraceperiod(self, value: pulumi.Input[int]):
        pulumi.set(self, "failovergraceperiod", value)

    @property
    @pulumi.getter
    def failoverpolicy(self) -> pulumi.Input[str]:
        """
        ReadWriteEndpointFailoverPolicy - wraps https://godoc.org/github.com/Azure/azure-sdk-for-go/services/preview/sql/mgmt/v3.0/sql#ReadWriteEndpointFailoverPolicy
        """
        return pulumi.get(self, "failoverpolicy")

    @failoverpolicy.setter
    def failoverpolicy(self, value: pulumi.Input[str]):
        pulumi.set(self, "failoverpolicy", value)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def resourcegroup(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resourcegroup")

    @resourcegroup.setter
    def resourcegroup(self, value: pulumi.Input[str]):
        pulumi.set(self, "resourcegroup", value)

    @property
    @pulumi.getter
    def secondaryserver(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secondaryserver")

    @secondaryserver.setter
    def secondaryserver(self, value: pulumi.Input[str]):
        pulumi.set(self, "secondaryserver", value)

    @property
    @pulumi.getter
    def secondaryserverresourcegroup(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secondaryserverresourcegroup")

    @secondaryserverresourcegroup.setter
    def secondaryserverresourcegroup(self, value: pulumi.Input[str]):
        pulumi.set(self, "secondaryserverresourcegroup", value)

    @property
    @pulumi.getter
    def server(self) -> pulumi.Input[str]:
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input[str]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="keyVaultToStoreSecrets")
    def key_vault_to_store_secrets(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_vault_to_store_secrets")

    @key_vault_to_store_secrets.setter
    def key_vault_to_store_secrets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_vault_to_store_secrets", value)


@pulumi.input_type
class AzureSqlFailoverGroupStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class AzureSqlFirewallRuleSpecArgs:
    def __init__(__self__, *,
                 resourcegroup: pulumi.Input[str],
                 server: pulumi.Input[str],
                 endipaddress: Optional[pulumi.Input[str]] = None,
                 startipaddress: Optional[pulumi.Input[str]] = None):
        """
        AzureSqlFirewallRuleSpec defines the desired state of AzureSqlFirewallRule
        :param pulumi.Input[str] resourcegroup: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        pulumi.set(__self__, "resourcegroup", resourcegroup)
        pulumi.set(__self__, "server", server)
        if endipaddress is not None:
            pulumi.set(__self__, "endipaddress", endipaddress)
        if startipaddress is not None:
            pulumi.set(__self__, "startipaddress", startipaddress)

    @property
    @pulumi.getter
    def resourcegroup(self) -> pulumi.Input[str]:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "resourcegroup")

    @resourcegroup.setter
    def resourcegroup(self, value: pulumi.Input[str]):
        pulumi.set(self, "resourcegroup", value)

    @property
    @pulumi.getter
    def server(self) -> pulumi.Input[str]:
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input[str]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter
    def endipaddress(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "endipaddress")

    @endipaddress.setter
    def endipaddress(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endipaddress", value)

    @property
    @pulumi.getter
    def startipaddress(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "startipaddress")

    @startipaddress.setter
    def startipaddress(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "startipaddress", value)


@pulumi.input_type
class AzureSqlFirewallRuleStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class AzureSqlServerSpecArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[str],
                 resourcegroup: pulumi.Input[str],
                 key_vault_to_store_secrets: Optional[pulumi.Input[str]] = None):
        """
        AzureSqlServerSpec defines the desired state of AzureSqlServer
        :param pulumi.Input[str] location: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resourcegroup", resourcegroup)
        if key_vault_to_store_secrets is not None:
            pulumi.set(__self__, "key_vault_to_store_secrets", key_vault_to_store_secrets)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def resourcegroup(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resourcegroup")

    @resourcegroup.setter
    def resourcegroup(self, value: pulumi.Input[str]):
        pulumi.set(self, "resourcegroup", value)

    @property
    @pulumi.getter(name="keyVaultToStoreSecrets")
    def key_vault_to_store_secrets(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_vault_to_store_secrets")

    @key_vault_to_store_secrets.setter
    def key_vault_to_store_secrets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_vault_to_store_secrets", value)


@pulumi.input_type
class AzureSqlServerStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class AzureVMScaleSetSpecArgs:
    def __init__(__self__, *,
                 admin_user_name: pulumi.Input[str],
                 backend_address_pool_name: pulumi.Input[str],
                 capacity: pulumi.Input[int],
                 inbound_nat_pool_name: pulumi.Input[str],
                 load_balancer_name: pulumi.Input[str],
                 location: pulumi.Input[str],
                 os_type: pulumi.Input[str],
                 platform_image_urn: pulumi.Input[str],
                 resource_group: pulumi.Input[str],
                 subnet_name: pulumi.Input[str],
                 virtual_network_name: pulumi.Input[str],
                 vm_size: pulumi.Input[str],
                 ssh_public_key_data: Optional[pulumi.Input[str]] = None):
        """
        AzureVMScaleSetSpec defines the desired state of AzureVMScaleSet
        :param pulumi.Input[str] location: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        pulumi.set(__self__, "admin_user_name", admin_user_name)
        pulumi.set(__self__, "backend_address_pool_name", backend_address_pool_name)
        pulumi.set(__self__, "capacity", capacity)
        pulumi.set(__self__, "inbound_nat_pool_name", inbound_nat_pool_name)
        pulumi.set(__self__, "load_balancer_name", load_balancer_name)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "platform_image_urn", platform_image_urn)
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "subnet_name", subnet_name)
        pulumi.set(__self__, "virtual_network_name", virtual_network_name)
        pulumi.set(__self__, "vm_size", vm_size)
        if ssh_public_key_data is not None:
            pulumi.set(__self__, "ssh_public_key_data", ssh_public_key_data)

    @property
    @pulumi.getter(name="adminUserName")
    def admin_user_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "admin_user_name")

    @admin_user_name.setter
    def admin_user_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "admin_user_name", value)

    @property
    @pulumi.getter(name="backendAddressPoolName")
    def backend_address_pool_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "backend_address_pool_name")

    @backend_address_pool_name.setter
    def backend_address_pool_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "backend_address_pool_name", value)

    @property
    @pulumi.getter
    def capacity(self) -> pulumi.Input[int]:
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: pulumi.Input[int]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter(name="inboundNatPoolName")
    def inbound_nat_pool_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "inbound_nat_pool_name")

    @inbound_nat_pool_name.setter
    def inbound_nat_pool_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "inbound_nat_pool_name", value)

    @property
    @pulumi.getter(name="loadBalancerName")
    def load_balancer_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "load_balancer_name")

    @load_balancer_name.setter
    def load_balancer_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "load_balancer_name", value)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "os_type", value)

    @property
    @pulumi.getter(name="platformImageURN")
    def platform_image_urn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "platform_image_urn")

    @platform_image_urn.setter
    def platform_image_urn(self, value: pulumi.Input[str]):
        pulumi.set(self, "platform_image_urn", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="subnetName")
    def subnet_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "subnet_name")

    @subnet_name.setter
    def subnet_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_name", value)

    @property
    @pulumi.getter(name="virtualNetworkName")
    def virtual_network_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "virtual_network_name")

    @virtual_network_name.setter
    def virtual_network_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "virtual_network_name", value)

    @property
    @pulumi.getter(name="vmSize")
    def vm_size(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vm_size")

    @vm_size.setter
    def vm_size(self, value: pulumi.Input[str]):
        pulumi.set(self, "vm_size", value)

    @property
    @pulumi.getter(name="sshPublicKeyData")
    def ssh_public_key_data(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_public_key_data")

    @ssh_public_key_data.setter
    def ssh_public_key_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_public_key_data", value)


@pulumi.input_type
class AzureVMScaleSetStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class AzureVirtualMachineExtensionSpecArgs:
    def __init__(__self__, *,
                 auto_upgrade_minor_version: pulumi.Input[bool],
                 force_update_tag: pulumi.Input[str],
                 location: pulumi.Input[str],
                 publisher: pulumi.Input[str],
                 resource_group: pulumi.Input[str],
                 type_handler_version: pulumi.Input[str],
                 type_name: pulumi.Input[str],
                 vm_name: pulumi.Input[str],
                 protected_settings: Optional[pulumi.Input[str]] = None,
                 settings: Optional[pulumi.Input[str]] = None):
        """
        AzureVirtualMachineExtensionSpec defines the desired state of AzureVirtualMachineExtension
        :param pulumi.Input[str] location: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        pulumi.set(__self__, "auto_upgrade_minor_version", auto_upgrade_minor_version)
        pulumi.set(__self__, "force_update_tag", force_update_tag)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "publisher", publisher)
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "type_handler_version", type_handler_version)
        pulumi.set(__self__, "type_name", type_name)
        pulumi.set(__self__, "vm_name", vm_name)
        if protected_settings is not None:
            pulumi.set(__self__, "protected_settings", protected_settings)
        if settings is not None:
            pulumi.set(__self__, "settings", settings)

    @property
    @pulumi.getter(name="autoUpgradeMinorVersion")
    def auto_upgrade_minor_version(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "auto_upgrade_minor_version")

    @auto_upgrade_minor_version.setter
    def auto_upgrade_minor_version(self, value: pulumi.Input[bool]):
        pulumi.set(self, "auto_upgrade_minor_version", value)

    @property
    @pulumi.getter(name="forceUpdateTag")
    def force_update_tag(self) -> pulumi.Input[str]:
        return pulumi.get(self, "force_update_tag")

    @force_update_tag.setter
    def force_update_tag(self, value: pulumi.Input[str]):
        pulumi.set(self, "force_update_tag", value)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def publisher(self) -> pulumi.Input[str]:
        return pulumi.get(self, "publisher")

    @publisher.setter
    def publisher(self, value: pulumi.Input[str]):
        pulumi.set(self, "publisher", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="typeHandlerVersion")
    def type_handler_version(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type_handler_version")

    @type_handler_version.setter
    def type_handler_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "type_handler_version", value)

    @property
    @pulumi.getter(name="typeName")
    def type_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type_name")

    @type_name.setter
    def type_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "type_name", value)

    @property
    @pulumi.getter(name="vmName")
    def vm_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vm_name")

    @vm_name.setter
    def vm_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "vm_name", value)

    @property
    @pulumi.getter(name="protectedSettings")
    def protected_settings(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protected_settings")

    @protected_settings.setter
    def protected_settings(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protected_settings", value)

    @property
    @pulumi.getter
    def settings(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "settings")

    @settings.setter
    def settings(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "settings", value)


@pulumi.input_type
class AzureVirtualMachineExtensionStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class AzureVirtualMachineSpecArgs:
    def __init__(__self__, *,
                 admin_user_name: pulumi.Input[str],
                 location: pulumi.Input[str],
                 network_interface_name: pulumi.Input[str],
                 os_type: pulumi.Input[str],
                 platform_image_urn: pulumi.Input[str],
                 resource_group: pulumi.Input[str],
                 vm_size: pulumi.Input[str],
                 ssh_public_key_data: Optional[pulumi.Input[str]] = None):
        """
        AzureVirtualMachineSpec defines the desired state of AzureVirtualMachine
        :param pulumi.Input[str] location: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        pulumi.set(__self__, "admin_user_name", admin_user_name)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "network_interface_name", network_interface_name)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "platform_image_urn", platform_image_urn)
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "vm_size", vm_size)
        if ssh_public_key_data is not None:
            pulumi.set(__self__, "ssh_public_key_data", ssh_public_key_data)

    @property
    @pulumi.getter(name="adminUserName")
    def admin_user_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "admin_user_name")

    @admin_user_name.setter
    def admin_user_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "admin_user_name", value)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="networkInterfaceName")
    def network_interface_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "network_interface_name")

    @network_interface_name.setter
    def network_interface_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "network_interface_name", value)

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "os_type", value)

    @property
    @pulumi.getter(name="platformImageURN")
    def platform_image_urn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "platform_image_urn")

    @platform_image_urn.setter
    def platform_image_urn(self, value: pulumi.Input[str]):
        pulumi.set(self, "platform_image_urn", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="vmSize")
    def vm_size(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vm_size")

    @vm_size.setter
    def vm_size(self, value: pulumi.Input[str]):
        pulumi.set(self, "vm_size", value)

    @property
    @pulumi.getter(name="sshPublicKeyData")
    def ssh_public_key_data(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_public_key_data")

    @ssh_public_key_data.setter
    def ssh_public_key_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_public_key_data", value)


@pulumi.input_type
class AzureVirtualMachineStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class BlobContainerSpecArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[str],
                 resourcegroup: pulumi.Input[str],
                 accesslevel: Optional[pulumi.Input[str]] = None,
                 accountname: Optional[pulumi.Input[str]] = None):
        """
        BlobContainerSpec defines the desired state of BlobContainer
        :param pulumi.Input[str] location: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        :param pulumi.Input[str] accesslevel: PublicAccess enumerates the values for public access.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resourcegroup", resourcegroup)
        if accesslevel is not None:
            pulumi.set(__self__, "accesslevel", accesslevel)
        if accountname is not None:
            pulumi.set(__self__, "accountname", accountname)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def resourcegroup(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resourcegroup")

    @resourcegroup.setter
    def resourcegroup(self, value: pulumi.Input[str]):
        pulumi.set(self, "resourcegroup", value)

    @property
    @pulumi.getter
    def accesslevel(self) -> Optional[pulumi.Input[str]]:
        """
        PublicAccess enumerates the values for public access.
        """
        return pulumi.get(self, "accesslevel")

    @accesslevel.setter
    def accesslevel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accesslevel", value)

    @property
    @pulumi.getter
    def accountname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "accountname")

    @accountname.setter
    def accountname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accountname", value)


@pulumi.input_type
class BlobContainerStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class ConsumerGroupSpecArgs:
    def __init__(__self__, *,
                 resource_group: pulumi.Input[str],
                 consumer_group_name: Optional[pulumi.Input[str]] = None,
                 event_hub: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        ConsumerGroupSpec defines the desired state of ConsumerGroup
        :param pulumi.Input[str] resource_group: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        pulumi.set(__self__, "resource_group", resource_group)
        if consumer_group_name is not None:
            pulumi.set(__self__, "consumer_group_name", consumer_group_name)
        if event_hub is not None:
            pulumi.set(__self__, "event_hub", event_hub)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="consumerGroupName")
    def consumer_group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumer_group_name")

    @consumer_group_name.setter
    def consumer_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_group_name", value)

    @property
    @pulumi.getter(name="eventHub")
    def event_hub(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "event_hub")

    @event_hub.setter
    def event_hub(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event_hub", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class ConsumerGroupStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class CosmosDBSpecArgs:
    def __init__(__self__, *,
                 resource_group: pulumi.Input[str],
                 ip_rules: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 key_vault_to_store_secrets: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input['CosmosDBSpecLocationsArgs']]]] = None,
                 properties: Optional[pulumi.Input['CosmosDBSpecPropertiesArgs']] = None,
                 virtual_network_rules: Optional[pulumi.Input[Sequence[pulumi.Input['CosmosDBSpecVirtualNetworkRulesArgs']]]] = None):
        """
        CosmosDBSpec defines the desired state of CosmosDB
        :param pulumi.Input[str] kind: CosmosDBKind enumerates the values for kind. Only one of the following kinds may be specified. If none of the following kinds is specified, the default one is GlobalDocumentDBKind.
        :param pulumi.Input['CosmosDBSpecPropertiesArgs'] properties: CosmosDBProperties the CosmosDBProperties of CosmosDB.
        """
        pulumi.set(__self__, "resource_group", resource_group)
        if ip_rules is not None:
            pulumi.set(__self__, "ip_rules", ip_rules)
        if key_vault_to_store_secrets is not None:
            pulumi.set(__self__, "key_vault_to_store_secrets", key_vault_to_store_secrets)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if virtual_network_rules is not None:
            pulumi.set(__self__, "virtual_network_rules", virtual_network_rules)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="ipRules")
    def ip_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_rules")

    @ip_rules.setter
    def ip_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_rules", value)

    @property
    @pulumi.getter(name="keyVaultToStoreSecrets")
    def key_vault_to_store_secrets(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_vault_to_store_secrets")

    @key_vault_to_store_secrets.setter
    def key_vault_to_store_secrets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_vault_to_store_secrets", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        CosmosDBKind enumerates the values for kind. Only one of the following kinds may be specified. If none of the following kinds is specified, the default one is GlobalDocumentDBKind.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CosmosDBSpecLocationsArgs']]]]:
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CosmosDBSpecLocationsArgs']]]]):
        pulumi.set(self, "locations", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input['CosmosDBSpecPropertiesArgs']]:
        """
        CosmosDBProperties the CosmosDBProperties of CosmosDB.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input['CosmosDBSpecPropertiesArgs']]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="virtualNetworkRules")
    def virtual_network_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CosmosDBSpecVirtualNetworkRulesArgs']]]]:
        return pulumi.get(self, "virtual_network_rules")

    @virtual_network_rules.setter
    def virtual_network_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CosmosDBSpecVirtualNetworkRulesArgs']]]]):
        pulumi.set(self, "virtual_network_rules", value)


@pulumi.input_type
class CosmosDBSpecLocationsArgs:
    def __init__(__self__, *,
                 failover_priority: pulumi.Input[int],
                 location_name: pulumi.Input[str],
                 is_zone_redundant: Optional[pulumi.Input[bool]] = None):
        """
        CosmosDBLocation defines one or more locations for geo-redundancy and high availability
        """
        pulumi.set(__self__, "failover_priority", failover_priority)
        pulumi.set(__self__, "location_name", location_name)
        if is_zone_redundant is not None:
            pulumi.set(__self__, "is_zone_redundant", is_zone_redundant)

    @property
    @pulumi.getter(name="failoverPriority")
    def failover_priority(self) -> pulumi.Input[int]:
        return pulumi.get(self, "failover_priority")

    @failover_priority.setter
    def failover_priority(self, value: pulumi.Input[int]):
        pulumi.set(self, "failover_priority", value)

    @property
    @pulumi.getter(name="locationName")
    def location_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "location_name")

    @location_name.setter
    def location_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "location_name", value)

    @property
    @pulumi.getter(name="isZoneRedundant")
    def is_zone_redundant(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_zone_redundant")

    @is_zone_redundant.setter
    def is_zone_redundant(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_zone_redundant", value)


@pulumi.input_type
class CosmosDBSpecPropertiesArgs:
    def __init__(__self__, *,
                 capabilities: Optional[pulumi.Input[Sequence[pulumi.Input['CosmosDBSpecPropertiesCapabilitiesArgs']]]] = None,
                 database_account_offer_type: Optional[pulumi.Input[str]] = None,
                 enable_multiple_write_locations: Optional[pulumi.Input[bool]] = None,
                 is_virtual_network_filter_enabled: Optional[pulumi.Input[bool]] = None,
                 mongo_db_version: Optional[pulumi.Input[str]] = None):
        """
        CosmosDBProperties the CosmosDBProperties of CosmosDB.
        :param pulumi.Input[str] database_account_offer_type: DatabaseAccountOfferType - The offer type for the Cosmos DB database account.
        :param pulumi.Input[bool] is_virtual_network_filter_enabled: IsVirtualNetworkFilterEnabled - Flag to indicate whether to enable/disable Virtual Network ACL rules.
        """
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if database_account_offer_type is not None:
            pulumi.set(__self__, "database_account_offer_type", database_account_offer_type)
        if enable_multiple_write_locations is not None:
            pulumi.set(__self__, "enable_multiple_write_locations", enable_multiple_write_locations)
        if is_virtual_network_filter_enabled is not None:
            pulumi.set(__self__, "is_virtual_network_filter_enabled", is_virtual_network_filter_enabled)
        if mongo_db_version is not None:
            pulumi.set(__self__, "mongo_db_version", mongo_db_version)

    @property
    @pulumi.getter
    def capabilities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CosmosDBSpecPropertiesCapabilitiesArgs']]]]:
        return pulumi.get(self, "capabilities")

    @capabilities.setter
    def capabilities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CosmosDBSpecPropertiesCapabilitiesArgs']]]]):
        pulumi.set(self, "capabilities", value)

    @property
    @pulumi.getter(name="databaseAccountOfferType")
    def database_account_offer_type(self) -> Optional[pulumi.Input[str]]:
        """
        DatabaseAccountOfferType - The offer type for the Cosmos DB database account.
        """
        return pulumi.get(self, "database_account_offer_type")

    @database_account_offer_type.setter
    def database_account_offer_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_account_offer_type", value)

    @property
    @pulumi.getter(name="enableMultipleWriteLocations")
    def enable_multiple_write_locations(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_multiple_write_locations")

    @enable_multiple_write_locations.setter
    def enable_multiple_write_locations(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_multiple_write_locations", value)

    @property
    @pulumi.getter(name="isVirtualNetworkFilterEnabled")
    def is_virtual_network_filter_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        IsVirtualNetworkFilterEnabled - Flag to indicate whether to enable/disable Virtual Network ACL rules.
        """
        return pulumi.get(self, "is_virtual_network_filter_enabled")

    @is_virtual_network_filter_enabled.setter
    def is_virtual_network_filter_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_virtual_network_filter_enabled", value)

    @property
    @pulumi.getter(name="mongoDBVersion")
    def mongo_db_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mongo_db_version")

    @mongo_db_version.setter
    def mongo_db_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mongo_db_version", value)


@pulumi.input_type
class CosmosDBSpecPropertiesCapabilitiesArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Capability cosmos DB capability object
        :param pulumi.Input[str] name: Name *CosmosCapability `json:"name,omitempty"`
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name *CosmosCapability `json:"name,omitempty"`
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class CosmosDBSpecVirtualNetworkRulesArgs:
    def __init__(__self__, *,
                 ignore_missing_v_net_service_endpoint: Optional[pulumi.Input[bool]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None):
        """
        CosmosDBVirtualNetworkRule virtual Network ACL Rule object
        :param pulumi.Input[bool] ignore_missing_v_net_service_endpoint: IgnoreMissingVNetServiceEndpoint - Create firewall rule before the virtual network has vnet service endpoint enabled.
        :param pulumi.Input[str] subnet_id: ID - Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
        """
        if ignore_missing_v_net_service_endpoint is not None:
            pulumi.set(__self__, "ignore_missing_v_net_service_endpoint", ignore_missing_v_net_service_endpoint)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="ignoreMissingVNetServiceEndpoint")
    def ignore_missing_v_net_service_endpoint(self) -> Optional[pulumi.Input[bool]]:
        """
        IgnoreMissingVNetServiceEndpoint - Create firewall rule before the virtual network has vnet service endpoint enabled.
        """
        return pulumi.get(self, "ignore_missing_v_net_service_endpoint")

    @ignore_missing_v_net_service_endpoint.setter
    def ignore_missing_v_net_service_endpoint(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_missing_v_net_service_endpoint", value)

    @property
    @pulumi.getter(name="subnetID")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID - Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)


@pulumi.input_type
class CosmosDBStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class EventhubNamespaceSpecArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[str],
                 resource_group: pulumi.Input[str],
                 network_rule: Optional[pulumi.Input['EventhubNamespaceSpecNetworkRuleArgs']] = None,
                 properties: Optional[pulumi.Input['EventhubNamespaceSpecPropertiesArgs']] = None,
                 sku: Optional[pulumi.Input['EventhubNamespaceSpecSkuArgs']] = None):
        """
        EventhubNamespaceSpec defines the desired state of EventhubNamespace
        :param pulumi.Input[str] location: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        :param pulumi.Input['EventhubNamespaceSpecNetworkRuleArgs'] network_rule: EventhubNamespaceNetworkRule defines the namespace network rule
        :param pulumi.Input['EventhubNamespaceSpecPropertiesArgs'] properties: EventhubNamespaceProperties defines the namespace properties
        :param pulumi.Input['EventhubNamespaceSpecSkuArgs'] sku: EventhubNamespaceSku defines the sku
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_group", resource_group)
        if network_rule is not None:
            pulumi.set(__self__, "network_rule", network_rule)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="networkRule")
    def network_rule(self) -> Optional[pulumi.Input['EventhubNamespaceSpecNetworkRuleArgs']]:
        """
        EventhubNamespaceNetworkRule defines the namespace network rule
        """
        return pulumi.get(self, "network_rule")

    @network_rule.setter
    def network_rule(self, value: Optional[pulumi.Input['EventhubNamespaceSpecNetworkRuleArgs']]):
        pulumi.set(self, "network_rule", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input['EventhubNamespaceSpecPropertiesArgs']]:
        """
        EventhubNamespaceProperties defines the namespace properties
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input['EventhubNamespaceSpecPropertiesArgs']]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter
    def sku(self) -> Optional[pulumi.Input['EventhubNamespaceSpecSkuArgs']]:
        """
        EventhubNamespaceSku defines the sku
        """
        return pulumi.get(self, "sku")

    @sku.setter
    def sku(self, value: Optional[pulumi.Input['EventhubNamespaceSpecSkuArgs']]):
        pulumi.set(self, "sku", value)


@pulumi.input_type
class EventhubNamespaceSpecNetworkRuleArgs:
    def __init__(__self__, *,
                 default_action: Optional[pulumi.Input[str]] = None,
                 ip_rules: Optional[pulumi.Input[Sequence[pulumi.Input['EventhubNamespaceSpecNetworkRuleIpRulesArgs']]]] = None,
                 virtual_network_rules: Optional[pulumi.Input[Sequence[pulumi.Input['EventhubNamespaceSpecNetworkRuleVirtualNetworkRulesArgs']]]] = None):
        """
        EventhubNamespaceNetworkRule defines the namespace network rule
        :param pulumi.Input[str] default_action: DefaultAction defined as a string
        :param pulumi.Input[Sequence[pulumi.Input['EventhubNamespaceSpecNetworkRuleIpRulesArgs']]] ip_rules: IPRules - List of IpRules
        :param pulumi.Input[Sequence[pulumi.Input['EventhubNamespaceSpecNetworkRuleVirtualNetworkRulesArgs']]] virtual_network_rules: VirtualNetworkRules - List VirtualNetwork Rules
        """
        if default_action is not None:
            pulumi.set(__self__, "default_action", default_action)
        if ip_rules is not None:
            pulumi.set(__self__, "ip_rules", ip_rules)
        if virtual_network_rules is not None:
            pulumi.set(__self__, "virtual_network_rules", virtual_network_rules)

    @property
    @pulumi.getter(name="defaultAction")
    def default_action(self) -> Optional[pulumi.Input[str]]:
        """
        DefaultAction defined as a string
        """
        return pulumi.get(self, "default_action")

    @default_action.setter
    def default_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_action", value)

    @property
    @pulumi.getter(name="ipRules")
    def ip_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EventhubNamespaceSpecNetworkRuleIpRulesArgs']]]]:
        """
        IPRules - List of IpRules
        """
        return pulumi.get(self, "ip_rules")

    @ip_rules.setter
    def ip_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EventhubNamespaceSpecNetworkRuleIpRulesArgs']]]]):
        pulumi.set(self, "ip_rules", value)

    @property
    @pulumi.getter(name="virtualNetworkRules")
    def virtual_network_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EventhubNamespaceSpecNetworkRuleVirtualNetworkRulesArgs']]]]:
        """
        VirtualNetworkRules - List VirtualNetwork Rules
        """
        return pulumi.get(self, "virtual_network_rules")

    @virtual_network_rules.setter
    def virtual_network_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EventhubNamespaceSpecNetworkRuleVirtualNetworkRulesArgs']]]]):
        pulumi.set(self, "virtual_network_rules", value)


@pulumi.input_type
class EventhubNamespaceSpecNetworkRuleIpRulesArgs:
    def __init__(__self__, *,
                 ip_mask: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ip_mask: IPMask - IPv4 address 1.1.1.1 or CIDR notation 1.1.0.0/24
        """
        if ip_mask is not None:
            pulumi.set(__self__, "ip_mask", ip_mask)

    @property
    @pulumi.getter(name="ipMask")
    def ip_mask(self) -> Optional[pulumi.Input[str]]:
        """
        IPMask - IPv4 address 1.1.1.1 or CIDR notation 1.1.0.0/24
        """
        return pulumi.get(self, "ip_mask")

    @ip_mask.setter
    def ip_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_mask", value)


@pulumi.input_type
class EventhubNamespaceSpecNetworkRuleVirtualNetworkRulesArgs:
    def __init__(__self__, *,
                 ignore_missing_service_endpoint: Optional[pulumi.Input[bool]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] ignore_missing_service_endpoint: IgnoreMissingVnetServiceEndpoint - Value that indicates whether to ignore missing VNet Service Endpoint
        :param pulumi.Input[str] subnet_id: Subnet - Full Resource ID of Virtual Network Subnet
        """
        if ignore_missing_service_endpoint is not None:
            pulumi.set(__self__, "ignore_missing_service_endpoint", ignore_missing_service_endpoint)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="ignoreMissingServiceEndpoint")
    def ignore_missing_service_endpoint(self) -> Optional[pulumi.Input[bool]]:
        """
        IgnoreMissingVnetServiceEndpoint - Value that indicates whether to ignore missing VNet Service Endpoint
        """
        return pulumi.get(self, "ignore_missing_service_endpoint")

    @ignore_missing_service_endpoint.setter
    def ignore_missing_service_endpoint(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_missing_service_endpoint", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet - Full Resource ID of Virtual Network Subnet
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)


@pulumi.input_type
class EventhubNamespaceSpecPropertiesArgs:
    def __init__(__self__, *,
                 is_auto_inflate_enabled: Optional[pulumi.Input[bool]] = None,
                 kafka_enabled: Optional[pulumi.Input[bool]] = None,
                 maximum_throughput_units: Optional[pulumi.Input[int]] = None):
        """
        EventhubNamespaceProperties defines the namespace properties
        """
        if is_auto_inflate_enabled is not None:
            pulumi.set(__self__, "is_auto_inflate_enabled", is_auto_inflate_enabled)
        if kafka_enabled is not None:
            pulumi.set(__self__, "kafka_enabled", kafka_enabled)
        if maximum_throughput_units is not None:
            pulumi.set(__self__, "maximum_throughput_units", maximum_throughput_units)

    @property
    @pulumi.getter(name="isAutoInflateEnabled")
    def is_auto_inflate_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_auto_inflate_enabled")

    @is_auto_inflate_enabled.setter
    def is_auto_inflate_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_auto_inflate_enabled", value)

    @property
    @pulumi.getter(name="kafkaEnabled")
    def kafka_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "kafka_enabled")

    @kafka_enabled.setter
    def kafka_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "kafka_enabled", value)

    @property
    @pulumi.getter(name="maximumThroughputUnits")
    def maximum_throughput_units(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_throughput_units")

    @maximum_throughput_units.setter
    def maximum_throughput_units(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_throughput_units", value)


@pulumi.input_type
class EventhubNamespaceSpecSkuArgs:
    def __init__(__self__, *,
                 capacity: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tier: Optional[pulumi.Input[str]] = None):
        """
        EventhubNamespaceSku defines the sku
        """
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tier")

    @tier.setter
    def tier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tier", value)


@pulumi.input_type
class EventhubNamespaceStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class EventhubSpecArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[str],
                 resource_group: pulumi.Input[str],
                 authorization_rule: Optional[pulumi.Input['EventhubSpecAuthorizationRuleArgs']] = None,
                 key_vault_to_store_secrets: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input['EventhubSpecPropertiesArgs']] = None,
                 secret_name: Optional[pulumi.Input[str]] = None):
        """
        EventhubSpec defines the desired state of Eventhub
        :param pulumi.Input[str] location: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        :param pulumi.Input['EventhubSpecAuthorizationRuleArgs'] authorization_rule: EventhubAuthorizationRule defines the name and rights of the access policy
        :param pulumi.Input['EventhubSpecPropertiesArgs'] properties: EventhubProperties defines the namespace properties
        :param pulumi.Input[str] secret_name: SecretName - Used to specify the name of the secret. Defaults to Event Hub name if omitted.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_group", resource_group)
        if authorization_rule is not None:
            pulumi.set(__self__, "authorization_rule", authorization_rule)
        if key_vault_to_store_secrets is not None:
            pulumi.set(__self__, "key_vault_to_store_secrets", key_vault_to_store_secrets)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="authorizationRule")
    def authorization_rule(self) -> Optional[pulumi.Input['EventhubSpecAuthorizationRuleArgs']]:
        """
        EventhubAuthorizationRule defines the name and rights of the access policy
        """
        return pulumi.get(self, "authorization_rule")

    @authorization_rule.setter
    def authorization_rule(self, value: Optional[pulumi.Input['EventhubSpecAuthorizationRuleArgs']]):
        pulumi.set(self, "authorization_rule", value)

    @property
    @pulumi.getter(name="keyVaultToStoreSecrets")
    def key_vault_to_store_secrets(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_vault_to_store_secrets")

    @key_vault_to_store_secrets.setter
    def key_vault_to_store_secrets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_vault_to_store_secrets", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input['EventhubSpecPropertiesArgs']]:
        """
        EventhubProperties defines the namespace properties
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input['EventhubSpecPropertiesArgs']]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        SecretName - Used to specify the name of the secret. Defaults to Event Hub name if omitted.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class EventhubSpecAuthorizationRuleArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 rights: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        EventhubAuthorizationRule defines the name and rights of the access policy
        :param pulumi.Input[str] name: Name - Name of AuthorizationRule for eventhub
        :param pulumi.Input[Sequence[pulumi.Input[str]]] rights: Rights - Rights set on the AuthorizationRule
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rights is not None:
            pulumi.set(__self__, "rights", rights)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name - Name of AuthorizationRule for eventhub
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def rights(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Rights - Rights set on the AuthorizationRule
        """
        return pulumi.get(self, "rights")

    @rights.setter
    def rights(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "rights", value)


@pulumi.input_type
class EventhubSpecPropertiesArgs:
    def __init__(__self__, *,
                 capture_description: Optional[pulumi.Input['EventhubSpecPropertiesCaptureDescriptionArgs']] = None,
                 message_retention_in_days: Optional[pulumi.Input[int]] = None,
                 partition_count: Optional[pulumi.Input[int]] = None):
        """
        EventhubProperties defines the namespace properties
        :param pulumi.Input['EventhubSpecPropertiesCaptureDescriptionArgs'] capture_description: CaptureDescription - Details specifying EventHub capture to persistent storage
        :param pulumi.Input[int] message_retention_in_days: MessageRetentionInDays - Number of days to retain the events for this Event Hub, value should be 1 to 7 days
        :param pulumi.Input[int] partition_count: PartitionCount - Number of partitions created for the Event Hub, allowed values are from 2 to 32 partitions.
        """
        if capture_description is not None:
            pulumi.set(__self__, "capture_description", capture_description)
        if message_retention_in_days is not None:
            pulumi.set(__self__, "message_retention_in_days", message_retention_in_days)
        if partition_count is not None:
            pulumi.set(__self__, "partition_count", partition_count)

    @property
    @pulumi.getter(name="captureDescription")
    def capture_description(self) -> Optional[pulumi.Input['EventhubSpecPropertiesCaptureDescriptionArgs']]:
        """
        CaptureDescription - Details specifying EventHub capture to persistent storage
        """
        return pulumi.get(self, "capture_description")

    @capture_description.setter
    def capture_description(self, value: Optional[pulumi.Input['EventhubSpecPropertiesCaptureDescriptionArgs']]):
        pulumi.set(self, "capture_description", value)

    @property
    @pulumi.getter(name="messageRetentionInDays")
    def message_retention_in_days(self) -> Optional[pulumi.Input[int]]:
        """
        MessageRetentionInDays - Number of days to retain the events for this Event Hub, value should be 1 to 7 days
        """
        return pulumi.get(self, "message_retention_in_days")

    @message_retention_in_days.setter
    def message_retention_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "message_retention_in_days", value)

    @property
    @pulumi.getter(name="partitionCount")
    def partition_count(self) -> Optional[pulumi.Input[int]]:
        """
        PartitionCount - Number of partitions created for the Event Hub, allowed values are from 2 to 32 partitions.
        """
        return pulumi.get(self, "partition_count")

    @partition_count.setter
    def partition_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "partition_count", value)


@pulumi.input_type
class EventhubSpecPropertiesCaptureDescriptionArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 destination: Optional[pulumi.Input['EventhubSpecPropertiesCaptureDescriptionDestinationArgs']] = None,
                 interval_in_seconds: Optional[pulumi.Input[int]] = None,
                 size_limit_in_bytes: Optional[pulumi.Input[int]] = None):
        """
        CaptureDescription - Details specifying EventHub capture to persistent storage
        :param pulumi.Input[bool] enabled: Enabled - indicates whether capture is enabled
        :param pulumi.Input['EventhubSpecPropertiesCaptureDescriptionDestinationArgs'] destination: Destination - Resource id of the storage account to be used to create the blobs
        :param pulumi.Input[int] interval_in_seconds: IntervalInSeconds - The time window allows you to set the frequency with which the capture to Azure Blobs will happen
        :param pulumi.Input[int] size_limit_in_bytes: SizeLimitInBytes - The size window defines the amount of data built up in your Event Hub before an capture operation
        """
        pulumi.set(__self__, "enabled", enabled)
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if interval_in_seconds is not None:
            pulumi.set(__self__, "interval_in_seconds", interval_in_seconds)
        if size_limit_in_bytes is not None:
            pulumi.set(__self__, "size_limit_in_bytes", size_limit_in_bytes)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Enabled - indicates whether capture is enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def destination(self) -> Optional[pulumi.Input['EventhubSpecPropertiesCaptureDescriptionDestinationArgs']]:
        """
        Destination - Resource id of the storage account to be used to create the blobs
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: Optional[pulumi.Input['EventhubSpecPropertiesCaptureDescriptionDestinationArgs']]):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter(name="intervalInSeconds")
    def interval_in_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        IntervalInSeconds - The time window allows you to set the frequency with which the capture to Azure Blobs will happen
        """
        return pulumi.get(self, "interval_in_seconds")

    @interval_in_seconds.setter
    def interval_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval_in_seconds", value)

    @property
    @pulumi.getter(name="sizeLimitInBytes")
    def size_limit_in_bytes(self) -> Optional[pulumi.Input[int]]:
        """
        SizeLimitInBytes - The size window defines the amount of data built up in your Event Hub before an capture operation
        """
        return pulumi.get(self, "size_limit_in_bytes")

    @size_limit_in_bytes.setter
    def size_limit_in_bytes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size_limit_in_bytes", value)


@pulumi.input_type
class EventhubSpecPropertiesCaptureDescriptionDestinationArgs:
    def __init__(__self__, *,
                 archive_name_format: Optional[pulumi.Input[str]] = None,
                 blob_container: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 storage_account: Optional[pulumi.Input['EventhubSpecPropertiesCaptureDescriptionDestinationStorageAccountArgs']] = None):
        """
        Destination - Resource id of the storage account to be used to create the blobs
        :param pulumi.Input[str] archive_name_format: ArchiveNameFormat - Blob naming convention for archive, e.g. {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
        :param pulumi.Input[str] blob_container: BlobContainer - Blob container Name
        :param pulumi.Input[str] name: Name - Name for capture destination
        :param pulumi.Input['EventhubSpecPropertiesCaptureDescriptionDestinationStorageAccountArgs'] storage_account: StorageAccount - Details of the storage account
        """
        if archive_name_format is not None:
            pulumi.set(__self__, "archive_name_format", archive_name_format)
        if blob_container is not None:
            pulumi.set(__self__, "blob_container", blob_container)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if storage_account is not None:
            pulumi.set(__self__, "storage_account", storage_account)

    @property
    @pulumi.getter(name="archiveNameFormat")
    def archive_name_format(self) -> Optional[pulumi.Input[str]]:
        """
        ArchiveNameFormat - Blob naming convention for archive, e.g. {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
        """
        return pulumi.get(self, "archive_name_format")

    @archive_name_format.setter
    def archive_name_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_name_format", value)

    @property
    @pulumi.getter(name="blobContainer")
    def blob_container(self) -> Optional[pulumi.Input[str]]:
        """
        BlobContainer - Blob container Name
        """
        return pulumi.get(self, "blob_container")

    @blob_container.setter
    def blob_container(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blob_container", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name - Name for capture destination
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="storageAccount")
    def storage_account(self) -> Optional[pulumi.Input['EventhubSpecPropertiesCaptureDescriptionDestinationStorageAccountArgs']]:
        """
        StorageAccount - Details of the storage account
        """
        return pulumi.get(self, "storage_account")

    @storage_account.setter
    def storage_account(self, value: Optional[pulumi.Input['EventhubSpecPropertiesCaptureDescriptionDestinationStorageAccountArgs']]):
        pulumi.set(self, "storage_account", value)


@pulumi.input_type
class EventhubSpecPropertiesCaptureDescriptionDestinationStorageAccountArgs:
    def __init__(__self__, *,
                 account_name: Optional[pulumi.Input[str]] = None,
                 resource_group: Optional[pulumi.Input[str]] = None):
        """
        StorageAccount - Details of the storage account
        :param pulumi.Input[str] account_name: AccountName - Name of the storage account
        :param pulumi.Input[str] resource_group: ResourceGroup - Name of the storage account resource group
        """
        if account_name is not None:
            pulumi.set(__self__, "account_name", account_name)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[pulumi.Input[str]]:
        """
        AccountName - Name of the storage account
        """
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_name", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[str]]:
        """
        ResourceGroup - Name of the storage account resource group
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group", value)


@pulumi.input_type
class EventhubStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class KeyVaultKeySpecArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[str],
                 resource_group: pulumi.Input[str],
                 curve: Optional[pulumi.Input[str]] = None,
                 key_size: Optional[pulumi.Input[int]] = None,
                 key_vault: Optional[pulumi.Input[str]] = None,
                 operations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        KeyVaultKeySpec defines the desired state of KeyVaultKey
        :param pulumi.Input[str] location: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        :param pulumi.Input[str] curve: JSONWebKeyCurveName enumerates the values for json web key curve name.
        :param pulumi.Input[str] type: JSONWebKeyType enumerates the values for json web key type.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_group", resource_group)
        if curve is not None:
            pulumi.set(__self__, "curve", curve)
        if key_size is not None:
            pulumi.set(__self__, "key_size", key_size)
        if key_vault is not None:
            pulumi.set(__self__, "key_vault", key_vault)
        if operations is not None:
            pulumi.set(__self__, "operations", operations)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter
    def curve(self) -> Optional[pulumi.Input[str]]:
        """
        JSONWebKeyCurveName enumerates the values for json web key curve name.
        """
        return pulumi.get(self, "curve")

    @curve.setter
    def curve(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "curve", value)

    @property
    @pulumi.getter(name="keySize")
    def key_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "key_size")

    @key_size.setter
    def key_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key_size", value)

    @property
    @pulumi.getter(name="keyVault")
    def key_vault(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_vault")

    @key_vault.setter
    def key_vault(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_vault", value)

    @property
    @pulumi.getter
    def operations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "operations")

    @operations.setter
    def operations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "operations", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        JSONWebKeyType enumerates the values for json web key type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class KeyVaultKeyStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class KeyVaultSpecArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[str],
                 resource_group: pulumi.Input[str],
                 access_policies: Optional[pulumi.Input[Sequence[pulumi.Input['KeyVaultSpecAccessPoliciesArgs']]]] = None,
                 enable_soft_delete: Optional[pulumi.Input[bool]] = None,
                 network_policies: Optional[pulumi.Input['KeyVaultSpecNetworkPoliciesArgs']] = None,
                 sku: Optional[pulumi.Input['KeyVaultSpecSkuArgs']] = None):
        """
        KeyVaultSpec defines the desired state of KeyVault
        :param pulumi.Input['KeyVaultSpecSkuArgs'] sku: KeyVaultSku the SKU of the Key Vault
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_group", resource_group)
        if access_policies is not None:
            pulumi.set(__self__, "access_policies", access_policies)
        if enable_soft_delete is not None:
            pulumi.set(__self__, "enable_soft_delete", enable_soft_delete)
        if network_policies is not None:
            pulumi.set(__self__, "network_policies", network_policies)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="accessPolicies")
    def access_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KeyVaultSpecAccessPoliciesArgs']]]]:
        return pulumi.get(self, "access_policies")

    @access_policies.setter
    def access_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KeyVaultSpecAccessPoliciesArgs']]]]):
        pulumi.set(self, "access_policies", value)

    @property
    @pulumi.getter(name="enableSoftDelete")
    def enable_soft_delete(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_soft_delete")

    @enable_soft_delete.setter
    def enable_soft_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_soft_delete", value)

    @property
    @pulumi.getter(name="networkPolicies")
    def network_policies(self) -> Optional[pulumi.Input['KeyVaultSpecNetworkPoliciesArgs']]:
        return pulumi.get(self, "network_policies")

    @network_policies.setter
    def network_policies(self, value: Optional[pulumi.Input['KeyVaultSpecNetworkPoliciesArgs']]):
        pulumi.set(self, "network_policies", value)

    @property
    @pulumi.getter
    def sku(self) -> Optional[pulumi.Input['KeyVaultSpecSkuArgs']]:
        """
        KeyVaultSku the SKU of the Key Vault
        """
        return pulumi.get(self, "sku")

    @sku.setter
    def sku(self, value: Optional[pulumi.Input['KeyVaultSpecSkuArgs']]):
        pulumi.set(self, "sku", value)


@pulumi.input_type
class KeyVaultSpecAccessPoliciesArgs:
    def __init__(__self__, *,
                 application_id: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 object_id: Optional[pulumi.Input[str]] = None,
                 permissions: Optional[pulumi.Input['KeyVaultSpecAccessPoliciesPermissionsArgs']] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] application_id: ApplicationID -  Application ID of the client making request on behalf of a principal
        :param pulumi.Input[str] client_id: ClientID - The client ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The client ID must be unique for the list of access policies.
        :param pulumi.Input[str] object_id: ObjectID is the value to use if the access policy is for a user other than the user creating the Key Vault when the creating user does not have access to the Application API which is used to translate ClientID to Object ID To get around this, use az-cli or the Azure portal to source the ObjectID from your Service Principal
        :param pulumi.Input['KeyVaultSpecAccessPoliciesPermissionsArgs'] permissions: Permissions - Permissions the identity has for keys, secrets, and certificates.
        :param pulumi.Input[str] tenant_id: TenantID - The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
        """
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if object_id is not None:
            pulumi.set(__self__, "object_id", object_id)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="applicationID")
    def application_id(self) -> Optional[pulumi.Input[str]]:
        """
        ApplicationID -  Application ID of the client making request on behalf of a principal
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter(name="clientID")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        ClientID - The client ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The client ID must be unique for the list of access policies.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="objectID")
    def object_id(self) -> Optional[pulumi.Input[str]]:
        """
        ObjectID is the value to use if the access policy is for a user other than the user creating the Key Vault when the creating user does not have access to the Application API which is used to translate ClientID to Object ID To get around this, use az-cli or the Azure portal to source the ObjectID from your Service Principal
        """
        return pulumi.get(self, "object_id")

    @object_id.setter
    def object_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_id", value)

    @property
    @pulumi.getter
    def permissions(self) -> Optional[pulumi.Input['KeyVaultSpecAccessPoliciesPermissionsArgs']]:
        """
        Permissions - Permissions the identity has for keys, secrets, and certificates.
        """
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: Optional[pulumi.Input['KeyVaultSpecAccessPoliciesPermissionsArgs']]):
        pulumi.set(self, "permissions", value)

    @property
    @pulumi.getter(name="tenantID")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        TenantID - The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


@pulumi.input_type
class KeyVaultSpecAccessPoliciesPermissionsArgs:
    def __init__(__self__, *,
                 certificates: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 secrets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 storage: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Permissions - Permissions the identity has for keys, secrets, and certificates.
        """
        if certificates is not None:
            pulumi.set(__self__, "certificates", certificates)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if secrets is not None:
            pulumi.set(__self__, "secrets", secrets)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def certificates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "certificates")

    @certificates.setter
    def certificates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "certificates", value)

    @property
    @pulumi.getter
    def keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "keys")

    @keys.setter
    def keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "keys", value)

    @property
    @pulumi.getter
    def secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "secrets")

    @secrets.setter
    def secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "secrets", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "storage", value)


@pulumi.input_type
class KeyVaultSpecNetworkPoliciesArgs:
    def __init__(__self__, *,
                 bypass: Optional[pulumi.Input[str]] = None,
                 default_action: Optional[pulumi.Input[str]] = None,
                 ip_rules: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 virtual_network_rules: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] bypass: Bypass - Tells what traffic can bypass network rules. This can be 'AzureServices' or 'None'.  If not specified the default is 'AzureServices'. Possible values include: 'AzureServices', 'None'
        :param pulumi.Input[str] default_action: DefaultAction - The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after the bypass property has been evaluated. Possible values include: 'Allow', 'Deny'
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_rules: IPRules - The list of IP address rules.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] virtual_network_rules: VirtualNetworkRules - The list of virtual network rules.
        """
        if bypass is not None:
            pulumi.set(__self__, "bypass", bypass)
        if default_action is not None:
            pulumi.set(__self__, "default_action", default_action)
        if ip_rules is not None:
            pulumi.set(__self__, "ip_rules", ip_rules)
        if virtual_network_rules is not None:
            pulumi.set(__self__, "virtual_network_rules", virtual_network_rules)

    @property
    @pulumi.getter
    def bypass(self) -> Optional[pulumi.Input[str]]:
        """
        Bypass - Tells what traffic can bypass network rules. This can be 'AzureServices' or 'None'.  If not specified the default is 'AzureServices'. Possible values include: 'AzureServices', 'None'
        """
        return pulumi.get(self, "bypass")

    @bypass.setter
    def bypass(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bypass", value)

    @property
    @pulumi.getter(name="defaultAction")
    def default_action(self) -> Optional[pulumi.Input[str]]:
        """
        DefaultAction - The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after the bypass property has been evaluated. Possible values include: 'Allow', 'Deny'
        """
        return pulumi.get(self, "default_action")

    @default_action.setter
    def default_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_action", value)

    @property
    @pulumi.getter(name="ipRules")
    def ip_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        IPRules - The list of IP address rules.
        """
        return pulumi.get(self, "ip_rules")

    @ip_rules.setter
    def ip_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_rules", value)

    @property
    @pulumi.getter(name="virtualNetworkRules")
    def virtual_network_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        VirtualNetworkRules - The list of virtual network rules.
        """
        return pulumi.get(self, "virtual_network_rules")

    @virtual_network_rules.setter
    def virtual_network_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "virtual_network_rules", value)


@pulumi.input_type
class KeyVaultSpecSkuArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        KeyVaultSku the SKU of the Key Vault
        :param pulumi.Input[str] name: Name - The SKU name. Required for account creation; optional for update. Possible values include: 'Premium', `Standard`
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name - The SKU name. Required for account creation; optional for update. Possible values include: 'Premium', `Standard`
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class KeyVaultStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class MySQLDatabaseSpecArgs:
    def __init__(__self__, *,
                 resource_group: pulumi.Input[str],
                 server: Optional[pulumi.Input[str]] = None):
        """
        MySQLDatabaseSpec defines the desired state of MySQLDatabase
        """
        pulumi.set(__self__, "resource_group", resource_group)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)


@pulumi.input_type
class MySQLDatabaseStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class MySQLFirewallRuleSpecArgs:
    def __init__(__self__, *,
                 end_ip_address: pulumi.Input[str],
                 resource_group: pulumi.Input[str],
                 server: pulumi.Input[str],
                 start_ip_address: pulumi.Input[str]):
        """
        MySQLFirewallRuleSpec defines the desired state of MySQLFirewallRule
        """
        pulumi.set(__self__, "end_ip_address", end_ip_address)
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "server", server)
        pulumi.set(__self__, "start_ip_address", start_ip_address)

    @property
    @pulumi.getter(name="endIpAddress")
    def end_ip_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end_ip_address")

    @end_ip_address.setter
    def end_ip_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_ip_address", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter
    def server(self) -> pulumi.Input[str]:
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input[str]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="startIpAddress")
    def start_ip_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_ip_address")

    @start_ip_address.setter
    def start_ip_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_ip_address", value)


@pulumi.input_type
class MySQLFirewallRuleStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class MySQLServerSpecArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[str],
                 resource_group: pulumi.Input[str],
                 create_mode: Optional[pulumi.Input[str]] = None,
                 key_vault_to_store_secrets: Optional[pulumi.Input[str]] = None,
                 replica_properties: Optional[pulumi.Input['MySQLServerSpecReplicaPropertiesArgs']] = None,
                 server_version: Optional[pulumi.Input[str]] = None,
                 sku: Optional[pulumi.Input['MySQLServerSpecSkuArgs']] = None,
                 ssl_enforcement: Optional[pulumi.Input[str]] = None):
        """
        MySQLServerSpec defines the desired state of MySQLServer
        :param pulumi.Input[str] server_version: ServerVersion enumerates the values for server version.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_group", resource_group)
        if create_mode is not None:
            pulumi.set(__self__, "create_mode", create_mode)
        if key_vault_to_store_secrets is not None:
            pulumi.set(__self__, "key_vault_to_store_secrets", key_vault_to_store_secrets)
        if replica_properties is not None:
            pulumi.set(__self__, "replica_properties", replica_properties)
        if server_version is not None:
            pulumi.set(__self__, "server_version", server_version)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)
        if ssl_enforcement is not None:
            pulumi.set(__self__, "ssl_enforcement", ssl_enforcement)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="createMode")
    def create_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "create_mode")

    @create_mode.setter
    def create_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_mode", value)

    @property
    @pulumi.getter(name="keyVaultToStoreSecrets")
    def key_vault_to_store_secrets(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_vault_to_store_secrets")

    @key_vault_to_store_secrets.setter
    def key_vault_to_store_secrets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_vault_to_store_secrets", value)

    @property
    @pulumi.getter(name="replicaProperties")
    def replica_properties(self) -> Optional[pulumi.Input['MySQLServerSpecReplicaPropertiesArgs']]:
        return pulumi.get(self, "replica_properties")

    @replica_properties.setter
    def replica_properties(self, value: Optional[pulumi.Input['MySQLServerSpecReplicaPropertiesArgs']]):
        pulumi.set(self, "replica_properties", value)

    @property
    @pulumi.getter(name="serverVersion")
    def server_version(self) -> Optional[pulumi.Input[str]]:
        """
        ServerVersion enumerates the values for server version.
        """
        return pulumi.get(self, "server_version")

    @server_version.setter
    def server_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_version", value)

    @property
    @pulumi.getter
    def sku(self) -> Optional[pulumi.Input['MySQLServerSpecSkuArgs']]:
        return pulumi.get(self, "sku")

    @sku.setter
    def sku(self, value: Optional[pulumi.Input['MySQLServerSpecSkuArgs']]):
        pulumi.set(self, "sku", value)

    @property
    @pulumi.getter(name="sslEnforcement")
    def ssl_enforcement(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_enforcement")

    @ssl_enforcement.setter
    def ssl_enforcement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_enforcement", value)


@pulumi.input_type
class MySQLServerSpecReplicaPropertiesArgs:
    def __init__(__self__, *,
                 source_server_id: Optional[pulumi.Input[str]] = None):
        if source_server_id is not None:
            pulumi.set(__self__, "source_server_id", source_server_id)

    @property
    @pulumi.getter(name="sourceServerId")
    def source_server_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_server_id")

    @source_server_id.setter
    def source_server_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_server_id", value)


@pulumi.input_type
class MySQLServerSpecSkuArgs:
    def __init__(__self__, *,
                 capacity: Optional[pulumi.Input[int]] = None,
                 family: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 tier: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] capacity: Capacity - The scale up/out capacity, representing server's compute units.
        :param pulumi.Input[str] family: Family - The family of hardware.
        :param pulumi.Input[str] name: Name - The name of the sku, typically, tier + family + cores, e.g. B_Gen4_1, GP_Gen5_8.
        :param pulumi.Input[str] size: Size - The size code, to be interpreted by resource as appropriate.
        :param pulumi.Input[str] tier: Tier - The tier of the particular SKU, e.g. Basic. Possible values include: 'Basic', 'GeneralPurpose', 'MemoryOptimized'
        """
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Capacity - The scale up/out capacity, representing server's compute units.
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter
    def family(self) -> Optional[pulumi.Input[str]]:
        """
        Family - The family of hardware.
        """
        return pulumi.get(self, "family")

    @family.setter
    def family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "family", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name - The name of the sku, typically, tier + family + cores, e.g. B_Gen4_1, GP_Gen5_8.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        """
        Size - The size code, to be interpreted by resource as appropriate.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def tier(self) -> Optional[pulumi.Input[str]]:
        """
        Tier - The tier of the particular SKU, e.g. Basic. Possible values include: 'Basic', 'GeneralPurpose', 'MemoryOptimized'
        """
        return pulumi.get(self, "tier")

    @tier.setter
    def tier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tier", value)


@pulumi.input_type
class MySQLServerStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class MySQLUserSpecArgs:
    def __init__(__self__, *,
                 db_name: pulumi.Input[str],
                 resource_group: pulumi.Input[str],
                 roles: pulumi.Input[Sequence[pulumi.Input[str]]],
                 server: pulumi.Input[str],
                 admin_secret: Optional[pulumi.Input[str]] = None,
                 admin_secret_key_vault: Optional[pulumi.Input[str]] = None,
                 key_vault_to_store_secrets: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        MySQLUserSpec defines the desired state of MySqlUser
        :param pulumi.Input[str] server: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        :param pulumi.Input[str] admin_secret: optional
        """
        pulumi.set(__self__, "db_name", db_name)
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "server", server)
        if admin_secret is not None:
            pulumi.set(__self__, "admin_secret", admin_secret)
        if admin_secret_key_vault is not None:
            pulumi.set(__self__, "admin_secret_key_vault", admin_secret_key_vault)
        if key_vault_to_store_secrets is not None:
            pulumi.set(__self__, "key_vault_to_store_secrets", key_vault_to_store_secrets)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "db_name")

    @db_name.setter
    def db_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "db_name", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter
    def roles(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter
    def server(self) -> pulumi.Input[str]:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input[str]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="adminSecret")
    def admin_secret(self) -> Optional[pulumi.Input[str]]:
        """
        optional
        """
        return pulumi.get(self, "admin_secret")

    @admin_secret.setter
    def admin_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_secret", value)

    @property
    @pulumi.getter(name="adminSecretKeyVault")
    def admin_secret_key_vault(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_secret_key_vault")

    @admin_secret_key_vault.setter
    def admin_secret_key_vault(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_secret_key_vault", value)

    @property
    @pulumi.getter(name="keyVaultToStoreSecrets")
    def key_vault_to_store_secrets(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_vault_to_store_secrets")

    @key_vault_to_store_secrets.setter
    def key_vault_to_store_secrets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_vault_to_store_secrets", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class MySQLUserStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class MySQLVNetRuleSpecArgs:
    def __init__(__self__, *,
                 resource_group: pulumi.Input[str],
                 server: pulumi.Input[str],
                 subnet_name: pulumi.Input[str],
                 v_net_name: pulumi.Input[str],
                 v_net_resource_group: pulumi.Input[str],
                 ignore_missing_service_endpoint: Optional[pulumi.Input[bool]] = None):
        """
        MySQLVNetRuleSpec defines the desired state of MySQLVNetRule
        :param pulumi.Input[str] resource_group: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "server", server)
        pulumi.set(__self__, "subnet_name", subnet_name)
        pulumi.set(__self__, "v_net_name", v_net_name)
        pulumi.set(__self__, "v_net_resource_group", v_net_resource_group)
        if ignore_missing_service_endpoint is not None:
            pulumi.set(__self__, "ignore_missing_service_endpoint", ignore_missing_service_endpoint)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter
    def server(self) -> pulumi.Input[str]:
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input[str]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="subnetName")
    def subnet_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "subnet_name")

    @subnet_name.setter
    def subnet_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_name", value)

    @property
    @pulumi.getter(name="vNetName")
    def v_net_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "v_net_name")

    @v_net_name.setter
    def v_net_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "v_net_name", value)

    @property
    @pulumi.getter(name="vNetResourceGroup")
    def v_net_resource_group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "v_net_resource_group")

    @v_net_resource_group.setter
    def v_net_resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "v_net_resource_group", value)

    @property
    @pulumi.getter(name="ignoreMissingServiceEndpoint")
    def ignore_missing_service_endpoint(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ignore_missing_service_endpoint")

    @ignore_missing_service_endpoint.setter
    def ignore_missing_service_endpoint(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_missing_service_endpoint", value)


@pulumi.input_type
class MySQLVNetRuleStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class PostgreSQLDatabaseSpecArgs:
    def __init__(__self__, *,
                 resource_group: pulumi.Input[str],
                 server: pulumi.Input[str]):
        """
        PostgreSQLDatabaseSpec defines the desired state of PostgreSQLDatabase
        :param pulumi.Input[str] resource_group: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter
    def server(self) -> pulumi.Input[str]:
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input[str]):
        pulumi.set(self, "server", value)


@pulumi.input_type
class PostgreSQLDatabaseStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class PostgreSQLFirewallRuleSpecArgs:
    def __init__(__self__, *,
                 end_ip_address: pulumi.Input[str],
                 resource_group: pulumi.Input[str],
                 server: pulumi.Input[str],
                 start_ip_address: pulumi.Input[str]):
        """
        PostgreSQLFirewallRuleSpec defines the desired state of PostgreSQLFirewallRule
        :param pulumi.Input[str] resource_group: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        pulumi.set(__self__, "end_ip_address", end_ip_address)
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "server", server)
        pulumi.set(__self__, "start_ip_address", start_ip_address)

    @property
    @pulumi.getter(name="endIpAddress")
    def end_ip_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end_ip_address")

    @end_ip_address.setter
    def end_ip_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_ip_address", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter
    def server(self) -> pulumi.Input[str]:
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input[str]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="startIpAddress")
    def start_ip_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_ip_address")

    @start_ip_address.setter
    def start_ip_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_ip_address", value)


@pulumi.input_type
class PostgreSQLFirewallRuleStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class PostgreSQLServerSpecArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[str],
                 resource_group: pulumi.Input[str],
                 create_mode: Optional[pulumi.Input[str]] = None,
                 key_vault_to_store_secrets: Optional[pulumi.Input[str]] = None,
                 replica_properties: Optional[pulumi.Input['PostgreSQLServerSpecReplicaPropertiesArgs']] = None,
                 server_version: Optional[pulumi.Input[str]] = None,
                 sku: Optional[pulumi.Input['PostgreSQLServerSpecSkuArgs']] = None,
                 ssl_enforcement: Optional[pulumi.Input[str]] = None):
        """
        PostgreSQLServerSpec defines the desired state of PostgreSQLServer
        :param pulumi.Input[str] server_version: ServerVersion enumerates the values for server version.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_group", resource_group)
        if create_mode is not None:
            pulumi.set(__self__, "create_mode", create_mode)
        if key_vault_to_store_secrets is not None:
            pulumi.set(__self__, "key_vault_to_store_secrets", key_vault_to_store_secrets)
        if replica_properties is not None:
            pulumi.set(__self__, "replica_properties", replica_properties)
        if server_version is not None:
            pulumi.set(__self__, "server_version", server_version)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)
        if ssl_enforcement is not None:
            pulumi.set(__self__, "ssl_enforcement", ssl_enforcement)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="createMode")
    def create_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "create_mode")

    @create_mode.setter
    def create_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_mode", value)

    @property
    @pulumi.getter(name="keyVaultToStoreSecrets")
    def key_vault_to_store_secrets(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_vault_to_store_secrets")

    @key_vault_to_store_secrets.setter
    def key_vault_to_store_secrets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_vault_to_store_secrets", value)

    @property
    @pulumi.getter(name="replicaProperties")
    def replica_properties(self) -> Optional[pulumi.Input['PostgreSQLServerSpecReplicaPropertiesArgs']]:
        return pulumi.get(self, "replica_properties")

    @replica_properties.setter
    def replica_properties(self, value: Optional[pulumi.Input['PostgreSQLServerSpecReplicaPropertiesArgs']]):
        pulumi.set(self, "replica_properties", value)

    @property
    @pulumi.getter(name="serverVersion")
    def server_version(self) -> Optional[pulumi.Input[str]]:
        """
        ServerVersion enumerates the values for server version.
        """
        return pulumi.get(self, "server_version")

    @server_version.setter
    def server_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_version", value)

    @property
    @pulumi.getter
    def sku(self) -> Optional[pulumi.Input['PostgreSQLServerSpecSkuArgs']]:
        return pulumi.get(self, "sku")

    @sku.setter
    def sku(self, value: Optional[pulumi.Input['PostgreSQLServerSpecSkuArgs']]):
        pulumi.set(self, "sku", value)

    @property
    @pulumi.getter(name="sslEnforcement")
    def ssl_enforcement(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_enforcement")

    @ssl_enforcement.setter
    def ssl_enforcement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_enforcement", value)


@pulumi.input_type
class PostgreSQLServerSpecReplicaPropertiesArgs:
    def __init__(__self__, *,
                 source_server_id: Optional[pulumi.Input[str]] = None):
        if source_server_id is not None:
            pulumi.set(__self__, "source_server_id", source_server_id)

    @property
    @pulumi.getter(name="sourceServerId")
    def source_server_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_server_id")

    @source_server_id.setter
    def source_server_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_server_id", value)


@pulumi.input_type
class PostgreSQLServerSpecSkuArgs:
    def __init__(__self__, *,
                 capacity: Optional[pulumi.Input[int]] = None,
                 family: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 tier: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] capacity: Capacity - The scale up/out capacity, representing server's compute units.
        :param pulumi.Input[str] family: Family - The family of hardware.
        :param pulumi.Input[str] name: Name - The name of the sku, typically, tier + family + cores, e.g. B_Gen4_1, GP_Gen5_8.
        :param pulumi.Input[str] size: Size - The size code, to be interpreted by resource as appropriate.
        :param pulumi.Input[str] tier: Tier - The tier of the particular SKU, e.g. Basic. Possible values include: 'Basic', 'GeneralPurpose', 'MemoryOptimized'
        """
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Capacity - The scale up/out capacity, representing server's compute units.
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter
    def family(self) -> Optional[pulumi.Input[str]]:
        """
        Family - The family of hardware.
        """
        return pulumi.get(self, "family")

    @family.setter
    def family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "family", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name - The name of the sku, typically, tier + family + cores, e.g. B_Gen4_1, GP_Gen5_8.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        """
        Size - The size code, to be interpreted by resource as appropriate.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def tier(self) -> Optional[pulumi.Input[str]]:
        """
        Tier - The tier of the particular SKU, e.g. Basic. Possible values include: 'Basic', 'GeneralPurpose', 'MemoryOptimized'
        """
        return pulumi.get(self, "tier")

    @tier.setter
    def tier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tier", value)


@pulumi.input_type
class PostgreSQLServerStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class PostgreSQLUserSpecArgs:
    def __init__(__self__, *,
                 db_name: pulumi.Input[str],
                 resource_group: pulumi.Input[str],
                 roles: pulumi.Input[Sequence[pulumi.Input[str]]],
                 server: pulumi.Input[str],
                 admin_secret: Optional[pulumi.Input[str]] = None,
                 admin_secret_key_vault: Optional[pulumi.Input[str]] = None,
                 key_vault_to_store_secrets: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        PostgreSQLUserSpec defines the desired state of PostgreSqlUser
        :param pulumi.Input[str] server: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        :param pulumi.Input[str] admin_secret: optional
        """
        pulumi.set(__self__, "db_name", db_name)
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "server", server)
        if admin_secret is not None:
            pulumi.set(__self__, "admin_secret", admin_secret)
        if admin_secret_key_vault is not None:
            pulumi.set(__self__, "admin_secret_key_vault", admin_secret_key_vault)
        if key_vault_to_store_secrets is not None:
            pulumi.set(__self__, "key_vault_to_store_secrets", key_vault_to_store_secrets)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "db_name")

    @db_name.setter
    def db_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "db_name", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter
    def roles(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter
    def server(self) -> pulumi.Input[str]:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input[str]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="adminSecret")
    def admin_secret(self) -> Optional[pulumi.Input[str]]:
        """
        optional
        """
        return pulumi.get(self, "admin_secret")

    @admin_secret.setter
    def admin_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_secret", value)

    @property
    @pulumi.getter(name="adminSecretKeyVault")
    def admin_secret_key_vault(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_secret_key_vault")

    @admin_secret_key_vault.setter
    def admin_secret_key_vault(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_secret_key_vault", value)

    @property
    @pulumi.getter(name="keyVaultToStoreSecrets")
    def key_vault_to_store_secrets(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_vault_to_store_secrets")

    @key_vault_to_store_secrets.setter
    def key_vault_to_store_secrets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_vault_to_store_secrets", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class PostgreSQLUserStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class PostgreSQLVNetRuleSpecArgs:
    def __init__(__self__, *,
                 resource_group: pulumi.Input[str],
                 server: pulumi.Input[str],
                 subnet_name: pulumi.Input[str],
                 v_net_name: pulumi.Input[str],
                 v_net_resource_group: pulumi.Input[str],
                 ignore_missing_service_endpoint: Optional[pulumi.Input[bool]] = None):
        """
        PotgreSQLVNetRuleSpec defines the desired state of PostgreSQLVNetRule
        :param pulumi.Input[str] resource_group: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "server", server)
        pulumi.set(__self__, "subnet_name", subnet_name)
        pulumi.set(__self__, "v_net_name", v_net_name)
        pulumi.set(__self__, "v_net_resource_group", v_net_resource_group)
        if ignore_missing_service_endpoint is not None:
            pulumi.set(__self__, "ignore_missing_service_endpoint", ignore_missing_service_endpoint)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter
    def server(self) -> pulumi.Input[str]:
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input[str]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="subnetName")
    def subnet_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "subnet_name")

    @subnet_name.setter
    def subnet_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_name", value)

    @property
    @pulumi.getter(name="vNetName")
    def v_net_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "v_net_name")

    @v_net_name.setter
    def v_net_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "v_net_name", value)

    @property
    @pulumi.getter(name="vNetResourceGroup")
    def v_net_resource_group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "v_net_resource_group")

    @v_net_resource_group.setter
    def v_net_resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "v_net_resource_group", value)

    @property
    @pulumi.getter(name="ignoreMissingServiceEndpoint")
    def ignore_missing_service_endpoint(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ignore_missing_service_endpoint")

    @ignore_missing_service_endpoint.setter
    def ignore_missing_service_endpoint(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_missing_service_endpoint", value)


@pulumi.input_type
class PostgreSQLVNetRuleStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class RedisCacheActionSpecArgs:
    def __init__(__self__, *,
                 action_name: pulumi.Input[str],
                 cache_name: pulumi.Input[str],
                 resource_group: pulumi.Input[str],
                 key_vault_to_store_secrets: Optional[pulumi.Input[str]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None,
                 shard_id: Optional[pulumi.Input[int]] = None):
        """
        RedisCacheActionSpec defines the desired state of RedisCacheAction
        """
        pulumi.set(__self__, "action_name", action_name)
        pulumi.set(__self__, "cache_name", cache_name)
        pulumi.set(__self__, "resource_group", resource_group)
        if key_vault_to_store_secrets is not None:
            pulumi.set(__self__, "key_vault_to_store_secrets", key_vault_to_store_secrets)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)
        if shard_id is not None:
            pulumi.set(__self__, "shard_id", shard_id)

    @property
    @pulumi.getter(name="actionName")
    def action_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "action_name")

    @action_name.setter
    def action_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "action_name", value)

    @property
    @pulumi.getter(name="cacheName")
    def cache_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cache_name")

    @cache_name.setter
    def cache_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cache_name", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="keyVaultToStoreSecrets")
    def key_vault_to_store_secrets(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_vault_to_store_secrets")

    @key_vault_to_store_secrets.setter
    def key_vault_to_store_secrets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_vault_to_store_secrets", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_name", value)

    @property
    @pulumi.getter(name="shardID")
    def shard_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "shard_id")

    @shard_id.setter
    def shard_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "shard_id", value)


@pulumi.input_type
class RedisCacheActionStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class RedisCacheFirewallRuleSpecArgs:
    def __init__(__self__, *,
                 properties: pulumi.Input['RedisCacheFirewallRuleSpecPropertiesArgs'],
                 redis_cache: pulumi.Input[str],
                 resource_group: pulumi.Input[str]):
        """
        RedisCacheFirewallRuleSpec defines the desired state of RedisCacheFirewallRule
        :param pulumi.Input['RedisCacheFirewallRuleSpecPropertiesArgs'] properties: RedisCacheFirewallRuleProperties the parameters of the RedisCacheFirewallRule
        """
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "redis_cache", redis_cache)
        pulumi.set(__self__, "resource_group", resource_group)

    @property
    @pulumi.getter
    def properties(self) -> pulumi.Input['RedisCacheFirewallRuleSpecPropertiesArgs']:
        """
        RedisCacheFirewallRuleProperties the parameters of the RedisCacheFirewallRule
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: pulumi.Input['RedisCacheFirewallRuleSpecPropertiesArgs']):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="redisCache")
    def redis_cache(self) -> pulumi.Input[str]:
        return pulumi.get(self, "redis_cache")

    @redis_cache.setter
    def redis_cache(self, value: pulumi.Input[str]):
        pulumi.set(self, "redis_cache", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)


@pulumi.input_type
class RedisCacheFirewallRuleSpecPropertiesArgs:
    def __init__(__self__, *,
                 end_ip: pulumi.Input[str],
                 start_ip: pulumi.Input[str]):
        """
        RedisCacheFirewallRuleProperties the parameters of the RedisCacheFirewallRule
        """
        pulumi.set(__self__, "end_ip", end_ip)
        pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIP")
    def end_ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end_ip")

    @end_ip.setter
    def end_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_ip", value)

    @property
    @pulumi.getter(name="startIP")
    def start_ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_ip")

    @start_ip.setter
    def start_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_ip", value)


@pulumi.input_type
class RedisCacheFirewallRuleStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class RedisCacheSpecArgs:
    def __init__(__self__, *,
                 resource_group: pulumi.Input[str],
                 key_vault_to_store_secrets: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input['RedisCacheSpecPropertiesArgs']] = None,
                 secret_name: Optional[pulumi.Input[str]] = None):
        """
        RedisCacheSpec defines the desired state of RedisCache
        :param pulumi.Input['RedisCacheSpecPropertiesArgs'] properties: RedisCacheProperties the properties of the Redis Cache.
        """
        pulumi.set(__self__, "resource_group", resource_group)
        if key_vault_to_store_secrets is not None:
            pulumi.set(__self__, "key_vault_to_store_secrets", key_vault_to_store_secrets)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="keyVaultToStoreSecrets")
    def key_vault_to_store_secrets(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_vault_to_store_secrets")

    @key_vault_to_store_secrets.setter
    def key_vault_to_store_secrets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_vault_to_store_secrets", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input['RedisCacheSpecPropertiesArgs']]:
        """
        RedisCacheProperties the properties of the Redis Cache.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input['RedisCacheSpecPropertiesArgs']]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class RedisCacheSpecPropertiesArgs:
    def __init__(__self__, *,
                 configuration: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 enable_non_ssl_port: Optional[pulumi.Input[bool]] = None,
                 shard_count: Optional[pulumi.Input[int]] = None,
                 sku: Optional[pulumi.Input['RedisCacheSpecPropertiesSkuArgs']] = None,
                 static_ip: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None):
        """
        RedisCacheProperties the properties of the Redis Cache.
        :param pulumi.Input['RedisCacheSpecPropertiesSkuArgs'] sku: RedisCacheSku the SKU of the Redis Cache.
        """
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if enable_non_ssl_port is not None:
            pulumi.set(__self__, "enable_non_ssl_port", enable_non_ssl_port)
        if shard_count is not None:
            pulumi.set(__self__, "shard_count", shard_count)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)
        if static_ip is not None:
            pulumi.set(__self__, "static_ip", static_ip)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter(name="enableNonSslPort")
    def enable_non_ssl_port(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_non_ssl_port")

    @enable_non_ssl_port.setter
    def enable_non_ssl_port(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_non_ssl_port", value)

    @property
    @pulumi.getter(name="shardCount")
    def shard_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "shard_count")

    @shard_count.setter
    def shard_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "shard_count", value)

    @property
    @pulumi.getter
    def sku(self) -> Optional[pulumi.Input['RedisCacheSpecPropertiesSkuArgs']]:
        """
        RedisCacheSku the SKU of the Redis Cache.
        """
        return pulumi.get(self, "sku")

    @sku.setter
    def sku(self, value: Optional[pulumi.Input['RedisCacheSpecPropertiesSkuArgs']]):
        pulumi.set(self, "sku", value)

    @property
    @pulumi.getter(name="staticIp")
    def static_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "static_ip")

    @static_ip.setter
    def static_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "static_ip", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)


@pulumi.input_type
class RedisCacheSpecPropertiesSkuArgs:
    def __init__(__self__, *,
                 capacity: Optional[pulumi.Input[int]] = None,
                 family: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        RedisCacheSku the SKU of the Redis Cache.
        :param pulumi.Input[str] name: Name - The SKU name. Required for account creation; optional for update. Possible values include: 'StandardLRS', 'StandardGRS', 'StandardRAGRS', 'StandardZRS', 'PremiumLRS', 'PremiumZRS', 'StandardGZRS', 'StandardRAGZRS'
        """
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter
    def family(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "family")

    @family.setter
    def family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "family", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name - The SKU name. Required for account creation; optional for update. Possible values include: 'StandardLRS', 'StandardGRS', 'StandardRAGRS', 'StandardZRS', 'PremiumLRS', 'PremiumZRS', 'StandardGZRS', 'StandardRAGZRS'
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class RedisCacheStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class ResourceGroupSpecArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[str]):
        """
        ResourceGroupSpec defines the desired state of ResourceGroup
        :param pulumi.Input[str] location: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        pulumi.set(__self__, "location", location)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)


@pulumi.input_type
class ResourceGroupStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class StorageAccountAdditionalResourcesArgs:
    def __init__(__self__, *,
                 secrets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        StorageAccountAdditionalResources holds the additional resources
        """
        if secrets is not None:
            pulumi.set(__self__, "secrets", secrets)

    @property
    @pulumi.getter
    def secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "secrets")

    @secrets.setter
    def secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "secrets", value)


@pulumi.input_type
class StorageAccountOutputArgs:
    def __init__(__self__, *,
                 connection_string1: Optional[pulumi.Input[str]] = None,
                 connection_string2: Optional[pulumi.Input[str]] = None,
                 key1: Optional[pulumi.Input[str]] = None,
                 key2: Optional[pulumi.Input[str]] = None,
                 storage_account_name: Optional[pulumi.Input[str]] = None):
        """
        StorageAccountOutput is the object that contains the output from creating a Storage Account object
        """
        if connection_string1 is not None:
            pulumi.set(__self__, "connection_string1", connection_string1)
        if connection_string2 is not None:
            pulumi.set(__self__, "connection_string2", connection_string2)
        if key1 is not None:
            pulumi.set(__self__, "key1", key1)
        if key2 is not None:
            pulumi.set(__self__, "key2", key2)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)

    @property
    @pulumi.getter(name="connectionString1")
    def connection_string1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection_string1")

    @connection_string1.setter
    def connection_string1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_string1", value)

    @property
    @pulumi.getter(name="connectionString2")
    def connection_string2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection_string2")

    @connection_string2.setter
    def connection_string2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_string2", value)

    @property
    @pulumi.getter
    def key1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key1")

    @key1.setter
    def key1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key1", value)

    @property
    @pulumi.getter
    def key2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key2")

    @key2.setter
    def key2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key2", value)

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage_account_name")

    @storage_account_name.setter
    def storage_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_account_name", value)


@pulumi.input_type
class StorageAccountSpecArgs:
    def __init__(__self__, *,
                 resource_group: pulumi.Input[str],
                 access_tier: Optional[pulumi.Input[str]] = None,
                 data_lake_enabled: Optional[pulumi.Input[bool]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 network_rule: Optional[pulumi.Input['StorageAccountSpecNetworkRuleArgs']] = None,
                 sku: Optional[pulumi.Input['StorageAccountSpecSkuArgs']] = None,
                 supports_https_traffic_only: Optional[pulumi.Input[bool]] = None):
        """
        StorageAccountSpec defines the desired state of Storage
        :param pulumi.Input[str] access_tier: StorageAccountAccessTier enumerates the values for access tier. Only one of the following access tiers may be specified. If none of the following access tiers is specified, the default one is Hot.
        :param pulumi.Input[str] kind: StorageAccountKind enumerates the values for kind. Only one of the following kinds may be specified. If none of the following kinds is specified, the default one is StorageV2.
        :param pulumi.Input['StorageAccountSpecSkuArgs'] sku: StorageAccountSku the SKU of the storage account.
        """
        pulumi.set(__self__, "resource_group", resource_group)
        if access_tier is not None:
            pulumi.set(__self__, "access_tier", access_tier)
        if data_lake_enabled is not None:
            pulumi.set(__self__, "data_lake_enabled", data_lake_enabled)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if network_rule is not None:
            pulumi.set(__self__, "network_rule", network_rule)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)
        if supports_https_traffic_only is not None:
            pulumi.set(__self__, "supports_https_traffic_only", supports_https_traffic_only)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="accessTier")
    def access_tier(self) -> Optional[pulumi.Input[str]]:
        """
        StorageAccountAccessTier enumerates the values for access tier. Only one of the following access tiers may be specified. If none of the following access tiers is specified, the default one is Hot.
        """
        return pulumi.get(self, "access_tier")

    @access_tier.setter
    def access_tier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_tier", value)

    @property
    @pulumi.getter(name="dataLakeEnabled")
    def data_lake_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "data_lake_enabled")

    @data_lake_enabled.setter
    def data_lake_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "data_lake_enabled", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        StorageAccountKind enumerates the values for kind. Only one of the following kinds may be specified. If none of the following kinds is specified, the default one is StorageV2.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="networkRule")
    def network_rule(self) -> Optional[pulumi.Input['StorageAccountSpecNetworkRuleArgs']]:
        return pulumi.get(self, "network_rule")

    @network_rule.setter
    def network_rule(self, value: Optional[pulumi.Input['StorageAccountSpecNetworkRuleArgs']]):
        pulumi.set(self, "network_rule", value)

    @property
    @pulumi.getter
    def sku(self) -> Optional[pulumi.Input['StorageAccountSpecSkuArgs']]:
        """
        StorageAccountSku the SKU of the storage account.
        """
        return pulumi.get(self, "sku")

    @sku.setter
    def sku(self, value: Optional[pulumi.Input['StorageAccountSpecSkuArgs']]):
        pulumi.set(self, "sku", value)

    @property
    @pulumi.getter(name="supportsHttpsTrafficOnly")
    def supports_https_traffic_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "supports_https_traffic_only")

    @supports_https_traffic_only.setter
    def supports_https_traffic_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "supports_https_traffic_only", value)


@pulumi.input_type
class StorageAccountSpecNetworkRuleArgs:
    def __init__(__self__, *,
                 bypass: Optional[pulumi.Input[str]] = None,
                 default_action: Optional[pulumi.Input[str]] = None,
                 ip_rules: Optional[pulumi.Input[Sequence[pulumi.Input['StorageAccountSpecNetworkRuleIpRulesArgs']]]] = None,
                 virtual_network_rules: Optional[pulumi.Input[Sequence[pulumi.Input['StorageAccountSpecNetworkRuleVirtualNetworkRulesArgs']]]] = None):
        """
        :param pulumi.Input[str] bypass: Bypass - Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, "Logging, Metrics"), or None to bypass none of those traffics. Possible values include: 'None', 'Logging', 'Metrics', 'AzureServices'
        :param pulumi.Input[str] default_action: DefaultAction - Specifies the default action of allow or deny when no other rules match. Possible values include: 'DefaultActionAllow', 'DefaultActionDeny'
        :param pulumi.Input[Sequence[pulumi.Input['StorageAccountSpecNetworkRuleIpRulesArgs']]] ip_rules: IPRules - Sets the IP ACL rules
        :param pulumi.Input[Sequence[pulumi.Input['StorageAccountSpecNetworkRuleVirtualNetworkRulesArgs']]] virtual_network_rules: VirtualNetworkRules - Sets the virtual network rules
        """
        if bypass is not None:
            pulumi.set(__self__, "bypass", bypass)
        if default_action is not None:
            pulumi.set(__self__, "default_action", default_action)
        if ip_rules is not None:
            pulumi.set(__self__, "ip_rules", ip_rules)
        if virtual_network_rules is not None:
            pulumi.set(__self__, "virtual_network_rules", virtual_network_rules)

    @property
    @pulumi.getter
    def bypass(self) -> Optional[pulumi.Input[str]]:
        """
        Bypass - Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, "Logging, Metrics"), or None to bypass none of those traffics. Possible values include: 'None', 'Logging', 'Metrics', 'AzureServices'
        """
        return pulumi.get(self, "bypass")

    @bypass.setter
    def bypass(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bypass", value)

    @property
    @pulumi.getter(name="defaultAction")
    def default_action(self) -> Optional[pulumi.Input[str]]:
        """
        DefaultAction - Specifies the default action of allow or deny when no other rules match. Possible values include: 'DefaultActionAllow', 'DefaultActionDeny'
        """
        return pulumi.get(self, "default_action")

    @default_action.setter
    def default_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_action", value)

    @property
    @pulumi.getter(name="ipRules")
    def ip_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StorageAccountSpecNetworkRuleIpRulesArgs']]]]:
        """
        IPRules - Sets the IP ACL rules
        """
        return pulumi.get(self, "ip_rules")

    @ip_rules.setter
    def ip_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StorageAccountSpecNetworkRuleIpRulesArgs']]]]):
        pulumi.set(self, "ip_rules", value)

    @property
    @pulumi.getter(name="virtualNetworkRules")
    def virtual_network_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StorageAccountSpecNetworkRuleVirtualNetworkRulesArgs']]]]:
        """
        VirtualNetworkRules - Sets the virtual network rules
        """
        return pulumi.get(self, "virtual_network_rules")

    @virtual_network_rules.setter
    def virtual_network_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StorageAccountSpecNetworkRuleVirtualNetworkRulesArgs']]]]):
        pulumi.set(self, "virtual_network_rules", value)


@pulumi.input_type
class StorageAccountSpecNetworkRuleIpRulesArgs:
    def __init__(__self__, *,
                 ip_address_or_range: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ip_address_or_range: IPAddressOrRange - Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.
        """
        if ip_address_or_range is not None:
            pulumi.set(__self__, "ip_address_or_range", ip_address_or_range)

    @property
    @pulumi.getter(name="ipAddressOrRange")
    def ip_address_or_range(self) -> Optional[pulumi.Input[str]]:
        """
        IPAddressOrRange - Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.
        """
        return pulumi.get(self, "ip_address_or_range")

    @ip_address_or_range.setter
    def ip_address_or_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address_or_range", value)


@pulumi.input_type
class StorageAccountSpecNetworkRuleVirtualNetworkRulesArgs:
    def __init__(__self__, *,
                 subnet_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] subnet_id: SubnetId - Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.
        """
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        SubnetId - Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)


@pulumi.input_type
class StorageAccountSpecSkuArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        StorageAccountSku the SKU of the storage account.
        :param pulumi.Input[str] name: Name - The SKU name. Required for account creation; optional for update. Possible values include: 'StandardLRS', 'StandardGRS', 'StandardRAGRS', 'StandardZRS', 'PremiumLRS', 'PremiumZRS', 'StandardGZRS', 'StandardRAGZRS'
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name - The SKU name. Required for account creation; optional for update. Possible values include: 'StandardLRS', 'StandardGRS', 'StandardRAGRS', 'StandardZRS', 'PremiumLRS', 'PremiumZRS', 'StandardGZRS', 'StandardRAGZRS'
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class StorageAccountStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class VirtualNetworkSpecArgs:
    def __init__(__self__, *,
                 address_space: pulumi.Input[str],
                 location: pulumi.Input[str],
                 resource_group: pulumi.Input[str],
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualNetworkSpecSubnetsArgs']]]] = None):
        """
        VirtualNetworkSpec defines the desired state of VirtualNetwork
        :param pulumi.Input[str] location: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        pulumi.set(__self__, "address_space", address_space)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_group", resource_group)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)

    @property
    @pulumi.getter(name="addressSpace")
    def address_space(self) -> pulumi.Input[str]:
        return pulumi.get(self, "address_space")

    @address_space.setter
    def address_space(self, value: pulumi.Input[str]):
        pulumi.set(self, "address_space", value)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualNetworkSpecSubnetsArgs']]]]:
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualNetworkSpecSubnetsArgs']]]]):
        pulumi.set(self, "subnets", value)


@pulumi.input_type
class VirtualNetworkSpecSubnetsArgs:
    def __init__(__self__, *,
                 subnet_address_prefix: pulumi.Input[str],
                 subnet_name: pulumi.Input[str],
                 service_endpoints: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        VNetSubnets defines subnets for this vnet
        :param pulumi.Input[str] subnet_name: INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        pulumi.set(__self__, "subnet_address_prefix", subnet_address_prefix)
        pulumi.set(__self__, "subnet_name", subnet_name)
        if service_endpoints is not None:
            pulumi.set(__self__, "service_endpoints", service_endpoints)

    @property
    @pulumi.getter(name="subnetAddressPrefix")
    def subnet_address_prefix(self) -> pulumi.Input[str]:
        return pulumi.get(self, "subnet_address_prefix")

    @subnet_address_prefix.setter
    def subnet_address_prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_address_prefix", value)

    @property
    @pulumi.getter(name="subnetName")
    def subnet_name(self) -> pulumi.Input[str]:
        """
        INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "subnet_name")

    @subnet_name.setter
    def subnet_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_name", value)

    @property
    @pulumi.getter(name="serviceEndpoints")
    def service_endpoints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "service_endpoints")

    @service_endpoints.setter
    def service_endpoints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "service_endpoints", value)


@pulumi.input_type
class VirtualNetworkStatusArgs:
    def __init__(__self__, *,
                 completed: Optional[pulumi.Input[str]] = None,
                 contains_update: Optional[pulumi.Input[bool]] = None,
                 failed_provisioning: Optional[pulumi.Input[bool]] = None,
                 flattened_secrets: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 polling_url: Optional[pulumi.Input[str]] = None,
                 provisioned: Optional[pulumi.Input[bool]] = None,
                 provisioning: Optional[pulumi.Input[bool]] = None,
                 requested: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 spec_hash: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "completed")

    @completed.setter
    def completed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "completed", value)

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contains_update")

    @contains_update.setter
    def contains_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contains_update", value)

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed_provisioning")

    @failed_provisioning.setter
    def failed_provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed_provisioning", value)

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "flattened_secrets")

    @flattened_secrets.setter
    def flattened_secrets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flattened_secrets", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "polling_url")

    @polling_url.setter
    def polling_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polling_url", value)

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioned")

    @provisioned.setter
    def provisioned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioned", value)

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "provisioning")

    @provisioning.setter
    def provisioning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "provisioning", value)

    @property
    @pulumi.getter
    def requested(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "requested")

    @requested.setter
    def requested(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec_hash")

    @spec_hash.setter
    def spec_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec_hash", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)



# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'APIMgmtAPISpec',
    'APIMgmtAPISpecProperties',
    'APIMgmtAPISpecPropertiesApiVersionSets',
    'APIMgmtAPIStatus',
    'ApimServiceSpec',
    'ApimServiceStatus',
    'AppInsightsApiKeySpec',
    'AppInsightsApiKeyStatus',
    'AppInsightsSpec',
    'AppInsightsStatus',
    'AzureLoadBalancerSpec',
    'AzureLoadBalancerStatus',
    'AzureNetworkInterfaceSpec',
    'AzureNetworkInterfaceStatus',
    'AzurePublicIPAddressSpec',
    'AzurePublicIPAddressStatus',
    'AzureSQLManagedUserSpec',
    'AzureSQLManagedUserStatus',
    'AzureSQLUserSpec',
    'AzureSQLUserStatus',
    'AzureSQLVNetRuleSpec',
    'AzureSQLVNetRuleStatus',
    'AzureSqlActionSpec',
    'AzureSqlActionStatus',
    'AzureSqlDatabaseSpec',
    'AzureSqlDatabaseStatus',
    'AzureSqlFailoverGroupSpec',
    'AzureSqlFailoverGroupStatus',
    'AzureSqlFirewallRuleSpec',
    'AzureSqlFirewallRuleStatus',
    'AzureSqlServerSpec',
    'AzureSqlServerStatus',
    'AzureVMScaleSetSpec',
    'AzureVMScaleSetStatus',
    'AzureVirtualMachineExtensionSpec',
    'AzureVirtualMachineExtensionStatus',
    'AzureVirtualMachineSpec',
    'AzureVirtualMachineStatus',
    'BlobContainerSpec',
    'BlobContainerStatus',
    'ConsumerGroupSpec',
    'ConsumerGroupStatus',
    'CosmosDBSpec',
    'CosmosDBSpecLocations',
    'CosmosDBSpecProperties',
    'CosmosDBSpecPropertiesCapabilities',
    'CosmosDBSpecVirtualNetworkRules',
    'CosmosDBStatus',
    'EventhubNamespaceSpec',
    'EventhubNamespaceSpecNetworkRule',
    'EventhubNamespaceSpecNetworkRuleIpRules',
    'EventhubNamespaceSpecNetworkRuleVirtualNetworkRules',
    'EventhubNamespaceSpecProperties',
    'EventhubNamespaceSpecSku',
    'EventhubNamespaceStatus',
    'EventhubSpec',
    'EventhubSpecAuthorizationRule',
    'EventhubSpecProperties',
    'EventhubSpecPropertiesCaptureDescription',
    'EventhubSpecPropertiesCaptureDescriptionDestination',
    'EventhubSpecPropertiesCaptureDescriptionDestinationStorageAccount',
    'EventhubStatus',
    'KeyVaultKeySpec',
    'KeyVaultKeyStatus',
    'KeyVaultSpec',
    'KeyVaultSpecAccessPolicies',
    'KeyVaultSpecAccessPoliciesPermissions',
    'KeyVaultSpecNetworkPolicies',
    'KeyVaultSpecSku',
    'KeyVaultStatus',
    'MySQLDatabaseSpec',
    'MySQLDatabaseStatus',
    'MySQLFirewallRuleSpec',
    'MySQLFirewallRuleStatus',
    'MySQLServerSpec',
    'MySQLServerSpecReplicaProperties',
    'MySQLServerSpecSku',
    'MySQLServerStatus',
    'MySQLUserSpec',
    'MySQLUserStatus',
    'MySQLVNetRuleSpec',
    'MySQLVNetRuleStatus',
    'PostgreSQLDatabaseSpec',
    'PostgreSQLDatabaseStatus',
    'PostgreSQLFirewallRuleSpec',
    'PostgreSQLFirewallRuleStatus',
    'PostgreSQLServerSpec',
    'PostgreSQLServerSpecReplicaProperties',
    'PostgreSQLServerSpecSku',
    'PostgreSQLServerStatus',
    'PostgreSQLUserSpec',
    'PostgreSQLUserStatus',
    'PostgreSQLVNetRuleSpec',
    'PostgreSQLVNetRuleStatus',
    'RedisCacheActionSpec',
    'RedisCacheActionStatus',
    'RedisCacheFirewallRuleSpec',
    'RedisCacheFirewallRuleSpecProperties',
    'RedisCacheFirewallRuleStatus',
    'RedisCacheSpec',
    'RedisCacheSpecProperties',
    'RedisCacheSpecPropertiesSku',
    'RedisCacheStatus',
    'ResourceGroupSpec',
    'ResourceGroupStatus',
    'StorageAccountAdditionalResources',
    'StorageAccountOutput',
    'StorageAccountSpec',
    'StorageAccountSpecNetworkRule',
    'StorageAccountSpecNetworkRuleIpRules',
    'StorageAccountSpecNetworkRuleVirtualNetworkRules',
    'StorageAccountSpecSku',
    'StorageAccountStatus',
    'VirtualNetworkSpec',
    'VirtualNetworkSpecSubnets',
    'VirtualNetworkStatus',
]

@pulumi.output_type
class APIMgmtAPISpec(dict):
    """
    APIMgmtSpec defines the desired state of APIMgmt
    """
    def __init__(__self__, *,
                 api_id: str,
                 api_service: str,
                 location: str,
                 properties: 'outputs.APIMgmtAPISpecProperties',
                 resource_group: str):
        """
        APIMgmtSpec defines the desired state of APIMgmt
        """
        pulumi.set(__self__, "api_id", api_id)
        pulumi.set(__self__, "api_service", api_service)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "resource_group", resource_group)

    @property
    @pulumi.getter(name="apiId")
    def api_id(self) -> str:
        return pulumi.get(self, "api_id")

    @property
    @pulumi.getter(name="apiService")
    def api_service(self) -> str:
        return pulumi.get(self, "api_service")

    @property
    @pulumi.getter
    def location(self) -> str:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def properties(self) -> 'outputs.APIMgmtAPISpecProperties':
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        return pulumi.get(self, "resource_group")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APIMgmtAPISpecProperties(dict):
    def __init__(__self__, *,
                 api_revision: Optional[str] = None,
                 api_revision_description: Optional[str] = None,
                 api_version: Optional[str] = None,
                 api_version_description: Optional[str] = None,
                 api_version_set_id: Optional[str] = None,
                 api_version_sets: Optional['outputs.APIMgmtAPISpecPropertiesApiVersionSets'] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 format: Optional[str] = None,
                 is_current: Optional[bool] = None,
                 is_online: Optional[bool] = None,
                 path: Optional[str] = None,
                 protocols: Optional[Sequence[str]] = None,
                 service_url: Optional[str] = None,
                 source_api_id: Optional[str] = None,
                 subscription_required: Optional[bool] = None):
        """
        :param str api_revision: APIRevision - Describes the Revision of the Api. If no value is provided, default revision 1 is created
        :param str api_revision_description: APIRevisionDescription - Description of the Api Revision.
        :param str api_version: APIVersion - Indicates the Version identifier of the API if the API is versioned
        :param str api_version_description: APIVersionDescription - Description of the Api Version.
        :param str api_version_set_id: APIVersionSetID - A resource identifier for the related ApiVersionSet.
        :param 'APIMgmtAPISpecPropertiesApiVersionSetsArgs' api_version_sets: APIVersionSet - APIVersionSetContractDetails an API Version Set contains the common configuration for a set of API versions.
        :param str description: Description - Description of the API. May include HTML formatting tags.
        :param str display_name: DisplayName - API name. Must be 1 to 300 characters long.
        :param str format:  Format - Format of the Content in which the API is getting imported. Possible values include: 	'WadlXML', 'WadlLinkJSON', 'SwaggerJSON', 'SwaggerLinkJSON', 'Wsdl', 'WsdlLink', 'Openapi', 'Openapijson', 'OpenapiLink'
        :param bool is_current: IsCurrent - Indicates if API revision is current api revision.
        :param bool is_online: IsOnline - READ-ONLY; Indicates if API revision is accessible via the gateway.
        :param str path:  Path - Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. 	It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API.
        :param Sequence[str] protocols: Protocols - Describes on which protocols the operations in this API can be invoked.
        :param str service_url: ServiceURL - Absolute URL of the backend service implementing this API. Cannot be more than 2000 characters long.
        :param str source_api_id: SourceAPIID - API identifier of the source API.
        :param bool subscription_required: SubscriptionRequired - Specifies whether an API or Product subscription is required for accessing the API.
        """
        if api_revision is not None:
            pulumi.set(__self__, "api_revision", api_revision)
        if api_revision_description is not None:
            pulumi.set(__self__, "api_revision_description", api_revision_description)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if api_version_description is not None:
            pulumi.set(__self__, "api_version_description", api_version_description)
        if api_version_set_id is not None:
            pulumi.set(__self__, "api_version_set_id", api_version_set_id)
        if api_version_sets is not None:
            pulumi.set(__self__, "api_version_sets", api_version_sets)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if is_current is not None:
            pulumi.set(__self__, "is_current", is_current)
        if is_online is not None:
            pulumi.set(__self__, "is_online", is_online)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if service_url is not None:
            pulumi.set(__self__, "service_url", service_url)
        if source_api_id is not None:
            pulumi.set(__self__, "source_api_id", source_api_id)
        if subscription_required is not None:
            pulumi.set(__self__, "subscription_required", subscription_required)

    @property
    @pulumi.getter(name="apiRevision")
    def api_revision(self) -> Optional[str]:
        """
        APIRevision - Describes the Revision of the Api. If no value is provided, default revision 1 is created
        """
        return pulumi.get(self, "api_revision")

    @property
    @pulumi.getter(name="apiRevisionDescription")
    def api_revision_description(self) -> Optional[str]:
        """
        APIRevisionDescription - Description of the Api Revision.
        """
        return pulumi.get(self, "api_revision_description")

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        """
        APIVersion - Indicates the Version identifier of the API if the API is versioned
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter(name="apiVersionDescription")
    def api_version_description(self) -> Optional[str]:
        """
        APIVersionDescription - Description of the Api Version.
        """
        return pulumi.get(self, "api_version_description")

    @property
    @pulumi.getter(name="apiVersionSetId")
    def api_version_set_id(self) -> Optional[str]:
        """
        APIVersionSetID - A resource identifier for the related ApiVersionSet.
        """
        return pulumi.get(self, "api_version_set_id")

    @property
    @pulumi.getter(name="apiVersionSets")
    def api_version_sets(self) -> Optional['outputs.APIMgmtAPISpecPropertiesApiVersionSets']:
        """
        APIVersionSet - APIVersionSetContractDetails an API Version Set contains the common configuration for a set of API versions.
        """
        return pulumi.get(self, "api_version_sets")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description - Description of the API. May include HTML formatting tags.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        DisplayName - API name. Must be 1 to 300 characters long.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
         Format - Format of the Content in which the API is getting imported. Possible values include: 	'WadlXML', 'WadlLinkJSON', 'SwaggerJSON', 'SwaggerLinkJSON', 'Wsdl', 'WsdlLink', 'Openapi', 'Openapijson', 'OpenapiLink'
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="isCurrent")
    def is_current(self) -> Optional[bool]:
        """
        IsCurrent - Indicates if API revision is current api revision.
        """
        return pulumi.get(self, "is_current")

    @property
    @pulumi.getter(name="isOnline")
    def is_online(self) -> Optional[bool]:
        """
        IsOnline - READ-ONLY; Indicates if API revision is accessible via the gateway.
        """
        return pulumi.get(self, "is_online")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
         Path - Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. 	It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def protocols(self) -> Optional[Sequence[str]]:
        """
        Protocols - Describes on which protocols the operations in this API can be invoked.
        """
        return pulumi.get(self, "protocols")

    @property
    @pulumi.getter(name="serviceUrl")
    def service_url(self) -> Optional[str]:
        """
        ServiceURL - Absolute URL of the backend service implementing this API. Cannot be more than 2000 characters long.
        """
        return pulumi.get(self, "service_url")

    @property
    @pulumi.getter(name="sourceApiId")
    def source_api_id(self) -> Optional[str]:
        """
        SourceAPIID - API identifier of the source API.
        """
        return pulumi.get(self, "source_api_id")

    @property
    @pulumi.getter(name="subscriptionRequired")
    def subscription_required(self) -> Optional[bool]:
        """
        SubscriptionRequired - Specifies whether an API or Product subscription is required for accessing the API.
        """
        return pulumi.get(self, "subscription_required")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APIMgmtAPISpecPropertiesApiVersionSets(dict):
    """
    APIVersionSet - APIVersionSetContractDetails an API Version Set contains the common configuration for a set of API versions.
    """
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        """
        APIVersionSet - APIVersionSetContractDetails an API Version Set contains the common configuration for a set of API versions.
        :param str description: Description - Description of API Version Set.
        :param str id: ID - Identifier for existing API Version Set. Omit this value to create a new Version Set.
        :param str name: Name - The display Name of the API Version Set.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description - Description of API Version Set.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        ID - Identifier for existing API Version Set. Omit this value to create a new Version Set.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name - The display Name of the API Version Set.
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APIMgmtAPIStatus(dict):
    """
    ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
    """
    def __init__(__self__, *,
                 completed: Optional[str] = None,
                 contains_update: Optional[bool] = None,
                 failed_provisioning: Optional[bool] = None,
                 flattened_secrets: Optional[bool] = None,
                 message: Optional[str] = None,
                 output: Optional[str] = None,
                 polling_url: Optional[str] = None,
                 provisioned: Optional[bool] = None,
                 provisioning: Optional[bool] = None,
                 requested: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 spec_hash: Optional[str] = None,
                 state: Optional[str] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[str]:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[bool]:
        return pulumi.get(self, "contains_update")

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "failed_provisioning")

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[bool]:
        return pulumi.get(self, "flattened_secrets")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def output(self) -> Optional[str]:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[str]:
        return pulumi.get(self, "polling_url")

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[bool]:
        return pulumi.get(self, "provisioned")

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter
    def requested(self) -> Optional[str]:
        return pulumi.get(self, "requested")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[str]:
        return pulumi.get(self, "spec_hash")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApimServiceSpec(dict):
    """
    ApimServiceSpec defines the desired state of ApimService
    """
    def __init__(__self__, *,
                 location: str,
                 publisher_email: str,
                 publisher_name: str,
                 resource_group: str,
                 vnet_resource_group: str,
                 app_insights_name: Optional[str] = None,
                 app_insights_resource_group: Optional[str] = None,
                 tier: Optional[str] = None,
                 vnet_name: Optional[str] = None,
                 vnet_subnet_name: Optional[str] = None,
                 vnet_type: Optional[str] = None):
        """
        ApimServiceSpec defines the desired state of ApimService
        :param str tier: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "publisher_email", publisher_email)
        pulumi.set(__self__, "publisher_name", publisher_name)
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "vnet_resource_group", vnet_resource_group)
        if app_insights_name is not None:
            pulumi.set(__self__, "app_insights_name", app_insights_name)
        if app_insights_resource_group is not None:
            pulumi.set(__self__, "app_insights_resource_group", app_insights_resource_group)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)
        if vnet_name is not None:
            pulumi.set(__self__, "vnet_name", vnet_name)
        if vnet_subnet_name is not None:
            pulumi.set(__self__, "vnet_subnet_name", vnet_subnet_name)
        if vnet_type is not None:
            pulumi.set(__self__, "vnet_type", vnet_type)

    @property
    @pulumi.getter
    def location(self) -> str:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="publisherEmail")
    def publisher_email(self) -> str:
        return pulumi.get(self, "publisher_email")

    @property
    @pulumi.getter(name="publisherName")
    def publisher_name(self) -> str:
        return pulumi.get(self, "publisher_name")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter(name="vnetResourceGroup")
    def vnet_resource_group(self) -> str:
        return pulumi.get(self, "vnet_resource_group")

    @property
    @pulumi.getter(name="appInsightsName")
    def app_insights_name(self) -> Optional[str]:
        return pulumi.get(self, "app_insights_name")

    @property
    @pulumi.getter(name="appInsightsResourceGroup")
    def app_insights_resource_group(self) -> Optional[str]:
        return pulumi.get(self, "app_insights_resource_group")

    @property
    @pulumi.getter
    def tier(self) -> Optional[str]:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "tier")

    @property
    @pulumi.getter(name="vnetName")
    def vnet_name(self) -> Optional[str]:
        return pulumi.get(self, "vnet_name")

    @property
    @pulumi.getter(name="vnetSubnetName")
    def vnet_subnet_name(self) -> Optional[str]:
        return pulumi.get(self, "vnet_subnet_name")

    @property
    @pulumi.getter(name="vnetType")
    def vnet_type(self) -> Optional[str]:
        return pulumi.get(self, "vnet_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ApimServiceStatus(dict):
    """
    ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
    """
    def __init__(__self__, *,
                 completed: Optional[str] = None,
                 contains_update: Optional[bool] = None,
                 failed_provisioning: Optional[bool] = None,
                 flattened_secrets: Optional[bool] = None,
                 message: Optional[str] = None,
                 output: Optional[str] = None,
                 polling_url: Optional[str] = None,
                 provisioned: Optional[bool] = None,
                 provisioning: Optional[bool] = None,
                 requested: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 spec_hash: Optional[str] = None,
                 state: Optional[str] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[str]:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[bool]:
        return pulumi.get(self, "contains_update")

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "failed_provisioning")

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[bool]:
        return pulumi.get(self, "flattened_secrets")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def output(self) -> Optional[str]:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[str]:
        return pulumi.get(self, "polling_url")

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[bool]:
        return pulumi.get(self, "provisioned")

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter
    def requested(self) -> Optional[str]:
        return pulumi.get(self, "requested")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[str]:
        return pulumi.get(self, "spec_hash")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AppInsightsApiKeySpec(dict):
    """
    AppInsightsApiKeySpec defines the desired state of AppInsightsApiKey
    """
    def __init__(__self__, *,
                 app_insights: str,
                 resource_group: str,
                 auth_sdk_control_channel: Optional[bool] = None,
                 read_telemetry: Optional[bool] = None,
                 write_annotations: Optional[bool] = None):
        """
        AppInsightsApiKeySpec defines the desired state of AppInsightsApiKey
        """
        pulumi.set(__self__, "app_insights", app_insights)
        pulumi.set(__self__, "resource_group", resource_group)
        if auth_sdk_control_channel is not None:
            pulumi.set(__self__, "auth_sdk_control_channel", auth_sdk_control_channel)
        if read_telemetry is not None:
            pulumi.set(__self__, "read_telemetry", read_telemetry)
        if write_annotations is not None:
            pulumi.set(__self__, "write_annotations", write_annotations)

    @property
    @pulumi.getter(name="appInsights")
    def app_insights(self) -> str:
        return pulumi.get(self, "app_insights")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter(name="authSDKControlChannel")
    def auth_sdk_control_channel(self) -> Optional[bool]:
        return pulumi.get(self, "auth_sdk_control_channel")

    @property
    @pulumi.getter(name="readTelemetry")
    def read_telemetry(self) -> Optional[bool]:
        return pulumi.get(self, "read_telemetry")

    @property
    @pulumi.getter(name="writeAnnotations")
    def write_annotations(self) -> Optional[bool]:
        return pulumi.get(self, "write_annotations")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AppInsightsApiKeyStatus(dict):
    """
    ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
    """
    def __init__(__self__, *,
                 completed: Optional[str] = None,
                 contains_update: Optional[bool] = None,
                 failed_provisioning: Optional[bool] = None,
                 flattened_secrets: Optional[bool] = None,
                 message: Optional[str] = None,
                 output: Optional[str] = None,
                 polling_url: Optional[str] = None,
                 provisioned: Optional[bool] = None,
                 provisioning: Optional[bool] = None,
                 requested: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 spec_hash: Optional[str] = None,
                 state: Optional[str] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[str]:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[bool]:
        return pulumi.get(self, "contains_update")

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "failed_provisioning")

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[bool]:
        return pulumi.get(self, "flattened_secrets")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def output(self) -> Optional[str]:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[str]:
        return pulumi.get(self, "polling_url")

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[bool]:
        return pulumi.get(self, "provisioned")

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter
    def requested(self) -> Optional[str]:
        return pulumi.get(self, "requested")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[str]:
        return pulumi.get(self, "spec_hash")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AppInsightsSpec(dict):
    """
    AppInsightsSpec defines the desired state of AppInsights
    """
    def __init__(__self__, *,
                 application_type: str,
                 kind: str,
                 location: str,
                 resource_group: str,
                 key_vault_to_store_secrets: Optional[str] = None):
        """
        AppInsightsSpec defines the desired state of AppInsights
        """
        pulumi.set(__self__, "application_type", application_type)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_group", resource_group)
        if key_vault_to_store_secrets is not None:
            pulumi.set(__self__, "key_vault_to_store_secrets", key_vault_to_store_secrets)

    @property
    @pulumi.getter(name="applicationType")
    def application_type(self) -> str:
        return pulumi.get(self, "application_type")

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def location(self) -> str:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter(name="keyVaultToStoreSecrets")
    def key_vault_to_store_secrets(self) -> Optional[str]:
        return pulumi.get(self, "key_vault_to_store_secrets")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AppInsightsStatus(dict):
    """
    ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
    """
    def __init__(__self__, *,
                 completed: Optional[str] = None,
                 contains_update: Optional[bool] = None,
                 failed_provisioning: Optional[bool] = None,
                 flattened_secrets: Optional[bool] = None,
                 message: Optional[str] = None,
                 output: Optional[str] = None,
                 polling_url: Optional[str] = None,
                 provisioned: Optional[bool] = None,
                 provisioning: Optional[bool] = None,
                 requested: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 spec_hash: Optional[str] = None,
                 state: Optional[str] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[str]:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[bool]:
        return pulumi.get(self, "contains_update")

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "failed_provisioning")

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[bool]:
        return pulumi.get(self, "flattened_secrets")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def output(self) -> Optional[str]:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[str]:
        return pulumi.get(self, "polling_url")

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[bool]:
        return pulumi.get(self, "provisioned")

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter
    def requested(self) -> Optional[str]:
        return pulumi.get(self, "requested")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[str]:
        return pulumi.get(self, "spec_hash")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AzureLoadBalancerSpec(dict):
    """
    AzureLoadBalancerSpec defines the desired state of AzureLoadBalancer
    """
    def __init__(__self__, *,
                 backend_address_pool_name: str,
                 backend_port: int,
                 frontend_port_range_end: int,
                 frontend_port_range_start: int,
                 inbound_nat_pool_name: str,
                 location: str,
                 public_ip_address_name: str,
                 resource_group: str):
        """
        AzureLoadBalancerSpec defines the desired state of AzureLoadBalancer
        :param str location: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        pulumi.set(__self__, "backend_address_pool_name", backend_address_pool_name)
        pulumi.set(__self__, "backend_port", backend_port)
        pulumi.set(__self__, "frontend_port_range_end", frontend_port_range_end)
        pulumi.set(__self__, "frontend_port_range_start", frontend_port_range_start)
        pulumi.set(__self__, "inbound_nat_pool_name", inbound_nat_pool_name)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "public_ip_address_name", public_ip_address_name)
        pulumi.set(__self__, "resource_group", resource_group)

    @property
    @pulumi.getter(name="backendAddressPoolName")
    def backend_address_pool_name(self) -> str:
        return pulumi.get(self, "backend_address_pool_name")

    @property
    @pulumi.getter(name="backendPort")
    def backend_port(self) -> int:
        return pulumi.get(self, "backend_port")

    @property
    @pulumi.getter(name="frontendPortRangeEnd")
    def frontend_port_range_end(self) -> int:
        return pulumi.get(self, "frontend_port_range_end")

    @property
    @pulumi.getter(name="frontendPortRangeStart")
    def frontend_port_range_start(self) -> int:
        return pulumi.get(self, "frontend_port_range_start")

    @property
    @pulumi.getter(name="inboundNatPoolName")
    def inbound_nat_pool_name(self) -> str:
        return pulumi.get(self, "inbound_nat_pool_name")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="publicIPAddressName")
    def public_ip_address_name(self) -> str:
        return pulumi.get(self, "public_ip_address_name")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        return pulumi.get(self, "resource_group")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AzureLoadBalancerStatus(dict):
    """
    ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
    """
    def __init__(__self__, *,
                 completed: Optional[str] = None,
                 contains_update: Optional[bool] = None,
                 failed_provisioning: Optional[bool] = None,
                 flattened_secrets: Optional[bool] = None,
                 message: Optional[str] = None,
                 output: Optional[str] = None,
                 polling_url: Optional[str] = None,
                 provisioned: Optional[bool] = None,
                 provisioning: Optional[bool] = None,
                 requested: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 spec_hash: Optional[str] = None,
                 state: Optional[str] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[str]:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[bool]:
        return pulumi.get(self, "contains_update")

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "failed_provisioning")

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[bool]:
        return pulumi.get(self, "flattened_secrets")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def output(self) -> Optional[str]:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[str]:
        return pulumi.get(self, "polling_url")

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[bool]:
        return pulumi.get(self, "provisioned")

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter
    def requested(self) -> Optional[str]:
        return pulumi.get(self, "requested")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[str]:
        return pulumi.get(self, "spec_hash")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AzureNetworkInterfaceSpec(dict):
    """
    AzureNetworkInterfaceSpec defines the desired state of AzureNetworkInterface
    """
    def __init__(__self__, *,
                 location: str,
                 public_ip_address_name: str,
                 resource_group: str,
                 subnet_name: str,
                 vnet_name: str):
        """
        AzureNetworkInterfaceSpec defines the desired state of AzureNetworkInterface
        :param str location: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "public_ip_address_name", public_ip_address_name)
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "subnet_name", subnet_name)
        pulumi.set(__self__, "vnet_name", vnet_name)

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="publicIPAddressName")
    def public_ip_address_name(self) -> str:
        return pulumi.get(self, "public_ip_address_name")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter(name="subnetName")
    def subnet_name(self) -> str:
        return pulumi.get(self, "subnet_name")

    @property
    @pulumi.getter(name="vnetName")
    def vnet_name(self) -> str:
        return pulumi.get(self, "vnet_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AzureNetworkInterfaceStatus(dict):
    """
    ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
    """
    def __init__(__self__, *,
                 completed: Optional[str] = None,
                 contains_update: Optional[bool] = None,
                 failed_provisioning: Optional[bool] = None,
                 flattened_secrets: Optional[bool] = None,
                 message: Optional[str] = None,
                 output: Optional[str] = None,
                 polling_url: Optional[str] = None,
                 provisioned: Optional[bool] = None,
                 provisioning: Optional[bool] = None,
                 requested: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 spec_hash: Optional[str] = None,
                 state: Optional[str] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[str]:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[bool]:
        return pulumi.get(self, "contains_update")

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "failed_provisioning")

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[bool]:
        return pulumi.get(self, "flattened_secrets")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def output(self) -> Optional[str]:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[str]:
        return pulumi.get(self, "polling_url")

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[bool]:
        return pulumi.get(self, "provisioned")

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter
    def requested(self) -> Optional[str]:
        return pulumi.get(self, "requested")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[str]:
        return pulumi.get(self, "spec_hash")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AzurePublicIPAddressSpec(dict):
    """
    AzurePublicIPAddressSpec defines the desired state of AzurePublicIPAddress
    """
    def __init__(__self__, *,
                 idle_timeout_in_minutes: int,
                 location: str,
                 public_ip_address_version: str,
                 public_ip_allocation_method: str,
                 resource_group: str,
                 sku_name: str,
                 ip_tags: Optional[Mapping[str, str]] = None):
        """
        AzurePublicIPAddressSpec defines the desired state of AzurePublicIPAddress
        """
        pulumi.set(__self__, "idle_timeout_in_minutes", idle_timeout_in_minutes)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "public_ip_address_version", public_ip_address_version)
        pulumi.set(__self__, "public_ip_allocation_method", public_ip_allocation_method)
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "sku_name", sku_name)
        if ip_tags is not None:
            pulumi.set(__self__, "ip_tags", ip_tags)

    @property
    @pulumi.getter(name="idleTimeoutInMinutes")
    def idle_timeout_in_minutes(self) -> int:
        return pulumi.get(self, "idle_timeout_in_minutes")

    @property
    @pulumi.getter
    def location(self) -> str:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="publicIPAddressVersion")
    def public_ip_address_version(self) -> str:
        return pulumi.get(self, "public_ip_address_version")

    @property
    @pulumi.getter(name="publicIPAllocationMethod")
    def public_ip_allocation_method(self) -> str:
        return pulumi.get(self, "public_ip_allocation_method")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter(name="skuName")
    def sku_name(self) -> str:
        return pulumi.get(self, "sku_name")

    @property
    @pulumi.getter(name="ipTags")
    def ip_tags(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "ip_tags")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AzurePublicIPAddressStatus(dict):
    """
    ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
    """
    def __init__(__self__, *,
                 completed: Optional[str] = None,
                 contains_update: Optional[bool] = None,
                 failed_provisioning: Optional[bool] = None,
                 flattened_secrets: Optional[bool] = None,
                 message: Optional[str] = None,
                 output: Optional[str] = None,
                 polling_url: Optional[str] = None,
                 provisioned: Optional[bool] = None,
                 provisioning: Optional[bool] = None,
                 requested: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 spec_hash: Optional[str] = None,
                 state: Optional[str] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[str]:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[bool]:
        return pulumi.get(self, "contains_update")

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "failed_provisioning")

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[bool]:
        return pulumi.get(self, "flattened_secrets")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def output(self) -> Optional[str]:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[str]:
        return pulumi.get(self, "polling_url")

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[bool]:
        return pulumi.get(self, "provisioned")

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter
    def requested(self) -> Optional[str]:
        return pulumi.get(self, "requested")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[str]:
        return pulumi.get(self, "spec_hash")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AzureSQLManagedUserSpec(dict):
    """
    AzureSQLManagedUserSpec defines the desired state of AzureSQLManagedUser
    """
    def __init__(__self__, *,
                 db_name: str,
                 managed_identity_client_id: str,
                 resource_group: str,
                 roles: Sequence[str],
                 server: str,
                 key_vault_secret_prefix: Optional[str] = None,
                 key_vault_to_store_secrets: Optional[str] = None,
                 managed_identity_name: Optional[str] = None):
        """
        AzureSQLManagedUserSpec defines the desired state of AzureSQLManagedUser
        :param str server: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        pulumi.set(__self__, "db_name", db_name)
        pulumi.set(__self__, "managed_identity_client_id", managed_identity_client_id)
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "server", server)
        if key_vault_secret_prefix is not None:
            pulumi.set(__self__, "key_vault_secret_prefix", key_vault_secret_prefix)
        if key_vault_to_store_secrets is not None:
            pulumi.set(__self__, "key_vault_to_store_secrets", key_vault_to_store_secrets)
        if managed_identity_name is not None:
            pulumi.set(__self__, "managed_identity_name", managed_identity_name)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> str:
        return pulumi.get(self, "db_name")

    @property
    @pulumi.getter(name="managedIdentityClientId")
    def managed_identity_client_id(self) -> str:
        return pulumi.get(self, "managed_identity_client_id")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter
    def server(self) -> str:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="keyVaultSecretPrefix")
    def key_vault_secret_prefix(self) -> Optional[str]:
        return pulumi.get(self, "key_vault_secret_prefix")

    @property
    @pulumi.getter(name="keyVaultToStoreSecrets")
    def key_vault_to_store_secrets(self) -> Optional[str]:
        return pulumi.get(self, "key_vault_to_store_secrets")

    @property
    @pulumi.getter(name="managedIdentityName")
    def managed_identity_name(self) -> Optional[str]:
        return pulumi.get(self, "managed_identity_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AzureSQLManagedUserStatus(dict):
    """
    ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
    """
    def __init__(__self__, *,
                 completed: Optional[str] = None,
                 contains_update: Optional[bool] = None,
                 failed_provisioning: Optional[bool] = None,
                 flattened_secrets: Optional[bool] = None,
                 message: Optional[str] = None,
                 output: Optional[str] = None,
                 polling_url: Optional[str] = None,
                 provisioned: Optional[bool] = None,
                 provisioning: Optional[bool] = None,
                 requested: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 spec_hash: Optional[str] = None,
                 state: Optional[str] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[str]:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[bool]:
        return pulumi.get(self, "contains_update")

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "failed_provisioning")

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[bool]:
        return pulumi.get(self, "flattened_secrets")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def output(self) -> Optional[str]:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[str]:
        return pulumi.get(self, "polling_url")

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[bool]:
        return pulumi.get(self, "provisioned")

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter
    def requested(self) -> Optional[str]:
        return pulumi.get(self, "requested")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[str]:
        return pulumi.get(self, "spec_hash")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AzureSQLUserSpec(dict):
    """
    AzureSQLUserSpec defines the desired state of SqlUser
    """
    def __init__(__self__, *,
                 db_name: str,
                 resource_group: str,
                 roles: Sequence[str],
                 server: str,
                 admin_secret: Optional[str] = None,
                 admin_secret_key_vault: Optional[str] = None,
                 key_vault_secret_formats: Optional[Sequence[str]] = None,
                 key_vault_secret_prefix: Optional[str] = None,
                 key_vault_to_store_secrets: Optional[str] = None,
                 username: Optional[str] = None):
        """
        AzureSQLUserSpec defines the desired state of SqlUser
        :param str server: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        :param str admin_secret: optional
        """
        pulumi.set(__self__, "db_name", db_name)
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "server", server)
        if admin_secret is not None:
            pulumi.set(__self__, "admin_secret", admin_secret)
        if admin_secret_key_vault is not None:
            pulumi.set(__self__, "admin_secret_key_vault", admin_secret_key_vault)
        if key_vault_secret_formats is not None:
            pulumi.set(__self__, "key_vault_secret_formats", key_vault_secret_formats)
        if key_vault_secret_prefix is not None:
            pulumi.set(__self__, "key_vault_secret_prefix", key_vault_secret_prefix)
        if key_vault_to_store_secrets is not None:
            pulumi.set(__self__, "key_vault_to_store_secrets", key_vault_to_store_secrets)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> str:
        return pulumi.get(self, "db_name")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter
    def server(self) -> str:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="adminSecret")
    def admin_secret(self) -> Optional[str]:
        """
        optional
        """
        return pulumi.get(self, "admin_secret")

    @property
    @pulumi.getter(name="adminSecretKeyVault")
    def admin_secret_key_vault(self) -> Optional[str]:
        return pulumi.get(self, "admin_secret_key_vault")

    @property
    @pulumi.getter(name="keyVaultSecretFormats")
    def key_vault_secret_formats(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "key_vault_secret_formats")

    @property
    @pulumi.getter(name="keyVaultSecretPrefix")
    def key_vault_secret_prefix(self) -> Optional[str]:
        return pulumi.get(self, "key_vault_secret_prefix")

    @property
    @pulumi.getter(name="keyVaultToStoreSecrets")
    def key_vault_to_store_secrets(self) -> Optional[str]:
        return pulumi.get(self, "key_vault_to_store_secrets")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AzureSQLUserStatus(dict):
    """
    ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
    """
    def __init__(__self__, *,
                 completed: Optional[str] = None,
                 contains_update: Optional[bool] = None,
                 failed_provisioning: Optional[bool] = None,
                 flattened_secrets: Optional[bool] = None,
                 message: Optional[str] = None,
                 output: Optional[str] = None,
                 polling_url: Optional[str] = None,
                 provisioned: Optional[bool] = None,
                 provisioning: Optional[bool] = None,
                 requested: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 spec_hash: Optional[str] = None,
                 state: Optional[str] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[str]:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[bool]:
        return pulumi.get(self, "contains_update")

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "failed_provisioning")

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[bool]:
        return pulumi.get(self, "flattened_secrets")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def output(self) -> Optional[str]:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[str]:
        return pulumi.get(self, "polling_url")

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[bool]:
        return pulumi.get(self, "provisioned")

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter
    def requested(self) -> Optional[str]:
        return pulumi.get(self, "requested")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[str]:
        return pulumi.get(self, "spec_hash")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AzureSQLVNetRuleSpec(dict):
    """
    NOTE: json tags are required.  Any new fields you add must have json tags for the fields to be serialized. AzureSQLVNetRuleSpec defines the desired state of AzureSQLVNetRule
    """
    def __init__(__self__, *,
                 resource_group: str,
                 server: str,
                 subnet_name: str,
                 v_net_name: str,
                 v_net_resource_group: str,
                 ignore_missing_service_endpoint: Optional[bool] = None):
        """
        NOTE: json tags are required.  Any new fields you add must have json tags for the fields to be serialized. AzureSQLVNetRuleSpec defines the desired state of AzureSQLVNetRule
        :param str resource_group: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "server", server)
        pulumi.set(__self__, "subnet_name", subnet_name)
        pulumi.set(__self__, "v_net_name", v_net_name)
        pulumi.set(__self__, "v_net_resource_group", v_net_resource_group)
        if ignore_missing_service_endpoint is not None:
            pulumi.set(__self__, "ignore_missing_service_endpoint", ignore_missing_service_endpoint)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter
    def server(self) -> str:
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="subnetName")
    def subnet_name(self) -> str:
        return pulumi.get(self, "subnet_name")

    @property
    @pulumi.getter(name="vNetName")
    def v_net_name(self) -> str:
        return pulumi.get(self, "v_net_name")

    @property
    @pulumi.getter(name="vNetResourceGroup")
    def v_net_resource_group(self) -> str:
        return pulumi.get(self, "v_net_resource_group")

    @property
    @pulumi.getter(name="ignoreMissingServiceEndpoint")
    def ignore_missing_service_endpoint(self) -> Optional[bool]:
        return pulumi.get(self, "ignore_missing_service_endpoint")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AzureSQLVNetRuleStatus(dict):
    """
    ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
    """
    def __init__(__self__, *,
                 completed: Optional[str] = None,
                 contains_update: Optional[bool] = None,
                 failed_provisioning: Optional[bool] = None,
                 flattened_secrets: Optional[bool] = None,
                 message: Optional[str] = None,
                 output: Optional[str] = None,
                 polling_url: Optional[str] = None,
                 provisioned: Optional[bool] = None,
                 provisioning: Optional[bool] = None,
                 requested: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 spec_hash: Optional[str] = None,
                 state: Optional[str] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[str]:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[bool]:
        return pulumi.get(self, "contains_update")

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "failed_provisioning")

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[bool]:
        return pulumi.get(self, "flattened_secrets")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def output(self) -> Optional[str]:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[str]:
        return pulumi.get(self, "polling_url")

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[bool]:
        return pulumi.get(self, "provisioned")

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter
    def requested(self) -> Optional[str]:
        return pulumi.get(self, "requested")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[str]:
        return pulumi.get(self, "spec_hash")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AzureSqlActionSpec(dict):
    """
    AzureSqlActionSpec defines the desired state of AzureSqlAction
    """
    def __init__(__self__, *,
                 action_name: str,
                 resource_group: str,
                 server_name: str,
                 db_name: Optional[str] = None,
                 db_user: Optional[str] = None,
                 server_admin_secret_name: Optional[str] = None,
                 server_secret_key_vault: Optional[str] = None,
                 user_secret_key_vault: Optional[str] = None):
        """
        AzureSqlActionSpec defines the desired state of AzureSqlAction
        :param str resource_group: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        pulumi.set(__self__, "action_name", action_name)
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "server_name", server_name)
        if db_name is not None:
            pulumi.set(__self__, "db_name", db_name)
        if db_user is not None:
            pulumi.set(__self__, "db_user", db_user)
        if server_admin_secret_name is not None:
            pulumi.set(__self__, "server_admin_secret_name", server_admin_secret_name)
        if server_secret_key_vault is not None:
            pulumi.set(__self__, "server_secret_key_vault", server_secret_key_vault)
        if user_secret_key_vault is not None:
            pulumi.set(__self__, "user_secret_key_vault", user_secret_key_vault)

    @property
    @pulumi.getter(name="actionName")
    def action_name(self) -> str:
        return pulumi.get(self, "action_name")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> str:
        return pulumi.get(self, "server_name")

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> Optional[str]:
        return pulumi.get(self, "db_name")

    @property
    @pulumi.getter(name="dbUser")
    def db_user(self) -> Optional[str]:
        return pulumi.get(self, "db_user")

    @property
    @pulumi.getter(name="serverAdminSecretName")
    def server_admin_secret_name(self) -> Optional[str]:
        return pulumi.get(self, "server_admin_secret_name")

    @property
    @pulumi.getter(name="serverSecretKeyVault")
    def server_secret_key_vault(self) -> Optional[str]:
        return pulumi.get(self, "server_secret_key_vault")

    @property
    @pulumi.getter(name="userSecretKeyVault")
    def user_secret_key_vault(self) -> Optional[str]:
        return pulumi.get(self, "user_secret_key_vault")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AzureSqlActionStatus(dict):
    """
    ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
    """
    def __init__(__self__, *,
                 completed: Optional[str] = None,
                 contains_update: Optional[bool] = None,
                 failed_provisioning: Optional[bool] = None,
                 flattened_secrets: Optional[bool] = None,
                 message: Optional[str] = None,
                 output: Optional[str] = None,
                 polling_url: Optional[str] = None,
                 provisioned: Optional[bool] = None,
                 provisioning: Optional[bool] = None,
                 requested: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 spec_hash: Optional[str] = None,
                 state: Optional[str] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[str]:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[bool]:
        return pulumi.get(self, "contains_update")

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "failed_provisioning")

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[bool]:
        return pulumi.get(self, "flattened_secrets")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def output(self) -> Optional[str]:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[str]:
        return pulumi.get(self, "polling_url")

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[bool]:
        return pulumi.get(self, "provisioned")

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter
    def requested(self) -> Optional[str]:
        return pulumi.get(self, "requested")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[str]:
        return pulumi.get(self, "spec_hash")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AzureSqlDatabaseSpec(dict):
    """
    AzureSqlDatabaseSpec defines the desired state of AzureSqlDatabase
    """
    def __init__(__self__, *,
                 edition: int,
                 location: str,
                 resourcegroup: str,
                 server: str,
                 db_name: Optional[str] = None):
        """
        AzureSqlDatabaseSpec defines the desired state of AzureSqlDatabase
        :param int edition: DBEdition - wraps: https://godoc.org/github.com/Azure/azure-sdk-for-go/services/preview/sql/mgmt/v3.0/sql#DatabaseEdition
        :param str location: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        :param str db_name: optional
        """
        pulumi.set(__self__, "edition", edition)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resourcegroup", resourcegroup)
        pulumi.set(__self__, "server", server)
        if db_name is not None:
            pulumi.set(__self__, "db_name", db_name)

    @property
    @pulumi.getter
    def edition(self) -> int:
        """
        DBEdition - wraps: https://godoc.org/github.com/Azure/azure-sdk-for-go/services/preview/sql/mgmt/v3.0/sql#DatabaseEdition
        """
        return pulumi.get(self, "edition")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def resourcegroup(self) -> str:
        return pulumi.get(self, "resourcegroup")

    @property
    @pulumi.getter
    def server(self) -> str:
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> Optional[str]:
        """
        optional
        """
        return pulumi.get(self, "db_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AzureSqlDatabaseStatus(dict):
    """
    ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
    """
    def __init__(__self__, *,
                 completed: Optional[str] = None,
                 contains_update: Optional[bool] = None,
                 failed_provisioning: Optional[bool] = None,
                 flattened_secrets: Optional[bool] = None,
                 message: Optional[str] = None,
                 output: Optional[str] = None,
                 polling_url: Optional[str] = None,
                 provisioned: Optional[bool] = None,
                 provisioning: Optional[bool] = None,
                 requested: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 spec_hash: Optional[str] = None,
                 state: Optional[str] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[str]:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[bool]:
        return pulumi.get(self, "contains_update")

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "failed_provisioning")

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[bool]:
        return pulumi.get(self, "flattened_secrets")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def output(self) -> Optional[str]:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[str]:
        return pulumi.get(self, "polling_url")

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[bool]:
        return pulumi.get(self, "provisioned")

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter
    def requested(self) -> Optional[str]:
        return pulumi.get(self, "requested")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[str]:
        return pulumi.get(self, "spec_hash")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AzureSqlFailoverGroupSpec(dict):
    """
    AzureSqlFailoverGroupSpec defines the desired state of AzureSqlFailoverGroup
    """
    def __init__(__self__, *,
                 databaselist: Sequence[str],
                 failovergraceperiod: int,
                 failoverpolicy: str,
                 location: str,
                 resourcegroup: str,
                 secondaryserver: str,
                 secondaryserverresourcegroup: str,
                 server: str,
                 key_vault_to_store_secrets: Optional[str] = None):
        """
        AzureSqlFailoverGroupSpec defines the desired state of AzureSqlFailoverGroup
        :param str failoverpolicy: ReadWriteEndpointFailoverPolicy - wraps https://godoc.org/github.com/Azure/azure-sdk-for-go/services/preview/sql/mgmt/v3.0/sql#ReadWriteEndpointFailoverPolicy
        :param str location: Important: Run "make" to regenerate code after modifying this file
        """
        pulumi.set(__self__, "databaselist", databaselist)
        pulumi.set(__self__, "failovergraceperiod", failovergraceperiod)
        pulumi.set(__self__, "failoverpolicy", failoverpolicy)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resourcegroup", resourcegroup)
        pulumi.set(__self__, "secondaryserver", secondaryserver)
        pulumi.set(__self__, "secondaryserverresourcegroup", secondaryserverresourcegroup)
        pulumi.set(__self__, "server", server)
        if key_vault_to_store_secrets is not None:
            pulumi.set(__self__, "key_vault_to_store_secrets", key_vault_to_store_secrets)

    @property
    @pulumi.getter
    def databaselist(self) -> Sequence[str]:
        return pulumi.get(self, "databaselist")

    @property
    @pulumi.getter
    def failovergraceperiod(self) -> int:
        return pulumi.get(self, "failovergraceperiod")

    @property
    @pulumi.getter
    def failoverpolicy(self) -> str:
        """
        ReadWriteEndpointFailoverPolicy - wraps https://godoc.org/github.com/Azure/azure-sdk-for-go/services/preview/sql/mgmt/v3.0/sql#ReadWriteEndpointFailoverPolicy
        """
        return pulumi.get(self, "failoverpolicy")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def resourcegroup(self) -> str:
        return pulumi.get(self, "resourcegroup")

    @property
    @pulumi.getter
    def secondaryserver(self) -> str:
        return pulumi.get(self, "secondaryserver")

    @property
    @pulumi.getter
    def secondaryserverresourcegroup(self) -> str:
        return pulumi.get(self, "secondaryserverresourcegroup")

    @property
    @pulumi.getter
    def server(self) -> str:
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="keyVaultToStoreSecrets")
    def key_vault_to_store_secrets(self) -> Optional[str]:
        return pulumi.get(self, "key_vault_to_store_secrets")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AzureSqlFailoverGroupStatus(dict):
    """
    ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
    """
    def __init__(__self__, *,
                 completed: Optional[str] = None,
                 contains_update: Optional[bool] = None,
                 failed_provisioning: Optional[bool] = None,
                 flattened_secrets: Optional[bool] = None,
                 message: Optional[str] = None,
                 output: Optional[str] = None,
                 polling_url: Optional[str] = None,
                 provisioned: Optional[bool] = None,
                 provisioning: Optional[bool] = None,
                 requested: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 spec_hash: Optional[str] = None,
                 state: Optional[str] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[str]:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[bool]:
        return pulumi.get(self, "contains_update")

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "failed_provisioning")

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[bool]:
        return pulumi.get(self, "flattened_secrets")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def output(self) -> Optional[str]:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[str]:
        return pulumi.get(self, "polling_url")

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[bool]:
        return pulumi.get(self, "provisioned")

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter
    def requested(self) -> Optional[str]:
        return pulumi.get(self, "requested")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[str]:
        return pulumi.get(self, "spec_hash")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AzureSqlFirewallRuleSpec(dict):
    """
    AzureSqlFirewallRuleSpec defines the desired state of AzureSqlFirewallRule
    """
    def __init__(__self__, *,
                 resourcegroup: str,
                 server: str,
                 endipaddress: Optional[str] = None,
                 startipaddress: Optional[str] = None):
        """
        AzureSqlFirewallRuleSpec defines the desired state of AzureSqlFirewallRule
        :param str resourcegroup: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        pulumi.set(__self__, "resourcegroup", resourcegroup)
        pulumi.set(__self__, "server", server)
        if endipaddress is not None:
            pulumi.set(__self__, "endipaddress", endipaddress)
        if startipaddress is not None:
            pulumi.set(__self__, "startipaddress", startipaddress)

    @property
    @pulumi.getter
    def resourcegroup(self) -> str:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "resourcegroup")

    @property
    @pulumi.getter
    def server(self) -> str:
        return pulumi.get(self, "server")

    @property
    @pulumi.getter
    def endipaddress(self) -> Optional[str]:
        return pulumi.get(self, "endipaddress")

    @property
    @pulumi.getter
    def startipaddress(self) -> Optional[str]:
        return pulumi.get(self, "startipaddress")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AzureSqlFirewallRuleStatus(dict):
    """
    ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
    """
    def __init__(__self__, *,
                 completed: Optional[str] = None,
                 contains_update: Optional[bool] = None,
                 failed_provisioning: Optional[bool] = None,
                 flattened_secrets: Optional[bool] = None,
                 message: Optional[str] = None,
                 output: Optional[str] = None,
                 polling_url: Optional[str] = None,
                 provisioned: Optional[bool] = None,
                 provisioning: Optional[bool] = None,
                 requested: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 spec_hash: Optional[str] = None,
                 state: Optional[str] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[str]:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[bool]:
        return pulumi.get(self, "contains_update")

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "failed_provisioning")

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[bool]:
        return pulumi.get(self, "flattened_secrets")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def output(self) -> Optional[str]:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[str]:
        return pulumi.get(self, "polling_url")

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[bool]:
        return pulumi.get(self, "provisioned")

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter
    def requested(self) -> Optional[str]:
        return pulumi.get(self, "requested")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[str]:
        return pulumi.get(self, "spec_hash")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AzureSqlServerSpec(dict):
    """
    AzureSqlServerSpec defines the desired state of AzureSqlServer
    """
    def __init__(__self__, *,
                 location: str,
                 resourcegroup: str,
                 key_vault_to_store_secrets: Optional[str] = None):
        """
        AzureSqlServerSpec defines the desired state of AzureSqlServer
        :param str location: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resourcegroup", resourcegroup)
        if key_vault_to_store_secrets is not None:
            pulumi.set(__self__, "key_vault_to_store_secrets", key_vault_to_store_secrets)

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def resourcegroup(self) -> str:
        return pulumi.get(self, "resourcegroup")

    @property
    @pulumi.getter(name="keyVaultToStoreSecrets")
    def key_vault_to_store_secrets(self) -> Optional[str]:
        return pulumi.get(self, "key_vault_to_store_secrets")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AzureSqlServerStatus(dict):
    """
    ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
    """
    def __init__(__self__, *,
                 completed: Optional[str] = None,
                 contains_update: Optional[bool] = None,
                 failed_provisioning: Optional[bool] = None,
                 flattened_secrets: Optional[bool] = None,
                 message: Optional[str] = None,
                 output: Optional[str] = None,
                 polling_url: Optional[str] = None,
                 provisioned: Optional[bool] = None,
                 provisioning: Optional[bool] = None,
                 requested: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 spec_hash: Optional[str] = None,
                 state: Optional[str] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[str]:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[bool]:
        return pulumi.get(self, "contains_update")

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "failed_provisioning")

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[bool]:
        return pulumi.get(self, "flattened_secrets")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def output(self) -> Optional[str]:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[str]:
        return pulumi.get(self, "polling_url")

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[bool]:
        return pulumi.get(self, "provisioned")

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter
    def requested(self) -> Optional[str]:
        return pulumi.get(self, "requested")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[str]:
        return pulumi.get(self, "spec_hash")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AzureVMScaleSetSpec(dict):
    """
    AzureVMScaleSetSpec defines the desired state of AzureVMScaleSet
    """
    def __init__(__self__, *,
                 admin_user_name: str,
                 backend_address_pool_name: str,
                 capacity: int,
                 inbound_nat_pool_name: str,
                 load_balancer_name: str,
                 location: str,
                 os_type: str,
                 platform_image_urn: str,
                 resource_group: str,
                 subnet_name: str,
                 virtual_network_name: str,
                 vm_size: str,
                 ssh_public_key_data: Optional[str] = None):
        """
        AzureVMScaleSetSpec defines the desired state of AzureVMScaleSet
        :param str location: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        pulumi.set(__self__, "admin_user_name", admin_user_name)
        pulumi.set(__self__, "backend_address_pool_name", backend_address_pool_name)
        pulumi.set(__self__, "capacity", capacity)
        pulumi.set(__self__, "inbound_nat_pool_name", inbound_nat_pool_name)
        pulumi.set(__self__, "load_balancer_name", load_balancer_name)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "platform_image_urn", platform_image_urn)
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "subnet_name", subnet_name)
        pulumi.set(__self__, "virtual_network_name", virtual_network_name)
        pulumi.set(__self__, "vm_size", vm_size)
        if ssh_public_key_data is not None:
            pulumi.set(__self__, "ssh_public_key_data", ssh_public_key_data)

    @property
    @pulumi.getter(name="adminUserName")
    def admin_user_name(self) -> str:
        return pulumi.get(self, "admin_user_name")

    @property
    @pulumi.getter(name="backendAddressPoolName")
    def backend_address_pool_name(self) -> str:
        return pulumi.get(self, "backend_address_pool_name")

    @property
    @pulumi.getter
    def capacity(self) -> int:
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter(name="inboundNatPoolName")
    def inbound_nat_pool_name(self) -> str:
        return pulumi.get(self, "inbound_nat_pool_name")

    @property
    @pulumi.getter(name="loadBalancerName")
    def load_balancer_name(self) -> str:
        return pulumi.get(self, "load_balancer_name")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> str:
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter(name="platformImageURN")
    def platform_image_urn(self) -> str:
        return pulumi.get(self, "platform_image_urn")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter(name="subnetName")
    def subnet_name(self) -> str:
        return pulumi.get(self, "subnet_name")

    @property
    @pulumi.getter(name="virtualNetworkName")
    def virtual_network_name(self) -> str:
        return pulumi.get(self, "virtual_network_name")

    @property
    @pulumi.getter(name="vmSize")
    def vm_size(self) -> str:
        return pulumi.get(self, "vm_size")

    @property
    @pulumi.getter(name="sshPublicKeyData")
    def ssh_public_key_data(self) -> Optional[str]:
        return pulumi.get(self, "ssh_public_key_data")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AzureVMScaleSetStatus(dict):
    """
    ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
    """
    def __init__(__self__, *,
                 completed: Optional[str] = None,
                 contains_update: Optional[bool] = None,
                 failed_provisioning: Optional[bool] = None,
                 flattened_secrets: Optional[bool] = None,
                 message: Optional[str] = None,
                 output: Optional[str] = None,
                 polling_url: Optional[str] = None,
                 provisioned: Optional[bool] = None,
                 provisioning: Optional[bool] = None,
                 requested: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 spec_hash: Optional[str] = None,
                 state: Optional[str] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[str]:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[bool]:
        return pulumi.get(self, "contains_update")

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "failed_provisioning")

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[bool]:
        return pulumi.get(self, "flattened_secrets")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def output(self) -> Optional[str]:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[str]:
        return pulumi.get(self, "polling_url")

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[bool]:
        return pulumi.get(self, "provisioned")

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter
    def requested(self) -> Optional[str]:
        return pulumi.get(self, "requested")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[str]:
        return pulumi.get(self, "spec_hash")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AzureVirtualMachineExtensionSpec(dict):
    """
    AzureVirtualMachineExtensionSpec defines the desired state of AzureVirtualMachineExtension
    """
    def __init__(__self__, *,
                 auto_upgrade_minor_version: bool,
                 force_update_tag: str,
                 location: str,
                 publisher: str,
                 resource_group: str,
                 type_handler_version: str,
                 type_name: str,
                 vm_name: str,
                 protected_settings: Optional[str] = None,
                 settings: Optional[str] = None):
        """
        AzureVirtualMachineExtensionSpec defines the desired state of AzureVirtualMachineExtension
        :param str location: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        pulumi.set(__self__, "auto_upgrade_minor_version", auto_upgrade_minor_version)
        pulumi.set(__self__, "force_update_tag", force_update_tag)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "publisher", publisher)
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "type_handler_version", type_handler_version)
        pulumi.set(__self__, "type_name", type_name)
        pulumi.set(__self__, "vm_name", vm_name)
        if protected_settings is not None:
            pulumi.set(__self__, "protected_settings", protected_settings)
        if settings is not None:
            pulumi.set(__self__, "settings", settings)

    @property
    @pulumi.getter(name="autoUpgradeMinorVersion")
    def auto_upgrade_minor_version(self) -> bool:
        return pulumi.get(self, "auto_upgrade_minor_version")

    @property
    @pulumi.getter(name="forceUpdateTag")
    def force_update_tag(self) -> str:
        return pulumi.get(self, "force_update_tag")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def publisher(self) -> str:
        return pulumi.get(self, "publisher")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter(name="typeHandlerVersion")
    def type_handler_version(self) -> str:
        return pulumi.get(self, "type_handler_version")

    @property
    @pulumi.getter(name="typeName")
    def type_name(self) -> str:
        return pulumi.get(self, "type_name")

    @property
    @pulumi.getter(name="vmName")
    def vm_name(self) -> str:
        return pulumi.get(self, "vm_name")

    @property
    @pulumi.getter(name="protectedSettings")
    def protected_settings(self) -> Optional[str]:
        return pulumi.get(self, "protected_settings")

    @property
    @pulumi.getter
    def settings(self) -> Optional[str]:
        return pulumi.get(self, "settings")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AzureVirtualMachineExtensionStatus(dict):
    """
    ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
    """
    def __init__(__self__, *,
                 completed: Optional[str] = None,
                 contains_update: Optional[bool] = None,
                 failed_provisioning: Optional[bool] = None,
                 flattened_secrets: Optional[bool] = None,
                 message: Optional[str] = None,
                 output: Optional[str] = None,
                 polling_url: Optional[str] = None,
                 provisioned: Optional[bool] = None,
                 provisioning: Optional[bool] = None,
                 requested: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 spec_hash: Optional[str] = None,
                 state: Optional[str] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[str]:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[bool]:
        return pulumi.get(self, "contains_update")

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "failed_provisioning")

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[bool]:
        return pulumi.get(self, "flattened_secrets")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def output(self) -> Optional[str]:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[str]:
        return pulumi.get(self, "polling_url")

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[bool]:
        return pulumi.get(self, "provisioned")

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter
    def requested(self) -> Optional[str]:
        return pulumi.get(self, "requested")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[str]:
        return pulumi.get(self, "spec_hash")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AzureVirtualMachineSpec(dict):
    """
    AzureVirtualMachineSpec defines the desired state of AzureVirtualMachine
    """
    def __init__(__self__, *,
                 admin_user_name: str,
                 location: str,
                 network_interface_name: str,
                 os_type: str,
                 platform_image_urn: str,
                 resource_group: str,
                 vm_size: str,
                 ssh_public_key_data: Optional[str] = None):
        """
        AzureVirtualMachineSpec defines the desired state of AzureVirtualMachine
        :param str location: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        pulumi.set(__self__, "admin_user_name", admin_user_name)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "network_interface_name", network_interface_name)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "platform_image_urn", platform_image_urn)
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "vm_size", vm_size)
        if ssh_public_key_data is not None:
            pulumi.set(__self__, "ssh_public_key_data", ssh_public_key_data)

    @property
    @pulumi.getter(name="adminUserName")
    def admin_user_name(self) -> str:
        return pulumi.get(self, "admin_user_name")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="networkInterfaceName")
    def network_interface_name(self) -> str:
        return pulumi.get(self, "network_interface_name")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> str:
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter(name="platformImageURN")
    def platform_image_urn(self) -> str:
        return pulumi.get(self, "platform_image_urn")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter(name="vmSize")
    def vm_size(self) -> str:
        return pulumi.get(self, "vm_size")

    @property
    @pulumi.getter(name="sshPublicKeyData")
    def ssh_public_key_data(self) -> Optional[str]:
        return pulumi.get(self, "ssh_public_key_data")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class AzureVirtualMachineStatus(dict):
    """
    ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
    """
    def __init__(__self__, *,
                 completed: Optional[str] = None,
                 contains_update: Optional[bool] = None,
                 failed_provisioning: Optional[bool] = None,
                 flattened_secrets: Optional[bool] = None,
                 message: Optional[str] = None,
                 output: Optional[str] = None,
                 polling_url: Optional[str] = None,
                 provisioned: Optional[bool] = None,
                 provisioning: Optional[bool] = None,
                 requested: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 spec_hash: Optional[str] = None,
                 state: Optional[str] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[str]:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[bool]:
        return pulumi.get(self, "contains_update")

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "failed_provisioning")

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[bool]:
        return pulumi.get(self, "flattened_secrets")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def output(self) -> Optional[str]:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[str]:
        return pulumi.get(self, "polling_url")

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[bool]:
        return pulumi.get(self, "provisioned")

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter
    def requested(self) -> Optional[str]:
        return pulumi.get(self, "requested")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[str]:
        return pulumi.get(self, "spec_hash")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BlobContainerSpec(dict):
    """
    BlobContainerSpec defines the desired state of BlobContainer
    """
    def __init__(__self__, *,
                 location: str,
                 resourcegroup: str,
                 accesslevel: Optional[str] = None,
                 accountname: Optional[str] = None):
        """
        BlobContainerSpec defines the desired state of BlobContainer
        :param str location: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        :param str accesslevel: PublicAccess enumerates the values for public access.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resourcegroup", resourcegroup)
        if accesslevel is not None:
            pulumi.set(__self__, "accesslevel", accesslevel)
        if accountname is not None:
            pulumi.set(__self__, "accountname", accountname)

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def resourcegroup(self) -> str:
        return pulumi.get(self, "resourcegroup")

    @property
    @pulumi.getter
    def accesslevel(self) -> Optional[str]:
        """
        PublicAccess enumerates the values for public access.
        """
        return pulumi.get(self, "accesslevel")

    @property
    @pulumi.getter
    def accountname(self) -> Optional[str]:
        return pulumi.get(self, "accountname")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BlobContainerStatus(dict):
    """
    ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
    """
    def __init__(__self__, *,
                 completed: Optional[str] = None,
                 contains_update: Optional[bool] = None,
                 failed_provisioning: Optional[bool] = None,
                 flattened_secrets: Optional[bool] = None,
                 message: Optional[str] = None,
                 output: Optional[str] = None,
                 polling_url: Optional[str] = None,
                 provisioned: Optional[bool] = None,
                 provisioning: Optional[bool] = None,
                 requested: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 spec_hash: Optional[str] = None,
                 state: Optional[str] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[str]:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[bool]:
        return pulumi.get(self, "contains_update")

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "failed_provisioning")

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[bool]:
        return pulumi.get(self, "flattened_secrets")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def output(self) -> Optional[str]:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[str]:
        return pulumi.get(self, "polling_url")

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[bool]:
        return pulumi.get(self, "provisioned")

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter
    def requested(self) -> Optional[str]:
        return pulumi.get(self, "requested")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[str]:
        return pulumi.get(self, "spec_hash")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConsumerGroupSpec(dict):
    """
    ConsumerGroupSpec defines the desired state of ConsumerGroup
    """
    def __init__(__self__, *,
                 resource_group: str,
                 consumer_group_name: Optional[str] = None,
                 event_hub: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        ConsumerGroupSpec defines the desired state of ConsumerGroup
        :param str resource_group: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        pulumi.set(__self__, "resource_group", resource_group)
        if consumer_group_name is not None:
            pulumi.set(__self__, "consumer_group_name", consumer_group_name)
        if event_hub is not None:
            pulumi.set(__self__, "event_hub", event_hub)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter(name="consumerGroupName")
    def consumer_group_name(self) -> Optional[str]:
        return pulumi.get(self, "consumer_group_name")

    @property
    @pulumi.getter(name="eventHub")
    def event_hub(self) -> Optional[str]:
        return pulumi.get(self, "event_hub")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConsumerGroupStatus(dict):
    """
    ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
    """
    def __init__(__self__, *,
                 completed: Optional[str] = None,
                 contains_update: Optional[bool] = None,
                 failed_provisioning: Optional[bool] = None,
                 flattened_secrets: Optional[bool] = None,
                 message: Optional[str] = None,
                 output: Optional[str] = None,
                 polling_url: Optional[str] = None,
                 provisioned: Optional[bool] = None,
                 provisioning: Optional[bool] = None,
                 requested: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 spec_hash: Optional[str] = None,
                 state: Optional[str] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[str]:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[bool]:
        return pulumi.get(self, "contains_update")

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "failed_provisioning")

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[bool]:
        return pulumi.get(self, "flattened_secrets")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def output(self) -> Optional[str]:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[str]:
        return pulumi.get(self, "polling_url")

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[bool]:
        return pulumi.get(self, "provisioned")

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter
    def requested(self) -> Optional[str]:
        return pulumi.get(self, "requested")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[str]:
        return pulumi.get(self, "spec_hash")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CosmosDBSpec(dict):
    """
    CosmosDBSpec defines the desired state of CosmosDB
    """
    def __init__(__self__, *,
                 resource_group: str,
                 ip_rules: Optional[Sequence[str]] = None,
                 key_vault_to_store_secrets: Optional[str] = None,
                 kind: Optional[str] = None,
                 location: Optional[str] = None,
                 locations: Optional[Sequence['outputs.CosmosDBSpecLocations']] = None,
                 properties: Optional['outputs.CosmosDBSpecProperties'] = None,
                 virtual_network_rules: Optional[Sequence['outputs.CosmosDBSpecVirtualNetworkRules']] = None):
        """
        CosmosDBSpec defines the desired state of CosmosDB
        :param str kind: CosmosDBKind enumerates the values for kind. Only one of the following kinds may be specified. If none of the following kinds is specified, the default one is GlobalDocumentDBKind.
        :param 'CosmosDBSpecPropertiesArgs' properties: CosmosDBProperties the CosmosDBProperties of CosmosDB.
        """
        pulumi.set(__self__, "resource_group", resource_group)
        if ip_rules is not None:
            pulumi.set(__self__, "ip_rules", ip_rules)
        if key_vault_to_store_secrets is not None:
            pulumi.set(__self__, "key_vault_to_store_secrets", key_vault_to_store_secrets)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if virtual_network_rules is not None:
            pulumi.set(__self__, "virtual_network_rules", virtual_network_rules)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter(name="ipRules")
    def ip_rules(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_rules")

    @property
    @pulumi.getter(name="keyVaultToStoreSecrets")
    def key_vault_to_store_secrets(self) -> Optional[str]:
        return pulumi.get(self, "key_vault_to_store_secrets")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        CosmosDBKind enumerates the values for kind. Only one of the following kinds may be specified. If none of the following kinds is specified, the default one is GlobalDocumentDBKind.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def locations(self) -> Optional[Sequence['outputs.CosmosDBSpecLocations']]:
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter
    def properties(self) -> Optional['outputs.CosmosDBSpecProperties']:
        """
        CosmosDBProperties the CosmosDBProperties of CosmosDB.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="virtualNetworkRules")
    def virtual_network_rules(self) -> Optional[Sequence['outputs.CosmosDBSpecVirtualNetworkRules']]:
        return pulumi.get(self, "virtual_network_rules")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CosmosDBSpecLocations(dict):
    """
    CosmosDBLocation defines one or more locations for geo-redundancy and high availability
    """
    def __init__(__self__, *,
                 failover_priority: int,
                 location_name: str,
                 is_zone_redundant: Optional[bool] = None):
        """
        CosmosDBLocation defines one or more locations for geo-redundancy and high availability
        """
        pulumi.set(__self__, "failover_priority", failover_priority)
        pulumi.set(__self__, "location_name", location_name)
        if is_zone_redundant is not None:
            pulumi.set(__self__, "is_zone_redundant", is_zone_redundant)

    @property
    @pulumi.getter(name="failoverPriority")
    def failover_priority(self) -> int:
        return pulumi.get(self, "failover_priority")

    @property
    @pulumi.getter(name="locationName")
    def location_name(self) -> str:
        return pulumi.get(self, "location_name")

    @property
    @pulumi.getter(name="isZoneRedundant")
    def is_zone_redundant(self) -> Optional[bool]:
        return pulumi.get(self, "is_zone_redundant")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CosmosDBSpecProperties(dict):
    """
    CosmosDBProperties the CosmosDBProperties of CosmosDB.
    """
    def __init__(__self__, *,
                 capabilities: Optional[Sequence['outputs.CosmosDBSpecPropertiesCapabilities']] = None,
                 database_account_offer_type: Optional[str] = None,
                 enable_multiple_write_locations: Optional[bool] = None,
                 is_virtual_network_filter_enabled: Optional[bool] = None,
                 mongo_db_version: Optional[str] = None):
        """
        CosmosDBProperties the CosmosDBProperties of CosmosDB.
        :param str database_account_offer_type: DatabaseAccountOfferType - The offer type for the Cosmos DB database account.
        :param bool is_virtual_network_filter_enabled: IsVirtualNetworkFilterEnabled - Flag to indicate whether to enable/disable Virtual Network ACL rules.
        """
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if database_account_offer_type is not None:
            pulumi.set(__self__, "database_account_offer_type", database_account_offer_type)
        if enable_multiple_write_locations is not None:
            pulumi.set(__self__, "enable_multiple_write_locations", enable_multiple_write_locations)
        if is_virtual_network_filter_enabled is not None:
            pulumi.set(__self__, "is_virtual_network_filter_enabled", is_virtual_network_filter_enabled)
        if mongo_db_version is not None:
            pulumi.set(__self__, "mongo_db_version", mongo_db_version)

    @property
    @pulumi.getter
    def capabilities(self) -> Optional[Sequence['outputs.CosmosDBSpecPropertiesCapabilities']]:
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter(name="databaseAccountOfferType")
    def database_account_offer_type(self) -> Optional[str]:
        """
        DatabaseAccountOfferType - The offer type for the Cosmos DB database account.
        """
        return pulumi.get(self, "database_account_offer_type")

    @property
    @pulumi.getter(name="enableMultipleWriteLocations")
    def enable_multiple_write_locations(self) -> Optional[bool]:
        return pulumi.get(self, "enable_multiple_write_locations")

    @property
    @pulumi.getter(name="isVirtualNetworkFilterEnabled")
    def is_virtual_network_filter_enabled(self) -> Optional[bool]:
        """
        IsVirtualNetworkFilterEnabled - Flag to indicate whether to enable/disable Virtual Network ACL rules.
        """
        return pulumi.get(self, "is_virtual_network_filter_enabled")

    @property
    @pulumi.getter(name="mongoDBVersion")
    def mongo_db_version(self) -> Optional[str]:
        return pulumi.get(self, "mongo_db_version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CosmosDBSpecPropertiesCapabilities(dict):
    """
    Capability cosmos DB capability object
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        Capability cosmos DB capability object
        :param str name: Name *CosmosCapability `json:"name,omitempty"`
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name *CosmosCapability `json:"name,omitempty"`
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CosmosDBSpecVirtualNetworkRules(dict):
    """
    CosmosDBVirtualNetworkRule virtual Network ACL Rule object
    """
    def __init__(__self__, *,
                 ignore_missing_v_net_service_endpoint: Optional[bool] = None,
                 subnet_id: Optional[str] = None):
        """
        CosmosDBVirtualNetworkRule virtual Network ACL Rule object
        :param bool ignore_missing_v_net_service_endpoint: IgnoreMissingVNetServiceEndpoint - Create firewall rule before the virtual network has vnet service endpoint enabled.
        :param str subnet_id: ID - Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
        """
        if ignore_missing_v_net_service_endpoint is not None:
            pulumi.set(__self__, "ignore_missing_v_net_service_endpoint", ignore_missing_v_net_service_endpoint)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="ignoreMissingVNetServiceEndpoint")
    def ignore_missing_v_net_service_endpoint(self) -> Optional[bool]:
        """
        IgnoreMissingVNetServiceEndpoint - Create firewall rule before the virtual network has vnet service endpoint enabled.
        """
        return pulumi.get(self, "ignore_missing_v_net_service_endpoint")

    @property
    @pulumi.getter(name="subnetID")
    def subnet_id(self) -> Optional[str]:
        """
        ID - Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
        """
        return pulumi.get(self, "subnet_id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CosmosDBStatus(dict):
    """
    ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
    """
    def __init__(__self__, *,
                 completed: Optional[str] = None,
                 contains_update: Optional[bool] = None,
                 failed_provisioning: Optional[bool] = None,
                 flattened_secrets: Optional[bool] = None,
                 message: Optional[str] = None,
                 output: Optional[str] = None,
                 polling_url: Optional[str] = None,
                 provisioned: Optional[bool] = None,
                 provisioning: Optional[bool] = None,
                 requested: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 spec_hash: Optional[str] = None,
                 state: Optional[str] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[str]:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[bool]:
        return pulumi.get(self, "contains_update")

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "failed_provisioning")

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[bool]:
        return pulumi.get(self, "flattened_secrets")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def output(self) -> Optional[str]:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[str]:
        return pulumi.get(self, "polling_url")

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[bool]:
        return pulumi.get(self, "provisioned")

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter
    def requested(self) -> Optional[str]:
        return pulumi.get(self, "requested")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[str]:
        return pulumi.get(self, "spec_hash")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventhubNamespaceSpec(dict):
    """
    EventhubNamespaceSpec defines the desired state of EventhubNamespace
    """
    def __init__(__self__, *,
                 location: str,
                 resource_group: str,
                 network_rule: Optional['outputs.EventhubNamespaceSpecNetworkRule'] = None,
                 properties: Optional['outputs.EventhubNamespaceSpecProperties'] = None,
                 sku: Optional['outputs.EventhubNamespaceSpecSku'] = None):
        """
        EventhubNamespaceSpec defines the desired state of EventhubNamespace
        :param str location: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        :param 'EventhubNamespaceSpecNetworkRuleArgs' network_rule: EventhubNamespaceNetworkRule defines the namespace network rule
        :param 'EventhubNamespaceSpecPropertiesArgs' properties: EventhubNamespaceProperties defines the namespace properties
        :param 'EventhubNamespaceSpecSkuArgs' sku: EventhubNamespaceSku defines the sku
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_group", resource_group)
        if network_rule is not None:
            pulumi.set(__self__, "network_rule", network_rule)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter(name="networkRule")
    def network_rule(self) -> Optional['outputs.EventhubNamespaceSpecNetworkRule']:
        """
        EventhubNamespaceNetworkRule defines the namespace network rule
        """
        return pulumi.get(self, "network_rule")

    @property
    @pulumi.getter
    def properties(self) -> Optional['outputs.EventhubNamespaceSpecProperties']:
        """
        EventhubNamespaceProperties defines the namespace properties
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def sku(self) -> Optional['outputs.EventhubNamespaceSpecSku']:
        """
        EventhubNamespaceSku defines the sku
        """
        return pulumi.get(self, "sku")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventhubNamespaceSpecNetworkRule(dict):
    """
    EventhubNamespaceNetworkRule defines the namespace network rule
    """
    def __init__(__self__, *,
                 default_action: Optional[str] = None,
                 ip_rules: Optional[Sequence['outputs.EventhubNamespaceSpecNetworkRuleIpRules']] = None,
                 virtual_network_rules: Optional[Sequence['outputs.EventhubNamespaceSpecNetworkRuleVirtualNetworkRules']] = None):
        """
        EventhubNamespaceNetworkRule defines the namespace network rule
        :param str default_action: DefaultAction defined as a string
        :param Sequence['EventhubNamespaceSpecNetworkRuleIpRulesArgs'] ip_rules: IPRules - List of IpRules
        :param Sequence['EventhubNamespaceSpecNetworkRuleVirtualNetworkRulesArgs'] virtual_network_rules: VirtualNetworkRules - List VirtualNetwork Rules
        """
        if default_action is not None:
            pulumi.set(__self__, "default_action", default_action)
        if ip_rules is not None:
            pulumi.set(__self__, "ip_rules", ip_rules)
        if virtual_network_rules is not None:
            pulumi.set(__self__, "virtual_network_rules", virtual_network_rules)

    @property
    @pulumi.getter(name="defaultAction")
    def default_action(self) -> Optional[str]:
        """
        DefaultAction defined as a string
        """
        return pulumi.get(self, "default_action")

    @property
    @pulumi.getter(name="ipRules")
    def ip_rules(self) -> Optional[Sequence['outputs.EventhubNamespaceSpecNetworkRuleIpRules']]:
        """
        IPRules - List of IpRules
        """
        return pulumi.get(self, "ip_rules")

    @property
    @pulumi.getter(name="virtualNetworkRules")
    def virtual_network_rules(self) -> Optional[Sequence['outputs.EventhubNamespaceSpecNetworkRuleVirtualNetworkRules']]:
        """
        VirtualNetworkRules - List VirtualNetwork Rules
        """
        return pulumi.get(self, "virtual_network_rules")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventhubNamespaceSpecNetworkRuleIpRules(dict):
    def __init__(__self__, *,
                 ip_mask: Optional[str] = None):
        """
        :param str ip_mask: IPMask - IPv4 address 1.1.1.1 or CIDR notation 1.1.0.0/24
        """
        if ip_mask is not None:
            pulumi.set(__self__, "ip_mask", ip_mask)

    @property
    @pulumi.getter(name="ipMask")
    def ip_mask(self) -> Optional[str]:
        """
        IPMask - IPv4 address 1.1.1.1 or CIDR notation 1.1.0.0/24
        """
        return pulumi.get(self, "ip_mask")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventhubNamespaceSpecNetworkRuleVirtualNetworkRules(dict):
    def __init__(__self__, *,
                 ignore_missing_service_endpoint: Optional[bool] = None,
                 subnet_id: Optional[str] = None):
        """
        :param bool ignore_missing_service_endpoint: IgnoreMissingVnetServiceEndpoint - Value that indicates whether to ignore missing VNet Service Endpoint
        :param str subnet_id: Subnet - Full Resource ID of Virtual Network Subnet
        """
        if ignore_missing_service_endpoint is not None:
            pulumi.set(__self__, "ignore_missing_service_endpoint", ignore_missing_service_endpoint)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="ignoreMissingServiceEndpoint")
    def ignore_missing_service_endpoint(self) -> Optional[bool]:
        """
        IgnoreMissingVnetServiceEndpoint - Value that indicates whether to ignore missing VNet Service Endpoint
        """
        return pulumi.get(self, "ignore_missing_service_endpoint")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        Subnet - Full Resource ID of Virtual Network Subnet
        """
        return pulumi.get(self, "subnet_id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventhubNamespaceSpecProperties(dict):
    """
    EventhubNamespaceProperties defines the namespace properties
    """
    def __init__(__self__, *,
                 is_auto_inflate_enabled: Optional[bool] = None,
                 kafka_enabled: Optional[bool] = None,
                 maximum_throughput_units: Optional[int] = None):
        """
        EventhubNamespaceProperties defines the namespace properties
        """
        if is_auto_inflate_enabled is not None:
            pulumi.set(__self__, "is_auto_inflate_enabled", is_auto_inflate_enabled)
        if kafka_enabled is not None:
            pulumi.set(__self__, "kafka_enabled", kafka_enabled)
        if maximum_throughput_units is not None:
            pulumi.set(__self__, "maximum_throughput_units", maximum_throughput_units)

    @property
    @pulumi.getter(name="isAutoInflateEnabled")
    def is_auto_inflate_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_auto_inflate_enabled")

    @property
    @pulumi.getter(name="kafkaEnabled")
    def kafka_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "kafka_enabled")

    @property
    @pulumi.getter(name="maximumThroughputUnits")
    def maximum_throughput_units(self) -> Optional[int]:
        return pulumi.get(self, "maximum_throughput_units")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventhubNamespaceSpecSku(dict):
    """
    EventhubNamespaceSku defines the sku
    """
    def __init__(__self__, *,
                 capacity: Optional[int] = None,
                 name: Optional[str] = None,
                 tier: Optional[str] = None):
        """
        EventhubNamespaceSku defines the sku
        """
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[int]:
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tier(self) -> Optional[str]:
        return pulumi.get(self, "tier")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventhubNamespaceStatus(dict):
    """
    ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
    """
    def __init__(__self__, *,
                 completed: Optional[str] = None,
                 contains_update: Optional[bool] = None,
                 failed_provisioning: Optional[bool] = None,
                 flattened_secrets: Optional[bool] = None,
                 message: Optional[str] = None,
                 output: Optional[str] = None,
                 polling_url: Optional[str] = None,
                 provisioned: Optional[bool] = None,
                 provisioning: Optional[bool] = None,
                 requested: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 spec_hash: Optional[str] = None,
                 state: Optional[str] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[str]:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[bool]:
        return pulumi.get(self, "contains_update")

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "failed_provisioning")

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[bool]:
        return pulumi.get(self, "flattened_secrets")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def output(self) -> Optional[str]:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[str]:
        return pulumi.get(self, "polling_url")

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[bool]:
        return pulumi.get(self, "provisioned")

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter
    def requested(self) -> Optional[str]:
        return pulumi.get(self, "requested")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[str]:
        return pulumi.get(self, "spec_hash")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventhubSpec(dict):
    """
    EventhubSpec defines the desired state of Eventhub
    """
    def __init__(__self__, *,
                 location: str,
                 resource_group: str,
                 authorization_rule: Optional['outputs.EventhubSpecAuthorizationRule'] = None,
                 key_vault_to_store_secrets: Optional[str] = None,
                 namespace: Optional[str] = None,
                 properties: Optional['outputs.EventhubSpecProperties'] = None,
                 secret_name: Optional[str] = None):
        """
        EventhubSpec defines the desired state of Eventhub
        :param str location: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        :param 'EventhubSpecAuthorizationRuleArgs' authorization_rule: EventhubAuthorizationRule defines the name and rights of the access policy
        :param 'EventhubSpecPropertiesArgs' properties: EventhubProperties defines the namespace properties
        :param str secret_name: SecretName - Used to specify the name of the secret. Defaults to Event Hub name if omitted.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_group", resource_group)
        if authorization_rule is not None:
            pulumi.set(__self__, "authorization_rule", authorization_rule)
        if key_vault_to_store_secrets is not None:
            pulumi.set(__self__, "key_vault_to_store_secrets", key_vault_to_store_secrets)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter(name="authorizationRule")
    def authorization_rule(self) -> Optional['outputs.EventhubSpecAuthorizationRule']:
        """
        EventhubAuthorizationRule defines the name and rights of the access policy
        """
        return pulumi.get(self, "authorization_rule")

    @property
    @pulumi.getter(name="keyVaultToStoreSecrets")
    def key_vault_to_store_secrets(self) -> Optional[str]:
        return pulumi.get(self, "key_vault_to_store_secrets")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def properties(self) -> Optional['outputs.EventhubSpecProperties']:
        """
        EventhubProperties defines the namespace properties
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        """
        SecretName - Used to specify the name of the secret. Defaults to Event Hub name if omitted.
        """
        return pulumi.get(self, "secret_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventhubSpecAuthorizationRule(dict):
    """
    EventhubAuthorizationRule defines the name and rights of the access policy
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 rights: Optional[Sequence[str]] = None):
        """
        EventhubAuthorizationRule defines the name and rights of the access policy
        :param str name: Name - Name of AuthorizationRule for eventhub
        :param Sequence[str] rights: Rights - Rights set on the AuthorizationRule
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rights is not None:
            pulumi.set(__self__, "rights", rights)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name - Name of AuthorizationRule for eventhub
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def rights(self) -> Optional[Sequence[str]]:
        """
        Rights - Rights set on the AuthorizationRule
        """
        return pulumi.get(self, "rights")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventhubSpecProperties(dict):
    """
    EventhubProperties defines the namespace properties
    """
    def __init__(__self__, *,
                 capture_description: Optional['outputs.EventhubSpecPropertiesCaptureDescription'] = None,
                 message_retention_in_days: Optional[int] = None,
                 partition_count: Optional[int] = None):
        """
        EventhubProperties defines the namespace properties
        :param 'EventhubSpecPropertiesCaptureDescriptionArgs' capture_description: CaptureDescription - Details specifying EventHub capture to persistent storage
        :param int message_retention_in_days: MessageRetentionInDays - Number of days to retain the events for this Event Hub, value should be 1 to 7 days
        :param int partition_count: PartitionCount - Number of partitions created for the Event Hub, allowed values are from 2 to 32 partitions.
        """
        if capture_description is not None:
            pulumi.set(__self__, "capture_description", capture_description)
        if message_retention_in_days is not None:
            pulumi.set(__self__, "message_retention_in_days", message_retention_in_days)
        if partition_count is not None:
            pulumi.set(__self__, "partition_count", partition_count)

    @property
    @pulumi.getter(name="captureDescription")
    def capture_description(self) -> Optional['outputs.EventhubSpecPropertiesCaptureDescription']:
        """
        CaptureDescription - Details specifying EventHub capture to persistent storage
        """
        return pulumi.get(self, "capture_description")

    @property
    @pulumi.getter(name="messageRetentionInDays")
    def message_retention_in_days(self) -> Optional[int]:
        """
        MessageRetentionInDays - Number of days to retain the events for this Event Hub, value should be 1 to 7 days
        """
        return pulumi.get(self, "message_retention_in_days")

    @property
    @pulumi.getter(name="partitionCount")
    def partition_count(self) -> Optional[int]:
        """
        PartitionCount - Number of partitions created for the Event Hub, allowed values are from 2 to 32 partitions.
        """
        return pulumi.get(self, "partition_count")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventhubSpecPropertiesCaptureDescription(dict):
    """
    CaptureDescription - Details specifying EventHub capture to persistent storage
    """
    def __init__(__self__, *,
                 enabled: bool,
                 destination: Optional['outputs.EventhubSpecPropertiesCaptureDescriptionDestination'] = None,
                 interval_in_seconds: Optional[int] = None,
                 size_limit_in_bytes: Optional[int] = None):
        """
        CaptureDescription - Details specifying EventHub capture to persistent storage
        :param bool enabled: Enabled - indicates whether capture is enabled
        :param 'EventhubSpecPropertiesCaptureDescriptionDestinationArgs' destination: Destination - Resource id of the storage account to be used to create the blobs
        :param int interval_in_seconds: IntervalInSeconds - The time window allows you to set the frequency with which the capture to Azure Blobs will happen
        :param int size_limit_in_bytes: SizeLimitInBytes - The size window defines the amount of data built up in your Event Hub before an capture operation
        """
        pulumi.set(__self__, "enabled", enabled)
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if interval_in_seconds is not None:
            pulumi.set(__self__, "interval_in_seconds", interval_in_seconds)
        if size_limit_in_bytes is not None:
            pulumi.set(__self__, "size_limit_in_bytes", size_limit_in_bytes)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Enabled - indicates whether capture is enabled
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def destination(self) -> Optional['outputs.EventhubSpecPropertiesCaptureDescriptionDestination']:
        """
        Destination - Resource id of the storage account to be used to create the blobs
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="intervalInSeconds")
    def interval_in_seconds(self) -> Optional[int]:
        """
        IntervalInSeconds - The time window allows you to set the frequency with which the capture to Azure Blobs will happen
        """
        return pulumi.get(self, "interval_in_seconds")

    @property
    @pulumi.getter(name="sizeLimitInBytes")
    def size_limit_in_bytes(self) -> Optional[int]:
        """
        SizeLimitInBytes - The size window defines the amount of data built up in your Event Hub before an capture operation
        """
        return pulumi.get(self, "size_limit_in_bytes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventhubSpecPropertiesCaptureDescriptionDestination(dict):
    """
    Destination - Resource id of the storage account to be used to create the blobs
    """
    def __init__(__self__, *,
                 archive_name_format: Optional[str] = None,
                 blob_container: Optional[str] = None,
                 name: Optional[str] = None,
                 storage_account: Optional['outputs.EventhubSpecPropertiesCaptureDescriptionDestinationStorageAccount'] = None):
        """
        Destination - Resource id of the storage account to be used to create the blobs
        :param str archive_name_format: ArchiveNameFormat - Blob naming convention for archive, e.g. {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
        :param str blob_container: BlobContainer - Blob container Name
        :param str name: Name - Name for capture destination
        :param 'EventhubSpecPropertiesCaptureDescriptionDestinationStorageAccountArgs' storage_account: StorageAccount - Details of the storage account
        """
        if archive_name_format is not None:
            pulumi.set(__self__, "archive_name_format", archive_name_format)
        if blob_container is not None:
            pulumi.set(__self__, "blob_container", blob_container)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if storage_account is not None:
            pulumi.set(__self__, "storage_account", storage_account)

    @property
    @pulumi.getter(name="archiveNameFormat")
    def archive_name_format(self) -> Optional[str]:
        """
        ArchiveNameFormat - Blob naming convention for archive, e.g. {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
        """
        return pulumi.get(self, "archive_name_format")

    @property
    @pulumi.getter(name="blobContainer")
    def blob_container(self) -> Optional[str]:
        """
        BlobContainer - Blob container Name
        """
        return pulumi.get(self, "blob_container")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name - Name for capture destination
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="storageAccount")
    def storage_account(self) -> Optional['outputs.EventhubSpecPropertiesCaptureDescriptionDestinationStorageAccount']:
        """
        StorageAccount - Details of the storage account
        """
        return pulumi.get(self, "storage_account")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventhubSpecPropertiesCaptureDescriptionDestinationStorageAccount(dict):
    """
    StorageAccount - Details of the storage account
    """
    def __init__(__self__, *,
                 account_name: Optional[str] = None,
                 resource_group: Optional[str] = None):
        """
        StorageAccount - Details of the storage account
        :param str account_name: AccountName - Name of the storage account
        :param str resource_group: ResourceGroup - Name of the storage account resource group
        """
        if account_name is not None:
            pulumi.set(__self__, "account_name", account_name)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[str]:
        """
        AccountName - Name of the storage account
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[str]:
        """
        ResourceGroup - Name of the storage account resource group
        """
        return pulumi.get(self, "resource_group")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class EventhubStatus(dict):
    """
    ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
    """
    def __init__(__self__, *,
                 completed: Optional[str] = None,
                 contains_update: Optional[bool] = None,
                 failed_provisioning: Optional[bool] = None,
                 flattened_secrets: Optional[bool] = None,
                 message: Optional[str] = None,
                 output: Optional[str] = None,
                 polling_url: Optional[str] = None,
                 provisioned: Optional[bool] = None,
                 provisioning: Optional[bool] = None,
                 requested: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 spec_hash: Optional[str] = None,
                 state: Optional[str] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[str]:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[bool]:
        return pulumi.get(self, "contains_update")

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "failed_provisioning")

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[bool]:
        return pulumi.get(self, "flattened_secrets")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def output(self) -> Optional[str]:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[str]:
        return pulumi.get(self, "polling_url")

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[bool]:
        return pulumi.get(self, "provisioned")

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter
    def requested(self) -> Optional[str]:
        return pulumi.get(self, "requested")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[str]:
        return pulumi.get(self, "spec_hash")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KeyVaultKeySpec(dict):
    """
    KeyVaultKeySpec defines the desired state of KeyVaultKey
    """
    def __init__(__self__, *,
                 location: str,
                 resource_group: str,
                 curve: Optional[str] = None,
                 key_size: Optional[int] = None,
                 key_vault: Optional[str] = None,
                 operations: Optional[Sequence[str]] = None,
                 type: Optional[str] = None):
        """
        KeyVaultKeySpec defines the desired state of KeyVaultKey
        :param str location: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        :param str curve: JSONWebKeyCurveName enumerates the values for json web key curve name.
        :param str type: JSONWebKeyType enumerates the values for json web key type.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_group", resource_group)
        if curve is not None:
            pulumi.set(__self__, "curve", curve)
        if key_size is not None:
            pulumi.set(__self__, "key_size", key_size)
        if key_vault is not None:
            pulumi.set(__self__, "key_vault", key_vault)
        if operations is not None:
            pulumi.set(__self__, "operations", operations)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter
    def curve(self) -> Optional[str]:
        """
        JSONWebKeyCurveName enumerates the values for json web key curve name.
        """
        return pulumi.get(self, "curve")

    @property
    @pulumi.getter(name="keySize")
    def key_size(self) -> Optional[int]:
        return pulumi.get(self, "key_size")

    @property
    @pulumi.getter(name="keyVault")
    def key_vault(self) -> Optional[str]:
        return pulumi.get(self, "key_vault")

    @property
    @pulumi.getter
    def operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "operations")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        JSONWebKeyType enumerates the values for json web key type.
        """
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KeyVaultKeyStatus(dict):
    """
    ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
    """
    def __init__(__self__, *,
                 completed: Optional[str] = None,
                 contains_update: Optional[bool] = None,
                 failed_provisioning: Optional[bool] = None,
                 flattened_secrets: Optional[bool] = None,
                 message: Optional[str] = None,
                 output: Optional[str] = None,
                 polling_url: Optional[str] = None,
                 provisioned: Optional[bool] = None,
                 provisioning: Optional[bool] = None,
                 requested: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 spec_hash: Optional[str] = None,
                 state: Optional[str] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[str]:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[bool]:
        return pulumi.get(self, "contains_update")

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "failed_provisioning")

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[bool]:
        return pulumi.get(self, "flattened_secrets")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def output(self) -> Optional[str]:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[str]:
        return pulumi.get(self, "polling_url")

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[bool]:
        return pulumi.get(self, "provisioned")

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter
    def requested(self) -> Optional[str]:
        return pulumi.get(self, "requested")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[str]:
        return pulumi.get(self, "spec_hash")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KeyVaultSpec(dict):
    """
    KeyVaultSpec defines the desired state of KeyVault
    """
    def __init__(__self__, *,
                 location: str,
                 resource_group: str,
                 access_policies: Optional[Sequence['outputs.KeyVaultSpecAccessPolicies']] = None,
                 enable_soft_delete: Optional[bool] = None,
                 network_policies: Optional['outputs.KeyVaultSpecNetworkPolicies'] = None,
                 sku: Optional['outputs.KeyVaultSpecSku'] = None):
        """
        KeyVaultSpec defines the desired state of KeyVault
        :param 'KeyVaultSpecSkuArgs' sku: KeyVaultSku the SKU of the Key Vault
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_group", resource_group)
        if access_policies is not None:
            pulumi.set(__self__, "access_policies", access_policies)
        if enable_soft_delete is not None:
            pulumi.set(__self__, "enable_soft_delete", enable_soft_delete)
        if network_policies is not None:
            pulumi.set(__self__, "network_policies", network_policies)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)

    @property
    @pulumi.getter
    def location(self) -> str:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter(name="accessPolicies")
    def access_policies(self) -> Optional[Sequence['outputs.KeyVaultSpecAccessPolicies']]:
        return pulumi.get(self, "access_policies")

    @property
    @pulumi.getter(name="enableSoftDelete")
    def enable_soft_delete(self) -> Optional[bool]:
        return pulumi.get(self, "enable_soft_delete")

    @property
    @pulumi.getter(name="networkPolicies")
    def network_policies(self) -> Optional['outputs.KeyVaultSpecNetworkPolicies']:
        return pulumi.get(self, "network_policies")

    @property
    @pulumi.getter
    def sku(self) -> Optional['outputs.KeyVaultSpecSku']:
        """
        KeyVaultSku the SKU of the Key Vault
        """
        return pulumi.get(self, "sku")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KeyVaultSpecAccessPolicies(dict):
    def __init__(__self__, *,
                 application_id: Optional[str] = None,
                 client_id: Optional[str] = None,
                 object_id: Optional[str] = None,
                 permissions: Optional['outputs.KeyVaultSpecAccessPoliciesPermissions'] = None,
                 tenant_id: Optional[str] = None):
        """
        :param str application_id: ApplicationID -  Application ID of the client making request on behalf of a principal
        :param str client_id: ClientID - The client ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The client ID must be unique for the list of access policies.
        :param str object_id: ObjectID is the value to use if the access policy is for a user other than the user creating the Key Vault when the creating user does not have access to the Application API which is used to translate ClientID to Object ID To get around this, use az-cli or the Azure portal to source the ObjectID from your Service Principal
        :param 'KeyVaultSpecAccessPoliciesPermissionsArgs' permissions: Permissions - Permissions the identity has for keys, secrets, and certificates.
        :param str tenant_id: TenantID - The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
        """
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if object_id is not None:
            pulumi.set(__self__, "object_id", object_id)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="applicationID")
    def application_id(self) -> Optional[str]:
        """
        ApplicationID -  Application ID of the client making request on behalf of a principal
        """
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter(name="clientID")
    def client_id(self) -> Optional[str]:
        """
        ClientID - The client ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The client ID must be unique for the list of access policies.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="objectID")
    def object_id(self) -> Optional[str]:
        """
        ObjectID is the value to use if the access policy is for a user other than the user creating the Key Vault when the creating user does not have access to the Application API which is used to translate ClientID to Object ID To get around this, use az-cli or the Azure portal to source the ObjectID from your Service Principal
        """
        return pulumi.get(self, "object_id")

    @property
    @pulumi.getter
    def permissions(self) -> Optional['outputs.KeyVaultSpecAccessPoliciesPermissions']:
        """
        Permissions - Permissions the identity has for keys, secrets, and certificates.
        """
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter(name="tenantID")
    def tenant_id(self) -> Optional[str]:
        """
        TenantID - The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
        """
        return pulumi.get(self, "tenant_id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KeyVaultSpecAccessPoliciesPermissions(dict):
    """
    Permissions - Permissions the identity has for keys, secrets, and certificates.
    """
    def __init__(__self__, *,
                 certificates: Optional[Sequence[str]] = None,
                 keys: Optional[Sequence[str]] = None,
                 secrets: Optional[Sequence[str]] = None,
                 storage: Optional[Sequence[str]] = None):
        """
        Permissions - Permissions the identity has for keys, secrets, and certificates.
        """
        if certificates is not None:
            pulumi.set(__self__, "certificates", certificates)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if secrets is not None:
            pulumi.set(__self__, "secrets", secrets)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def certificates(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "certificates")

    @property
    @pulumi.getter
    def keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "keys")

    @property
    @pulumi.getter
    def secrets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "secrets")

    @property
    @pulumi.getter
    def storage(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "storage")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KeyVaultSpecNetworkPolicies(dict):
    def __init__(__self__, *,
                 bypass: Optional[str] = None,
                 default_action: Optional[str] = None,
                 ip_rules: Optional[Sequence[str]] = None,
                 virtual_network_rules: Optional[Sequence[str]] = None):
        """
        :param str bypass: Bypass - Tells what traffic can bypass network rules. This can be 'AzureServices' or 'None'.  If not specified the default is 'AzureServices'. Possible values include: 'AzureServices', 'None'
        :param str default_action: DefaultAction - The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after the bypass property has been evaluated. Possible values include: 'Allow', 'Deny'
        :param Sequence[str] ip_rules: IPRules - The list of IP address rules.
        :param Sequence[str] virtual_network_rules: VirtualNetworkRules - The list of virtual network rules.
        """
        if bypass is not None:
            pulumi.set(__self__, "bypass", bypass)
        if default_action is not None:
            pulumi.set(__self__, "default_action", default_action)
        if ip_rules is not None:
            pulumi.set(__self__, "ip_rules", ip_rules)
        if virtual_network_rules is not None:
            pulumi.set(__self__, "virtual_network_rules", virtual_network_rules)

    @property
    @pulumi.getter
    def bypass(self) -> Optional[str]:
        """
        Bypass - Tells what traffic can bypass network rules. This can be 'AzureServices' or 'None'.  If not specified the default is 'AzureServices'. Possible values include: 'AzureServices', 'None'
        """
        return pulumi.get(self, "bypass")

    @property
    @pulumi.getter(name="defaultAction")
    def default_action(self) -> Optional[str]:
        """
        DefaultAction - The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after the bypass property has been evaluated. Possible values include: 'Allow', 'Deny'
        """
        return pulumi.get(self, "default_action")

    @property
    @pulumi.getter(name="ipRules")
    def ip_rules(self) -> Optional[Sequence[str]]:
        """
        IPRules - The list of IP address rules.
        """
        return pulumi.get(self, "ip_rules")

    @property
    @pulumi.getter(name="virtualNetworkRules")
    def virtual_network_rules(self) -> Optional[Sequence[str]]:
        """
        VirtualNetworkRules - The list of virtual network rules.
        """
        return pulumi.get(self, "virtual_network_rules")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KeyVaultSpecSku(dict):
    """
    KeyVaultSku the SKU of the Key Vault
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        KeyVaultSku the SKU of the Key Vault
        :param str name: Name - The SKU name. Required for account creation; optional for update. Possible values include: 'Premium', `Standard`
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name - The SKU name. Required for account creation; optional for update. Possible values include: 'Premium', `Standard`
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class KeyVaultStatus(dict):
    """
    ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
    """
    def __init__(__self__, *,
                 completed: Optional[str] = None,
                 contains_update: Optional[bool] = None,
                 failed_provisioning: Optional[bool] = None,
                 flattened_secrets: Optional[bool] = None,
                 message: Optional[str] = None,
                 output: Optional[str] = None,
                 polling_url: Optional[str] = None,
                 provisioned: Optional[bool] = None,
                 provisioning: Optional[bool] = None,
                 requested: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 spec_hash: Optional[str] = None,
                 state: Optional[str] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[str]:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[bool]:
        return pulumi.get(self, "contains_update")

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "failed_provisioning")

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[bool]:
        return pulumi.get(self, "flattened_secrets")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def output(self) -> Optional[str]:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[str]:
        return pulumi.get(self, "polling_url")

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[bool]:
        return pulumi.get(self, "provisioned")

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter
    def requested(self) -> Optional[str]:
        return pulumi.get(self, "requested")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[str]:
        return pulumi.get(self, "spec_hash")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MySQLDatabaseSpec(dict):
    """
    MySQLDatabaseSpec defines the desired state of MySQLDatabase
    """
    def __init__(__self__, *,
                 resource_group: str,
                 server: Optional[str] = None):
        """
        MySQLDatabaseSpec defines the desired state of MySQLDatabase
        """
        pulumi.set(__self__, "resource_group", resource_group)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        return pulumi.get(self, "server")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MySQLDatabaseStatus(dict):
    """
    ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
    """
    def __init__(__self__, *,
                 completed: Optional[str] = None,
                 contains_update: Optional[bool] = None,
                 failed_provisioning: Optional[bool] = None,
                 flattened_secrets: Optional[bool] = None,
                 message: Optional[str] = None,
                 output: Optional[str] = None,
                 polling_url: Optional[str] = None,
                 provisioned: Optional[bool] = None,
                 provisioning: Optional[bool] = None,
                 requested: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 spec_hash: Optional[str] = None,
                 state: Optional[str] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[str]:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[bool]:
        return pulumi.get(self, "contains_update")

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "failed_provisioning")

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[bool]:
        return pulumi.get(self, "flattened_secrets")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def output(self) -> Optional[str]:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[str]:
        return pulumi.get(self, "polling_url")

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[bool]:
        return pulumi.get(self, "provisioned")

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter
    def requested(self) -> Optional[str]:
        return pulumi.get(self, "requested")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[str]:
        return pulumi.get(self, "spec_hash")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MySQLFirewallRuleSpec(dict):
    """
    MySQLFirewallRuleSpec defines the desired state of MySQLFirewallRule
    """
    def __init__(__self__, *,
                 end_ip_address: str,
                 resource_group: str,
                 server: str,
                 start_ip_address: str):
        """
        MySQLFirewallRuleSpec defines the desired state of MySQLFirewallRule
        """
        pulumi.set(__self__, "end_ip_address", end_ip_address)
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "server", server)
        pulumi.set(__self__, "start_ip_address", start_ip_address)

    @property
    @pulumi.getter(name="endIpAddress")
    def end_ip_address(self) -> str:
        return pulumi.get(self, "end_ip_address")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter
    def server(self) -> str:
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="startIpAddress")
    def start_ip_address(self) -> str:
        return pulumi.get(self, "start_ip_address")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MySQLFirewallRuleStatus(dict):
    """
    ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
    """
    def __init__(__self__, *,
                 completed: Optional[str] = None,
                 contains_update: Optional[bool] = None,
                 failed_provisioning: Optional[bool] = None,
                 flattened_secrets: Optional[bool] = None,
                 message: Optional[str] = None,
                 output: Optional[str] = None,
                 polling_url: Optional[str] = None,
                 provisioned: Optional[bool] = None,
                 provisioning: Optional[bool] = None,
                 requested: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 spec_hash: Optional[str] = None,
                 state: Optional[str] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[str]:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[bool]:
        return pulumi.get(self, "contains_update")

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "failed_provisioning")

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[bool]:
        return pulumi.get(self, "flattened_secrets")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def output(self) -> Optional[str]:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[str]:
        return pulumi.get(self, "polling_url")

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[bool]:
        return pulumi.get(self, "provisioned")

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter
    def requested(self) -> Optional[str]:
        return pulumi.get(self, "requested")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[str]:
        return pulumi.get(self, "spec_hash")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MySQLServerSpec(dict):
    """
    MySQLServerSpec defines the desired state of MySQLServer
    """
    def __init__(__self__, *,
                 location: str,
                 resource_group: str,
                 create_mode: Optional[str] = None,
                 key_vault_to_store_secrets: Optional[str] = None,
                 replica_properties: Optional['outputs.MySQLServerSpecReplicaProperties'] = None,
                 server_version: Optional[str] = None,
                 sku: Optional['outputs.MySQLServerSpecSku'] = None,
                 ssl_enforcement: Optional[str] = None):
        """
        MySQLServerSpec defines the desired state of MySQLServer
        :param str server_version: ServerVersion enumerates the values for server version.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_group", resource_group)
        if create_mode is not None:
            pulumi.set(__self__, "create_mode", create_mode)
        if key_vault_to_store_secrets is not None:
            pulumi.set(__self__, "key_vault_to_store_secrets", key_vault_to_store_secrets)
        if replica_properties is not None:
            pulumi.set(__self__, "replica_properties", replica_properties)
        if server_version is not None:
            pulumi.set(__self__, "server_version", server_version)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)
        if ssl_enforcement is not None:
            pulumi.set(__self__, "ssl_enforcement", ssl_enforcement)

    @property
    @pulumi.getter
    def location(self) -> str:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter(name="createMode")
    def create_mode(self) -> Optional[str]:
        return pulumi.get(self, "create_mode")

    @property
    @pulumi.getter(name="keyVaultToStoreSecrets")
    def key_vault_to_store_secrets(self) -> Optional[str]:
        return pulumi.get(self, "key_vault_to_store_secrets")

    @property
    @pulumi.getter(name="replicaProperties")
    def replica_properties(self) -> Optional['outputs.MySQLServerSpecReplicaProperties']:
        return pulumi.get(self, "replica_properties")

    @property
    @pulumi.getter(name="serverVersion")
    def server_version(self) -> Optional[str]:
        """
        ServerVersion enumerates the values for server version.
        """
        return pulumi.get(self, "server_version")

    @property
    @pulumi.getter
    def sku(self) -> Optional['outputs.MySQLServerSpecSku']:
        return pulumi.get(self, "sku")

    @property
    @pulumi.getter(name="sslEnforcement")
    def ssl_enforcement(self) -> Optional[str]:
        return pulumi.get(self, "ssl_enforcement")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MySQLServerSpecReplicaProperties(dict):
    def __init__(__self__, *,
                 source_server_id: Optional[str] = None):
        if source_server_id is not None:
            pulumi.set(__self__, "source_server_id", source_server_id)

    @property
    @pulumi.getter(name="sourceServerId")
    def source_server_id(self) -> Optional[str]:
        return pulumi.get(self, "source_server_id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MySQLServerSpecSku(dict):
    def __init__(__self__, *,
                 capacity: Optional[int] = None,
                 family: Optional[str] = None,
                 name: Optional[str] = None,
                 size: Optional[str] = None,
                 tier: Optional[str] = None):
        """
        :param int capacity: Capacity - The scale up/out capacity, representing server's compute units.
        :param str family: Family - The family of hardware.
        :param str name: Name - The name of the sku, typically, tier + family + cores, e.g. B_Gen4_1, GP_Gen5_8.
        :param str size: Size - The size code, to be interpreted by resource as appropriate.
        :param str tier: Tier - The tier of the particular SKU, e.g. Basic. Possible values include: 'Basic', 'GeneralPurpose', 'MemoryOptimized'
        """
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[int]:
        """
        Capacity - The scale up/out capacity, representing server's compute units.
        """
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter
    def family(self) -> Optional[str]:
        """
        Family - The family of hardware.
        """
        return pulumi.get(self, "family")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name - The name of the sku, typically, tier + family + cores, e.g. B_Gen4_1, GP_Gen5_8.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        """
        Size - The size code, to be interpreted by resource as appropriate.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def tier(self) -> Optional[str]:
        """
        Tier - The tier of the particular SKU, e.g. Basic. Possible values include: 'Basic', 'GeneralPurpose', 'MemoryOptimized'
        """
        return pulumi.get(self, "tier")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MySQLServerStatus(dict):
    """
    ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
    """
    def __init__(__self__, *,
                 completed: Optional[str] = None,
                 contains_update: Optional[bool] = None,
                 failed_provisioning: Optional[bool] = None,
                 flattened_secrets: Optional[bool] = None,
                 message: Optional[str] = None,
                 output: Optional[str] = None,
                 polling_url: Optional[str] = None,
                 provisioned: Optional[bool] = None,
                 provisioning: Optional[bool] = None,
                 requested: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 spec_hash: Optional[str] = None,
                 state: Optional[str] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[str]:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[bool]:
        return pulumi.get(self, "contains_update")

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "failed_provisioning")

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[bool]:
        return pulumi.get(self, "flattened_secrets")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def output(self) -> Optional[str]:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[str]:
        return pulumi.get(self, "polling_url")

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[bool]:
        return pulumi.get(self, "provisioned")

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter
    def requested(self) -> Optional[str]:
        return pulumi.get(self, "requested")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[str]:
        return pulumi.get(self, "spec_hash")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MySQLUserSpec(dict):
    """
    MySQLUserSpec defines the desired state of MySqlUser
    """
    def __init__(__self__, *,
                 db_name: str,
                 resource_group: str,
                 roles: Sequence[str],
                 server: str,
                 admin_secret: Optional[str] = None,
                 admin_secret_key_vault: Optional[str] = None,
                 key_vault_to_store_secrets: Optional[str] = None,
                 username: Optional[str] = None):
        """
        MySQLUserSpec defines the desired state of MySqlUser
        :param str server: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        :param str admin_secret: optional
        """
        pulumi.set(__self__, "db_name", db_name)
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "server", server)
        if admin_secret is not None:
            pulumi.set(__self__, "admin_secret", admin_secret)
        if admin_secret_key_vault is not None:
            pulumi.set(__self__, "admin_secret_key_vault", admin_secret_key_vault)
        if key_vault_to_store_secrets is not None:
            pulumi.set(__self__, "key_vault_to_store_secrets", key_vault_to_store_secrets)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> str:
        return pulumi.get(self, "db_name")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter
    def server(self) -> str:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="adminSecret")
    def admin_secret(self) -> Optional[str]:
        """
        optional
        """
        return pulumi.get(self, "admin_secret")

    @property
    @pulumi.getter(name="adminSecretKeyVault")
    def admin_secret_key_vault(self) -> Optional[str]:
        return pulumi.get(self, "admin_secret_key_vault")

    @property
    @pulumi.getter(name="keyVaultToStoreSecrets")
    def key_vault_to_store_secrets(self) -> Optional[str]:
        return pulumi.get(self, "key_vault_to_store_secrets")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MySQLUserStatus(dict):
    """
    ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
    """
    def __init__(__self__, *,
                 completed: Optional[str] = None,
                 contains_update: Optional[bool] = None,
                 failed_provisioning: Optional[bool] = None,
                 flattened_secrets: Optional[bool] = None,
                 message: Optional[str] = None,
                 output: Optional[str] = None,
                 polling_url: Optional[str] = None,
                 provisioned: Optional[bool] = None,
                 provisioning: Optional[bool] = None,
                 requested: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 spec_hash: Optional[str] = None,
                 state: Optional[str] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[str]:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[bool]:
        return pulumi.get(self, "contains_update")

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "failed_provisioning")

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[bool]:
        return pulumi.get(self, "flattened_secrets")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def output(self) -> Optional[str]:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[str]:
        return pulumi.get(self, "polling_url")

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[bool]:
        return pulumi.get(self, "provisioned")

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter
    def requested(self) -> Optional[str]:
        return pulumi.get(self, "requested")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[str]:
        return pulumi.get(self, "spec_hash")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MySQLVNetRuleSpec(dict):
    """
    MySQLVNetRuleSpec defines the desired state of MySQLVNetRule
    """
    def __init__(__self__, *,
                 resource_group: str,
                 server: str,
                 subnet_name: str,
                 v_net_name: str,
                 v_net_resource_group: str,
                 ignore_missing_service_endpoint: Optional[bool] = None):
        """
        MySQLVNetRuleSpec defines the desired state of MySQLVNetRule
        :param str resource_group: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "server", server)
        pulumi.set(__self__, "subnet_name", subnet_name)
        pulumi.set(__self__, "v_net_name", v_net_name)
        pulumi.set(__self__, "v_net_resource_group", v_net_resource_group)
        if ignore_missing_service_endpoint is not None:
            pulumi.set(__self__, "ignore_missing_service_endpoint", ignore_missing_service_endpoint)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter
    def server(self) -> str:
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="subnetName")
    def subnet_name(self) -> str:
        return pulumi.get(self, "subnet_name")

    @property
    @pulumi.getter(name="vNetName")
    def v_net_name(self) -> str:
        return pulumi.get(self, "v_net_name")

    @property
    @pulumi.getter(name="vNetResourceGroup")
    def v_net_resource_group(self) -> str:
        return pulumi.get(self, "v_net_resource_group")

    @property
    @pulumi.getter(name="ignoreMissingServiceEndpoint")
    def ignore_missing_service_endpoint(self) -> Optional[bool]:
        return pulumi.get(self, "ignore_missing_service_endpoint")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MySQLVNetRuleStatus(dict):
    """
    ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
    """
    def __init__(__self__, *,
                 completed: Optional[str] = None,
                 contains_update: Optional[bool] = None,
                 failed_provisioning: Optional[bool] = None,
                 flattened_secrets: Optional[bool] = None,
                 message: Optional[str] = None,
                 output: Optional[str] = None,
                 polling_url: Optional[str] = None,
                 provisioned: Optional[bool] = None,
                 provisioning: Optional[bool] = None,
                 requested: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 spec_hash: Optional[str] = None,
                 state: Optional[str] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[str]:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[bool]:
        return pulumi.get(self, "contains_update")

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "failed_provisioning")

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[bool]:
        return pulumi.get(self, "flattened_secrets")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def output(self) -> Optional[str]:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[str]:
        return pulumi.get(self, "polling_url")

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[bool]:
        return pulumi.get(self, "provisioned")

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter
    def requested(self) -> Optional[str]:
        return pulumi.get(self, "requested")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[str]:
        return pulumi.get(self, "spec_hash")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PostgreSQLDatabaseSpec(dict):
    """
    PostgreSQLDatabaseSpec defines the desired state of PostgreSQLDatabase
    """
    def __init__(__self__, *,
                 resource_group: str,
                 server: str):
        """
        PostgreSQLDatabaseSpec defines the desired state of PostgreSQLDatabase
        :param str resource_group: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter
    def server(self) -> str:
        return pulumi.get(self, "server")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PostgreSQLDatabaseStatus(dict):
    """
    ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
    """
    def __init__(__self__, *,
                 completed: Optional[str] = None,
                 contains_update: Optional[bool] = None,
                 failed_provisioning: Optional[bool] = None,
                 flattened_secrets: Optional[bool] = None,
                 message: Optional[str] = None,
                 output: Optional[str] = None,
                 polling_url: Optional[str] = None,
                 provisioned: Optional[bool] = None,
                 provisioning: Optional[bool] = None,
                 requested: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 spec_hash: Optional[str] = None,
                 state: Optional[str] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[str]:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[bool]:
        return pulumi.get(self, "contains_update")

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "failed_provisioning")

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[bool]:
        return pulumi.get(self, "flattened_secrets")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def output(self) -> Optional[str]:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[str]:
        return pulumi.get(self, "polling_url")

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[bool]:
        return pulumi.get(self, "provisioned")

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter
    def requested(self) -> Optional[str]:
        return pulumi.get(self, "requested")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[str]:
        return pulumi.get(self, "spec_hash")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PostgreSQLFirewallRuleSpec(dict):
    """
    PostgreSQLFirewallRuleSpec defines the desired state of PostgreSQLFirewallRule
    """
    def __init__(__self__, *,
                 end_ip_address: str,
                 resource_group: str,
                 server: str,
                 start_ip_address: str):
        """
        PostgreSQLFirewallRuleSpec defines the desired state of PostgreSQLFirewallRule
        :param str resource_group: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        pulumi.set(__self__, "end_ip_address", end_ip_address)
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "server", server)
        pulumi.set(__self__, "start_ip_address", start_ip_address)

    @property
    @pulumi.getter(name="endIpAddress")
    def end_ip_address(self) -> str:
        return pulumi.get(self, "end_ip_address")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter
    def server(self) -> str:
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="startIpAddress")
    def start_ip_address(self) -> str:
        return pulumi.get(self, "start_ip_address")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PostgreSQLFirewallRuleStatus(dict):
    """
    ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
    """
    def __init__(__self__, *,
                 completed: Optional[str] = None,
                 contains_update: Optional[bool] = None,
                 failed_provisioning: Optional[bool] = None,
                 flattened_secrets: Optional[bool] = None,
                 message: Optional[str] = None,
                 output: Optional[str] = None,
                 polling_url: Optional[str] = None,
                 provisioned: Optional[bool] = None,
                 provisioning: Optional[bool] = None,
                 requested: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 spec_hash: Optional[str] = None,
                 state: Optional[str] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[str]:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[bool]:
        return pulumi.get(self, "contains_update")

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "failed_provisioning")

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[bool]:
        return pulumi.get(self, "flattened_secrets")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def output(self) -> Optional[str]:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[str]:
        return pulumi.get(self, "polling_url")

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[bool]:
        return pulumi.get(self, "provisioned")

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter
    def requested(self) -> Optional[str]:
        return pulumi.get(self, "requested")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[str]:
        return pulumi.get(self, "spec_hash")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PostgreSQLServerSpec(dict):
    """
    PostgreSQLServerSpec defines the desired state of PostgreSQLServer
    """
    def __init__(__self__, *,
                 location: str,
                 resource_group: str,
                 create_mode: Optional[str] = None,
                 key_vault_to_store_secrets: Optional[str] = None,
                 replica_properties: Optional['outputs.PostgreSQLServerSpecReplicaProperties'] = None,
                 server_version: Optional[str] = None,
                 sku: Optional['outputs.PostgreSQLServerSpecSku'] = None,
                 ssl_enforcement: Optional[str] = None):
        """
        PostgreSQLServerSpec defines the desired state of PostgreSQLServer
        :param str server_version: ServerVersion enumerates the values for server version.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_group", resource_group)
        if create_mode is not None:
            pulumi.set(__self__, "create_mode", create_mode)
        if key_vault_to_store_secrets is not None:
            pulumi.set(__self__, "key_vault_to_store_secrets", key_vault_to_store_secrets)
        if replica_properties is not None:
            pulumi.set(__self__, "replica_properties", replica_properties)
        if server_version is not None:
            pulumi.set(__self__, "server_version", server_version)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)
        if ssl_enforcement is not None:
            pulumi.set(__self__, "ssl_enforcement", ssl_enforcement)

    @property
    @pulumi.getter
    def location(self) -> str:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter(name="createMode")
    def create_mode(self) -> Optional[str]:
        return pulumi.get(self, "create_mode")

    @property
    @pulumi.getter(name="keyVaultToStoreSecrets")
    def key_vault_to_store_secrets(self) -> Optional[str]:
        return pulumi.get(self, "key_vault_to_store_secrets")

    @property
    @pulumi.getter(name="replicaProperties")
    def replica_properties(self) -> Optional['outputs.PostgreSQLServerSpecReplicaProperties']:
        return pulumi.get(self, "replica_properties")

    @property
    @pulumi.getter(name="serverVersion")
    def server_version(self) -> Optional[str]:
        """
        ServerVersion enumerates the values for server version.
        """
        return pulumi.get(self, "server_version")

    @property
    @pulumi.getter
    def sku(self) -> Optional['outputs.PostgreSQLServerSpecSku']:
        return pulumi.get(self, "sku")

    @property
    @pulumi.getter(name="sslEnforcement")
    def ssl_enforcement(self) -> Optional[str]:
        return pulumi.get(self, "ssl_enforcement")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PostgreSQLServerSpecReplicaProperties(dict):
    def __init__(__self__, *,
                 source_server_id: Optional[str] = None):
        if source_server_id is not None:
            pulumi.set(__self__, "source_server_id", source_server_id)

    @property
    @pulumi.getter(name="sourceServerId")
    def source_server_id(self) -> Optional[str]:
        return pulumi.get(self, "source_server_id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PostgreSQLServerSpecSku(dict):
    def __init__(__self__, *,
                 capacity: Optional[int] = None,
                 family: Optional[str] = None,
                 name: Optional[str] = None,
                 size: Optional[str] = None,
                 tier: Optional[str] = None):
        """
        :param int capacity: Capacity - The scale up/out capacity, representing server's compute units.
        :param str family: Family - The family of hardware.
        :param str name: Name - The name of the sku, typically, tier + family + cores, e.g. B_Gen4_1, GP_Gen5_8.
        :param str size: Size - The size code, to be interpreted by resource as appropriate.
        :param str tier: Tier - The tier of the particular SKU, e.g. Basic. Possible values include: 'Basic', 'GeneralPurpose', 'MemoryOptimized'
        """
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[int]:
        """
        Capacity - The scale up/out capacity, representing server's compute units.
        """
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter
    def family(self) -> Optional[str]:
        """
        Family - The family of hardware.
        """
        return pulumi.get(self, "family")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name - The name of the sku, typically, tier + family + cores, e.g. B_Gen4_1, GP_Gen5_8.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        """
        Size - The size code, to be interpreted by resource as appropriate.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def tier(self) -> Optional[str]:
        """
        Tier - The tier of the particular SKU, e.g. Basic. Possible values include: 'Basic', 'GeneralPurpose', 'MemoryOptimized'
        """
        return pulumi.get(self, "tier")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PostgreSQLServerStatus(dict):
    """
    ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
    """
    def __init__(__self__, *,
                 completed: Optional[str] = None,
                 contains_update: Optional[bool] = None,
                 failed_provisioning: Optional[bool] = None,
                 flattened_secrets: Optional[bool] = None,
                 message: Optional[str] = None,
                 output: Optional[str] = None,
                 polling_url: Optional[str] = None,
                 provisioned: Optional[bool] = None,
                 provisioning: Optional[bool] = None,
                 requested: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 spec_hash: Optional[str] = None,
                 state: Optional[str] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[str]:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[bool]:
        return pulumi.get(self, "contains_update")

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "failed_provisioning")

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[bool]:
        return pulumi.get(self, "flattened_secrets")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def output(self) -> Optional[str]:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[str]:
        return pulumi.get(self, "polling_url")

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[bool]:
        return pulumi.get(self, "provisioned")

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter
    def requested(self) -> Optional[str]:
        return pulumi.get(self, "requested")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[str]:
        return pulumi.get(self, "spec_hash")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PostgreSQLUserSpec(dict):
    """
    PostgreSQLUserSpec defines the desired state of PostgreSqlUser
    """
    def __init__(__self__, *,
                 db_name: str,
                 resource_group: str,
                 roles: Sequence[str],
                 server: str,
                 admin_secret: Optional[str] = None,
                 admin_secret_key_vault: Optional[str] = None,
                 key_vault_to_store_secrets: Optional[str] = None,
                 username: Optional[str] = None):
        """
        PostgreSQLUserSpec defines the desired state of PostgreSqlUser
        :param str server: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        :param str admin_secret: optional
        """
        pulumi.set(__self__, "db_name", db_name)
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "server", server)
        if admin_secret is not None:
            pulumi.set(__self__, "admin_secret", admin_secret)
        if admin_secret_key_vault is not None:
            pulumi.set(__self__, "admin_secret_key_vault", admin_secret_key_vault)
        if key_vault_to_store_secrets is not None:
            pulumi.set(__self__, "key_vault_to_store_secrets", key_vault_to_store_secrets)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> str:
        return pulumi.get(self, "db_name")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter
    def server(self) -> str:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="adminSecret")
    def admin_secret(self) -> Optional[str]:
        """
        optional
        """
        return pulumi.get(self, "admin_secret")

    @property
    @pulumi.getter(name="adminSecretKeyVault")
    def admin_secret_key_vault(self) -> Optional[str]:
        return pulumi.get(self, "admin_secret_key_vault")

    @property
    @pulumi.getter(name="keyVaultToStoreSecrets")
    def key_vault_to_store_secrets(self) -> Optional[str]:
        return pulumi.get(self, "key_vault_to_store_secrets")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PostgreSQLUserStatus(dict):
    """
    ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
    """
    def __init__(__self__, *,
                 completed: Optional[str] = None,
                 contains_update: Optional[bool] = None,
                 failed_provisioning: Optional[bool] = None,
                 flattened_secrets: Optional[bool] = None,
                 message: Optional[str] = None,
                 output: Optional[str] = None,
                 polling_url: Optional[str] = None,
                 provisioned: Optional[bool] = None,
                 provisioning: Optional[bool] = None,
                 requested: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 spec_hash: Optional[str] = None,
                 state: Optional[str] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[str]:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[bool]:
        return pulumi.get(self, "contains_update")

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "failed_provisioning")

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[bool]:
        return pulumi.get(self, "flattened_secrets")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def output(self) -> Optional[str]:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[str]:
        return pulumi.get(self, "polling_url")

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[bool]:
        return pulumi.get(self, "provisioned")

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter
    def requested(self) -> Optional[str]:
        return pulumi.get(self, "requested")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[str]:
        return pulumi.get(self, "spec_hash")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PostgreSQLVNetRuleSpec(dict):
    """
    PotgreSQLVNetRuleSpec defines the desired state of PostgreSQLVNetRule
    """
    def __init__(__self__, *,
                 resource_group: str,
                 server: str,
                 subnet_name: str,
                 v_net_name: str,
                 v_net_resource_group: str,
                 ignore_missing_service_endpoint: Optional[bool] = None):
        """
        PotgreSQLVNetRuleSpec defines the desired state of PostgreSQLVNetRule
        :param str resource_group: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "server", server)
        pulumi.set(__self__, "subnet_name", subnet_name)
        pulumi.set(__self__, "v_net_name", v_net_name)
        pulumi.set(__self__, "v_net_resource_group", v_net_resource_group)
        if ignore_missing_service_endpoint is not None:
            pulumi.set(__self__, "ignore_missing_service_endpoint", ignore_missing_service_endpoint)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter
    def server(self) -> str:
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="subnetName")
    def subnet_name(self) -> str:
        return pulumi.get(self, "subnet_name")

    @property
    @pulumi.getter(name="vNetName")
    def v_net_name(self) -> str:
        return pulumi.get(self, "v_net_name")

    @property
    @pulumi.getter(name="vNetResourceGroup")
    def v_net_resource_group(self) -> str:
        return pulumi.get(self, "v_net_resource_group")

    @property
    @pulumi.getter(name="ignoreMissingServiceEndpoint")
    def ignore_missing_service_endpoint(self) -> Optional[bool]:
        return pulumi.get(self, "ignore_missing_service_endpoint")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PostgreSQLVNetRuleStatus(dict):
    """
    ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
    """
    def __init__(__self__, *,
                 completed: Optional[str] = None,
                 contains_update: Optional[bool] = None,
                 failed_provisioning: Optional[bool] = None,
                 flattened_secrets: Optional[bool] = None,
                 message: Optional[str] = None,
                 output: Optional[str] = None,
                 polling_url: Optional[str] = None,
                 provisioned: Optional[bool] = None,
                 provisioning: Optional[bool] = None,
                 requested: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 spec_hash: Optional[str] = None,
                 state: Optional[str] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[str]:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[bool]:
        return pulumi.get(self, "contains_update")

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "failed_provisioning")

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[bool]:
        return pulumi.get(self, "flattened_secrets")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def output(self) -> Optional[str]:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[str]:
        return pulumi.get(self, "polling_url")

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[bool]:
        return pulumi.get(self, "provisioned")

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter
    def requested(self) -> Optional[str]:
        return pulumi.get(self, "requested")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[str]:
        return pulumi.get(self, "spec_hash")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RedisCacheActionSpec(dict):
    """
    RedisCacheActionSpec defines the desired state of RedisCacheAction
    """
    def __init__(__self__, *,
                 action_name: str,
                 cache_name: str,
                 resource_group: str,
                 key_vault_to_store_secrets: Optional[str] = None,
                 secret_name: Optional[str] = None,
                 shard_id: Optional[int] = None):
        """
        RedisCacheActionSpec defines the desired state of RedisCacheAction
        """
        pulumi.set(__self__, "action_name", action_name)
        pulumi.set(__self__, "cache_name", cache_name)
        pulumi.set(__self__, "resource_group", resource_group)
        if key_vault_to_store_secrets is not None:
            pulumi.set(__self__, "key_vault_to_store_secrets", key_vault_to_store_secrets)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)
        if shard_id is not None:
            pulumi.set(__self__, "shard_id", shard_id)

    @property
    @pulumi.getter(name="actionName")
    def action_name(self) -> str:
        return pulumi.get(self, "action_name")

    @property
    @pulumi.getter(name="cacheName")
    def cache_name(self) -> str:
        return pulumi.get(self, "cache_name")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter(name="keyVaultToStoreSecrets")
    def key_vault_to_store_secrets(self) -> Optional[str]:
        return pulumi.get(self, "key_vault_to_store_secrets")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter(name="shardID")
    def shard_id(self) -> Optional[int]:
        return pulumi.get(self, "shard_id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RedisCacheActionStatus(dict):
    """
    ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
    """
    def __init__(__self__, *,
                 completed: Optional[str] = None,
                 contains_update: Optional[bool] = None,
                 failed_provisioning: Optional[bool] = None,
                 flattened_secrets: Optional[bool] = None,
                 message: Optional[str] = None,
                 output: Optional[str] = None,
                 polling_url: Optional[str] = None,
                 provisioned: Optional[bool] = None,
                 provisioning: Optional[bool] = None,
                 requested: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 spec_hash: Optional[str] = None,
                 state: Optional[str] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[str]:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[bool]:
        return pulumi.get(self, "contains_update")

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "failed_provisioning")

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[bool]:
        return pulumi.get(self, "flattened_secrets")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def output(self) -> Optional[str]:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[str]:
        return pulumi.get(self, "polling_url")

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[bool]:
        return pulumi.get(self, "provisioned")

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter
    def requested(self) -> Optional[str]:
        return pulumi.get(self, "requested")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[str]:
        return pulumi.get(self, "spec_hash")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RedisCacheFirewallRuleSpec(dict):
    """
    RedisCacheFirewallRuleSpec defines the desired state of RedisCacheFirewallRule
    """
    def __init__(__self__, *,
                 properties: 'outputs.RedisCacheFirewallRuleSpecProperties',
                 redis_cache: str,
                 resource_group: str):
        """
        RedisCacheFirewallRuleSpec defines the desired state of RedisCacheFirewallRule
        :param 'RedisCacheFirewallRuleSpecPropertiesArgs' properties: RedisCacheFirewallRuleProperties the parameters of the RedisCacheFirewallRule
        """
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "redis_cache", redis_cache)
        pulumi.set(__self__, "resource_group", resource_group)

    @property
    @pulumi.getter
    def properties(self) -> 'outputs.RedisCacheFirewallRuleSpecProperties':
        """
        RedisCacheFirewallRuleProperties the parameters of the RedisCacheFirewallRule
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="redisCache")
    def redis_cache(self) -> str:
        return pulumi.get(self, "redis_cache")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        return pulumi.get(self, "resource_group")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RedisCacheFirewallRuleSpecProperties(dict):
    """
    RedisCacheFirewallRuleProperties the parameters of the RedisCacheFirewallRule
    """
    def __init__(__self__, *,
                 end_ip: str,
                 start_ip: str):
        """
        RedisCacheFirewallRuleProperties the parameters of the RedisCacheFirewallRule
        """
        pulumi.set(__self__, "end_ip", end_ip)
        pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIP")
    def end_ip(self) -> str:
        return pulumi.get(self, "end_ip")

    @property
    @pulumi.getter(name="startIP")
    def start_ip(self) -> str:
        return pulumi.get(self, "start_ip")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RedisCacheFirewallRuleStatus(dict):
    """
    ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
    """
    def __init__(__self__, *,
                 completed: Optional[str] = None,
                 contains_update: Optional[bool] = None,
                 failed_provisioning: Optional[bool] = None,
                 flattened_secrets: Optional[bool] = None,
                 message: Optional[str] = None,
                 output: Optional[str] = None,
                 polling_url: Optional[str] = None,
                 provisioned: Optional[bool] = None,
                 provisioning: Optional[bool] = None,
                 requested: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 spec_hash: Optional[str] = None,
                 state: Optional[str] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[str]:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[bool]:
        return pulumi.get(self, "contains_update")

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "failed_provisioning")

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[bool]:
        return pulumi.get(self, "flattened_secrets")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def output(self) -> Optional[str]:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[str]:
        return pulumi.get(self, "polling_url")

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[bool]:
        return pulumi.get(self, "provisioned")

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter
    def requested(self) -> Optional[str]:
        return pulumi.get(self, "requested")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[str]:
        return pulumi.get(self, "spec_hash")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RedisCacheSpec(dict):
    """
    RedisCacheSpec defines the desired state of RedisCache
    """
    def __init__(__self__, *,
                 resource_group: str,
                 key_vault_to_store_secrets: Optional[str] = None,
                 location: Optional[str] = None,
                 properties: Optional['outputs.RedisCacheSpecProperties'] = None,
                 secret_name: Optional[str] = None):
        """
        RedisCacheSpec defines the desired state of RedisCache
        :param 'RedisCacheSpecPropertiesArgs' properties: RedisCacheProperties the properties of the Redis Cache.
        """
        pulumi.set(__self__, "resource_group", resource_group)
        if key_vault_to_store_secrets is not None:
            pulumi.set(__self__, "key_vault_to_store_secrets", key_vault_to_store_secrets)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter(name="keyVaultToStoreSecrets")
    def key_vault_to_store_secrets(self) -> Optional[str]:
        return pulumi.get(self, "key_vault_to_store_secrets")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def properties(self) -> Optional['outputs.RedisCacheSpecProperties']:
        """
        RedisCacheProperties the properties of the Redis Cache.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        return pulumi.get(self, "secret_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RedisCacheSpecProperties(dict):
    """
    RedisCacheProperties the properties of the Redis Cache.
    """
    def __init__(__self__, *,
                 configuration: Optional[Mapping[str, str]] = None,
                 enable_non_ssl_port: Optional[bool] = None,
                 shard_count: Optional[int] = None,
                 sku: Optional['outputs.RedisCacheSpecPropertiesSku'] = None,
                 static_ip: Optional[str] = None,
                 subnet_id: Optional[str] = None):
        """
        RedisCacheProperties the properties of the Redis Cache.
        :param 'RedisCacheSpecPropertiesSkuArgs' sku: RedisCacheSku the SKU of the Redis Cache.
        """
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if enable_non_ssl_port is not None:
            pulumi.set(__self__, "enable_non_ssl_port", enable_non_ssl_port)
        if shard_count is not None:
            pulumi.set(__self__, "shard_count", shard_count)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)
        if static_ip is not None:
            pulumi.set(__self__, "static_ip", static_ip)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter(name="enableNonSslPort")
    def enable_non_ssl_port(self) -> Optional[bool]:
        return pulumi.get(self, "enable_non_ssl_port")

    @property
    @pulumi.getter(name="shardCount")
    def shard_count(self) -> Optional[int]:
        return pulumi.get(self, "shard_count")

    @property
    @pulumi.getter
    def sku(self) -> Optional['outputs.RedisCacheSpecPropertiesSku']:
        """
        RedisCacheSku the SKU of the Redis Cache.
        """
        return pulumi.get(self, "sku")

    @property
    @pulumi.getter(name="staticIp")
    def static_ip(self) -> Optional[str]:
        return pulumi.get(self, "static_ip")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RedisCacheSpecPropertiesSku(dict):
    """
    RedisCacheSku the SKU of the Redis Cache.
    """
    def __init__(__self__, *,
                 capacity: Optional[int] = None,
                 family: Optional[str] = None,
                 name: Optional[str] = None):
        """
        RedisCacheSku the SKU of the Redis Cache.
        :param str name: Name - The SKU name. Required for account creation; optional for update. Possible values include: 'StandardLRS', 'StandardGRS', 'StandardRAGRS', 'StandardZRS', 'PremiumLRS', 'PremiumZRS', 'StandardGZRS', 'StandardRAGZRS'
        """
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[int]:
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter
    def family(self) -> Optional[str]:
        return pulumi.get(self, "family")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name - The SKU name. Required for account creation; optional for update. Possible values include: 'StandardLRS', 'StandardGRS', 'StandardRAGRS', 'StandardZRS', 'PremiumLRS', 'PremiumZRS', 'StandardGZRS', 'StandardRAGZRS'
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class RedisCacheStatus(dict):
    """
    ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
    """
    def __init__(__self__, *,
                 completed: Optional[str] = None,
                 contains_update: Optional[bool] = None,
                 failed_provisioning: Optional[bool] = None,
                 flattened_secrets: Optional[bool] = None,
                 message: Optional[str] = None,
                 output: Optional[str] = None,
                 polling_url: Optional[str] = None,
                 provisioned: Optional[bool] = None,
                 provisioning: Optional[bool] = None,
                 requested: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 spec_hash: Optional[str] = None,
                 state: Optional[str] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[str]:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[bool]:
        return pulumi.get(self, "contains_update")

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "failed_provisioning")

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[bool]:
        return pulumi.get(self, "flattened_secrets")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def output(self) -> Optional[str]:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[str]:
        return pulumi.get(self, "polling_url")

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[bool]:
        return pulumi.get(self, "provisioned")

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter
    def requested(self) -> Optional[str]:
        return pulumi.get(self, "requested")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[str]:
        return pulumi.get(self, "spec_hash")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ResourceGroupSpec(dict):
    """
    ResourceGroupSpec defines the desired state of ResourceGroup
    """
    def __init__(__self__, *,
                 location: str):
        """
        ResourceGroupSpec defines the desired state of ResourceGroup
        :param str location: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        pulumi.set(__self__, "location", location)

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "location")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ResourceGroupStatus(dict):
    """
    ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
    """
    def __init__(__self__, *,
                 completed: Optional[str] = None,
                 contains_update: Optional[bool] = None,
                 failed_provisioning: Optional[bool] = None,
                 flattened_secrets: Optional[bool] = None,
                 message: Optional[str] = None,
                 output: Optional[str] = None,
                 polling_url: Optional[str] = None,
                 provisioned: Optional[bool] = None,
                 provisioning: Optional[bool] = None,
                 requested: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 spec_hash: Optional[str] = None,
                 state: Optional[str] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[str]:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[bool]:
        return pulumi.get(self, "contains_update")

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "failed_provisioning")

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[bool]:
        return pulumi.get(self, "flattened_secrets")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def output(self) -> Optional[str]:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[str]:
        return pulumi.get(self, "polling_url")

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[bool]:
        return pulumi.get(self, "provisioned")

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter
    def requested(self) -> Optional[str]:
        return pulumi.get(self, "requested")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[str]:
        return pulumi.get(self, "spec_hash")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StorageAccountAdditionalResources(dict):
    """
    StorageAccountAdditionalResources holds the additional resources
    """
    def __init__(__self__, *,
                 secrets: Optional[Sequence[str]] = None):
        """
        StorageAccountAdditionalResources holds the additional resources
        """
        if secrets is not None:
            pulumi.set(__self__, "secrets", secrets)

    @property
    @pulumi.getter
    def secrets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "secrets")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StorageAccountOutput(dict):
    """
    StorageAccountOutput is the object that contains the output from creating a Storage Account object
    """
    def __init__(__self__, *,
                 connection_string1: Optional[str] = None,
                 connection_string2: Optional[str] = None,
                 key1: Optional[str] = None,
                 key2: Optional[str] = None,
                 storage_account_name: Optional[str] = None):
        """
        StorageAccountOutput is the object that contains the output from creating a Storage Account object
        """
        if connection_string1 is not None:
            pulumi.set(__self__, "connection_string1", connection_string1)
        if connection_string2 is not None:
            pulumi.set(__self__, "connection_string2", connection_string2)
        if key1 is not None:
            pulumi.set(__self__, "key1", key1)
        if key2 is not None:
            pulumi.set(__self__, "key2", key2)
        if storage_account_name is not None:
            pulumi.set(__self__, "storage_account_name", storage_account_name)

    @property
    @pulumi.getter(name="connectionString1")
    def connection_string1(self) -> Optional[str]:
        return pulumi.get(self, "connection_string1")

    @property
    @pulumi.getter(name="connectionString2")
    def connection_string2(self) -> Optional[str]:
        return pulumi.get(self, "connection_string2")

    @property
    @pulumi.getter
    def key1(self) -> Optional[str]:
        return pulumi.get(self, "key1")

    @property
    @pulumi.getter
    def key2(self) -> Optional[str]:
        return pulumi.get(self, "key2")

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_account_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StorageAccountSpec(dict):
    """
    StorageAccountSpec defines the desired state of Storage
    """
    def __init__(__self__, *,
                 resource_group: str,
                 access_tier: Optional[str] = None,
                 data_lake_enabled: Optional[bool] = None,
                 kind: Optional[str] = None,
                 location: Optional[str] = None,
                 network_rule: Optional['outputs.StorageAccountSpecNetworkRule'] = None,
                 sku: Optional['outputs.StorageAccountSpecSku'] = None,
                 supports_https_traffic_only: Optional[bool] = None):
        """
        StorageAccountSpec defines the desired state of Storage
        :param str access_tier: StorageAccountAccessTier enumerates the values for access tier. Only one of the following access tiers may be specified. If none of the following access tiers is specified, the default one is Hot.
        :param str kind: StorageAccountKind enumerates the values for kind. Only one of the following kinds may be specified. If none of the following kinds is specified, the default one is StorageV2.
        :param 'StorageAccountSpecSkuArgs' sku: StorageAccountSku the SKU of the storage account.
        """
        pulumi.set(__self__, "resource_group", resource_group)
        if access_tier is not None:
            pulumi.set(__self__, "access_tier", access_tier)
        if data_lake_enabled is not None:
            pulumi.set(__self__, "data_lake_enabled", data_lake_enabled)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if network_rule is not None:
            pulumi.set(__self__, "network_rule", network_rule)
        if sku is not None:
            pulumi.set(__self__, "sku", sku)
        if supports_https_traffic_only is not None:
            pulumi.set(__self__, "supports_https_traffic_only", supports_https_traffic_only)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter(name="accessTier")
    def access_tier(self) -> Optional[str]:
        """
        StorageAccountAccessTier enumerates the values for access tier. Only one of the following access tiers may be specified. If none of the following access tiers is specified, the default one is Hot.
        """
        return pulumi.get(self, "access_tier")

    @property
    @pulumi.getter(name="dataLakeEnabled")
    def data_lake_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "data_lake_enabled")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        StorageAccountKind enumerates the values for kind. Only one of the following kinds may be specified. If none of the following kinds is specified, the default one is StorageV2.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="networkRule")
    def network_rule(self) -> Optional['outputs.StorageAccountSpecNetworkRule']:
        return pulumi.get(self, "network_rule")

    @property
    @pulumi.getter
    def sku(self) -> Optional['outputs.StorageAccountSpecSku']:
        """
        StorageAccountSku the SKU of the storage account.
        """
        return pulumi.get(self, "sku")

    @property
    @pulumi.getter(name="supportsHttpsTrafficOnly")
    def supports_https_traffic_only(self) -> Optional[bool]:
        return pulumi.get(self, "supports_https_traffic_only")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StorageAccountSpecNetworkRule(dict):
    def __init__(__self__, *,
                 bypass: Optional[str] = None,
                 default_action: Optional[str] = None,
                 ip_rules: Optional[Sequence['outputs.StorageAccountSpecNetworkRuleIpRules']] = None,
                 virtual_network_rules: Optional[Sequence['outputs.StorageAccountSpecNetworkRuleVirtualNetworkRules']] = None):
        """
        :param str bypass: Bypass - Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, "Logging, Metrics"), or None to bypass none of those traffics. Possible values include: 'None', 'Logging', 'Metrics', 'AzureServices'
        :param str default_action: DefaultAction - Specifies the default action of allow or deny when no other rules match. Possible values include: 'DefaultActionAllow', 'DefaultActionDeny'
        :param Sequence['StorageAccountSpecNetworkRuleIpRulesArgs'] ip_rules: IPRules - Sets the IP ACL rules
        :param Sequence['StorageAccountSpecNetworkRuleVirtualNetworkRulesArgs'] virtual_network_rules: VirtualNetworkRules - Sets the virtual network rules
        """
        if bypass is not None:
            pulumi.set(__self__, "bypass", bypass)
        if default_action is not None:
            pulumi.set(__self__, "default_action", default_action)
        if ip_rules is not None:
            pulumi.set(__self__, "ip_rules", ip_rules)
        if virtual_network_rules is not None:
            pulumi.set(__self__, "virtual_network_rules", virtual_network_rules)

    @property
    @pulumi.getter
    def bypass(self) -> Optional[str]:
        """
        Bypass - Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, "Logging, Metrics"), or None to bypass none of those traffics. Possible values include: 'None', 'Logging', 'Metrics', 'AzureServices'
        """
        return pulumi.get(self, "bypass")

    @property
    @pulumi.getter(name="defaultAction")
    def default_action(self) -> Optional[str]:
        """
        DefaultAction - Specifies the default action of allow or deny when no other rules match. Possible values include: 'DefaultActionAllow', 'DefaultActionDeny'
        """
        return pulumi.get(self, "default_action")

    @property
    @pulumi.getter(name="ipRules")
    def ip_rules(self) -> Optional[Sequence['outputs.StorageAccountSpecNetworkRuleIpRules']]:
        """
        IPRules - Sets the IP ACL rules
        """
        return pulumi.get(self, "ip_rules")

    @property
    @pulumi.getter(name="virtualNetworkRules")
    def virtual_network_rules(self) -> Optional[Sequence['outputs.StorageAccountSpecNetworkRuleVirtualNetworkRules']]:
        """
        VirtualNetworkRules - Sets the virtual network rules
        """
        return pulumi.get(self, "virtual_network_rules")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StorageAccountSpecNetworkRuleIpRules(dict):
    def __init__(__self__, *,
                 ip_address_or_range: Optional[str] = None):
        """
        :param str ip_address_or_range: IPAddressOrRange - Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.
        """
        if ip_address_or_range is not None:
            pulumi.set(__self__, "ip_address_or_range", ip_address_or_range)

    @property
    @pulumi.getter(name="ipAddressOrRange")
    def ip_address_or_range(self) -> Optional[str]:
        """
        IPAddressOrRange - Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.
        """
        return pulumi.get(self, "ip_address_or_range")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StorageAccountSpecNetworkRuleVirtualNetworkRules(dict):
    def __init__(__self__, *,
                 subnet_id: Optional[str] = None):
        """
        :param str subnet_id: SubnetId - Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.
        """
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        SubnetId - Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.
        """
        return pulumi.get(self, "subnet_id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StorageAccountSpecSku(dict):
    """
    StorageAccountSku the SKU of the storage account.
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        StorageAccountSku the SKU of the storage account.
        :param str name: Name - The SKU name. Required for account creation; optional for update. Possible values include: 'StandardLRS', 'StandardGRS', 'StandardRAGRS', 'StandardZRS', 'PremiumLRS', 'PremiumZRS', 'StandardGZRS', 'StandardRAGZRS'
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name - The SKU name. Required for account creation; optional for update. Possible values include: 'StandardLRS', 'StandardGRS', 'StandardRAGRS', 'StandardZRS', 'PremiumLRS', 'PremiumZRS', 'StandardGZRS', 'StandardRAGZRS'
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class StorageAccountStatus(dict):
    """
    ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
    """
    def __init__(__self__, *,
                 completed: Optional[str] = None,
                 contains_update: Optional[bool] = None,
                 failed_provisioning: Optional[bool] = None,
                 flattened_secrets: Optional[bool] = None,
                 message: Optional[str] = None,
                 output: Optional[str] = None,
                 polling_url: Optional[str] = None,
                 provisioned: Optional[bool] = None,
                 provisioning: Optional[bool] = None,
                 requested: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 spec_hash: Optional[str] = None,
                 state: Optional[str] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[str]:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[bool]:
        return pulumi.get(self, "contains_update")

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "failed_provisioning")

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[bool]:
        return pulumi.get(self, "flattened_secrets")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def output(self) -> Optional[str]:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[str]:
        return pulumi.get(self, "polling_url")

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[bool]:
        return pulumi.get(self, "provisioned")

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter
    def requested(self) -> Optional[str]:
        return pulumi.get(self, "requested")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[str]:
        return pulumi.get(self, "spec_hash")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNetworkSpec(dict):
    """
    VirtualNetworkSpec defines the desired state of VirtualNetwork
    """
    def __init__(__self__, *,
                 address_space: str,
                 location: str,
                 resource_group: str,
                 subnets: Optional[Sequence['outputs.VirtualNetworkSpecSubnets']] = None):
        """
        VirtualNetworkSpec defines the desired state of VirtualNetwork
        :param str location: INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        pulumi.set(__self__, "address_space", address_space)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_group", resource_group)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)

    @property
    @pulumi.getter(name="addressSpace")
    def address_space(self) -> str:
        return pulumi.get(self, "address_space")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter
    def subnets(self) -> Optional[Sequence['outputs.VirtualNetworkSpecSubnets']]:
        return pulumi.get(self, "subnets")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNetworkSpecSubnets(dict):
    """
    VNetSubnets defines subnets for this vnet
    """
    def __init__(__self__, *,
                 subnet_address_prefix: str,
                 subnet_name: str,
                 service_endpoints: Optional[Sequence[str]] = None):
        """
        VNetSubnets defines subnets for this vnet
        :param str subnet_name: INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        pulumi.set(__self__, "subnet_address_prefix", subnet_address_prefix)
        pulumi.set(__self__, "subnet_name", subnet_name)
        if service_endpoints is not None:
            pulumi.set(__self__, "service_endpoints", service_endpoints)

    @property
    @pulumi.getter(name="subnetAddressPrefix")
    def subnet_address_prefix(self) -> str:
        return pulumi.get(self, "subnet_address_prefix")

    @property
    @pulumi.getter(name="subnetName")
    def subnet_name(self) -> str:
        """
        INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run "make" to regenerate code after modifying this file
        """
        return pulumi.get(self, "subnet_name")

    @property
    @pulumi.getter(name="serviceEndpoints")
    def service_endpoints(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "service_endpoints")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class VirtualNetworkStatus(dict):
    """
    ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
    """
    def __init__(__self__, *,
                 completed: Optional[str] = None,
                 contains_update: Optional[bool] = None,
                 failed_provisioning: Optional[bool] = None,
                 flattened_secrets: Optional[bool] = None,
                 message: Optional[str] = None,
                 output: Optional[str] = None,
                 polling_url: Optional[str] = None,
                 provisioned: Optional[bool] = None,
                 provisioning: Optional[bool] = None,
                 requested: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 spec_hash: Optional[str] = None,
                 state: Optional[str] = None):
        """
        ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
        """
        if completed is not None:
            pulumi.set(__self__, "completed", completed)
        if contains_update is not None:
            pulumi.set(__self__, "contains_update", contains_update)
        if failed_provisioning is not None:
            pulumi.set(__self__, "failed_provisioning", failed_provisioning)
        if flattened_secrets is not None:
            pulumi.set(__self__, "flattened_secrets", flattened_secrets)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if polling_url is not None:
            pulumi.set(__self__, "polling_url", polling_url)
        if provisioned is not None:
            pulumi.set(__self__, "provisioned", provisioned)
        if provisioning is not None:
            pulumi.set(__self__, "provisioning", provisioning)
        if requested is not None:
            pulumi.set(__self__, "requested", requested)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_hash is not None:
            pulumi.set(__self__, "spec_hash", spec_hash)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def completed(self) -> Optional[str]:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter(name="containsUpdate")
    def contains_update(self) -> Optional[bool]:
        return pulumi.get(self, "contains_update")

    @property
    @pulumi.getter(name="failedProvisioning")
    def failed_provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "failed_provisioning")

    @property
    @pulumi.getter(name="flattenedSecrets")
    def flattened_secrets(self) -> Optional[bool]:
        return pulumi.get(self, "flattened_secrets")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def output(self) -> Optional[str]:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="pollingUrl")
    def polling_url(self) -> Optional[str]:
        return pulumi.get(self, "polling_url")

    @property
    @pulumi.getter
    def provisioned(self) -> Optional[bool]:
        return pulumi.get(self, "provisioned")

    @property
    @pulumi.getter
    def provisioning(self) -> Optional[bool]:
        return pulumi.get(self, "provisioning")

    @property
    @pulumi.getter
    def requested(self) -> Optional[str]:
        return pulumi.get(self, "requested")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="specHash")
    def spec_hash(self) -> Optional[str]:
        return pulumi.get(self, "spec_hash")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



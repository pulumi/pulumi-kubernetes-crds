// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import {ObjectMeta} from "../meta/v1";

export namespace azure {
    export namespace v1alpha1 {
        /**
         * APIMgmtSpec defines the desired state of APIMgmt
         */
        export interface APIMgmtAPISpec {
            apiId: pulumi.Input<string>;
            apiService: pulumi.Input<string>;
            location: pulumi.Input<string>;
            properties: pulumi.Input<inputs.azure.v1alpha1.APIMgmtAPISpecProperties>;
            resourceGroup: pulumi.Input<string>;
        }

        export interface APIMgmtAPISpecProperties {
            /**
             * APIRevision - Describes the Revision of the Api. If no value is provided, default revision 1 is created
             */
            apiRevision?: pulumi.Input<string>;
            /**
             * APIRevisionDescription - Description of the Api Revision.
             */
            apiRevisionDescription?: pulumi.Input<string>;
            /**
             * APIVersion - Indicates the Version identifier of the API if the API is versioned
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * APIVersionDescription - Description of the Api Version.
             */
            apiVersionDescription?: pulumi.Input<string>;
            /**
             * APIVersionSetID - A resource identifier for the related ApiVersionSet.
             */
            apiVersionSetId?: pulumi.Input<string>;
            /**
             * APIVersionSet - APIVersionSetContractDetails an API Version Set contains the common configuration for a set of API versions.
             */
            apiVersionSets?: pulumi.Input<inputs.azure.v1alpha1.APIMgmtAPISpecPropertiesApiVersionSets>;
            /**
             * Description - Description of the API. May include HTML formatting tags.
             */
            description?: pulumi.Input<string>;
            /**
             * DisplayName - API name. Must be 1 to 300 characters long.
             */
            displayName?: pulumi.Input<string>;
            /**
             *  Format - Format of the Content in which the API is getting imported. Possible values include: 	'WadlXML', 'WadlLinkJSON', 'SwaggerJSON', 'SwaggerLinkJSON', 'Wsdl', 'WsdlLink', 'Openapi', 'Openapijson', 'OpenapiLink'
             */
            format?: pulumi.Input<string>;
            /**
             * IsCurrent - Indicates if API revision is current api revision.
             */
            isCurrent?: pulumi.Input<boolean>;
            /**
             * IsOnline - READ-ONLY; Indicates if API revision is accessible via the gateway.
             */
            isOnline?: pulumi.Input<boolean>;
            /**
             *  Path - Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. 	It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API.
             */
            path?: pulumi.Input<string>;
            /**
             * Protocols - Describes on which protocols the operations in this API can be invoked.
             */
            protocols?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * ServiceURL - Absolute URL of the backend service implementing this API. Cannot be more than 2000 characters long.
             */
            serviceUrl?: pulumi.Input<string>;
            /**
             * SourceAPIID - API identifier of the source API.
             */
            sourceApiId?: pulumi.Input<string>;
            /**
             * SubscriptionRequired - Specifies whether an API or Product subscription is required for accessing the API.
             */
            subscriptionRequired?: pulumi.Input<boolean>;
        }

        /**
         * APIVersionSet - APIVersionSetContractDetails an API Version Set contains the common configuration for a set of API versions.
         */
        export interface APIMgmtAPISpecPropertiesApiVersionSets {
            /**
             * Description - Description of API Version Set.
             */
            description?: pulumi.Input<string>;
            /**
             * ID - Identifier for existing API Version Set. Omit this value to create a new Version Set.
             */
            id?: pulumi.Input<string>;
            /**
             * Name - The display Name of the API Version Set.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface APIMgmtAPIStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * ApimServiceSpec defines the desired state of ApimService
         */
        export interface ApimServiceSpec {
            appInsightsName?: pulumi.Input<string>;
            appInsightsResourceGroup?: pulumi.Input<string>;
            location: pulumi.Input<string>;
            publisherEmail: pulumi.Input<string>;
            publisherName: pulumi.Input<string>;
            resourceGroup: pulumi.Input<string>;
            /**
             * INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
             */
            tier?: pulumi.Input<string>;
            vnetName?: pulumi.Input<string>;
            vnetResourceGroup: pulumi.Input<string>;
            vnetSubnetName?: pulumi.Input<string>;
            vnetType?: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface ApimServiceStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * AppInsightsApiKeySpec defines the desired state of AppInsightsApiKey
         */
        export interface AppInsightsApiKeySpec {
            appInsights: pulumi.Input<string>;
            authSDKControlChannel?: pulumi.Input<boolean>;
            readTelemetry?: pulumi.Input<boolean>;
            resourceGroup: pulumi.Input<string>;
            writeAnnotations?: pulumi.Input<boolean>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface AppInsightsApiKeyStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * AppInsightsSpec defines the desired state of AppInsights
         */
        export interface AppInsightsSpec {
            applicationType: pulumi.Input<string>;
            keyVaultToStoreSecrets?: pulumi.Input<string>;
            kind: pulumi.Input<string>;
            location: pulumi.Input<string>;
            resourceGroup: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface AppInsightsStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * AzureLoadBalancerSpec defines the desired state of AzureLoadBalancer
         */
        export interface AzureLoadBalancerSpec {
            backendAddressPoolName: pulumi.Input<string>;
            backendPort: pulumi.Input<number>;
            frontendPortRangeEnd: pulumi.Input<number>;
            frontendPortRangeStart: pulumi.Input<number>;
            inboundNatPoolName: pulumi.Input<string>;
            /**
             * INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
             */
            location: pulumi.Input<string>;
            publicIPAddressName: pulumi.Input<string>;
            resourceGroup: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface AzureLoadBalancerStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * AzureNetworkInterfaceSpec defines the desired state of AzureNetworkInterface
         */
        export interface AzureNetworkInterfaceSpec {
            /**
             * INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
             */
            location: pulumi.Input<string>;
            publicIPAddressName: pulumi.Input<string>;
            resourceGroup: pulumi.Input<string>;
            subnetName: pulumi.Input<string>;
            vnetName: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface AzureNetworkInterfaceStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * AzurePublicIPAddressSpec defines the desired state of AzurePublicIPAddress
         */
        export interface AzurePublicIPAddressSpec {
            idleTimeoutInMinutes: pulumi.Input<number>;
            ipTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            location: pulumi.Input<string>;
            publicIPAddressVersion: pulumi.Input<string>;
            publicIPAllocationMethod: pulumi.Input<string>;
            resourceGroup: pulumi.Input<string>;
            skuName: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface AzurePublicIPAddressStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * AzureSQLManagedUserSpec defines the desired state of AzureSQLManagedUser
         */
        export interface AzureSQLManagedUserSpec {
            dbName: pulumi.Input<string>;
            keyVaultSecretPrefix?: pulumi.Input<string>;
            keyVaultToStoreSecrets?: pulumi.Input<string>;
            managedIdentityClientId: pulumi.Input<string>;
            managedIdentityName?: pulumi.Input<string>;
            resourceGroup: pulumi.Input<string>;
            roles: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
             */
            server: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface AzureSQLManagedUserStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * AzureSQLUserSpec defines the desired state of SqlUser
         */
        export interface AzureSQLUserSpec {
            /**
             * optional
             */
            adminSecret?: pulumi.Input<string>;
            adminSecretKeyVault?: pulumi.Input<string>;
            dbName: pulumi.Input<string>;
            keyVaultSecretFormats?: pulumi.Input<pulumi.Input<string>[]>;
            keyVaultSecretPrefix?: pulumi.Input<string>;
            keyVaultToStoreSecrets?: pulumi.Input<string>;
            resourceGroup: pulumi.Input<string>;
            roles: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
             */
            server: pulumi.Input<string>;
            username?: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface AzureSQLUserStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * NOTE: json tags are required.  Any new fields you add must have json tags for the fields to be serialized. AzureSQLVNetRuleSpec defines the desired state of AzureSQLVNetRule
         */
        export interface AzureSQLVNetRuleSpec {
            ignoreMissingServiceEndpoint?: pulumi.Input<boolean>;
            /**
             * INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
             */
            resourceGroup: pulumi.Input<string>;
            server: pulumi.Input<string>;
            subnetName: pulumi.Input<string>;
            vNetName: pulumi.Input<string>;
            vNetResourceGroup: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface AzureSQLVNetRuleStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * AzureSqlActionSpec defines the desired state of AzureSqlAction
         */
        export interface AzureSqlActionSpec {
            actionName: pulumi.Input<string>;
            dbName?: pulumi.Input<string>;
            dbUser?: pulumi.Input<string>;
            /**
             * INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
             */
            resourceGroup: pulumi.Input<string>;
            serverAdminSecretName?: pulumi.Input<string>;
            serverName: pulumi.Input<string>;
            serverSecretKeyVault?: pulumi.Input<string>;
            userSecretKeyVault?: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface AzureSqlActionStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * AzureSqlDatabaseSpec defines the desired state of AzureSqlDatabase
         */
        export interface AzureSqlDatabaseSpec {
            /**
             * optional
             */
            dbName?: pulumi.Input<string>;
            /**
             * DBEdition - wraps: https://godoc.org/github.com/Azure/azure-sdk-for-go/services/preview/sql/mgmt/v3.0/sql#DatabaseEdition
             */
            edition: pulumi.Input<number>;
            /**
             * INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
             */
            location: pulumi.Input<string>;
            resourcegroup: pulumi.Input<string>;
            server: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface AzureSqlDatabaseStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * AzureSqlFailoverGroupSpec defines the desired state of AzureSqlFailoverGroup
         */
        export interface AzureSqlFailoverGroupSpec {
            databaselist: pulumi.Input<pulumi.Input<string>[]>;
            failovergraceperiod: pulumi.Input<number>;
            /**
             * ReadWriteEndpointFailoverPolicy - wraps https://godoc.org/github.com/Azure/azure-sdk-for-go/services/preview/sql/mgmt/v3.0/sql#ReadWriteEndpointFailoverPolicy
             */
            failoverpolicy: pulumi.Input<string>;
            keyVaultToStoreSecrets?: pulumi.Input<string>;
            /**
             * Important: Run "make" to regenerate code after modifying this file
             */
            location: pulumi.Input<string>;
            resourcegroup: pulumi.Input<string>;
            secondaryserver: pulumi.Input<string>;
            secondaryserverresourcegroup: pulumi.Input<string>;
            server: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface AzureSqlFailoverGroupStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * AzureSqlFirewallRuleSpec defines the desired state of AzureSqlFirewallRule
         */
        export interface AzureSqlFirewallRuleSpec {
            endipaddress?: pulumi.Input<string>;
            /**
             * INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
             */
            resourcegroup: pulumi.Input<string>;
            server: pulumi.Input<string>;
            startipaddress?: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface AzureSqlFirewallRuleStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * AzureSqlServerSpec defines the desired state of AzureSqlServer
         */
        export interface AzureSqlServerSpec {
            keyVaultToStoreSecrets?: pulumi.Input<string>;
            /**
             * INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
             */
            location: pulumi.Input<string>;
            resourcegroup: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface AzureSqlServerStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * AzureVMScaleSetSpec defines the desired state of AzureVMScaleSet
         */
        export interface AzureVMScaleSetSpec {
            adminUserName: pulumi.Input<string>;
            backendAddressPoolName: pulumi.Input<string>;
            capacity: pulumi.Input<number>;
            inboundNatPoolName: pulumi.Input<string>;
            loadBalancerName: pulumi.Input<string>;
            /**
             * INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
             */
            location: pulumi.Input<string>;
            osType: pulumi.Input<string>;
            platformImageURN: pulumi.Input<string>;
            resourceGroup: pulumi.Input<string>;
            sshPublicKeyData?: pulumi.Input<string>;
            subnetName: pulumi.Input<string>;
            virtualNetworkName: pulumi.Input<string>;
            vmSize: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface AzureVMScaleSetStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * AzureVirtualMachineExtensionSpec defines the desired state of AzureVirtualMachineExtension
         */
        export interface AzureVirtualMachineExtensionSpec {
            autoUpgradeMinorVersion: pulumi.Input<boolean>;
            forceUpdateTag: pulumi.Input<string>;
            /**
             * INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
             */
            location: pulumi.Input<string>;
            protectedSettings?: pulumi.Input<string>;
            publisher: pulumi.Input<string>;
            resourceGroup: pulumi.Input<string>;
            settings?: pulumi.Input<string>;
            typeHandlerVersion: pulumi.Input<string>;
            typeName: pulumi.Input<string>;
            vmName: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface AzureVirtualMachineExtensionStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * AzureVirtualMachineSpec defines the desired state of AzureVirtualMachine
         */
        export interface AzureVirtualMachineSpec {
            adminUserName: pulumi.Input<string>;
            /**
             * INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
             */
            location: pulumi.Input<string>;
            networkInterfaceName: pulumi.Input<string>;
            osType: pulumi.Input<string>;
            platformImageURN: pulumi.Input<string>;
            resourceGroup: pulumi.Input<string>;
            sshPublicKeyData?: pulumi.Input<string>;
            vmSize: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface AzureVirtualMachineStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * BlobContainerSpec defines the desired state of BlobContainer
         */
        export interface BlobContainerSpec {
            /**
             * PublicAccess enumerates the values for public access.
             */
            accesslevel?: pulumi.Input<string>;
            accountname?: pulumi.Input<string>;
            /**
             * INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
             */
            location: pulumi.Input<string>;
            resourcegroup: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface BlobContainerStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * ConsumerGroupSpec defines the desired state of ConsumerGroup
         */
        export interface ConsumerGroupSpec {
            consumerGroupName?: pulumi.Input<string>;
            eventHub?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
            /**
             * INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
             */
            resourceGroup: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface ConsumerGroupStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * CosmosDBSpec defines the desired state of CosmosDB
         */
        export interface CosmosDBSpec {
            ipRules?: pulumi.Input<pulumi.Input<string>[]>;
            keyVaultToStoreSecrets?: pulumi.Input<string>;
            /**
             * CosmosDBKind enumerates the values for kind. Only one of the following kinds may be specified. If none of the following kinds is specified, the default one is GlobalDocumentDBKind.
             */
            kind?: pulumi.Input<string>;
            location?: pulumi.Input<string>;
            locations?: pulumi.Input<pulumi.Input<inputs.azure.v1alpha1.CosmosDBSpecLocations>[]>;
            /**
             * CosmosDBProperties the CosmosDBProperties of CosmosDB.
             */
            properties?: pulumi.Input<inputs.azure.v1alpha1.CosmosDBSpecProperties>;
            resourceGroup: pulumi.Input<string>;
            virtualNetworkRules?: pulumi.Input<pulumi.Input<inputs.azure.v1alpha1.CosmosDBSpecVirtualNetworkRules>[]>;
        }

        /**
         * CosmosDBLocation defines one or more locations for geo-redundancy and high availability
         */
        export interface CosmosDBSpecLocations {
            failoverPriority: pulumi.Input<number>;
            isZoneRedundant?: pulumi.Input<boolean>;
            locationName: pulumi.Input<string>;
        }

        /**
         * CosmosDBProperties the CosmosDBProperties of CosmosDB.
         */
        export interface CosmosDBSpecProperties {
            capabilities?: pulumi.Input<pulumi.Input<inputs.azure.v1alpha1.CosmosDBSpecPropertiesCapabilities>[]>;
            /**
             * DatabaseAccountOfferType - The offer type for the Cosmos DB database account.
             */
            databaseAccountOfferType?: pulumi.Input<string>;
            enableMultipleWriteLocations?: pulumi.Input<boolean>;
            /**
             * IsVirtualNetworkFilterEnabled - Flag to indicate whether to enable/disable Virtual Network ACL rules.
             */
            isVirtualNetworkFilterEnabled?: pulumi.Input<boolean>;
            mongoDBVersion?: pulumi.Input<string>;
        }

        /**
         * Capability cosmos DB capability object
         */
        export interface CosmosDBSpecPropertiesCapabilities {
            /**
             * Name *CosmosCapability `json:"name,omitempty"`
             */
            name?: pulumi.Input<string>;
        }

        /**
         * CosmosDBVirtualNetworkRule virtual Network ACL Rule object
         */
        export interface CosmosDBSpecVirtualNetworkRules {
            /**
             * IgnoreMissingVNetServiceEndpoint - Create firewall rule before the virtual network has vnet service endpoint enabled.
             */
            ignoreMissingVNetServiceEndpoint?: pulumi.Input<boolean>;
            /**
             * ID - Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
             */
            subnetID?: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface CosmosDBStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * EventhubNamespaceSpec defines the desired state of EventhubNamespace
         */
        export interface EventhubNamespaceSpec {
            /**
             * INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
             */
            location: pulumi.Input<string>;
            /**
             * EventhubNamespaceNetworkRule defines the namespace network rule
             */
            networkRule?: pulumi.Input<inputs.azure.v1alpha1.EventhubNamespaceSpecNetworkRule>;
            /**
             * EventhubNamespaceProperties defines the namespace properties
             */
            properties?: pulumi.Input<inputs.azure.v1alpha1.EventhubNamespaceSpecProperties>;
            resourceGroup: pulumi.Input<string>;
            /**
             * EventhubNamespaceSku defines the sku
             */
            sku?: pulumi.Input<inputs.azure.v1alpha1.EventhubNamespaceSpecSku>;
        }

        /**
         * EventhubNamespaceNetworkRule defines the namespace network rule
         */
        export interface EventhubNamespaceSpecNetworkRule {
            /**
             * DefaultAction defined as a string
             */
            defaultAction?: pulumi.Input<string>;
            /**
             * IPRules - List of IpRules
             */
            ipRules?: pulumi.Input<pulumi.Input<inputs.azure.v1alpha1.EventhubNamespaceSpecNetworkRuleIpRules>[]>;
            /**
             * VirtualNetworkRules - List VirtualNetwork Rules
             */
            virtualNetworkRules?: pulumi.Input<pulumi.Input<inputs.azure.v1alpha1.EventhubNamespaceSpecNetworkRuleVirtualNetworkRules>[]>;
        }

        export interface EventhubNamespaceSpecNetworkRuleIpRules {
            /**
             * IPMask - IPv4 address 1.1.1.1 or CIDR notation 1.1.0.0/24
             */
            ipMask?: pulumi.Input<string>;
        }

        export interface EventhubNamespaceSpecNetworkRuleVirtualNetworkRules {
            /**
             * IgnoreMissingVnetServiceEndpoint - Value that indicates whether to ignore missing VNet Service Endpoint
             */
            ignoreMissingServiceEndpoint?: pulumi.Input<boolean>;
            /**
             * Subnet - Full Resource ID of Virtual Network Subnet
             */
            subnetId?: pulumi.Input<string>;
        }

        /**
         * EventhubNamespaceProperties defines the namespace properties
         */
        export interface EventhubNamespaceSpecProperties {
            isAutoInflateEnabled?: pulumi.Input<boolean>;
            kafkaEnabled?: pulumi.Input<boolean>;
            maximumThroughputUnits?: pulumi.Input<number>;
        }

        /**
         * EventhubNamespaceSku defines the sku
         */
        export interface EventhubNamespaceSpecSku {
            capacity?: pulumi.Input<number>;
            name?: pulumi.Input<string>;
            tier?: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface EventhubNamespaceStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * EventhubSpec defines the desired state of Eventhub
         */
        export interface EventhubSpec {
            /**
             * EventhubAuthorizationRule defines the name and rights of the access policy
             */
            authorizationRule?: pulumi.Input<inputs.azure.v1alpha1.EventhubSpecAuthorizationRule>;
            keyVaultToStoreSecrets?: pulumi.Input<string>;
            /**
             * INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
             */
            location: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
            /**
             * EventhubProperties defines the namespace properties
             */
            properties?: pulumi.Input<inputs.azure.v1alpha1.EventhubSpecProperties>;
            resourceGroup: pulumi.Input<string>;
            /**
             * SecretName - Used to specify the name of the secret. Defaults to Event Hub name if omitted.
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * EventhubAuthorizationRule defines the name and rights of the access policy
         */
        export interface EventhubSpecAuthorizationRule {
            /**
             * Name - Name of AuthorizationRule for eventhub
             */
            name?: pulumi.Input<string>;
            /**
             * Rights - Rights set on the AuthorizationRule
             */
            rights?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * EventhubProperties defines the namespace properties
         */
        export interface EventhubSpecProperties {
            /**
             * CaptureDescription - Details specifying EventHub capture to persistent storage
             */
            captureDescription?: pulumi.Input<inputs.azure.v1alpha1.EventhubSpecPropertiesCaptureDescription>;
            /**
             * MessageRetentionInDays - Number of days to retain the events for this Event Hub, value should be 1 to 7 days
             */
            messageRetentionInDays?: pulumi.Input<number>;
            /**
             * PartitionCount - Number of partitions created for the Event Hub, allowed values are from 2 to 32 partitions.
             */
            partitionCount?: pulumi.Input<number>;
        }

        /**
         * CaptureDescription - Details specifying EventHub capture to persistent storage
         */
        export interface EventhubSpecPropertiesCaptureDescription {
            /**
             * Destination - Resource id of the storage account to be used to create the blobs
             */
            destination?: pulumi.Input<inputs.azure.v1alpha1.EventhubSpecPropertiesCaptureDescriptionDestination>;
            /**
             * Enabled - indicates whether capture is enabled
             */
            enabled: pulumi.Input<boolean>;
            /**
             * IntervalInSeconds - The time window allows you to set the frequency with which the capture to Azure Blobs will happen
             */
            intervalInSeconds?: pulumi.Input<number>;
            /**
             * SizeLimitInBytes - The size window defines the amount of data built up in your Event Hub before an capture operation
             */
            sizeLimitInBytes?: pulumi.Input<number>;
        }

        /**
         * Destination - Resource id of the storage account to be used to create the blobs
         */
        export interface EventhubSpecPropertiesCaptureDescriptionDestination {
            /**
             * ArchiveNameFormat - Blob naming convention for archive, e.g. {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
             */
            archiveNameFormat?: pulumi.Input<string>;
            /**
             * BlobContainer - Blob container Name
             */
            blobContainer?: pulumi.Input<string>;
            /**
             * Name - Name for capture destination
             */
            name?: pulumi.Input<string>;
            /**
             * StorageAccount - Details of the storage account
             */
            storageAccount?: pulumi.Input<inputs.azure.v1alpha1.EventhubSpecPropertiesCaptureDescriptionDestinationStorageAccount>;
        }

        /**
         * StorageAccount - Details of the storage account
         */
        export interface EventhubSpecPropertiesCaptureDescriptionDestinationStorageAccount {
            /**
             * AccountName - Name of the storage account
             */
            accountName?: pulumi.Input<string>;
            /**
             * ResourceGroup - Name of the storage account resource group
             */
            resourceGroup?: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface EventhubStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * KeyVaultKeySpec defines the desired state of KeyVaultKey
         */
        export interface KeyVaultKeySpec {
            /**
             * JSONWebKeyCurveName enumerates the values for json web key curve name.
             */
            curve?: pulumi.Input<string>;
            keySize?: pulumi.Input<number>;
            keyVault?: pulumi.Input<string>;
            /**
             * INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
             */
            location: pulumi.Input<string>;
            operations?: pulumi.Input<pulumi.Input<string>[]>;
            resourceGroup: pulumi.Input<string>;
            /**
             * JSONWebKeyType enumerates the values for json web key type.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface KeyVaultKeyStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * KeyVaultSpec defines the desired state of KeyVault
         */
        export interface KeyVaultSpec {
            accessPolicies?: pulumi.Input<pulumi.Input<inputs.azure.v1alpha1.KeyVaultSpecAccessPolicies>[]>;
            enableSoftDelete?: pulumi.Input<boolean>;
            location: pulumi.Input<string>;
            networkPolicies?: pulumi.Input<inputs.azure.v1alpha1.KeyVaultSpecNetworkPolicies>;
            resourceGroup: pulumi.Input<string>;
            /**
             * KeyVaultSku the SKU of the Key Vault
             */
            sku?: pulumi.Input<inputs.azure.v1alpha1.KeyVaultSpecSku>;
        }

        export interface KeyVaultSpecAccessPolicies {
            /**
             * ApplicationID -  Application ID of the client making request on behalf of a principal
             */
            applicationID?: pulumi.Input<string>;
            /**
             * ClientID - The client ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The client ID must be unique for the list of access policies.
             */
            clientID?: pulumi.Input<string>;
            /**
             * ObjectID is the value to use if the access policy is for a user other than the user creating the Key Vault when the creating user does not have access to the Application API which is used to translate ClientID to Object ID To get around this, use az-cli or the Azure portal to source the ObjectID from your Service Principal
             */
            objectID?: pulumi.Input<string>;
            /**
             * Permissions - Permissions the identity has for keys, secrets, and certificates.
             */
            permissions?: pulumi.Input<inputs.azure.v1alpha1.KeyVaultSpecAccessPoliciesPermissions>;
            /**
             * TenantID - The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
             */
            tenantID?: pulumi.Input<string>;
        }

        /**
         * Permissions - Permissions the identity has for keys, secrets, and certificates.
         */
        export interface KeyVaultSpecAccessPoliciesPermissions {
            certificates?: pulumi.Input<pulumi.Input<string>[]>;
            keys?: pulumi.Input<pulumi.Input<string>[]>;
            secrets?: pulumi.Input<pulumi.Input<string>[]>;
            storage?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface KeyVaultSpecNetworkPolicies {
            /**
             * Bypass - Tells what traffic can bypass network rules. This can be 'AzureServices' or 'None'.  If not specified the default is 'AzureServices'. Possible values include: 'AzureServices', 'None'
             */
            bypass?: pulumi.Input<string>;
            /**
             * DefaultAction - The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after the bypass property has been evaluated. Possible values include: 'Allow', 'Deny'
             */
            defaultAction?: pulumi.Input<string>;
            /**
             * IPRules - The list of IP address rules.
             */
            ipRules?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * VirtualNetworkRules - The list of virtual network rules.
             */
            virtualNetworkRules?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * KeyVaultSku the SKU of the Key Vault
         */
        export interface KeyVaultSpecSku {
            /**
             * Name - The SKU name. Required for account creation; optional for update. Possible values include: 'Premium', `Standard`
             */
            name?: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface KeyVaultStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * MySQLDatabaseSpec defines the desired state of MySQLDatabase
         */
        export interface MySQLDatabaseSpec {
            resourceGroup: pulumi.Input<string>;
            server?: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface MySQLDatabaseStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * MySQLFirewallRuleSpec defines the desired state of MySQLFirewallRule
         */
        export interface MySQLFirewallRuleSpec {
            endIpAddress: pulumi.Input<string>;
            resourceGroup: pulumi.Input<string>;
            server: pulumi.Input<string>;
            startIpAddress: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface MySQLFirewallRuleStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * MySQLServerSpec defines the desired state of MySQLServer
         */
        export interface MySQLServerSpec {
            createMode?: pulumi.Input<string>;
            keyVaultToStoreSecrets?: pulumi.Input<string>;
            location: pulumi.Input<string>;
            replicaProperties?: pulumi.Input<inputs.azure.v1alpha1.MySQLServerSpecReplicaProperties>;
            resourceGroup: pulumi.Input<string>;
            /**
             * ServerVersion enumerates the values for server version.
             */
            serverVersion?: pulumi.Input<string>;
            sku?: pulumi.Input<inputs.azure.v1alpha1.MySQLServerSpecSku>;
            sslEnforcement?: pulumi.Input<string>;
        }

        export interface MySQLServerSpecReplicaProperties {
            sourceServerId?: pulumi.Input<string>;
        }

        export interface MySQLServerSpecSku {
            /**
             * Capacity - The scale up/out capacity, representing server's compute units.
             */
            capacity?: pulumi.Input<number>;
            /**
             * Family - The family of hardware.
             */
            family?: pulumi.Input<string>;
            /**
             * Name - The name of the sku, typically, tier + family + cores, e.g. B_Gen4_1, GP_Gen5_8.
             */
            name?: pulumi.Input<string>;
            /**
             * Size - The size code, to be interpreted by resource as appropriate.
             */
            size?: pulumi.Input<string>;
            /**
             * Tier - The tier of the particular SKU, e.g. Basic. Possible values include: 'Basic', 'GeneralPurpose', 'MemoryOptimized'
             */
            tier?: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface MySQLServerStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * MySQLUserSpec defines the desired state of MySqlUser
         */
        export interface MySQLUserSpec {
            /**
             * optional
             */
            adminSecret?: pulumi.Input<string>;
            adminSecretKeyVault?: pulumi.Input<string>;
            dbName: pulumi.Input<string>;
            keyVaultToStoreSecrets?: pulumi.Input<string>;
            resourceGroup: pulumi.Input<string>;
            roles: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
             */
            server: pulumi.Input<string>;
            username?: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface MySQLUserStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * MySQLVNetRuleSpec defines the desired state of MySQLVNetRule
         */
        export interface MySQLVNetRuleSpec {
            ignoreMissingServiceEndpoint?: pulumi.Input<boolean>;
            /**
             * INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
             */
            resourceGroup: pulumi.Input<string>;
            server: pulumi.Input<string>;
            subnetName: pulumi.Input<string>;
            vNetName: pulumi.Input<string>;
            vNetResourceGroup: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface MySQLVNetRuleStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * PostgreSQLDatabaseSpec defines the desired state of PostgreSQLDatabase
         */
        export interface PostgreSQLDatabaseSpec {
            /**
             * INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
             */
            resourceGroup: pulumi.Input<string>;
            server: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface PostgreSQLDatabaseStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * PostgreSQLFirewallRuleSpec defines the desired state of PostgreSQLFirewallRule
         */
        export interface PostgreSQLFirewallRuleSpec {
            endIpAddress: pulumi.Input<string>;
            /**
             * INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
             */
            resourceGroup: pulumi.Input<string>;
            server: pulumi.Input<string>;
            startIpAddress: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface PostgreSQLFirewallRuleStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * PostgreSQLServerSpec defines the desired state of PostgreSQLServer
         */
        export interface PostgreSQLServerSpec {
            createMode?: pulumi.Input<string>;
            keyVaultToStoreSecrets?: pulumi.Input<string>;
            location: pulumi.Input<string>;
            replicaProperties?: pulumi.Input<inputs.azure.v1alpha1.PostgreSQLServerSpecReplicaProperties>;
            resourceGroup: pulumi.Input<string>;
            /**
             * ServerVersion enumerates the values for server version.
             */
            serverVersion?: pulumi.Input<string>;
            sku?: pulumi.Input<inputs.azure.v1alpha1.PostgreSQLServerSpecSku>;
            sslEnforcement?: pulumi.Input<string>;
        }

        export interface PostgreSQLServerSpecReplicaProperties {
            sourceServerId?: pulumi.Input<string>;
        }

        export interface PostgreSQLServerSpecSku {
            /**
             * Capacity - The scale up/out capacity, representing server's compute units.
             */
            capacity?: pulumi.Input<number>;
            /**
             * Family - The family of hardware.
             */
            family?: pulumi.Input<string>;
            /**
             * Name - The name of the sku, typically, tier + family + cores, e.g. B_Gen4_1, GP_Gen5_8.
             */
            name?: pulumi.Input<string>;
            /**
             * Size - The size code, to be interpreted by resource as appropriate.
             */
            size?: pulumi.Input<string>;
            /**
             * Tier - The tier of the particular SKU, e.g. Basic. Possible values include: 'Basic', 'GeneralPurpose', 'MemoryOptimized'
             */
            tier?: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface PostgreSQLServerStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * PostgreSQLUserSpec defines the desired state of PostgreSqlUser
         */
        export interface PostgreSQLUserSpec {
            /**
             * optional
             */
            adminSecret?: pulumi.Input<string>;
            adminSecretKeyVault?: pulumi.Input<string>;
            dbName: pulumi.Input<string>;
            keyVaultToStoreSecrets?: pulumi.Input<string>;
            resourceGroup: pulumi.Input<string>;
            roles: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
             */
            server: pulumi.Input<string>;
            username?: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface PostgreSQLUserStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * PotgreSQLVNetRuleSpec defines the desired state of PostgreSQLVNetRule
         */
        export interface PostgreSQLVNetRuleSpec {
            ignoreMissingServiceEndpoint?: pulumi.Input<boolean>;
            /**
             * INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
             */
            resourceGroup: pulumi.Input<string>;
            server: pulumi.Input<string>;
            subnetName: pulumi.Input<string>;
            vNetName: pulumi.Input<string>;
            vNetResourceGroup: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface PostgreSQLVNetRuleStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * RedisCacheActionSpec defines the desired state of RedisCacheAction
         */
        export interface RedisCacheActionSpec {
            actionName: pulumi.Input<string>;
            cacheName: pulumi.Input<string>;
            keyVaultToStoreSecrets?: pulumi.Input<string>;
            resourceGroup: pulumi.Input<string>;
            secretName?: pulumi.Input<string>;
            shardID?: pulumi.Input<number>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface RedisCacheActionStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * RedisCacheFirewallRuleSpec defines the desired state of RedisCacheFirewallRule
         */
        export interface RedisCacheFirewallRuleSpec {
            /**
             * RedisCacheFirewallRuleProperties the parameters of the RedisCacheFirewallRule
             */
            properties: pulumi.Input<inputs.azure.v1alpha1.RedisCacheFirewallRuleSpecProperties>;
            redisCache: pulumi.Input<string>;
            resourceGroup: pulumi.Input<string>;
        }

        /**
         * RedisCacheFirewallRuleProperties the parameters of the RedisCacheFirewallRule
         */
        export interface RedisCacheFirewallRuleSpecProperties {
            endIP: pulumi.Input<string>;
            startIP: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface RedisCacheFirewallRuleStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * RedisCacheSpec defines the desired state of RedisCache
         */
        export interface RedisCacheSpec {
            keyVaultToStoreSecrets?: pulumi.Input<string>;
            location?: pulumi.Input<string>;
            /**
             * RedisCacheProperties the properties of the Redis Cache.
             */
            properties?: pulumi.Input<inputs.azure.v1alpha1.RedisCacheSpecProperties>;
            resourceGroup: pulumi.Input<string>;
            secretName?: pulumi.Input<string>;
        }

        /**
         * RedisCacheProperties the properties of the Redis Cache.
         */
        export interface RedisCacheSpecProperties {
            configuration?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            enableNonSslPort?: pulumi.Input<boolean>;
            shardCount?: pulumi.Input<number>;
            /**
             * RedisCacheSku the SKU of the Redis Cache.
             */
            sku?: pulumi.Input<inputs.azure.v1alpha1.RedisCacheSpecPropertiesSku>;
            staticIp?: pulumi.Input<string>;
            subnetId?: pulumi.Input<string>;
        }

        /**
         * RedisCacheSku the SKU of the Redis Cache.
         */
        export interface RedisCacheSpecPropertiesSku {
            capacity?: pulumi.Input<number>;
            family?: pulumi.Input<string>;
            /**
             * Name - The SKU name. Required for account creation; optional for update. Possible values include: 'StandardLRS', 'StandardGRS', 'StandardRAGRS', 'StandardZRS', 'PremiumLRS', 'PremiumZRS', 'StandardGZRS', 'StandardRAGZRS'
             */
            name?: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface RedisCacheStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * ResourceGroupSpec defines the desired state of ResourceGroup
         */
        export interface ResourceGroupSpec {
            /**
             * INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
             */
            location: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface ResourceGroupStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * StorageAccountAdditionalResources holds the additional resources
         */
        export interface StorageAccountAdditionalResources {
            secrets?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * StorageAccountOutput is the object that contains the output from creating a Storage Account object
         */
        export interface StorageAccountOutput {
            connectionString1?: pulumi.Input<string>;
            connectionString2?: pulumi.Input<string>;
            key1?: pulumi.Input<string>;
            key2?: pulumi.Input<string>;
            storageAccountName?: pulumi.Input<string>;
        }

        /**
         * StorageAccountSpec defines the desired state of Storage
         */
        export interface StorageAccountSpec {
            /**
             * StorageAccountAccessTier enumerates the values for access tier. Only one of the following access tiers may be specified. If none of the following access tiers is specified, the default one is Hot.
             */
            accessTier?: pulumi.Input<string>;
            dataLakeEnabled?: pulumi.Input<boolean>;
            /**
             * StorageAccountKind enumerates the values for kind. Only one of the following kinds may be specified. If none of the following kinds is specified, the default one is StorageV2.
             */
            kind?: pulumi.Input<string>;
            location?: pulumi.Input<string>;
            networkRule?: pulumi.Input<inputs.azure.v1alpha1.StorageAccountSpecNetworkRule>;
            resourceGroup: pulumi.Input<string>;
            /**
             * StorageAccountSku the SKU of the storage account.
             */
            sku?: pulumi.Input<inputs.azure.v1alpha1.StorageAccountSpecSku>;
            supportsHttpsTrafficOnly?: pulumi.Input<boolean>;
        }

        export interface StorageAccountSpecNetworkRule {
            /**
             * Bypass - Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, "Logging, Metrics"), or None to bypass none of those traffics. Possible values include: 'None', 'Logging', 'Metrics', 'AzureServices'
             */
            bypass?: pulumi.Input<string>;
            /**
             * DefaultAction - Specifies the default action of allow or deny when no other rules match. Possible values include: 'DefaultActionAllow', 'DefaultActionDeny'
             */
            defaultAction?: pulumi.Input<string>;
            /**
             * IPRules - Sets the IP ACL rules
             */
            ipRules?: pulumi.Input<pulumi.Input<inputs.azure.v1alpha1.StorageAccountSpecNetworkRuleIpRules>[]>;
            /**
             * VirtualNetworkRules - Sets the virtual network rules
             */
            virtualNetworkRules?: pulumi.Input<pulumi.Input<inputs.azure.v1alpha1.StorageAccountSpecNetworkRuleVirtualNetworkRules>[]>;
        }

        export interface StorageAccountSpecNetworkRuleIpRules {
            /**
             * IPAddressOrRange - Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.
             */
            ipAddressOrRange?: pulumi.Input<string>;
        }

        export interface StorageAccountSpecNetworkRuleVirtualNetworkRules {
            /**
             * SubnetId - Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.
             */
            subnetId?: pulumi.Input<string>;
        }

        /**
         * StorageAccountSku the SKU of the storage account.
         */
        export interface StorageAccountSpecSku {
            /**
             * Name - The SKU name. Required for account creation; optional for update. Possible values include: 'StandardLRS', 'StandardGRS', 'StandardRAGRS', 'StandardZRS', 'PremiumLRS', 'PremiumZRS', 'StandardGZRS', 'StandardRAGZRS'
             */
            name?: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface StorageAccountStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * VirtualNetworkSpec defines the desired state of VirtualNetwork
         */
        export interface VirtualNetworkSpec {
            addressSpace: pulumi.Input<string>;
            /**
             * INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
             */
            location: pulumi.Input<string>;
            resourceGroup: pulumi.Input<string>;
            subnets?: pulumi.Input<pulumi.Input<inputs.azure.v1alpha1.VirtualNetworkSpecSubnets>[]>;
        }

        /**
         * VNetSubnets defines subnets for this vnet
         */
        export interface VirtualNetworkSpecSubnets {
            serviceEndpoints?: pulumi.Input<pulumi.Input<string>[]>;
            subnetAddressPrefix: pulumi.Input<string>;
            /**
             * INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run "make" to regenerate code after modifying this file
             */
            subnetName: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface VirtualNetworkStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }
    }

    export namespace v1alpha2 {
        /**
         * BlobContainerSpec defines the desired state of BlobContainer
         */
        export interface BlobContainerSpec {
            /**
             * PublicAccess enumerates the values for public access.
             */
            accessLevel?: pulumi.Input<string>;
            accountName?: pulumi.Input<string>;
            /**
             * INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
             */
            location: pulumi.Input<string>;
            resourceGroup: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface BlobContainerStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * MySQLServerSpec defines the desired state of MySQLServer
         */
        export interface MySQLServerSpec {
            createMode?: pulumi.Input<string>;
            keyVaultToStoreSecrets?: pulumi.Input<string>;
            location: pulumi.Input<string>;
            replicaProperties?: pulumi.Input<inputs.azure.v1alpha2.MySQLServerSpecReplicaProperties>;
            resourceGroup: pulumi.Input<string>;
            /**
             * ServerVersion enumerates the values for server version.
             */
            serverVersion?: pulumi.Input<string>;
            sku?: pulumi.Input<inputs.azure.v1alpha2.MySQLServerSpecSku>;
            sslEnforcement?: pulumi.Input<string>;
            storageProfile?: pulumi.Input<inputs.azure.v1alpha2.MySQLServerSpecStorageProfile>;
        }

        export interface MySQLServerSpecReplicaProperties {
            sourceServerId?: pulumi.Input<string>;
        }

        export interface MySQLServerSpecSku {
            /**
             * Capacity - The scale up/out capacity, representing server's compute units.
             */
            capacity?: pulumi.Input<number>;
            /**
             * Family - The family of hardware.
             */
            family?: pulumi.Input<string>;
            /**
             * Name - The name of the sku, typically, tier + family + cores, e.g. B_Gen4_1, GP_Gen5_8.
             */
            name?: pulumi.Input<string>;
            /**
             * Size - The size code, to be interpreted by resource as appropriate.
             */
            size?: pulumi.Input<string>;
            /**
             * Tier - The tier of the particular SKU, e.g. Basic. Possible values include: 'Basic', 'GeneralPurpose', 'MemoryOptimized'
             */
            tier?: pulumi.Input<string>;
        }

        export interface MySQLServerSpecStorageProfile {
            /**
             * BackupRetentionDays - Backup retention days for the server.
             */
            backupRetentionDays?: pulumi.Input<number>;
            /**
             * GeoRedundantBackup - Enable Geo-redundant or not for server backup. Possible values include: 'Enabled', 'Disabled'
             */
            geoRedundantBackup?: pulumi.Input<string>;
            /**
             * StorageAutogrow - Enable Storage Auto Grow. Possible values include: 'StorageAutogrowEnabled', 'StorageAutogrowDisabled'
             */
            storageAutogrow?: pulumi.Input<string>;
            /**
             * StorageMB - Max storage allowed for a server.
             */
            storageMB?: pulumi.Input<number>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface MySQLServerStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * PostgreSQLServerSpec defines the desired state of PostgreSQLServer
         */
        export interface PostgreSQLServerSpec {
            createMode?: pulumi.Input<string>;
            keyVaultToStoreSecrets?: pulumi.Input<string>;
            location: pulumi.Input<string>;
            replicaProperties?: pulumi.Input<inputs.azure.v1alpha2.PostgreSQLServerSpecReplicaProperties>;
            resourceGroup: pulumi.Input<string>;
            /**
             * ServerVersion enumerates the values for server version.
             */
            serverVersion?: pulumi.Input<string>;
            sku?: pulumi.Input<inputs.azure.v1alpha2.PostgreSQLServerSpecSku>;
            sslEnforcement?: pulumi.Input<string>;
            storageProfile?: pulumi.Input<inputs.azure.v1alpha2.PostgreSQLServerSpecStorageProfile>;
        }

        export interface PostgreSQLServerSpecReplicaProperties {
            sourceServerId?: pulumi.Input<string>;
        }

        export interface PostgreSQLServerSpecSku {
            /**
             * Capacity - The scale up/out capacity, representing server's compute units.
             */
            capacity?: pulumi.Input<number>;
            /**
             * Family - The family of hardware.
             */
            family?: pulumi.Input<string>;
            /**
             * Name - The name of the sku, typically, tier + family + cores, e.g. B_Gen4_1, GP_Gen5_8.
             */
            name?: pulumi.Input<string>;
            /**
             * Size - The size code, to be interpreted by resource as appropriate.
             */
            size?: pulumi.Input<string>;
            /**
             * Tier - The tier of the particular SKU, e.g. Basic. Possible values include: 'Basic', 'GeneralPurpose', 'MemoryOptimized'
             */
            tier?: pulumi.Input<string>;
        }

        export interface PostgreSQLServerSpecStorageProfile {
            /**
             * BackupRetentionDays - Backup retention days for the server.
             */
            backupRetentionDays?: pulumi.Input<number>;
            /**
             * GeoRedundantBackup - Enable Geo-redundant or not for server backup. Possible values include: 'Enabled', 'Disabled'
             */
            geoRedundantBackup?: pulumi.Input<string>;
            /**
             * StorageAutogrow - Enable Storage Auto Grow. Possible values include: 'StorageAutogrowEnabled', 'StorageAutogrowDisabled'
             */
            storageAutogrow?: pulumi.Input<string>;
            /**
             * StorageMB - Max storage allowed for a server.
             */
            storageMB?: pulumi.Input<number>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface PostgreSQLServerStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }
    }

    export namespace v1beta1 {
        /**
         * AzureSqlDatabaseSpec defines the desired state of AzureSqlDatabase
         */
        export interface AzureSqlDatabaseSpec {
            dbName?: pulumi.Input<string>;
            edition?: pulumi.Input<number>;
            /**
             * INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
             */
            location: pulumi.Input<string>;
            maxSize?: pulumi.Input<inputs.azure.v1beta1.AzureSqlDatabaseSpecMaxSize>;
            monthlyRetention?: pulumi.Input<string>;
            resourceGroup: pulumi.Input<string>;
            server: pulumi.Input<string>;
            sku?: pulumi.Input<inputs.azure.v1beta1.AzureSqlDatabaseSpecSku>;
            weekOfYear?: pulumi.Input<number>;
            weeklyRetention?: pulumi.Input<string>;
            yearlyRetention?: pulumi.Input<string>;
        }

        export interface AzureSqlDatabaseSpecMaxSize {
        }

        export interface AzureSqlDatabaseSpecSku {
            /**
             * Capacity - Capacity of the particular SKU.
             */
            capacity?: pulumi.Input<number>;
            /**
             * Family - If the service has different generations of hardware, for the same SKU, then that can be captured here.
             */
            family?: pulumi.Input<string>;
            /**
             * Name - The name of the SKU, typically, a letter + Number code, e.g. P3.
             */
            name: pulumi.Input<string>;
            /**
             * Size - Size of the particular SKU
             */
            size?: pulumi.Input<string>;
            /**
             * optional Tier - The tier or edition of the particular SKU, e.g. Basic, Premium.
             */
            tier?: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface AzureSqlDatabaseStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * AzureSqlFailoverGroupSpec defines the desired state of AzureSqlFailoverGroup
         */
        export interface AzureSqlFailoverGroupSpec {
            databaseList: pulumi.Input<pulumi.Input<string>[]>;
            failoverGracePeriod: pulumi.Input<number>;
            /**
             * NOTE: json tags are required.  Any new fields you add must have json tags for the fields to be serialized.
             */
            failoverPolicy: pulumi.Input<string>;
            keyVaultToStoreSecrets?: pulumi.Input<string>;
            /**
             * Important: Run "make" to regenerate code after modifying this file
             */
            location: pulumi.Input<string>;
            resourceGroup: pulumi.Input<string>;
            secondaryServer: pulumi.Input<string>;
            secondaryServerResourceGroup: pulumi.Input<string>;
            server: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface AzureSqlFailoverGroupStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * AzureSqlFirewallRuleSpec defines the desired state of AzureSqlFirewallRule
         */
        export interface AzureSqlFirewallRuleSpec {
            endIpAddress?: pulumi.Input<string>;
            /**
             * INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
             */
            resourceGroup: pulumi.Input<string>;
            server: pulumi.Input<string>;
            startIpAddress?: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface AzureSqlFirewallRuleStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }

        /**
         * AzureSqlServerSpec defines the desired state of AzureSqlServer
         */
        export interface AzureSqlServerSpec {
            keyVaultToStoreSecrets?: pulumi.Input<string>;
            /**
             * INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
             */
            location: pulumi.Input<string>;
            resourceGroup: pulumi.Input<string>;
        }

        /**
         * ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
         */
        export interface AzureSqlServerStatus {
            completed?: pulumi.Input<string>;
            containsUpdate?: pulumi.Input<boolean>;
            failedProvisioning?: pulumi.Input<boolean>;
            flattenedSecrets?: pulumi.Input<boolean>;
            message?: pulumi.Input<string>;
            output?: pulumi.Input<string>;
            pollingUrl?: pulumi.Input<string>;
            provisioned?: pulumi.Input<boolean>;
            provisioning?: pulumi.Input<boolean>;
            requested?: pulumi.Input<string>;
            resourceId?: pulumi.Input<string>;
            specHash?: pulumi.Input<string>;
            state?: pulumi.Input<string>;
        }
    }
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// AzureLoadBalancer is the Schema for the azureloadbalancers API
type AzureLoadBalancer struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// AzureLoadBalancerSpec defines the desired state of AzureLoadBalancer
	Spec AzureLoadBalancerSpecPtrOutput `pulumi:"spec"`
	// ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
	Status AzureLoadBalancerStatusPtrOutput `pulumi:"status"`
}

// NewAzureLoadBalancer registers a new resource with the given unique name, arguments, and options.
func NewAzureLoadBalancer(ctx *pulumi.Context,
	name string, args *AzureLoadBalancerArgs, opts ...pulumi.ResourceOption) (*AzureLoadBalancer, error) {
	if args == nil {
		args = &AzureLoadBalancerArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("azure.microsoft.com/v1alpha1")
	args.Kind = pulumi.StringPtr("AzureLoadBalancer")
	var resource AzureLoadBalancer
	err := ctx.RegisterResource("kubernetes:azure.microsoft.com/v1alpha1:AzureLoadBalancer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAzureLoadBalancer gets an existing AzureLoadBalancer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAzureLoadBalancer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AzureLoadBalancerState, opts ...pulumi.ResourceOption) (*AzureLoadBalancer, error) {
	var resource AzureLoadBalancer
	err := ctx.ReadResource("kubernetes:azure.microsoft.com/v1alpha1:AzureLoadBalancer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AzureLoadBalancer resources.
type azureLoadBalancerState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// AzureLoadBalancerSpec defines the desired state of AzureLoadBalancer
	Spec *AzureLoadBalancerSpec `pulumi:"spec"`
	// ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
	Status *AzureLoadBalancerStatus `pulumi:"status"`
}

type AzureLoadBalancerState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// AzureLoadBalancerSpec defines the desired state of AzureLoadBalancer
	Spec AzureLoadBalancerSpecPtrInput
	// ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
	Status AzureLoadBalancerStatusPtrInput
}

func (AzureLoadBalancerState) ElementType() reflect.Type {
	return reflect.TypeOf((*azureLoadBalancerState)(nil)).Elem()
}

type azureLoadBalancerArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// AzureLoadBalancerSpec defines the desired state of AzureLoadBalancer
	Spec *AzureLoadBalancerSpec `pulumi:"spec"`
	// ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
	Status *AzureLoadBalancerStatus `pulumi:"status"`
}

// The set of arguments for constructing a AzureLoadBalancer resource.
type AzureLoadBalancerArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// AzureLoadBalancerSpec defines the desired state of AzureLoadBalancer
	Spec AzureLoadBalancerSpecPtrInput
	// ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
	Status AzureLoadBalancerStatusPtrInput
}

func (AzureLoadBalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*azureLoadBalancerArgs)(nil)).Elem()
}

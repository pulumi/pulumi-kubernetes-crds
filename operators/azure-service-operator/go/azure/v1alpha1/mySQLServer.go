// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// MySQLServer is the Schema for the mysqlservers API
type MySQLServer struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// MySQLServerSpec defines the desired state of MySQLServer
	Spec MySQLServerSpecPtrOutput `pulumi:"spec"`
	// ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
	Status MySQLServerStatusPtrOutput `pulumi:"status"`
}

// NewMySQLServer registers a new resource with the given unique name, arguments, and options.
func NewMySQLServer(ctx *pulumi.Context,
	name string, args *MySQLServerArgs, opts ...pulumi.ResourceOption) (*MySQLServer, error) {
	if args == nil {
		args = &MySQLServerArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("azure.microsoft.com/v1alpha1")
	args.Kind = pulumi.StringPtr("MySQLServer")
	var resource MySQLServer
	err := ctx.RegisterResource("kubernetes:azure.microsoft.com/v1alpha1:MySQLServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMySQLServer gets an existing MySQLServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMySQLServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MySQLServerState, opts ...pulumi.ResourceOption) (*MySQLServer, error) {
	var resource MySQLServer
	err := ctx.ReadResource("kubernetes:azure.microsoft.com/v1alpha1:MySQLServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MySQLServer resources.
type mySQLServerState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// MySQLServerSpec defines the desired state of MySQLServer
	Spec *MySQLServerSpec `pulumi:"spec"`
	// ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
	Status *MySQLServerStatus `pulumi:"status"`
}

type MySQLServerState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// MySQLServerSpec defines the desired state of MySQLServer
	Spec MySQLServerSpecPtrInput
	// ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
	Status MySQLServerStatusPtrInput
}

func (MySQLServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*mySQLServerState)(nil)).Elem()
}

type mySQLServerArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// MySQLServerSpec defines the desired state of MySQLServer
	Spec *MySQLServerSpec `pulumi:"spec"`
	// ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
	Status *MySQLServerStatus `pulumi:"status"`
}

// The set of arguments for constructing a MySQLServer resource.
type MySQLServerArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// MySQLServerSpec defines the desired state of MySQLServer
	Spec MySQLServerSpecPtrInput
	// ASOStatus (AzureServiceOperatorsStatus) defines the observed state of resource actions
	Status MySQLServerStatusPtrInput
}

func (MySQLServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mySQLServerArgs)(nil)).Elem()
}

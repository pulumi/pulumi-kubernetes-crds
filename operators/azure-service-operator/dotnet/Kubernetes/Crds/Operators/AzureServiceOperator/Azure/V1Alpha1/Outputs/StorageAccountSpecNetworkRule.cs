// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Azure.V1Alpha1
{

    [OutputType]
    public sealed class StorageAccountSpecNetworkRule
    {
        /// <summary>
        /// Bypass - Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, "Logging, Metrics"), or None to bypass none of those traffics. Possible values include: 'None', 'Logging', 'Metrics', 'AzureServices'
        /// </summary>
        public readonly string Bypass;
        /// <summary>
        /// DefaultAction - Specifies the default action of allow or deny when no other rules match. Possible values include: 'DefaultActionAllow', 'DefaultActionDeny'
        /// </summary>
        public readonly string DefaultAction;
        /// <summary>
        /// IPRules - Sets the IP ACL rules
        /// </summary>
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Azure.V1Alpha1.StorageAccountSpecNetworkRuleIpRules> IpRules;
        /// <summary>
        /// VirtualNetworkRules - Sets the virtual network rules
        /// </summary>
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Azure.V1Alpha1.StorageAccountSpecNetworkRuleVirtualNetworkRules> VirtualNetworkRules;

        [OutputConstructor]
        private StorageAccountSpecNetworkRule(
            string bypass,

            string defaultAction,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Azure.V1Alpha1.StorageAccountSpecNetworkRuleIpRules> ipRules,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Azure.V1Alpha1.StorageAccountSpecNetworkRuleVirtualNetworkRules> virtualNetworkRules)
        {
            Bypass = bypass;
            DefaultAction = defaultAction;
            IpRules = ipRules;
            VirtualNetworkRules = virtualNetworkRules;
        }
    }
}

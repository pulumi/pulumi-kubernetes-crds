// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import {ObjectMeta} from "../meta/v1";

export namespace apps {
    export namespace v1alpha1 {
        export interface APIManagerSpec {
            apicast?: outputs.apps.v1alpha1.APIManagerSpecApicast;
            appLabel?: string;
            backend?: outputs.apps.v1alpha1.APIManagerSpecBackend;
            highAvailability?: outputs.apps.v1alpha1.APIManagerSpecHighAvailability;
            imageStreamTagImportInsecure?: boolean;
            podDisruptionBudget?: outputs.apps.v1alpha1.APIManagerSpecPodDisruptionBudget;
            resourceRequirementsEnabled?: boolean;
            system?: outputs.apps.v1alpha1.APIManagerSpecSystem;
            tenantName?: string;
            wildcardDomain: string;
            zync?: outputs.apps.v1alpha1.APIManagerSpecZync;
        }

        export interface APIManagerSpecApicast {
            image?: string;
            managementAPI?: string;
            openSSLVerify?: boolean;
            productionSpec?: outputs.apps.v1alpha1.APIManagerSpecApicastProductionSpec;
            registryURL?: string;
            responseCodes?: boolean;
            stagingSpec?: outputs.apps.v1alpha1.APIManagerSpecApicastStagingSpec;
        }

        export interface APIManagerSpecApicastProductionSpec {
            replicas?: number;
        }

        export interface APIManagerSpecApicastStagingSpec {
            replicas?: number;
        }

        export interface APIManagerSpecBackend {
            cronSpec?: outputs.apps.v1alpha1.APIManagerSpecBackendCronSpec;
            image?: string;
            listenerSpec?: outputs.apps.v1alpha1.APIManagerSpecBackendListenerSpec;
            redisImage?: string;
            workerSpec?: outputs.apps.v1alpha1.APIManagerSpecBackendWorkerSpec;
        }

        export interface APIManagerSpecBackendCronSpec {
            replicas?: number;
        }

        export interface APIManagerSpecBackendListenerSpec {
            replicas?: number;
        }

        export interface APIManagerSpecBackendWorkerSpec {
            replicas?: number;
        }

        export interface APIManagerSpecHighAvailability {
            enabled?: boolean;
        }

        export interface APIManagerSpecPodDisruptionBudget {
            enabled?: boolean;
        }

        export interface APIManagerSpecSystem {
            appSpec?: outputs.apps.v1alpha1.APIManagerSpecSystemAppSpec;
            database?: outputs.apps.v1alpha1.APIManagerSpecSystemDatabase;
            fileStorage?: outputs.apps.v1alpha1.APIManagerSpecSystemFileStorage;
            image?: string;
            memcachedImage?: string;
            redisImage?: string;
            sidekiqSpec?: outputs.apps.v1alpha1.APIManagerSpecSystemSidekiqSpec;
        }

        export interface APIManagerSpecSystemAppSpec {
            replicas?: number;
        }

        export interface APIManagerSpecSystemDatabase {
            /**
             * Union type. Only one of the fields can be set
             */
            mysql?: outputs.apps.v1alpha1.APIManagerSpecSystemDatabaseMysql;
            postgresql?: outputs.apps.v1alpha1.APIManagerSpecSystemDatabasePostgresql;
        }

        /**
         * Union type. Only one of the fields can be set
         */
        export interface APIManagerSpecSystemDatabaseMysql {
            image?: string;
        }

        export interface APIManagerSpecSystemDatabasePostgresql {
            image?: string;
        }

        export interface APIManagerSpecSystemFileStorage {
            /**
             * Deprecated
             */
            amazonSimpleStorageService?: outputs.apps.v1alpha1.APIManagerSpecSystemFileStorageAmazonSimpleStorageService;
            /**
             * Union type. Only one of the fields can be set.
             */
            persistentVolumeClaim?: outputs.apps.v1alpha1.APIManagerSpecSystemFileStoragePersistentVolumeClaim;
            simpleStorageService?: outputs.apps.v1alpha1.APIManagerSpecSystemFileStorageSimpleStorageService;
        }

        /**
         * Deprecated
         */
        export interface APIManagerSpecSystemFileStorageAmazonSimpleStorageService {
            /**
             * Deprecated
             */
            awsBucket: string;
            /**
             * Deprecated
             */
            awsCredentialsSecret: outputs.apps.v1alpha1.APIManagerSpecSystemFileStorageAmazonSimpleStorageServiceAwsCredentialsSecret;
            /**
             * Deprecated
             */
            awsRegion: string;
        }

        /**
         * Deprecated
         */
        export interface APIManagerSpecSystemFileStorageAmazonSimpleStorageServiceAwsCredentialsSecret {
            name?: string;
        }

        /**
         * Union type. Only one of the fields can be set.
         */
        export interface APIManagerSpecSystemFileStoragePersistentVolumeClaim {
            storageClassName?: string;
        }

        export interface APIManagerSpecSystemFileStorageSimpleStorageService {
            configurationSecretRef: outputs.apps.v1alpha1.APIManagerSpecSystemFileStorageSimpleStorageServiceConfigurationSecretRef;
        }

        export interface APIManagerSpecSystemFileStorageSimpleStorageServiceConfigurationSecretRef {
            name?: string;
        }

        export interface APIManagerSpecSystemSidekiqSpec {
            replicas?: number;
        }

        export interface APIManagerSpecZync {
            appSpec?: outputs.apps.v1alpha1.APIManagerSpecZyncAppSpec;
            image?: string;
            postgreSQLImage?: string;
            queSpec?: outputs.apps.v1alpha1.APIManagerSpecZyncQueSpec;
        }

        export interface APIManagerSpecZyncAppSpec {
            replicas?: number;
        }

        export interface APIManagerSpecZyncQueSpec {
            replicas?: number;
        }

        export interface APIManagerStatus {
            conditions?: outputs.apps.v1alpha1.APIManagerStatusConditions[];
            deployments: outputs.apps.v1alpha1.APIManagerStatusDeployments;
        }

        export interface APIManagerStatusConditions {
            status: string;
            type: string;
        }

        export interface APIManagerStatusDeployments {
            /**
             * Deployments are ready to serve requests
             */
            ready?: string[];
            /**
             * Deployments are starting, may or may not succeed
             */
            starting?: string[];
            /**
             * Deployments are not starting, unclear what next step will be
             */
            stopped?: string[];
        }
    }
}

export namespace capabilities {
    export namespace v1alpha1 {
        export interface APISpec {
            description: string;
            integrationMethod: outputs.capabilities.v1alpha1.APISpecIntegrationMethod;
            metricSelector?: outputs.capabilities.v1alpha1.APISpecMetricSelector;
            planSelector?: outputs.capabilities.v1alpha1.APISpecPlanSelector;
        }

        export interface APISpecIntegrationMethod {
            apicastHosted?: outputs.capabilities.v1alpha1.APISpecIntegrationMethodApicastHosted;
            apicastOnPrem?: outputs.capabilities.v1alpha1.APISpecIntegrationMethodApicastOnPrem;
            codePlugin?: outputs.capabilities.v1alpha1.APISpecIntegrationMethodCodePlugin;
        }

        export interface APISpecIntegrationMethodApicastHosted {
            apiTestGetRequest: string;
            authenticationSettings: outputs.capabilities.v1alpha1.APISpecIntegrationMethodApicastHostedAuthenticationSettings;
            mappingRulesSelector?: outputs.capabilities.v1alpha1.APISpecIntegrationMethodApicastHostedMappingRulesSelector;
            policiesSelector?: outputs.capabilities.v1alpha1.APISpecIntegrationMethodApicastHostedPoliciesSelector;
            privateBaseURL: string;
        }

        export interface APISpecIntegrationMethodApicastHostedAuthenticationSettings {
            credentials: outputs.capabilities.v1alpha1.APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentials;
            errors: outputs.capabilities.v1alpha1.APISpecIntegrationMethodApicastHostedAuthenticationSettingsErrors;
            hostHeader: string;
            secretToken: string;
        }

        export interface APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentials {
            apiKey?: outputs.capabilities.v1alpha1.APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentialsApiKey;
            appID?: outputs.capabilities.v1alpha1.APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentialsAppID;
            openIDConnector?: outputs.capabilities.v1alpha1.APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentialsOpenIDConnector;
        }

        export interface APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentialsApiKey {
            authParameterName: string;
            credentialsLocation: string;
        }

        export interface APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentialsAppID {
            appIDParameterName: string;
            appKeyParameterName: string;
            credentialsLocation: string;
        }

        export interface APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentialsOpenIDConnector {
            credentialsLocation: string;
            issuer: string;
        }

        export interface APISpecIntegrationMethodApicastHostedAuthenticationSettingsErrors {
            authenticationFailed: outputs.capabilities.v1alpha1.APISpecIntegrationMethodApicastHostedAuthenticationSettingsErrorsAuthenticationFailed;
            authenticationMissing: outputs.capabilities.v1alpha1.APISpecIntegrationMethodApicastHostedAuthenticationSettingsErrorsAuthenticationMissing;
        }

        export interface APISpecIntegrationMethodApicastHostedAuthenticationSettingsErrorsAuthenticationFailed {
            contentType: string;
            responseBody: string;
            responseCode: number;
        }

        export interface APISpecIntegrationMethodApicastHostedAuthenticationSettingsErrorsAuthenticationMissing {
            contentType: string;
            responseBody: string;
            responseCode: number;
        }

        export interface APISpecIntegrationMethodApicastHostedMappingRulesSelector {
            matchExpressions?: any[];
            matchLabels?: {[key: string]: any};
        }

        export interface APISpecIntegrationMethodApicastHostedPoliciesSelector {
            matchExpressions?: any[];
            matchLabels?: {[key: string]: any};
        }

        export interface APISpecIntegrationMethodApicastOnPrem {
            apiTestGetRequest: string;
            authenticationSettings: outputs.capabilities.v1alpha1.APISpecIntegrationMethodApicastOnPremAuthenticationSettings;
            mappingRulesSelector?: outputs.capabilities.v1alpha1.APISpecIntegrationMethodApicastOnPremMappingRulesSelector;
            policiesSelector?: outputs.capabilities.v1alpha1.APISpecIntegrationMethodApicastOnPremPoliciesSelector;
            privateBaseURL: string;
            productionPublicBaseURL: string;
            stagingPublicBaseURL: string;
        }

        export interface APISpecIntegrationMethodApicastOnPremAuthenticationSettings {
            credentials: outputs.capabilities.v1alpha1.APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentials;
            errors: outputs.capabilities.v1alpha1.APISpecIntegrationMethodApicastOnPremAuthenticationSettingsErrors;
            hostHeader: string;
            secretToken: string;
        }

        export interface APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentials {
            apiKey?: outputs.capabilities.v1alpha1.APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentialsApiKey;
            appID?: outputs.capabilities.v1alpha1.APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentialsAppID;
            openIDConnector?: outputs.capabilities.v1alpha1.APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentialsOpenIDConnector;
        }

        export interface APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentialsApiKey {
            authParameterName: string;
            credentialsLocation: string;
        }

        export interface APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentialsAppID {
            appIDParameterName: string;
            appKeyParameterName: string;
            credentialsLocation: string;
        }

        export interface APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentialsOpenIDConnector {
            credentialsLocation: string;
            issuer: string;
        }

        export interface APISpecIntegrationMethodApicastOnPremAuthenticationSettingsErrors {
            authenticationFailed: outputs.capabilities.v1alpha1.APISpecIntegrationMethodApicastOnPremAuthenticationSettingsErrorsAuthenticationFailed;
            authenticationMissing: outputs.capabilities.v1alpha1.APISpecIntegrationMethodApicastOnPremAuthenticationSettingsErrorsAuthenticationMissing;
        }

        export interface APISpecIntegrationMethodApicastOnPremAuthenticationSettingsErrorsAuthenticationFailed {
            contentType: string;
            responseBody: string;
            responseCode: number;
        }

        export interface APISpecIntegrationMethodApicastOnPremAuthenticationSettingsErrorsAuthenticationMissing {
            contentType: string;
            responseBody: string;
            responseCode: number;
        }

        export interface APISpecIntegrationMethodApicastOnPremMappingRulesSelector {
            matchExpressions?: any[];
            matchLabels?: {[key: string]: any};
        }

        export interface APISpecIntegrationMethodApicastOnPremPoliciesSelector {
            matchExpressions?: any[];
            matchLabels?: {[key: string]: any};
        }

        export interface APISpecIntegrationMethodCodePlugin {
            authenticationSettings: outputs.capabilities.v1alpha1.APISpecIntegrationMethodCodePluginAuthenticationSettings;
        }

        export interface APISpecIntegrationMethodCodePluginAuthenticationSettings {
            credentials: outputs.capabilities.v1alpha1.APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentials;
        }

        export interface APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentials {
            apiKey?: outputs.capabilities.v1alpha1.APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentialsApiKey;
            appID?: outputs.capabilities.v1alpha1.APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentialsAppID;
            openIDConnector?: outputs.capabilities.v1alpha1.APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentialsOpenIDConnector;
        }

        export interface APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentialsApiKey {
            authParameterName: string;
            credentialsLocation: string;
        }

        export interface APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentialsAppID {
            appIDParameterName: string;
            appKeyParameterName: string;
            credentialsLocation: string;
        }

        export interface APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentialsOpenIDConnector {
            credentialsLocation: string;
            issuer: string;
        }

        export interface APISpecMetricSelector {
            matchExpressions?: any[];
            matchLabels?: {[key: string]: any};
        }

        export interface APISpecPlanSelector {
            matchExpressions?: any[];
            matchLabels?: {[key: string]: any};
        }

        export interface BindingSpec {
            apiSelector?: outputs.capabilities.v1alpha1.BindingSpecApiSelector;
            credentialsRef: outputs.capabilities.v1alpha1.BindingSpecCredentialsRef;
        }

        export interface BindingSpecApiSelector {
            matchExpressions?: any[];
            matchLabels?: {[key: string]: any};
        }

        export interface BindingSpecCredentialsRef {
            name?: string;
            namespace?: string;
        }

        export interface BindingStatus {
            currentState?: string;
            desiredState?: string;
            lastSync?: outputs.capabilities.v1alpha1.BindingStatusLastSync;
            previousState?: string;
        }

        export interface BindingStatusLastSync {
            nanos?: number;
            seconds?: number;
        }

        export interface LimitSpec {
            maxValue: number;
            metricRef: outputs.capabilities.v1alpha1.LimitSpecMetricRef;
            period: string;
        }

        export interface LimitSpecMetricRef {
            apiVersion?: string;
            fieldPath?: string;
            kind?: string;
            name?: string;
            namespace?: string;
            resourceVersion?: string;
            uid?: string;
        }

        export interface MappingRuleSpec {
            increment: number;
            method: string;
            metricRef: outputs.capabilities.v1alpha1.MappingRuleSpecMetricRef;
            path: string;
        }

        export interface MappingRuleSpecMetricRef {
            apiVersion?: string;
            fieldPath?: string;
            kind?: string;
            name?: string;
            namespace?: string;
            resourceVersion?: string;
            uid?: string;
        }

        export interface MetricSpec {
            description: string;
            incrementHits: boolean;
            unit: string;
        }

        export interface PlanSpec {
            approvalRequired: boolean;
            costs?: outputs.capabilities.v1alpha1.PlanSpecCosts;
            default: boolean;
            limitSelector: outputs.capabilities.v1alpha1.PlanSpecLimitSelector;
            trialPeriod: number;
        }

        export interface PlanSpecCosts {
            costMonth?: number;
            setupFee?: number;
        }

        export interface PlanSpecLimitSelector {
            matchExpressions?: any[];
            matchLabels?: {[key: string]: any};
        }

        export interface TenantSpec {
            email: string;
            masterCredentialsRef: outputs.capabilities.v1alpha1.TenantSpecMasterCredentialsRef;
            organizationName: string;
            passwordCredentialsRef: outputs.capabilities.v1alpha1.TenantSpecPasswordCredentialsRef;
            systemMasterUrl: string;
            tenantSecretRef: outputs.capabilities.v1alpha1.TenantSpecTenantSecretRef;
            username: string;
        }

        export interface TenantSpecMasterCredentialsRef {
            name?: string;
            namespace?: string;
        }

        export interface TenantSpecPasswordCredentialsRef {
            name?: string;
            namespace?: string;
        }

        export interface TenantSpecTenantSecretRef {
            name?: string;
            namespace?: string;
        }

        export interface TenantStatus {
            adminId: number;
            tenantId: number;
        }
    }
}

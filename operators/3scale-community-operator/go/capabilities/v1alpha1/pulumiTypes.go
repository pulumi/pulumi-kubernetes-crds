// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Tenant is the Schema for the tenants API
type TenantType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// TenantSpec defines the desired state of Tenant
	Spec *TenantSpec `pulumi:"spec"`
	// TenantStatus defines the observed state of Tenant
	Status *TenantStatus `pulumi:"status"`
}

// TenantTypeInput is an input type that accepts TenantTypeArgs and TenantTypeOutput values.
// You can construct a concrete instance of `TenantTypeInput` via:
//
//          TenantTypeArgs{...}
type TenantTypeInput interface {
	pulumi.Input

	ToTenantTypeOutput() TenantTypeOutput
	ToTenantTypeOutputWithContext(context.Context) TenantTypeOutput
}

// Tenant is the Schema for the tenants API
type TenantTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// TenantSpec defines the desired state of Tenant
	Spec TenantSpecPtrInput `pulumi:"spec"`
	// TenantStatus defines the observed state of Tenant
	Status TenantStatusPtrInput `pulumi:"status"`
}

func (TenantTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TenantType)(nil)).Elem()
}

func (i TenantTypeArgs) ToTenantTypeOutput() TenantTypeOutput {
	return i.ToTenantTypeOutputWithContext(context.Background())
}

func (i TenantTypeArgs) ToTenantTypeOutputWithContext(ctx context.Context) TenantTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantTypeOutput)
}

// Tenant is the Schema for the tenants API
type TenantTypeOutput struct{ *pulumi.OutputState }

func (TenantTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TenantType)(nil)).Elem()
}

func (o TenantTypeOutput) ToTenantTypeOutput() TenantTypeOutput {
	return o
}

func (o TenantTypeOutput) ToTenantTypeOutputWithContext(ctx context.Context) TenantTypeOutput {
	return o
}

func (o TenantTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TenantType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o TenantTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TenantType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o TenantTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v TenantType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// TenantSpec defines the desired state of Tenant
func (o TenantTypeOutput) Spec() TenantSpecPtrOutput {
	return o.ApplyT(func(v TenantType) *TenantSpec { return v.Spec }).(TenantSpecPtrOutput)
}

// TenantStatus defines the observed state of Tenant
func (o TenantTypeOutput) Status() TenantStatusPtrOutput {
	return o.ApplyT(func(v TenantType) *TenantStatus { return v.Status }).(TenantStatusPtrOutput)
}

type TenantMetadata struct {
}

// TenantMetadataInput is an input type that accepts TenantMetadataArgs and TenantMetadataOutput values.
// You can construct a concrete instance of `TenantMetadataInput` via:
//
//          TenantMetadataArgs{...}
type TenantMetadataInput interface {
	pulumi.Input

	ToTenantMetadataOutput() TenantMetadataOutput
	ToTenantMetadataOutputWithContext(context.Context) TenantMetadataOutput
}

type TenantMetadataArgs struct {
}

func (TenantMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TenantMetadata)(nil)).Elem()
}

func (i TenantMetadataArgs) ToTenantMetadataOutput() TenantMetadataOutput {
	return i.ToTenantMetadataOutputWithContext(context.Background())
}

func (i TenantMetadataArgs) ToTenantMetadataOutputWithContext(ctx context.Context) TenantMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantMetadataOutput)
}

type TenantMetadataOutput struct{ *pulumi.OutputState }

func (TenantMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TenantMetadata)(nil)).Elem()
}

func (o TenantMetadataOutput) ToTenantMetadataOutput() TenantMetadataOutput {
	return o
}

func (o TenantMetadataOutput) ToTenantMetadataOutputWithContext(ctx context.Context) TenantMetadataOutput {
	return o
}

// TenantSpec defines the desired state of Tenant
type TenantSpec struct {
	Email string `pulumi:"email"`
	// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
	MasterCredentialsRef TenantSpecMasterCredentialsRef `pulumi:"masterCredentialsRef"`
	OrganizationName     string                         `pulumi:"organizationName"`
	// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
	PasswordCredentialsRef TenantSpecPasswordCredentialsRef `pulumi:"passwordCredentialsRef"`
	SystemMasterUrl        string                           `pulumi:"systemMasterUrl"`
	// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
	TenantSecretRef TenantSpecTenantSecretRef `pulumi:"tenantSecretRef"`
	Username        string                    `pulumi:"username"`
}

// TenantSpecInput is an input type that accepts TenantSpecArgs and TenantSpecOutput values.
// You can construct a concrete instance of `TenantSpecInput` via:
//
//          TenantSpecArgs{...}
type TenantSpecInput interface {
	pulumi.Input

	ToTenantSpecOutput() TenantSpecOutput
	ToTenantSpecOutputWithContext(context.Context) TenantSpecOutput
}

// TenantSpec defines the desired state of Tenant
type TenantSpecArgs struct {
	Email pulumi.StringInput `pulumi:"email"`
	// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
	MasterCredentialsRef TenantSpecMasterCredentialsRefInput `pulumi:"masterCredentialsRef"`
	OrganizationName     pulumi.StringInput                  `pulumi:"organizationName"`
	// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
	PasswordCredentialsRef TenantSpecPasswordCredentialsRefInput `pulumi:"passwordCredentialsRef"`
	SystemMasterUrl        pulumi.StringInput                    `pulumi:"systemMasterUrl"`
	// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
	TenantSecretRef TenantSpecTenantSecretRefInput `pulumi:"tenantSecretRef"`
	Username        pulumi.StringInput             `pulumi:"username"`
}

func (TenantSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TenantSpec)(nil)).Elem()
}

func (i TenantSpecArgs) ToTenantSpecOutput() TenantSpecOutput {
	return i.ToTenantSpecOutputWithContext(context.Background())
}

func (i TenantSpecArgs) ToTenantSpecOutputWithContext(ctx context.Context) TenantSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantSpecOutput)
}

func (i TenantSpecArgs) ToTenantSpecPtrOutput() TenantSpecPtrOutput {
	return i.ToTenantSpecPtrOutputWithContext(context.Background())
}

func (i TenantSpecArgs) ToTenantSpecPtrOutputWithContext(ctx context.Context) TenantSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantSpecOutput).ToTenantSpecPtrOutputWithContext(ctx)
}

// TenantSpecPtrInput is an input type that accepts TenantSpecArgs, TenantSpecPtr and TenantSpecPtrOutput values.
// You can construct a concrete instance of `TenantSpecPtrInput` via:
//
//          TenantSpecArgs{...}
//
//  or:
//
//          nil
type TenantSpecPtrInput interface {
	pulumi.Input

	ToTenantSpecPtrOutput() TenantSpecPtrOutput
	ToTenantSpecPtrOutputWithContext(context.Context) TenantSpecPtrOutput
}

type tenantSpecPtrType TenantSpecArgs

func TenantSpecPtr(v *TenantSpecArgs) TenantSpecPtrInput {
	return (*tenantSpecPtrType)(v)
}

func (*tenantSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TenantSpec)(nil)).Elem()
}

func (i *tenantSpecPtrType) ToTenantSpecPtrOutput() TenantSpecPtrOutput {
	return i.ToTenantSpecPtrOutputWithContext(context.Background())
}

func (i *tenantSpecPtrType) ToTenantSpecPtrOutputWithContext(ctx context.Context) TenantSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantSpecPtrOutput)
}

// TenantSpec defines the desired state of Tenant
type TenantSpecOutput struct{ *pulumi.OutputState }

func (TenantSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TenantSpec)(nil)).Elem()
}

func (o TenantSpecOutput) ToTenantSpecOutput() TenantSpecOutput {
	return o
}

func (o TenantSpecOutput) ToTenantSpecOutputWithContext(ctx context.Context) TenantSpecOutput {
	return o
}

func (o TenantSpecOutput) ToTenantSpecPtrOutput() TenantSpecPtrOutput {
	return o.ToTenantSpecPtrOutputWithContext(context.Background())
}

func (o TenantSpecOutput) ToTenantSpecPtrOutputWithContext(ctx context.Context) TenantSpecPtrOutput {
	return o.ApplyT(func(v TenantSpec) *TenantSpec {
		return &v
	}).(TenantSpecPtrOutput)
}
func (o TenantSpecOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v TenantSpec) string { return v.Email }).(pulumi.StringOutput)
}

// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
func (o TenantSpecOutput) MasterCredentialsRef() TenantSpecMasterCredentialsRefOutput {
	return o.ApplyT(func(v TenantSpec) TenantSpecMasterCredentialsRef { return v.MasterCredentialsRef }).(TenantSpecMasterCredentialsRefOutput)
}

func (o TenantSpecOutput) OrganizationName() pulumi.StringOutput {
	return o.ApplyT(func(v TenantSpec) string { return v.OrganizationName }).(pulumi.StringOutput)
}

// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
func (o TenantSpecOutput) PasswordCredentialsRef() TenantSpecPasswordCredentialsRefOutput {
	return o.ApplyT(func(v TenantSpec) TenantSpecPasswordCredentialsRef { return v.PasswordCredentialsRef }).(TenantSpecPasswordCredentialsRefOutput)
}

func (o TenantSpecOutput) SystemMasterUrl() pulumi.StringOutput {
	return o.ApplyT(func(v TenantSpec) string { return v.SystemMasterUrl }).(pulumi.StringOutput)
}

// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
func (o TenantSpecOutput) TenantSecretRef() TenantSpecTenantSecretRefOutput {
	return o.ApplyT(func(v TenantSpec) TenantSpecTenantSecretRef { return v.TenantSecretRef }).(TenantSpecTenantSecretRefOutput)
}

func (o TenantSpecOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v TenantSpec) string { return v.Username }).(pulumi.StringOutput)
}

type TenantSpecPtrOutput struct{ *pulumi.OutputState }

func (TenantSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TenantSpec)(nil)).Elem()
}

func (o TenantSpecPtrOutput) ToTenantSpecPtrOutput() TenantSpecPtrOutput {
	return o
}

func (o TenantSpecPtrOutput) ToTenantSpecPtrOutputWithContext(ctx context.Context) TenantSpecPtrOutput {
	return o
}

func (o TenantSpecPtrOutput) Elem() TenantSpecOutput {
	return o.ApplyT(func(v *TenantSpec) TenantSpec { return *v }).(TenantSpecOutput)
}

func (o TenantSpecPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TenantSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Email
	}).(pulumi.StringPtrOutput)
}

// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
func (o TenantSpecPtrOutput) MasterCredentialsRef() TenantSpecMasterCredentialsRefPtrOutput {
	return o.ApplyT(func(v *TenantSpec) *TenantSpecMasterCredentialsRef {
		if v == nil {
			return nil
		}
		return &v.MasterCredentialsRef
	}).(TenantSpecMasterCredentialsRefPtrOutput)
}

func (o TenantSpecPtrOutput) OrganizationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TenantSpec) *string {
		if v == nil {
			return nil
		}
		return &v.OrganizationName
	}).(pulumi.StringPtrOutput)
}

// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
func (o TenantSpecPtrOutput) PasswordCredentialsRef() TenantSpecPasswordCredentialsRefPtrOutput {
	return o.ApplyT(func(v *TenantSpec) *TenantSpecPasswordCredentialsRef {
		if v == nil {
			return nil
		}
		return &v.PasswordCredentialsRef
	}).(TenantSpecPasswordCredentialsRefPtrOutput)
}

func (o TenantSpecPtrOutput) SystemMasterUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TenantSpec) *string {
		if v == nil {
			return nil
		}
		return &v.SystemMasterUrl
	}).(pulumi.StringPtrOutput)
}

// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
func (o TenantSpecPtrOutput) TenantSecretRef() TenantSpecTenantSecretRefPtrOutput {
	return o.ApplyT(func(v *TenantSpec) *TenantSpecTenantSecretRef {
		if v == nil {
			return nil
		}
		return &v.TenantSecretRef
	}).(TenantSpecTenantSecretRefPtrOutput)
}

func (o TenantSpecPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TenantSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
type TenantSpecMasterCredentialsRef struct {
	// Name is unique within a namespace to reference a secret resource.
	Name *string `pulumi:"name"`
	// Namespace defines the space within which the secret name must be unique.
	Namespace *string `pulumi:"namespace"`
}

// TenantSpecMasterCredentialsRefInput is an input type that accepts TenantSpecMasterCredentialsRefArgs and TenantSpecMasterCredentialsRefOutput values.
// You can construct a concrete instance of `TenantSpecMasterCredentialsRefInput` via:
//
//          TenantSpecMasterCredentialsRefArgs{...}
type TenantSpecMasterCredentialsRefInput interface {
	pulumi.Input

	ToTenantSpecMasterCredentialsRefOutput() TenantSpecMasterCredentialsRefOutput
	ToTenantSpecMasterCredentialsRefOutputWithContext(context.Context) TenantSpecMasterCredentialsRefOutput
}

// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
type TenantSpecMasterCredentialsRefArgs struct {
	// Name is unique within a namespace to reference a secret resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace defines the space within which the secret name must be unique.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (TenantSpecMasterCredentialsRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TenantSpecMasterCredentialsRef)(nil)).Elem()
}

func (i TenantSpecMasterCredentialsRefArgs) ToTenantSpecMasterCredentialsRefOutput() TenantSpecMasterCredentialsRefOutput {
	return i.ToTenantSpecMasterCredentialsRefOutputWithContext(context.Background())
}

func (i TenantSpecMasterCredentialsRefArgs) ToTenantSpecMasterCredentialsRefOutputWithContext(ctx context.Context) TenantSpecMasterCredentialsRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantSpecMasterCredentialsRefOutput)
}

func (i TenantSpecMasterCredentialsRefArgs) ToTenantSpecMasterCredentialsRefPtrOutput() TenantSpecMasterCredentialsRefPtrOutput {
	return i.ToTenantSpecMasterCredentialsRefPtrOutputWithContext(context.Background())
}

func (i TenantSpecMasterCredentialsRefArgs) ToTenantSpecMasterCredentialsRefPtrOutputWithContext(ctx context.Context) TenantSpecMasterCredentialsRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantSpecMasterCredentialsRefOutput).ToTenantSpecMasterCredentialsRefPtrOutputWithContext(ctx)
}

// TenantSpecMasterCredentialsRefPtrInput is an input type that accepts TenantSpecMasterCredentialsRefArgs, TenantSpecMasterCredentialsRefPtr and TenantSpecMasterCredentialsRefPtrOutput values.
// You can construct a concrete instance of `TenantSpecMasterCredentialsRefPtrInput` via:
//
//          TenantSpecMasterCredentialsRefArgs{...}
//
//  or:
//
//          nil
type TenantSpecMasterCredentialsRefPtrInput interface {
	pulumi.Input

	ToTenantSpecMasterCredentialsRefPtrOutput() TenantSpecMasterCredentialsRefPtrOutput
	ToTenantSpecMasterCredentialsRefPtrOutputWithContext(context.Context) TenantSpecMasterCredentialsRefPtrOutput
}

type tenantSpecMasterCredentialsRefPtrType TenantSpecMasterCredentialsRefArgs

func TenantSpecMasterCredentialsRefPtr(v *TenantSpecMasterCredentialsRefArgs) TenantSpecMasterCredentialsRefPtrInput {
	return (*tenantSpecMasterCredentialsRefPtrType)(v)
}

func (*tenantSpecMasterCredentialsRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TenantSpecMasterCredentialsRef)(nil)).Elem()
}

func (i *tenantSpecMasterCredentialsRefPtrType) ToTenantSpecMasterCredentialsRefPtrOutput() TenantSpecMasterCredentialsRefPtrOutput {
	return i.ToTenantSpecMasterCredentialsRefPtrOutputWithContext(context.Background())
}

func (i *tenantSpecMasterCredentialsRefPtrType) ToTenantSpecMasterCredentialsRefPtrOutputWithContext(ctx context.Context) TenantSpecMasterCredentialsRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantSpecMasterCredentialsRefPtrOutput)
}

// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
type TenantSpecMasterCredentialsRefOutput struct{ *pulumi.OutputState }

func (TenantSpecMasterCredentialsRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TenantSpecMasterCredentialsRef)(nil)).Elem()
}

func (o TenantSpecMasterCredentialsRefOutput) ToTenantSpecMasterCredentialsRefOutput() TenantSpecMasterCredentialsRefOutput {
	return o
}

func (o TenantSpecMasterCredentialsRefOutput) ToTenantSpecMasterCredentialsRefOutputWithContext(ctx context.Context) TenantSpecMasterCredentialsRefOutput {
	return o
}

func (o TenantSpecMasterCredentialsRefOutput) ToTenantSpecMasterCredentialsRefPtrOutput() TenantSpecMasterCredentialsRefPtrOutput {
	return o.ToTenantSpecMasterCredentialsRefPtrOutputWithContext(context.Background())
}

func (o TenantSpecMasterCredentialsRefOutput) ToTenantSpecMasterCredentialsRefPtrOutputWithContext(ctx context.Context) TenantSpecMasterCredentialsRefPtrOutput {
	return o.ApplyT(func(v TenantSpecMasterCredentialsRef) *TenantSpecMasterCredentialsRef {
		return &v
	}).(TenantSpecMasterCredentialsRefPtrOutput)
}

// Name is unique within a namespace to reference a secret resource.
func (o TenantSpecMasterCredentialsRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TenantSpecMasterCredentialsRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace defines the space within which the secret name must be unique.
func (o TenantSpecMasterCredentialsRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TenantSpecMasterCredentialsRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type TenantSpecMasterCredentialsRefPtrOutput struct{ *pulumi.OutputState }

func (TenantSpecMasterCredentialsRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TenantSpecMasterCredentialsRef)(nil)).Elem()
}

func (o TenantSpecMasterCredentialsRefPtrOutput) ToTenantSpecMasterCredentialsRefPtrOutput() TenantSpecMasterCredentialsRefPtrOutput {
	return o
}

func (o TenantSpecMasterCredentialsRefPtrOutput) ToTenantSpecMasterCredentialsRefPtrOutputWithContext(ctx context.Context) TenantSpecMasterCredentialsRefPtrOutput {
	return o
}

func (o TenantSpecMasterCredentialsRefPtrOutput) Elem() TenantSpecMasterCredentialsRefOutput {
	return o.ApplyT(func(v *TenantSpecMasterCredentialsRef) TenantSpecMasterCredentialsRef { return *v }).(TenantSpecMasterCredentialsRefOutput)
}

// Name is unique within a namespace to reference a secret resource.
func (o TenantSpecMasterCredentialsRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TenantSpecMasterCredentialsRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace defines the space within which the secret name must be unique.
func (o TenantSpecMasterCredentialsRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TenantSpecMasterCredentialsRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
type TenantSpecPasswordCredentialsRef struct {
	// Name is unique within a namespace to reference a secret resource.
	Name *string `pulumi:"name"`
	// Namespace defines the space within which the secret name must be unique.
	Namespace *string `pulumi:"namespace"`
}

// TenantSpecPasswordCredentialsRefInput is an input type that accepts TenantSpecPasswordCredentialsRefArgs and TenantSpecPasswordCredentialsRefOutput values.
// You can construct a concrete instance of `TenantSpecPasswordCredentialsRefInput` via:
//
//          TenantSpecPasswordCredentialsRefArgs{...}
type TenantSpecPasswordCredentialsRefInput interface {
	pulumi.Input

	ToTenantSpecPasswordCredentialsRefOutput() TenantSpecPasswordCredentialsRefOutput
	ToTenantSpecPasswordCredentialsRefOutputWithContext(context.Context) TenantSpecPasswordCredentialsRefOutput
}

// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
type TenantSpecPasswordCredentialsRefArgs struct {
	// Name is unique within a namespace to reference a secret resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace defines the space within which the secret name must be unique.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (TenantSpecPasswordCredentialsRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TenantSpecPasswordCredentialsRef)(nil)).Elem()
}

func (i TenantSpecPasswordCredentialsRefArgs) ToTenantSpecPasswordCredentialsRefOutput() TenantSpecPasswordCredentialsRefOutput {
	return i.ToTenantSpecPasswordCredentialsRefOutputWithContext(context.Background())
}

func (i TenantSpecPasswordCredentialsRefArgs) ToTenantSpecPasswordCredentialsRefOutputWithContext(ctx context.Context) TenantSpecPasswordCredentialsRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantSpecPasswordCredentialsRefOutput)
}

func (i TenantSpecPasswordCredentialsRefArgs) ToTenantSpecPasswordCredentialsRefPtrOutput() TenantSpecPasswordCredentialsRefPtrOutput {
	return i.ToTenantSpecPasswordCredentialsRefPtrOutputWithContext(context.Background())
}

func (i TenantSpecPasswordCredentialsRefArgs) ToTenantSpecPasswordCredentialsRefPtrOutputWithContext(ctx context.Context) TenantSpecPasswordCredentialsRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantSpecPasswordCredentialsRefOutput).ToTenantSpecPasswordCredentialsRefPtrOutputWithContext(ctx)
}

// TenantSpecPasswordCredentialsRefPtrInput is an input type that accepts TenantSpecPasswordCredentialsRefArgs, TenantSpecPasswordCredentialsRefPtr and TenantSpecPasswordCredentialsRefPtrOutput values.
// You can construct a concrete instance of `TenantSpecPasswordCredentialsRefPtrInput` via:
//
//          TenantSpecPasswordCredentialsRefArgs{...}
//
//  or:
//
//          nil
type TenantSpecPasswordCredentialsRefPtrInput interface {
	pulumi.Input

	ToTenantSpecPasswordCredentialsRefPtrOutput() TenantSpecPasswordCredentialsRefPtrOutput
	ToTenantSpecPasswordCredentialsRefPtrOutputWithContext(context.Context) TenantSpecPasswordCredentialsRefPtrOutput
}

type tenantSpecPasswordCredentialsRefPtrType TenantSpecPasswordCredentialsRefArgs

func TenantSpecPasswordCredentialsRefPtr(v *TenantSpecPasswordCredentialsRefArgs) TenantSpecPasswordCredentialsRefPtrInput {
	return (*tenantSpecPasswordCredentialsRefPtrType)(v)
}

func (*tenantSpecPasswordCredentialsRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TenantSpecPasswordCredentialsRef)(nil)).Elem()
}

func (i *tenantSpecPasswordCredentialsRefPtrType) ToTenantSpecPasswordCredentialsRefPtrOutput() TenantSpecPasswordCredentialsRefPtrOutput {
	return i.ToTenantSpecPasswordCredentialsRefPtrOutputWithContext(context.Background())
}

func (i *tenantSpecPasswordCredentialsRefPtrType) ToTenantSpecPasswordCredentialsRefPtrOutputWithContext(ctx context.Context) TenantSpecPasswordCredentialsRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantSpecPasswordCredentialsRefPtrOutput)
}

// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
type TenantSpecPasswordCredentialsRefOutput struct{ *pulumi.OutputState }

func (TenantSpecPasswordCredentialsRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TenantSpecPasswordCredentialsRef)(nil)).Elem()
}

func (o TenantSpecPasswordCredentialsRefOutput) ToTenantSpecPasswordCredentialsRefOutput() TenantSpecPasswordCredentialsRefOutput {
	return o
}

func (o TenantSpecPasswordCredentialsRefOutput) ToTenantSpecPasswordCredentialsRefOutputWithContext(ctx context.Context) TenantSpecPasswordCredentialsRefOutput {
	return o
}

func (o TenantSpecPasswordCredentialsRefOutput) ToTenantSpecPasswordCredentialsRefPtrOutput() TenantSpecPasswordCredentialsRefPtrOutput {
	return o.ToTenantSpecPasswordCredentialsRefPtrOutputWithContext(context.Background())
}

func (o TenantSpecPasswordCredentialsRefOutput) ToTenantSpecPasswordCredentialsRefPtrOutputWithContext(ctx context.Context) TenantSpecPasswordCredentialsRefPtrOutput {
	return o.ApplyT(func(v TenantSpecPasswordCredentialsRef) *TenantSpecPasswordCredentialsRef {
		return &v
	}).(TenantSpecPasswordCredentialsRefPtrOutput)
}

// Name is unique within a namespace to reference a secret resource.
func (o TenantSpecPasswordCredentialsRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TenantSpecPasswordCredentialsRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace defines the space within which the secret name must be unique.
func (o TenantSpecPasswordCredentialsRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TenantSpecPasswordCredentialsRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type TenantSpecPasswordCredentialsRefPtrOutput struct{ *pulumi.OutputState }

func (TenantSpecPasswordCredentialsRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TenantSpecPasswordCredentialsRef)(nil)).Elem()
}

func (o TenantSpecPasswordCredentialsRefPtrOutput) ToTenantSpecPasswordCredentialsRefPtrOutput() TenantSpecPasswordCredentialsRefPtrOutput {
	return o
}

func (o TenantSpecPasswordCredentialsRefPtrOutput) ToTenantSpecPasswordCredentialsRefPtrOutputWithContext(ctx context.Context) TenantSpecPasswordCredentialsRefPtrOutput {
	return o
}

func (o TenantSpecPasswordCredentialsRefPtrOutput) Elem() TenantSpecPasswordCredentialsRefOutput {
	return o.ApplyT(func(v *TenantSpecPasswordCredentialsRef) TenantSpecPasswordCredentialsRef { return *v }).(TenantSpecPasswordCredentialsRefOutput)
}

// Name is unique within a namespace to reference a secret resource.
func (o TenantSpecPasswordCredentialsRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TenantSpecPasswordCredentialsRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace defines the space within which the secret name must be unique.
func (o TenantSpecPasswordCredentialsRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TenantSpecPasswordCredentialsRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
type TenantSpecTenantSecretRef struct {
	// Name is unique within a namespace to reference a secret resource.
	Name *string `pulumi:"name"`
	// Namespace defines the space within which the secret name must be unique.
	Namespace *string `pulumi:"namespace"`
}

// TenantSpecTenantSecretRefInput is an input type that accepts TenantSpecTenantSecretRefArgs and TenantSpecTenantSecretRefOutput values.
// You can construct a concrete instance of `TenantSpecTenantSecretRefInput` via:
//
//          TenantSpecTenantSecretRefArgs{...}
type TenantSpecTenantSecretRefInput interface {
	pulumi.Input

	ToTenantSpecTenantSecretRefOutput() TenantSpecTenantSecretRefOutput
	ToTenantSpecTenantSecretRefOutputWithContext(context.Context) TenantSpecTenantSecretRefOutput
}

// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
type TenantSpecTenantSecretRefArgs struct {
	// Name is unique within a namespace to reference a secret resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace defines the space within which the secret name must be unique.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (TenantSpecTenantSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TenantSpecTenantSecretRef)(nil)).Elem()
}

func (i TenantSpecTenantSecretRefArgs) ToTenantSpecTenantSecretRefOutput() TenantSpecTenantSecretRefOutput {
	return i.ToTenantSpecTenantSecretRefOutputWithContext(context.Background())
}

func (i TenantSpecTenantSecretRefArgs) ToTenantSpecTenantSecretRefOutputWithContext(ctx context.Context) TenantSpecTenantSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantSpecTenantSecretRefOutput)
}

func (i TenantSpecTenantSecretRefArgs) ToTenantSpecTenantSecretRefPtrOutput() TenantSpecTenantSecretRefPtrOutput {
	return i.ToTenantSpecTenantSecretRefPtrOutputWithContext(context.Background())
}

func (i TenantSpecTenantSecretRefArgs) ToTenantSpecTenantSecretRefPtrOutputWithContext(ctx context.Context) TenantSpecTenantSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantSpecTenantSecretRefOutput).ToTenantSpecTenantSecretRefPtrOutputWithContext(ctx)
}

// TenantSpecTenantSecretRefPtrInput is an input type that accepts TenantSpecTenantSecretRefArgs, TenantSpecTenantSecretRefPtr and TenantSpecTenantSecretRefPtrOutput values.
// You can construct a concrete instance of `TenantSpecTenantSecretRefPtrInput` via:
//
//          TenantSpecTenantSecretRefArgs{...}
//
//  or:
//
//          nil
type TenantSpecTenantSecretRefPtrInput interface {
	pulumi.Input

	ToTenantSpecTenantSecretRefPtrOutput() TenantSpecTenantSecretRefPtrOutput
	ToTenantSpecTenantSecretRefPtrOutputWithContext(context.Context) TenantSpecTenantSecretRefPtrOutput
}

type tenantSpecTenantSecretRefPtrType TenantSpecTenantSecretRefArgs

func TenantSpecTenantSecretRefPtr(v *TenantSpecTenantSecretRefArgs) TenantSpecTenantSecretRefPtrInput {
	return (*tenantSpecTenantSecretRefPtrType)(v)
}

func (*tenantSpecTenantSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TenantSpecTenantSecretRef)(nil)).Elem()
}

func (i *tenantSpecTenantSecretRefPtrType) ToTenantSpecTenantSecretRefPtrOutput() TenantSpecTenantSecretRefPtrOutput {
	return i.ToTenantSpecTenantSecretRefPtrOutputWithContext(context.Background())
}

func (i *tenantSpecTenantSecretRefPtrType) ToTenantSpecTenantSecretRefPtrOutputWithContext(ctx context.Context) TenantSpecTenantSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantSpecTenantSecretRefPtrOutput)
}

// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
type TenantSpecTenantSecretRefOutput struct{ *pulumi.OutputState }

func (TenantSpecTenantSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TenantSpecTenantSecretRef)(nil)).Elem()
}

func (o TenantSpecTenantSecretRefOutput) ToTenantSpecTenantSecretRefOutput() TenantSpecTenantSecretRefOutput {
	return o
}

func (o TenantSpecTenantSecretRefOutput) ToTenantSpecTenantSecretRefOutputWithContext(ctx context.Context) TenantSpecTenantSecretRefOutput {
	return o
}

func (o TenantSpecTenantSecretRefOutput) ToTenantSpecTenantSecretRefPtrOutput() TenantSpecTenantSecretRefPtrOutput {
	return o.ToTenantSpecTenantSecretRefPtrOutputWithContext(context.Background())
}

func (o TenantSpecTenantSecretRefOutput) ToTenantSpecTenantSecretRefPtrOutputWithContext(ctx context.Context) TenantSpecTenantSecretRefPtrOutput {
	return o.ApplyT(func(v TenantSpecTenantSecretRef) *TenantSpecTenantSecretRef {
		return &v
	}).(TenantSpecTenantSecretRefPtrOutput)
}

// Name is unique within a namespace to reference a secret resource.
func (o TenantSpecTenantSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TenantSpecTenantSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace defines the space within which the secret name must be unique.
func (o TenantSpecTenantSecretRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TenantSpecTenantSecretRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type TenantSpecTenantSecretRefPtrOutput struct{ *pulumi.OutputState }

func (TenantSpecTenantSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TenantSpecTenantSecretRef)(nil)).Elem()
}

func (o TenantSpecTenantSecretRefPtrOutput) ToTenantSpecTenantSecretRefPtrOutput() TenantSpecTenantSecretRefPtrOutput {
	return o
}

func (o TenantSpecTenantSecretRefPtrOutput) ToTenantSpecTenantSecretRefPtrOutputWithContext(ctx context.Context) TenantSpecTenantSecretRefPtrOutput {
	return o
}

func (o TenantSpecTenantSecretRefPtrOutput) Elem() TenantSpecTenantSecretRefOutput {
	return o.ApplyT(func(v *TenantSpecTenantSecretRef) TenantSpecTenantSecretRef { return *v }).(TenantSpecTenantSecretRefOutput)
}

// Name is unique within a namespace to reference a secret resource.
func (o TenantSpecTenantSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TenantSpecTenantSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace defines the space within which the secret name must be unique.
func (o TenantSpecTenantSecretRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TenantSpecTenantSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// TenantStatus defines the observed state of Tenant
type TenantStatus struct {
	AdminId  int `pulumi:"adminId"`
	TenantId int `pulumi:"tenantId"`
}

// TenantStatusInput is an input type that accepts TenantStatusArgs and TenantStatusOutput values.
// You can construct a concrete instance of `TenantStatusInput` via:
//
//          TenantStatusArgs{...}
type TenantStatusInput interface {
	pulumi.Input

	ToTenantStatusOutput() TenantStatusOutput
	ToTenantStatusOutputWithContext(context.Context) TenantStatusOutput
}

// TenantStatus defines the observed state of Tenant
type TenantStatusArgs struct {
	AdminId  pulumi.IntInput `pulumi:"adminId"`
	TenantId pulumi.IntInput `pulumi:"tenantId"`
}

func (TenantStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TenantStatus)(nil)).Elem()
}

func (i TenantStatusArgs) ToTenantStatusOutput() TenantStatusOutput {
	return i.ToTenantStatusOutputWithContext(context.Background())
}

func (i TenantStatusArgs) ToTenantStatusOutputWithContext(ctx context.Context) TenantStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantStatusOutput)
}

func (i TenantStatusArgs) ToTenantStatusPtrOutput() TenantStatusPtrOutput {
	return i.ToTenantStatusPtrOutputWithContext(context.Background())
}

func (i TenantStatusArgs) ToTenantStatusPtrOutputWithContext(ctx context.Context) TenantStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantStatusOutput).ToTenantStatusPtrOutputWithContext(ctx)
}

// TenantStatusPtrInput is an input type that accepts TenantStatusArgs, TenantStatusPtr and TenantStatusPtrOutput values.
// You can construct a concrete instance of `TenantStatusPtrInput` via:
//
//          TenantStatusArgs{...}
//
//  or:
//
//          nil
type TenantStatusPtrInput interface {
	pulumi.Input

	ToTenantStatusPtrOutput() TenantStatusPtrOutput
	ToTenantStatusPtrOutputWithContext(context.Context) TenantStatusPtrOutput
}

type tenantStatusPtrType TenantStatusArgs

func TenantStatusPtr(v *TenantStatusArgs) TenantStatusPtrInput {
	return (*tenantStatusPtrType)(v)
}

func (*tenantStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TenantStatus)(nil)).Elem()
}

func (i *tenantStatusPtrType) ToTenantStatusPtrOutput() TenantStatusPtrOutput {
	return i.ToTenantStatusPtrOutputWithContext(context.Background())
}

func (i *tenantStatusPtrType) ToTenantStatusPtrOutputWithContext(ctx context.Context) TenantStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TenantStatusPtrOutput)
}

// TenantStatus defines the observed state of Tenant
type TenantStatusOutput struct{ *pulumi.OutputState }

func (TenantStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TenantStatus)(nil)).Elem()
}

func (o TenantStatusOutput) ToTenantStatusOutput() TenantStatusOutput {
	return o
}

func (o TenantStatusOutput) ToTenantStatusOutputWithContext(ctx context.Context) TenantStatusOutput {
	return o
}

func (o TenantStatusOutput) ToTenantStatusPtrOutput() TenantStatusPtrOutput {
	return o.ToTenantStatusPtrOutputWithContext(context.Background())
}

func (o TenantStatusOutput) ToTenantStatusPtrOutputWithContext(ctx context.Context) TenantStatusPtrOutput {
	return o.ApplyT(func(v TenantStatus) *TenantStatus {
		return &v
	}).(TenantStatusPtrOutput)
}
func (o TenantStatusOutput) AdminId() pulumi.IntOutput {
	return o.ApplyT(func(v TenantStatus) int { return v.AdminId }).(pulumi.IntOutput)
}

func (o TenantStatusOutput) TenantId() pulumi.IntOutput {
	return o.ApplyT(func(v TenantStatus) int { return v.TenantId }).(pulumi.IntOutput)
}

type TenantStatusPtrOutput struct{ *pulumi.OutputState }

func (TenantStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TenantStatus)(nil)).Elem()
}

func (o TenantStatusPtrOutput) ToTenantStatusPtrOutput() TenantStatusPtrOutput {
	return o
}

func (o TenantStatusPtrOutput) ToTenantStatusPtrOutputWithContext(ctx context.Context) TenantStatusPtrOutput {
	return o
}

func (o TenantStatusPtrOutput) Elem() TenantStatusOutput {
	return o.ApplyT(func(v *TenantStatus) TenantStatus { return *v }).(TenantStatusOutput)
}

func (o TenantStatusPtrOutput) AdminId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TenantStatus) *int {
		if v == nil {
			return nil
		}
		return &v.AdminId
	}).(pulumi.IntPtrOutput)
}

func (o TenantStatusPtrOutput) TenantId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TenantStatus) *int {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(TenantTypeOutput{})
	pulumi.RegisterOutputType(TenantMetadataOutput{})
	pulumi.RegisterOutputType(TenantSpecOutput{})
	pulumi.RegisterOutputType(TenantSpecPtrOutput{})
	pulumi.RegisterOutputType(TenantSpecMasterCredentialsRefOutput{})
	pulumi.RegisterOutputType(TenantSpecMasterCredentialsRefPtrOutput{})
	pulumi.RegisterOutputType(TenantSpecPasswordCredentialsRefOutput{})
	pulumi.RegisterOutputType(TenantSpecPasswordCredentialsRefPtrOutput{})
	pulumi.RegisterOutputType(TenantSpecTenantSecretRefOutput{})
	pulumi.RegisterOutputType(TenantSpecTenantSecretRefPtrOutput{})
	pulumi.RegisterOutputType(TenantStatusOutput{})
	pulumi.RegisterOutputType(TenantStatusPtrOutput{})
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Product is the Schema for the products API
type Product struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// ProductSpec defines the desired state of Product
	Spec ProductSpecPtrOutput `pulumi:"spec"`
	// ProductStatus defines the observed state of Product
	Status ProductStatusPtrOutput `pulumi:"status"`
}

// NewProduct registers a new resource with the given unique name, arguments, and options.
func NewProduct(ctx *pulumi.Context,
	name string, args *ProductArgs, opts ...pulumi.ResourceOption) (*Product, error) {
	if args == nil {
		args = &ProductArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("capabilities.3scale.net/v1beta1")
	args.Kind = pulumi.StringPtr("Product")
	var resource Product
	err := ctx.RegisterResource("kubernetes:capabilities.3scale.net/v1beta1:Product", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProduct gets an existing Product resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProduct(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProductState, opts ...pulumi.ResourceOption) (*Product, error) {
	var resource Product
	err := ctx.ReadResource("kubernetes:capabilities.3scale.net/v1beta1:Product", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Product resources.
type productState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// ProductSpec defines the desired state of Product
	Spec *ProductSpec `pulumi:"spec"`
	// ProductStatus defines the observed state of Product
	Status *ProductStatus `pulumi:"status"`
}

type ProductState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// ProductSpec defines the desired state of Product
	Spec ProductSpecPtrInput
	// ProductStatus defines the observed state of Product
	Status ProductStatusPtrInput
}

func (ProductState) ElementType() reflect.Type {
	return reflect.TypeOf((*productState)(nil)).Elem()
}

type productArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// ProductSpec defines the desired state of Product
	Spec *ProductSpec `pulumi:"spec"`
	// ProductStatus defines the observed state of Product
	Status *ProductStatus `pulumi:"status"`
}

// The set of arguments for constructing a Product resource.
type ProductArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// ProductSpec defines the desired state of Product
	Spec ProductSpecPtrInput
	// ProductStatus defines the observed state of Product
	Status ProductStatusPtrInput
}

func (ProductArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*productArgs)(nil)).Elem()
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Backend is the Schema for the backends API
type Backend struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// BackendSpec defines the desired state of Backend
	Spec BackendSpecPtrOutput `pulumi:"spec"`
	// BackendStatus defines the observed state of Backend
	Status BackendStatusPtrOutput `pulumi:"status"`
}

// NewBackend registers a new resource with the given unique name, arguments, and options.
func NewBackend(ctx *pulumi.Context,
	name string, args *BackendArgs, opts ...pulumi.ResourceOption) (*Backend, error) {
	if args == nil {
		args = &BackendArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("capabilities.3scale.net/v1beta1")
	args.Kind = pulumi.StringPtr("Backend")
	var resource Backend
	err := ctx.RegisterResource("kubernetes:capabilities.3scale.net/v1beta1:Backend", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackend gets an existing Backend resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackend(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackendState, opts ...pulumi.ResourceOption) (*Backend, error) {
	var resource Backend
	err := ctx.ReadResource("kubernetes:capabilities.3scale.net/v1beta1:Backend", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Backend resources.
type backendState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// BackendSpec defines the desired state of Backend
	Spec *BackendSpec `pulumi:"spec"`
	// BackendStatus defines the observed state of Backend
	Status *BackendStatus `pulumi:"status"`
}

type BackendState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// BackendSpec defines the desired state of Backend
	Spec BackendSpecPtrInput
	// BackendStatus defines the observed state of Backend
	Status BackendStatusPtrInput
}

func (BackendState) ElementType() reflect.Type {
	return reflect.TypeOf((*backendState)(nil)).Elem()
}

type backendArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// BackendSpec defines the desired state of Backend
	Spec *BackendSpec `pulumi:"spec"`
	// BackendStatus defines the observed state of Backend
	Status *BackendStatus `pulumi:"status"`
}

// The set of arguments for constructing a Backend resource.
type BackendArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// BackendSpec defines the desired state of Backend
	Spec BackendSpecPtrInput
	// BackendStatus defines the observed state of Backend
	Status BackendStatusPtrInput
}

func (BackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backendArgs)(nil)).Elem()
}

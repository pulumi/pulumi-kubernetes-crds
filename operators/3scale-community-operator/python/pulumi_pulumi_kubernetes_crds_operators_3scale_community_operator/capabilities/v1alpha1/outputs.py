# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'TenantSpec',
    'TenantSpecMasterCredentialsRef',
    'TenantSpecPasswordCredentialsRef',
    'TenantSpecTenantSecretRef',
    'TenantStatus',
]

@pulumi.output_type
class TenantSpec(dict):
    """
    TenantSpec defines the desired state of Tenant
    """
    def __init__(__self__, *,
                 email: str,
                 master_credentials_ref: 'outputs.TenantSpecMasterCredentialsRef',
                 organization_name: str,
                 password_credentials_ref: 'outputs.TenantSpecPasswordCredentialsRef',
                 system_master_url: str,
                 tenant_secret_ref: 'outputs.TenantSpecTenantSecretRef',
                 username: str):
        """
        TenantSpec defines the desired state of Tenant
        :param 'TenantSpecMasterCredentialsRefArgs' master_credentials_ref: SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
        :param 'TenantSpecPasswordCredentialsRefArgs' password_credentials_ref: SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
        :param 'TenantSpecTenantSecretRefArgs' tenant_secret_ref: SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
        """
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "master_credentials_ref", master_credentials_ref)
        pulumi.set(__self__, "organization_name", organization_name)
        pulumi.set(__self__, "password_credentials_ref", password_credentials_ref)
        pulumi.set(__self__, "system_master_url", system_master_url)
        pulumi.set(__self__, "tenant_secret_ref", tenant_secret_ref)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="masterCredentialsRef")
    def master_credentials_ref(self) -> 'outputs.TenantSpecMasterCredentialsRef':
        """
        SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
        """
        return pulumi.get(self, "master_credentials_ref")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> str:
        return pulumi.get(self, "organization_name")

    @property
    @pulumi.getter(name="passwordCredentialsRef")
    def password_credentials_ref(self) -> 'outputs.TenantSpecPasswordCredentialsRef':
        """
        SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
        """
        return pulumi.get(self, "password_credentials_ref")

    @property
    @pulumi.getter(name="systemMasterUrl")
    def system_master_url(self) -> str:
        return pulumi.get(self, "system_master_url")

    @property
    @pulumi.getter(name="tenantSecretRef")
    def tenant_secret_ref(self) -> 'outputs.TenantSpecTenantSecretRef':
        """
        SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
        """
        return pulumi.get(self, "tenant_secret_ref")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TenantSpecMasterCredentialsRef(dict):
    """
    SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
        :param str name: Name is unique within a namespace to reference a secret resource.
        :param str namespace: Namespace defines the space within which the secret name must be unique.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name is unique within a namespace to reference a secret resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace defines the space within which the secret name must be unique.
        """
        return pulumi.get(self, "namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TenantSpecPasswordCredentialsRef(dict):
    """
    SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
        :param str name: Name is unique within a namespace to reference a secret resource.
        :param str namespace: Namespace defines the space within which the secret name must be unique.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name is unique within a namespace to reference a secret resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace defines the space within which the secret name must be unique.
        """
        return pulumi.get(self, "namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TenantSpecTenantSecretRef(dict):
    """
    SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
    """
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
        :param str name: Name is unique within a namespace to reference a secret resource.
        :param str namespace: Namespace defines the space within which the secret name must be unique.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name is unique within a namespace to reference a secret resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Namespace defines the space within which the secret name must be unique.
        """
        return pulumi.get(self, "namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TenantStatus(dict):
    """
    TenantStatus defines the observed state of Tenant
    """
    def __init__(__self__, *,
                 admin_id: int,
                 tenant_id: int):
        """
        TenantStatus defines the observed state of Tenant
        """
        pulumi.set(__self__, "admin_id", admin_id)
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="adminId")
    def admin_id(self) -> int:
        return pulumi.get(self, "admin_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> int:
        return pulumi.get(self, "tenant_id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'APISpec',
    'APISpecIntegrationMethod',
    'APISpecIntegrationMethodApicastHosted',
    'APISpecIntegrationMethodApicastHostedAuthenticationSettings',
    'APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentials',
    'APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentialsApiKey',
    'APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentialsAppID',
    'APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentialsOpenIDConnector',
    'APISpecIntegrationMethodApicastHostedAuthenticationSettingsErrors',
    'APISpecIntegrationMethodApicastHostedAuthenticationSettingsErrorsAuthenticationFailed',
    'APISpecIntegrationMethodApicastHostedAuthenticationSettingsErrorsAuthenticationMissing',
    'APISpecIntegrationMethodApicastHostedMappingRulesSelector',
    'APISpecIntegrationMethodApicastHostedPoliciesSelector',
    'APISpecIntegrationMethodApicastOnPrem',
    'APISpecIntegrationMethodApicastOnPremAuthenticationSettings',
    'APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentials',
    'APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentialsApiKey',
    'APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentialsAppID',
    'APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentialsOpenIDConnector',
    'APISpecIntegrationMethodApicastOnPremAuthenticationSettingsErrors',
    'APISpecIntegrationMethodApicastOnPremAuthenticationSettingsErrorsAuthenticationFailed',
    'APISpecIntegrationMethodApicastOnPremAuthenticationSettingsErrorsAuthenticationMissing',
    'APISpecIntegrationMethodApicastOnPremMappingRulesSelector',
    'APISpecIntegrationMethodApicastOnPremPoliciesSelector',
    'APISpecIntegrationMethodCodePlugin',
    'APISpecIntegrationMethodCodePluginAuthenticationSettings',
    'APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentials',
    'APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentialsApiKey',
    'APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentialsAppID',
    'APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentialsOpenIDConnector',
    'APISpecMetricSelector',
    'APISpecPlanSelector',
    'BindingSpec',
    'BindingSpecApiSelector',
    'BindingSpecCredentialsRef',
    'BindingStatus',
    'BindingStatusLastSync',
    'LimitSpec',
    'LimitSpecMetricRef',
    'MappingRuleSpec',
    'MappingRuleSpecMetricRef',
    'MetricSpec',
    'PlanSpec',
    'PlanSpecCosts',
    'PlanSpecLimitSelector',
    'TenantSpec',
    'TenantSpecMasterCredentialsRef',
    'TenantSpecPasswordCredentialsRef',
    'TenantSpecTenantSecretRef',
    'TenantStatus',
]

@pulumi.output_type
class APISpec(dict):
    def __init__(__self__, *,
                 description: str,
                 integration_method: 'outputs.APISpecIntegrationMethod',
                 metric_selector: Optional['outputs.APISpecMetricSelector'] = None,
                 plan_selector: Optional['outputs.APISpecPlanSelector'] = None):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "integration_method", integration_method)
        if metric_selector is not None:
            pulumi.set(__self__, "metric_selector", metric_selector)
        if plan_selector is not None:
            pulumi.set(__self__, "plan_selector", plan_selector)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="integrationMethod")
    def integration_method(self) -> 'outputs.APISpecIntegrationMethod':
        return pulumi.get(self, "integration_method")

    @property
    @pulumi.getter(name="metricSelector")
    def metric_selector(self) -> Optional['outputs.APISpecMetricSelector']:
        return pulumi.get(self, "metric_selector")

    @property
    @pulumi.getter(name="planSelector")
    def plan_selector(self) -> Optional['outputs.APISpecPlanSelector']:
        return pulumi.get(self, "plan_selector")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APISpecIntegrationMethod(dict):
    def __init__(__self__, *,
                 apicast_hosted: Optional['outputs.APISpecIntegrationMethodApicastHosted'] = None,
                 apicast_on_prem: Optional['outputs.APISpecIntegrationMethodApicastOnPrem'] = None,
                 code_plugin: Optional['outputs.APISpecIntegrationMethodCodePlugin'] = None):
        if apicast_hosted is not None:
            pulumi.set(__self__, "apicast_hosted", apicast_hosted)
        if apicast_on_prem is not None:
            pulumi.set(__self__, "apicast_on_prem", apicast_on_prem)
        if code_plugin is not None:
            pulumi.set(__self__, "code_plugin", code_plugin)

    @property
    @pulumi.getter(name="apicastHosted")
    def apicast_hosted(self) -> Optional['outputs.APISpecIntegrationMethodApicastHosted']:
        return pulumi.get(self, "apicast_hosted")

    @property
    @pulumi.getter(name="apicastOnPrem")
    def apicast_on_prem(self) -> Optional['outputs.APISpecIntegrationMethodApicastOnPrem']:
        return pulumi.get(self, "apicast_on_prem")

    @property
    @pulumi.getter(name="codePlugin")
    def code_plugin(self) -> Optional['outputs.APISpecIntegrationMethodCodePlugin']:
        return pulumi.get(self, "code_plugin")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APISpecIntegrationMethodApicastHosted(dict):
    def __init__(__self__, *,
                 api_test_get_request: str,
                 authentication_settings: 'outputs.APISpecIntegrationMethodApicastHostedAuthenticationSettings',
                 private_base_url: str,
                 mapping_rules_selector: Optional['outputs.APISpecIntegrationMethodApicastHostedMappingRulesSelector'] = None,
                 policies_selector: Optional['outputs.APISpecIntegrationMethodApicastHostedPoliciesSelector'] = None):
        pulumi.set(__self__, "api_test_get_request", api_test_get_request)
        pulumi.set(__self__, "authentication_settings", authentication_settings)
        pulumi.set(__self__, "private_base_url", private_base_url)
        if mapping_rules_selector is not None:
            pulumi.set(__self__, "mapping_rules_selector", mapping_rules_selector)
        if policies_selector is not None:
            pulumi.set(__self__, "policies_selector", policies_selector)

    @property
    @pulumi.getter(name="apiTestGetRequest")
    def api_test_get_request(self) -> str:
        return pulumi.get(self, "api_test_get_request")

    @property
    @pulumi.getter(name="authenticationSettings")
    def authentication_settings(self) -> 'outputs.APISpecIntegrationMethodApicastHostedAuthenticationSettings':
        return pulumi.get(self, "authentication_settings")

    @property
    @pulumi.getter(name="privateBaseURL")
    def private_base_url(self) -> str:
        return pulumi.get(self, "private_base_url")

    @property
    @pulumi.getter(name="mappingRulesSelector")
    def mapping_rules_selector(self) -> Optional['outputs.APISpecIntegrationMethodApicastHostedMappingRulesSelector']:
        return pulumi.get(self, "mapping_rules_selector")

    @property
    @pulumi.getter(name="policiesSelector")
    def policies_selector(self) -> Optional['outputs.APISpecIntegrationMethodApicastHostedPoliciesSelector']:
        return pulumi.get(self, "policies_selector")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APISpecIntegrationMethodApicastHostedAuthenticationSettings(dict):
    def __init__(__self__, *,
                 credentials: 'outputs.APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentials',
                 errors: 'outputs.APISpecIntegrationMethodApicastHostedAuthenticationSettingsErrors',
                 host_header: str,
                 secret_token: str):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "host_header", host_header)
        pulumi.set(__self__, "secret_token", secret_token)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentials':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def errors(self) -> 'outputs.APISpecIntegrationMethodApicastHostedAuthenticationSettingsErrors':
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter(name="hostHeader")
    def host_header(self) -> str:
        return pulumi.get(self, "host_header")

    @property
    @pulumi.getter(name="secretToken")
    def secret_token(self) -> str:
        return pulumi.get(self, "secret_token")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentials(dict):
    def __init__(__self__, *,
                 api_key: Optional['outputs.APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentialsApiKey'] = None,
                 app_id: Optional['outputs.APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentialsAppID'] = None,
                 open_id_connector: Optional['outputs.APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentialsOpenIDConnector'] = None):
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if open_id_connector is not None:
            pulumi.set(__self__, "open_id_connector", open_id_connector)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional['outputs.APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentialsApiKey']:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="appID")
    def app_id(self) -> Optional['outputs.APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentialsAppID']:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="openIDConnector")
    def open_id_connector(self) -> Optional['outputs.APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentialsOpenIDConnector']:
        return pulumi.get(self, "open_id_connector")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentialsApiKey(dict):
    def __init__(__self__, *,
                 auth_parameter_name: str,
                 credentials_location: str):
        pulumi.set(__self__, "auth_parameter_name", auth_parameter_name)
        pulumi.set(__self__, "credentials_location", credentials_location)

    @property
    @pulumi.getter(name="authParameterName")
    def auth_parameter_name(self) -> str:
        return pulumi.get(self, "auth_parameter_name")

    @property
    @pulumi.getter(name="credentialsLocation")
    def credentials_location(self) -> str:
        return pulumi.get(self, "credentials_location")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentialsAppID(dict):
    def __init__(__self__, *,
                 app_id_parameter_name: str,
                 app_key_parameter_name: str,
                 credentials_location: str):
        pulumi.set(__self__, "app_id_parameter_name", app_id_parameter_name)
        pulumi.set(__self__, "app_key_parameter_name", app_key_parameter_name)
        pulumi.set(__self__, "credentials_location", credentials_location)

    @property
    @pulumi.getter(name="appIDParameterName")
    def app_id_parameter_name(self) -> str:
        return pulumi.get(self, "app_id_parameter_name")

    @property
    @pulumi.getter(name="appKeyParameterName")
    def app_key_parameter_name(self) -> str:
        return pulumi.get(self, "app_key_parameter_name")

    @property
    @pulumi.getter(name="credentialsLocation")
    def credentials_location(self) -> str:
        return pulumi.get(self, "credentials_location")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentialsOpenIDConnector(dict):
    def __init__(__self__, *,
                 credentials_location: str,
                 issuer: str):
        pulumi.set(__self__, "credentials_location", credentials_location)
        pulumi.set(__self__, "issuer", issuer)

    @property
    @pulumi.getter(name="credentialsLocation")
    def credentials_location(self) -> str:
        return pulumi.get(self, "credentials_location")

    @property
    @pulumi.getter
    def issuer(self) -> str:
        return pulumi.get(self, "issuer")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APISpecIntegrationMethodApicastHostedAuthenticationSettingsErrors(dict):
    def __init__(__self__, *,
                 authentication_failed: 'outputs.APISpecIntegrationMethodApicastHostedAuthenticationSettingsErrorsAuthenticationFailed',
                 authentication_missing: 'outputs.APISpecIntegrationMethodApicastHostedAuthenticationSettingsErrorsAuthenticationMissing'):
        pulumi.set(__self__, "authentication_failed", authentication_failed)
        pulumi.set(__self__, "authentication_missing", authentication_missing)

    @property
    @pulumi.getter(name="authenticationFailed")
    def authentication_failed(self) -> 'outputs.APISpecIntegrationMethodApicastHostedAuthenticationSettingsErrorsAuthenticationFailed':
        return pulumi.get(self, "authentication_failed")

    @property
    @pulumi.getter(name="authenticationMissing")
    def authentication_missing(self) -> 'outputs.APISpecIntegrationMethodApicastHostedAuthenticationSettingsErrorsAuthenticationMissing':
        return pulumi.get(self, "authentication_missing")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APISpecIntegrationMethodApicastHostedAuthenticationSettingsErrorsAuthenticationFailed(dict):
    def __init__(__self__, *,
                 content_type: str,
                 response_body: str,
                 response_code: int):
        pulumi.set(__self__, "content_type", content_type)
        pulumi.set(__self__, "response_body", response_body)
        pulumi.set(__self__, "response_code", response_code)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> str:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="responseBody")
    def response_body(self) -> str:
        return pulumi.get(self, "response_body")

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> int:
        return pulumi.get(self, "response_code")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APISpecIntegrationMethodApicastHostedAuthenticationSettingsErrorsAuthenticationMissing(dict):
    def __init__(__self__, *,
                 content_type: str,
                 response_body: str,
                 response_code: int):
        pulumi.set(__self__, "content_type", content_type)
        pulumi.set(__self__, "response_body", response_body)
        pulumi.set(__self__, "response_code", response_code)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> str:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="responseBody")
    def response_body(self) -> str:
        return pulumi.get(self, "response_body")

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> int:
        return pulumi.get(self, "response_code")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APISpecIntegrationMethodApicastHostedMappingRulesSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence[Any]] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence[Any]]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APISpecIntegrationMethodApicastHostedPoliciesSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence[Any]] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence[Any]]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APISpecIntegrationMethodApicastOnPrem(dict):
    def __init__(__self__, *,
                 api_test_get_request: str,
                 authentication_settings: 'outputs.APISpecIntegrationMethodApicastOnPremAuthenticationSettings',
                 private_base_url: str,
                 production_public_base_url: str,
                 staging_public_base_url: str,
                 mapping_rules_selector: Optional['outputs.APISpecIntegrationMethodApicastOnPremMappingRulesSelector'] = None,
                 policies_selector: Optional['outputs.APISpecIntegrationMethodApicastOnPremPoliciesSelector'] = None):
        pulumi.set(__self__, "api_test_get_request", api_test_get_request)
        pulumi.set(__self__, "authentication_settings", authentication_settings)
        pulumi.set(__self__, "private_base_url", private_base_url)
        pulumi.set(__self__, "production_public_base_url", production_public_base_url)
        pulumi.set(__self__, "staging_public_base_url", staging_public_base_url)
        if mapping_rules_selector is not None:
            pulumi.set(__self__, "mapping_rules_selector", mapping_rules_selector)
        if policies_selector is not None:
            pulumi.set(__self__, "policies_selector", policies_selector)

    @property
    @pulumi.getter(name="apiTestGetRequest")
    def api_test_get_request(self) -> str:
        return pulumi.get(self, "api_test_get_request")

    @property
    @pulumi.getter(name="authenticationSettings")
    def authentication_settings(self) -> 'outputs.APISpecIntegrationMethodApicastOnPremAuthenticationSettings':
        return pulumi.get(self, "authentication_settings")

    @property
    @pulumi.getter(name="privateBaseURL")
    def private_base_url(self) -> str:
        return pulumi.get(self, "private_base_url")

    @property
    @pulumi.getter(name="productionPublicBaseURL")
    def production_public_base_url(self) -> str:
        return pulumi.get(self, "production_public_base_url")

    @property
    @pulumi.getter(name="stagingPublicBaseURL")
    def staging_public_base_url(self) -> str:
        return pulumi.get(self, "staging_public_base_url")

    @property
    @pulumi.getter(name="mappingRulesSelector")
    def mapping_rules_selector(self) -> Optional['outputs.APISpecIntegrationMethodApicastOnPremMappingRulesSelector']:
        return pulumi.get(self, "mapping_rules_selector")

    @property
    @pulumi.getter(name="policiesSelector")
    def policies_selector(self) -> Optional['outputs.APISpecIntegrationMethodApicastOnPremPoliciesSelector']:
        return pulumi.get(self, "policies_selector")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APISpecIntegrationMethodApicastOnPremAuthenticationSettings(dict):
    def __init__(__self__, *,
                 credentials: 'outputs.APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentials',
                 errors: 'outputs.APISpecIntegrationMethodApicastOnPremAuthenticationSettingsErrors',
                 host_header: str,
                 secret_token: str):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "host_header", host_header)
        pulumi.set(__self__, "secret_token", secret_token)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentials':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def errors(self) -> 'outputs.APISpecIntegrationMethodApicastOnPremAuthenticationSettingsErrors':
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter(name="hostHeader")
    def host_header(self) -> str:
        return pulumi.get(self, "host_header")

    @property
    @pulumi.getter(name="secretToken")
    def secret_token(self) -> str:
        return pulumi.get(self, "secret_token")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentials(dict):
    def __init__(__self__, *,
                 api_key: Optional['outputs.APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentialsApiKey'] = None,
                 app_id: Optional['outputs.APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentialsAppID'] = None,
                 open_id_connector: Optional['outputs.APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentialsOpenIDConnector'] = None):
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if open_id_connector is not None:
            pulumi.set(__self__, "open_id_connector", open_id_connector)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional['outputs.APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentialsApiKey']:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="appID")
    def app_id(self) -> Optional['outputs.APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentialsAppID']:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="openIDConnector")
    def open_id_connector(self) -> Optional['outputs.APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentialsOpenIDConnector']:
        return pulumi.get(self, "open_id_connector")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentialsApiKey(dict):
    def __init__(__self__, *,
                 auth_parameter_name: str,
                 credentials_location: str):
        pulumi.set(__self__, "auth_parameter_name", auth_parameter_name)
        pulumi.set(__self__, "credentials_location", credentials_location)

    @property
    @pulumi.getter(name="authParameterName")
    def auth_parameter_name(self) -> str:
        return pulumi.get(self, "auth_parameter_name")

    @property
    @pulumi.getter(name="credentialsLocation")
    def credentials_location(self) -> str:
        return pulumi.get(self, "credentials_location")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentialsAppID(dict):
    def __init__(__self__, *,
                 app_id_parameter_name: str,
                 app_key_parameter_name: str,
                 credentials_location: str):
        pulumi.set(__self__, "app_id_parameter_name", app_id_parameter_name)
        pulumi.set(__self__, "app_key_parameter_name", app_key_parameter_name)
        pulumi.set(__self__, "credentials_location", credentials_location)

    @property
    @pulumi.getter(name="appIDParameterName")
    def app_id_parameter_name(self) -> str:
        return pulumi.get(self, "app_id_parameter_name")

    @property
    @pulumi.getter(name="appKeyParameterName")
    def app_key_parameter_name(self) -> str:
        return pulumi.get(self, "app_key_parameter_name")

    @property
    @pulumi.getter(name="credentialsLocation")
    def credentials_location(self) -> str:
        return pulumi.get(self, "credentials_location")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentialsOpenIDConnector(dict):
    def __init__(__self__, *,
                 credentials_location: str,
                 issuer: str):
        pulumi.set(__self__, "credentials_location", credentials_location)
        pulumi.set(__self__, "issuer", issuer)

    @property
    @pulumi.getter(name="credentialsLocation")
    def credentials_location(self) -> str:
        return pulumi.get(self, "credentials_location")

    @property
    @pulumi.getter
    def issuer(self) -> str:
        return pulumi.get(self, "issuer")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APISpecIntegrationMethodApicastOnPremAuthenticationSettingsErrors(dict):
    def __init__(__self__, *,
                 authentication_failed: 'outputs.APISpecIntegrationMethodApicastOnPremAuthenticationSettingsErrorsAuthenticationFailed',
                 authentication_missing: 'outputs.APISpecIntegrationMethodApicastOnPremAuthenticationSettingsErrorsAuthenticationMissing'):
        pulumi.set(__self__, "authentication_failed", authentication_failed)
        pulumi.set(__self__, "authentication_missing", authentication_missing)

    @property
    @pulumi.getter(name="authenticationFailed")
    def authentication_failed(self) -> 'outputs.APISpecIntegrationMethodApicastOnPremAuthenticationSettingsErrorsAuthenticationFailed':
        return pulumi.get(self, "authentication_failed")

    @property
    @pulumi.getter(name="authenticationMissing")
    def authentication_missing(self) -> 'outputs.APISpecIntegrationMethodApicastOnPremAuthenticationSettingsErrorsAuthenticationMissing':
        return pulumi.get(self, "authentication_missing")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APISpecIntegrationMethodApicastOnPremAuthenticationSettingsErrorsAuthenticationFailed(dict):
    def __init__(__self__, *,
                 content_type: str,
                 response_body: str,
                 response_code: int):
        pulumi.set(__self__, "content_type", content_type)
        pulumi.set(__self__, "response_body", response_body)
        pulumi.set(__self__, "response_code", response_code)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> str:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="responseBody")
    def response_body(self) -> str:
        return pulumi.get(self, "response_body")

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> int:
        return pulumi.get(self, "response_code")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APISpecIntegrationMethodApicastOnPremAuthenticationSettingsErrorsAuthenticationMissing(dict):
    def __init__(__self__, *,
                 content_type: str,
                 response_body: str,
                 response_code: int):
        pulumi.set(__self__, "content_type", content_type)
        pulumi.set(__self__, "response_body", response_body)
        pulumi.set(__self__, "response_code", response_code)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> str:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="responseBody")
    def response_body(self) -> str:
        return pulumi.get(self, "response_body")

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> int:
        return pulumi.get(self, "response_code")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APISpecIntegrationMethodApicastOnPremMappingRulesSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence[Any]] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence[Any]]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APISpecIntegrationMethodApicastOnPremPoliciesSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence[Any]] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence[Any]]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APISpecIntegrationMethodCodePlugin(dict):
    def __init__(__self__, *,
                 authentication_settings: 'outputs.APISpecIntegrationMethodCodePluginAuthenticationSettings'):
        pulumi.set(__self__, "authentication_settings", authentication_settings)

    @property
    @pulumi.getter(name="authenticationSettings")
    def authentication_settings(self) -> 'outputs.APISpecIntegrationMethodCodePluginAuthenticationSettings':
        return pulumi.get(self, "authentication_settings")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APISpecIntegrationMethodCodePluginAuthenticationSettings(dict):
    def __init__(__self__, *,
                 credentials: 'outputs.APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentials'):
        pulumi.set(__self__, "credentials", credentials)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentials':
        return pulumi.get(self, "credentials")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentials(dict):
    def __init__(__self__, *,
                 api_key: Optional['outputs.APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentialsApiKey'] = None,
                 app_id: Optional['outputs.APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentialsAppID'] = None,
                 open_id_connector: Optional['outputs.APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentialsOpenIDConnector'] = None):
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if open_id_connector is not None:
            pulumi.set(__self__, "open_id_connector", open_id_connector)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional['outputs.APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentialsApiKey']:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="appID")
    def app_id(self) -> Optional['outputs.APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentialsAppID']:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="openIDConnector")
    def open_id_connector(self) -> Optional['outputs.APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentialsOpenIDConnector']:
        return pulumi.get(self, "open_id_connector")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentialsApiKey(dict):
    def __init__(__self__, *,
                 auth_parameter_name: str,
                 credentials_location: str):
        pulumi.set(__self__, "auth_parameter_name", auth_parameter_name)
        pulumi.set(__self__, "credentials_location", credentials_location)

    @property
    @pulumi.getter(name="authParameterName")
    def auth_parameter_name(self) -> str:
        return pulumi.get(self, "auth_parameter_name")

    @property
    @pulumi.getter(name="credentialsLocation")
    def credentials_location(self) -> str:
        return pulumi.get(self, "credentials_location")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentialsAppID(dict):
    def __init__(__self__, *,
                 app_id_parameter_name: str,
                 app_key_parameter_name: str,
                 credentials_location: str):
        pulumi.set(__self__, "app_id_parameter_name", app_id_parameter_name)
        pulumi.set(__self__, "app_key_parameter_name", app_key_parameter_name)
        pulumi.set(__self__, "credentials_location", credentials_location)

    @property
    @pulumi.getter(name="appIDParameterName")
    def app_id_parameter_name(self) -> str:
        return pulumi.get(self, "app_id_parameter_name")

    @property
    @pulumi.getter(name="appKeyParameterName")
    def app_key_parameter_name(self) -> str:
        return pulumi.get(self, "app_key_parameter_name")

    @property
    @pulumi.getter(name="credentialsLocation")
    def credentials_location(self) -> str:
        return pulumi.get(self, "credentials_location")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentialsOpenIDConnector(dict):
    def __init__(__self__, *,
                 credentials_location: str,
                 issuer: str):
        pulumi.set(__self__, "credentials_location", credentials_location)
        pulumi.set(__self__, "issuer", issuer)

    @property
    @pulumi.getter(name="credentialsLocation")
    def credentials_location(self) -> str:
        return pulumi.get(self, "credentials_location")

    @property
    @pulumi.getter
    def issuer(self) -> str:
        return pulumi.get(self, "issuer")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APISpecMetricSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence[Any]] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence[Any]]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APISpecPlanSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence[Any]] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence[Any]]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BindingSpec(dict):
    def __init__(__self__, *,
                 credentials_ref: 'outputs.BindingSpecCredentialsRef',
                 api_selector: Optional['outputs.BindingSpecApiSelector'] = None):
        pulumi.set(__self__, "credentials_ref", credentials_ref)
        if api_selector is not None:
            pulumi.set(__self__, "api_selector", api_selector)

    @property
    @pulumi.getter(name="credentialsRef")
    def credentials_ref(self) -> 'outputs.BindingSpecCredentialsRef':
        return pulumi.get(self, "credentials_ref")

    @property
    @pulumi.getter(name="apiSelector")
    def api_selector(self) -> Optional['outputs.BindingSpecApiSelector']:
        return pulumi.get(self, "api_selector")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BindingSpecApiSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence[Any]] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence[Any]]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BindingSpecCredentialsRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BindingStatus(dict):
    def __init__(__self__, *,
                 current_state: Optional[str] = None,
                 desired_state: Optional[str] = None,
                 last_sync: Optional['outputs.BindingStatusLastSync'] = None,
                 previous_state: Optional[str] = None):
        if current_state is not None:
            pulumi.set(__self__, "current_state", current_state)
        if desired_state is not None:
            pulumi.set(__self__, "desired_state", desired_state)
        if last_sync is not None:
            pulumi.set(__self__, "last_sync", last_sync)
        if previous_state is not None:
            pulumi.set(__self__, "previous_state", previous_state)

    @property
    @pulumi.getter(name="currentState")
    def current_state(self) -> Optional[str]:
        return pulumi.get(self, "current_state")

    @property
    @pulumi.getter(name="desiredState")
    def desired_state(self) -> Optional[str]:
        return pulumi.get(self, "desired_state")

    @property
    @pulumi.getter(name="lastSync")
    def last_sync(self) -> Optional['outputs.BindingStatusLastSync']:
        return pulumi.get(self, "last_sync")

    @property
    @pulumi.getter(name="previousState")
    def previous_state(self) -> Optional[str]:
        return pulumi.get(self, "previous_state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BindingStatusLastSync(dict):
    def __init__(__self__, *,
                 nanos: Optional[int] = None,
                 seconds: Optional[int] = None):
        if nanos is not None:
            pulumi.set(__self__, "nanos", nanos)
        if seconds is not None:
            pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def nanos(self) -> Optional[int]:
        return pulumi.get(self, "nanos")

    @property
    @pulumi.getter
    def seconds(self) -> Optional[int]:
        return pulumi.get(self, "seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LimitSpec(dict):
    def __init__(__self__, *,
                 max_value: int,
                 metric_ref: 'outputs.LimitSpecMetricRef',
                 period: str):
        pulumi.set(__self__, "max_value", max_value)
        pulumi.set(__self__, "metric_ref", metric_ref)
        pulumi.set(__self__, "period", period)

    @property
    @pulumi.getter(name="maxValue")
    def max_value(self) -> int:
        return pulumi.get(self, "max_value")

    @property
    @pulumi.getter(name="metricRef")
    def metric_ref(self) -> 'outputs.LimitSpecMetricRef':
        return pulumi.get(self, "metric_ref")

    @property
    @pulumi.getter
    def period(self) -> str:
        return pulumi.get(self, "period")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class LimitSpecMetricRef(dict):
    def __init__(__self__, *,
                 api_version: Optional[str] = None,
                 field_path: Optional[str] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 resource_version: Optional[str] = None,
                 uid: Optional[str] = None):
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if field_path is not None:
            pulumi.set(__self__, "field_path", field_path)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> Optional[str]:
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_version")

    @property
    @pulumi.getter
    def uid(self) -> Optional[str]:
        return pulumi.get(self, "uid")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MappingRuleSpec(dict):
    def __init__(__self__, *,
                 increment: int,
                 method: str,
                 metric_ref: 'outputs.MappingRuleSpecMetricRef',
                 path: str):
        pulumi.set(__self__, "increment", increment)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "metric_ref", metric_ref)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def increment(self) -> int:
        return pulumi.get(self, "increment")

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="metricRef")
    def metric_ref(self) -> 'outputs.MappingRuleSpecMetricRef':
        return pulumi.get(self, "metric_ref")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MappingRuleSpecMetricRef(dict):
    def __init__(__self__, *,
                 api_version: Optional[str] = None,
                 field_path: Optional[str] = None,
                 kind: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 resource_version: Optional[str] = None,
                 uid: Optional[str] = None):
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if field_path is not None:
            pulumi.set(__self__, "field_path", field_path)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[str]:
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> Optional[str]:
        return pulumi.get(self, "field_path")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_version")

    @property
    @pulumi.getter
    def uid(self) -> Optional[str]:
        return pulumi.get(self, "uid")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class MetricSpec(dict):
    def __init__(__self__, *,
                 description: str,
                 increment_hits: bool,
                 unit: str):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "increment_hits", increment_hits)
        pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="incrementHits")
    def increment_hits(self) -> bool:
        return pulumi.get(self, "increment_hits")

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PlanSpec(dict):
    def __init__(__self__, *,
                 approval_required: bool,
                 default: bool,
                 limit_selector: 'outputs.PlanSpecLimitSelector',
                 trial_period: int,
                 costs: Optional['outputs.PlanSpecCosts'] = None):
        pulumi.set(__self__, "approval_required", approval_required)
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "limit_selector", limit_selector)
        pulumi.set(__self__, "trial_period", trial_period)
        if costs is not None:
            pulumi.set(__self__, "costs", costs)

    @property
    @pulumi.getter(name="approvalRequired")
    def approval_required(self) -> bool:
        return pulumi.get(self, "approval_required")

    @property
    @pulumi.getter
    def default(self) -> bool:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter(name="limitSelector")
    def limit_selector(self) -> 'outputs.PlanSpecLimitSelector':
        return pulumi.get(self, "limit_selector")

    @property
    @pulumi.getter(name="trialPeriod")
    def trial_period(self) -> int:
        return pulumi.get(self, "trial_period")

    @property
    @pulumi.getter
    def costs(self) -> Optional['outputs.PlanSpecCosts']:
        return pulumi.get(self, "costs")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PlanSpecCosts(dict):
    def __init__(__self__, *,
                 cost_month: Optional[float] = None,
                 setup_fee: Optional[float] = None):
        if cost_month is not None:
            pulumi.set(__self__, "cost_month", cost_month)
        if setup_fee is not None:
            pulumi.set(__self__, "setup_fee", setup_fee)

    @property
    @pulumi.getter(name="costMonth")
    def cost_month(self) -> Optional[float]:
        return pulumi.get(self, "cost_month")

    @property
    @pulumi.getter(name="setupFee")
    def setup_fee(self) -> Optional[float]:
        return pulumi.get(self, "setup_fee")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PlanSpecLimitSelector(dict):
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence[Any]] = None,
                 match_labels: Optional[Mapping[str, Any]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence[Any]]:
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TenantSpec(dict):
    def __init__(__self__, *,
                 email: str,
                 master_credentials_ref: 'outputs.TenantSpecMasterCredentialsRef',
                 organization_name: str,
                 password_credentials_ref: 'outputs.TenantSpecPasswordCredentialsRef',
                 system_master_url: str,
                 tenant_secret_ref: 'outputs.TenantSpecTenantSecretRef',
                 username: str):
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "master_credentials_ref", master_credentials_ref)
        pulumi.set(__self__, "organization_name", organization_name)
        pulumi.set(__self__, "password_credentials_ref", password_credentials_ref)
        pulumi.set(__self__, "system_master_url", system_master_url)
        pulumi.set(__self__, "tenant_secret_ref", tenant_secret_ref)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="masterCredentialsRef")
    def master_credentials_ref(self) -> 'outputs.TenantSpecMasterCredentialsRef':
        return pulumi.get(self, "master_credentials_ref")

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> str:
        return pulumi.get(self, "organization_name")

    @property
    @pulumi.getter(name="passwordCredentialsRef")
    def password_credentials_ref(self) -> 'outputs.TenantSpecPasswordCredentialsRef':
        return pulumi.get(self, "password_credentials_ref")

    @property
    @pulumi.getter(name="systemMasterUrl")
    def system_master_url(self) -> str:
        return pulumi.get(self, "system_master_url")

    @property
    @pulumi.getter(name="tenantSecretRef")
    def tenant_secret_ref(self) -> 'outputs.TenantSpecTenantSecretRef':
        return pulumi.get(self, "tenant_secret_ref")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TenantSpecMasterCredentialsRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TenantSpecPasswordCredentialsRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TenantSpecTenantSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class TenantStatus(dict):
    def __init__(__self__, *,
                 admin_id: int,
                 tenant_id: int):
        pulumi.set(__self__, "admin_id", admin_id)
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="adminId")
    def admin_id(self) -> int:
        return pulumi.get(self, "admin_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> int:
        return pulumi.get(self, "tenant_id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'TenantSpecArgs',
    'TenantSpecMasterCredentialsRefArgs',
    'TenantSpecPasswordCredentialsRefArgs',
    'TenantSpecTenantSecretRefArgs',
    'TenantStatusArgs',
]

@pulumi.input_type
class TenantSpecArgs:
    def __init__(__self__, *,
                 email: pulumi.Input[str],
                 master_credentials_ref: pulumi.Input['TenantSpecMasterCredentialsRefArgs'],
                 organization_name: pulumi.Input[str],
                 password_credentials_ref: pulumi.Input['TenantSpecPasswordCredentialsRefArgs'],
                 system_master_url: pulumi.Input[str],
                 tenant_secret_ref: pulumi.Input['TenantSpecTenantSecretRefArgs'],
                 username: pulumi.Input[str]):
        """
        TenantSpec defines the desired state of Tenant
        :param pulumi.Input['TenantSpecMasterCredentialsRefArgs'] master_credentials_ref: SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
        :param pulumi.Input['TenantSpecPasswordCredentialsRefArgs'] password_credentials_ref: SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
        :param pulumi.Input['TenantSpecTenantSecretRefArgs'] tenant_secret_ref: SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
        """
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "master_credentials_ref", master_credentials_ref)
        pulumi.set(__self__, "organization_name", organization_name)
        pulumi.set(__self__, "password_credentials_ref", password_credentials_ref)
        pulumi.set(__self__, "system_master_url", system_master_url)
        pulumi.set(__self__, "tenant_secret_ref", tenant_secret_ref)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="masterCredentialsRef")
    def master_credentials_ref(self) -> pulumi.Input['TenantSpecMasterCredentialsRefArgs']:
        """
        SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
        """
        return pulumi.get(self, "master_credentials_ref")

    @master_credentials_ref.setter
    def master_credentials_ref(self, value: pulumi.Input['TenantSpecMasterCredentialsRefArgs']):
        pulumi.set(self, "master_credentials_ref", value)

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "organization_name")

    @organization_name.setter
    def organization_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "organization_name", value)

    @property
    @pulumi.getter(name="passwordCredentialsRef")
    def password_credentials_ref(self) -> pulumi.Input['TenantSpecPasswordCredentialsRefArgs']:
        """
        SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
        """
        return pulumi.get(self, "password_credentials_ref")

    @password_credentials_ref.setter
    def password_credentials_ref(self, value: pulumi.Input['TenantSpecPasswordCredentialsRefArgs']):
        pulumi.set(self, "password_credentials_ref", value)

    @property
    @pulumi.getter(name="systemMasterUrl")
    def system_master_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "system_master_url")

    @system_master_url.setter
    def system_master_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "system_master_url", value)

    @property
    @pulumi.getter(name="tenantSecretRef")
    def tenant_secret_ref(self) -> pulumi.Input['TenantSpecTenantSecretRefArgs']:
        """
        SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
        """
        return pulumi.get(self, "tenant_secret_ref")

    @tenant_secret_ref.setter
    def tenant_secret_ref(self, value: pulumi.Input['TenantSpecTenantSecretRefArgs']):
        pulumi.set(self, "tenant_secret_ref", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class TenantSpecMasterCredentialsRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
        :param pulumi.Input[str] name: Name is unique within a namespace to reference a secret resource.
        :param pulumi.Input[str] namespace: Namespace defines the space within which the secret name must be unique.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name is unique within a namespace to reference a secret resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace defines the space within which the secret name must be unique.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class TenantSpecPasswordCredentialsRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
        :param pulumi.Input[str] name: Name is unique within a namespace to reference a secret resource.
        :param pulumi.Input[str] namespace: Namespace defines the space within which the secret name must be unique.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name is unique within a namespace to reference a secret resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace defines the space within which the secret name must be unique.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class TenantSpecTenantSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
        :param pulumi.Input[str] name: Name is unique within a namespace to reference a secret resource.
        :param pulumi.Input[str] namespace: Namespace defines the space within which the secret name must be unique.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name is unique within a namespace to reference a secret resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace defines the space within which the secret name must be unique.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class TenantStatusArgs:
    def __init__(__self__, *,
                 admin_id: pulumi.Input[int],
                 tenant_id: pulumi.Input[int]):
        """
        TenantStatus defines the observed state of Tenant
        """
        pulumi.set(__self__, "admin_id", admin_id)
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="adminId")
    def admin_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "admin_id")

    @admin_id.setter
    def admin_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "admin_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "tenant_id", value)



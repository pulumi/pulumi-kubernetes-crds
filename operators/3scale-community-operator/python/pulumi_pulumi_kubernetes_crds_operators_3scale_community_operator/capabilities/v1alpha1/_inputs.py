# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'APISpecArgs',
    'APISpecIntegrationMethodArgs',
    'APISpecIntegrationMethodApicastHostedArgs',
    'APISpecIntegrationMethodApicastHostedAuthenticationSettingsArgs',
    'APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentialsArgs',
    'APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentialsApiKeyArgs',
    'APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentialsAppIDArgs',
    'APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentialsOpenIDConnectorArgs',
    'APISpecIntegrationMethodApicastHostedAuthenticationSettingsErrorsArgs',
    'APISpecIntegrationMethodApicastHostedAuthenticationSettingsErrorsAuthenticationFailedArgs',
    'APISpecIntegrationMethodApicastHostedAuthenticationSettingsErrorsAuthenticationMissingArgs',
    'APISpecIntegrationMethodApicastHostedMappingRulesSelectorArgs',
    'APISpecIntegrationMethodApicastHostedPoliciesSelectorArgs',
    'APISpecIntegrationMethodApicastOnPremArgs',
    'APISpecIntegrationMethodApicastOnPremAuthenticationSettingsArgs',
    'APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentialsArgs',
    'APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentialsApiKeyArgs',
    'APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentialsAppIDArgs',
    'APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentialsOpenIDConnectorArgs',
    'APISpecIntegrationMethodApicastOnPremAuthenticationSettingsErrorsArgs',
    'APISpecIntegrationMethodApicastOnPremAuthenticationSettingsErrorsAuthenticationFailedArgs',
    'APISpecIntegrationMethodApicastOnPremAuthenticationSettingsErrorsAuthenticationMissingArgs',
    'APISpecIntegrationMethodApicastOnPremMappingRulesSelectorArgs',
    'APISpecIntegrationMethodApicastOnPremPoliciesSelectorArgs',
    'APISpecIntegrationMethodCodePluginArgs',
    'APISpecIntegrationMethodCodePluginAuthenticationSettingsArgs',
    'APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentialsArgs',
    'APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentialsApiKeyArgs',
    'APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentialsAppIDArgs',
    'APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentialsOpenIDConnectorArgs',
    'APISpecMetricSelectorArgs',
    'APISpecPlanSelectorArgs',
    'BindingSpecArgs',
    'BindingSpecApiSelectorArgs',
    'BindingSpecCredentialsRefArgs',
    'BindingStatusArgs',
    'BindingStatusLastSyncArgs',
    'LimitSpecArgs',
    'LimitSpecMetricRefArgs',
    'MappingRuleSpecArgs',
    'MappingRuleSpecMetricRefArgs',
    'MetricSpecArgs',
    'PlanSpecArgs',
    'PlanSpecCostsArgs',
    'PlanSpecLimitSelectorArgs',
    'TenantSpecArgs',
    'TenantSpecMasterCredentialsRefArgs',
    'TenantSpecPasswordCredentialsRefArgs',
    'TenantSpecTenantSecretRefArgs',
    'TenantStatusArgs',
]

@pulumi.input_type
class APISpecArgs:
    def __init__(__self__, *,
                 description: pulumi.Input[str],
                 integration_method: pulumi.Input['APISpecIntegrationMethodArgs'],
                 metric_selector: Optional[pulumi.Input['APISpecMetricSelectorArgs']] = None,
                 plan_selector: Optional[pulumi.Input['APISpecPlanSelectorArgs']] = None):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "integration_method", integration_method)
        if metric_selector is not None:
            pulumi.set(__self__, "metric_selector", metric_selector)
        if plan_selector is not None:
            pulumi.set(__self__, "plan_selector", plan_selector)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="integrationMethod")
    def integration_method(self) -> pulumi.Input['APISpecIntegrationMethodArgs']:
        return pulumi.get(self, "integration_method")

    @integration_method.setter
    def integration_method(self, value: pulumi.Input['APISpecIntegrationMethodArgs']):
        pulumi.set(self, "integration_method", value)

    @property
    @pulumi.getter(name="metricSelector")
    def metric_selector(self) -> Optional[pulumi.Input['APISpecMetricSelectorArgs']]:
        return pulumi.get(self, "metric_selector")

    @metric_selector.setter
    def metric_selector(self, value: Optional[pulumi.Input['APISpecMetricSelectorArgs']]):
        pulumi.set(self, "metric_selector", value)

    @property
    @pulumi.getter(name="planSelector")
    def plan_selector(self) -> Optional[pulumi.Input['APISpecPlanSelectorArgs']]:
        return pulumi.get(self, "plan_selector")

    @plan_selector.setter
    def plan_selector(self, value: Optional[pulumi.Input['APISpecPlanSelectorArgs']]):
        pulumi.set(self, "plan_selector", value)


@pulumi.input_type
class APISpecIntegrationMethodArgs:
    def __init__(__self__, *,
                 apicast_hosted: Optional[pulumi.Input['APISpecIntegrationMethodApicastHostedArgs']] = None,
                 apicast_on_prem: Optional[pulumi.Input['APISpecIntegrationMethodApicastOnPremArgs']] = None,
                 code_plugin: Optional[pulumi.Input['APISpecIntegrationMethodCodePluginArgs']] = None):
        if apicast_hosted is not None:
            pulumi.set(__self__, "apicast_hosted", apicast_hosted)
        if apicast_on_prem is not None:
            pulumi.set(__self__, "apicast_on_prem", apicast_on_prem)
        if code_plugin is not None:
            pulumi.set(__self__, "code_plugin", code_plugin)

    @property
    @pulumi.getter(name="apicastHosted")
    def apicast_hosted(self) -> Optional[pulumi.Input['APISpecIntegrationMethodApicastHostedArgs']]:
        return pulumi.get(self, "apicast_hosted")

    @apicast_hosted.setter
    def apicast_hosted(self, value: Optional[pulumi.Input['APISpecIntegrationMethodApicastHostedArgs']]):
        pulumi.set(self, "apicast_hosted", value)

    @property
    @pulumi.getter(name="apicastOnPrem")
    def apicast_on_prem(self) -> Optional[pulumi.Input['APISpecIntegrationMethodApicastOnPremArgs']]:
        return pulumi.get(self, "apicast_on_prem")

    @apicast_on_prem.setter
    def apicast_on_prem(self, value: Optional[pulumi.Input['APISpecIntegrationMethodApicastOnPremArgs']]):
        pulumi.set(self, "apicast_on_prem", value)

    @property
    @pulumi.getter(name="codePlugin")
    def code_plugin(self) -> Optional[pulumi.Input['APISpecIntegrationMethodCodePluginArgs']]:
        return pulumi.get(self, "code_plugin")

    @code_plugin.setter
    def code_plugin(self, value: Optional[pulumi.Input['APISpecIntegrationMethodCodePluginArgs']]):
        pulumi.set(self, "code_plugin", value)


@pulumi.input_type
class APISpecIntegrationMethodApicastHostedArgs:
    def __init__(__self__, *,
                 api_test_get_request: pulumi.Input[str],
                 authentication_settings: pulumi.Input['APISpecIntegrationMethodApicastHostedAuthenticationSettingsArgs'],
                 private_base_url: pulumi.Input[str],
                 mapping_rules_selector: Optional[pulumi.Input['APISpecIntegrationMethodApicastHostedMappingRulesSelectorArgs']] = None,
                 policies_selector: Optional[pulumi.Input['APISpecIntegrationMethodApicastHostedPoliciesSelectorArgs']] = None):
        pulumi.set(__self__, "api_test_get_request", api_test_get_request)
        pulumi.set(__self__, "authentication_settings", authentication_settings)
        pulumi.set(__self__, "private_base_url", private_base_url)
        if mapping_rules_selector is not None:
            pulumi.set(__self__, "mapping_rules_selector", mapping_rules_selector)
        if policies_selector is not None:
            pulumi.set(__self__, "policies_selector", policies_selector)

    @property
    @pulumi.getter(name="apiTestGetRequest")
    def api_test_get_request(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_test_get_request")

    @api_test_get_request.setter
    def api_test_get_request(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_test_get_request", value)

    @property
    @pulumi.getter(name="authenticationSettings")
    def authentication_settings(self) -> pulumi.Input['APISpecIntegrationMethodApicastHostedAuthenticationSettingsArgs']:
        return pulumi.get(self, "authentication_settings")

    @authentication_settings.setter
    def authentication_settings(self, value: pulumi.Input['APISpecIntegrationMethodApicastHostedAuthenticationSettingsArgs']):
        pulumi.set(self, "authentication_settings", value)

    @property
    @pulumi.getter(name="privateBaseURL")
    def private_base_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "private_base_url")

    @private_base_url.setter
    def private_base_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "private_base_url", value)

    @property
    @pulumi.getter(name="mappingRulesSelector")
    def mapping_rules_selector(self) -> Optional[pulumi.Input['APISpecIntegrationMethodApicastHostedMappingRulesSelectorArgs']]:
        return pulumi.get(self, "mapping_rules_selector")

    @mapping_rules_selector.setter
    def mapping_rules_selector(self, value: Optional[pulumi.Input['APISpecIntegrationMethodApicastHostedMappingRulesSelectorArgs']]):
        pulumi.set(self, "mapping_rules_selector", value)

    @property
    @pulumi.getter(name="policiesSelector")
    def policies_selector(self) -> Optional[pulumi.Input['APISpecIntegrationMethodApicastHostedPoliciesSelectorArgs']]:
        return pulumi.get(self, "policies_selector")

    @policies_selector.setter
    def policies_selector(self, value: Optional[pulumi.Input['APISpecIntegrationMethodApicastHostedPoliciesSelectorArgs']]):
        pulumi.set(self, "policies_selector", value)


@pulumi.input_type
class APISpecIntegrationMethodApicastHostedAuthenticationSettingsArgs:
    def __init__(__self__, *,
                 credentials: pulumi.Input['APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentialsArgs'],
                 errors: pulumi.Input['APISpecIntegrationMethodApicastHostedAuthenticationSettingsErrorsArgs'],
                 host_header: pulumi.Input[str],
                 secret_token: pulumi.Input[str]):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "host_header", host_header)
        pulumi.set(__self__, "secret_token", secret_token)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input['APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentialsArgs']:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input['APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentialsArgs']):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter
    def errors(self) -> pulumi.Input['APISpecIntegrationMethodApicastHostedAuthenticationSettingsErrorsArgs']:
        return pulumi.get(self, "errors")

    @errors.setter
    def errors(self, value: pulumi.Input['APISpecIntegrationMethodApicastHostedAuthenticationSettingsErrorsArgs']):
        pulumi.set(self, "errors", value)

    @property
    @pulumi.getter(name="hostHeader")
    def host_header(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host_header")

    @host_header.setter
    def host_header(self, value: pulumi.Input[str]):
        pulumi.set(self, "host_header", value)

    @property
    @pulumi.getter(name="secretToken")
    def secret_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret_token")

    @secret_token.setter
    def secret_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_token", value)


@pulumi.input_type
class APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentialsArgs:
    def __init__(__self__, *,
                 api_key: Optional[pulumi.Input['APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentialsApiKeyArgs']] = None,
                 app_id: Optional[pulumi.Input['APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentialsAppIDArgs']] = None,
                 open_id_connector: Optional[pulumi.Input['APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentialsOpenIDConnectorArgs']] = None):
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if open_id_connector is not None:
            pulumi.set(__self__, "open_id_connector", open_id_connector)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[pulumi.Input['APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentialsApiKeyArgs']]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: Optional[pulumi.Input['APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentialsApiKeyArgs']]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="appID")
    def app_id(self) -> Optional[pulumi.Input['APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentialsAppIDArgs']]:
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input['APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentialsAppIDArgs']]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter(name="openIDConnector")
    def open_id_connector(self) -> Optional[pulumi.Input['APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentialsOpenIDConnectorArgs']]:
        return pulumi.get(self, "open_id_connector")

    @open_id_connector.setter
    def open_id_connector(self, value: Optional[pulumi.Input['APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentialsOpenIDConnectorArgs']]):
        pulumi.set(self, "open_id_connector", value)


@pulumi.input_type
class APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentialsApiKeyArgs:
    def __init__(__self__, *,
                 auth_parameter_name: pulumi.Input[str],
                 credentials_location: pulumi.Input[str]):
        pulumi.set(__self__, "auth_parameter_name", auth_parameter_name)
        pulumi.set(__self__, "credentials_location", credentials_location)

    @property
    @pulumi.getter(name="authParameterName")
    def auth_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_parameter_name")

    @auth_parameter_name.setter
    def auth_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_parameter_name", value)

    @property
    @pulumi.getter(name="credentialsLocation")
    def credentials_location(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credentials_location")

    @credentials_location.setter
    def credentials_location(self, value: pulumi.Input[str]):
        pulumi.set(self, "credentials_location", value)


@pulumi.input_type
class APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentialsAppIDArgs:
    def __init__(__self__, *,
                 app_id_parameter_name: pulumi.Input[str],
                 app_key_parameter_name: pulumi.Input[str],
                 credentials_location: pulumi.Input[str]):
        pulumi.set(__self__, "app_id_parameter_name", app_id_parameter_name)
        pulumi.set(__self__, "app_key_parameter_name", app_key_parameter_name)
        pulumi.set(__self__, "credentials_location", credentials_location)

    @property
    @pulumi.getter(name="appIDParameterName")
    def app_id_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "app_id_parameter_name")

    @app_id_parameter_name.setter
    def app_id_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_id_parameter_name", value)

    @property
    @pulumi.getter(name="appKeyParameterName")
    def app_key_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "app_key_parameter_name")

    @app_key_parameter_name.setter
    def app_key_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_key_parameter_name", value)

    @property
    @pulumi.getter(name="credentialsLocation")
    def credentials_location(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credentials_location")

    @credentials_location.setter
    def credentials_location(self, value: pulumi.Input[str]):
        pulumi.set(self, "credentials_location", value)


@pulumi.input_type
class APISpecIntegrationMethodApicastHostedAuthenticationSettingsCredentialsOpenIDConnectorArgs:
    def __init__(__self__, *,
                 credentials_location: pulumi.Input[str],
                 issuer: pulumi.Input[str]):
        pulumi.set(__self__, "credentials_location", credentials_location)
        pulumi.set(__self__, "issuer", issuer)

    @property
    @pulumi.getter(name="credentialsLocation")
    def credentials_location(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credentials_location")

    @credentials_location.setter
    def credentials_location(self, value: pulumi.Input[str]):
        pulumi.set(self, "credentials_location", value)

    @property
    @pulumi.getter
    def issuer(self) -> pulumi.Input[str]:
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: pulumi.Input[str]):
        pulumi.set(self, "issuer", value)


@pulumi.input_type
class APISpecIntegrationMethodApicastHostedAuthenticationSettingsErrorsArgs:
    def __init__(__self__, *,
                 authentication_failed: pulumi.Input['APISpecIntegrationMethodApicastHostedAuthenticationSettingsErrorsAuthenticationFailedArgs'],
                 authentication_missing: pulumi.Input['APISpecIntegrationMethodApicastHostedAuthenticationSettingsErrorsAuthenticationMissingArgs']):
        pulumi.set(__self__, "authentication_failed", authentication_failed)
        pulumi.set(__self__, "authentication_missing", authentication_missing)

    @property
    @pulumi.getter(name="authenticationFailed")
    def authentication_failed(self) -> pulumi.Input['APISpecIntegrationMethodApicastHostedAuthenticationSettingsErrorsAuthenticationFailedArgs']:
        return pulumi.get(self, "authentication_failed")

    @authentication_failed.setter
    def authentication_failed(self, value: pulumi.Input['APISpecIntegrationMethodApicastHostedAuthenticationSettingsErrorsAuthenticationFailedArgs']):
        pulumi.set(self, "authentication_failed", value)

    @property
    @pulumi.getter(name="authenticationMissing")
    def authentication_missing(self) -> pulumi.Input['APISpecIntegrationMethodApicastHostedAuthenticationSettingsErrorsAuthenticationMissingArgs']:
        return pulumi.get(self, "authentication_missing")

    @authentication_missing.setter
    def authentication_missing(self, value: pulumi.Input['APISpecIntegrationMethodApicastHostedAuthenticationSettingsErrorsAuthenticationMissingArgs']):
        pulumi.set(self, "authentication_missing", value)


@pulumi.input_type
class APISpecIntegrationMethodApicastHostedAuthenticationSettingsErrorsAuthenticationFailedArgs:
    def __init__(__self__, *,
                 content_type: pulumi.Input[str],
                 response_body: pulumi.Input[str],
                 response_code: pulumi.Input[int]):
        pulumi.set(__self__, "content_type", content_type)
        pulumi.set(__self__, "response_body", response_body)
        pulumi.set(__self__, "response_code", response_code)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="responseBody")
    def response_body(self) -> pulumi.Input[str]:
        return pulumi.get(self, "response_body")

    @response_body.setter
    def response_body(self, value: pulumi.Input[str]):
        pulumi.set(self, "response_body", value)

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> pulumi.Input[int]:
        return pulumi.get(self, "response_code")

    @response_code.setter
    def response_code(self, value: pulumi.Input[int]):
        pulumi.set(self, "response_code", value)


@pulumi.input_type
class APISpecIntegrationMethodApicastHostedAuthenticationSettingsErrorsAuthenticationMissingArgs:
    def __init__(__self__, *,
                 content_type: pulumi.Input[str],
                 response_body: pulumi.Input[str],
                 response_code: pulumi.Input[int]):
        pulumi.set(__self__, "content_type", content_type)
        pulumi.set(__self__, "response_body", response_body)
        pulumi.set(__self__, "response_code", response_code)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="responseBody")
    def response_body(self) -> pulumi.Input[str]:
        return pulumi.get(self, "response_body")

    @response_body.setter
    def response_body(self, value: pulumi.Input[str]):
        pulumi.set(self, "response_body", value)

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> pulumi.Input[int]:
        return pulumi.get(self, "response_code")

    @response_code.setter
    def response_code(self, value: pulumi.Input[int]):
        pulumi.set(self, "response_code", value)


@pulumi.input_type
class APISpecIntegrationMethodApicastHostedMappingRulesSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[Any]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[Any]]]:
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[Any]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class APISpecIntegrationMethodApicastHostedPoliciesSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[Any]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[Any]]]:
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[Any]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class APISpecIntegrationMethodApicastOnPremArgs:
    def __init__(__self__, *,
                 api_test_get_request: pulumi.Input[str],
                 authentication_settings: pulumi.Input['APISpecIntegrationMethodApicastOnPremAuthenticationSettingsArgs'],
                 private_base_url: pulumi.Input[str],
                 production_public_base_url: pulumi.Input[str],
                 staging_public_base_url: pulumi.Input[str],
                 mapping_rules_selector: Optional[pulumi.Input['APISpecIntegrationMethodApicastOnPremMappingRulesSelectorArgs']] = None,
                 policies_selector: Optional[pulumi.Input['APISpecIntegrationMethodApicastOnPremPoliciesSelectorArgs']] = None):
        pulumi.set(__self__, "api_test_get_request", api_test_get_request)
        pulumi.set(__self__, "authentication_settings", authentication_settings)
        pulumi.set(__self__, "private_base_url", private_base_url)
        pulumi.set(__self__, "production_public_base_url", production_public_base_url)
        pulumi.set(__self__, "staging_public_base_url", staging_public_base_url)
        if mapping_rules_selector is not None:
            pulumi.set(__self__, "mapping_rules_selector", mapping_rules_selector)
        if policies_selector is not None:
            pulumi.set(__self__, "policies_selector", policies_selector)

    @property
    @pulumi.getter(name="apiTestGetRequest")
    def api_test_get_request(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_test_get_request")

    @api_test_get_request.setter
    def api_test_get_request(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_test_get_request", value)

    @property
    @pulumi.getter(name="authenticationSettings")
    def authentication_settings(self) -> pulumi.Input['APISpecIntegrationMethodApicastOnPremAuthenticationSettingsArgs']:
        return pulumi.get(self, "authentication_settings")

    @authentication_settings.setter
    def authentication_settings(self, value: pulumi.Input['APISpecIntegrationMethodApicastOnPremAuthenticationSettingsArgs']):
        pulumi.set(self, "authentication_settings", value)

    @property
    @pulumi.getter(name="privateBaseURL")
    def private_base_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "private_base_url")

    @private_base_url.setter
    def private_base_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "private_base_url", value)

    @property
    @pulumi.getter(name="productionPublicBaseURL")
    def production_public_base_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "production_public_base_url")

    @production_public_base_url.setter
    def production_public_base_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "production_public_base_url", value)

    @property
    @pulumi.getter(name="stagingPublicBaseURL")
    def staging_public_base_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "staging_public_base_url")

    @staging_public_base_url.setter
    def staging_public_base_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "staging_public_base_url", value)

    @property
    @pulumi.getter(name="mappingRulesSelector")
    def mapping_rules_selector(self) -> Optional[pulumi.Input['APISpecIntegrationMethodApicastOnPremMappingRulesSelectorArgs']]:
        return pulumi.get(self, "mapping_rules_selector")

    @mapping_rules_selector.setter
    def mapping_rules_selector(self, value: Optional[pulumi.Input['APISpecIntegrationMethodApicastOnPremMappingRulesSelectorArgs']]):
        pulumi.set(self, "mapping_rules_selector", value)

    @property
    @pulumi.getter(name="policiesSelector")
    def policies_selector(self) -> Optional[pulumi.Input['APISpecIntegrationMethodApicastOnPremPoliciesSelectorArgs']]:
        return pulumi.get(self, "policies_selector")

    @policies_selector.setter
    def policies_selector(self, value: Optional[pulumi.Input['APISpecIntegrationMethodApicastOnPremPoliciesSelectorArgs']]):
        pulumi.set(self, "policies_selector", value)


@pulumi.input_type
class APISpecIntegrationMethodApicastOnPremAuthenticationSettingsArgs:
    def __init__(__self__, *,
                 credentials: pulumi.Input['APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentialsArgs'],
                 errors: pulumi.Input['APISpecIntegrationMethodApicastOnPremAuthenticationSettingsErrorsArgs'],
                 host_header: pulumi.Input[str],
                 secret_token: pulumi.Input[str]):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "host_header", host_header)
        pulumi.set(__self__, "secret_token", secret_token)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input['APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentialsArgs']:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input['APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentialsArgs']):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter
    def errors(self) -> pulumi.Input['APISpecIntegrationMethodApicastOnPremAuthenticationSettingsErrorsArgs']:
        return pulumi.get(self, "errors")

    @errors.setter
    def errors(self, value: pulumi.Input['APISpecIntegrationMethodApicastOnPremAuthenticationSettingsErrorsArgs']):
        pulumi.set(self, "errors", value)

    @property
    @pulumi.getter(name="hostHeader")
    def host_header(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host_header")

    @host_header.setter
    def host_header(self, value: pulumi.Input[str]):
        pulumi.set(self, "host_header", value)

    @property
    @pulumi.getter(name="secretToken")
    def secret_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret_token")

    @secret_token.setter
    def secret_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_token", value)


@pulumi.input_type
class APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentialsArgs:
    def __init__(__self__, *,
                 api_key: Optional[pulumi.Input['APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentialsApiKeyArgs']] = None,
                 app_id: Optional[pulumi.Input['APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentialsAppIDArgs']] = None,
                 open_id_connector: Optional[pulumi.Input['APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentialsOpenIDConnectorArgs']] = None):
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if open_id_connector is not None:
            pulumi.set(__self__, "open_id_connector", open_id_connector)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[pulumi.Input['APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentialsApiKeyArgs']]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: Optional[pulumi.Input['APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentialsApiKeyArgs']]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="appID")
    def app_id(self) -> Optional[pulumi.Input['APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentialsAppIDArgs']]:
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input['APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentialsAppIDArgs']]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter(name="openIDConnector")
    def open_id_connector(self) -> Optional[pulumi.Input['APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentialsOpenIDConnectorArgs']]:
        return pulumi.get(self, "open_id_connector")

    @open_id_connector.setter
    def open_id_connector(self, value: Optional[pulumi.Input['APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentialsOpenIDConnectorArgs']]):
        pulumi.set(self, "open_id_connector", value)


@pulumi.input_type
class APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentialsApiKeyArgs:
    def __init__(__self__, *,
                 auth_parameter_name: pulumi.Input[str],
                 credentials_location: pulumi.Input[str]):
        pulumi.set(__self__, "auth_parameter_name", auth_parameter_name)
        pulumi.set(__self__, "credentials_location", credentials_location)

    @property
    @pulumi.getter(name="authParameterName")
    def auth_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_parameter_name")

    @auth_parameter_name.setter
    def auth_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_parameter_name", value)

    @property
    @pulumi.getter(name="credentialsLocation")
    def credentials_location(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credentials_location")

    @credentials_location.setter
    def credentials_location(self, value: pulumi.Input[str]):
        pulumi.set(self, "credentials_location", value)


@pulumi.input_type
class APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentialsAppIDArgs:
    def __init__(__self__, *,
                 app_id_parameter_name: pulumi.Input[str],
                 app_key_parameter_name: pulumi.Input[str],
                 credentials_location: pulumi.Input[str]):
        pulumi.set(__self__, "app_id_parameter_name", app_id_parameter_name)
        pulumi.set(__self__, "app_key_parameter_name", app_key_parameter_name)
        pulumi.set(__self__, "credentials_location", credentials_location)

    @property
    @pulumi.getter(name="appIDParameterName")
    def app_id_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "app_id_parameter_name")

    @app_id_parameter_name.setter
    def app_id_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_id_parameter_name", value)

    @property
    @pulumi.getter(name="appKeyParameterName")
    def app_key_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "app_key_parameter_name")

    @app_key_parameter_name.setter
    def app_key_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_key_parameter_name", value)

    @property
    @pulumi.getter(name="credentialsLocation")
    def credentials_location(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credentials_location")

    @credentials_location.setter
    def credentials_location(self, value: pulumi.Input[str]):
        pulumi.set(self, "credentials_location", value)


@pulumi.input_type
class APISpecIntegrationMethodApicastOnPremAuthenticationSettingsCredentialsOpenIDConnectorArgs:
    def __init__(__self__, *,
                 credentials_location: pulumi.Input[str],
                 issuer: pulumi.Input[str]):
        pulumi.set(__self__, "credentials_location", credentials_location)
        pulumi.set(__self__, "issuer", issuer)

    @property
    @pulumi.getter(name="credentialsLocation")
    def credentials_location(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credentials_location")

    @credentials_location.setter
    def credentials_location(self, value: pulumi.Input[str]):
        pulumi.set(self, "credentials_location", value)

    @property
    @pulumi.getter
    def issuer(self) -> pulumi.Input[str]:
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: pulumi.Input[str]):
        pulumi.set(self, "issuer", value)


@pulumi.input_type
class APISpecIntegrationMethodApicastOnPremAuthenticationSettingsErrorsArgs:
    def __init__(__self__, *,
                 authentication_failed: pulumi.Input['APISpecIntegrationMethodApicastOnPremAuthenticationSettingsErrorsAuthenticationFailedArgs'],
                 authentication_missing: pulumi.Input['APISpecIntegrationMethodApicastOnPremAuthenticationSettingsErrorsAuthenticationMissingArgs']):
        pulumi.set(__self__, "authentication_failed", authentication_failed)
        pulumi.set(__self__, "authentication_missing", authentication_missing)

    @property
    @pulumi.getter(name="authenticationFailed")
    def authentication_failed(self) -> pulumi.Input['APISpecIntegrationMethodApicastOnPremAuthenticationSettingsErrorsAuthenticationFailedArgs']:
        return pulumi.get(self, "authentication_failed")

    @authentication_failed.setter
    def authentication_failed(self, value: pulumi.Input['APISpecIntegrationMethodApicastOnPremAuthenticationSettingsErrorsAuthenticationFailedArgs']):
        pulumi.set(self, "authentication_failed", value)

    @property
    @pulumi.getter(name="authenticationMissing")
    def authentication_missing(self) -> pulumi.Input['APISpecIntegrationMethodApicastOnPremAuthenticationSettingsErrorsAuthenticationMissingArgs']:
        return pulumi.get(self, "authentication_missing")

    @authentication_missing.setter
    def authentication_missing(self, value: pulumi.Input['APISpecIntegrationMethodApicastOnPremAuthenticationSettingsErrorsAuthenticationMissingArgs']):
        pulumi.set(self, "authentication_missing", value)


@pulumi.input_type
class APISpecIntegrationMethodApicastOnPremAuthenticationSettingsErrorsAuthenticationFailedArgs:
    def __init__(__self__, *,
                 content_type: pulumi.Input[str],
                 response_body: pulumi.Input[str],
                 response_code: pulumi.Input[int]):
        pulumi.set(__self__, "content_type", content_type)
        pulumi.set(__self__, "response_body", response_body)
        pulumi.set(__self__, "response_code", response_code)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="responseBody")
    def response_body(self) -> pulumi.Input[str]:
        return pulumi.get(self, "response_body")

    @response_body.setter
    def response_body(self, value: pulumi.Input[str]):
        pulumi.set(self, "response_body", value)

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> pulumi.Input[int]:
        return pulumi.get(self, "response_code")

    @response_code.setter
    def response_code(self, value: pulumi.Input[int]):
        pulumi.set(self, "response_code", value)


@pulumi.input_type
class APISpecIntegrationMethodApicastOnPremAuthenticationSettingsErrorsAuthenticationMissingArgs:
    def __init__(__self__, *,
                 content_type: pulumi.Input[str],
                 response_body: pulumi.Input[str],
                 response_code: pulumi.Input[int]):
        pulumi.set(__self__, "content_type", content_type)
        pulumi.set(__self__, "response_body", response_body)
        pulumi.set(__self__, "response_code", response_code)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="responseBody")
    def response_body(self) -> pulumi.Input[str]:
        return pulumi.get(self, "response_body")

    @response_body.setter
    def response_body(self, value: pulumi.Input[str]):
        pulumi.set(self, "response_body", value)

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> pulumi.Input[int]:
        return pulumi.get(self, "response_code")

    @response_code.setter
    def response_code(self, value: pulumi.Input[int]):
        pulumi.set(self, "response_code", value)


@pulumi.input_type
class APISpecIntegrationMethodApicastOnPremMappingRulesSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[Any]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[Any]]]:
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[Any]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class APISpecIntegrationMethodApicastOnPremPoliciesSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[Any]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[Any]]]:
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[Any]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class APISpecIntegrationMethodCodePluginArgs:
    def __init__(__self__, *,
                 authentication_settings: pulumi.Input['APISpecIntegrationMethodCodePluginAuthenticationSettingsArgs']):
        pulumi.set(__self__, "authentication_settings", authentication_settings)

    @property
    @pulumi.getter(name="authenticationSettings")
    def authentication_settings(self) -> pulumi.Input['APISpecIntegrationMethodCodePluginAuthenticationSettingsArgs']:
        return pulumi.get(self, "authentication_settings")

    @authentication_settings.setter
    def authentication_settings(self, value: pulumi.Input['APISpecIntegrationMethodCodePluginAuthenticationSettingsArgs']):
        pulumi.set(self, "authentication_settings", value)


@pulumi.input_type
class APISpecIntegrationMethodCodePluginAuthenticationSettingsArgs:
    def __init__(__self__, *,
                 credentials: pulumi.Input['APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentialsArgs']):
        pulumi.set(__self__, "credentials", credentials)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input['APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentialsArgs']:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input['APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentialsArgs']):
        pulumi.set(self, "credentials", value)


@pulumi.input_type
class APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentialsArgs:
    def __init__(__self__, *,
                 api_key: Optional[pulumi.Input['APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentialsApiKeyArgs']] = None,
                 app_id: Optional[pulumi.Input['APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentialsAppIDArgs']] = None,
                 open_id_connector: Optional[pulumi.Input['APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentialsOpenIDConnectorArgs']] = None):
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if open_id_connector is not None:
            pulumi.set(__self__, "open_id_connector", open_id_connector)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[pulumi.Input['APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentialsApiKeyArgs']]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: Optional[pulumi.Input['APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentialsApiKeyArgs']]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="appID")
    def app_id(self) -> Optional[pulumi.Input['APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentialsAppIDArgs']]:
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input['APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentialsAppIDArgs']]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter(name="openIDConnector")
    def open_id_connector(self) -> Optional[pulumi.Input['APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentialsOpenIDConnectorArgs']]:
        return pulumi.get(self, "open_id_connector")

    @open_id_connector.setter
    def open_id_connector(self, value: Optional[pulumi.Input['APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentialsOpenIDConnectorArgs']]):
        pulumi.set(self, "open_id_connector", value)


@pulumi.input_type
class APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentialsApiKeyArgs:
    def __init__(__self__, *,
                 auth_parameter_name: pulumi.Input[str],
                 credentials_location: pulumi.Input[str]):
        pulumi.set(__self__, "auth_parameter_name", auth_parameter_name)
        pulumi.set(__self__, "credentials_location", credentials_location)

    @property
    @pulumi.getter(name="authParameterName")
    def auth_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_parameter_name")

    @auth_parameter_name.setter
    def auth_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_parameter_name", value)

    @property
    @pulumi.getter(name="credentialsLocation")
    def credentials_location(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credentials_location")

    @credentials_location.setter
    def credentials_location(self, value: pulumi.Input[str]):
        pulumi.set(self, "credentials_location", value)


@pulumi.input_type
class APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentialsAppIDArgs:
    def __init__(__self__, *,
                 app_id_parameter_name: pulumi.Input[str],
                 app_key_parameter_name: pulumi.Input[str],
                 credentials_location: pulumi.Input[str]):
        pulumi.set(__self__, "app_id_parameter_name", app_id_parameter_name)
        pulumi.set(__self__, "app_key_parameter_name", app_key_parameter_name)
        pulumi.set(__self__, "credentials_location", credentials_location)

    @property
    @pulumi.getter(name="appIDParameterName")
    def app_id_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "app_id_parameter_name")

    @app_id_parameter_name.setter
    def app_id_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_id_parameter_name", value)

    @property
    @pulumi.getter(name="appKeyParameterName")
    def app_key_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "app_key_parameter_name")

    @app_key_parameter_name.setter
    def app_key_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_key_parameter_name", value)

    @property
    @pulumi.getter(name="credentialsLocation")
    def credentials_location(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credentials_location")

    @credentials_location.setter
    def credentials_location(self, value: pulumi.Input[str]):
        pulumi.set(self, "credentials_location", value)


@pulumi.input_type
class APISpecIntegrationMethodCodePluginAuthenticationSettingsCredentialsOpenIDConnectorArgs:
    def __init__(__self__, *,
                 credentials_location: pulumi.Input[str],
                 issuer: pulumi.Input[str]):
        pulumi.set(__self__, "credentials_location", credentials_location)
        pulumi.set(__self__, "issuer", issuer)

    @property
    @pulumi.getter(name="credentialsLocation")
    def credentials_location(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credentials_location")

    @credentials_location.setter
    def credentials_location(self, value: pulumi.Input[str]):
        pulumi.set(self, "credentials_location", value)

    @property
    @pulumi.getter
    def issuer(self) -> pulumi.Input[str]:
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: pulumi.Input[str]):
        pulumi.set(self, "issuer", value)


@pulumi.input_type
class APISpecMetricSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[Any]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[Any]]]:
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[Any]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class APISpecPlanSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[Any]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[Any]]]:
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[Any]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class BindingSpecArgs:
    def __init__(__self__, *,
                 credentials_ref: pulumi.Input['BindingSpecCredentialsRefArgs'],
                 api_selector: Optional[pulumi.Input['BindingSpecApiSelectorArgs']] = None):
        pulumi.set(__self__, "credentials_ref", credentials_ref)
        if api_selector is not None:
            pulumi.set(__self__, "api_selector", api_selector)

    @property
    @pulumi.getter(name="credentialsRef")
    def credentials_ref(self) -> pulumi.Input['BindingSpecCredentialsRefArgs']:
        return pulumi.get(self, "credentials_ref")

    @credentials_ref.setter
    def credentials_ref(self, value: pulumi.Input['BindingSpecCredentialsRefArgs']):
        pulumi.set(self, "credentials_ref", value)

    @property
    @pulumi.getter(name="apiSelector")
    def api_selector(self) -> Optional[pulumi.Input['BindingSpecApiSelectorArgs']]:
        return pulumi.get(self, "api_selector")

    @api_selector.setter
    def api_selector(self, value: Optional[pulumi.Input['BindingSpecApiSelectorArgs']]):
        pulumi.set(self, "api_selector", value)


@pulumi.input_type
class BindingSpecApiSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[Any]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[Any]]]:
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[Any]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class BindingSpecCredentialsRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class BindingStatusArgs:
    def __init__(__self__, *,
                 current_state: Optional[pulumi.Input[str]] = None,
                 desired_state: Optional[pulumi.Input[str]] = None,
                 last_sync: Optional[pulumi.Input['BindingStatusLastSyncArgs']] = None,
                 previous_state: Optional[pulumi.Input[str]] = None):
        if current_state is not None:
            pulumi.set(__self__, "current_state", current_state)
        if desired_state is not None:
            pulumi.set(__self__, "desired_state", desired_state)
        if last_sync is not None:
            pulumi.set(__self__, "last_sync", last_sync)
        if previous_state is not None:
            pulumi.set(__self__, "previous_state", previous_state)

    @property
    @pulumi.getter(name="currentState")
    def current_state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "current_state")

    @current_state.setter
    def current_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "current_state", value)

    @property
    @pulumi.getter(name="desiredState")
    def desired_state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "desired_state")

    @desired_state.setter
    def desired_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "desired_state", value)

    @property
    @pulumi.getter(name="lastSync")
    def last_sync(self) -> Optional[pulumi.Input['BindingStatusLastSyncArgs']]:
        return pulumi.get(self, "last_sync")

    @last_sync.setter
    def last_sync(self, value: Optional[pulumi.Input['BindingStatusLastSyncArgs']]):
        pulumi.set(self, "last_sync", value)

    @property
    @pulumi.getter(name="previousState")
    def previous_state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "previous_state")

    @previous_state.setter
    def previous_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "previous_state", value)


@pulumi.input_type
class BindingStatusLastSyncArgs:
    def __init__(__self__, *,
                 nanos: Optional[pulumi.Input[int]] = None,
                 seconds: Optional[pulumi.Input[int]] = None):
        if nanos is not None:
            pulumi.set(__self__, "nanos", nanos)
        if seconds is not None:
            pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def nanos(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "nanos")

    @nanos.setter
    def nanos(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nanos", value)

    @property
    @pulumi.getter
    def seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "seconds")

    @seconds.setter
    def seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seconds", value)


@pulumi.input_type
class LimitSpecArgs:
    def __init__(__self__, *,
                 max_value: pulumi.Input[int],
                 metric_ref: pulumi.Input['LimitSpecMetricRefArgs'],
                 period: pulumi.Input[str]):
        pulumi.set(__self__, "max_value", max_value)
        pulumi.set(__self__, "metric_ref", metric_ref)
        pulumi.set(__self__, "period", period)

    @property
    @pulumi.getter(name="maxValue")
    def max_value(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_value")

    @max_value.setter
    def max_value(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_value", value)

    @property
    @pulumi.getter(name="metricRef")
    def metric_ref(self) -> pulumi.Input['LimitSpecMetricRefArgs']:
        return pulumi.get(self, "metric_ref")

    @metric_ref.setter
    def metric_ref(self, value: pulumi.Input['LimitSpecMetricRefArgs']):
        pulumi.set(self, "metric_ref", value)

    @property
    @pulumi.getter
    def period(self) -> pulumi.Input[str]:
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: pulumi.Input[str]):
        pulumi.set(self, "period", value)


@pulumi.input_type
class LimitSpecMetricRefArgs:
    def __init__(__self__, *,
                 api_version: Optional[pulumi.Input[str]] = None,
                 field_path: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 resource_version: Optional[pulumi.Input[str]] = None,
                 uid: Optional[pulumi.Input[str]] = None):
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if field_path is not None:
            pulumi.set(__self__, "field_path", field_path)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_path", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_version")

    @resource_version.setter
    def resource_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_version", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uid", value)


@pulumi.input_type
class MappingRuleSpecArgs:
    def __init__(__self__, *,
                 increment: pulumi.Input[int],
                 method: pulumi.Input[str],
                 metric_ref: pulumi.Input['MappingRuleSpecMetricRefArgs'],
                 path: pulumi.Input[str]):
        pulumi.set(__self__, "increment", increment)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "metric_ref", metric_ref)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def increment(self) -> pulumi.Input[int]:
        return pulumi.get(self, "increment")

    @increment.setter
    def increment(self, value: pulumi.Input[int]):
        pulumi.set(self, "increment", value)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter(name="metricRef")
    def metric_ref(self) -> pulumi.Input['MappingRuleSpecMetricRefArgs']:
        return pulumi.get(self, "metric_ref")

    @metric_ref.setter
    def metric_ref(self, value: pulumi.Input['MappingRuleSpecMetricRefArgs']):
        pulumi.set(self, "metric_ref", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class MappingRuleSpecMetricRefArgs:
    def __init__(__self__, *,
                 api_version: Optional[pulumi.Input[str]] = None,
                 field_path: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 resource_version: Optional[pulumi.Input[str]] = None,
                 uid: Optional[pulumi.Input[str]] = None):
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if field_path is not None:
            pulumi.set(__self__, "field_path", field_path)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_path", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_version")

    @resource_version.setter
    def resource_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_version", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uid", value)


@pulumi.input_type
class MetricSpecArgs:
    def __init__(__self__, *,
                 description: pulumi.Input[str],
                 increment_hits: pulumi.Input[bool],
                 unit: pulumi.Input[str]):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "increment_hits", increment_hits)
        pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="incrementHits")
    def increment_hits(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "increment_hits")

    @increment_hits.setter
    def increment_hits(self, value: pulumi.Input[bool]):
        pulumi.set(self, "increment_hits", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)


@pulumi.input_type
class PlanSpecArgs:
    def __init__(__self__, *,
                 approval_required: pulumi.Input[bool],
                 default: pulumi.Input[bool],
                 limit_selector: pulumi.Input['PlanSpecLimitSelectorArgs'],
                 trial_period: pulumi.Input[int],
                 costs: Optional[pulumi.Input['PlanSpecCostsArgs']] = None):
        pulumi.set(__self__, "approval_required", approval_required)
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "limit_selector", limit_selector)
        pulumi.set(__self__, "trial_period", trial_period)
        if costs is not None:
            pulumi.set(__self__, "costs", costs)

    @property
    @pulumi.getter(name="approvalRequired")
    def approval_required(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "approval_required")

    @approval_required.setter
    def approval_required(self, value: pulumi.Input[bool]):
        pulumi.set(self, "approval_required", value)

    @property
    @pulumi.getter
    def default(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: pulumi.Input[bool]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter(name="limitSelector")
    def limit_selector(self) -> pulumi.Input['PlanSpecLimitSelectorArgs']:
        return pulumi.get(self, "limit_selector")

    @limit_selector.setter
    def limit_selector(self, value: pulumi.Input['PlanSpecLimitSelectorArgs']):
        pulumi.set(self, "limit_selector", value)

    @property
    @pulumi.getter(name="trialPeriod")
    def trial_period(self) -> pulumi.Input[int]:
        return pulumi.get(self, "trial_period")

    @trial_period.setter
    def trial_period(self, value: pulumi.Input[int]):
        pulumi.set(self, "trial_period", value)

    @property
    @pulumi.getter
    def costs(self) -> Optional[pulumi.Input['PlanSpecCostsArgs']]:
        return pulumi.get(self, "costs")

    @costs.setter
    def costs(self, value: Optional[pulumi.Input['PlanSpecCostsArgs']]):
        pulumi.set(self, "costs", value)


@pulumi.input_type
class PlanSpecCostsArgs:
    def __init__(__self__, *,
                 cost_month: Optional[pulumi.Input[float]] = None,
                 setup_fee: Optional[pulumi.Input[float]] = None):
        if cost_month is not None:
            pulumi.set(__self__, "cost_month", cost_month)
        if setup_fee is not None:
            pulumi.set(__self__, "setup_fee", setup_fee)

    @property
    @pulumi.getter(name="costMonth")
    def cost_month(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "cost_month")

    @cost_month.setter
    def cost_month(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "cost_month", value)

    @property
    @pulumi.getter(name="setupFee")
    def setup_fee(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "setup_fee")

    @setup_fee.setter
    def setup_fee(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "setup_fee", value)


@pulumi.input_type
class PlanSpecLimitSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[Any]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[Any]]]:
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[Any]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class TenantSpecArgs:
    def __init__(__self__, *,
                 email: pulumi.Input[str],
                 master_credentials_ref: pulumi.Input['TenantSpecMasterCredentialsRefArgs'],
                 organization_name: pulumi.Input[str],
                 password_credentials_ref: pulumi.Input['TenantSpecPasswordCredentialsRefArgs'],
                 system_master_url: pulumi.Input[str],
                 tenant_secret_ref: pulumi.Input['TenantSpecTenantSecretRefArgs'],
                 username: pulumi.Input[str]):
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "master_credentials_ref", master_credentials_ref)
        pulumi.set(__self__, "organization_name", organization_name)
        pulumi.set(__self__, "password_credentials_ref", password_credentials_ref)
        pulumi.set(__self__, "system_master_url", system_master_url)
        pulumi.set(__self__, "tenant_secret_ref", tenant_secret_ref)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="masterCredentialsRef")
    def master_credentials_ref(self) -> pulumi.Input['TenantSpecMasterCredentialsRefArgs']:
        return pulumi.get(self, "master_credentials_ref")

    @master_credentials_ref.setter
    def master_credentials_ref(self, value: pulumi.Input['TenantSpecMasterCredentialsRefArgs']):
        pulumi.set(self, "master_credentials_ref", value)

    @property
    @pulumi.getter(name="organizationName")
    def organization_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "organization_name")

    @organization_name.setter
    def organization_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "organization_name", value)

    @property
    @pulumi.getter(name="passwordCredentialsRef")
    def password_credentials_ref(self) -> pulumi.Input['TenantSpecPasswordCredentialsRefArgs']:
        return pulumi.get(self, "password_credentials_ref")

    @password_credentials_ref.setter
    def password_credentials_ref(self, value: pulumi.Input['TenantSpecPasswordCredentialsRefArgs']):
        pulumi.set(self, "password_credentials_ref", value)

    @property
    @pulumi.getter(name="systemMasterUrl")
    def system_master_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "system_master_url")

    @system_master_url.setter
    def system_master_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "system_master_url", value)

    @property
    @pulumi.getter(name="tenantSecretRef")
    def tenant_secret_ref(self) -> pulumi.Input['TenantSpecTenantSecretRefArgs']:
        return pulumi.get(self, "tenant_secret_ref")

    @tenant_secret_ref.setter
    def tenant_secret_ref(self, value: pulumi.Input['TenantSpecTenantSecretRefArgs']):
        pulumi.set(self, "tenant_secret_ref", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class TenantSpecMasterCredentialsRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class TenantSpecPasswordCredentialsRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class TenantSpecTenantSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class TenantStatusArgs:
    def __init__(__self__, *,
                 admin_id: pulumi.Input[int],
                 tenant_id: pulumi.Input[int]):
        pulumi.set(__self__, "admin_id", admin_id)
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="adminId")
    def admin_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "admin_id")

    @admin_id.setter
    def admin_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "admin_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "tenant_id", value)



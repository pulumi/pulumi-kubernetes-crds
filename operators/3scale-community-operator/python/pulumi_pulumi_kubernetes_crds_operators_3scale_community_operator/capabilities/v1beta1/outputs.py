# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'BackendSpec',
    'BackendSpecMappingRules',
    'BackendSpecMethods',
    'BackendSpecMetrics',
    'BackendSpecProviderAccountRef',
    'BackendStatus',
    'BackendStatusConditions',
    'ProductSpec',
    'ProductSpecApplicationPlans',
    'ProductSpecApplicationPlansLimits',
    'ProductSpecApplicationPlansLimitsMetricMethodRef',
    'ProductSpecApplicationPlansPricingRules',
    'ProductSpecApplicationPlansPricingRulesMetricMethodRef',
    'ProductSpecBackendUsages',
    'ProductSpecDeployment',
    'ProductSpecDeploymentApicastHosted',
    'ProductSpecDeploymentApicastHostedAuthentication',
    'ProductSpecDeploymentApicastHostedAuthenticationAppKeyAppID',
    'ProductSpecDeploymentApicastHostedAuthenticationAppKeyAppIDSecurity',
    'ProductSpecDeploymentApicastHostedAuthenticationUserkey',
    'ProductSpecDeploymentApicastHostedAuthenticationUserkeySecurity',
    'ProductSpecDeploymentApicastSelfManaged',
    'ProductSpecDeploymentApicastSelfManagedAuthentication',
    'ProductSpecDeploymentApicastSelfManagedAuthenticationAppKeyAppID',
    'ProductSpecDeploymentApicastSelfManagedAuthenticationAppKeyAppIDSecurity',
    'ProductSpecDeploymentApicastSelfManagedAuthenticationUserkey',
    'ProductSpecDeploymentApicastSelfManagedAuthenticationUserkeySecurity',
    'ProductSpecMappingRules',
    'ProductSpecMethods',
    'ProductSpecMetrics',
    'ProductSpecProviderAccountRef',
    'ProductStatus',
    'ProductStatusConditions',
]

@pulumi.output_type
class BackendSpec(dict):
    """
    BackendSpec defines the desired state of Backend
    """
    def __init__(__self__, *,
                 name: str,
                 private_base_url: str,
                 description: Optional[str] = None,
                 mapping_rules: Optional[Sequence['outputs.BackendSpecMappingRules']] = None,
                 methods: Optional[Mapping[str, 'outputs.BackendSpecMethods']] = None,
                 metrics: Optional[Mapping[str, 'outputs.BackendSpecMetrics']] = None,
                 provider_account_ref: Optional['outputs.BackendSpecProviderAccountRef'] = None,
                 system_name: Optional[str] = None):
        """
        BackendSpec defines the desired state of Backend
        :param str name: Name is human readable name for the backend
        :param str private_base_url: PrivateBaseURL Private Base URL of the API
        :param str description: Description is a human readable text of the backend
        :param Mapping[str, 'BackendSpecMethodsArgs'] methods: Methods Map: system_name -> MethodSpec system_name attr is unique for all metrics AND methods In other words, if metric's system_name is A, there is no metric or method with system_name A.
        :param Mapping[str, 'BackendSpecMetricsArgs'] metrics: Metrics Map: system_name -> MetricSpec system_name attr is unique for all metrics AND methods In other words, if metric's system_name is A, there is no metric or method with system_name A.
        :param 'BackendSpecProviderAccountRefArgs' provider_account_ref: ProviderAccountRef references account provider credentials
        :param str system_name: SystemName identifies uniquely the product within the account provider Default value will be sanitized Name
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "private_base_url", private_base_url)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if mapping_rules is not None:
            pulumi.set(__self__, "mapping_rules", mapping_rules)
        if methods is not None:
            pulumi.set(__self__, "methods", methods)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if provider_account_ref is not None:
            pulumi.set(__self__, "provider_account_ref", provider_account_ref)
        if system_name is not None:
            pulumi.set(__self__, "system_name", system_name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is human readable name for the backend
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="privateBaseURL")
    def private_base_url(self) -> str:
        """
        PrivateBaseURL Private Base URL of the API
        """
        return pulumi.get(self, "private_base_url")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description is a human readable text of the backend
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="mappingRules")
    def mapping_rules(self) -> Optional[Sequence['outputs.BackendSpecMappingRules']]:
        return pulumi.get(self, "mapping_rules")

    @property
    @pulumi.getter
    def methods(self) -> Optional[Mapping[str, 'outputs.BackendSpecMethods']]:
        """
        Methods Map: system_name -> MethodSpec system_name attr is unique for all metrics AND methods In other words, if metric's system_name is A, there is no metric or method with system_name A.
        """
        return pulumi.get(self, "methods")

    @property
    @pulumi.getter
    def metrics(self) -> Optional[Mapping[str, 'outputs.BackendSpecMetrics']]:
        """
        Metrics Map: system_name -> MetricSpec system_name attr is unique for all metrics AND methods In other words, if metric's system_name is A, there is no metric or method with system_name A.
        """
        return pulumi.get(self, "metrics")

    @property
    @pulumi.getter(name="providerAccountRef")
    def provider_account_ref(self) -> Optional['outputs.BackendSpecProviderAccountRef']:
        """
        ProviderAccountRef references account provider credentials
        """
        return pulumi.get(self, "provider_account_ref")

    @property
    @pulumi.getter(name="systemName")
    def system_name(self) -> Optional[str]:
        """
        SystemName identifies uniquely the product within the account provider Default value will be sanitized Name
        """
        return pulumi.get(self, "system_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackendSpecMappingRules(dict):
    """
    MappingRuleSpec defines the desired state of Product's MappingRule
    """
    def __init__(__self__, *,
                 http_method: str,
                 increment: int,
                 metric_method_ref: str,
                 pattern: str,
                 position: Optional[int] = None):
        """
        MappingRuleSpec defines the desired state of Product's MappingRule
        """
        pulumi.set(__self__, "http_method", http_method)
        pulumi.set(__self__, "increment", increment)
        pulumi.set(__self__, "metric_method_ref", metric_method_ref)
        pulumi.set(__self__, "pattern", pattern)
        if position is not None:
            pulumi.set(__self__, "position", position)

    @property
    @pulumi.getter(name="httpMethod")
    def http_method(self) -> str:
        return pulumi.get(self, "http_method")

    @property
    @pulumi.getter
    def increment(self) -> int:
        return pulumi.get(self, "increment")

    @property
    @pulumi.getter(name="metricMethodRef")
    def metric_method_ref(self) -> str:
        return pulumi.get(self, "metric_method_ref")

    @property
    @pulumi.getter
    def pattern(self) -> str:
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter
    def position(self) -> Optional[int]:
        return pulumi.get(self, "position")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackendSpecMethods(dict):
    """
    MethodSpec defines the desired state of Product's Method
    """
    def __init__(__self__, *,
                 friendly_name: str,
                 description: Optional[str] = None):
        """
        MethodSpec defines the desired state of Product's Method
        """
        pulumi.set(__self__, "friendly_name", friendly_name)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> str:
        return pulumi.get(self, "friendly_name")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackendSpecMetrics(dict):
    """
    MetricSpec defines the desired state of Product's Metric
    """
    def __init__(__self__, *,
                 friendly_name: str,
                 unit: str,
                 description: Optional[str] = None):
        """
        MetricSpec defines the desired state of Product's Metric
        """
        pulumi.set(__self__, "friendly_name", friendly_name)
        pulumi.set(__self__, "unit", unit)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> str:
        return pulumi.get(self, "friendly_name")

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackendSpecProviderAccountRef(dict):
    """
    ProviderAccountRef references account provider credentials
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        ProviderAccountRef references account provider credentials
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackendStatus(dict):
    """
    BackendStatus defines the observed state of Backend
    """
    def __init__(__self__, *,
                 backend_id: Optional[int] = None,
                 conditions: Optional[Sequence['outputs.BackendStatusConditions']] = None,
                 observed_generation: Optional[int] = None):
        """
        BackendStatus defines the observed state of Backend
        :param Sequence['BackendStatusConditionsArgs'] conditions: Current state of the 3scale backend. Conditions represent the latest available observations of an object's state
        :param int observed_generation: ObservedGeneration reflects the generation of the most recently observed Backend Spec.
        """
        if backend_id is not None:
            pulumi.set(__self__, "backend_id", backend_id)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)

    @property
    @pulumi.getter(name="backendId")
    def backend_id(self) -> Optional[int]:
        return pulumi.get(self, "backend_id")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.BackendStatusConditions']]:
        """
        Current state of the 3scale backend. Conditions represent the latest available observations of an object's state
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[int]:
        """
        ObservedGeneration reflects the generation of the most recently observed Backend Spec.
        """
        return pulumi.get(self, "observed_generation")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackendStatusConditions(dict):
    """
    Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind. 
     Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API.
    """
    def __init__(__self__, *,
                 status: str,
                 type: str,
                 last_transition_time: Optional[str] = None,
                 message: Optional[str] = None,
                 reason: Optional[str] = None):
        """
        Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind. 
         Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API.
        :param str type: ConditionType is the type of the condition and is typically a CamelCased word or short phrase. 
                Condition types should indicate state in the "abnormal-true" polarity. For example, if the condition indicates when a policy is invalid, the "is valid" case is probably the norm, so the condition should be called "Invalid".
        :param str reason: ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        ConditionType is the type of the condition and is typically a CamelCased word or short phrase. 
         Condition types should indicate state in the "abnormal-true" polarity. For example, if the condition indicates when a policy is invalid, the "is valid" case is probably the norm, so the condition should be called "Invalid".
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[str]:
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.
        """
        return pulumi.get(self, "reason")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ProductSpec(dict):
    """
    ProductSpec defines the desired state of Product
    """
    def __init__(__self__, *,
                 name: str,
                 application_plans: Optional[Mapping[str, 'outputs.ProductSpecApplicationPlans']] = None,
                 backend_usages: Optional[Mapping[str, 'outputs.ProductSpecBackendUsages']] = None,
                 deployment: Optional['outputs.ProductSpecDeployment'] = None,
                 description: Optional[str] = None,
                 mapping_rules: Optional[Sequence['outputs.ProductSpecMappingRules']] = None,
                 methods: Optional[Mapping[str, 'outputs.ProductSpecMethods']] = None,
                 metrics: Optional[Mapping[str, 'outputs.ProductSpecMetrics']] = None,
                 provider_account_ref: Optional['outputs.ProductSpecProviderAccountRef'] = None,
                 system_name: Optional[str] = None):
        """
        ProductSpec defines the desired state of Product
        :param str name: Name is human readable name for the product
        :param Mapping[str, 'ProductSpecApplicationPlansArgs'] application_plans: Application Plans Map: system_name -> Application Plan Spec
        :param Mapping[str, 'ProductSpecBackendUsagesArgs'] backend_usages: Backend usage will be a map of Map: system_name -> BackendUsageSpec Having system_name as the index, the structure ensures one backend is not used multiple times.
        :param 'ProductSpecDeploymentArgs' deployment: Deployment defined 3scale product deployment mode
        :param str description: Description is a human readable text of the product
        :param Sequence['ProductSpecMappingRulesArgs'] mapping_rules: Mapping Rules Array: MappingRule Spec
        :param Mapping[str, 'ProductSpecMethodsArgs'] methods: Methods Map: system_name -> MethodSpec system_name attr is unique for all metrics AND methods In other words, if metric's system_name is A, there is no metric or method with system_name A.
        :param Mapping[str, 'ProductSpecMetricsArgs'] metrics: Metrics Map: system_name -> MetricSpec system_name attr is unique for all metrics AND methods In other words, if metric's system_name is A, there is no metric or method with system_name A.
        :param 'ProductSpecProviderAccountRefArgs' provider_account_ref: ProviderAccountRef references account provider credentials
        :param str system_name: SystemName identifies uniquely the product within the account provider Default value will be sanitized Name
        """
        pulumi.set(__self__, "name", name)
        if application_plans is not None:
            pulumi.set(__self__, "application_plans", application_plans)
        if backend_usages is not None:
            pulumi.set(__self__, "backend_usages", backend_usages)
        if deployment is not None:
            pulumi.set(__self__, "deployment", deployment)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if mapping_rules is not None:
            pulumi.set(__self__, "mapping_rules", mapping_rules)
        if methods is not None:
            pulumi.set(__self__, "methods", methods)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if provider_account_ref is not None:
            pulumi.set(__self__, "provider_account_ref", provider_account_ref)
        if system_name is not None:
            pulumi.set(__self__, "system_name", system_name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name is human readable name for the product
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="applicationPlans")
    def application_plans(self) -> Optional[Mapping[str, 'outputs.ProductSpecApplicationPlans']]:
        """
        Application Plans Map: system_name -> Application Plan Spec
        """
        return pulumi.get(self, "application_plans")

    @property
    @pulumi.getter(name="backendUsages")
    def backend_usages(self) -> Optional[Mapping[str, 'outputs.ProductSpecBackendUsages']]:
        """
        Backend usage will be a map of Map: system_name -> BackendUsageSpec Having system_name as the index, the structure ensures one backend is not used multiple times.
        """
        return pulumi.get(self, "backend_usages")

    @property
    @pulumi.getter
    def deployment(self) -> Optional['outputs.ProductSpecDeployment']:
        """
        Deployment defined 3scale product deployment mode
        """
        return pulumi.get(self, "deployment")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description is a human readable text of the product
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="mappingRules")
    def mapping_rules(self) -> Optional[Sequence['outputs.ProductSpecMappingRules']]:
        """
        Mapping Rules Array: MappingRule Spec
        """
        return pulumi.get(self, "mapping_rules")

    @property
    @pulumi.getter
    def methods(self) -> Optional[Mapping[str, 'outputs.ProductSpecMethods']]:
        """
        Methods Map: system_name -> MethodSpec system_name attr is unique for all metrics AND methods In other words, if metric's system_name is A, there is no metric or method with system_name A.
        """
        return pulumi.get(self, "methods")

    @property
    @pulumi.getter
    def metrics(self) -> Optional[Mapping[str, 'outputs.ProductSpecMetrics']]:
        """
        Metrics Map: system_name -> MetricSpec system_name attr is unique for all metrics AND methods In other words, if metric's system_name is A, there is no metric or method with system_name A.
        """
        return pulumi.get(self, "metrics")

    @property
    @pulumi.getter(name="providerAccountRef")
    def provider_account_ref(self) -> Optional['outputs.ProductSpecProviderAccountRef']:
        """
        ProviderAccountRef references account provider credentials
        """
        return pulumi.get(self, "provider_account_ref")

    @property
    @pulumi.getter(name="systemName")
    def system_name(self) -> Optional[str]:
        """
        SystemName identifies uniquely the product within the account provider Default value will be sanitized Name
        """
        return pulumi.get(self, "system_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ProductSpecApplicationPlans(dict):
    """
    ApplicationPlanSpec defines the desired state of Product's Application Plan
    """
    def __init__(__self__, *,
                 apps_require_approval: Optional[bool] = None,
                 cost_month: Optional[str] = None,
                 limits: Optional[Sequence['outputs.ProductSpecApplicationPlansLimits']] = None,
                 name: Optional[str] = None,
                 pricing_rules: Optional[Sequence['outputs.ProductSpecApplicationPlansPricingRules']] = None,
                 setup_fee: Optional[str] = None,
                 trial_period: Optional[int] = None):
        """
        ApplicationPlanSpec defines the desired state of Product's Application Plan
        :param bool apps_require_approval: Set whether or not applications can be created on demand or if approval is required from you before they are activated.
        :param str cost_month: Cost per Month (USD)
        :param Sequence['ProductSpecApplicationPlansLimitsArgs'] limits: Limits
        :param Sequence['ProductSpecApplicationPlansPricingRulesArgs'] pricing_rules: Pricing Rules
        :param str setup_fee: Setup fee (USD)
        :param int trial_period: Trial Period (days)
        """
        if apps_require_approval is not None:
            pulumi.set(__self__, "apps_require_approval", apps_require_approval)
        if cost_month is not None:
            pulumi.set(__self__, "cost_month", cost_month)
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pricing_rules is not None:
            pulumi.set(__self__, "pricing_rules", pricing_rules)
        if setup_fee is not None:
            pulumi.set(__self__, "setup_fee", setup_fee)
        if trial_period is not None:
            pulumi.set(__self__, "trial_period", trial_period)

    @property
    @pulumi.getter(name="appsRequireApproval")
    def apps_require_approval(self) -> Optional[bool]:
        """
        Set whether or not applications can be created on demand or if approval is required from you before they are activated.
        """
        return pulumi.get(self, "apps_require_approval")

    @property
    @pulumi.getter(name="costMonth")
    def cost_month(self) -> Optional[str]:
        """
        Cost per Month (USD)
        """
        return pulumi.get(self, "cost_month")

    @property
    @pulumi.getter
    def limits(self) -> Optional[Sequence['outputs.ProductSpecApplicationPlansLimits']]:
        """
        Limits
        """
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pricingRules")
    def pricing_rules(self) -> Optional[Sequence['outputs.ProductSpecApplicationPlansPricingRules']]:
        """
        Pricing Rules
        """
        return pulumi.get(self, "pricing_rules")

    @property
    @pulumi.getter(name="setupFee")
    def setup_fee(self) -> Optional[str]:
        """
        Setup fee (USD)
        """
        return pulumi.get(self, "setup_fee")

    @property
    @pulumi.getter(name="trialPeriod")
    def trial_period(self) -> Optional[int]:
        """
        Trial Period (days)
        """
        return pulumi.get(self, "trial_period")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ProductSpecApplicationPlansLimits(dict):
    """
    LimitSpec defines the maximum value a metric can take on a contract before the user is no longer authorized to use resources. Once a limit has been passed in a given period, reject messages will be issued if the service is accessed under this contract.
    """
    def __init__(__self__, *,
                 metric_method_ref: 'outputs.ProductSpecApplicationPlansLimitsMetricMethodRef',
                 period: str,
                 value: int):
        """
        LimitSpec defines the maximum value a metric can take on a contract before the user is no longer authorized to use resources. Once a limit has been passed in a given period, reject messages will be issued if the service is accessed under this contract.
        :param 'ProductSpecApplicationPlansLimitsMetricMethodRefArgs' metric_method_ref: Metric or Method Reference
        :param str period: Limit Period
        :param int value: Limit Value
        """
        pulumi.set(__self__, "metric_method_ref", metric_method_ref)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="metricMethodRef")
    def metric_method_ref(self) -> 'outputs.ProductSpecApplicationPlansLimitsMetricMethodRef':
        """
        Metric or Method Reference
        """
        return pulumi.get(self, "metric_method_ref")

    @property
    @pulumi.getter
    def period(self) -> str:
        """
        Limit Period
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter
    def value(self) -> int:
        """
        Limit Value
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ProductSpecApplicationPlansLimitsMetricMethodRef(dict):
    """
    Metric or Method Reference
    """
    def __init__(__self__, *,
                 system_name: str,
                 backend: Optional[str] = None):
        """
        Metric or Method Reference
        :param str system_name: SystemName identifies uniquely the metric or methods
        :param str backend: BackendSystemName identifies uniquely the backend Backend reference must be used by the product
        """
        pulumi.set(__self__, "system_name", system_name)
        if backend is not None:
            pulumi.set(__self__, "backend", backend)

    @property
    @pulumi.getter(name="systemName")
    def system_name(self) -> str:
        """
        SystemName identifies uniquely the metric or methods
        """
        return pulumi.get(self, "system_name")

    @property
    @pulumi.getter
    def backend(self) -> Optional[str]:
        """
        BackendSystemName identifies uniquely the backend Backend reference must be used by the product
        """
        return pulumi.get(self, "backend")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ProductSpecApplicationPlansPricingRules(dict):
    """
    PricingRuleSpec defines the cost of each operation performed on an API. Multiple pricing rules on the same metric divide up the ranges of when a pricing rule applies.
    """
    def __init__(__self__, *,
                 from_: int,
                 metric_method_ref: 'outputs.ProductSpecApplicationPlansPricingRulesMetricMethodRef',
                 price_per_unit: str,
                 to: int):
        """
        PricingRuleSpec defines the cost of each operation performed on an API. Multiple pricing rules on the same metric divide up the ranges of when a pricing rule applies.
        :param int from_: Range From
        :param 'ProductSpecApplicationPlansPricingRulesMetricMethodRefArgs' metric_method_ref: Metric or Method Reference
        :param str price_per_unit: Price per unit (USD)
        :param int to: Range To
        """
        pulumi.set(__self__, "from_", from_)
        pulumi.set(__self__, "metric_method_ref", metric_method_ref)
        pulumi.set(__self__, "price_per_unit", price_per_unit)
        pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> int:
        """
        Range From
        """
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter(name="metricMethodRef")
    def metric_method_ref(self) -> 'outputs.ProductSpecApplicationPlansPricingRulesMetricMethodRef':
        """
        Metric or Method Reference
        """
        return pulumi.get(self, "metric_method_ref")

    @property
    @pulumi.getter(name="pricePerUnit")
    def price_per_unit(self) -> str:
        """
        Price per unit (USD)
        """
        return pulumi.get(self, "price_per_unit")

    @property
    @pulumi.getter
    def to(self) -> int:
        """
        Range To
        """
        return pulumi.get(self, "to")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ProductSpecApplicationPlansPricingRulesMetricMethodRef(dict):
    """
    Metric or Method Reference
    """
    def __init__(__self__, *,
                 system_name: str,
                 backend: Optional[str] = None):
        """
        Metric or Method Reference
        :param str system_name: SystemName identifies uniquely the metric or methods
        :param str backend: BackendSystemName identifies uniquely the backend Backend reference must be used by the product
        """
        pulumi.set(__self__, "system_name", system_name)
        if backend is not None:
            pulumi.set(__self__, "backend", backend)

    @property
    @pulumi.getter(name="systemName")
    def system_name(self) -> str:
        """
        SystemName identifies uniquely the metric or methods
        """
        return pulumi.get(self, "system_name")

    @property
    @pulumi.getter
    def backend(self) -> Optional[str]:
        """
        BackendSystemName identifies uniquely the backend Backend reference must be used by the product
        """
        return pulumi.get(self, "backend")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ProductSpecBackendUsages(dict):
    """
    BackendUsageSpec defines the desired state of Product's Backend Usages
    """
    def __init__(__self__, *,
                 path: str):
        """
        BackendUsageSpec defines the desired state of Product's Backend Usages
        """
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ProductSpecDeployment(dict):
    """
    Deployment defined 3scale product deployment mode
    """
    def __init__(__self__, *,
                 apicast_hosted: Optional['outputs.ProductSpecDeploymentApicastHosted'] = None,
                 apicast_self_managed: Optional['outputs.ProductSpecDeploymentApicastSelfManaged'] = None):
        """
        Deployment defined 3scale product deployment mode
        :param 'ProductSpecDeploymentApicastHostedArgs' apicast_hosted: ApicastHostedSpec defines the desired state of Product Apicast Hosted
        :param 'ProductSpecDeploymentApicastSelfManagedArgs' apicast_self_managed: ApicastSelfManagedSpec defines the desired state of Product Apicast Self Managed
        """
        if apicast_hosted is not None:
            pulumi.set(__self__, "apicast_hosted", apicast_hosted)
        if apicast_self_managed is not None:
            pulumi.set(__self__, "apicast_self_managed", apicast_self_managed)

    @property
    @pulumi.getter(name="apicastHosted")
    def apicast_hosted(self) -> Optional['outputs.ProductSpecDeploymentApicastHosted']:
        """
        ApicastHostedSpec defines the desired state of Product Apicast Hosted
        """
        return pulumi.get(self, "apicast_hosted")

    @property
    @pulumi.getter(name="apicastSelfManaged")
    def apicast_self_managed(self) -> Optional['outputs.ProductSpecDeploymentApicastSelfManaged']:
        """
        ApicastSelfManagedSpec defines the desired state of Product Apicast Self Managed
        """
        return pulumi.get(self, "apicast_self_managed")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ProductSpecDeploymentApicastHosted(dict):
    """
    ApicastHostedSpec defines the desired state of Product Apicast Hosted
    """
    def __init__(__self__, *,
                 authentication: Optional['outputs.ProductSpecDeploymentApicastHostedAuthentication'] = None):
        """
        ApicastHostedSpec defines the desired state of Product Apicast Hosted
        :param 'ProductSpecDeploymentApicastHostedAuthenticationArgs' authentication: AuthenticationSpec defines the desired state of Product Authentication
        """
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)

    @property
    @pulumi.getter
    def authentication(self) -> Optional['outputs.ProductSpecDeploymentApicastHostedAuthentication']:
        """
        AuthenticationSpec defines the desired state of Product Authentication
        """
        return pulumi.get(self, "authentication")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ProductSpecDeploymentApicastHostedAuthentication(dict):
    """
    AuthenticationSpec defines the desired state of Product Authentication
    """
    def __init__(__self__, *,
                 app_key_app_id: Optional['outputs.ProductSpecDeploymentApicastHostedAuthenticationAppKeyAppID'] = None,
                 userkey: Optional['outputs.ProductSpecDeploymentApicastHostedAuthenticationUserkey'] = None):
        """
        AuthenticationSpec defines the desired state of Product Authentication
        :param 'ProductSpecDeploymentApicastHostedAuthenticationAppKeyAppIDArgs' app_key_app_id: AppKeyAppIDAuthenticationSpec defines the desired state of AppKey&AppId Authentication
        :param 'ProductSpecDeploymentApicastHostedAuthenticationUserkeyArgs' userkey: UserKeyAuthenticationSpec defines the desired state of User Key Authentication
        """
        if app_key_app_id is not None:
            pulumi.set(__self__, "app_key_app_id", app_key_app_id)
        if userkey is not None:
            pulumi.set(__self__, "userkey", userkey)

    @property
    @pulumi.getter(name="appKeyAppID")
    def app_key_app_id(self) -> Optional['outputs.ProductSpecDeploymentApicastHostedAuthenticationAppKeyAppID']:
        """
        AppKeyAppIDAuthenticationSpec defines the desired state of AppKey&AppId Authentication
        """
        return pulumi.get(self, "app_key_app_id")

    @property
    @pulumi.getter
    def userkey(self) -> Optional['outputs.ProductSpecDeploymentApicastHostedAuthenticationUserkey']:
        """
        UserKeyAuthenticationSpec defines the desired state of User Key Authentication
        """
        return pulumi.get(self, "userkey")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ProductSpecDeploymentApicastHostedAuthenticationAppKeyAppID(dict):
    """
    AppKeyAppIDAuthenticationSpec defines the desired state of AppKey&AppId Authentication
    """
    def __init__(__self__, *,
                 app_id: Optional[str] = None,
                 app_key: Optional[str] = None,
                 credentials: Optional[str] = None,
                 security: Optional['outputs.ProductSpecDeploymentApicastHostedAuthenticationAppKeyAppIDSecurity'] = None):
        """
        AppKeyAppIDAuthenticationSpec defines the desired state of AppKey&AppId Authentication
        :param str app_id: AppID is the name of the parameter that acts of behalf of app id
        :param str app_key: AppKey is the name of the parameter that acts of behalf of app key
        :param str credentials: CredentialsLoc available options: headers: As HTTP Headers query: As query parameters (GET) or body parameters (POST/PUT/DELETE) authorization: As HTTP Basic Authentication
        :param 'ProductSpecDeploymentApicastHostedAuthenticationAppKeyAppIDSecurityArgs' security: SecuritySpec defines the desired state of Authentication Security
        """
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if app_key is not None:
            pulumi.set(__self__, "app_key", app_key)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if security is not None:
            pulumi.set(__self__, "security", security)

    @property
    @pulumi.getter(name="appID")
    def app_id(self) -> Optional[str]:
        """
        AppID is the name of the parameter that acts of behalf of app id
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appKey")
    def app_key(self) -> Optional[str]:
        """
        AppKey is the name of the parameter that acts of behalf of app key
        """
        return pulumi.get(self, "app_key")

    @property
    @pulumi.getter
    def credentials(self) -> Optional[str]:
        """
        CredentialsLoc available options: headers: As HTTP Headers query: As query parameters (GET) or body parameters (POST/PUT/DELETE) authorization: As HTTP Basic Authentication
        """
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def security(self) -> Optional['outputs.ProductSpecDeploymentApicastHostedAuthenticationAppKeyAppIDSecurity']:
        """
        SecuritySpec defines the desired state of Authentication Security
        """
        return pulumi.get(self, "security")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ProductSpecDeploymentApicastHostedAuthenticationAppKeyAppIDSecurity(dict):
    """
    SecuritySpec defines the desired state of Authentication Security
    """
    def __init__(__self__, *,
                 host_header: Optional[str] = None,
                 secret_token: Optional[str] = None):
        """
        SecuritySpec defines the desired state of Authentication Security
        :param str host_header: HostHeader Lets you define a custom Host request header. This is needed if your API backend only accepts traffic from a specific host.
        :param str secret_token: SecretToken Enables you to block any direct developer requests to your API backend; each 3scale API gateway call to your API backend contains a request header called X-3scale-proxy-secret-token. The value of this header can be set by you here. It's up to you ensure your backend only allows calls with this secret header.
        """
        if host_header is not None:
            pulumi.set(__self__, "host_header", host_header)
        if secret_token is not None:
            pulumi.set(__self__, "secret_token", secret_token)

    @property
    @pulumi.getter(name="hostHeader")
    def host_header(self) -> Optional[str]:
        """
        HostHeader Lets you define a custom Host request header. This is needed if your API backend only accepts traffic from a specific host.
        """
        return pulumi.get(self, "host_header")

    @property
    @pulumi.getter(name="secretToken")
    def secret_token(self) -> Optional[str]:
        """
        SecretToken Enables you to block any direct developer requests to your API backend; each 3scale API gateway call to your API backend contains a request header called X-3scale-proxy-secret-token. The value of this header can be set by you here. It's up to you ensure your backend only allows calls with this secret header.
        """
        return pulumi.get(self, "secret_token")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ProductSpecDeploymentApicastHostedAuthenticationUserkey(dict):
    """
    UserKeyAuthenticationSpec defines the desired state of User Key Authentication
    """
    def __init__(__self__, *,
                 auth_user_key: Optional[str] = None,
                 credentials: Optional[str] = None,
                 security: Optional['outputs.ProductSpecDeploymentApicastHostedAuthenticationUserkeySecurity'] = None):
        """
        UserKeyAuthenticationSpec defines the desired state of User Key Authentication
        :param str credentials: Credentials Location available options: headers: As HTTP Headers query: As query parameters (GET) or body parameters (POST/PUT/DELETE) authorization: As HTTP Basic Authentication
        :param 'ProductSpecDeploymentApicastHostedAuthenticationUserkeySecurityArgs' security: SecuritySpec defines the desired state of Authentication Security
        """
        if auth_user_key is not None:
            pulumi.set(__self__, "auth_user_key", auth_user_key)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if security is not None:
            pulumi.set(__self__, "security", security)

    @property
    @pulumi.getter(name="authUserKey")
    def auth_user_key(self) -> Optional[str]:
        return pulumi.get(self, "auth_user_key")

    @property
    @pulumi.getter
    def credentials(self) -> Optional[str]:
        """
        Credentials Location available options: headers: As HTTP Headers query: As query parameters (GET) or body parameters (POST/PUT/DELETE) authorization: As HTTP Basic Authentication
        """
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def security(self) -> Optional['outputs.ProductSpecDeploymentApicastHostedAuthenticationUserkeySecurity']:
        """
        SecuritySpec defines the desired state of Authentication Security
        """
        return pulumi.get(self, "security")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ProductSpecDeploymentApicastHostedAuthenticationUserkeySecurity(dict):
    """
    SecuritySpec defines the desired state of Authentication Security
    """
    def __init__(__self__, *,
                 host_header: Optional[str] = None,
                 secret_token: Optional[str] = None):
        """
        SecuritySpec defines the desired state of Authentication Security
        :param str host_header: HostHeader Lets you define a custom Host request header. This is needed if your API backend only accepts traffic from a specific host.
        :param str secret_token: SecretToken Enables you to block any direct developer requests to your API backend; each 3scale API gateway call to your API backend contains a request header called X-3scale-proxy-secret-token. The value of this header can be set by you here. It's up to you ensure your backend only allows calls with this secret header.
        """
        if host_header is not None:
            pulumi.set(__self__, "host_header", host_header)
        if secret_token is not None:
            pulumi.set(__self__, "secret_token", secret_token)

    @property
    @pulumi.getter(name="hostHeader")
    def host_header(self) -> Optional[str]:
        """
        HostHeader Lets you define a custom Host request header. This is needed if your API backend only accepts traffic from a specific host.
        """
        return pulumi.get(self, "host_header")

    @property
    @pulumi.getter(name="secretToken")
    def secret_token(self) -> Optional[str]:
        """
        SecretToken Enables you to block any direct developer requests to your API backend; each 3scale API gateway call to your API backend contains a request header called X-3scale-proxy-secret-token. The value of this header can be set by you here. It's up to you ensure your backend only allows calls with this secret header.
        """
        return pulumi.get(self, "secret_token")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ProductSpecDeploymentApicastSelfManaged(dict):
    """
    ApicastSelfManagedSpec defines the desired state of Product Apicast Self Managed
    """
    def __init__(__self__, *,
                 authentication: Optional['outputs.ProductSpecDeploymentApicastSelfManagedAuthentication'] = None,
                 production_public_base_url: Optional[str] = None,
                 staging_public_base_url: Optional[str] = None):
        """
        ApicastSelfManagedSpec defines the desired state of Product Apicast Self Managed
        :param 'ProductSpecDeploymentApicastSelfManagedAuthenticationArgs' authentication: AuthenticationSpec defines the desired state of Product Authentication
        """
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if production_public_base_url is not None:
            pulumi.set(__self__, "production_public_base_url", production_public_base_url)
        if staging_public_base_url is not None:
            pulumi.set(__self__, "staging_public_base_url", staging_public_base_url)

    @property
    @pulumi.getter
    def authentication(self) -> Optional['outputs.ProductSpecDeploymentApicastSelfManagedAuthentication']:
        """
        AuthenticationSpec defines the desired state of Product Authentication
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="productionPublicBaseURL")
    def production_public_base_url(self) -> Optional[str]:
        return pulumi.get(self, "production_public_base_url")

    @property
    @pulumi.getter(name="stagingPublicBaseURL")
    def staging_public_base_url(self) -> Optional[str]:
        return pulumi.get(self, "staging_public_base_url")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ProductSpecDeploymentApicastSelfManagedAuthentication(dict):
    """
    AuthenticationSpec defines the desired state of Product Authentication
    """
    def __init__(__self__, *,
                 app_key_app_id: Optional['outputs.ProductSpecDeploymentApicastSelfManagedAuthenticationAppKeyAppID'] = None,
                 userkey: Optional['outputs.ProductSpecDeploymentApicastSelfManagedAuthenticationUserkey'] = None):
        """
        AuthenticationSpec defines the desired state of Product Authentication
        :param 'ProductSpecDeploymentApicastSelfManagedAuthenticationAppKeyAppIDArgs' app_key_app_id: AppKeyAppIDAuthenticationSpec defines the desired state of AppKey&AppId Authentication
        :param 'ProductSpecDeploymentApicastSelfManagedAuthenticationUserkeyArgs' userkey: UserKeyAuthenticationSpec defines the desired state of User Key Authentication
        """
        if app_key_app_id is not None:
            pulumi.set(__self__, "app_key_app_id", app_key_app_id)
        if userkey is not None:
            pulumi.set(__self__, "userkey", userkey)

    @property
    @pulumi.getter(name="appKeyAppID")
    def app_key_app_id(self) -> Optional['outputs.ProductSpecDeploymentApicastSelfManagedAuthenticationAppKeyAppID']:
        """
        AppKeyAppIDAuthenticationSpec defines the desired state of AppKey&AppId Authentication
        """
        return pulumi.get(self, "app_key_app_id")

    @property
    @pulumi.getter
    def userkey(self) -> Optional['outputs.ProductSpecDeploymentApicastSelfManagedAuthenticationUserkey']:
        """
        UserKeyAuthenticationSpec defines the desired state of User Key Authentication
        """
        return pulumi.get(self, "userkey")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ProductSpecDeploymentApicastSelfManagedAuthenticationAppKeyAppID(dict):
    """
    AppKeyAppIDAuthenticationSpec defines the desired state of AppKey&AppId Authentication
    """
    def __init__(__self__, *,
                 app_id: Optional[str] = None,
                 app_key: Optional[str] = None,
                 credentials: Optional[str] = None,
                 security: Optional['outputs.ProductSpecDeploymentApicastSelfManagedAuthenticationAppKeyAppIDSecurity'] = None):
        """
        AppKeyAppIDAuthenticationSpec defines the desired state of AppKey&AppId Authentication
        :param str app_id: AppID is the name of the parameter that acts of behalf of app id
        :param str app_key: AppKey is the name of the parameter that acts of behalf of app key
        :param str credentials: CredentialsLoc available options: headers: As HTTP Headers query: As query parameters (GET) or body parameters (POST/PUT/DELETE) authorization: As HTTP Basic Authentication
        :param 'ProductSpecDeploymentApicastSelfManagedAuthenticationAppKeyAppIDSecurityArgs' security: SecuritySpec defines the desired state of Authentication Security
        """
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if app_key is not None:
            pulumi.set(__self__, "app_key", app_key)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if security is not None:
            pulumi.set(__self__, "security", security)

    @property
    @pulumi.getter(name="appID")
    def app_id(self) -> Optional[str]:
        """
        AppID is the name of the parameter that acts of behalf of app id
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appKey")
    def app_key(self) -> Optional[str]:
        """
        AppKey is the name of the parameter that acts of behalf of app key
        """
        return pulumi.get(self, "app_key")

    @property
    @pulumi.getter
    def credentials(self) -> Optional[str]:
        """
        CredentialsLoc available options: headers: As HTTP Headers query: As query parameters (GET) or body parameters (POST/PUT/DELETE) authorization: As HTTP Basic Authentication
        """
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def security(self) -> Optional['outputs.ProductSpecDeploymentApicastSelfManagedAuthenticationAppKeyAppIDSecurity']:
        """
        SecuritySpec defines the desired state of Authentication Security
        """
        return pulumi.get(self, "security")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ProductSpecDeploymentApicastSelfManagedAuthenticationAppKeyAppIDSecurity(dict):
    """
    SecuritySpec defines the desired state of Authentication Security
    """
    def __init__(__self__, *,
                 host_header: Optional[str] = None,
                 secret_token: Optional[str] = None):
        """
        SecuritySpec defines the desired state of Authentication Security
        :param str host_header: HostHeader Lets you define a custom Host request header. This is needed if your API backend only accepts traffic from a specific host.
        :param str secret_token: SecretToken Enables you to block any direct developer requests to your API backend; each 3scale API gateway call to your API backend contains a request header called X-3scale-proxy-secret-token. The value of this header can be set by you here. It's up to you ensure your backend only allows calls with this secret header.
        """
        if host_header is not None:
            pulumi.set(__self__, "host_header", host_header)
        if secret_token is not None:
            pulumi.set(__self__, "secret_token", secret_token)

    @property
    @pulumi.getter(name="hostHeader")
    def host_header(self) -> Optional[str]:
        """
        HostHeader Lets you define a custom Host request header. This is needed if your API backend only accepts traffic from a specific host.
        """
        return pulumi.get(self, "host_header")

    @property
    @pulumi.getter(name="secretToken")
    def secret_token(self) -> Optional[str]:
        """
        SecretToken Enables you to block any direct developer requests to your API backend; each 3scale API gateway call to your API backend contains a request header called X-3scale-proxy-secret-token. The value of this header can be set by you here. It's up to you ensure your backend only allows calls with this secret header.
        """
        return pulumi.get(self, "secret_token")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ProductSpecDeploymentApicastSelfManagedAuthenticationUserkey(dict):
    """
    UserKeyAuthenticationSpec defines the desired state of User Key Authentication
    """
    def __init__(__self__, *,
                 auth_user_key: Optional[str] = None,
                 credentials: Optional[str] = None,
                 security: Optional['outputs.ProductSpecDeploymentApicastSelfManagedAuthenticationUserkeySecurity'] = None):
        """
        UserKeyAuthenticationSpec defines the desired state of User Key Authentication
        :param str credentials: Credentials Location available options: headers: As HTTP Headers query: As query parameters (GET) or body parameters (POST/PUT/DELETE) authorization: As HTTP Basic Authentication
        :param 'ProductSpecDeploymentApicastSelfManagedAuthenticationUserkeySecurityArgs' security: SecuritySpec defines the desired state of Authentication Security
        """
        if auth_user_key is not None:
            pulumi.set(__self__, "auth_user_key", auth_user_key)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if security is not None:
            pulumi.set(__self__, "security", security)

    @property
    @pulumi.getter(name="authUserKey")
    def auth_user_key(self) -> Optional[str]:
        return pulumi.get(self, "auth_user_key")

    @property
    @pulumi.getter
    def credentials(self) -> Optional[str]:
        """
        Credentials Location available options: headers: As HTTP Headers query: As query parameters (GET) or body parameters (POST/PUT/DELETE) authorization: As HTTP Basic Authentication
        """
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def security(self) -> Optional['outputs.ProductSpecDeploymentApicastSelfManagedAuthenticationUserkeySecurity']:
        """
        SecuritySpec defines the desired state of Authentication Security
        """
        return pulumi.get(self, "security")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ProductSpecDeploymentApicastSelfManagedAuthenticationUserkeySecurity(dict):
    """
    SecuritySpec defines the desired state of Authentication Security
    """
    def __init__(__self__, *,
                 host_header: Optional[str] = None,
                 secret_token: Optional[str] = None):
        """
        SecuritySpec defines the desired state of Authentication Security
        :param str host_header: HostHeader Lets you define a custom Host request header. This is needed if your API backend only accepts traffic from a specific host.
        :param str secret_token: SecretToken Enables you to block any direct developer requests to your API backend; each 3scale API gateway call to your API backend contains a request header called X-3scale-proxy-secret-token. The value of this header can be set by you here. It's up to you ensure your backend only allows calls with this secret header.
        """
        if host_header is not None:
            pulumi.set(__self__, "host_header", host_header)
        if secret_token is not None:
            pulumi.set(__self__, "secret_token", secret_token)

    @property
    @pulumi.getter(name="hostHeader")
    def host_header(self) -> Optional[str]:
        """
        HostHeader Lets you define a custom Host request header. This is needed if your API backend only accepts traffic from a specific host.
        """
        return pulumi.get(self, "host_header")

    @property
    @pulumi.getter(name="secretToken")
    def secret_token(self) -> Optional[str]:
        """
        SecretToken Enables you to block any direct developer requests to your API backend; each 3scale API gateway call to your API backend contains a request header called X-3scale-proxy-secret-token. The value of this header can be set by you here. It's up to you ensure your backend only allows calls with this secret header.
        """
        return pulumi.get(self, "secret_token")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ProductSpecMappingRules(dict):
    """
    MappingRuleSpec defines the desired state of Product's MappingRule
    """
    def __init__(__self__, *,
                 http_method: str,
                 increment: int,
                 metric_method_ref: str,
                 pattern: str,
                 position: Optional[int] = None):
        """
        MappingRuleSpec defines the desired state of Product's MappingRule
        """
        pulumi.set(__self__, "http_method", http_method)
        pulumi.set(__self__, "increment", increment)
        pulumi.set(__self__, "metric_method_ref", metric_method_ref)
        pulumi.set(__self__, "pattern", pattern)
        if position is not None:
            pulumi.set(__self__, "position", position)

    @property
    @pulumi.getter(name="httpMethod")
    def http_method(self) -> str:
        return pulumi.get(self, "http_method")

    @property
    @pulumi.getter
    def increment(self) -> int:
        return pulumi.get(self, "increment")

    @property
    @pulumi.getter(name="metricMethodRef")
    def metric_method_ref(self) -> str:
        return pulumi.get(self, "metric_method_ref")

    @property
    @pulumi.getter
    def pattern(self) -> str:
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter
    def position(self) -> Optional[int]:
        return pulumi.get(self, "position")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ProductSpecMethods(dict):
    """
    MethodSpec defines the desired state of Product's Method
    """
    def __init__(__self__, *,
                 friendly_name: str,
                 description: Optional[str] = None):
        """
        MethodSpec defines the desired state of Product's Method
        """
        pulumi.set(__self__, "friendly_name", friendly_name)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> str:
        return pulumi.get(self, "friendly_name")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ProductSpecMetrics(dict):
    """
    MetricSpec defines the desired state of Product's Metric
    """
    def __init__(__self__, *,
                 friendly_name: str,
                 unit: str,
                 description: Optional[str] = None):
        """
        MetricSpec defines the desired state of Product's Metric
        """
        pulumi.set(__self__, "friendly_name", friendly_name)
        pulumi.set(__self__, "unit", unit)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> str:
        return pulumi.get(self, "friendly_name")

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ProductSpecProviderAccountRef(dict):
    """
    ProviderAccountRef references account provider credentials
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        ProviderAccountRef references account provider credentials
        :param str name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ProductStatus(dict):
    """
    ProductStatus defines the observed state of Product
    """
    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.ProductStatusConditions']] = None,
                 observed_generation: Optional[int] = None,
                 product_id: Optional[int] = None,
                 state: Optional[str] = None):
        """
        ProductStatus defines the observed state of Product
        :param Sequence['ProductStatusConditionsArgs'] conditions: Current state of the 3scale product. Conditions represent the latest available observations of an object's state
        :param int observed_generation: ObservedGeneration reflects the generation of the most recently observed Product Spec.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)
        if product_id is not None:
            pulumi.set(__self__, "product_id", product_id)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.ProductStatusConditions']]:
        """
        Current state of the 3scale product. Conditions represent the latest available observations of an object's state
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[int]:
        """
        ObservedGeneration reflects the generation of the most recently observed Product Spec.
        """
        return pulumi.get(self, "observed_generation")

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> Optional[int]:
        return pulumi.get(self, "product_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ProductStatusConditions(dict):
    """
    Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind. 
     Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API.
    """
    def __init__(__self__, *,
                 status: str,
                 type: str,
                 last_transition_time: Optional[str] = None,
                 message: Optional[str] = None,
                 reason: Optional[str] = None):
        """
        Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind. 
         Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API.
        :param str type: ConditionType is the type of the condition and is typically a CamelCased word or short phrase. 
                Condition types should indicate state in the "abnormal-true" polarity. For example, if the condition indicates when a policy is invalid, the "is valid" case is probably the norm, so the condition should be called "Invalid".
        :param str reason: ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        ConditionType is the type of the condition and is typically a CamelCased word or short phrase. 
         Condition types should indicate state in the "abnormal-true" polarity. For example, if the condition indicates when a policy is invalid, the "is valid" case is probably the norm, so the condition should be called "Invalid".
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[str]:
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.
        """
        return pulumi.get(self, "reason")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



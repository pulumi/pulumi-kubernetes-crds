# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'APIManagerSpecArgs',
    'APIManagerSpecApicastArgs',
    'APIManagerSpecApicastProductionSpecArgs',
    'APIManagerSpecApicastStagingSpecArgs',
    'APIManagerSpecBackendArgs',
    'APIManagerSpecBackendCronSpecArgs',
    'APIManagerSpecBackendListenerSpecArgs',
    'APIManagerSpecBackendWorkerSpecArgs',
    'APIManagerSpecHighAvailabilityArgs',
    'APIManagerSpecPodDisruptionBudgetArgs',
    'APIManagerSpecSystemArgs',
    'APIManagerSpecSystemAppSpecArgs',
    'APIManagerSpecSystemDatabaseArgs',
    'APIManagerSpecSystemDatabaseMysqlArgs',
    'APIManagerSpecSystemDatabasePostgresqlArgs',
    'APIManagerSpecSystemFileStorageArgs',
    'APIManagerSpecSystemFileStorageAmazonSimpleStorageServiceArgs',
    'APIManagerSpecSystemFileStorageAmazonSimpleStorageServiceAwsCredentialsSecretArgs',
    'APIManagerSpecSystemFileStoragePersistentVolumeClaimArgs',
    'APIManagerSpecSystemFileStorageSimpleStorageServiceArgs',
    'APIManagerSpecSystemFileStorageSimpleStorageServiceConfigurationSecretRefArgs',
    'APIManagerSpecSystemSidekiqSpecArgs',
    'APIManagerSpecZyncArgs',
    'APIManagerSpecZyncAppSpecArgs',
    'APIManagerSpecZyncQueSpecArgs',
    'APIManagerStatusArgs',
    'APIManagerStatusConditionsArgs',
    'APIManagerStatusDeploymentsArgs',
]

@pulumi.input_type
class APIManagerSpecArgs:
    def __init__(__self__, *,
                 wildcard_domain: pulumi.Input[str],
                 apicast: Optional[pulumi.Input['APIManagerSpecApicastArgs']] = None,
                 app_label: Optional[pulumi.Input[str]] = None,
                 backend: Optional[pulumi.Input['APIManagerSpecBackendArgs']] = None,
                 high_availability: Optional[pulumi.Input['APIManagerSpecHighAvailabilityArgs']] = None,
                 image_stream_tag_import_insecure: Optional[pulumi.Input[bool]] = None,
                 pod_disruption_budget: Optional[pulumi.Input['APIManagerSpecPodDisruptionBudgetArgs']] = None,
                 resource_requirements_enabled: Optional[pulumi.Input[bool]] = None,
                 system: Optional[pulumi.Input['APIManagerSpecSystemArgs']] = None,
                 tenant_name: Optional[pulumi.Input[str]] = None,
                 zync: Optional[pulumi.Input['APIManagerSpecZyncArgs']] = None):
        pulumi.set(__self__, "wildcard_domain", wildcard_domain)
        if apicast is not None:
            pulumi.set(__self__, "apicast", apicast)
        if app_label is not None:
            pulumi.set(__self__, "app_label", app_label)
        if backend is not None:
            pulumi.set(__self__, "backend", backend)
        if high_availability is not None:
            pulumi.set(__self__, "high_availability", high_availability)
        if image_stream_tag_import_insecure is not None:
            pulumi.set(__self__, "image_stream_tag_import_insecure", image_stream_tag_import_insecure)
        if pod_disruption_budget is not None:
            pulumi.set(__self__, "pod_disruption_budget", pod_disruption_budget)
        if resource_requirements_enabled is not None:
            pulumi.set(__self__, "resource_requirements_enabled", resource_requirements_enabled)
        if system is not None:
            pulumi.set(__self__, "system", system)
        if tenant_name is not None:
            pulumi.set(__self__, "tenant_name", tenant_name)
        if zync is not None:
            pulumi.set(__self__, "zync", zync)

    @property
    @pulumi.getter(name="wildcardDomain")
    def wildcard_domain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "wildcard_domain")

    @wildcard_domain.setter
    def wildcard_domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "wildcard_domain", value)

    @property
    @pulumi.getter
    def apicast(self) -> Optional[pulumi.Input['APIManagerSpecApicastArgs']]:
        return pulumi.get(self, "apicast")

    @apicast.setter
    def apicast(self, value: Optional[pulumi.Input['APIManagerSpecApicastArgs']]):
        pulumi.set(self, "apicast", value)

    @property
    @pulumi.getter(name="appLabel")
    def app_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app_label")

    @app_label.setter
    def app_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_label", value)

    @property
    @pulumi.getter
    def backend(self) -> Optional[pulumi.Input['APIManagerSpecBackendArgs']]:
        return pulumi.get(self, "backend")

    @backend.setter
    def backend(self, value: Optional[pulumi.Input['APIManagerSpecBackendArgs']]):
        pulumi.set(self, "backend", value)

    @property
    @pulumi.getter(name="highAvailability")
    def high_availability(self) -> Optional[pulumi.Input['APIManagerSpecHighAvailabilityArgs']]:
        return pulumi.get(self, "high_availability")

    @high_availability.setter
    def high_availability(self, value: Optional[pulumi.Input['APIManagerSpecHighAvailabilityArgs']]):
        pulumi.set(self, "high_availability", value)

    @property
    @pulumi.getter(name="imageStreamTagImportInsecure")
    def image_stream_tag_import_insecure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "image_stream_tag_import_insecure")

    @image_stream_tag_import_insecure.setter
    def image_stream_tag_import_insecure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "image_stream_tag_import_insecure", value)

    @property
    @pulumi.getter(name="podDisruptionBudget")
    def pod_disruption_budget(self) -> Optional[pulumi.Input['APIManagerSpecPodDisruptionBudgetArgs']]:
        return pulumi.get(self, "pod_disruption_budget")

    @pod_disruption_budget.setter
    def pod_disruption_budget(self, value: Optional[pulumi.Input['APIManagerSpecPodDisruptionBudgetArgs']]):
        pulumi.set(self, "pod_disruption_budget", value)

    @property
    @pulumi.getter(name="resourceRequirementsEnabled")
    def resource_requirements_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "resource_requirements_enabled")

    @resource_requirements_enabled.setter
    def resource_requirements_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "resource_requirements_enabled", value)

    @property
    @pulumi.getter
    def system(self) -> Optional[pulumi.Input['APIManagerSpecSystemArgs']]:
        return pulumi.get(self, "system")

    @system.setter
    def system(self, value: Optional[pulumi.Input['APIManagerSpecSystemArgs']]):
        pulumi.set(self, "system", value)

    @property
    @pulumi.getter(name="tenantName")
    def tenant_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tenant_name")

    @tenant_name.setter
    def tenant_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_name", value)

    @property
    @pulumi.getter
    def zync(self) -> Optional[pulumi.Input['APIManagerSpecZyncArgs']]:
        return pulumi.get(self, "zync")

    @zync.setter
    def zync(self, value: Optional[pulumi.Input['APIManagerSpecZyncArgs']]):
        pulumi.set(self, "zync", value)


@pulumi.input_type
class APIManagerSpecApicastArgs:
    def __init__(__self__, *,
                 image: Optional[pulumi.Input[str]] = None,
                 management_api: Optional[pulumi.Input[str]] = None,
                 open_ssl_verify: Optional[pulumi.Input[bool]] = None,
                 production_spec: Optional[pulumi.Input['APIManagerSpecApicastProductionSpecArgs']] = None,
                 registry_url: Optional[pulumi.Input[str]] = None,
                 response_codes: Optional[pulumi.Input[bool]] = None,
                 staging_spec: Optional[pulumi.Input['APIManagerSpecApicastStagingSpecArgs']] = None):
        if image is not None:
            pulumi.set(__self__, "image", image)
        if management_api is not None:
            pulumi.set(__self__, "management_api", management_api)
        if open_ssl_verify is not None:
            pulumi.set(__self__, "open_ssl_verify", open_ssl_verify)
        if production_spec is not None:
            pulumi.set(__self__, "production_spec", production_spec)
        if registry_url is not None:
            pulumi.set(__self__, "registry_url", registry_url)
        if response_codes is not None:
            pulumi.set(__self__, "response_codes", response_codes)
        if staging_spec is not None:
            pulumi.set(__self__, "staging_spec", staging_spec)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="managementAPI")
    def management_api(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "management_api")

    @management_api.setter
    def management_api(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "management_api", value)

    @property
    @pulumi.getter(name="openSSLVerify")
    def open_ssl_verify(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "open_ssl_verify")

    @open_ssl_verify.setter
    def open_ssl_verify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "open_ssl_verify", value)

    @property
    @pulumi.getter(name="productionSpec")
    def production_spec(self) -> Optional[pulumi.Input['APIManagerSpecApicastProductionSpecArgs']]:
        return pulumi.get(self, "production_spec")

    @production_spec.setter
    def production_spec(self, value: Optional[pulumi.Input['APIManagerSpecApicastProductionSpecArgs']]):
        pulumi.set(self, "production_spec", value)

    @property
    @pulumi.getter(name="registryURL")
    def registry_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "registry_url")

    @registry_url.setter
    def registry_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registry_url", value)

    @property
    @pulumi.getter(name="responseCodes")
    def response_codes(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "response_codes")

    @response_codes.setter
    def response_codes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "response_codes", value)

    @property
    @pulumi.getter(name="stagingSpec")
    def staging_spec(self) -> Optional[pulumi.Input['APIManagerSpecApicastStagingSpecArgs']]:
        return pulumi.get(self, "staging_spec")

    @staging_spec.setter
    def staging_spec(self, value: Optional[pulumi.Input['APIManagerSpecApicastStagingSpecArgs']]):
        pulumi.set(self, "staging_spec", value)


@pulumi.input_type
class APIManagerSpecApicastProductionSpecArgs:
    def __init__(__self__, *,
                 replicas: Optional[pulumi.Input[int]] = None):
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)


@pulumi.input_type
class APIManagerSpecApicastStagingSpecArgs:
    def __init__(__self__, *,
                 replicas: Optional[pulumi.Input[int]] = None):
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)


@pulumi.input_type
class APIManagerSpecBackendArgs:
    def __init__(__self__, *,
                 cron_spec: Optional[pulumi.Input['APIManagerSpecBackendCronSpecArgs']] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 listener_spec: Optional[pulumi.Input['APIManagerSpecBackendListenerSpecArgs']] = None,
                 redis_image: Optional[pulumi.Input[str]] = None,
                 worker_spec: Optional[pulumi.Input['APIManagerSpecBackendWorkerSpecArgs']] = None):
        if cron_spec is not None:
            pulumi.set(__self__, "cron_spec", cron_spec)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if listener_spec is not None:
            pulumi.set(__self__, "listener_spec", listener_spec)
        if redis_image is not None:
            pulumi.set(__self__, "redis_image", redis_image)
        if worker_spec is not None:
            pulumi.set(__self__, "worker_spec", worker_spec)

    @property
    @pulumi.getter(name="cronSpec")
    def cron_spec(self) -> Optional[pulumi.Input['APIManagerSpecBackendCronSpecArgs']]:
        return pulumi.get(self, "cron_spec")

    @cron_spec.setter
    def cron_spec(self, value: Optional[pulumi.Input['APIManagerSpecBackendCronSpecArgs']]):
        pulumi.set(self, "cron_spec", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="listenerSpec")
    def listener_spec(self) -> Optional[pulumi.Input['APIManagerSpecBackendListenerSpecArgs']]:
        return pulumi.get(self, "listener_spec")

    @listener_spec.setter
    def listener_spec(self, value: Optional[pulumi.Input['APIManagerSpecBackendListenerSpecArgs']]):
        pulumi.set(self, "listener_spec", value)

    @property
    @pulumi.getter(name="redisImage")
    def redis_image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redis_image")

    @redis_image.setter
    def redis_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redis_image", value)

    @property
    @pulumi.getter(name="workerSpec")
    def worker_spec(self) -> Optional[pulumi.Input['APIManagerSpecBackendWorkerSpecArgs']]:
        return pulumi.get(self, "worker_spec")

    @worker_spec.setter
    def worker_spec(self, value: Optional[pulumi.Input['APIManagerSpecBackendWorkerSpecArgs']]):
        pulumi.set(self, "worker_spec", value)


@pulumi.input_type
class APIManagerSpecBackendCronSpecArgs:
    def __init__(__self__, *,
                 replicas: Optional[pulumi.Input[int]] = None):
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)


@pulumi.input_type
class APIManagerSpecBackendListenerSpecArgs:
    def __init__(__self__, *,
                 replicas: Optional[pulumi.Input[int]] = None):
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)


@pulumi.input_type
class APIManagerSpecBackendWorkerSpecArgs:
    def __init__(__self__, *,
                 replicas: Optional[pulumi.Input[int]] = None):
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)


@pulumi.input_type
class APIManagerSpecHighAvailabilityArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class APIManagerSpecPodDisruptionBudgetArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class APIManagerSpecSystemArgs:
    def __init__(__self__, *,
                 app_spec: Optional[pulumi.Input['APIManagerSpecSystemAppSpecArgs']] = None,
                 database: Optional[pulumi.Input['APIManagerSpecSystemDatabaseArgs']] = None,
                 file_storage: Optional[pulumi.Input['APIManagerSpecSystemFileStorageArgs']] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 memcached_image: Optional[pulumi.Input[str]] = None,
                 redis_image: Optional[pulumi.Input[str]] = None,
                 sidekiq_spec: Optional[pulumi.Input['APIManagerSpecSystemSidekiqSpecArgs']] = None):
        if app_spec is not None:
            pulumi.set(__self__, "app_spec", app_spec)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if file_storage is not None:
            pulumi.set(__self__, "file_storage", file_storage)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if memcached_image is not None:
            pulumi.set(__self__, "memcached_image", memcached_image)
        if redis_image is not None:
            pulumi.set(__self__, "redis_image", redis_image)
        if sidekiq_spec is not None:
            pulumi.set(__self__, "sidekiq_spec", sidekiq_spec)

    @property
    @pulumi.getter(name="appSpec")
    def app_spec(self) -> Optional[pulumi.Input['APIManagerSpecSystemAppSpecArgs']]:
        return pulumi.get(self, "app_spec")

    @app_spec.setter
    def app_spec(self, value: Optional[pulumi.Input['APIManagerSpecSystemAppSpecArgs']]):
        pulumi.set(self, "app_spec", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input['APIManagerSpecSystemDatabaseArgs']]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input['APIManagerSpecSystemDatabaseArgs']]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="fileStorage")
    def file_storage(self) -> Optional[pulumi.Input['APIManagerSpecSystemFileStorageArgs']]:
        return pulumi.get(self, "file_storage")

    @file_storage.setter
    def file_storage(self, value: Optional[pulumi.Input['APIManagerSpecSystemFileStorageArgs']]):
        pulumi.set(self, "file_storage", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="memcachedImage")
    def memcached_image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "memcached_image")

    @memcached_image.setter
    def memcached_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memcached_image", value)

    @property
    @pulumi.getter(name="redisImage")
    def redis_image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redis_image")

    @redis_image.setter
    def redis_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redis_image", value)

    @property
    @pulumi.getter(name="sidekiqSpec")
    def sidekiq_spec(self) -> Optional[pulumi.Input['APIManagerSpecSystemSidekiqSpecArgs']]:
        return pulumi.get(self, "sidekiq_spec")

    @sidekiq_spec.setter
    def sidekiq_spec(self, value: Optional[pulumi.Input['APIManagerSpecSystemSidekiqSpecArgs']]):
        pulumi.set(self, "sidekiq_spec", value)


@pulumi.input_type
class APIManagerSpecSystemAppSpecArgs:
    def __init__(__self__, *,
                 replicas: Optional[pulumi.Input[int]] = None):
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)


@pulumi.input_type
class APIManagerSpecSystemDatabaseArgs:
    def __init__(__self__, *,
                 mysql: Optional[pulumi.Input['APIManagerSpecSystemDatabaseMysqlArgs']] = None,
                 postgresql: Optional[pulumi.Input['APIManagerSpecSystemDatabasePostgresqlArgs']] = None):
        """
        :param pulumi.Input['APIManagerSpecSystemDatabaseMysqlArgs'] mysql: Union type. Only one of the fields can be set
        """
        if mysql is not None:
            pulumi.set(__self__, "mysql", mysql)
        if postgresql is not None:
            pulumi.set(__self__, "postgresql", postgresql)

    @property
    @pulumi.getter
    def mysql(self) -> Optional[pulumi.Input['APIManagerSpecSystemDatabaseMysqlArgs']]:
        """
        Union type. Only one of the fields can be set
        """
        return pulumi.get(self, "mysql")

    @mysql.setter
    def mysql(self, value: Optional[pulumi.Input['APIManagerSpecSystemDatabaseMysqlArgs']]):
        pulumi.set(self, "mysql", value)

    @property
    @pulumi.getter
    def postgresql(self) -> Optional[pulumi.Input['APIManagerSpecSystemDatabasePostgresqlArgs']]:
        return pulumi.get(self, "postgresql")

    @postgresql.setter
    def postgresql(self, value: Optional[pulumi.Input['APIManagerSpecSystemDatabasePostgresqlArgs']]):
        pulumi.set(self, "postgresql", value)


@pulumi.input_type
class APIManagerSpecSystemDatabaseMysqlArgs:
    def __init__(__self__, *,
                 image: Optional[pulumi.Input[str]] = None):
        """
        Union type. Only one of the fields can be set
        """
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class APIManagerSpecSystemDatabasePostgresqlArgs:
    def __init__(__self__, *,
                 image: Optional[pulumi.Input[str]] = None):
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class APIManagerSpecSystemFileStorageArgs:
    def __init__(__self__, *,
                 amazon_simple_storage_service: Optional[pulumi.Input['APIManagerSpecSystemFileStorageAmazonSimpleStorageServiceArgs']] = None,
                 persistent_volume_claim: Optional[pulumi.Input['APIManagerSpecSystemFileStoragePersistentVolumeClaimArgs']] = None,
                 simple_storage_service: Optional[pulumi.Input['APIManagerSpecSystemFileStorageSimpleStorageServiceArgs']] = None):
        """
        :param pulumi.Input['APIManagerSpecSystemFileStorageAmazonSimpleStorageServiceArgs'] amazon_simple_storage_service: Deprecated
        :param pulumi.Input['APIManagerSpecSystemFileStoragePersistentVolumeClaimArgs'] persistent_volume_claim: Union type. Only one of the fields can be set.
        """
        if amazon_simple_storage_service is not None:
            pulumi.set(__self__, "amazon_simple_storage_service", amazon_simple_storage_service)
        if persistent_volume_claim is not None:
            pulumi.set(__self__, "persistent_volume_claim", persistent_volume_claim)
        if simple_storage_service is not None:
            pulumi.set(__self__, "simple_storage_service", simple_storage_service)

    @property
    @pulumi.getter(name="amazonSimpleStorageService")
    def amazon_simple_storage_service(self) -> Optional[pulumi.Input['APIManagerSpecSystemFileStorageAmazonSimpleStorageServiceArgs']]:
        """
        Deprecated
        """
        return pulumi.get(self, "amazon_simple_storage_service")

    @amazon_simple_storage_service.setter
    def amazon_simple_storage_service(self, value: Optional[pulumi.Input['APIManagerSpecSystemFileStorageAmazonSimpleStorageServiceArgs']]):
        pulumi.set(self, "amazon_simple_storage_service", value)

    @property
    @pulumi.getter(name="persistentVolumeClaim")
    def persistent_volume_claim(self) -> Optional[pulumi.Input['APIManagerSpecSystemFileStoragePersistentVolumeClaimArgs']]:
        """
        Union type. Only one of the fields can be set.
        """
        return pulumi.get(self, "persistent_volume_claim")

    @persistent_volume_claim.setter
    def persistent_volume_claim(self, value: Optional[pulumi.Input['APIManagerSpecSystemFileStoragePersistentVolumeClaimArgs']]):
        pulumi.set(self, "persistent_volume_claim", value)

    @property
    @pulumi.getter(name="simpleStorageService")
    def simple_storage_service(self) -> Optional[pulumi.Input['APIManagerSpecSystemFileStorageSimpleStorageServiceArgs']]:
        return pulumi.get(self, "simple_storage_service")

    @simple_storage_service.setter
    def simple_storage_service(self, value: Optional[pulumi.Input['APIManagerSpecSystemFileStorageSimpleStorageServiceArgs']]):
        pulumi.set(self, "simple_storage_service", value)


@pulumi.input_type
class APIManagerSpecSystemFileStorageAmazonSimpleStorageServiceArgs:
    def __init__(__self__, *,
                 aws_bucket: pulumi.Input[str],
                 aws_credentials_secret: pulumi.Input['APIManagerSpecSystemFileStorageAmazonSimpleStorageServiceAwsCredentialsSecretArgs'],
                 aws_region: pulumi.Input[str]):
        """
        Deprecated
        :param pulumi.Input[str] aws_bucket: Deprecated
        :param pulumi.Input['APIManagerSpecSystemFileStorageAmazonSimpleStorageServiceAwsCredentialsSecretArgs'] aws_credentials_secret: Deprecated
        :param pulumi.Input[str] aws_region: Deprecated
        """
        pulumi.set(__self__, "aws_bucket", aws_bucket)
        pulumi.set(__self__, "aws_credentials_secret", aws_credentials_secret)
        pulumi.set(__self__, "aws_region", aws_region)

    @property
    @pulumi.getter(name="awsBucket")
    def aws_bucket(self) -> pulumi.Input[str]:
        """
        Deprecated
        """
        return pulumi.get(self, "aws_bucket")

    @aws_bucket.setter
    def aws_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "aws_bucket", value)

    @property
    @pulumi.getter(name="awsCredentialsSecret")
    def aws_credentials_secret(self) -> pulumi.Input['APIManagerSpecSystemFileStorageAmazonSimpleStorageServiceAwsCredentialsSecretArgs']:
        """
        Deprecated
        """
        return pulumi.get(self, "aws_credentials_secret")

    @aws_credentials_secret.setter
    def aws_credentials_secret(self, value: pulumi.Input['APIManagerSpecSystemFileStorageAmazonSimpleStorageServiceAwsCredentialsSecretArgs']):
        pulumi.set(self, "aws_credentials_secret", value)

    @property
    @pulumi.getter(name="awsRegion")
    def aws_region(self) -> pulumi.Input[str]:
        """
        Deprecated
        """
        return pulumi.get(self, "aws_region")

    @aws_region.setter
    def aws_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "aws_region", value)


@pulumi.input_type
class APIManagerSpecSystemFileStorageAmazonSimpleStorageServiceAwsCredentialsSecretArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Deprecated
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class APIManagerSpecSystemFileStoragePersistentVolumeClaimArgs:
    def __init__(__self__, *,
                 storage_class_name: Optional[pulumi.Input[str]] = None):
        """
        Union type. Only one of the fields can be set.
        """
        if storage_class_name is not None:
            pulumi.set(__self__, "storage_class_name", storage_class_name)

    @property
    @pulumi.getter(name="storageClassName")
    def storage_class_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage_class_name")

    @storage_class_name.setter
    def storage_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_class_name", value)


@pulumi.input_type
class APIManagerSpecSystemFileStorageSimpleStorageServiceArgs:
    def __init__(__self__, *,
                 configuration_secret_ref: pulumi.Input['APIManagerSpecSystemFileStorageSimpleStorageServiceConfigurationSecretRefArgs']):
        pulumi.set(__self__, "configuration_secret_ref", configuration_secret_ref)

    @property
    @pulumi.getter(name="configurationSecretRef")
    def configuration_secret_ref(self) -> pulumi.Input['APIManagerSpecSystemFileStorageSimpleStorageServiceConfigurationSecretRefArgs']:
        return pulumi.get(self, "configuration_secret_ref")

    @configuration_secret_ref.setter
    def configuration_secret_ref(self, value: pulumi.Input['APIManagerSpecSystemFileStorageSimpleStorageServiceConfigurationSecretRefArgs']):
        pulumi.set(self, "configuration_secret_ref", value)


@pulumi.input_type
class APIManagerSpecSystemFileStorageSimpleStorageServiceConfigurationSecretRefArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class APIManagerSpecSystemSidekiqSpecArgs:
    def __init__(__self__, *,
                 replicas: Optional[pulumi.Input[int]] = None):
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)


@pulumi.input_type
class APIManagerSpecZyncArgs:
    def __init__(__self__, *,
                 app_spec: Optional[pulumi.Input['APIManagerSpecZyncAppSpecArgs']] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 postgre_sql_image: Optional[pulumi.Input[str]] = None,
                 que_spec: Optional[pulumi.Input['APIManagerSpecZyncQueSpecArgs']] = None):
        if app_spec is not None:
            pulumi.set(__self__, "app_spec", app_spec)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if postgre_sql_image is not None:
            pulumi.set(__self__, "postgre_sql_image", postgre_sql_image)
        if que_spec is not None:
            pulumi.set(__self__, "que_spec", que_spec)

    @property
    @pulumi.getter(name="appSpec")
    def app_spec(self) -> Optional[pulumi.Input['APIManagerSpecZyncAppSpecArgs']]:
        return pulumi.get(self, "app_spec")

    @app_spec.setter
    def app_spec(self, value: Optional[pulumi.Input['APIManagerSpecZyncAppSpecArgs']]):
        pulumi.set(self, "app_spec", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="postgreSQLImage")
    def postgre_sql_image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "postgre_sql_image")

    @postgre_sql_image.setter
    def postgre_sql_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "postgre_sql_image", value)

    @property
    @pulumi.getter(name="queSpec")
    def que_spec(self) -> Optional[pulumi.Input['APIManagerSpecZyncQueSpecArgs']]:
        return pulumi.get(self, "que_spec")

    @que_spec.setter
    def que_spec(self, value: Optional[pulumi.Input['APIManagerSpecZyncQueSpecArgs']]):
        pulumi.set(self, "que_spec", value)


@pulumi.input_type
class APIManagerSpecZyncAppSpecArgs:
    def __init__(__self__, *,
                 replicas: Optional[pulumi.Input[int]] = None):
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)


@pulumi.input_type
class APIManagerSpecZyncQueSpecArgs:
    def __init__(__self__, *,
                 replicas: Optional[pulumi.Input[int]] = None):
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)


@pulumi.input_type
class APIManagerStatusArgs:
    def __init__(__self__, *,
                 deployments: pulumi.Input['APIManagerStatusDeploymentsArgs'],
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['APIManagerStatusConditionsArgs']]]] = None):
        pulumi.set(__self__, "deployments", deployments)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def deployments(self) -> pulumi.Input['APIManagerStatusDeploymentsArgs']:
        return pulumi.get(self, "deployments")

    @deployments.setter
    def deployments(self, value: pulumi.Input['APIManagerStatusDeploymentsArgs']):
        pulumi.set(self, "deployments", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['APIManagerStatusConditionsArgs']]]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['APIManagerStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)


@pulumi.input_type
class APIManagerStatusConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class APIManagerStatusDeploymentsArgs:
    def __init__(__self__, *,
                 ready: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 starting: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 stopped: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ready: Deployments are ready to serve requests
        :param pulumi.Input[Sequence[pulumi.Input[str]]] starting: Deployments are starting, may or may not succeed
        :param pulumi.Input[Sequence[pulumi.Input[str]]] stopped: Deployments are not starting, unclear what next step will be
        """
        if ready is not None:
            pulumi.set(__self__, "ready", ready)
        if starting is not None:
            pulumi.set(__self__, "starting", starting)
        if stopped is not None:
            pulumi.set(__self__, "stopped", stopped)

    @property
    @pulumi.getter
    def ready(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Deployments are ready to serve requests
        """
        return pulumi.get(self, "ready")

    @ready.setter
    def ready(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ready", value)

    @property
    @pulumi.getter
    def starting(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Deployments are starting, may or may not succeed
        """
        return pulumi.get(self, "starting")

    @starting.setter
    def starting(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "starting", value)

    @property
    @pulumi.getter
    def stopped(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Deployments are not starting, unclear what next step will be
        """
        return pulumi.get(self, "stopped")

    @stopped.setter
    def stopped(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "stopped", value)



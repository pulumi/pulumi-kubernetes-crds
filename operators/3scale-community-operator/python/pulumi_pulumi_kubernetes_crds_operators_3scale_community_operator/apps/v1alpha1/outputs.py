# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'APIManagerSpec',
    'APIManagerSpecApicast',
    'APIManagerSpecApicastProductionSpec',
    'APIManagerSpecApicastStagingSpec',
    'APIManagerSpecBackend',
    'APIManagerSpecBackendCronSpec',
    'APIManagerSpecBackendListenerSpec',
    'APIManagerSpecBackendWorkerSpec',
    'APIManagerSpecHighAvailability',
    'APIManagerSpecPodDisruptionBudget',
    'APIManagerSpecSystem',
    'APIManagerSpecSystemAppSpec',
    'APIManagerSpecSystemDatabase',
    'APIManagerSpecSystemDatabaseMysql',
    'APIManagerSpecSystemDatabasePostgresql',
    'APIManagerSpecSystemFileStorage',
    'APIManagerSpecSystemFileStorageAmazonSimpleStorageService',
    'APIManagerSpecSystemFileStorageAmazonSimpleStorageServiceAwsCredentialsSecret',
    'APIManagerSpecSystemFileStoragePersistentVolumeClaim',
    'APIManagerSpecSystemFileStorageSimpleStorageService',
    'APIManagerSpecSystemFileStorageSimpleStorageServiceConfigurationSecretRef',
    'APIManagerSpecSystemSidekiqSpec',
    'APIManagerSpecZync',
    'APIManagerSpecZyncAppSpec',
    'APIManagerSpecZyncQueSpec',
    'APIManagerStatus',
    'APIManagerStatusConditions',
    'APIManagerStatusDeployments',
]

@pulumi.output_type
class APIManagerSpec(dict):
    def __init__(__self__, *,
                 wildcard_domain: str,
                 apicast: Optional['outputs.APIManagerSpecApicast'] = None,
                 app_label: Optional[str] = None,
                 backend: Optional['outputs.APIManagerSpecBackend'] = None,
                 high_availability: Optional['outputs.APIManagerSpecHighAvailability'] = None,
                 image_stream_tag_import_insecure: Optional[bool] = None,
                 pod_disruption_budget: Optional['outputs.APIManagerSpecPodDisruptionBudget'] = None,
                 resource_requirements_enabled: Optional[bool] = None,
                 system: Optional['outputs.APIManagerSpecSystem'] = None,
                 tenant_name: Optional[str] = None,
                 zync: Optional['outputs.APIManagerSpecZync'] = None):
        pulumi.set(__self__, "wildcard_domain", wildcard_domain)
        if apicast is not None:
            pulumi.set(__self__, "apicast", apicast)
        if app_label is not None:
            pulumi.set(__self__, "app_label", app_label)
        if backend is not None:
            pulumi.set(__self__, "backend", backend)
        if high_availability is not None:
            pulumi.set(__self__, "high_availability", high_availability)
        if image_stream_tag_import_insecure is not None:
            pulumi.set(__self__, "image_stream_tag_import_insecure", image_stream_tag_import_insecure)
        if pod_disruption_budget is not None:
            pulumi.set(__self__, "pod_disruption_budget", pod_disruption_budget)
        if resource_requirements_enabled is not None:
            pulumi.set(__self__, "resource_requirements_enabled", resource_requirements_enabled)
        if system is not None:
            pulumi.set(__self__, "system", system)
        if tenant_name is not None:
            pulumi.set(__self__, "tenant_name", tenant_name)
        if zync is not None:
            pulumi.set(__self__, "zync", zync)

    @property
    @pulumi.getter(name="wildcardDomain")
    def wildcard_domain(self) -> str:
        return pulumi.get(self, "wildcard_domain")

    @property
    @pulumi.getter
    def apicast(self) -> Optional['outputs.APIManagerSpecApicast']:
        return pulumi.get(self, "apicast")

    @property
    @pulumi.getter(name="appLabel")
    def app_label(self) -> Optional[str]:
        return pulumi.get(self, "app_label")

    @property
    @pulumi.getter
    def backend(self) -> Optional['outputs.APIManagerSpecBackend']:
        return pulumi.get(self, "backend")

    @property
    @pulumi.getter(name="highAvailability")
    def high_availability(self) -> Optional['outputs.APIManagerSpecHighAvailability']:
        return pulumi.get(self, "high_availability")

    @property
    @pulumi.getter(name="imageStreamTagImportInsecure")
    def image_stream_tag_import_insecure(self) -> Optional[bool]:
        return pulumi.get(self, "image_stream_tag_import_insecure")

    @property
    @pulumi.getter(name="podDisruptionBudget")
    def pod_disruption_budget(self) -> Optional['outputs.APIManagerSpecPodDisruptionBudget']:
        return pulumi.get(self, "pod_disruption_budget")

    @property
    @pulumi.getter(name="resourceRequirementsEnabled")
    def resource_requirements_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "resource_requirements_enabled")

    @property
    @pulumi.getter
    def system(self) -> Optional['outputs.APIManagerSpecSystem']:
        return pulumi.get(self, "system")

    @property
    @pulumi.getter(name="tenantName")
    def tenant_name(self) -> Optional[str]:
        return pulumi.get(self, "tenant_name")

    @property
    @pulumi.getter
    def zync(self) -> Optional['outputs.APIManagerSpecZync']:
        return pulumi.get(self, "zync")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APIManagerSpecApicast(dict):
    def __init__(__self__, *,
                 image: Optional[str] = None,
                 management_api: Optional[str] = None,
                 open_ssl_verify: Optional[bool] = None,
                 production_spec: Optional['outputs.APIManagerSpecApicastProductionSpec'] = None,
                 registry_url: Optional[str] = None,
                 response_codes: Optional[bool] = None,
                 staging_spec: Optional['outputs.APIManagerSpecApicastStagingSpec'] = None):
        if image is not None:
            pulumi.set(__self__, "image", image)
        if management_api is not None:
            pulumi.set(__self__, "management_api", management_api)
        if open_ssl_verify is not None:
            pulumi.set(__self__, "open_ssl_verify", open_ssl_verify)
        if production_spec is not None:
            pulumi.set(__self__, "production_spec", production_spec)
        if registry_url is not None:
            pulumi.set(__self__, "registry_url", registry_url)
        if response_codes is not None:
            pulumi.set(__self__, "response_codes", response_codes)
        if staging_spec is not None:
            pulumi.set(__self__, "staging_spec", staging_spec)

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="managementAPI")
    def management_api(self) -> Optional[str]:
        return pulumi.get(self, "management_api")

    @property
    @pulumi.getter(name="openSSLVerify")
    def open_ssl_verify(self) -> Optional[bool]:
        return pulumi.get(self, "open_ssl_verify")

    @property
    @pulumi.getter(name="productionSpec")
    def production_spec(self) -> Optional['outputs.APIManagerSpecApicastProductionSpec']:
        return pulumi.get(self, "production_spec")

    @property
    @pulumi.getter(name="registryURL")
    def registry_url(self) -> Optional[str]:
        return pulumi.get(self, "registry_url")

    @property
    @pulumi.getter(name="responseCodes")
    def response_codes(self) -> Optional[bool]:
        return pulumi.get(self, "response_codes")

    @property
    @pulumi.getter(name="stagingSpec")
    def staging_spec(self) -> Optional['outputs.APIManagerSpecApicastStagingSpec']:
        return pulumi.get(self, "staging_spec")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APIManagerSpecApicastProductionSpec(dict):
    def __init__(__self__, *,
                 replicas: Optional[int] = None):
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[int]:
        return pulumi.get(self, "replicas")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APIManagerSpecApicastStagingSpec(dict):
    def __init__(__self__, *,
                 replicas: Optional[int] = None):
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[int]:
        return pulumi.get(self, "replicas")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APIManagerSpecBackend(dict):
    def __init__(__self__, *,
                 cron_spec: Optional['outputs.APIManagerSpecBackendCronSpec'] = None,
                 image: Optional[str] = None,
                 listener_spec: Optional['outputs.APIManagerSpecBackendListenerSpec'] = None,
                 redis_image: Optional[str] = None,
                 worker_spec: Optional['outputs.APIManagerSpecBackendWorkerSpec'] = None):
        if cron_spec is not None:
            pulumi.set(__self__, "cron_spec", cron_spec)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if listener_spec is not None:
            pulumi.set(__self__, "listener_spec", listener_spec)
        if redis_image is not None:
            pulumi.set(__self__, "redis_image", redis_image)
        if worker_spec is not None:
            pulumi.set(__self__, "worker_spec", worker_spec)

    @property
    @pulumi.getter(name="cronSpec")
    def cron_spec(self) -> Optional['outputs.APIManagerSpecBackendCronSpec']:
        return pulumi.get(self, "cron_spec")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="listenerSpec")
    def listener_spec(self) -> Optional['outputs.APIManagerSpecBackendListenerSpec']:
        return pulumi.get(self, "listener_spec")

    @property
    @pulumi.getter(name="redisImage")
    def redis_image(self) -> Optional[str]:
        return pulumi.get(self, "redis_image")

    @property
    @pulumi.getter(name="workerSpec")
    def worker_spec(self) -> Optional['outputs.APIManagerSpecBackendWorkerSpec']:
        return pulumi.get(self, "worker_spec")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APIManagerSpecBackendCronSpec(dict):
    def __init__(__self__, *,
                 replicas: Optional[int] = None):
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[int]:
        return pulumi.get(self, "replicas")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APIManagerSpecBackendListenerSpec(dict):
    def __init__(__self__, *,
                 replicas: Optional[int] = None):
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[int]:
        return pulumi.get(self, "replicas")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APIManagerSpecBackendWorkerSpec(dict):
    def __init__(__self__, *,
                 replicas: Optional[int] = None):
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[int]:
        return pulumi.get(self, "replicas")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APIManagerSpecHighAvailability(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APIManagerSpecPodDisruptionBudget(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APIManagerSpecSystem(dict):
    def __init__(__self__, *,
                 app_spec: Optional['outputs.APIManagerSpecSystemAppSpec'] = None,
                 database: Optional['outputs.APIManagerSpecSystemDatabase'] = None,
                 file_storage: Optional['outputs.APIManagerSpecSystemFileStorage'] = None,
                 image: Optional[str] = None,
                 memcached_image: Optional[str] = None,
                 redis_image: Optional[str] = None,
                 sidekiq_spec: Optional['outputs.APIManagerSpecSystemSidekiqSpec'] = None):
        if app_spec is not None:
            pulumi.set(__self__, "app_spec", app_spec)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if file_storage is not None:
            pulumi.set(__self__, "file_storage", file_storage)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if memcached_image is not None:
            pulumi.set(__self__, "memcached_image", memcached_image)
        if redis_image is not None:
            pulumi.set(__self__, "redis_image", redis_image)
        if sidekiq_spec is not None:
            pulumi.set(__self__, "sidekiq_spec", sidekiq_spec)

    @property
    @pulumi.getter(name="appSpec")
    def app_spec(self) -> Optional['outputs.APIManagerSpecSystemAppSpec']:
        return pulumi.get(self, "app_spec")

    @property
    @pulumi.getter
    def database(self) -> Optional['outputs.APIManagerSpecSystemDatabase']:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="fileStorage")
    def file_storage(self) -> Optional['outputs.APIManagerSpecSystemFileStorage']:
        return pulumi.get(self, "file_storage")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="memcachedImage")
    def memcached_image(self) -> Optional[str]:
        return pulumi.get(self, "memcached_image")

    @property
    @pulumi.getter(name="redisImage")
    def redis_image(self) -> Optional[str]:
        return pulumi.get(self, "redis_image")

    @property
    @pulumi.getter(name="sidekiqSpec")
    def sidekiq_spec(self) -> Optional['outputs.APIManagerSpecSystemSidekiqSpec']:
        return pulumi.get(self, "sidekiq_spec")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APIManagerSpecSystemAppSpec(dict):
    def __init__(__self__, *,
                 replicas: Optional[int] = None):
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[int]:
        return pulumi.get(self, "replicas")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APIManagerSpecSystemDatabase(dict):
    def __init__(__self__, *,
                 mysql: Optional['outputs.APIManagerSpecSystemDatabaseMysql'] = None,
                 postgresql: Optional['outputs.APIManagerSpecSystemDatabasePostgresql'] = None):
        """
        :param 'APIManagerSpecSystemDatabaseMysqlArgs' mysql: Union type. Only one of the fields can be set
        """
        if mysql is not None:
            pulumi.set(__self__, "mysql", mysql)
        if postgresql is not None:
            pulumi.set(__self__, "postgresql", postgresql)

    @property
    @pulumi.getter
    def mysql(self) -> Optional['outputs.APIManagerSpecSystemDatabaseMysql']:
        """
        Union type. Only one of the fields can be set
        """
        return pulumi.get(self, "mysql")

    @property
    @pulumi.getter
    def postgresql(self) -> Optional['outputs.APIManagerSpecSystemDatabasePostgresql']:
        return pulumi.get(self, "postgresql")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APIManagerSpecSystemDatabaseMysql(dict):
    """
    Union type. Only one of the fields can be set
    """
    def __init__(__self__, *,
                 image: Optional[str] = None):
        """
        Union type. Only one of the fields can be set
        """
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APIManagerSpecSystemDatabasePostgresql(dict):
    def __init__(__self__, *,
                 image: Optional[str] = None):
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APIManagerSpecSystemFileStorage(dict):
    def __init__(__self__, *,
                 amazon_simple_storage_service: Optional['outputs.APIManagerSpecSystemFileStorageAmazonSimpleStorageService'] = None,
                 persistent_volume_claim: Optional['outputs.APIManagerSpecSystemFileStoragePersistentVolumeClaim'] = None,
                 simple_storage_service: Optional['outputs.APIManagerSpecSystemFileStorageSimpleStorageService'] = None):
        """
        :param 'APIManagerSpecSystemFileStorageAmazonSimpleStorageServiceArgs' amazon_simple_storage_service: Deprecated
        :param 'APIManagerSpecSystemFileStoragePersistentVolumeClaimArgs' persistent_volume_claim: Union type. Only one of the fields can be set.
        """
        if amazon_simple_storage_service is not None:
            pulumi.set(__self__, "amazon_simple_storage_service", amazon_simple_storage_service)
        if persistent_volume_claim is not None:
            pulumi.set(__self__, "persistent_volume_claim", persistent_volume_claim)
        if simple_storage_service is not None:
            pulumi.set(__self__, "simple_storage_service", simple_storage_service)

    @property
    @pulumi.getter(name="amazonSimpleStorageService")
    def amazon_simple_storage_service(self) -> Optional['outputs.APIManagerSpecSystemFileStorageAmazonSimpleStorageService']:
        """
        Deprecated
        """
        return pulumi.get(self, "amazon_simple_storage_service")

    @property
    @pulumi.getter(name="persistentVolumeClaim")
    def persistent_volume_claim(self) -> Optional['outputs.APIManagerSpecSystemFileStoragePersistentVolumeClaim']:
        """
        Union type. Only one of the fields can be set.
        """
        return pulumi.get(self, "persistent_volume_claim")

    @property
    @pulumi.getter(name="simpleStorageService")
    def simple_storage_service(self) -> Optional['outputs.APIManagerSpecSystemFileStorageSimpleStorageService']:
        return pulumi.get(self, "simple_storage_service")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APIManagerSpecSystemFileStorageAmazonSimpleStorageService(dict):
    """
    Deprecated
    """
    def __init__(__self__, *,
                 aws_bucket: str,
                 aws_credentials_secret: 'outputs.APIManagerSpecSystemFileStorageAmazonSimpleStorageServiceAwsCredentialsSecret',
                 aws_region: str):
        """
        Deprecated
        :param str aws_bucket: Deprecated
        :param 'APIManagerSpecSystemFileStorageAmazonSimpleStorageServiceAwsCredentialsSecretArgs' aws_credentials_secret: Deprecated
        :param str aws_region: Deprecated
        """
        pulumi.set(__self__, "aws_bucket", aws_bucket)
        pulumi.set(__self__, "aws_credentials_secret", aws_credentials_secret)
        pulumi.set(__self__, "aws_region", aws_region)

    @property
    @pulumi.getter(name="awsBucket")
    def aws_bucket(self) -> str:
        """
        Deprecated
        """
        return pulumi.get(self, "aws_bucket")

    @property
    @pulumi.getter(name="awsCredentialsSecret")
    def aws_credentials_secret(self) -> 'outputs.APIManagerSpecSystemFileStorageAmazonSimpleStorageServiceAwsCredentialsSecret':
        """
        Deprecated
        """
        return pulumi.get(self, "aws_credentials_secret")

    @property
    @pulumi.getter(name="awsRegion")
    def aws_region(self) -> str:
        """
        Deprecated
        """
        return pulumi.get(self, "aws_region")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APIManagerSpecSystemFileStorageAmazonSimpleStorageServiceAwsCredentialsSecret(dict):
    """
    Deprecated
    """
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        Deprecated
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APIManagerSpecSystemFileStoragePersistentVolumeClaim(dict):
    """
    Union type. Only one of the fields can be set.
    """
    def __init__(__self__, *,
                 storage_class_name: Optional[str] = None):
        """
        Union type. Only one of the fields can be set.
        """
        if storage_class_name is not None:
            pulumi.set(__self__, "storage_class_name", storage_class_name)

    @property
    @pulumi.getter(name="storageClassName")
    def storage_class_name(self) -> Optional[str]:
        return pulumi.get(self, "storage_class_name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APIManagerSpecSystemFileStorageSimpleStorageService(dict):
    def __init__(__self__, *,
                 configuration_secret_ref: 'outputs.APIManagerSpecSystemFileStorageSimpleStorageServiceConfigurationSecretRef'):
        pulumi.set(__self__, "configuration_secret_ref", configuration_secret_ref)

    @property
    @pulumi.getter(name="configurationSecretRef")
    def configuration_secret_ref(self) -> 'outputs.APIManagerSpecSystemFileStorageSimpleStorageServiceConfigurationSecretRef':
        return pulumi.get(self, "configuration_secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APIManagerSpecSystemFileStorageSimpleStorageServiceConfigurationSecretRef(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APIManagerSpecSystemSidekiqSpec(dict):
    def __init__(__self__, *,
                 replicas: Optional[int] = None):
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[int]:
        return pulumi.get(self, "replicas")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APIManagerSpecZync(dict):
    def __init__(__self__, *,
                 app_spec: Optional['outputs.APIManagerSpecZyncAppSpec'] = None,
                 image: Optional[str] = None,
                 postgre_sql_image: Optional[str] = None,
                 que_spec: Optional['outputs.APIManagerSpecZyncQueSpec'] = None):
        if app_spec is not None:
            pulumi.set(__self__, "app_spec", app_spec)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if postgre_sql_image is not None:
            pulumi.set(__self__, "postgre_sql_image", postgre_sql_image)
        if que_spec is not None:
            pulumi.set(__self__, "que_spec", que_spec)

    @property
    @pulumi.getter(name="appSpec")
    def app_spec(self) -> Optional['outputs.APIManagerSpecZyncAppSpec']:
        return pulumi.get(self, "app_spec")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="postgreSQLImage")
    def postgre_sql_image(self) -> Optional[str]:
        return pulumi.get(self, "postgre_sql_image")

    @property
    @pulumi.getter(name="queSpec")
    def que_spec(self) -> Optional['outputs.APIManagerSpecZyncQueSpec']:
        return pulumi.get(self, "que_spec")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APIManagerSpecZyncAppSpec(dict):
    def __init__(__self__, *,
                 replicas: Optional[int] = None):
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[int]:
        return pulumi.get(self, "replicas")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APIManagerSpecZyncQueSpec(dict):
    def __init__(__self__, *,
                 replicas: Optional[int] = None):
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[int]:
        return pulumi.get(self, "replicas")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APIManagerStatus(dict):
    def __init__(__self__, *,
                 deployments: 'outputs.APIManagerStatusDeployments',
                 conditions: Optional[Sequence['outputs.APIManagerStatusConditions']] = None):
        pulumi.set(__self__, "deployments", deployments)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def deployments(self) -> 'outputs.APIManagerStatusDeployments':
        return pulumi.get(self, "deployments")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.APIManagerStatusConditions']]:
        return pulumi.get(self, "conditions")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APIManagerStatusConditions(dict):
    def __init__(__self__, *,
                 status: str,
                 type: str):
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APIManagerStatusDeployments(dict):
    def __init__(__self__, *,
                 ready: Optional[Sequence[str]] = None,
                 starting: Optional[Sequence[str]] = None,
                 stopped: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] ready: Deployments are ready to serve requests
        :param Sequence[str] starting: Deployments are starting, may or may not succeed
        :param Sequence[str] stopped: Deployments are not starting, unclear what next step will be
        """
        if ready is not None:
            pulumi.set(__self__, "ready", ready)
        if starting is not None:
            pulumi.set(__self__, "starting", starting)
        if stopped is not None:
            pulumi.set(__self__, "stopped", stopped)

    @property
    @pulumi.getter
    def ready(self) -> Optional[Sequence[str]]:
        """
        Deployments are ready to serve requests
        """
        return pulumi.get(self, "ready")

    @property
    @pulumi.getter
    def starting(self) -> Optional[Sequence[str]]:
        """
        Deployments are starting, may or may not succeed
        """
        return pulumi.get(self, "starting")

    @property
    @pulumi.getter
    def stopped(self) -> Optional[Sequence[str]]:
        """
        Deployments are not starting, unclear what next step will be
        """
        return pulumi.get(self, "stopped")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



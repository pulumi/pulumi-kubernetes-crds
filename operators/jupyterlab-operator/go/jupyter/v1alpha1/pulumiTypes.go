// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Jupyterlab is the Schema for the jupyterlabs API
type JupyterlabType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// JupyterlabSpec defines the desired state of Jupyterlab
	Spec *JupyterlabSpec `pulumi:"spec"`
	// JupyterlabStatus defines the observed state of Jupyterlab
	Status *JupyterlabStatus `pulumi:"status"`
}

// JupyterlabTypeInput is an input type that accepts JupyterlabTypeArgs and JupyterlabTypeOutput values.
// You can construct a concrete instance of `JupyterlabTypeInput` via:
//
//          JupyterlabTypeArgs{...}
type JupyterlabTypeInput interface {
	pulumi.Input

	ToJupyterlabTypeOutput() JupyterlabTypeOutput
	ToJupyterlabTypeOutputWithContext(context.Context) JupyterlabTypeOutput
}

// Jupyterlab is the Schema for the jupyterlabs API
type JupyterlabTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// JupyterlabSpec defines the desired state of Jupyterlab
	Spec JupyterlabSpecPtrInput `pulumi:"spec"`
	// JupyterlabStatus defines the observed state of Jupyterlab
	Status JupyterlabStatusPtrInput `pulumi:"status"`
}

func (JupyterlabTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JupyterlabType)(nil)).Elem()
}

func (i JupyterlabTypeArgs) ToJupyterlabTypeOutput() JupyterlabTypeOutput {
	return i.ToJupyterlabTypeOutputWithContext(context.Background())
}

func (i JupyterlabTypeArgs) ToJupyterlabTypeOutputWithContext(ctx context.Context) JupyterlabTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JupyterlabTypeOutput)
}

// Jupyterlab is the Schema for the jupyterlabs API
type JupyterlabTypeOutput struct{ *pulumi.OutputState }

func (JupyterlabTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JupyterlabType)(nil)).Elem()
}

func (o JupyterlabTypeOutput) ToJupyterlabTypeOutput() JupyterlabTypeOutput {
	return o
}

func (o JupyterlabTypeOutput) ToJupyterlabTypeOutputWithContext(ctx context.Context) JupyterlabTypeOutput {
	return o
}

func (o JupyterlabTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JupyterlabType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o JupyterlabTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JupyterlabType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o JupyterlabTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v JupyterlabType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// JupyterlabSpec defines the desired state of Jupyterlab
func (o JupyterlabTypeOutput) Spec() JupyterlabSpecPtrOutput {
	return o.ApplyT(func(v JupyterlabType) *JupyterlabSpec { return v.Spec }).(JupyterlabSpecPtrOutput)
}

// JupyterlabStatus defines the observed state of Jupyterlab
func (o JupyterlabTypeOutput) Status() JupyterlabStatusPtrOutput {
	return o.ApplyT(func(v JupyterlabType) *JupyterlabStatus { return v.Status }).(JupyterlabStatusPtrOutput)
}

type JupyterlabMetadata struct {
}

// JupyterlabMetadataInput is an input type that accepts JupyterlabMetadataArgs and JupyterlabMetadataOutput values.
// You can construct a concrete instance of `JupyterlabMetadataInput` via:
//
//          JupyterlabMetadataArgs{...}
type JupyterlabMetadataInput interface {
	pulumi.Input

	ToJupyterlabMetadataOutput() JupyterlabMetadataOutput
	ToJupyterlabMetadataOutputWithContext(context.Context) JupyterlabMetadataOutput
}

type JupyterlabMetadataArgs struct {
}

func (JupyterlabMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JupyterlabMetadata)(nil)).Elem()
}

func (i JupyterlabMetadataArgs) ToJupyterlabMetadataOutput() JupyterlabMetadataOutput {
	return i.ToJupyterlabMetadataOutputWithContext(context.Background())
}

func (i JupyterlabMetadataArgs) ToJupyterlabMetadataOutputWithContext(ctx context.Context) JupyterlabMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JupyterlabMetadataOutput)
}

type JupyterlabMetadataOutput struct{ *pulumi.OutputState }

func (JupyterlabMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JupyterlabMetadata)(nil)).Elem()
}

func (o JupyterlabMetadataOutput) ToJupyterlabMetadataOutput() JupyterlabMetadataOutput {
	return o
}

func (o JupyterlabMetadataOutput) ToJupyterlabMetadataOutputWithContext(ctx context.Context) JupyterlabMetadataOutput {
	return o
}

// JupyterlabSpec defines the desired state of Jupyterlab
type JupyterlabSpec struct {
	// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
	Size int `pulumi:"size"`
}

// JupyterlabSpecInput is an input type that accepts JupyterlabSpecArgs and JupyterlabSpecOutput values.
// You can construct a concrete instance of `JupyterlabSpecInput` via:
//
//          JupyterlabSpecArgs{...}
type JupyterlabSpecInput interface {
	pulumi.Input

	ToJupyterlabSpecOutput() JupyterlabSpecOutput
	ToJupyterlabSpecOutputWithContext(context.Context) JupyterlabSpecOutput
}

// JupyterlabSpec defines the desired state of Jupyterlab
type JupyterlabSpecArgs struct {
	// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
	Size pulumi.IntInput `pulumi:"size"`
}

func (JupyterlabSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JupyterlabSpec)(nil)).Elem()
}

func (i JupyterlabSpecArgs) ToJupyterlabSpecOutput() JupyterlabSpecOutput {
	return i.ToJupyterlabSpecOutputWithContext(context.Background())
}

func (i JupyterlabSpecArgs) ToJupyterlabSpecOutputWithContext(ctx context.Context) JupyterlabSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JupyterlabSpecOutput)
}

func (i JupyterlabSpecArgs) ToJupyterlabSpecPtrOutput() JupyterlabSpecPtrOutput {
	return i.ToJupyterlabSpecPtrOutputWithContext(context.Background())
}

func (i JupyterlabSpecArgs) ToJupyterlabSpecPtrOutputWithContext(ctx context.Context) JupyterlabSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JupyterlabSpecOutput).ToJupyterlabSpecPtrOutputWithContext(ctx)
}

// JupyterlabSpecPtrInput is an input type that accepts JupyterlabSpecArgs, JupyterlabSpecPtr and JupyterlabSpecPtrOutput values.
// You can construct a concrete instance of `JupyterlabSpecPtrInput` via:
//
//          JupyterlabSpecArgs{...}
//
//  or:
//
//          nil
type JupyterlabSpecPtrInput interface {
	pulumi.Input

	ToJupyterlabSpecPtrOutput() JupyterlabSpecPtrOutput
	ToJupyterlabSpecPtrOutputWithContext(context.Context) JupyterlabSpecPtrOutput
}

type jupyterlabSpecPtrType JupyterlabSpecArgs

func JupyterlabSpecPtr(v *JupyterlabSpecArgs) JupyterlabSpecPtrInput {
	return (*jupyterlabSpecPtrType)(v)
}

func (*jupyterlabSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JupyterlabSpec)(nil)).Elem()
}

func (i *jupyterlabSpecPtrType) ToJupyterlabSpecPtrOutput() JupyterlabSpecPtrOutput {
	return i.ToJupyterlabSpecPtrOutputWithContext(context.Background())
}

func (i *jupyterlabSpecPtrType) ToJupyterlabSpecPtrOutputWithContext(ctx context.Context) JupyterlabSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JupyterlabSpecPtrOutput)
}

// JupyterlabSpec defines the desired state of Jupyterlab
type JupyterlabSpecOutput struct{ *pulumi.OutputState }

func (JupyterlabSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JupyterlabSpec)(nil)).Elem()
}

func (o JupyterlabSpecOutput) ToJupyterlabSpecOutput() JupyterlabSpecOutput {
	return o
}

func (o JupyterlabSpecOutput) ToJupyterlabSpecOutputWithContext(ctx context.Context) JupyterlabSpecOutput {
	return o
}

func (o JupyterlabSpecOutput) ToJupyterlabSpecPtrOutput() JupyterlabSpecPtrOutput {
	return o.ToJupyterlabSpecPtrOutputWithContext(context.Background())
}

func (o JupyterlabSpecOutput) ToJupyterlabSpecPtrOutputWithContext(ctx context.Context) JupyterlabSpecPtrOutput {
	return o.ApplyT(func(v JupyterlabSpec) *JupyterlabSpec {
		return &v
	}).(JupyterlabSpecPtrOutput)
}

// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
func (o JupyterlabSpecOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v JupyterlabSpec) int { return v.Size }).(pulumi.IntOutput)
}

type JupyterlabSpecPtrOutput struct{ *pulumi.OutputState }

func (JupyterlabSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JupyterlabSpec)(nil)).Elem()
}

func (o JupyterlabSpecPtrOutput) ToJupyterlabSpecPtrOutput() JupyterlabSpecPtrOutput {
	return o
}

func (o JupyterlabSpecPtrOutput) ToJupyterlabSpecPtrOutputWithContext(ctx context.Context) JupyterlabSpecPtrOutput {
	return o
}

func (o JupyterlabSpecPtrOutput) Elem() JupyterlabSpecOutput {
	return o.ApplyT(func(v *JupyterlabSpec) JupyterlabSpec { return *v }).(JupyterlabSpecOutput)
}

// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "make" to regenerate code after modifying this file
func (o JupyterlabSpecPtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JupyterlabSpec) *int {
		if v == nil {
			return nil
		}
		return &v.Size
	}).(pulumi.IntPtrOutput)
}

// JupyterlabStatus defines the observed state of Jupyterlab
type JupyterlabStatus struct {
	// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run "make" to regenerate code after modifying this file
	Nodes []string `pulumi:"nodes"`
}

// JupyterlabStatusInput is an input type that accepts JupyterlabStatusArgs and JupyterlabStatusOutput values.
// You can construct a concrete instance of `JupyterlabStatusInput` via:
//
//          JupyterlabStatusArgs{...}
type JupyterlabStatusInput interface {
	pulumi.Input

	ToJupyterlabStatusOutput() JupyterlabStatusOutput
	ToJupyterlabStatusOutputWithContext(context.Context) JupyterlabStatusOutput
}

// JupyterlabStatus defines the observed state of Jupyterlab
type JupyterlabStatusArgs struct {
	// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run "make" to regenerate code after modifying this file
	Nodes pulumi.StringArrayInput `pulumi:"nodes"`
}

func (JupyterlabStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JupyterlabStatus)(nil)).Elem()
}

func (i JupyterlabStatusArgs) ToJupyterlabStatusOutput() JupyterlabStatusOutput {
	return i.ToJupyterlabStatusOutputWithContext(context.Background())
}

func (i JupyterlabStatusArgs) ToJupyterlabStatusOutputWithContext(ctx context.Context) JupyterlabStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JupyterlabStatusOutput)
}

func (i JupyterlabStatusArgs) ToJupyterlabStatusPtrOutput() JupyterlabStatusPtrOutput {
	return i.ToJupyterlabStatusPtrOutputWithContext(context.Background())
}

func (i JupyterlabStatusArgs) ToJupyterlabStatusPtrOutputWithContext(ctx context.Context) JupyterlabStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JupyterlabStatusOutput).ToJupyterlabStatusPtrOutputWithContext(ctx)
}

// JupyterlabStatusPtrInput is an input type that accepts JupyterlabStatusArgs, JupyterlabStatusPtr and JupyterlabStatusPtrOutput values.
// You can construct a concrete instance of `JupyterlabStatusPtrInput` via:
//
//          JupyterlabStatusArgs{...}
//
//  or:
//
//          nil
type JupyterlabStatusPtrInput interface {
	pulumi.Input

	ToJupyterlabStatusPtrOutput() JupyterlabStatusPtrOutput
	ToJupyterlabStatusPtrOutputWithContext(context.Context) JupyterlabStatusPtrOutput
}

type jupyterlabStatusPtrType JupyterlabStatusArgs

func JupyterlabStatusPtr(v *JupyterlabStatusArgs) JupyterlabStatusPtrInput {
	return (*jupyterlabStatusPtrType)(v)
}

func (*jupyterlabStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JupyterlabStatus)(nil)).Elem()
}

func (i *jupyterlabStatusPtrType) ToJupyterlabStatusPtrOutput() JupyterlabStatusPtrOutput {
	return i.ToJupyterlabStatusPtrOutputWithContext(context.Background())
}

func (i *jupyterlabStatusPtrType) ToJupyterlabStatusPtrOutputWithContext(ctx context.Context) JupyterlabStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JupyterlabStatusPtrOutput)
}

// JupyterlabStatus defines the observed state of Jupyterlab
type JupyterlabStatusOutput struct{ *pulumi.OutputState }

func (JupyterlabStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JupyterlabStatus)(nil)).Elem()
}

func (o JupyterlabStatusOutput) ToJupyterlabStatusOutput() JupyterlabStatusOutput {
	return o
}

func (o JupyterlabStatusOutput) ToJupyterlabStatusOutputWithContext(ctx context.Context) JupyterlabStatusOutput {
	return o
}

func (o JupyterlabStatusOutput) ToJupyterlabStatusPtrOutput() JupyterlabStatusPtrOutput {
	return o.ToJupyterlabStatusPtrOutputWithContext(context.Background())
}

func (o JupyterlabStatusOutput) ToJupyterlabStatusPtrOutputWithContext(ctx context.Context) JupyterlabStatusPtrOutput {
	return o.ApplyT(func(v JupyterlabStatus) *JupyterlabStatus {
		return &v
	}).(JupyterlabStatusPtrOutput)
}

// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run "make" to regenerate code after modifying this file
func (o JupyterlabStatusOutput) Nodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JupyterlabStatus) []string { return v.Nodes }).(pulumi.StringArrayOutput)
}

type JupyterlabStatusPtrOutput struct{ *pulumi.OutputState }

func (JupyterlabStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JupyterlabStatus)(nil)).Elem()
}

func (o JupyterlabStatusPtrOutput) ToJupyterlabStatusPtrOutput() JupyterlabStatusPtrOutput {
	return o
}

func (o JupyterlabStatusPtrOutput) ToJupyterlabStatusPtrOutputWithContext(ctx context.Context) JupyterlabStatusPtrOutput {
	return o
}

func (o JupyterlabStatusPtrOutput) Elem() JupyterlabStatusOutput {
	return o.ApplyT(func(v *JupyterlabStatus) JupyterlabStatus { return *v }).(JupyterlabStatusOutput)
}

// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run "make" to regenerate code after modifying this file
func (o JupyterlabStatusPtrOutput) Nodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JupyterlabStatus) []string {
		if v == nil {
			return nil
		}
		return v.Nodes
	}).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(JupyterlabTypeOutput{})
	pulumi.RegisterOutputType(JupyterlabMetadataOutput{})
	pulumi.RegisterOutputType(JupyterlabSpecOutput{})
	pulumi.RegisterOutputType(JupyterlabSpecPtrOutput{})
	pulumi.RegisterOutputType(JupyterlabStatusOutput{})
	pulumi.RegisterOutputType(JupyterlabStatusPtrOutput{})
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// CSIIsilon is the Schema for the csiisilons API
type CSIIsilonType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// CSIIsilonSpec defines the desired state of CSIIsilon
	Spec *CSIIsilonSpec `pulumi:"spec"`
	// DriverStatus defines the observed state of CSIDriver
	Status *CSIIsilonStatus `pulumi:"status"`
}

// CSIIsilonTypeInput is an input type that accepts CSIIsilonTypeArgs and CSIIsilonTypeOutput values.
// You can construct a concrete instance of `CSIIsilonTypeInput` via:
//
//          CSIIsilonTypeArgs{...}
type CSIIsilonTypeInput interface {
	pulumi.Input

	ToCSIIsilonTypeOutput() CSIIsilonTypeOutput
	ToCSIIsilonTypeOutputWithContext(context.Context) CSIIsilonTypeOutput
}

// CSIIsilon is the Schema for the csiisilons API
type CSIIsilonTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// CSIIsilonSpec defines the desired state of CSIIsilon
	Spec CSIIsilonSpecPtrInput `pulumi:"spec"`
	// DriverStatus defines the observed state of CSIDriver
	Status CSIIsilonStatusPtrInput `pulumi:"status"`
}

func (CSIIsilonTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonType)(nil)).Elem()
}

func (i CSIIsilonTypeArgs) ToCSIIsilonTypeOutput() CSIIsilonTypeOutput {
	return i.ToCSIIsilonTypeOutputWithContext(context.Background())
}

func (i CSIIsilonTypeArgs) ToCSIIsilonTypeOutputWithContext(ctx context.Context) CSIIsilonTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonTypeOutput)
}

// CSIIsilon is the Schema for the csiisilons API
type CSIIsilonTypeOutput struct{ *pulumi.OutputState }

func (CSIIsilonTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonType)(nil)).Elem()
}

func (o CSIIsilonTypeOutput) ToCSIIsilonTypeOutput() CSIIsilonTypeOutput {
	return o
}

func (o CSIIsilonTypeOutput) ToCSIIsilonTypeOutputWithContext(ctx context.Context) CSIIsilonTypeOutput {
	return o
}

func (o CSIIsilonTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o CSIIsilonTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o CSIIsilonTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v CSIIsilonType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// CSIIsilonSpec defines the desired state of CSIIsilon
func (o CSIIsilonTypeOutput) Spec() CSIIsilonSpecPtrOutput {
	return o.ApplyT(func(v CSIIsilonType) *CSIIsilonSpec { return v.Spec }).(CSIIsilonSpecPtrOutput)
}

// DriverStatus defines the observed state of CSIDriver
func (o CSIIsilonTypeOutput) Status() CSIIsilonStatusPtrOutput {
	return o.ApplyT(func(v CSIIsilonType) *CSIIsilonStatus { return v.Status }).(CSIIsilonStatusPtrOutput)
}

type CSIIsilonMetadata struct {
}

// CSIIsilonMetadataInput is an input type that accepts CSIIsilonMetadataArgs and CSIIsilonMetadataOutput values.
// You can construct a concrete instance of `CSIIsilonMetadataInput` via:
//
//          CSIIsilonMetadataArgs{...}
type CSIIsilonMetadataInput interface {
	pulumi.Input

	ToCSIIsilonMetadataOutput() CSIIsilonMetadataOutput
	ToCSIIsilonMetadataOutputWithContext(context.Context) CSIIsilonMetadataOutput
}

type CSIIsilonMetadataArgs struct {
}

func (CSIIsilonMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonMetadata)(nil)).Elem()
}

func (i CSIIsilonMetadataArgs) ToCSIIsilonMetadataOutput() CSIIsilonMetadataOutput {
	return i.ToCSIIsilonMetadataOutputWithContext(context.Background())
}

func (i CSIIsilonMetadataArgs) ToCSIIsilonMetadataOutputWithContext(ctx context.Context) CSIIsilonMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonMetadataOutput)
}

type CSIIsilonMetadataOutput struct{ *pulumi.OutputState }

func (CSIIsilonMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonMetadata)(nil)).Elem()
}

func (o CSIIsilonMetadataOutput) ToCSIIsilonMetadataOutput() CSIIsilonMetadataOutput {
	return o
}

func (o CSIIsilonMetadataOutput) ToCSIIsilonMetadataOutputWithContext(ctx context.Context) CSIIsilonMetadataOutput {
	return o
}

// CSIIsilonSpec defines the desired state of CSIIsilon
type CSIIsilonSpec struct {
	// Driver is the specification for the CSI Isilon Driver
	Driver CSIIsilonSpecDriver `pulumi:"driver"`
}

// CSIIsilonSpecInput is an input type that accepts CSIIsilonSpecArgs and CSIIsilonSpecOutput values.
// You can construct a concrete instance of `CSIIsilonSpecInput` via:
//
//          CSIIsilonSpecArgs{...}
type CSIIsilonSpecInput interface {
	pulumi.Input

	ToCSIIsilonSpecOutput() CSIIsilonSpecOutput
	ToCSIIsilonSpecOutputWithContext(context.Context) CSIIsilonSpecOutput
}

// CSIIsilonSpec defines the desired state of CSIIsilon
type CSIIsilonSpecArgs struct {
	// Driver is the specification for the CSI Isilon Driver
	Driver CSIIsilonSpecDriverInput `pulumi:"driver"`
}

func (CSIIsilonSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpec)(nil)).Elem()
}

func (i CSIIsilonSpecArgs) ToCSIIsilonSpecOutput() CSIIsilonSpecOutput {
	return i.ToCSIIsilonSpecOutputWithContext(context.Background())
}

func (i CSIIsilonSpecArgs) ToCSIIsilonSpecOutputWithContext(ctx context.Context) CSIIsilonSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecOutput)
}

func (i CSIIsilonSpecArgs) ToCSIIsilonSpecPtrOutput() CSIIsilonSpecPtrOutput {
	return i.ToCSIIsilonSpecPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecArgs) ToCSIIsilonSpecPtrOutputWithContext(ctx context.Context) CSIIsilonSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecOutput).ToCSIIsilonSpecPtrOutputWithContext(ctx)
}

// CSIIsilonSpecPtrInput is an input type that accepts CSIIsilonSpecArgs, CSIIsilonSpecPtr and CSIIsilonSpecPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecPtrInput` via:
//
//          CSIIsilonSpecArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecPtrOutput() CSIIsilonSpecPtrOutput
	ToCSIIsilonSpecPtrOutputWithContext(context.Context) CSIIsilonSpecPtrOutput
}

type csiisilonSpecPtrType CSIIsilonSpecArgs

func CSIIsilonSpecPtr(v *CSIIsilonSpecArgs) CSIIsilonSpecPtrInput {
	return (*csiisilonSpecPtrType)(v)
}

func (*csiisilonSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpec)(nil)).Elem()
}

func (i *csiisilonSpecPtrType) ToCSIIsilonSpecPtrOutput() CSIIsilonSpecPtrOutput {
	return i.ToCSIIsilonSpecPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecPtrType) ToCSIIsilonSpecPtrOutputWithContext(ctx context.Context) CSIIsilonSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecPtrOutput)
}

// CSIIsilonSpec defines the desired state of CSIIsilon
type CSIIsilonSpecOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpec)(nil)).Elem()
}

func (o CSIIsilonSpecOutput) ToCSIIsilonSpecOutput() CSIIsilonSpecOutput {
	return o
}

func (o CSIIsilonSpecOutput) ToCSIIsilonSpecOutputWithContext(ctx context.Context) CSIIsilonSpecOutput {
	return o
}

func (o CSIIsilonSpecOutput) ToCSIIsilonSpecPtrOutput() CSIIsilonSpecPtrOutput {
	return o.ToCSIIsilonSpecPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecOutput) ToCSIIsilonSpecPtrOutputWithContext(ctx context.Context) CSIIsilonSpecPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpec) *CSIIsilonSpec {
		return &v
	}).(CSIIsilonSpecPtrOutput)
}

// Driver is the specification for the CSI Isilon Driver
func (o CSIIsilonSpecOutput) Driver() CSIIsilonSpecDriverOutput {
	return o.ApplyT(func(v CSIIsilonSpec) CSIIsilonSpecDriver { return v.Driver }).(CSIIsilonSpecDriverOutput)
}

type CSIIsilonSpecPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpec)(nil)).Elem()
}

func (o CSIIsilonSpecPtrOutput) ToCSIIsilonSpecPtrOutput() CSIIsilonSpecPtrOutput {
	return o
}

func (o CSIIsilonSpecPtrOutput) ToCSIIsilonSpecPtrOutputWithContext(ctx context.Context) CSIIsilonSpecPtrOutput {
	return o
}

func (o CSIIsilonSpecPtrOutput) Elem() CSIIsilonSpecOutput {
	return o.ApplyT(func(v *CSIIsilonSpec) CSIIsilonSpec { return *v }).(CSIIsilonSpecOutput)
}

// Driver is the specification for the CSI Isilon Driver
func (o CSIIsilonSpecPtrOutput) Driver() CSIIsilonSpecDriverPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpec) *CSIIsilonSpecDriver {
		if v == nil {
			return nil
		}
		return &v.Driver
	}).(CSIIsilonSpecDriverPtrOutput)
}

// Driver is the specification for the CSI Isilon Driver
type CSIIsilonSpecDriver struct {
	// AuthSecret is the name of the credentials secret for the driver
	AuthSecret *string `pulumi:"authSecret"`
	// Common is the common specification for both controller and node plugins
	Common CSIIsilonSpecDriverCommon `pulumi:"common"`
	// ConfigVersion is the configuration version of the driver
	ConfigVersion string `pulumi:"configVersion"`
	// Controller is the specification for Controller plugin only
	Controller *CSIIsilonSpecDriverController `pulumi:"controller"`
	// ForceUpdate is the boolean flag used to force an update of the driver instance
	ForceUpdate *bool `pulumi:"forceUpdate"`
	// Node is the specification for Node plugin only
	Node *CSIIsilonSpecDriverNode `pulumi:"node"`
	// Replicas is the count of controllers for Controller plugin
	Replicas int `pulumi:"replicas"`
	// SideCars is the specification for CSI sidecar containers
	SideCars []CSIIsilonSpecDriverSideCars `pulumi:"sideCars"`
	// SnapshotClass is the specification for Snapshot Classes
	SnapshotClass []CSIIsilonSpecDriverSnapshotClass `pulumi:"snapshotClass"`
	// StorageClass is the specification for Storage Classes
	StorageClass []CSIIsilonSpecDriverStorageClass `pulumi:"storageClass"`
	// TLSCertSecret is the name of the TLS Cert secret
	TlsCertSecret *string `pulumi:"tlsCertSecret"`
}

// CSIIsilonSpecDriverInput is an input type that accepts CSIIsilonSpecDriverArgs and CSIIsilonSpecDriverOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverInput` via:
//
//          CSIIsilonSpecDriverArgs{...}
type CSIIsilonSpecDriverInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverOutput() CSIIsilonSpecDriverOutput
	ToCSIIsilonSpecDriverOutputWithContext(context.Context) CSIIsilonSpecDriverOutput
}

// Driver is the specification for the CSI Isilon Driver
type CSIIsilonSpecDriverArgs struct {
	// AuthSecret is the name of the credentials secret for the driver
	AuthSecret pulumi.StringPtrInput `pulumi:"authSecret"`
	// Common is the common specification for both controller and node plugins
	Common CSIIsilonSpecDriverCommonInput `pulumi:"common"`
	// ConfigVersion is the configuration version of the driver
	ConfigVersion pulumi.StringInput `pulumi:"configVersion"`
	// Controller is the specification for Controller plugin only
	Controller CSIIsilonSpecDriverControllerPtrInput `pulumi:"controller"`
	// ForceUpdate is the boolean flag used to force an update of the driver instance
	ForceUpdate pulumi.BoolPtrInput `pulumi:"forceUpdate"`
	// Node is the specification for Node plugin only
	Node CSIIsilonSpecDriverNodePtrInput `pulumi:"node"`
	// Replicas is the count of controllers for Controller plugin
	Replicas pulumi.IntInput `pulumi:"replicas"`
	// SideCars is the specification for CSI sidecar containers
	SideCars CSIIsilonSpecDriverSideCarsArrayInput `pulumi:"sideCars"`
	// SnapshotClass is the specification for Snapshot Classes
	SnapshotClass CSIIsilonSpecDriverSnapshotClassArrayInput `pulumi:"snapshotClass"`
	// StorageClass is the specification for Storage Classes
	StorageClass CSIIsilonSpecDriverStorageClassArrayInput `pulumi:"storageClass"`
	// TLSCertSecret is the name of the TLS Cert secret
	TlsCertSecret pulumi.StringPtrInput `pulumi:"tlsCertSecret"`
}

func (CSIIsilonSpecDriverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriver)(nil)).Elem()
}

func (i CSIIsilonSpecDriverArgs) ToCSIIsilonSpecDriverOutput() CSIIsilonSpecDriverOutput {
	return i.ToCSIIsilonSpecDriverOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverArgs) ToCSIIsilonSpecDriverOutputWithContext(ctx context.Context) CSIIsilonSpecDriverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverOutput)
}

func (i CSIIsilonSpecDriverArgs) ToCSIIsilonSpecDriverPtrOutput() CSIIsilonSpecDriverPtrOutput {
	return i.ToCSIIsilonSpecDriverPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverArgs) ToCSIIsilonSpecDriverPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverOutput).ToCSIIsilonSpecDriverPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverPtrInput is an input type that accepts CSIIsilonSpecDriverArgs, CSIIsilonSpecDriverPtr and CSIIsilonSpecDriverPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverPtrInput` via:
//
//          CSIIsilonSpecDriverArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverPtrOutput() CSIIsilonSpecDriverPtrOutput
	ToCSIIsilonSpecDriverPtrOutputWithContext(context.Context) CSIIsilonSpecDriverPtrOutput
}

type csiisilonSpecDriverPtrType CSIIsilonSpecDriverArgs

func CSIIsilonSpecDriverPtr(v *CSIIsilonSpecDriverArgs) CSIIsilonSpecDriverPtrInput {
	return (*csiisilonSpecDriverPtrType)(v)
}

func (*csiisilonSpecDriverPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriver)(nil)).Elem()
}

func (i *csiisilonSpecDriverPtrType) ToCSIIsilonSpecDriverPtrOutput() CSIIsilonSpecDriverPtrOutput {
	return i.ToCSIIsilonSpecDriverPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverPtrType) ToCSIIsilonSpecDriverPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverPtrOutput)
}

// Driver is the specification for the CSI Isilon Driver
type CSIIsilonSpecDriverOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriver)(nil)).Elem()
}

func (o CSIIsilonSpecDriverOutput) ToCSIIsilonSpecDriverOutput() CSIIsilonSpecDriverOutput {
	return o
}

func (o CSIIsilonSpecDriverOutput) ToCSIIsilonSpecDriverOutputWithContext(ctx context.Context) CSIIsilonSpecDriverOutput {
	return o
}

func (o CSIIsilonSpecDriverOutput) ToCSIIsilonSpecDriverPtrOutput() CSIIsilonSpecDriverPtrOutput {
	return o.ToCSIIsilonSpecDriverPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverOutput) ToCSIIsilonSpecDriverPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriver) *CSIIsilonSpecDriver {
		return &v
	}).(CSIIsilonSpecDriverPtrOutput)
}

// AuthSecret is the name of the credentials secret for the driver
func (o CSIIsilonSpecDriverOutput) AuthSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriver) *string { return v.AuthSecret }).(pulumi.StringPtrOutput)
}

// Common is the common specification for both controller and node plugins
func (o CSIIsilonSpecDriverOutput) Common() CSIIsilonSpecDriverCommonOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriver) CSIIsilonSpecDriverCommon { return v.Common }).(CSIIsilonSpecDriverCommonOutput)
}

// ConfigVersion is the configuration version of the driver
func (o CSIIsilonSpecDriverOutput) ConfigVersion() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriver) string { return v.ConfigVersion }).(pulumi.StringOutput)
}

// Controller is the specification for Controller plugin only
func (o CSIIsilonSpecDriverOutput) Controller() CSIIsilonSpecDriverControllerPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriver) *CSIIsilonSpecDriverController { return v.Controller }).(CSIIsilonSpecDriverControllerPtrOutput)
}

// ForceUpdate is the boolean flag used to force an update of the driver instance
func (o CSIIsilonSpecDriverOutput) ForceUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriver) *bool { return v.ForceUpdate }).(pulumi.BoolPtrOutput)
}

// Node is the specification for Node plugin only
func (o CSIIsilonSpecDriverOutput) Node() CSIIsilonSpecDriverNodePtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriver) *CSIIsilonSpecDriverNode { return v.Node }).(CSIIsilonSpecDriverNodePtrOutput)
}

// Replicas is the count of controllers for Controller plugin
func (o CSIIsilonSpecDriverOutput) Replicas() pulumi.IntOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriver) int { return v.Replicas }).(pulumi.IntOutput)
}

// SideCars is the specification for CSI sidecar containers
func (o CSIIsilonSpecDriverOutput) SideCars() CSIIsilonSpecDriverSideCarsArrayOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriver) []CSIIsilonSpecDriverSideCars { return v.SideCars }).(CSIIsilonSpecDriverSideCarsArrayOutput)
}

// SnapshotClass is the specification for Snapshot Classes
func (o CSIIsilonSpecDriverOutput) SnapshotClass() CSIIsilonSpecDriverSnapshotClassArrayOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriver) []CSIIsilonSpecDriverSnapshotClass { return v.SnapshotClass }).(CSIIsilonSpecDriverSnapshotClassArrayOutput)
}

// StorageClass is the specification for Storage Classes
func (o CSIIsilonSpecDriverOutput) StorageClass() CSIIsilonSpecDriverStorageClassArrayOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriver) []CSIIsilonSpecDriverStorageClass { return v.StorageClass }).(CSIIsilonSpecDriverStorageClassArrayOutput)
}

// TLSCertSecret is the name of the TLS Cert secret
func (o CSIIsilonSpecDriverOutput) TlsCertSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriver) *string { return v.TlsCertSecret }).(pulumi.StringPtrOutput)
}

type CSIIsilonSpecDriverPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriver)(nil)).Elem()
}

func (o CSIIsilonSpecDriverPtrOutput) ToCSIIsilonSpecDriverPtrOutput() CSIIsilonSpecDriverPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverPtrOutput) ToCSIIsilonSpecDriverPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverPtrOutput) Elem() CSIIsilonSpecDriverOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriver) CSIIsilonSpecDriver { return *v }).(CSIIsilonSpecDriverOutput)
}

// AuthSecret is the name of the credentials secret for the driver
func (o CSIIsilonSpecDriverPtrOutput) AuthSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriver) *string {
		if v == nil {
			return nil
		}
		return v.AuthSecret
	}).(pulumi.StringPtrOutput)
}

// Common is the common specification for both controller and node plugins
func (o CSIIsilonSpecDriverPtrOutput) Common() CSIIsilonSpecDriverCommonPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriver) *CSIIsilonSpecDriverCommon {
		if v == nil {
			return nil
		}
		return &v.Common
	}).(CSIIsilonSpecDriverCommonPtrOutput)
}

// ConfigVersion is the configuration version of the driver
func (o CSIIsilonSpecDriverPtrOutput) ConfigVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriver) *string {
		if v == nil {
			return nil
		}
		return &v.ConfigVersion
	}).(pulumi.StringPtrOutput)
}

// Controller is the specification for Controller plugin only
func (o CSIIsilonSpecDriverPtrOutput) Controller() CSIIsilonSpecDriverControllerPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriver) *CSIIsilonSpecDriverController {
		if v == nil {
			return nil
		}
		return v.Controller
	}).(CSIIsilonSpecDriverControllerPtrOutput)
}

// ForceUpdate is the boolean flag used to force an update of the driver instance
func (o CSIIsilonSpecDriverPtrOutput) ForceUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriver) *bool {
		if v == nil {
			return nil
		}
		return v.ForceUpdate
	}).(pulumi.BoolPtrOutput)
}

// Node is the specification for Node plugin only
func (o CSIIsilonSpecDriverPtrOutput) Node() CSIIsilonSpecDriverNodePtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriver) *CSIIsilonSpecDriverNode {
		if v == nil {
			return nil
		}
		return v.Node
	}).(CSIIsilonSpecDriverNodePtrOutput)
}

// Replicas is the count of controllers for Controller plugin
func (o CSIIsilonSpecDriverPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriver) *int {
		if v == nil {
			return nil
		}
		return &v.Replicas
	}).(pulumi.IntPtrOutput)
}

// SideCars is the specification for CSI sidecar containers
func (o CSIIsilonSpecDriverPtrOutput) SideCars() CSIIsilonSpecDriverSideCarsArrayOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriver) []CSIIsilonSpecDriverSideCars {
		if v == nil {
			return nil
		}
		return v.SideCars
	}).(CSIIsilonSpecDriverSideCarsArrayOutput)
}

// SnapshotClass is the specification for Snapshot Classes
func (o CSIIsilonSpecDriverPtrOutput) SnapshotClass() CSIIsilonSpecDriverSnapshotClassArrayOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriver) []CSIIsilonSpecDriverSnapshotClass {
		if v == nil {
			return nil
		}
		return v.SnapshotClass
	}).(CSIIsilonSpecDriverSnapshotClassArrayOutput)
}

// StorageClass is the specification for Storage Classes
func (o CSIIsilonSpecDriverPtrOutput) StorageClass() CSIIsilonSpecDriverStorageClassArrayOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriver) []CSIIsilonSpecDriverStorageClass {
		if v == nil {
			return nil
		}
		return v.StorageClass
	}).(CSIIsilonSpecDriverStorageClassArrayOutput)
}

// TLSCertSecret is the name of the TLS Cert secret
func (o CSIIsilonSpecDriverPtrOutput) TlsCertSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriver) *string {
		if v == nil {
			return nil
		}
		return v.TlsCertSecret
	}).(pulumi.StringPtrOutput)
}

// Common is the common specification for both controller and node plugins
type CSIIsilonSpecDriverCommon struct {
	// Args is the set of arguments for the container
	Args []string `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs []CSIIsilonSpecDriverCommonEnvs `pulumi:"envs"`
	// Image is the image tag for the Container
	Image *string `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name *string `pulumi:"name"`
}

// CSIIsilonSpecDriverCommonInput is an input type that accepts CSIIsilonSpecDriverCommonArgs and CSIIsilonSpecDriverCommonOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonInput` via:
//
//          CSIIsilonSpecDriverCommonArgs{...}
type CSIIsilonSpecDriverCommonInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonOutput() CSIIsilonSpecDriverCommonOutput
	ToCSIIsilonSpecDriverCommonOutputWithContext(context.Context) CSIIsilonSpecDriverCommonOutput
}

// Common is the common specification for both controller and node plugins
type CSIIsilonSpecDriverCommonArgs struct {
	// Args is the set of arguments for the container
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs CSIIsilonSpecDriverCommonEnvsArrayInput `pulumi:"envs"`
	// Image is the image tag for the Container
	Image pulumi.StringPtrInput `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (CSIIsilonSpecDriverCommonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommon)(nil)).Elem()
}

func (i CSIIsilonSpecDriverCommonArgs) ToCSIIsilonSpecDriverCommonOutput() CSIIsilonSpecDriverCommonOutput {
	return i.ToCSIIsilonSpecDriverCommonOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonArgs) ToCSIIsilonSpecDriverCommonOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonOutput)
}

func (i CSIIsilonSpecDriverCommonArgs) ToCSIIsilonSpecDriverCommonPtrOutput() CSIIsilonSpecDriverCommonPtrOutput {
	return i.ToCSIIsilonSpecDriverCommonPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonArgs) ToCSIIsilonSpecDriverCommonPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonOutput).ToCSIIsilonSpecDriverCommonPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverCommonPtrInput is an input type that accepts CSIIsilonSpecDriverCommonArgs, CSIIsilonSpecDriverCommonPtr and CSIIsilonSpecDriverCommonPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonPtrInput` via:
//
//          CSIIsilonSpecDriverCommonArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverCommonPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonPtrOutput() CSIIsilonSpecDriverCommonPtrOutput
	ToCSIIsilonSpecDriverCommonPtrOutputWithContext(context.Context) CSIIsilonSpecDriverCommonPtrOutput
}

type csiisilonSpecDriverCommonPtrType CSIIsilonSpecDriverCommonArgs

func CSIIsilonSpecDriverCommonPtr(v *CSIIsilonSpecDriverCommonArgs) CSIIsilonSpecDriverCommonPtrInput {
	return (*csiisilonSpecDriverCommonPtrType)(v)
}

func (*csiisilonSpecDriverCommonPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverCommon)(nil)).Elem()
}

func (i *csiisilonSpecDriverCommonPtrType) ToCSIIsilonSpecDriverCommonPtrOutput() CSIIsilonSpecDriverCommonPtrOutput {
	return i.ToCSIIsilonSpecDriverCommonPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverCommonPtrType) ToCSIIsilonSpecDriverCommonPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonPtrOutput)
}

// Common is the common specification for both controller and node plugins
type CSIIsilonSpecDriverCommonOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommon)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonOutput) ToCSIIsilonSpecDriverCommonOutput() CSIIsilonSpecDriverCommonOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonOutput) ToCSIIsilonSpecDriverCommonOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonOutput) ToCSIIsilonSpecDriverCommonPtrOutput() CSIIsilonSpecDriverCommonPtrOutput {
	return o.ToCSIIsilonSpecDriverCommonPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverCommonOutput) ToCSIIsilonSpecDriverCommonPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommon) *CSIIsilonSpecDriverCommon {
		return &v
	}).(CSIIsilonSpecDriverCommonPtrOutput)
}

// Args is the set of arguments for the container
func (o CSIIsilonSpecDriverCommonOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommon) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIIsilonSpecDriverCommonOutput) Envs() CSIIsilonSpecDriverCommonEnvsArrayOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommon) []CSIIsilonSpecDriverCommonEnvs { return v.Envs }).(CSIIsilonSpecDriverCommonEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIIsilonSpecDriverCommonOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommon) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIIsilonSpecDriverCommonOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommon) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIIsilonSpecDriverCommonOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommon) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CSIIsilonSpecDriverCommonPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverCommon)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonPtrOutput) ToCSIIsilonSpecDriverCommonPtrOutput() CSIIsilonSpecDriverCommonPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonPtrOutput) ToCSIIsilonSpecDriverCommonPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonPtrOutput) Elem() CSIIsilonSpecDriverCommonOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommon) CSIIsilonSpecDriverCommon { return *v }).(CSIIsilonSpecDriverCommonOutput)
}

// Args is the set of arguments for the container
func (o CSIIsilonSpecDriverCommonPtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommon) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIIsilonSpecDriverCommonPtrOutput) Envs() CSIIsilonSpecDriverCommonEnvsArrayOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommon) []CSIIsilonSpecDriverCommonEnvs {
		if v == nil {
			return nil
		}
		return v.Envs
	}).(CSIIsilonSpecDriverCommonEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIIsilonSpecDriverCommonPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommon) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIIsilonSpecDriverCommonPtrOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommon) *string {
		if v == nil {
			return nil
		}
		return v.ImagePullPolicy
	}).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIIsilonSpecDriverCommonPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommon) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIIsilonSpecDriverCommonEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *CSIIsilonSpecDriverCommonEnvsValueFrom `pulumi:"valueFrom"`
}

// CSIIsilonSpecDriverCommonEnvsInput is an input type that accepts CSIIsilonSpecDriverCommonEnvsArgs and CSIIsilonSpecDriverCommonEnvsOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonEnvsInput` via:
//
//          CSIIsilonSpecDriverCommonEnvsArgs{...}
type CSIIsilonSpecDriverCommonEnvsInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonEnvsOutput() CSIIsilonSpecDriverCommonEnvsOutput
	ToCSIIsilonSpecDriverCommonEnvsOutputWithContext(context.Context) CSIIsilonSpecDriverCommonEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type CSIIsilonSpecDriverCommonEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom CSIIsilonSpecDriverCommonEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (CSIIsilonSpecDriverCommonEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommonEnvs)(nil)).Elem()
}

func (i CSIIsilonSpecDriverCommonEnvsArgs) ToCSIIsilonSpecDriverCommonEnvsOutput() CSIIsilonSpecDriverCommonEnvsOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonEnvsArgs) ToCSIIsilonSpecDriverCommonEnvsOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsOutput)
}

// CSIIsilonSpecDriverCommonEnvsArrayInput is an input type that accepts CSIIsilonSpecDriverCommonEnvsArray and CSIIsilonSpecDriverCommonEnvsArrayOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonEnvsArrayInput` via:
//
//          CSIIsilonSpecDriverCommonEnvsArray{ CSIIsilonSpecDriverCommonEnvsArgs{...} }
type CSIIsilonSpecDriverCommonEnvsArrayInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonEnvsArrayOutput() CSIIsilonSpecDriverCommonEnvsArrayOutput
	ToCSIIsilonSpecDriverCommonEnvsArrayOutputWithContext(context.Context) CSIIsilonSpecDriverCommonEnvsArrayOutput
}

type CSIIsilonSpecDriverCommonEnvsArray []CSIIsilonSpecDriverCommonEnvsInput

func (CSIIsilonSpecDriverCommonEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverCommonEnvs)(nil)).Elem()
}

func (i CSIIsilonSpecDriverCommonEnvsArray) ToCSIIsilonSpecDriverCommonEnvsArrayOutput() CSIIsilonSpecDriverCommonEnvsArrayOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsArrayOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonEnvsArray) ToCSIIsilonSpecDriverCommonEnvsArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIIsilonSpecDriverCommonEnvsOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommonEnvs)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonEnvsOutput) ToCSIIsilonSpecDriverCommonEnvsOutput() CSIIsilonSpecDriverCommonEnvsOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsOutput) ToCSIIsilonSpecDriverCommonEnvsOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o CSIIsilonSpecDriverCommonEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o CSIIsilonSpecDriverCommonEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o CSIIsilonSpecDriverCommonEnvsOutput) ValueFrom() CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvs) *CSIIsilonSpecDriverCommonEnvsValueFrom { return v.ValueFrom }).(CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput)
}

type CSIIsilonSpecDriverCommonEnvsArrayOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverCommonEnvs)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonEnvsArrayOutput) ToCSIIsilonSpecDriverCommonEnvsArrayOutput() CSIIsilonSpecDriverCommonEnvsArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsArrayOutput) ToCSIIsilonSpecDriverCommonEnvsArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsArrayOutput) Index(i pulumi.IntInput) CSIIsilonSpecDriverCommonEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIIsilonSpecDriverCommonEnvs {
		return vs[0].([]CSIIsilonSpecDriverCommonEnvs)[vs[1].(int)]
	}).(CSIIsilonSpecDriverCommonEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIIsilonSpecDriverCommonEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef *CSIIsilonSpecDriverCommonEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// CSIIsilonSpecDriverCommonEnvsValueFromInput is an input type that accepts CSIIsilonSpecDriverCommonEnvsValueFromArgs and CSIIsilonSpecDriverCommonEnvsValueFromOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonEnvsValueFromInput` via:
//
//          CSIIsilonSpecDriverCommonEnvsValueFromArgs{...}
type CSIIsilonSpecDriverCommonEnvsValueFromInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonEnvsValueFromOutput() CSIIsilonSpecDriverCommonEnvsValueFromOutput
	ToCSIIsilonSpecDriverCommonEnvsValueFromOutputWithContext(context.Context) CSIIsilonSpecDriverCommonEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIIsilonSpecDriverCommonEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (CSIIsilonSpecDriverCommonEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommonEnvsValueFrom)(nil)).Elem()
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromOutput() CSIIsilonSpecDriverCommonEnvsValueFromOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromOutput)
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromOutput).ToCSIIsilonSpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverCommonEnvsValueFromPtrInput is an input type that accepts CSIIsilonSpecDriverCommonEnvsValueFromArgs, CSIIsilonSpecDriverCommonEnvsValueFromPtr and CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonEnvsValueFromPtrInput` via:
//
//          CSIIsilonSpecDriverCommonEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverCommonEnvsValueFromPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonEnvsValueFromPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput
	ToCSIIsilonSpecDriverCommonEnvsValueFromPtrOutputWithContext(context.Context) CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput
}

type csiisilonSpecDriverCommonEnvsValueFromPtrType CSIIsilonSpecDriverCommonEnvsValueFromArgs

func CSIIsilonSpecDriverCommonEnvsValueFromPtr(v *CSIIsilonSpecDriverCommonEnvsValueFromArgs) CSIIsilonSpecDriverCommonEnvsValueFromPtrInput {
	return (*csiisilonSpecDriverCommonEnvsValueFromPtrType)(v)
}

func (*csiisilonSpecDriverCommonEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverCommonEnvsValueFrom)(nil)).Elem()
}

func (i *csiisilonSpecDriverCommonEnvsValueFromPtrType) ToCSIIsilonSpecDriverCommonEnvsValueFromPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverCommonEnvsValueFromPtrType) ToCSIIsilonSpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIIsilonSpecDriverCommonEnvsValueFromOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommonEnvsValueFrom)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromOutput() CSIIsilonSpecDriverCommonEnvsValueFromOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput {
	return o.ToCSIIsilonSpecDriverCommonEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFrom) *CSIIsilonSpecDriverCommonEnvsValueFrom {
		return &v
	}).(CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o CSIIsilonSpecDriverCommonEnvsValueFromOutput) ConfigMapKeyRef() CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFrom) *CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o CSIIsilonSpecDriverCommonEnvsValueFromOutput) FieldRef() CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFrom) *CSIIsilonSpecDriverCommonEnvsValueFromFieldRef {
		return v.FieldRef
	}).(CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIIsilonSpecDriverCommonEnvsValueFromOutput) ResourceFieldRef() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFrom) *CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIIsilonSpecDriverCommonEnvsValueFromOutput) SecretKeyRef() CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFrom) *CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput)
}

type CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverCommonEnvsValueFrom)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput) Elem() CSIIsilonSpecDriverCommonEnvsValueFromOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFrom) CSIIsilonSpecDriverCommonEnvsValueFrom { return *v }).(CSIIsilonSpecDriverCommonEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput) ConfigMapKeyRef() CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFrom) *CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput) FieldRef() CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFrom) *CSIIsilonSpecDriverCommonEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput) ResourceFieldRef() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFrom) *CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput) SecretKeyRef() CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFrom) *CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefInput is an input type that accepts CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs and CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefInput` via:
//
//          CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs{...}
type CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput() CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput
	ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput() CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput)
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput).ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs, CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtr and CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput
	ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput
}

type csiisilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs

func CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtr(v *CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput {
	return (*csiisilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*csiisilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType) ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType) ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput() CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef) *CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef {
		return &v
	}).(CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) Elem() CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef) CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef {
		return *v
	}).(CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIIsilonSpecDriverCommonEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// CSIIsilonSpecDriverCommonEnvsValueFromFieldRefInput is an input type that accepts CSIIsilonSpecDriverCommonEnvsValueFromFieldRefArgs and CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonEnvsValueFromFieldRefInput` via:
//
//          CSIIsilonSpecDriverCommonEnvsValueFromFieldRefArgs{...}
type CSIIsilonSpecDriverCommonEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput() CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput
	ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutputWithContext(context.Context) CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIIsilonSpecDriverCommonEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (CSIIsilonSpecDriverCommonEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommonEnvsValueFromFieldRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput() CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput)
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput).ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrInput is an input type that accepts CSIIsilonSpecDriverCommonEnvsValueFromFieldRefArgs, CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtr and CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrInput` via:
//
//          CSIIsilonSpecDriverCommonEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput
	ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput
}

type csiisilonSpecDriverCommonEnvsValueFromFieldRefPtrType CSIIsilonSpecDriverCommonEnvsValueFromFieldRefArgs

func CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtr(v *CSIIsilonSpecDriverCommonEnvsValueFromFieldRefArgs) CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrInput {
	return (*csiisilonSpecDriverCommonEnvsValueFromFieldRefPtrType)(v)
}

func (*csiisilonSpecDriverCommonEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverCommonEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverCommonEnvsValueFromFieldRefPtrType) ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverCommonEnvsValueFromFieldRefPtrType) ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommonEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput() CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o.ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromFieldRef) *CSIIsilonSpecDriverCommonEnvsValueFromFieldRef {
		return &v
	}).(CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverCommonEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput) Elem() CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromFieldRef) CSIIsilonSpecDriverCommonEnvsValueFromFieldRef {
		return *v
	}).(CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *string `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefInput is an input type that accepts CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefArgs and CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefInput` via:
//
//          CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefArgs{...}
type CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput
	ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutputWithContext(context.Context) CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor pulumi.StringPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput)
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput).ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrInput is an input type that accepts CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefArgs, CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtr and CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrInput` via:
//
//          CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput
	ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput
}

type csiisilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrType CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefArgs

func CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtr(v *CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefArgs) CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrInput {
	return (*csiisilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*csiisilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrType) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrType) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef) *CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef {
		return &v
	}).(CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef) *string { return v.Divisor }).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) Elem() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef) CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef {
		return *v
	}).(CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefInput is an input type that accepts CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefArgs and CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefInput` via:
//
//          CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefArgs{...}
type CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput() CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput
	ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutputWithContext(context.Context) CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput() CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput)
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput).ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrInput is an input type that accepts CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefArgs, CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtr and CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrInput` via:
//
//          CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput
	ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput
}

type csiisilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrType CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefArgs

func CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtr(v *CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefArgs) CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrInput {
	return (*csiisilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*csiisilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrType) ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrType) ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput() CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef) *CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef {
		return &v
	}).(CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) Elem() CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef) CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef {
		return *v
	}).(CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Controller is the specification for Controller plugin only
type CSIIsilonSpecDriverController struct {
	// Args is the set of arguments for the container
	Args []string `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs []CSIIsilonSpecDriverControllerEnvs `pulumi:"envs"`
	// Image is the image tag for the Container
	Image *string `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name *string `pulumi:"name"`
}

// CSIIsilonSpecDriverControllerInput is an input type that accepts CSIIsilonSpecDriverControllerArgs and CSIIsilonSpecDriverControllerOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerInput` via:
//
//          CSIIsilonSpecDriverControllerArgs{...}
type CSIIsilonSpecDriverControllerInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerOutput() CSIIsilonSpecDriverControllerOutput
	ToCSIIsilonSpecDriverControllerOutputWithContext(context.Context) CSIIsilonSpecDriverControllerOutput
}

// Controller is the specification for Controller plugin only
type CSIIsilonSpecDriverControllerArgs struct {
	// Args is the set of arguments for the container
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs CSIIsilonSpecDriverControllerEnvsArrayInput `pulumi:"envs"`
	// Image is the image tag for the Container
	Image pulumi.StringPtrInput `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (CSIIsilonSpecDriverControllerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverController)(nil)).Elem()
}

func (i CSIIsilonSpecDriverControllerArgs) ToCSIIsilonSpecDriverControllerOutput() CSIIsilonSpecDriverControllerOutput {
	return i.ToCSIIsilonSpecDriverControllerOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerArgs) ToCSIIsilonSpecDriverControllerOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerOutput)
}

func (i CSIIsilonSpecDriverControllerArgs) ToCSIIsilonSpecDriverControllerPtrOutput() CSIIsilonSpecDriverControllerPtrOutput {
	return i.ToCSIIsilonSpecDriverControllerPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerArgs) ToCSIIsilonSpecDriverControllerPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerOutput).ToCSIIsilonSpecDriverControllerPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverControllerPtrInput is an input type that accepts CSIIsilonSpecDriverControllerArgs, CSIIsilonSpecDriverControllerPtr and CSIIsilonSpecDriverControllerPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerPtrInput` via:
//
//          CSIIsilonSpecDriverControllerArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverControllerPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerPtrOutput() CSIIsilonSpecDriverControllerPtrOutput
	ToCSIIsilonSpecDriverControllerPtrOutputWithContext(context.Context) CSIIsilonSpecDriverControllerPtrOutput
}

type csiisilonSpecDriverControllerPtrType CSIIsilonSpecDriverControllerArgs

func CSIIsilonSpecDriverControllerPtr(v *CSIIsilonSpecDriverControllerArgs) CSIIsilonSpecDriverControllerPtrInput {
	return (*csiisilonSpecDriverControllerPtrType)(v)
}

func (*csiisilonSpecDriverControllerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverController)(nil)).Elem()
}

func (i *csiisilonSpecDriverControllerPtrType) ToCSIIsilonSpecDriverControllerPtrOutput() CSIIsilonSpecDriverControllerPtrOutput {
	return i.ToCSIIsilonSpecDriverControllerPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverControllerPtrType) ToCSIIsilonSpecDriverControllerPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerPtrOutput)
}

// Controller is the specification for Controller plugin only
type CSIIsilonSpecDriverControllerOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverController)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerOutput) ToCSIIsilonSpecDriverControllerOutput() CSIIsilonSpecDriverControllerOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerOutput) ToCSIIsilonSpecDriverControllerOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerOutput) ToCSIIsilonSpecDriverControllerPtrOutput() CSIIsilonSpecDriverControllerPtrOutput {
	return o.ToCSIIsilonSpecDriverControllerPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverControllerOutput) ToCSIIsilonSpecDriverControllerPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverController) *CSIIsilonSpecDriverController {
		return &v
	}).(CSIIsilonSpecDriverControllerPtrOutput)
}

// Args is the set of arguments for the container
func (o CSIIsilonSpecDriverControllerOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverController) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIIsilonSpecDriverControllerOutput) Envs() CSIIsilonSpecDriverControllerEnvsArrayOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverController) []CSIIsilonSpecDriverControllerEnvs { return v.Envs }).(CSIIsilonSpecDriverControllerEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIIsilonSpecDriverControllerOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverController) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIIsilonSpecDriverControllerOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverController) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIIsilonSpecDriverControllerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverController) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CSIIsilonSpecDriverControllerPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverController)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerPtrOutput) ToCSIIsilonSpecDriverControllerPtrOutput() CSIIsilonSpecDriverControllerPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerPtrOutput) ToCSIIsilonSpecDriverControllerPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerPtrOutput) Elem() CSIIsilonSpecDriverControllerOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverController) CSIIsilonSpecDriverController { return *v }).(CSIIsilonSpecDriverControllerOutput)
}

// Args is the set of arguments for the container
func (o CSIIsilonSpecDriverControllerPtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverController) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIIsilonSpecDriverControllerPtrOutput) Envs() CSIIsilonSpecDriverControllerEnvsArrayOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverController) []CSIIsilonSpecDriverControllerEnvs {
		if v == nil {
			return nil
		}
		return v.Envs
	}).(CSIIsilonSpecDriverControllerEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIIsilonSpecDriverControllerPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverController) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIIsilonSpecDriverControllerPtrOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverController) *string {
		if v == nil {
			return nil
		}
		return v.ImagePullPolicy
	}).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIIsilonSpecDriverControllerPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverController) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIIsilonSpecDriverControllerEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *CSIIsilonSpecDriverControllerEnvsValueFrom `pulumi:"valueFrom"`
}

// CSIIsilonSpecDriverControllerEnvsInput is an input type that accepts CSIIsilonSpecDriverControllerEnvsArgs and CSIIsilonSpecDriverControllerEnvsOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerEnvsInput` via:
//
//          CSIIsilonSpecDriverControllerEnvsArgs{...}
type CSIIsilonSpecDriverControllerEnvsInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerEnvsOutput() CSIIsilonSpecDriverControllerEnvsOutput
	ToCSIIsilonSpecDriverControllerEnvsOutputWithContext(context.Context) CSIIsilonSpecDriverControllerEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type CSIIsilonSpecDriverControllerEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom CSIIsilonSpecDriverControllerEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (CSIIsilonSpecDriverControllerEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverControllerEnvs)(nil)).Elem()
}

func (i CSIIsilonSpecDriverControllerEnvsArgs) ToCSIIsilonSpecDriverControllerEnvsOutput() CSIIsilonSpecDriverControllerEnvsOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerEnvsArgs) ToCSIIsilonSpecDriverControllerEnvsOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsOutput)
}

// CSIIsilonSpecDriverControllerEnvsArrayInput is an input type that accepts CSIIsilonSpecDriverControllerEnvsArray and CSIIsilonSpecDriverControllerEnvsArrayOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerEnvsArrayInput` via:
//
//          CSIIsilonSpecDriverControllerEnvsArray{ CSIIsilonSpecDriverControllerEnvsArgs{...} }
type CSIIsilonSpecDriverControllerEnvsArrayInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerEnvsArrayOutput() CSIIsilonSpecDriverControllerEnvsArrayOutput
	ToCSIIsilonSpecDriverControllerEnvsArrayOutputWithContext(context.Context) CSIIsilonSpecDriverControllerEnvsArrayOutput
}

type CSIIsilonSpecDriverControllerEnvsArray []CSIIsilonSpecDriverControllerEnvsInput

func (CSIIsilonSpecDriverControllerEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverControllerEnvs)(nil)).Elem()
}

func (i CSIIsilonSpecDriverControllerEnvsArray) ToCSIIsilonSpecDriverControllerEnvsArrayOutput() CSIIsilonSpecDriverControllerEnvsArrayOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsArrayOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerEnvsArray) ToCSIIsilonSpecDriverControllerEnvsArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIIsilonSpecDriverControllerEnvsOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverControllerEnvs)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerEnvsOutput) ToCSIIsilonSpecDriverControllerEnvsOutput() CSIIsilonSpecDriverControllerEnvsOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsOutput) ToCSIIsilonSpecDriverControllerEnvsOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o CSIIsilonSpecDriverControllerEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o CSIIsilonSpecDriverControllerEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o CSIIsilonSpecDriverControllerEnvsOutput) ValueFrom() CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvs) *CSIIsilonSpecDriverControllerEnvsValueFrom {
		return v.ValueFrom
	}).(CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput)
}

type CSIIsilonSpecDriverControllerEnvsArrayOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverControllerEnvs)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerEnvsArrayOutput) ToCSIIsilonSpecDriverControllerEnvsArrayOutput() CSIIsilonSpecDriverControllerEnvsArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsArrayOutput) ToCSIIsilonSpecDriverControllerEnvsArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsArrayOutput) Index(i pulumi.IntInput) CSIIsilonSpecDriverControllerEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIIsilonSpecDriverControllerEnvs {
		return vs[0].([]CSIIsilonSpecDriverControllerEnvs)[vs[1].(int)]
	}).(CSIIsilonSpecDriverControllerEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIIsilonSpecDriverControllerEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef *CSIIsilonSpecDriverControllerEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// CSIIsilonSpecDriverControllerEnvsValueFromInput is an input type that accepts CSIIsilonSpecDriverControllerEnvsValueFromArgs and CSIIsilonSpecDriverControllerEnvsValueFromOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerEnvsValueFromInput` via:
//
//          CSIIsilonSpecDriverControllerEnvsValueFromArgs{...}
type CSIIsilonSpecDriverControllerEnvsValueFromInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerEnvsValueFromOutput() CSIIsilonSpecDriverControllerEnvsValueFromOutput
	ToCSIIsilonSpecDriverControllerEnvsValueFromOutputWithContext(context.Context) CSIIsilonSpecDriverControllerEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIIsilonSpecDriverControllerEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (CSIIsilonSpecDriverControllerEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverControllerEnvsValueFrom)(nil)).Elem()
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromOutput() CSIIsilonSpecDriverControllerEnvsValueFromOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromOutput)
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromOutput).ToCSIIsilonSpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverControllerEnvsValueFromPtrInput is an input type that accepts CSIIsilonSpecDriverControllerEnvsValueFromArgs, CSIIsilonSpecDriverControllerEnvsValueFromPtr and CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerEnvsValueFromPtrInput` via:
//
//          CSIIsilonSpecDriverControllerEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverControllerEnvsValueFromPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerEnvsValueFromPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput
	ToCSIIsilonSpecDriverControllerEnvsValueFromPtrOutputWithContext(context.Context) CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput
}

type csiisilonSpecDriverControllerEnvsValueFromPtrType CSIIsilonSpecDriverControllerEnvsValueFromArgs

func CSIIsilonSpecDriverControllerEnvsValueFromPtr(v *CSIIsilonSpecDriverControllerEnvsValueFromArgs) CSIIsilonSpecDriverControllerEnvsValueFromPtrInput {
	return (*csiisilonSpecDriverControllerEnvsValueFromPtrType)(v)
}

func (*csiisilonSpecDriverControllerEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverControllerEnvsValueFrom)(nil)).Elem()
}

func (i *csiisilonSpecDriverControllerEnvsValueFromPtrType) ToCSIIsilonSpecDriverControllerEnvsValueFromPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverControllerEnvsValueFromPtrType) ToCSIIsilonSpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIIsilonSpecDriverControllerEnvsValueFromOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverControllerEnvsValueFrom)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromOutput() CSIIsilonSpecDriverControllerEnvsValueFromOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput {
	return o.ToCSIIsilonSpecDriverControllerEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFrom) *CSIIsilonSpecDriverControllerEnvsValueFrom {
		return &v
	}).(CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o CSIIsilonSpecDriverControllerEnvsValueFromOutput) ConfigMapKeyRef() CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFrom) *CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o CSIIsilonSpecDriverControllerEnvsValueFromOutput) FieldRef() CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFrom) *CSIIsilonSpecDriverControllerEnvsValueFromFieldRef {
		return v.FieldRef
	}).(CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIIsilonSpecDriverControllerEnvsValueFromOutput) ResourceFieldRef() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFrom) *CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIIsilonSpecDriverControllerEnvsValueFromOutput) SecretKeyRef() CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFrom) *CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput)
}

type CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverControllerEnvsValueFrom)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput) Elem() CSIIsilonSpecDriverControllerEnvsValueFromOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFrom) CSIIsilonSpecDriverControllerEnvsValueFrom {
		return *v
	}).(CSIIsilonSpecDriverControllerEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput) ConfigMapKeyRef() CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFrom) *CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput) FieldRef() CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFrom) *CSIIsilonSpecDriverControllerEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput) ResourceFieldRef() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFrom) *CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput) SecretKeyRef() CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFrom) *CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefInput is an input type that accepts CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs and CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefInput` via:
//
//          CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs{...}
type CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput() CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput
	ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput() CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput)
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput).ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs, CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtr and CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput
	ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput
}

type csiisilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs

func CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtr(v *CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput {
	return (*csiisilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*csiisilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType) ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType) ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput() CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef) *CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef {
		return &v
	}).(CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) Elem() CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef) CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef {
		return *v
	}).(CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIIsilonSpecDriverControllerEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// CSIIsilonSpecDriverControllerEnvsValueFromFieldRefInput is an input type that accepts CSIIsilonSpecDriverControllerEnvsValueFromFieldRefArgs and CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerEnvsValueFromFieldRefInput` via:
//
//          CSIIsilonSpecDriverControllerEnvsValueFromFieldRefArgs{...}
type CSIIsilonSpecDriverControllerEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput() CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput
	ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutputWithContext(context.Context) CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIIsilonSpecDriverControllerEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (CSIIsilonSpecDriverControllerEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverControllerEnvsValueFromFieldRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput() CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput)
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput).ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrInput is an input type that accepts CSIIsilonSpecDriverControllerEnvsValueFromFieldRefArgs, CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtr and CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrInput` via:
//
//          CSIIsilonSpecDriverControllerEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput
	ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput
}

type csiisilonSpecDriverControllerEnvsValueFromFieldRefPtrType CSIIsilonSpecDriverControllerEnvsValueFromFieldRefArgs

func CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtr(v *CSIIsilonSpecDriverControllerEnvsValueFromFieldRefArgs) CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrInput {
	return (*csiisilonSpecDriverControllerEnvsValueFromFieldRefPtrType)(v)
}

func (*csiisilonSpecDriverControllerEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverControllerEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverControllerEnvsValueFromFieldRefPtrType) ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverControllerEnvsValueFromFieldRefPtrType) ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverControllerEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput() CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o.ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromFieldRef) *CSIIsilonSpecDriverControllerEnvsValueFromFieldRef {
		return &v
	}).(CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverControllerEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput) Elem() CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromFieldRef) CSIIsilonSpecDriverControllerEnvsValueFromFieldRef {
		return *v
	}).(CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *string `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefInput is an input type that accepts CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefArgs and CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefInput` via:
//
//          CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefArgs{...}
type CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput
	ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutputWithContext(context.Context) CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor pulumi.StringPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput)
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput).ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrInput is an input type that accepts CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefArgs, CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtr and CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrInput` via:
//
//          CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput
	ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput
}

type csiisilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrType CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefArgs

func CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtr(v *CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefArgs) CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrInput {
	return (*csiisilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*csiisilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrType) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrType) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef) *CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef {
		return &v
	}).(CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef) *string { return v.Divisor }).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) Elem() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef) CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef {
		return *v
	}).(CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefInput is an input type that accepts CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefArgs and CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefInput` via:
//
//          CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefArgs{...}
type CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput() CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput
	ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutputWithContext(context.Context) CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput() CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput)
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput).ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrInput is an input type that accepts CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefArgs, CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtr and CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrInput` via:
//
//          CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput
	ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput
}

type csiisilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrType CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefArgs

func CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtr(v *CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefArgs) CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrInput {
	return (*csiisilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*csiisilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrType) ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrType) ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput() CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef) *CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef {
		return &v
	}).(CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) Elem() CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef) CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef {
		return *v
	}).(CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Node is the specification for Node plugin only
type CSIIsilonSpecDriverNode struct {
	// Args is the set of arguments for the container
	Args []string `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs []CSIIsilonSpecDriverNodeEnvs `pulumi:"envs"`
	// Image is the image tag for the Container
	Image *string `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name *string `pulumi:"name"`
}

// CSIIsilonSpecDriverNodeInput is an input type that accepts CSIIsilonSpecDriverNodeArgs and CSIIsilonSpecDriverNodeOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeInput` via:
//
//          CSIIsilonSpecDriverNodeArgs{...}
type CSIIsilonSpecDriverNodeInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeOutput() CSIIsilonSpecDriverNodeOutput
	ToCSIIsilonSpecDriverNodeOutputWithContext(context.Context) CSIIsilonSpecDriverNodeOutput
}

// Node is the specification for Node plugin only
type CSIIsilonSpecDriverNodeArgs struct {
	// Args is the set of arguments for the container
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs CSIIsilonSpecDriverNodeEnvsArrayInput `pulumi:"envs"`
	// Image is the image tag for the Container
	Image pulumi.StringPtrInput `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (CSIIsilonSpecDriverNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNode)(nil)).Elem()
}

func (i CSIIsilonSpecDriverNodeArgs) ToCSIIsilonSpecDriverNodeOutput() CSIIsilonSpecDriverNodeOutput {
	return i.ToCSIIsilonSpecDriverNodeOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeArgs) ToCSIIsilonSpecDriverNodeOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeOutput)
}

func (i CSIIsilonSpecDriverNodeArgs) ToCSIIsilonSpecDriverNodePtrOutput() CSIIsilonSpecDriverNodePtrOutput {
	return i.ToCSIIsilonSpecDriverNodePtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeArgs) ToCSIIsilonSpecDriverNodePtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeOutput).ToCSIIsilonSpecDriverNodePtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverNodePtrInput is an input type that accepts CSIIsilonSpecDriverNodeArgs, CSIIsilonSpecDriverNodePtr and CSIIsilonSpecDriverNodePtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodePtrInput` via:
//
//          CSIIsilonSpecDriverNodeArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverNodePtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodePtrOutput() CSIIsilonSpecDriverNodePtrOutput
	ToCSIIsilonSpecDriverNodePtrOutputWithContext(context.Context) CSIIsilonSpecDriverNodePtrOutput
}

type csiisilonSpecDriverNodePtrType CSIIsilonSpecDriverNodeArgs

func CSIIsilonSpecDriverNodePtr(v *CSIIsilonSpecDriverNodeArgs) CSIIsilonSpecDriverNodePtrInput {
	return (*csiisilonSpecDriverNodePtrType)(v)
}

func (*csiisilonSpecDriverNodePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverNode)(nil)).Elem()
}

func (i *csiisilonSpecDriverNodePtrType) ToCSIIsilonSpecDriverNodePtrOutput() CSIIsilonSpecDriverNodePtrOutput {
	return i.ToCSIIsilonSpecDriverNodePtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverNodePtrType) ToCSIIsilonSpecDriverNodePtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodePtrOutput)
}

// Node is the specification for Node plugin only
type CSIIsilonSpecDriverNodeOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNode)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeOutput) ToCSIIsilonSpecDriverNodeOutput() CSIIsilonSpecDriverNodeOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeOutput) ToCSIIsilonSpecDriverNodeOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeOutput) ToCSIIsilonSpecDriverNodePtrOutput() CSIIsilonSpecDriverNodePtrOutput {
	return o.ToCSIIsilonSpecDriverNodePtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverNodeOutput) ToCSIIsilonSpecDriverNodePtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodePtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNode) *CSIIsilonSpecDriverNode {
		return &v
	}).(CSIIsilonSpecDriverNodePtrOutput)
}

// Args is the set of arguments for the container
func (o CSIIsilonSpecDriverNodeOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNode) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIIsilonSpecDriverNodeOutput) Envs() CSIIsilonSpecDriverNodeEnvsArrayOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNode) []CSIIsilonSpecDriverNodeEnvs { return v.Envs }).(CSIIsilonSpecDriverNodeEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIIsilonSpecDriverNodeOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNode) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIIsilonSpecDriverNodeOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNode) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIIsilonSpecDriverNodeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNode) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CSIIsilonSpecDriverNodePtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverNode)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodePtrOutput) ToCSIIsilonSpecDriverNodePtrOutput() CSIIsilonSpecDriverNodePtrOutput {
	return o
}

func (o CSIIsilonSpecDriverNodePtrOutput) ToCSIIsilonSpecDriverNodePtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodePtrOutput {
	return o
}

func (o CSIIsilonSpecDriverNodePtrOutput) Elem() CSIIsilonSpecDriverNodeOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNode) CSIIsilonSpecDriverNode { return *v }).(CSIIsilonSpecDriverNodeOutput)
}

// Args is the set of arguments for the container
func (o CSIIsilonSpecDriverNodePtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNode) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIIsilonSpecDriverNodePtrOutput) Envs() CSIIsilonSpecDriverNodeEnvsArrayOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNode) []CSIIsilonSpecDriverNodeEnvs {
		if v == nil {
			return nil
		}
		return v.Envs
	}).(CSIIsilonSpecDriverNodeEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIIsilonSpecDriverNodePtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNode) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIIsilonSpecDriverNodePtrOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNode) *string {
		if v == nil {
			return nil
		}
		return v.ImagePullPolicy
	}).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIIsilonSpecDriverNodePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNode) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIIsilonSpecDriverNodeEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *CSIIsilonSpecDriverNodeEnvsValueFrom `pulumi:"valueFrom"`
}

// CSIIsilonSpecDriverNodeEnvsInput is an input type that accepts CSIIsilonSpecDriverNodeEnvsArgs and CSIIsilonSpecDriverNodeEnvsOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeEnvsInput` via:
//
//          CSIIsilonSpecDriverNodeEnvsArgs{...}
type CSIIsilonSpecDriverNodeEnvsInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeEnvsOutput() CSIIsilonSpecDriverNodeEnvsOutput
	ToCSIIsilonSpecDriverNodeEnvsOutputWithContext(context.Context) CSIIsilonSpecDriverNodeEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type CSIIsilonSpecDriverNodeEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom CSIIsilonSpecDriverNodeEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (CSIIsilonSpecDriverNodeEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNodeEnvs)(nil)).Elem()
}

func (i CSIIsilonSpecDriverNodeEnvsArgs) ToCSIIsilonSpecDriverNodeEnvsOutput() CSIIsilonSpecDriverNodeEnvsOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeEnvsArgs) ToCSIIsilonSpecDriverNodeEnvsOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsOutput)
}

// CSIIsilonSpecDriverNodeEnvsArrayInput is an input type that accepts CSIIsilonSpecDriverNodeEnvsArray and CSIIsilonSpecDriverNodeEnvsArrayOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeEnvsArrayInput` via:
//
//          CSIIsilonSpecDriverNodeEnvsArray{ CSIIsilonSpecDriverNodeEnvsArgs{...} }
type CSIIsilonSpecDriverNodeEnvsArrayInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeEnvsArrayOutput() CSIIsilonSpecDriverNodeEnvsArrayOutput
	ToCSIIsilonSpecDriverNodeEnvsArrayOutputWithContext(context.Context) CSIIsilonSpecDriverNodeEnvsArrayOutput
}

type CSIIsilonSpecDriverNodeEnvsArray []CSIIsilonSpecDriverNodeEnvsInput

func (CSIIsilonSpecDriverNodeEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverNodeEnvs)(nil)).Elem()
}

func (i CSIIsilonSpecDriverNodeEnvsArray) ToCSIIsilonSpecDriverNodeEnvsArrayOutput() CSIIsilonSpecDriverNodeEnvsArrayOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsArrayOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeEnvsArray) ToCSIIsilonSpecDriverNodeEnvsArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIIsilonSpecDriverNodeEnvsOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNodeEnvs)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeEnvsOutput) ToCSIIsilonSpecDriverNodeEnvsOutput() CSIIsilonSpecDriverNodeEnvsOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsOutput) ToCSIIsilonSpecDriverNodeEnvsOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o CSIIsilonSpecDriverNodeEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o CSIIsilonSpecDriverNodeEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o CSIIsilonSpecDriverNodeEnvsOutput) ValueFrom() CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvs) *CSIIsilonSpecDriverNodeEnvsValueFrom { return v.ValueFrom }).(CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput)
}

type CSIIsilonSpecDriverNodeEnvsArrayOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverNodeEnvs)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeEnvsArrayOutput) ToCSIIsilonSpecDriverNodeEnvsArrayOutput() CSIIsilonSpecDriverNodeEnvsArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsArrayOutput) ToCSIIsilonSpecDriverNodeEnvsArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsArrayOutput) Index(i pulumi.IntInput) CSIIsilonSpecDriverNodeEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIIsilonSpecDriverNodeEnvs {
		return vs[0].([]CSIIsilonSpecDriverNodeEnvs)[vs[1].(int)]
	}).(CSIIsilonSpecDriverNodeEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIIsilonSpecDriverNodeEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef *CSIIsilonSpecDriverNodeEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// CSIIsilonSpecDriverNodeEnvsValueFromInput is an input type that accepts CSIIsilonSpecDriverNodeEnvsValueFromArgs and CSIIsilonSpecDriverNodeEnvsValueFromOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeEnvsValueFromInput` via:
//
//          CSIIsilonSpecDriverNodeEnvsValueFromArgs{...}
type CSIIsilonSpecDriverNodeEnvsValueFromInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeEnvsValueFromOutput() CSIIsilonSpecDriverNodeEnvsValueFromOutput
	ToCSIIsilonSpecDriverNodeEnvsValueFromOutputWithContext(context.Context) CSIIsilonSpecDriverNodeEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIIsilonSpecDriverNodeEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (CSIIsilonSpecDriverNodeEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNodeEnvsValueFrom)(nil)).Elem()
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromOutput() CSIIsilonSpecDriverNodeEnvsValueFromOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromOutput)
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromOutput).ToCSIIsilonSpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverNodeEnvsValueFromPtrInput is an input type that accepts CSIIsilonSpecDriverNodeEnvsValueFromArgs, CSIIsilonSpecDriverNodeEnvsValueFromPtr and CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeEnvsValueFromPtrInput` via:
//
//          CSIIsilonSpecDriverNodeEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverNodeEnvsValueFromPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeEnvsValueFromPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput
	ToCSIIsilonSpecDriverNodeEnvsValueFromPtrOutputWithContext(context.Context) CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput
}

type csiisilonSpecDriverNodeEnvsValueFromPtrType CSIIsilonSpecDriverNodeEnvsValueFromArgs

func CSIIsilonSpecDriverNodeEnvsValueFromPtr(v *CSIIsilonSpecDriverNodeEnvsValueFromArgs) CSIIsilonSpecDriverNodeEnvsValueFromPtrInput {
	return (*csiisilonSpecDriverNodeEnvsValueFromPtrType)(v)
}

func (*csiisilonSpecDriverNodeEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverNodeEnvsValueFrom)(nil)).Elem()
}

func (i *csiisilonSpecDriverNodeEnvsValueFromPtrType) ToCSIIsilonSpecDriverNodeEnvsValueFromPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverNodeEnvsValueFromPtrType) ToCSIIsilonSpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIIsilonSpecDriverNodeEnvsValueFromOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNodeEnvsValueFrom)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromOutput() CSIIsilonSpecDriverNodeEnvsValueFromOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput {
	return o.ToCSIIsilonSpecDriverNodeEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFrom) *CSIIsilonSpecDriverNodeEnvsValueFrom {
		return &v
	}).(CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o CSIIsilonSpecDriverNodeEnvsValueFromOutput) ConfigMapKeyRef() CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFrom) *CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o CSIIsilonSpecDriverNodeEnvsValueFromOutput) FieldRef() CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFrom) *CSIIsilonSpecDriverNodeEnvsValueFromFieldRef {
		return v.FieldRef
	}).(CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIIsilonSpecDriverNodeEnvsValueFromOutput) ResourceFieldRef() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFrom) *CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIIsilonSpecDriverNodeEnvsValueFromOutput) SecretKeyRef() CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFrom) *CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput)
}

type CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverNodeEnvsValueFrom)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput) Elem() CSIIsilonSpecDriverNodeEnvsValueFromOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFrom) CSIIsilonSpecDriverNodeEnvsValueFrom { return *v }).(CSIIsilonSpecDriverNodeEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput) ConfigMapKeyRef() CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFrom) *CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput) FieldRef() CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFrom) *CSIIsilonSpecDriverNodeEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput) ResourceFieldRef() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFrom) *CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput) SecretKeyRef() CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFrom) *CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefInput is an input type that accepts CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs and CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefInput` via:
//
//          CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs{...}
type CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput() CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput
	ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput() CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput)
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput).ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs, CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtr and CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput
	ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput
}

type csiisilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs

func CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtr(v *CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput {
	return (*csiisilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*csiisilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType) ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType) ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput() CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef) *CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef {
		return &v
	}).(CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) Elem() CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef) CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef {
		return *v
	}).(CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIIsilonSpecDriverNodeEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// CSIIsilonSpecDriverNodeEnvsValueFromFieldRefInput is an input type that accepts CSIIsilonSpecDriverNodeEnvsValueFromFieldRefArgs and CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeEnvsValueFromFieldRefInput` via:
//
//          CSIIsilonSpecDriverNodeEnvsValueFromFieldRefArgs{...}
type CSIIsilonSpecDriverNodeEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput() CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput
	ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutputWithContext(context.Context) CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIIsilonSpecDriverNodeEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (CSIIsilonSpecDriverNodeEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNodeEnvsValueFromFieldRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput() CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput)
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput).ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrInput is an input type that accepts CSIIsilonSpecDriverNodeEnvsValueFromFieldRefArgs, CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtr and CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrInput` via:
//
//          CSIIsilonSpecDriverNodeEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput
	ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput
}

type csiisilonSpecDriverNodeEnvsValueFromFieldRefPtrType CSIIsilonSpecDriverNodeEnvsValueFromFieldRefArgs

func CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtr(v *CSIIsilonSpecDriverNodeEnvsValueFromFieldRefArgs) CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrInput {
	return (*csiisilonSpecDriverNodeEnvsValueFromFieldRefPtrType)(v)
}

func (*csiisilonSpecDriverNodeEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverNodeEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverNodeEnvsValueFromFieldRefPtrType) ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverNodeEnvsValueFromFieldRefPtrType) ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNodeEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput() CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o.ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromFieldRef) *CSIIsilonSpecDriverNodeEnvsValueFromFieldRef {
		return &v
	}).(CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverNodeEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput) Elem() CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromFieldRef) CSIIsilonSpecDriverNodeEnvsValueFromFieldRef {
		return *v
	}).(CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *string `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefInput is an input type that accepts CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefArgs and CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefInput` via:
//
//          CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefArgs{...}
type CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput
	ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutputWithContext(context.Context) CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor pulumi.StringPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput)
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput).ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrInput is an input type that accepts CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefArgs, CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtr and CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrInput` via:
//
//          CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput
	ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput
}

type csiisilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrType CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefArgs

func CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtr(v *CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefArgs) CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrInput {
	return (*csiisilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*csiisilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrType) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrType) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef) *CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef {
		return &v
	}).(CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef) *string { return v.Divisor }).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) Elem() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef) CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef {
		return *v
	}).(CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefInput is an input type that accepts CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefArgs and CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefInput` via:
//
//          CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefArgs{...}
type CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput() CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput
	ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutputWithContext(context.Context) CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput() CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput)
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput).ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrInput is an input type that accepts CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefArgs, CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtr and CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrInput` via:
//
//          CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput
	ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput
}

type csiisilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrType CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefArgs

func CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtr(v *CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefArgs) CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrInput {
	return (*csiisilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*csiisilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrType) ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrType) ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput() CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef) *CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef {
		return &v
	}).(CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) Elem() CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef) CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef {
		return *v
	}).(CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// ContainerTemplate - Structure representing a container
type CSIIsilonSpecDriverSideCars struct {
	// Args is the set of arguments for the container
	Args []string `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs []CSIIsilonSpecDriverSideCarsEnvs `pulumi:"envs"`
	// Image is the image tag for the Container
	Image *string `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name *string `pulumi:"name"`
}

// CSIIsilonSpecDriverSideCarsInput is an input type that accepts CSIIsilonSpecDriverSideCarsArgs and CSIIsilonSpecDriverSideCarsOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsInput` via:
//
//          CSIIsilonSpecDriverSideCarsArgs{...}
type CSIIsilonSpecDriverSideCarsInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsOutput() CSIIsilonSpecDriverSideCarsOutput
	ToCSIIsilonSpecDriverSideCarsOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsOutput
}

// ContainerTemplate - Structure representing a container
type CSIIsilonSpecDriverSideCarsArgs struct {
	// Args is the set of arguments for the container
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs CSIIsilonSpecDriverSideCarsEnvsArrayInput `pulumi:"envs"`
	// Image is the image tag for the Container
	Image pulumi.StringPtrInput `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (CSIIsilonSpecDriverSideCarsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCars)(nil)).Elem()
}

func (i CSIIsilonSpecDriverSideCarsArgs) ToCSIIsilonSpecDriverSideCarsOutput() CSIIsilonSpecDriverSideCarsOutput {
	return i.ToCSIIsilonSpecDriverSideCarsOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsArgs) ToCSIIsilonSpecDriverSideCarsOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsOutput)
}

// CSIIsilonSpecDriverSideCarsArrayInput is an input type that accepts CSIIsilonSpecDriverSideCarsArray and CSIIsilonSpecDriverSideCarsArrayOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsArrayInput` via:
//
//          CSIIsilonSpecDriverSideCarsArray{ CSIIsilonSpecDriverSideCarsArgs{...} }
type CSIIsilonSpecDriverSideCarsArrayInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsArrayOutput() CSIIsilonSpecDriverSideCarsArrayOutput
	ToCSIIsilonSpecDriverSideCarsArrayOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsArrayOutput
}

type CSIIsilonSpecDriverSideCarsArray []CSIIsilonSpecDriverSideCarsInput

func (CSIIsilonSpecDriverSideCarsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverSideCars)(nil)).Elem()
}

func (i CSIIsilonSpecDriverSideCarsArray) ToCSIIsilonSpecDriverSideCarsArrayOutput() CSIIsilonSpecDriverSideCarsArrayOutput {
	return i.ToCSIIsilonSpecDriverSideCarsArrayOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsArray) ToCSIIsilonSpecDriverSideCarsArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsArrayOutput)
}

// ContainerTemplate - Structure representing a container
type CSIIsilonSpecDriverSideCarsOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCars)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsOutput) ToCSIIsilonSpecDriverSideCarsOutput() CSIIsilonSpecDriverSideCarsOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsOutput) ToCSIIsilonSpecDriverSideCarsOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsOutput {
	return o
}

// Args is the set of arguments for the container
func (o CSIIsilonSpecDriverSideCarsOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCars) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIIsilonSpecDriverSideCarsOutput) Envs() CSIIsilonSpecDriverSideCarsEnvsArrayOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCars) []CSIIsilonSpecDriverSideCarsEnvs { return v.Envs }).(CSIIsilonSpecDriverSideCarsEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIIsilonSpecDriverSideCarsOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCars) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIIsilonSpecDriverSideCarsOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCars) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIIsilonSpecDriverSideCarsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCars) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CSIIsilonSpecDriverSideCarsArrayOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverSideCars)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsArrayOutput) ToCSIIsilonSpecDriverSideCarsArrayOutput() CSIIsilonSpecDriverSideCarsArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsArrayOutput) ToCSIIsilonSpecDriverSideCarsArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsArrayOutput) Index(i pulumi.IntInput) CSIIsilonSpecDriverSideCarsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIIsilonSpecDriverSideCars {
		return vs[0].([]CSIIsilonSpecDriverSideCars)[vs[1].(int)]
	}).(CSIIsilonSpecDriverSideCarsOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIIsilonSpecDriverSideCarsEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *CSIIsilonSpecDriverSideCarsEnvsValueFrom `pulumi:"valueFrom"`
}

// CSIIsilonSpecDriverSideCarsEnvsInput is an input type that accepts CSIIsilonSpecDriverSideCarsEnvsArgs and CSIIsilonSpecDriverSideCarsEnvsOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsEnvsInput` via:
//
//          CSIIsilonSpecDriverSideCarsEnvsArgs{...}
type CSIIsilonSpecDriverSideCarsEnvsInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsEnvsOutput() CSIIsilonSpecDriverSideCarsEnvsOutput
	ToCSIIsilonSpecDriverSideCarsEnvsOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type CSIIsilonSpecDriverSideCarsEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom CSIIsilonSpecDriverSideCarsEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (CSIIsilonSpecDriverSideCarsEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCarsEnvs)(nil)).Elem()
}

func (i CSIIsilonSpecDriverSideCarsEnvsArgs) ToCSIIsilonSpecDriverSideCarsEnvsOutput() CSIIsilonSpecDriverSideCarsEnvsOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsEnvsArgs) ToCSIIsilonSpecDriverSideCarsEnvsOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsOutput)
}

// CSIIsilonSpecDriverSideCarsEnvsArrayInput is an input type that accepts CSIIsilonSpecDriverSideCarsEnvsArray and CSIIsilonSpecDriverSideCarsEnvsArrayOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsEnvsArrayInput` via:
//
//          CSIIsilonSpecDriverSideCarsEnvsArray{ CSIIsilonSpecDriverSideCarsEnvsArgs{...} }
type CSIIsilonSpecDriverSideCarsEnvsArrayInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsEnvsArrayOutput() CSIIsilonSpecDriverSideCarsEnvsArrayOutput
	ToCSIIsilonSpecDriverSideCarsEnvsArrayOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsEnvsArrayOutput
}

type CSIIsilonSpecDriverSideCarsEnvsArray []CSIIsilonSpecDriverSideCarsEnvsInput

func (CSIIsilonSpecDriverSideCarsEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverSideCarsEnvs)(nil)).Elem()
}

func (i CSIIsilonSpecDriverSideCarsEnvsArray) ToCSIIsilonSpecDriverSideCarsEnvsArrayOutput() CSIIsilonSpecDriverSideCarsEnvsArrayOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsArrayOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsEnvsArray) ToCSIIsilonSpecDriverSideCarsEnvsArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIIsilonSpecDriverSideCarsEnvsOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCarsEnvs)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsEnvsOutput) ToCSIIsilonSpecDriverSideCarsEnvsOutput() CSIIsilonSpecDriverSideCarsEnvsOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsOutput) ToCSIIsilonSpecDriverSideCarsEnvsOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o CSIIsilonSpecDriverSideCarsEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o CSIIsilonSpecDriverSideCarsEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o CSIIsilonSpecDriverSideCarsEnvsOutput) ValueFrom() CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvs) *CSIIsilonSpecDriverSideCarsEnvsValueFrom { return v.ValueFrom }).(CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput)
}

type CSIIsilonSpecDriverSideCarsEnvsArrayOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverSideCarsEnvs)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsEnvsArrayOutput) ToCSIIsilonSpecDriverSideCarsEnvsArrayOutput() CSIIsilonSpecDriverSideCarsEnvsArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsArrayOutput) ToCSIIsilonSpecDriverSideCarsEnvsArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsArrayOutput) Index(i pulumi.IntInput) CSIIsilonSpecDriverSideCarsEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIIsilonSpecDriverSideCarsEnvs {
		return vs[0].([]CSIIsilonSpecDriverSideCarsEnvs)[vs[1].(int)]
	}).(CSIIsilonSpecDriverSideCarsEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIIsilonSpecDriverSideCarsEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef *CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// CSIIsilonSpecDriverSideCarsEnvsValueFromInput is an input type that accepts CSIIsilonSpecDriverSideCarsEnvsValueFromArgs and CSIIsilonSpecDriverSideCarsEnvsValueFromOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsEnvsValueFromInput` via:
//
//          CSIIsilonSpecDriverSideCarsEnvsValueFromArgs{...}
type CSIIsilonSpecDriverSideCarsEnvsValueFromInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsEnvsValueFromOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromOutput
	ToCSIIsilonSpecDriverSideCarsEnvsValueFromOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIIsilonSpecDriverSideCarsEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (CSIIsilonSpecDriverSideCarsEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCarsEnvsValueFrom)(nil)).Elem()
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromOutput)
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromOutput).ToCSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverSideCarsEnvsValueFromPtrInput is an input type that accepts CSIIsilonSpecDriverSideCarsEnvsValueFromArgs, CSIIsilonSpecDriverSideCarsEnvsValueFromPtr and CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsEnvsValueFromPtrInput` via:
//
//          CSIIsilonSpecDriverSideCarsEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverSideCarsEnvsValueFromPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput
	ToCSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput
}

type csiisilonSpecDriverSideCarsEnvsValueFromPtrType CSIIsilonSpecDriverSideCarsEnvsValueFromArgs

func CSIIsilonSpecDriverSideCarsEnvsValueFromPtr(v *CSIIsilonSpecDriverSideCarsEnvsValueFromArgs) CSIIsilonSpecDriverSideCarsEnvsValueFromPtrInput {
	return (*csiisilonSpecDriverSideCarsEnvsValueFromPtrType)(v)
}

func (*csiisilonSpecDriverSideCarsEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverSideCarsEnvsValueFrom)(nil)).Elem()
}

func (i *csiisilonSpecDriverSideCarsEnvsValueFromPtrType) ToCSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverSideCarsEnvsValueFromPtrType) ToCSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIIsilonSpecDriverSideCarsEnvsValueFromOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCarsEnvsValueFrom)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput {
	return o.ToCSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFrom) *CSIIsilonSpecDriverSideCarsEnvsValueFrom {
		return &v
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromOutput) ConfigMapKeyRef() CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFrom) *CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromOutput) FieldRef() CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFrom) *CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef {
		return v.FieldRef
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromOutput) ResourceFieldRef() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFrom) *CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromOutput) SecretKeyRef() CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFrom) *CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput)
}

type CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverSideCarsEnvsValueFrom)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput) Elem() CSIIsilonSpecDriverSideCarsEnvsValueFromOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFrom) CSIIsilonSpecDriverSideCarsEnvsValueFrom { return *v }).(CSIIsilonSpecDriverSideCarsEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput) ConfigMapKeyRef() CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFrom) *CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput) FieldRef() CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFrom) *CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput) ResourceFieldRef() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFrom) *CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput) SecretKeyRef() CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFrom) *CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefInput is an input type that accepts CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs and CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefInput` via:
//
//          CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs{...}
type CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput
	ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput)
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput).ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs, CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtr and CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput
	ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput
}

type csiisilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs

func CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtr(v *CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput {
	return (*csiisilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*csiisilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType) ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType) ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
		return &v
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) Elem() CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
		return *v
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefInput is an input type that accepts CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefArgs and CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefInput` via:
//
//          CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefArgs{...}
type CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput
	ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput)
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput).ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrInput is an input type that accepts CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefArgs, CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtr and CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrInput` via:
//
//          CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput
	ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput
}

type csiisilonSpecDriverSideCarsEnvsValueFromFieldRefPtrType CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefArgs

func CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtr(v *CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefArgs) CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrInput {
	return (*csiisilonSpecDriverSideCarsEnvsValueFromFieldRefPtrType)(v)
}

func (*csiisilonSpecDriverSideCarsEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverSideCarsEnvsValueFromFieldRefPtrType) ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverSideCarsEnvsValueFromFieldRefPtrType) ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o.ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef) *CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef {
		return &v
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) Elem() CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef) CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef {
		return *v
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *string `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefInput is an input type that accepts CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs and CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefInput` via:
//
//          CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs{...}
type CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput
	ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor pulumi.StringPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput)
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput).ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput is an input type that accepts CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs, CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtr and CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput` via:
//
//          CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput
	ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput
}

type csiisilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs

func CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtr(v *CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput {
	return (*csiisilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*csiisilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef) *CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef {
		return &v
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef) *string { return v.Divisor }).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) Elem() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef) CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef {
		return *v
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefInput is an input type that accepts CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs and CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefInput` via:
//
//          CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs{...}
type CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput
	ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput)
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput).ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput is an input type that accepts CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs, CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtr and CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput` via:
//
//          CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput
	ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput
}

type csiisilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs

func CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtr(v *CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput {
	return (*csiisilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*csiisilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType) ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType) ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef) *CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef {
		return &v
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) Elem() CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef) CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef {
		return *v
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// SnapshotClass represents a VolumeSnapshotClass
type CSIIsilonSpecDriverSnapshotClass struct {
	// Name is the name of the Snapshot Class
	Name string `pulumi:"name"`
	// Parameters is a map of driver specific parameters for snapshot class
	Parameters map[string]string `pulumi:"parameters"`
}

// CSIIsilonSpecDriverSnapshotClassInput is an input type that accepts CSIIsilonSpecDriverSnapshotClassArgs and CSIIsilonSpecDriverSnapshotClassOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSnapshotClassInput` via:
//
//          CSIIsilonSpecDriverSnapshotClassArgs{...}
type CSIIsilonSpecDriverSnapshotClassInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSnapshotClassOutput() CSIIsilonSpecDriverSnapshotClassOutput
	ToCSIIsilonSpecDriverSnapshotClassOutputWithContext(context.Context) CSIIsilonSpecDriverSnapshotClassOutput
}

// SnapshotClass represents a VolumeSnapshotClass
type CSIIsilonSpecDriverSnapshotClassArgs struct {
	// Name is the name of the Snapshot Class
	Name pulumi.StringInput `pulumi:"name"`
	// Parameters is a map of driver specific parameters for snapshot class
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
}

func (CSIIsilonSpecDriverSnapshotClassArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSnapshotClass)(nil)).Elem()
}

func (i CSIIsilonSpecDriverSnapshotClassArgs) ToCSIIsilonSpecDriverSnapshotClassOutput() CSIIsilonSpecDriverSnapshotClassOutput {
	return i.ToCSIIsilonSpecDriverSnapshotClassOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSnapshotClassArgs) ToCSIIsilonSpecDriverSnapshotClassOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSnapshotClassOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSnapshotClassOutput)
}

// CSIIsilonSpecDriverSnapshotClassArrayInput is an input type that accepts CSIIsilonSpecDriverSnapshotClassArray and CSIIsilonSpecDriverSnapshotClassArrayOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSnapshotClassArrayInput` via:
//
//          CSIIsilonSpecDriverSnapshotClassArray{ CSIIsilonSpecDriverSnapshotClassArgs{...} }
type CSIIsilonSpecDriverSnapshotClassArrayInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSnapshotClassArrayOutput() CSIIsilonSpecDriverSnapshotClassArrayOutput
	ToCSIIsilonSpecDriverSnapshotClassArrayOutputWithContext(context.Context) CSIIsilonSpecDriverSnapshotClassArrayOutput
}

type CSIIsilonSpecDriverSnapshotClassArray []CSIIsilonSpecDriverSnapshotClassInput

func (CSIIsilonSpecDriverSnapshotClassArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverSnapshotClass)(nil)).Elem()
}

func (i CSIIsilonSpecDriverSnapshotClassArray) ToCSIIsilonSpecDriverSnapshotClassArrayOutput() CSIIsilonSpecDriverSnapshotClassArrayOutput {
	return i.ToCSIIsilonSpecDriverSnapshotClassArrayOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSnapshotClassArray) ToCSIIsilonSpecDriverSnapshotClassArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSnapshotClassArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSnapshotClassArrayOutput)
}

// SnapshotClass represents a VolumeSnapshotClass
type CSIIsilonSpecDriverSnapshotClassOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSnapshotClassOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSnapshotClass)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSnapshotClassOutput) ToCSIIsilonSpecDriverSnapshotClassOutput() CSIIsilonSpecDriverSnapshotClassOutput {
	return o
}

func (o CSIIsilonSpecDriverSnapshotClassOutput) ToCSIIsilonSpecDriverSnapshotClassOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSnapshotClassOutput {
	return o
}

// Name is the name of the Snapshot Class
func (o CSIIsilonSpecDriverSnapshotClassOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSnapshotClass) string { return v.Name }).(pulumi.StringOutput)
}

// Parameters is a map of driver specific parameters for snapshot class
func (o CSIIsilonSpecDriverSnapshotClassOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSnapshotClass) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

type CSIIsilonSpecDriverSnapshotClassArrayOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSnapshotClassArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverSnapshotClass)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSnapshotClassArrayOutput) ToCSIIsilonSpecDriverSnapshotClassArrayOutput() CSIIsilonSpecDriverSnapshotClassArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverSnapshotClassArrayOutput) ToCSIIsilonSpecDriverSnapshotClassArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSnapshotClassArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverSnapshotClassArrayOutput) Index(i pulumi.IntInput) CSIIsilonSpecDriverSnapshotClassOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIIsilonSpecDriverSnapshotClass {
		return vs[0].([]CSIIsilonSpecDriverSnapshotClass)[vs[1].(int)]
	}).(CSIIsilonSpecDriverSnapshotClassOutput)
}

// Parameters is a map of driver specific parameters for snapshot class
type CSIIsilonSpecDriverSnapshotClassParameters struct {
}

// CSIIsilonSpecDriverSnapshotClassParametersInput is an input type that accepts CSIIsilonSpecDriverSnapshotClassParametersArgs and CSIIsilonSpecDriverSnapshotClassParametersOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSnapshotClassParametersInput` via:
//
//          CSIIsilonSpecDriverSnapshotClassParametersArgs{...}
type CSIIsilonSpecDriverSnapshotClassParametersInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSnapshotClassParametersOutput() CSIIsilonSpecDriverSnapshotClassParametersOutput
	ToCSIIsilonSpecDriverSnapshotClassParametersOutputWithContext(context.Context) CSIIsilonSpecDriverSnapshotClassParametersOutput
}

// Parameters is a map of driver specific parameters for snapshot class
type CSIIsilonSpecDriverSnapshotClassParametersArgs struct {
}

func (CSIIsilonSpecDriverSnapshotClassParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSnapshotClassParameters)(nil)).Elem()
}

func (i CSIIsilonSpecDriverSnapshotClassParametersArgs) ToCSIIsilonSpecDriverSnapshotClassParametersOutput() CSIIsilonSpecDriverSnapshotClassParametersOutput {
	return i.ToCSIIsilonSpecDriverSnapshotClassParametersOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSnapshotClassParametersArgs) ToCSIIsilonSpecDriverSnapshotClassParametersOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSnapshotClassParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSnapshotClassParametersOutput)
}

// Parameters is a map of driver specific parameters for snapshot class
type CSIIsilonSpecDriverSnapshotClassParametersOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSnapshotClassParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSnapshotClassParameters)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSnapshotClassParametersOutput) ToCSIIsilonSpecDriverSnapshotClassParametersOutput() CSIIsilonSpecDriverSnapshotClassParametersOutput {
	return o
}

func (o CSIIsilonSpecDriverSnapshotClassParametersOutput) ToCSIIsilonSpecDriverSnapshotClassParametersOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSnapshotClassParametersOutput {
	return o
}

// StorageClass represents a kubernetes storage class
type CSIIsilonSpecDriverStorageClass struct {
	// AllowVolumeExpansion is a boolean flag which indicates if volumes can be expanded
	AllowVolumeExpansion *bool `pulumi:"allowVolumeExpansion"`
	// DefaultSc is a boolean flag to indicate if the storage class is going to be marked as default
	Default *bool `pulumi:"default"`
	// Name is the name of the StorageClass
	Name string `pulumi:"name"`
	// Parameters is a map of driver specific storage class
	Parameters map[string]string `pulumi:"parameters"`
	// ReclaimPolicy is the reclaim policy for the storage class
	ReclaimPolicy *string `pulumi:"reclaimPolicy"`
}

// CSIIsilonSpecDriverStorageClassInput is an input type that accepts CSIIsilonSpecDriverStorageClassArgs and CSIIsilonSpecDriverStorageClassOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverStorageClassInput` via:
//
//          CSIIsilonSpecDriverStorageClassArgs{...}
type CSIIsilonSpecDriverStorageClassInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverStorageClassOutput() CSIIsilonSpecDriverStorageClassOutput
	ToCSIIsilonSpecDriverStorageClassOutputWithContext(context.Context) CSIIsilonSpecDriverStorageClassOutput
}

// StorageClass represents a kubernetes storage class
type CSIIsilonSpecDriverStorageClassArgs struct {
	// AllowVolumeExpansion is a boolean flag which indicates if volumes can be expanded
	AllowVolumeExpansion pulumi.BoolPtrInput `pulumi:"allowVolumeExpansion"`
	// DefaultSc is a boolean flag to indicate if the storage class is going to be marked as default
	Default pulumi.BoolPtrInput `pulumi:"default"`
	// Name is the name of the StorageClass
	Name pulumi.StringInput `pulumi:"name"`
	// Parameters is a map of driver specific storage class
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
	// ReclaimPolicy is the reclaim policy for the storage class
	ReclaimPolicy pulumi.StringPtrInput `pulumi:"reclaimPolicy"`
}

func (CSIIsilonSpecDriverStorageClassArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverStorageClass)(nil)).Elem()
}

func (i CSIIsilonSpecDriverStorageClassArgs) ToCSIIsilonSpecDriverStorageClassOutput() CSIIsilonSpecDriverStorageClassOutput {
	return i.ToCSIIsilonSpecDriverStorageClassOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverStorageClassArgs) ToCSIIsilonSpecDriverStorageClassOutputWithContext(ctx context.Context) CSIIsilonSpecDriverStorageClassOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverStorageClassOutput)
}

// CSIIsilonSpecDriverStorageClassArrayInput is an input type that accepts CSIIsilonSpecDriverStorageClassArray and CSIIsilonSpecDriverStorageClassArrayOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverStorageClassArrayInput` via:
//
//          CSIIsilonSpecDriverStorageClassArray{ CSIIsilonSpecDriverStorageClassArgs{...} }
type CSIIsilonSpecDriverStorageClassArrayInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverStorageClassArrayOutput() CSIIsilonSpecDriverStorageClassArrayOutput
	ToCSIIsilonSpecDriverStorageClassArrayOutputWithContext(context.Context) CSIIsilonSpecDriverStorageClassArrayOutput
}

type CSIIsilonSpecDriverStorageClassArray []CSIIsilonSpecDriverStorageClassInput

func (CSIIsilonSpecDriverStorageClassArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverStorageClass)(nil)).Elem()
}

func (i CSIIsilonSpecDriverStorageClassArray) ToCSIIsilonSpecDriverStorageClassArrayOutput() CSIIsilonSpecDriverStorageClassArrayOutput {
	return i.ToCSIIsilonSpecDriverStorageClassArrayOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverStorageClassArray) ToCSIIsilonSpecDriverStorageClassArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverStorageClassArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverStorageClassArrayOutput)
}

// StorageClass represents a kubernetes storage class
type CSIIsilonSpecDriverStorageClassOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverStorageClassOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverStorageClass)(nil)).Elem()
}

func (o CSIIsilonSpecDriverStorageClassOutput) ToCSIIsilonSpecDriverStorageClassOutput() CSIIsilonSpecDriverStorageClassOutput {
	return o
}

func (o CSIIsilonSpecDriverStorageClassOutput) ToCSIIsilonSpecDriverStorageClassOutputWithContext(ctx context.Context) CSIIsilonSpecDriverStorageClassOutput {
	return o
}

// AllowVolumeExpansion is a boolean flag which indicates if volumes can be expanded
func (o CSIIsilonSpecDriverStorageClassOutput) AllowVolumeExpansion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverStorageClass) *bool { return v.AllowVolumeExpansion }).(pulumi.BoolPtrOutput)
}

// DefaultSc is a boolean flag to indicate if the storage class is going to be marked as default
func (o CSIIsilonSpecDriverStorageClassOutput) Default() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverStorageClass) *bool { return v.Default }).(pulumi.BoolPtrOutput)
}

// Name is the name of the StorageClass
func (o CSIIsilonSpecDriverStorageClassOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverStorageClass) string { return v.Name }).(pulumi.StringOutput)
}

// Parameters is a map of driver specific storage class
func (o CSIIsilonSpecDriverStorageClassOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverStorageClass) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

// ReclaimPolicy is the reclaim policy for the storage class
func (o CSIIsilonSpecDriverStorageClassOutput) ReclaimPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverStorageClass) *string { return v.ReclaimPolicy }).(pulumi.StringPtrOutput)
}

type CSIIsilonSpecDriverStorageClassArrayOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverStorageClassArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverStorageClass)(nil)).Elem()
}

func (o CSIIsilonSpecDriverStorageClassArrayOutput) ToCSIIsilonSpecDriverStorageClassArrayOutput() CSIIsilonSpecDriverStorageClassArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverStorageClassArrayOutput) ToCSIIsilonSpecDriverStorageClassArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverStorageClassArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverStorageClassArrayOutput) Index(i pulumi.IntInput) CSIIsilonSpecDriverStorageClassOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIIsilonSpecDriverStorageClass {
		return vs[0].([]CSIIsilonSpecDriverStorageClass)[vs[1].(int)]
	}).(CSIIsilonSpecDriverStorageClassOutput)
}

// Parameters is a map of driver specific storage class
type CSIIsilonSpecDriverStorageClassParameters struct {
}

// CSIIsilonSpecDriverStorageClassParametersInput is an input type that accepts CSIIsilonSpecDriverStorageClassParametersArgs and CSIIsilonSpecDriverStorageClassParametersOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverStorageClassParametersInput` via:
//
//          CSIIsilonSpecDriverStorageClassParametersArgs{...}
type CSIIsilonSpecDriverStorageClassParametersInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverStorageClassParametersOutput() CSIIsilonSpecDriverStorageClassParametersOutput
	ToCSIIsilonSpecDriverStorageClassParametersOutputWithContext(context.Context) CSIIsilonSpecDriverStorageClassParametersOutput
}

// Parameters is a map of driver specific storage class
type CSIIsilonSpecDriverStorageClassParametersArgs struct {
}

func (CSIIsilonSpecDriverStorageClassParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverStorageClassParameters)(nil)).Elem()
}

func (i CSIIsilonSpecDriverStorageClassParametersArgs) ToCSIIsilonSpecDriverStorageClassParametersOutput() CSIIsilonSpecDriverStorageClassParametersOutput {
	return i.ToCSIIsilonSpecDriverStorageClassParametersOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverStorageClassParametersArgs) ToCSIIsilonSpecDriverStorageClassParametersOutputWithContext(ctx context.Context) CSIIsilonSpecDriverStorageClassParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverStorageClassParametersOutput)
}

// Parameters is a map of driver specific storage class
type CSIIsilonSpecDriverStorageClassParametersOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverStorageClassParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverStorageClassParameters)(nil)).Elem()
}

func (o CSIIsilonSpecDriverStorageClassParametersOutput) ToCSIIsilonSpecDriverStorageClassParametersOutput() CSIIsilonSpecDriverStorageClassParametersOutput {
	return o
}

func (o CSIIsilonSpecDriverStorageClassParametersOutput) ToCSIIsilonSpecDriverStorageClassParametersOutputWithContext(ctx context.Context) CSIIsilonSpecDriverStorageClassParametersOutput {
	return o
}

// DriverStatus defines the observed state of CSIDriver
type CSIIsilonStatus struct {
	// ControllerStatus is the status of Controller pods
	ControllerStatus *CSIIsilonStatusControllerStatus `pulumi:"controllerStatus"`
	// DriverHash is a hash of the driver specification
	DriverHash *int `pulumi:"driverHash"`
	// LastUpdate is the last updated state of the driver
	LastUpdate *CSIIsilonStatusLastUpdate `pulumi:"lastUpdate"`
	// NodeStatus is the status of Controller pods
	NodeStatus *CSIIsilonStatusNodeStatus `pulumi:"nodeStatus"`
	// State is the state of the driver installation
	State *string `pulumi:"state"`
}

// CSIIsilonStatusInput is an input type that accepts CSIIsilonStatusArgs and CSIIsilonStatusOutput values.
// You can construct a concrete instance of `CSIIsilonStatusInput` via:
//
//          CSIIsilonStatusArgs{...}
type CSIIsilonStatusInput interface {
	pulumi.Input

	ToCSIIsilonStatusOutput() CSIIsilonStatusOutput
	ToCSIIsilonStatusOutputWithContext(context.Context) CSIIsilonStatusOutput
}

// DriverStatus defines the observed state of CSIDriver
type CSIIsilonStatusArgs struct {
	// ControllerStatus is the status of Controller pods
	ControllerStatus CSIIsilonStatusControllerStatusPtrInput `pulumi:"controllerStatus"`
	// DriverHash is a hash of the driver specification
	DriverHash pulumi.IntPtrInput `pulumi:"driverHash"`
	// LastUpdate is the last updated state of the driver
	LastUpdate CSIIsilonStatusLastUpdatePtrInput `pulumi:"lastUpdate"`
	// NodeStatus is the status of Controller pods
	NodeStatus CSIIsilonStatusNodeStatusPtrInput `pulumi:"nodeStatus"`
	// State is the state of the driver installation
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (CSIIsilonStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonStatus)(nil)).Elem()
}

func (i CSIIsilonStatusArgs) ToCSIIsilonStatusOutput() CSIIsilonStatusOutput {
	return i.ToCSIIsilonStatusOutputWithContext(context.Background())
}

func (i CSIIsilonStatusArgs) ToCSIIsilonStatusOutputWithContext(ctx context.Context) CSIIsilonStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonStatusOutput)
}

func (i CSIIsilonStatusArgs) ToCSIIsilonStatusPtrOutput() CSIIsilonStatusPtrOutput {
	return i.ToCSIIsilonStatusPtrOutputWithContext(context.Background())
}

func (i CSIIsilonStatusArgs) ToCSIIsilonStatusPtrOutputWithContext(ctx context.Context) CSIIsilonStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonStatusOutput).ToCSIIsilonStatusPtrOutputWithContext(ctx)
}

// CSIIsilonStatusPtrInput is an input type that accepts CSIIsilonStatusArgs, CSIIsilonStatusPtr and CSIIsilonStatusPtrOutput values.
// You can construct a concrete instance of `CSIIsilonStatusPtrInput` via:
//
//          CSIIsilonStatusArgs{...}
//
//  or:
//
//          nil
type CSIIsilonStatusPtrInput interface {
	pulumi.Input

	ToCSIIsilonStatusPtrOutput() CSIIsilonStatusPtrOutput
	ToCSIIsilonStatusPtrOutputWithContext(context.Context) CSIIsilonStatusPtrOutput
}

type csiisilonStatusPtrType CSIIsilonStatusArgs

func CSIIsilonStatusPtr(v *CSIIsilonStatusArgs) CSIIsilonStatusPtrInput {
	return (*csiisilonStatusPtrType)(v)
}

func (*csiisilonStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonStatus)(nil)).Elem()
}

func (i *csiisilonStatusPtrType) ToCSIIsilonStatusPtrOutput() CSIIsilonStatusPtrOutput {
	return i.ToCSIIsilonStatusPtrOutputWithContext(context.Background())
}

func (i *csiisilonStatusPtrType) ToCSIIsilonStatusPtrOutputWithContext(ctx context.Context) CSIIsilonStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonStatusPtrOutput)
}

// DriverStatus defines the observed state of CSIDriver
type CSIIsilonStatusOutput struct{ *pulumi.OutputState }

func (CSIIsilonStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonStatus)(nil)).Elem()
}

func (o CSIIsilonStatusOutput) ToCSIIsilonStatusOutput() CSIIsilonStatusOutput {
	return o
}

func (o CSIIsilonStatusOutput) ToCSIIsilonStatusOutputWithContext(ctx context.Context) CSIIsilonStatusOutput {
	return o
}

func (o CSIIsilonStatusOutput) ToCSIIsilonStatusPtrOutput() CSIIsilonStatusPtrOutput {
	return o.ToCSIIsilonStatusPtrOutputWithContext(context.Background())
}

func (o CSIIsilonStatusOutput) ToCSIIsilonStatusPtrOutputWithContext(ctx context.Context) CSIIsilonStatusPtrOutput {
	return o.ApplyT(func(v CSIIsilonStatus) *CSIIsilonStatus {
		return &v
	}).(CSIIsilonStatusPtrOutput)
}

// ControllerStatus is the status of Controller pods
func (o CSIIsilonStatusOutput) ControllerStatus() CSIIsilonStatusControllerStatusPtrOutput {
	return o.ApplyT(func(v CSIIsilonStatus) *CSIIsilonStatusControllerStatus { return v.ControllerStatus }).(CSIIsilonStatusControllerStatusPtrOutput)
}

// DriverHash is a hash of the driver specification
func (o CSIIsilonStatusOutput) DriverHash() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIIsilonStatus) *int { return v.DriverHash }).(pulumi.IntPtrOutput)
}

// LastUpdate is the last updated state of the driver
func (o CSIIsilonStatusOutput) LastUpdate() CSIIsilonStatusLastUpdatePtrOutput {
	return o.ApplyT(func(v CSIIsilonStatus) *CSIIsilonStatusLastUpdate { return v.LastUpdate }).(CSIIsilonStatusLastUpdatePtrOutput)
}

// NodeStatus is the status of Controller pods
func (o CSIIsilonStatusOutput) NodeStatus() CSIIsilonStatusNodeStatusPtrOutput {
	return o.ApplyT(func(v CSIIsilonStatus) *CSIIsilonStatusNodeStatus { return v.NodeStatus }).(CSIIsilonStatusNodeStatusPtrOutput)
}

// State is the state of the driver installation
func (o CSIIsilonStatusOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonStatus) *string { return v.State }).(pulumi.StringPtrOutput)
}

type CSIIsilonStatusPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonStatus)(nil)).Elem()
}

func (o CSIIsilonStatusPtrOutput) ToCSIIsilonStatusPtrOutput() CSIIsilonStatusPtrOutput {
	return o
}

func (o CSIIsilonStatusPtrOutput) ToCSIIsilonStatusPtrOutputWithContext(ctx context.Context) CSIIsilonStatusPtrOutput {
	return o
}

func (o CSIIsilonStatusPtrOutput) Elem() CSIIsilonStatusOutput {
	return o.ApplyT(func(v *CSIIsilonStatus) CSIIsilonStatus { return *v }).(CSIIsilonStatusOutput)
}

// ControllerStatus is the status of Controller pods
func (o CSIIsilonStatusPtrOutput) ControllerStatus() CSIIsilonStatusControllerStatusPtrOutput {
	return o.ApplyT(func(v *CSIIsilonStatus) *CSIIsilonStatusControllerStatus {
		if v == nil {
			return nil
		}
		return v.ControllerStatus
	}).(CSIIsilonStatusControllerStatusPtrOutput)
}

// DriverHash is a hash of the driver specification
func (o CSIIsilonStatusPtrOutput) DriverHash() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CSIIsilonStatus) *int {
		if v == nil {
			return nil
		}
		return v.DriverHash
	}).(pulumi.IntPtrOutput)
}

// LastUpdate is the last updated state of the driver
func (o CSIIsilonStatusPtrOutput) LastUpdate() CSIIsilonStatusLastUpdatePtrOutput {
	return o.ApplyT(func(v *CSIIsilonStatus) *CSIIsilonStatusLastUpdate {
		if v == nil {
			return nil
		}
		return v.LastUpdate
	}).(CSIIsilonStatusLastUpdatePtrOutput)
}

// NodeStatus is the status of Controller pods
func (o CSIIsilonStatusPtrOutput) NodeStatus() CSIIsilonStatusNodeStatusPtrOutput {
	return o.ApplyT(func(v *CSIIsilonStatus) *CSIIsilonStatusNodeStatus {
		if v == nil {
			return nil
		}
		return v.NodeStatus
	}).(CSIIsilonStatusNodeStatusPtrOutput)
}

// State is the state of the driver installation
func (o CSIIsilonStatusPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonStatus) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// ControllerStatus is the status of Controller pods
type CSIIsilonStatusControllerStatus struct {
	Available []string `pulumi:"available"`
	Ready     []string `pulumi:"ready"`
	Starting  []string `pulumi:"starting"`
	Stopped   []string `pulumi:"stopped"`
}

// CSIIsilonStatusControllerStatusInput is an input type that accepts CSIIsilonStatusControllerStatusArgs and CSIIsilonStatusControllerStatusOutput values.
// You can construct a concrete instance of `CSIIsilonStatusControllerStatusInput` via:
//
//          CSIIsilonStatusControllerStatusArgs{...}
type CSIIsilonStatusControllerStatusInput interface {
	pulumi.Input

	ToCSIIsilonStatusControllerStatusOutput() CSIIsilonStatusControllerStatusOutput
	ToCSIIsilonStatusControllerStatusOutputWithContext(context.Context) CSIIsilonStatusControllerStatusOutput
}

// ControllerStatus is the status of Controller pods
type CSIIsilonStatusControllerStatusArgs struct {
	Available pulumi.StringArrayInput `pulumi:"available"`
	Ready     pulumi.StringArrayInput `pulumi:"ready"`
	Starting  pulumi.StringArrayInput `pulumi:"starting"`
	Stopped   pulumi.StringArrayInput `pulumi:"stopped"`
}

func (CSIIsilonStatusControllerStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonStatusControllerStatus)(nil)).Elem()
}

func (i CSIIsilonStatusControllerStatusArgs) ToCSIIsilonStatusControllerStatusOutput() CSIIsilonStatusControllerStatusOutput {
	return i.ToCSIIsilonStatusControllerStatusOutputWithContext(context.Background())
}

func (i CSIIsilonStatusControllerStatusArgs) ToCSIIsilonStatusControllerStatusOutputWithContext(ctx context.Context) CSIIsilonStatusControllerStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonStatusControllerStatusOutput)
}

func (i CSIIsilonStatusControllerStatusArgs) ToCSIIsilonStatusControllerStatusPtrOutput() CSIIsilonStatusControllerStatusPtrOutput {
	return i.ToCSIIsilonStatusControllerStatusPtrOutputWithContext(context.Background())
}

func (i CSIIsilonStatusControllerStatusArgs) ToCSIIsilonStatusControllerStatusPtrOutputWithContext(ctx context.Context) CSIIsilonStatusControllerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonStatusControllerStatusOutput).ToCSIIsilonStatusControllerStatusPtrOutputWithContext(ctx)
}

// CSIIsilonStatusControllerStatusPtrInput is an input type that accepts CSIIsilonStatusControllerStatusArgs, CSIIsilonStatusControllerStatusPtr and CSIIsilonStatusControllerStatusPtrOutput values.
// You can construct a concrete instance of `CSIIsilonStatusControllerStatusPtrInput` via:
//
//          CSIIsilonStatusControllerStatusArgs{...}
//
//  or:
//
//          nil
type CSIIsilonStatusControllerStatusPtrInput interface {
	pulumi.Input

	ToCSIIsilonStatusControllerStatusPtrOutput() CSIIsilonStatusControllerStatusPtrOutput
	ToCSIIsilonStatusControllerStatusPtrOutputWithContext(context.Context) CSIIsilonStatusControllerStatusPtrOutput
}

type csiisilonStatusControllerStatusPtrType CSIIsilonStatusControllerStatusArgs

func CSIIsilonStatusControllerStatusPtr(v *CSIIsilonStatusControllerStatusArgs) CSIIsilonStatusControllerStatusPtrInput {
	return (*csiisilonStatusControllerStatusPtrType)(v)
}

func (*csiisilonStatusControllerStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonStatusControllerStatus)(nil)).Elem()
}

func (i *csiisilonStatusControllerStatusPtrType) ToCSIIsilonStatusControllerStatusPtrOutput() CSIIsilonStatusControllerStatusPtrOutput {
	return i.ToCSIIsilonStatusControllerStatusPtrOutputWithContext(context.Background())
}

func (i *csiisilonStatusControllerStatusPtrType) ToCSIIsilonStatusControllerStatusPtrOutputWithContext(ctx context.Context) CSIIsilonStatusControllerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonStatusControllerStatusPtrOutput)
}

// ControllerStatus is the status of Controller pods
type CSIIsilonStatusControllerStatusOutput struct{ *pulumi.OutputState }

func (CSIIsilonStatusControllerStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonStatusControllerStatus)(nil)).Elem()
}

func (o CSIIsilonStatusControllerStatusOutput) ToCSIIsilonStatusControllerStatusOutput() CSIIsilonStatusControllerStatusOutput {
	return o
}

func (o CSIIsilonStatusControllerStatusOutput) ToCSIIsilonStatusControllerStatusOutputWithContext(ctx context.Context) CSIIsilonStatusControllerStatusOutput {
	return o
}

func (o CSIIsilonStatusControllerStatusOutput) ToCSIIsilonStatusControllerStatusPtrOutput() CSIIsilonStatusControllerStatusPtrOutput {
	return o.ToCSIIsilonStatusControllerStatusPtrOutputWithContext(context.Background())
}

func (o CSIIsilonStatusControllerStatusOutput) ToCSIIsilonStatusControllerStatusPtrOutputWithContext(ctx context.Context) CSIIsilonStatusControllerStatusPtrOutput {
	return o.ApplyT(func(v CSIIsilonStatusControllerStatus) *CSIIsilonStatusControllerStatus {
		return &v
	}).(CSIIsilonStatusControllerStatusPtrOutput)
}
func (o CSIIsilonStatusControllerStatusOutput) Available() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIIsilonStatusControllerStatus) []string { return v.Available }).(pulumi.StringArrayOutput)
}

func (o CSIIsilonStatusControllerStatusOutput) Ready() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIIsilonStatusControllerStatus) []string { return v.Ready }).(pulumi.StringArrayOutput)
}

func (o CSIIsilonStatusControllerStatusOutput) Starting() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIIsilonStatusControllerStatus) []string { return v.Starting }).(pulumi.StringArrayOutput)
}

func (o CSIIsilonStatusControllerStatusOutput) Stopped() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIIsilonStatusControllerStatus) []string { return v.Stopped }).(pulumi.StringArrayOutput)
}

type CSIIsilonStatusControllerStatusPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonStatusControllerStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonStatusControllerStatus)(nil)).Elem()
}

func (o CSIIsilonStatusControllerStatusPtrOutput) ToCSIIsilonStatusControllerStatusPtrOutput() CSIIsilonStatusControllerStatusPtrOutput {
	return o
}

func (o CSIIsilonStatusControllerStatusPtrOutput) ToCSIIsilonStatusControllerStatusPtrOutputWithContext(ctx context.Context) CSIIsilonStatusControllerStatusPtrOutput {
	return o
}

func (o CSIIsilonStatusControllerStatusPtrOutput) Elem() CSIIsilonStatusControllerStatusOutput {
	return o.ApplyT(func(v *CSIIsilonStatusControllerStatus) CSIIsilonStatusControllerStatus { return *v }).(CSIIsilonStatusControllerStatusOutput)
}

func (o CSIIsilonStatusControllerStatusPtrOutput) Available() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIIsilonStatusControllerStatus) []string {
		if v == nil {
			return nil
		}
		return v.Available
	}).(pulumi.StringArrayOutput)
}

func (o CSIIsilonStatusControllerStatusPtrOutput) Ready() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIIsilonStatusControllerStatus) []string {
		if v == nil {
			return nil
		}
		return v.Ready
	}).(pulumi.StringArrayOutput)
}

func (o CSIIsilonStatusControllerStatusPtrOutput) Starting() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIIsilonStatusControllerStatus) []string {
		if v == nil {
			return nil
		}
		return v.Starting
	}).(pulumi.StringArrayOutput)
}

func (o CSIIsilonStatusControllerStatusPtrOutput) Stopped() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIIsilonStatusControllerStatus) []string {
		if v == nil {
			return nil
		}
		return v.Stopped
	}).(pulumi.StringArrayOutput)
}

// LastUpdate is the last updated state of the driver
type CSIIsilonStatusLastUpdate struct {
	// Condition is the last known condition of the Custom Resource
	Condition *string `pulumi:"condition"`
	// ErrorMessage is the last error message associated with the condition
	ErrorMessage *string `pulumi:"errorMessage"`
	// Time is the time stamp for the last condition update
	Time *string `pulumi:"time"`
}

// CSIIsilonStatusLastUpdateInput is an input type that accepts CSIIsilonStatusLastUpdateArgs and CSIIsilonStatusLastUpdateOutput values.
// You can construct a concrete instance of `CSIIsilonStatusLastUpdateInput` via:
//
//          CSIIsilonStatusLastUpdateArgs{...}
type CSIIsilonStatusLastUpdateInput interface {
	pulumi.Input

	ToCSIIsilonStatusLastUpdateOutput() CSIIsilonStatusLastUpdateOutput
	ToCSIIsilonStatusLastUpdateOutputWithContext(context.Context) CSIIsilonStatusLastUpdateOutput
}

// LastUpdate is the last updated state of the driver
type CSIIsilonStatusLastUpdateArgs struct {
	// Condition is the last known condition of the Custom Resource
	Condition pulumi.StringPtrInput `pulumi:"condition"`
	// ErrorMessage is the last error message associated with the condition
	ErrorMessage pulumi.StringPtrInput `pulumi:"errorMessage"`
	// Time is the time stamp for the last condition update
	Time pulumi.StringPtrInput `pulumi:"time"`
}

func (CSIIsilonStatusLastUpdateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonStatusLastUpdate)(nil)).Elem()
}

func (i CSIIsilonStatusLastUpdateArgs) ToCSIIsilonStatusLastUpdateOutput() CSIIsilonStatusLastUpdateOutput {
	return i.ToCSIIsilonStatusLastUpdateOutputWithContext(context.Background())
}

func (i CSIIsilonStatusLastUpdateArgs) ToCSIIsilonStatusLastUpdateOutputWithContext(ctx context.Context) CSIIsilonStatusLastUpdateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonStatusLastUpdateOutput)
}

func (i CSIIsilonStatusLastUpdateArgs) ToCSIIsilonStatusLastUpdatePtrOutput() CSIIsilonStatusLastUpdatePtrOutput {
	return i.ToCSIIsilonStatusLastUpdatePtrOutputWithContext(context.Background())
}

func (i CSIIsilonStatusLastUpdateArgs) ToCSIIsilonStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIIsilonStatusLastUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonStatusLastUpdateOutput).ToCSIIsilonStatusLastUpdatePtrOutputWithContext(ctx)
}

// CSIIsilonStatusLastUpdatePtrInput is an input type that accepts CSIIsilonStatusLastUpdateArgs, CSIIsilonStatusLastUpdatePtr and CSIIsilonStatusLastUpdatePtrOutput values.
// You can construct a concrete instance of `CSIIsilonStatusLastUpdatePtrInput` via:
//
//          CSIIsilonStatusLastUpdateArgs{...}
//
//  or:
//
//          nil
type CSIIsilonStatusLastUpdatePtrInput interface {
	pulumi.Input

	ToCSIIsilonStatusLastUpdatePtrOutput() CSIIsilonStatusLastUpdatePtrOutput
	ToCSIIsilonStatusLastUpdatePtrOutputWithContext(context.Context) CSIIsilonStatusLastUpdatePtrOutput
}

type csiisilonStatusLastUpdatePtrType CSIIsilonStatusLastUpdateArgs

func CSIIsilonStatusLastUpdatePtr(v *CSIIsilonStatusLastUpdateArgs) CSIIsilonStatusLastUpdatePtrInput {
	return (*csiisilonStatusLastUpdatePtrType)(v)
}

func (*csiisilonStatusLastUpdatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonStatusLastUpdate)(nil)).Elem()
}

func (i *csiisilonStatusLastUpdatePtrType) ToCSIIsilonStatusLastUpdatePtrOutput() CSIIsilonStatusLastUpdatePtrOutput {
	return i.ToCSIIsilonStatusLastUpdatePtrOutputWithContext(context.Background())
}

func (i *csiisilonStatusLastUpdatePtrType) ToCSIIsilonStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIIsilonStatusLastUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonStatusLastUpdatePtrOutput)
}

// LastUpdate is the last updated state of the driver
type CSIIsilonStatusLastUpdateOutput struct{ *pulumi.OutputState }

func (CSIIsilonStatusLastUpdateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonStatusLastUpdate)(nil)).Elem()
}

func (o CSIIsilonStatusLastUpdateOutput) ToCSIIsilonStatusLastUpdateOutput() CSIIsilonStatusLastUpdateOutput {
	return o
}

func (o CSIIsilonStatusLastUpdateOutput) ToCSIIsilonStatusLastUpdateOutputWithContext(ctx context.Context) CSIIsilonStatusLastUpdateOutput {
	return o
}

func (o CSIIsilonStatusLastUpdateOutput) ToCSIIsilonStatusLastUpdatePtrOutput() CSIIsilonStatusLastUpdatePtrOutput {
	return o.ToCSIIsilonStatusLastUpdatePtrOutputWithContext(context.Background())
}

func (o CSIIsilonStatusLastUpdateOutput) ToCSIIsilonStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIIsilonStatusLastUpdatePtrOutput {
	return o.ApplyT(func(v CSIIsilonStatusLastUpdate) *CSIIsilonStatusLastUpdate {
		return &v
	}).(CSIIsilonStatusLastUpdatePtrOutput)
}

// Condition is the last known condition of the Custom Resource
func (o CSIIsilonStatusLastUpdateOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonStatusLastUpdate) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

// ErrorMessage is the last error message associated with the condition
func (o CSIIsilonStatusLastUpdateOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonStatusLastUpdate) *string { return v.ErrorMessage }).(pulumi.StringPtrOutput)
}

// Time is the time stamp for the last condition update
func (o CSIIsilonStatusLastUpdateOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonStatusLastUpdate) *string { return v.Time }).(pulumi.StringPtrOutput)
}

type CSIIsilonStatusLastUpdatePtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonStatusLastUpdatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonStatusLastUpdate)(nil)).Elem()
}

func (o CSIIsilonStatusLastUpdatePtrOutput) ToCSIIsilonStatusLastUpdatePtrOutput() CSIIsilonStatusLastUpdatePtrOutput {
	return o
}

func (o CSIIsilonStatusLastUpdatePtrOutput) ToCSIIsilonStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIIsilonStatusLastUpdatePtrOutput {
	return o
}

func (o CSIIsilonStatusLastUpdatePtrOutput) Elem() CSIIsilonStatusLastUpdateOutput {
	return o.ApplyT(func(v *CSIIsilonStatusLastUpdate) CSIIsilonStatusLastUpdate { return *v }).(CSIIsilonStatusLastUpdateOutput)
}

// Condition is the last known condition of the Custom Resource
func (o CSIIsilonStatusLastUpdatePtrOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonStatusLastUpdate) *string {
		if v == nil {
			return nil
		}
		return v.Condition
	}).(pulumi.StringPtrOutput)
}

// ErrorMessage is the last error message associated with the condition
func (o CSIIsilonStatusLastUpdatePtrOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonStatusLastUpdate) *string {
		if v == nil {
			return nil
		}
		return v.ErrorMessage
	}).(pulumi.StringPtrOutput)
}

// Time is the time stamp for the last condition update
func (o CSIIsilonStatusLastUpdatePtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonStatusLastUpdate) *string {
		if v == nil {
			return nil
		}
		return v.Time
	}).(pulumi.StringPtrOutput)
}

// NodeStatus is the status of Controller pods
type CSIIsilonStatusNodeStatus struct {
	Available []string `pulumi:"available"`
	Ready     []string `pulumi:"ready"`
	Starting  []string `pulumi:"starting"`
	Stopped   []string `pulumi:"stopped"`
}

// CSIIsilonStatusNodeStatusInput is an input type that accepts CSIIsilonStatusNodeStatusArgs and CSIIsilonStatusNodeStatusOutput values.
// You can construct a concrete instance of `CSIIsilonStatusNodeStatusInput` via:
//
//          CSIIsilonStatusNodeStatusArgs{...}
type CSIIsilonStatusNodeStatusInput interface {
	pulumi.Input

	ToCSIIsilonStatusNodeStatusOutput() CSIIsilonStatusNodeStatusOutput
	ToCSIIsilonStatusNodeStatusOutputWithContext(context.Context) CSIIsilonStatusNodeStatusOutput
}

// NodeStatus is the status of Controller pods
type CSIIsilonStatusNodeStatusArgs struct {
	Available pulumi.StringArrayInput `pulumi:"available"`
	Ready     pulumi.StringArrayInput `pulumi:"ready"`
	Starting  pulumi.StringArrayInput `pulumi:"starting"`
	Stopped   pulumi.StringArrayInput `pulumi:"stopped"`
}

func (CSIIsilonStatusNodeStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonStatusNodeStatus)(nil)).Elem()
}

func (i CSIIsilonStatusNodeStatusArgs) ToCSIIsilonStatusNodeStatusOutput() CSIIsilonStatusNodeStatusOutput {
	return i.ToCSIIsilonStatusNodeStatusOutputWithContext(context.Background())
}

func (i CSIIsilonStatusNodeStatusArgs) ToCSIIsilonStatusNodeStatusOutputWithContext(ctx context.Context) CSIIsilonStatusNodeStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonStatusNodeStatusOutput)
}

func (i CSIIsilonStatusNodeStatusArgs) ToCSIIsilonStatusNodeStatusPtrOutput() CSIIsilonStatusNodeStatusPtrOutput {
	return i.ToCSIIsilonStatusNodeStatusPtrOutputWithContext(context.Background())
}

func (i CSIIsilonStatusNodeStatusArgs) ToCSIIsilonStatusNodeStatusPtrOutputWithContext(ctx context.Context) CSIIsilonStatusNodeStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonStatusNodeStatusOutput).ToCSIIsilonStatusNodeStatusPtrOutputWithContext(ctx)
}

// CSIIsilonStatusNodeStatusPtrInput is an input type that accepts CSIIsilonStatusNodeStatusArgs, CSIIsilonStatusNodeStatusPtr and CSIIsilonStatusNodeStatusPtrOutput values.
// You can construct a concrete instance of `CSIIsilonStatusNodeStatusPtrInput` via:
//
//          CSIIsilonStatusNodeStatusArgs{...}
//
//  or:
//
//          nil
type CSIIsilonStatusNodeStatusPtrInput interface {
	pulumi.Input

	ToCSIIsilonStatusNodeStatusPtrOutput() CSIIsilonStatusNodeStatusPtrOutput
	ToCSIIsilonStatusNodeStatusPtrOutputWithContext(context.Context) CSIIsilonStatusNodeStatusPtrOutput
}

type csiisilonStatusNodeStatusPtrType CSIIsilonStatusNodeStatusArgs

func CSIIsilonStatusNodeStatusPtr(v *CSIIsilonStatusNodeStatusArgs) CSIIsilonStatusNodeStatusPtrInput {
	return (*csiisilonStatusNodeStatusPtrType)(v)
}

func (*csiisilonStatusNodeStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonStatusNodeStatus)(nil)).Elem()
}

func (i *csiisilonStatusNodeStatusPtrType) ToCSIIsilonStatusNodeStatusPtrOutput() CSIIsilonStatusNodeStatusPtrOutput {
	return i.ToCSIIsilonStatusNodeStatusPtrOutputWithContext(context.Background())
}

func (i *csiisilonStatusNodeStatusPtrType) ToCSIIsilonStatusNodeStatusPtrOutputWithContext(ctx context.Context) CSIIsilonStatusNodeStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonStatusNodeStatusPtrOutput)
}

// NodeStatus is the status of Controller pods
type CSIIsilonStatusNodeStatusOutput struct{ *pulumi.OutputState }

func (CSIIsilonStatusNodeStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonStatusNodeStatus)(nil)).Elem()
}

func (o CSIIsilonStatusNodeStatusOutput) ToCSIIsilonStatusNodeStatusOutput() CSIIsilonStatusNodeStatusOutput {
	return o
}

func (o CSIIsilonStatusNodeStatusOutput) ToCSIIsilonStatusNodeStatusOutputWithContext(ctx context.Context) CSIIsilonStatusNodeStatusOutput {
	return o
}

func (o CSIIsilonStatusNodeStatusOutput) ToCSIIsilonStatusNodeStatusPtrOutput() CSIIsilonStatusNodeStatusPtrOutput {
	return o.ToCSIIsilonStatusNodeStatusPtrOutputWithContext(context.Background())
}

func (o CSIIsilonStatusNodeStatusOutput) ToCSIIsilonStatusNodeStatusPtrOutputWithContext(ctx context.Context) CSIIsilonStatusNodeStatusPtrOutput {
	return o.ApplyT(func(v CSIIsilonStatusNodeStatus) *CSIIsilonStatusNodeStatus {
		return &v
	}).(CSIIsilonStatusNodeStatusPtrOutput)
}
func (o CSIIsilonStatusNodeStatusOutput) Available() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIIsilonStatusNodeStatus) []string { return v.Available }).(pulumi.StringArrayOutput)
}

func (o CSIIsilonStatusNodeStatusOutput) Ready() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIIsilonStatusNodeStatus) []string { return v.Ready }).(pulumi.StringArrayOutput)
}

func (o CSIIsilonStatusNodeStatusOutput) Starting() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIIsilonStatusNodeStatus) []string { return v.Starting }).(pulumi.StringArrayOutput)
}

func (o CSIIsilonStatusNodeStatusOutput) Stopped() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIIsilonStatusNodeStatus) []string { return v.Stopped }).(pulumi.StringArrayOutput)
}

type CSIIsilonStatusNodeStatusPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonStatusNodeStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonStatusNodeStatus)(nil)).Elem()
}

func (o CSIIsilonStatusNodeStatusPtrOutput) ToCSIIsilonStatusNodeStatusPtrOutput() CSIIsilonStatusNodeStatusPtrOutput {
	return o
}

func (o CSIIsilonStatusNodeStatusPtrOutput) ToCSIIsilonStatusNodeStatusPtrOutputWithContext(ctx context.Context) CSIIsilonStatusNodeStatusPtrOutput {
	return o
}

func (o CSIIsilonStatusNodeStatusPtrOutput) Elem() CSIIsilonStatusNodeStatusOutput {
	return o.ApplyT(func(v *CSIIsilonStatusNodeStatus) CSIIsilonStatusNodeStatus { return *v }).(CSIIsilonStatusNodeStatusOutput)
}

func (o CSIIsilonStatusNodeStatusPtrOutput) Available() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIIsilonStatusNodeStatus) []string {
		if v == nil {
			return nil
		}
		return v.Available
	}).(pulumi.StringArrayOutput)
}

func (o CSIIsilonStatusNodeStatusPtrOutput) Ready() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIIsilonStatusNodeStatus) []string {
		if v == nil {
			return nil
		}
		return v.Ready
	}).(pulumi.StringArrayOutput)
}

func (o CSIIsilonStatusNodeStatusPtrOutput) Starting() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIIsilonStatusNodeStatus) []string {
		if v == nil {
			return nil
		}
		return v.Starting
	}).(pulumi.StringArrayOutput)
}

func (o CSIIsilonStatusNodeStatusPtrOutput) Stopped() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIIsilonStatusNodeStatus) []string {
		if v == nil {
			return nil
		}
		return v.Stopped
	}).(pulumi.StringArrayOutput)
}

// CSIPowerMax is the Schema for the csipowermaxes API
type CSIPowerMaxType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// CSIPowerMaxSpec defines the desired state of CSIPowerMax
	Spec *CSIPowerMaxSpec `pulumi:"spec"`
	// DriverStatus defines the observed state of CSIDriver
	Status *CSIPowerMaxStatus `pulumi:"status"`
}

// CSIPowerMaxTypeInput is an input type that accepts CSIPowerMaxTypeArgs and CSIPowerMaxTypeOutput values.
// You can construct a concrete instance of `CSIPowerMaxTypeInput` via:
//
//          CSIPowerMaxTypeArgs{...}
type CSIPowerMaxTypeInput interface {
	pulumi.Input

	ToCSIPowerMaxTypeOutput() CSIPowerMaxTypeOutput
	ToCSIPowerMaxTypeOutputWithContext(context.Context) CSIPowerMaxTypeOutput
}

// CSIPowerMax is the Schema for the csipowermaxes API
type CSIPowerMaxTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// CSIPowerMaxSpec defines the desired state of CSIPowerMax
	Spec CSIPowerMaxSpecPtrInput `pulumi:"spec"`
	// DriverStatus defines the observed state of CSIDriver
	Status CSIPowerMaxStatusPtrInput `pulumi:"status"`
}

func (CSIPowerMaxTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxType)(nil)).Elem()
}

func (i CSIPowerMaxTypeArgs) ToCSIPowerMaxTypeOutput() CSIPowerMaxTypeOutput {
	return i.ToCSIPowerMaxTypeOutputWithContext(context.Background())
}

func (i CSIPowerMaxTypeArgs) ToCSIPowerMaxTypeOutputWithContext(ctx context.Context) CSIPowerMaxTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxTypeOutput)
}

// CSIPowerMax is the Schema for the csipowermaxes API
type CSIPowerMaxTypeOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxType)(nil)).Elem()
}

func (o CSIPowerMaxTypeOutput) ToCSIPowerMaxTypeOutput() CSIPowerMaxTypeOutput {
	return o
}

func (o CSIPowerMaxTypeOutput) ToCSIPowerMaxTypeOutputWithContext(ctx context.Context) CSIPowerMaxTypeOutput {
	return o
}

func (o CSIPowerMaxTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o CSIPowerMaxTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o CSIPowerMaxTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// CSIPowerMaxSpec defines the desired state of CSIPowerMax
func (o CSIPowerMaxTypeOutput) Spec() CSIPowerMaxSpecPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxType) *CSIPowerMaxSpec { return v.Spec }).(CSIPowerMaxSpecPtrOutput)
}

// DriverStatus defines the observed state of CSIDriver
func (o CSIPowerMaxTypeOutput) Status() CSIPowerMaxStatusPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxType) *CSIPowerMaxStatus { return v.Status }).(CSIPowerMaxStatusPtrOutput)
}

type CSIPowerMaxMetadata struct {
}

// CSIPowerMaxMetadataInput is an input type that accepts CSIPowerMaxMetadataArgs and CSIPowerMaxMetadataOutput values.
// You can construct a concrete instance of `CSIPowerMaxMetadataInput` via:
//
//          CSIPowerMaxMetadataArgs{...}
type CSIPowerMaxMetadataInput interface {
	pulumi.Input

	ToCSIPowerMaxMetadataOutput() CSIPowerMaxMetadataOutput
	ToCSIPowerMaxMetadataOutputWithContext(context.Context) CSIPowerMaxMetadataOutput
}

type CSIPowerMaxMetadataArgs struct {
}

func (CSIPowerMaxMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxMetadata)(nil)).Elem()
}

func (i CSIPowerMaxMetadataArgs) ToCSIPowerMaxMetadataOutput() CSIPowerMaxMetadataOutput {
	return i.ToCSIPowerMaxMetadataOutputWithContext(context.Background())
}

func (i CSIPowerMaxMetadataArgs) ToCSIPowerMaxMetadataOutputWithContext(ctx context.Context) CSIPowerMaxMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxMetadataOutput)
}

type CSIPowerMaxMetadataOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxMetadata)(nil)).Elem()
}

func (o CSIPowerMaxMetadataOutput) ToCSIPowerMaxMetadataOutput() CSIPowerMaxMetadataOutput {
	return o
}

func (o CSIPowerMaxMetadataOutput) ToCSIPowerMaxMetadataOutputWithContext(ctx context.Context) CSIPowerMaxMetadataOutput {
	return o
}

// CSIPowerMaxSpec defines the desired state of CSIPowerMax
type CSIPowerMaxSpec struct {
	// Driver is the specification for the CSI PowerMax Driver
	Driver CSIPowerMaxSpecDriver `pulumi:"driver"`
}

// CSIPowerMaxSpecInput is an input type that accepts CSIPowerMaxSpecArgs and CSIPowerMaxSpecOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecInput` via:
//
//          CSIPowerMaxSpecArgs{...}
type CSIPowerMaxSpecInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecOutput() CSIPowerMaxSpecOutput
	ToCSIPowerMaxSpecOutputWithContext(context.Context) CSIPowerMaxSpecOutput
}

// CSIPowerMaxSpec defines the desired state of CSIPowerMax
type CSIPowerMaxSpecArgs struct {
	// Driver is the specification for the CSI PowerMax Driver
	Driver CSIPowerMaxSpecDriverInput `pulumi:"driver"`
}

func (CSIPowerMaxSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpec)(nil)).Elem()
}

func (i CSIPowerMaxSpecArgs) ToCSIPowerMaxSpecOutput() CSIPowerMaxSpecOutput {
	return i.ToCSIPowerMaxSpecOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecArgs) ToCSIPowerMaxSpecOutputWithContext(ctx context.Context) CSIPowerMaxSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecOutput)
}

func (i CSIPowerMaxSpecArgs) ToCSIPowerMaxSpecPtrOutput() CSIPowerMaxSpecPtrOutput {
	return i.ToCSIPowerMaxSpecPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecArgs) ToCSIPowerMaxSpecPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecOutput).ToCSIPowerMaxSpecPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecPtrInput is an input type that accepts CSIPowerMaxSpecArgs, CSIPowerMaxSpecPtr and CSIPowerMaxSpecPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecPtrInput` via:
//
//          CSIPowerMaxSpecArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecPtrOutput() CSIPowerMaxSpecPtrOutput
	ToCSIPowerMaxSpecPtrOutputWithContext(context.Context) CSIPowerMaxSpecPtrOutput
}

type csipowerMaxSpecPtrType CSIPowerMaxSpecArgs

func CSIPowerMaxSpecPtr(v *CSIPowerMaxSpecArgs) CSIPowerMaxSpecPtrInput {
	return (*csipowerMaxSpecPtrType)(v)
}

func (*csipowerMaxSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpec)(nil)).Elem()
}

func (i *csipowerMaxSpecPtrType) ToCSIPowerMaxSpecPtrOutput() CSIPowerMaxSpecPtrOutput {
	return i.ToCSIPowerMaxSpecPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecPtrType) ToCSIPowerMaxSpecPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecPtrOutput)
}

// CSIPowerMaxSpec defines the desired state of CSIPowerMax
type CSIPowerMaxSpecOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpec)(nil)).Elem()
}

func (o CSIPowerMaxSpecOutput) ToCSIPowerMaxSpecOutput() CSIPowerMaxSpecOutput {
	return o
}

func (o CSIPowerMaxSpecOutput) ToCSIPowerMaxSpecOutputWithContext(ctx context.Context) CSIPowerMaxSpecOutput {
	return o
}

func (o CSIPowerMaxSpecOutput) ToCSIPowerMaxSpecPtrOutput() CSIPowerMaxSpecPtrOutput {
	return o.ToCSIPowerMaxSpecPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecOutput) ToCSIPowerMaxSpecPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpec) *CSIPowerMaxSpec {
		return &v
	}).(CSIPowerMaxSpecPtrOutput)
}

// Driver is the specification for the CSI PowerMax Driver
func (o CSIPowerMaxSpecOutput) Driver() CSIPowerMaxSpecDriverOutput {
	return o.ApplyT(func(v CSIPowerMaxSpec) CSIPowerMaxSpecDriver { return v.Driver }).(CSIPowerMaxSpecDriverOutput)
}

type CSIPowerMaxSpecPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpec)(nil)).Elem()
}

func (o CSIPowerMaxSpecPtrOutput) ToCSIPowerMaxSpecPtrOutput() CSIPowerMaxSpecPtrOutput {
	return o
}

func (o CSIPowerMaxSpecPtrOutput) ToCSIPowerMaxSpecPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecPtrOutput {
	return o
}

func (o CSIPowerMaxSpecPtrOutput) Elem() CSIPowerMaxSpecOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpec) CSIPowerMaxSpec { return *v }).(CSIPowerMaxSpecOutput)
}

// Driver is the specification for the CSI PowerMax Driver
func (o CSIPowerMaxSpecPtrOutput) Driver() CSIPowerMaxSpecDriverPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpec) *CSIPowerMaxSpecDriver {
		if v == nil {
			return nil
		}
		return &v.Driver
	}).(CSIPowerMaxSpecDriverPtrOutput)
}

// Driver is the specification for the CSI PowerMax Driver
type CSIPowerMaxSpecDriver struct {
	// AuthSecret is the name of the credentials secret for the driver
	AuthSecret *string `pulumi:"authSecret"`
	// Common is the common specification for both controller and node plugins
	Common CSIPowerMaxSpecDriverCommon `pulumi:"common"`
	// ConfigVersion is the configuration version of the driver
	ConfigVersion string `pulumi:"configVersion"`
	// Controller is the specification for Controller plugin only
	Controller *CSIPowerMaxSpecDriverController `pulumi:"controller"`
	// ForceUpdate is the boolean flag used to force an update of the driver instance
	ForceUpdate *bool `pulumi:"forceUpdate"`
	// Node is the specification for Node plugin only
	Node *CSIPowerMaxSpecDriverNode `pulumi:"node"`
	// Replicas is the count of controllers for Controller plugin
	Replicas int `pulumi:"replicas"`
	// SideCars is the specification for CSI sidecar containers
	SideCars []CSIPowerMaxSpecDriverSideCars `pulumi:"sideCars"`
	// SnapshotClass is the specification for Snapshot Classes
	SnapshotClass []CSIPowerMaxSpecDriverSnapshotClass `pulumi:"snapshotClass"`
	// StorageClass is the specification for Storage Classes
	StorageClass []CSIPowerMaxSpecDriverStorageClass `pulumi:"storageClass"`
	// TLSCertSecret is the name of the TLS Cert secret
	TlsCertSecret *string `pulumi:"tlsCertSecret"`
}

// CSIPowerMaxSpecDriverInput is an input type that accepts CSIPowerMaxSpecDriverArgs and CSIPowerMaxSpecDriverOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverInput` via:
//
//          CSIPowerMaxSpecDriverArgs{...}
type CSIPowerMaxSpecDriverInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverOutput() CSIPowerMaxSpecDriverOutput
	ToCSIPowerMaxSpecDriverOutputWithContext(context.Context) CSIPowerMaxSpecDriverOutput
}

// Driver is the specification for the CSI PowerMax Driver
type CSIPowerMaxSpecDriverArgs struct {
	// AuthSecret is the name of the credentials secret for the driver
	AuthSecret pulumi.StringPtrInput `pulumi:"authSecret"`
	// Common is the common specification for both controller and node plugins
	Common CSIPowerMaxSpecDriverCommonInput `pulumi:"common"`
	// ConfigVersion is the configuration version of the driver
	ConfigVersion pulumi.StringInput `pulumi:"configVersion"`
	// Controller is the specification for Controller plugin only
	Controller CSIPowerMaxSpecDriverControllerPtrInput `pulumi:"controller"`
	// ForceUpdate is the boolean flag used to force an update of the driver instance
	ForceUpdate pulumi.BoolPtrInput `pulumi:"forceUpdate"`
	// Node is the specification for Node plugin only
	Node CSIPowerMaxSpecDriverNodePtrInput `pulumi:"node"`
	// Replicas is the count of controllers for Controller plugin
	Replicas pulumi.IntInput `pulumi:"replicas"`
	// SideCars is the specification for CSI sidecar containers
	SideCars CSIPowerMaxSpecDriverSideCarsArrayInput `pulumi:"sideCars"`
	// SnapshotClass is the specification for Snapshot Classes
	SnapshotClass CSIPowerMaxSpecDriverSnapshotClassArrayInput `pulumi:"snapshotClass"`
	// StorageClass is the specification for Storage Classes
	StorageClass CSIPowerMaxSpecDriverStorageClassArrayInput `pulumi:"storageClass"`
	// TLSCertSecret is the name of the TLS Cert secret
	TlsCertSecret pulumi.StringPtrInput `pulumi:"tlsCertSecret"`
}

func (CSIPowerMaxSpecDriverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriver)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverArgs) ToCSIPowerMaxSpecDriverOutput() CSIPowerMaxSpecDriverOutput {
	return i.ToCSIPowerMaxSpecDriverOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverArgs) ToCSIPowerMaxSpecDriverOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverOutput)
}

func (i CSIPowerMaxSpecDriverArgs) ToCSIPowerMaxSpecDriverPtrOutput() CSIPowerMaxSpecDriverPtrOutput {
	return i.ToCSIPowerMaxSpecDriverPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverArgs) ToCSIPowerMaxSpecDriverPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverOutput).ToCSIPowerMaxSpecDriverPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverPtrInput is an input type that accepts CSIPowerMaxSpecDriverArgs, CSIPowerMaxSpecDriverPtr and CSIPowerMaxSpecDriverPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverPtrInput` via:
//
//          CSIPowerMaxSpecDriverArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverPtrOutput() CSIPowerMaxSpecDriverPtrOutput
	ToCSIPowerMaxSpecDriverPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverPtrOutput
}

type csipowerMaxSpecDriverPtrType CSIPowerMaxSpecDriverArgs

func CSIPowerMaxSpecDriverPtr(v *CSIPowerMaxSpecDriverArgs) CSIPowerMaxSpecDriverPtrInput {
	return (*csipowerMaxSpecDriverPtrType)(v)
}

func (*csipowerMaxSpecDriverPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriver)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverPtrType) ToCSIPowerMaxSpecDriverPtrOutput() CSIPowerMaxSpecDriverPtrOutput {
	return i.ToCSIPowerMaxSpecDriverPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverPtrType) ToCSIPowerMaxSpecDriverPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverPtrOutput)
}

// Driver is the specification for the CSI PowerMax Driver
type CSIPowerMaxSpecDriverOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriver)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverOutput) ToCSIPowerMaxSpecDriverOutput() CSIPowerMaxSpecDriverOutput {
	return o
}

func (o CSIPowerMaxSpecDriverOutput) ToCSIPowerMaxSpecDriverOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverOutput {
	return o
}

func (o CSIPowerMaxSpecDriverOutput) ToCSIPowerMaxSpecDriverPtrOutput() CSIPowerMaxSpecDriverPtrOutput {
	return o.ToCSIPowerMaxSpecDriverPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverOutput) ToCSIPowerMaxSpecDriverPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriver) *CSIPowerMaxSpecDriver {
		return &v
	}).(CSIPowerMaxSpecDriverPtrOutput)
}

// AuthSecret is the name of the credentials secret for the driver
func (o CSIPowerMaxSpecDriverOutput) AuthSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriver) *string { return v.AuthSecret }).(pulumi.StringPtrOutput)
}

// Common is the common specification for both controller and node plugins
func (o CSIPowerMaxSpecDriverOutput) Common() CSIPowerMaxSpecDriverCommonOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriver) CSIPowerMaxSpecDriverCommon { return v.Common }).(CSIPowerMaxSpecDriverCommonOutput)
}

// ConfigVersion is the configuration version of the driver
func (o CSIPowerMaxSpecDriverOutput) ConfigVersion() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriver) string { return v.ConfigVersion }).(pulumi.StringOutput)
}

// Controller is the specification for Controller plugin only
func (o CSIPowerMaxSpecDriverOutput) Controller() CSIPowerMaxSpecDriverControllerPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriver) *CSIPowerMaxSpecDriverController { return v.Controller }).(CSIPowerMaxSpecDriverControllerPtrOutput)
}

// ForceUpdate is the boolean flag used to force an update of the driver instance
func (o CSIPowerMaxSpecDriverOutput) ForceUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriver) *bool { return v.ForceUpdate }).(pulumi.BoolPtrOutput)
}

// Node is the specification for Node plugin only
func (o CSIPowerMaxSpecDriverOutput) Node() CSIPowerMaxSpecDriverNodePtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriver) *CSIPowerMaxSpecDriverNode { return v.Node }).(CSIPowerMaxSpecDriverNodePtrOutput)
}

// Replicas is the count of controllers for Controller plugin
func (o CSIPowerMaxSpecDriverOutput) Replicas() pulumi.IntOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriver) int { return v.Replicas }).(pulumi.IntOutput)
}

// SideCars is the specification for CSI sidecar containers
func (o CSIPowerMaxSpecDriverOutput) SideCars() CSIPowerMaxSpecDriverSideCarsArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriver) []CSIPowerMaxSpecDriverSideCars { return v.SideCars }).(CSIPowerMaxSpecDriverSideCarsArrayOutput)
}

// SnapshotClass is the specification for Snapshot Classes
func (o CSIPowerMaxSpecDriverOutput) SnapshotClass() CSIPowerMaxSpecDriverSnapshotClassArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriver) []CSIPowerMaxSpecDriverSnapshotClass { return v.SnapshotClass }).(CSIPowerMaxSpecDriverSnapshotClassArrayOutput)
}

// StorageClass is the specification for Storage Classes
func (o CSIPowerMaxSpecDriverOutput) StorageClass() CSIPowerMaxSpecDriverStorageClassArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriver) []CSIPowerMaxSpecDriverStorageClass { return v.StorageClass }).(CSIPowerMaxSpecDriverStorageClassArrayOutput)
}

// TLSCertSecret is the name of the TLS Cert secret
func (o CSIPowerMaxSpecDriverOutput) TlsCertSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriver) *string { return v.TlsCertSecret }).(pulumi.StringPtrOutput)
}

type CSIPowerMaxSpecDriverPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriver)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverPtrOutput) ToCSIPowerMaxSpecDriverPtrOutput() CSIPowerMaxSpecDriverPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverPtrOutput) ToCSIPowerMaxSpecDriverPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverPtrOutput) Elem() CSIPowerMaxSpecDriverOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriver) CSIPowerMaxSpecDriver { return *v }).(CSIPowerMaxSpecDriverOutput)
}

// AuthSecret is the name of the credentials secret for the driver
func (o CSIPowerMaxSpecDriverPtrOutput) AuthSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriver) *string {
		if v == nil {
			return nil
		}
		return v.AuthSecret
	}).(pulumi.StringPtrOutput)
}

// Common is the common specification for both controller and node plugins
func (o CSIPowerMaxSpecDriverPtrOutput) Common() CSIPowerMaxSpecDriverCommonPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriver) *CSIPowerMaxSpecDriverCommon {
		if v == nil {
			return nil
		}
		return &v.Common
	}).(CSIPowerMaxSpecDriverCommonPtrOutput)
}

// ConfigVersion is the configuration version of the driver
func (o CSIPowerMaxSpecDriverPtrOutput) ConfigVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriver) *string {
		if v == nil {
			return nil
		}
		return &v.ConfigVersion
	}).(pulumi.StringPtrOutput)
}

// Controller is the specification for Controller plugin only
func (o CSIPowerMaxSpecDriverPtrOutput) Controller() CSIPowerMaxSpecDriverControllerPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriver) *CSIPowerMaxSpecDriverController {
		if v == nil {
			return nil
		}
		return v.Controller
	}).(CSIPowerMaxSpecDriverControllerPtrOutput)
}

// ForceUpdate is the boolean flag used to force an update of the driver instance
func (o CSIPowerMaxSpecDriverPtrOutput) ForceUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriver) *bool {
		if v == nil {
			return nil
		}
		return v.ForceUpdate
	}).(pulumi.BoolPtrOutput)
}

// Node is the specification for Node plugin only
func (o CSIPowerMaxSpecDriverPtrOutput) Node() CSIPowerMaxSpecDriverNodePtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriver) *CSIPowerMaxSpecDriverNode {
		if v == nil {
			return nil
		}
		return v.Node
	}).(CSIPowerMaxSpecDriverNodePtrOutput)
}

// Replicas is the count of controllers for Controller plugin
func (o CSIPowerMaxSpecDriverPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriver) *int {
		if v == nil {
			return nil
		}
		return &v.Replicas
	}).(pulumi.IntPtrOutput)
}

// SideCars is the specification for CSI sidecar containers
func (o CSIPowerMaxSpecDriverPtrOutput) SideCars() CSIPowerMaxSpecDriverSideCarsArrayOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriver) []CSIPowerMaxSpecDriverSideCars {
		if v == nil {
			return nil
		}
		return v.SideCars
	}).(CSIPowerMaxSpecDriverSideCarsArrayOutput)
}

// SnapshotClass is the specification for Snapshot Classes
func (o CSIPowerMaxSpecDriverPtrOutput) SnapshotClass() CSIPowerMaxSpecDriverSnapshotClassArrayOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriver) []CSIPowerMaxSpecDriverSnapshotClass {
		if v == nil {
			return nil
		}
		return v.SnapshotClass
	}).(CSIPowerMaxSpecDriverSnapshotClassArrayOutput)
}

// StorageClass is the specification for Storage Classes
func (o CSIPowerMaxSpecDriverPtrOutput) StorageClass() CSIPowerMaxSpecDriverStorageClassArrayOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriver) []CSIPowerMaxSpecDriverStorageClass {
		if v == nil {
			return nil
		}
		return v.StorageClass
	}).(CSIPowerMaxSpecDriverStorageClassArrayOutput)
}

// TLSCertSecret is the name of the TLS Cert secret
func (o CSIPowerMaxSpecDriverPtrOutput) TlsCertSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriver) *string {
		if v == nil {
			return nil
		}
		return v.TlsCertSecret
	}).(pulumi.StringPtrOutput)
}

// Common is the common specification for both controller and node plugins
type CSIPowerMaxSpecDriverCommon struct {
	// Args is the set of arguments for the container
	Args []string `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs []CSIPowerMaxSpecDriverCommonEnvs `pulumi:"envs"`
	// Image is the image tag for the Container
	Image *string `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name *string `pulumi:"name"`
}

// CSIPowerMaxSpecDriverCommonInput is an input type that accepts CSIPowerMaxSpecDriverCommonArgs and CSIPowerMaxSpecDriverCommonOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverCommonInput` via:
//
//          CSIPowerMaxSpecDriverCommonArgs{...}
type CSIPowerMaxSpecDriverCommonInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverCommonOutput() CSIPowerMaxSpecDriverCommonOutput
	ToCSIPowerMaxSpecDriverCommonOutputWithContext(context.Context) CSIPowerMaxSpecDriverCommonOutput
}

// Common is the common specification for both controller and node plugins
type CSIPowerMaxSpecDriverCommonArgs struct {
	// Args is the set of arguments for the container
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs CSIPowerMaxSpecDriverCommonEnvsArrayInput `pulumi:"envs"`
	// Image is the image tag for the Container
	Image pulumi.StringPtrInput `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (CSIPowerMaxSpecDriverCommonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverCommon)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverCommonArgs) ToCSIPowerMaxSpecDriverCommonOutput() CSIPowerMaxSpecDriverCommonOutput {
	return i.ToCSIPowerMaxSpecDriverCommonOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverCommonArgs) ToCSIPowerMaxSpecDriverCommonOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonOutput)
}

func (i CSIPowerMaxSpecDriverCommonArgs) ToCSIPowerMaxSpecDriverCommonPtrOutput() CSIPowerMaxSpecDriverCommonPtrOutput {
	return i.ToCSIPowerMaxSpecDriverCommonPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverCommonArgs) ToCSIPowerMaxSpecDriverCommonPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonOutput).ToCSIPowerMaxSpecDriverCommonPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverCommonPtrInput is an input type that accepts CSIPowerMaxSpecDriverCommonArgs, CSIPowerMaxSpecDriverCommonPtr and CSIPowerMaxSpecDriverCommonPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverCommonPtrInput` via:
//
//          CSIPowerMaxSpecDriverCommonArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverCommonPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverCommonPtrOutput() CSIPowerMaxSpecDriverCommonPtrOutput
	ToCSIPowerMaxSpecDriverCommonPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverCommonPtrOutput
}

type csipowerMaxSpecDriverCommonPtrType CSIPowerMaxSpecDriverCommonArgs

func CSIPowerMaxSpecDriverCommonPtr(v *CSIPowerMaxSpecDriverCommonArgs) CSIPowerMaxSpecDriverCommonPtrInput {
	return (*csipowerMaxSpecDriverCommonPtrType)(v)
}

func (*csipowerMaxSpecDriverCommonPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverCommon)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverCommonPtrType) ToCSIPowerMaxSpecDriverCommonPtrOutput() CSIPowerMaxSpecDriverCommonPtrOutput {
	return i.ToCSIPowerMaxSpecDriverCommonPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverCommonPtrType) ToCSIPowerMaxSpecDriverCommonPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonPtrOutput)
}

// Common is the common specification for both controller and node plugins
type CSIPowerMaxSpecDriverCommonOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverCommonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverCommon)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverCommonOutput) ToCSIPowerMaxSpecDriverCommonOutput() CSIPowerMaxSpecDriverCommonOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonOutput) ToCSIPowerMaxSpecDriverCommonOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonOutput) ToCSIPowerMaxSpecDriverCommonPtrOutput() CSIPowerMaxSpecDriverCommonPtrOutput {
	return o.ToCSIPowerMaxSpecDriverCommonPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverCommonOutput) ToCSIPowerMaxSpecDriverCommonPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommon) *CSIPowerMaxSpecDriverCommon {
		return &v
	}).(CSIPowerMaxSpecDriverCommonPtrOutput)
}

// Args is the set of arguments for the container
func (o CSIPowerMaxSpecDriverCommonOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommon) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIPowerMaxSpecDriverCommonOutput) Envs() CSIPowerMaxSpecDriverCommonEnvsArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommon) []CSIPowerMaxSpecDriverCommonEnvs { return v.Envs }).(CSIPowerMaxSpecDriverCommonEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIPowerMaxSpecDriverCommonOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommon) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIPowerMaxSpecDriverCommonOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommon) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIPowerMaxSpecDriverCommonOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommon) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CSIPowerMaxSpecDriverCommonPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverCommonPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverCommon)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverCommonPtrOutput) ToCSIPowerMaxSpecDriverCommonPtrOutput() CSIPowerMaxSpecDriverCommonPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonPtrOutput) ToCSIPowerMaxSpecDriverCommonPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonPtrOutput) Elem() CSIPowerMaxSpecDriverCommonOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommon) CSIPowerMaxSpecDriverCommon { return *v }).(CSIPowerMaxSpecDriverCommonOutput)
}

// Args is the set of arguments for the container
func (o CSIPowerMaxSpecDriverCommonPtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommon) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIPowerMaxSpecDriverCommonPtrOutput) Envs() CSIPowerMaxSpecDriverCommonEnvsArrayOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommon) []CSIPowerMaxSpecDriverCommonEnvs {
		if v == nil {
			return nil
		}
		return v.Envs
	}).(CSIPowerMaxSpecDriverCommonEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIPowerMaxSpecDriverCommonPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommon) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIPowerMaxSpecDriverCommonPtrOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommon) *string {
		if v == nil {
			return nil
		}
		return v.ImagePullPolicy
	}).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIPowerMaxSpecDriverCommonPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommon) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIPowerMaxSpecDriverCommonEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *CSIPowerMaxSpecDriverCommonEnvsValueFrom `pulumi:"valueFrom"`
}

// CSIPowerMaxSpecDriverCommonEnvsInput is an input type that accepts CSIPowerMaxSpecDriverCommonEnvsArgs and CSIPowerMaxSpecDriverCommonEnvsOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverCommonEnvsInput` via:
//
//          CSIPowerMaxSpecDriverCommonEnvsArgs{...}
type CSIPowerMaxSpecDriverCommonEnvsInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverCommonEnvsOutput() CSIPowerMaxSpecDriverCommonEnvsOutput
	ToCSIPowerMaxSpecDriverCommonEnvsOutputWithContext(context.Context) CSIPowerMaxSpecDriverCommonEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type CSIPowerMaxSpecDriverCommonEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom CSIPowerMaxSpecDriverCommonEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (CSIPowerMaxSpecDriverCommonEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverCommonEnvs)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverCommonEnvsArgs) ToCSIPowerMaxSpecDriverCommonEnvsOutput() CSIPowerMaxSpecDriverCommonEnvsOutput {
	return i.ToCSIPowerMaxSpecDriverCommonEnvsOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverCommonEnvsArgs) ToCSIPowerMaxSpecDriverCommonEnvsOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonEnvsOutput)
}

// CSIPowerMaxSpecDriverCommonEnvsArrayInput is an input type that accepts CSIPowerMaxSpecDriverCommonEnvsArray and CSIPowerMaxSpecDriverCommonEnvsArrayOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverCommonEnvsArrayInput` via:
//
//          CSIPowerMaxSpecDriverCommonEnvsArray{ CSIPowerMaxSpecDriverCommonEnvsArgs{...} }
type CSIPowerMaxSpecDriverCommonEnvsArrayInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverCommonEnvsArrayOutput() CSIPowerMaxSpecDriverCommonEnvsArrayOutput
	ToCSIPowerMaxSpecDriverCommonEnvsArrayOutputWithContext(context.Context) CSIPowerMaxSpecDriverCommonEnvsArrayOutput
}

type CSIPowerMaxSpecDriverCommonEnvsArray []CSIPowerMaxSpecDriverCommonEnvsInput

func (CSIPowerMaxSpecDriverCommonEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxSpecDriverCommonEnvs)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverCommonEnvsArray) ToCSIPowerMaxSpecDriverCommonEnvsArrayOutput() CSIPowerMaxSpecDriverCommonEnvsArrayOutput {
	return i.ToCSIPowerMaxSpecDriverCommonEnvsArrayOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverCommonEnvsArray) ToCSIPowerMaxSpecDriverCommonEnvsArrayOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIPowerMaxSpecDriverCommonEnvsOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverCommonEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverCommonEnvs)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverCommonEnvsOutput) ToCSIPowerMaxSpecDriverCommonEnvsOutput() CSIPowerMaxSpecDriverCommonEnvsOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsOutput) ToCSIPowerMaxSpecDriverCommonEnvsOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o CSIPowerMaxSpecDriverCommonEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o CSIPowerMaxSpecDriverCommonEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o CSIPowerMaxSpecDriverCommonEnvsOutput) ValueFrom() CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvs) *CSIPowerMaxSpecDriverCommonEnvsValueFrom { return v.ValueFrom }).(CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput)
}

type CSIPowerMaxSpecDriverCommonEnvsArrayOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverCommonEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxSpecDriverCommonEnvs)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverCommonEnvsArrayOutput) ToCSIPowerMaxSpecDriverCommonEnvsArrayOutput() CSIPowerMaxSpecDriverCommonEnvsArrayOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsArrayOutput) ToCSIPowerMaxSpecDriverCommonEnvsArrayOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsArrayOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsArrayOutput) Index(i pulumi.IntInput) CSIPowerMaxSpecDriverCommonEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIPowerMaxSpecDriverCommonEnvs {
		return vs[0].([]CSIPowerMaxSpecDriverCommonEnvs)[vs[1].(int)]
	}).(CSIPowerMaxSpecDriverCommonEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIPowerMaxSpecDriverCommonEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef *CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// CSIPowerMaxSpecDriverCommonEnvsValueFromInput is an input type that accepts CSIPowerMaxSpecDriverCommonEnvsValueFromArgs and CSIPowerMaxSpecDriverCommonEnvsValueFromOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverCommonEnvsValueFromInput` via:
//
//          CSIPowerMaxSpecDriverCommonEnvsValueFromArgs{...}
type CSIPowerMaxSpecDriverCommonEnvsValueFromInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverCommonEnvsValueFromOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromOutput
	ToCSIPowerMaxSpecDriverCommonEnvsValueFromOutputWithContext(context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIPowerMaxSpecDriverCommonEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (CSIPowerMaxSpecDriverCommonEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverCommonEnvsValueFrom)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromOutput {
	return i.ToCSIPowerMaxSpecDriverCommonEnvsValueFromOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonEnvsValueFromOutput)
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput {
	return i.ToCSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonEnvsValueFromOutput).ToCSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverCommonEnvsValueFromPtrInput is an input type that accepts CSIPowerMaxSpecDriverCommonEnvsValueFromArgs, CSIPowerMaxSpecDriverCommonEnvsValueFromPtr and CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverCommonEnvsValueFromPtrInput` via:
//
//          CSIPowerMaxSpecDriverCommonEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverCommonEnvsValueFromPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput
	ToCSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput
}

type csipowerMaxSpecDriverCommonEnvsValueFromPtrType CSIPowerMaxSpecDriverCommonEnvsValueFromArgs

func CSIPowerMaxSpecDriverCommonEnvsValueFromPtr(v *CSIPowerMaxSpecDriverCommonEnvsValueFromArgs) CSIPowerMaxSpecDriverCommonEnvsValueFromPtrInput {
	return (*csipowerMaxSpecDriverCommonEnvsValueFromPtrType)(v)
}

func (*csipowerMaxSpecDriverCommonEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverCommonEnvsValueFrom)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverCommonEnvsValueFromPtrType) ToCSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput {
	return i.ToCSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverCommonEnvsValueFromPtrType) ToCSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIPowerMaxSpecDriverCommonEnvsValueFromOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverCommonEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverCommonEnvsValueFrom)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput {
	return o.ToCSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvsValueFrom) *CSIPowerMaxSpecDriverCommonEnvsValueFrom {
		return &v
	}).(CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromOutput) ConfigMapKeyRef() CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvsValueFrom) *CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromOutput) FieldRef() CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvsValueFrom) *CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRef {
		return v.FieldRef
	}).(CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromOutput) ResourceFieldRef() CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvsValueFrom) *CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromOutput) SecretKeyRef() CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvsValueFrom) *CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput)
}

type CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverCommonEnvsValueFrom)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput) Elem() CSIPowerMaxSpecDriverCommonEnvsValueFromOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommonEnvsValueFrom) CSIPowerMaxSpecDriverCommonEnvsValueFrom { return *v }).(CSIPowerMaxSpecDriverCommonEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput) ConfigMapKeyRef() CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommonEnvsValueFrom) *CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput) FieldRef() CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommonEnvsValueFrom) *CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput) ResourceFieldRef() CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommonEnvsValueFrom) *CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput) SecretKeyRef() CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommonEnvsValueFrom) *CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefInput is an input type that accepts CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs and CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefInput` via:
//
//          CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs{...}
type CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput
	ToCSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return i.ToCSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput)
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput).ToCSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs, CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtr and CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput
	ToCSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput
}

type csipowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs

func CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtr(v *CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput {
	return (*csipowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*csipowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType) ToCSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType) ToCSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToCSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRef) *CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRef {
		return &v
	}).(CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) Elem() CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRef) CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRef {
		return *v
	}).(CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefInput is an input type that accepts CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefArgs and CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefInput` via:
//
//          CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefArgs{...}
type CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput
	ToCSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutputWithContext(context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRef)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput {
	return i.ToCSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput)
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput).ToCSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrInput is an input type that accepts CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefArgs, CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtr and CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrInput` via:
//
//          CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput
	ToCSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput
}

type csipowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrType CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefArgs

func CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtr(v *CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefArgs) CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrInput {
	return (*csipowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrType)(v)
}

func (*csipowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrType) ToCSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrType) ToCSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o.ToCSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRef) *CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRef {
		return &v
	}).(CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput) Elem() CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRef) CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRef {
		return *v
	}).(CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *string `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefInput is an input type that accepts CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefArgs and CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefInput` via:
//
//          CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefArgs{...}
type CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput
	ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutputWithContext(context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor pulumi.StringPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return i.ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput)
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput).ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrInput is an input type that accepts CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefArgs, CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtr and CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrInput` via:
//
//          CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput
	ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput
}

type csipowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrType CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefArgs

func CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtr(v *CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefArgs) CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrInput {
	return (*csipowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*csipowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrType) ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrType) ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRef) *CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRef {
		return &v
	}).(CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRef) *string { return v.Divisor }).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) Elem() CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRef) CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRef {
		return *v
	}).(CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefInput is an input type that accepts CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefArgs and CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefInput` via:
//
//          CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefArgs{...}
type CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput
	ToCSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutputWithContext(context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return i.ToCSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput)
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput).ToCSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrInput is an input type that accepts CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefArgs, CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtr and CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrInput` via:
//
//          CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput
	ToCSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput
}

type csipowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrType CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefArgs

func CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtr(v *CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefArgs) CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrInput {
	return (*csipowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*csipowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrType) ToCSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrType) ToCSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToCSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRef) *CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRef {
		return &v
	}).(CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) Elem() CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRef) CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRef {
		return *v
	}).(CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Controller is the specification for Controller plugin only
type CSIPowerMaxSpecDriverController struct {
	// Args is the set of arguments for the container
	Args []string `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs []CSIPowerMaxSpecDriverControllerEnvs `pulumi:"envs"`
	// Image is the image tag for the Container
	Image *string `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name *string `pulumi:"name"`
}

// CSIPowerMaxSpecDriverControllerInput is an input type that accepts CSIPowerMaxSpecDriverControllerArgs and CSIPowerMaxSpecDriverControllerOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverControllerInput` via:
//
//          CSIPowerMaxSpecDriverControllerArgs{...}
type CSIPowerMaxSpecDriverControllerInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverControllerOutput() CSIPowerMaxSpecDriverControllerOutput
	ToCSIPowerMaxSpecDriverControllerOutputWithContext(context.Context) CSIPowerMaxSpecDriverControllerOutput
}

// Controller is the specification for Controller plugin only
type CSIPowerMaxSpecDriverControllerArgs struct {
	// Args is the set of arguments for the container
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs CSIPowerMaxSpecDriverControllerEnvsArrayInput `pulumi:"envs"`
	// Image is the image tag for the Container
	Image pulumi.StringPtrInput `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (CSIPowerMaxSpecDriverControllerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverController)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverControllerArgs) ToCSIPowerMaxSpecDriverControllerOutput() CSIPowerMaxSpecDriverControllerOutput {
	return i.ToCSIPowerMaxSpecDriverControllerOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverControllerArgs) ToCSIPowerMaxSpecDriverControllerOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerOutput)
}

func (i CSIPowerMaxSpecDriverControllerArgs) ToCSIPowerMaxSpecDriverControllerPtrOutput() CSIPowerMaxSpecDriverControllerPtrOutput {
	return i.ToCSIPowerMaxSpecDriverControllerPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverControllerArgs) ToCSIPowerMaxSpecDriverControllerPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerOutput).ToCSIPowerMaxSpecDriverControllerPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverControllerPtrInput is an input type that accepts CSIPowerMaxSpecDriverControllerArgs, CSIPowerMaxSpecDriverControllerPtr and CSIPowerMaxSpecDriverControllerPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverControllerPtrInput` via:
//
//          CSIPowerMaxSpecDriverControllerArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverControllerPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverControllerPtrOutput() CSIPowerMaxSpecDriverControllerPtrOutput
	ToCSIPowerMaxSpecDriverControllerPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverControllerPtrOutput
}

type csipowerMaxSpecDriverControllerPtrType CSIPowerMaxSpecDriverControllerArgs

func CSIPowerMaxSpecDriverControllerPtr(v *CSIPowerMaxSpecDriverControllerArgs) CSIPowerMaxSpecDriverControllerPtrInput {
	return (*csipowerMaxSpecDriverControllerPtrType)(v)
}

func (*csipowerMaxSpecDriverControllerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverController)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverControllerPtrType) ToCSIPowerMaxSpecDriverControllerPtrOutput() CSIPowerMaxSpecDriverControllerPtrOutput {
	return i.ToCSIPowerMaxSpecDriverControllerPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverControllerPtrType) ToCSIPowerMaxSpecDriverControllerPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerPtrOutput)
}

// Controller is the specification for Controller plugin only
type CSIPowerMaxSpecDriverControllerOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverControllerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverController)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverControllerOutput) ToCSIPowerMaxSpecDriverControllerOutput() CSIPowerMaxSpecDriverControllerOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerOutput) ToCSIPowerMaxSpecDriverControllerOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerOutput) ToCSIPowerMaxSpecDriverControllerPtrOutput() CSIPowerMaxSpecDriverControllerPtrOutput {
	return o.ToCSIPowerMaxSpecDriverControllerPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverControllerOutput) ToCSIPowerMaxSpecDriverControllerPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverController) *CSIPowerMaxSpecDriverController {
		return &v
	}).(CSIPowerMaxSpecDriverControllerPtrOutput)
}

// Args is the set of arguments for the container
func (o CSIPowerMaxSpecDriverControllerOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverController) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIPowerMaxSpecDriverControllerOutput) Envs() CSIPowerMaxSpecDriverControllerEnvsArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverController) []CSIPowerMaxSpecDriverControllerEnvs { return v.Envs }).(CSIPowerMaxSpecDriverControllerEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIPowerMaxSpecDriverControllerOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverController) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIPowerMaxSpecDriverControllerOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverController) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIPowerMaxSpecDriverControllerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverController) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CSIPowerMaxSpecDriverControllerPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverControllerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverController)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverControllerPtrOutput) ToCSIPowerMaxSpecDriverControllerPtrOutput() CSIPowerMaxSpecDriverControllerPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerPtrOutput) ToCSIPowerMaxSpecDriverControllerPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerPtrOutput) Elem() CSIPowerMaxSpecDriverControllerOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverController) CSIPowerMaxSpecDriverController { return *v }).(CSIPowerMaxSpecDriverControllerOutput)
}

// Args is the set of arguments for the container
func (o CSIPowerMaxSpecDriverControllerPtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverController) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIPowerMaxSpecDriverControllerPtrOutput) Envs() CSIPowerMaxSpecDriverControllerEnvsArrayOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverController) []CSIPowerMaxSpecDriverControllerEnvs {
		if v == nil {
			return nil
		}
		return v.Envs
	}).(CSIPowerMaxSpecDriverControllerEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIPowerMaxSpecDriverControllerPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverController) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIPowerMaxSpecDriverControllerPtrOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverController) *string {
		if v == nil {
			return nil
		}
		return v.ImagePullPolicy
	}).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIPowerMaxSpecDriverControllerPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverController) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIPowerMaxSpecDriverControllerEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *CSIPowerMaxSpecDriverControllerEnvsValueFrom `pulumi:"valueFrom"`
}

// CSIPowerMaxSpecDriverControllerEnvsInput is an input type that accepts CSIPowerMaxSpecDriverControllerEnvsArgs and CSIPowerMaxSpecDriverControllerEnvsOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverControllerEnvsInput` via:
//
//          CSIPowerMaxSpecDriverControllerEnvsArgs{...}
type CSIPowerMaxSpecDriverControllerEnvsInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverControllerEnvsOutput() CSIPowerMaxSpecDriverControllerEnvsOutput
	ToCSIPowerMaxSpecDriverControllerEnvsOutputWithContext(context.Context) CSIPowerMaxSpecDriverControllerEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type CSIPowerMaxSpecDriverControllerEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom CSIPowerMaxSpecDriverControllerEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (CSIPowerMaxSpecDriverControllerEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverControllerEnvs)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverControllerEnvsArgs) ToCSIPowerMaxSpecDriverControllerEnvsOutput() CSIPowerMaxSpecDriverControllerEnvsOutput {
	return i.ToCSIPowerMaxSpecDriverControllerEnvsOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverControllerEnvsArgs) ToCSIPowerMaxSpecDriverControllerEnvsOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerEnvsOutput)
}

// CSIPowerMaxSpecDriverControllerEnvsArrayInput is an input type that accepts CSIPowerMaxSpecDriverControllerEnvsArray and CSIPowerMaxSpecDriverControllerEnvsArrayOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverControllerEnvsArrayInput` via:
//
//          CSIPowerMaxSpecDriverControllerEnvsArray{ CSIPowerMaxSpecDriverControllerEnvsArgs{...} }
type CSIPowerMaxSpecDriverControllerEnvsArrayInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverControllerEnvsArrayOutput() CSIPowerMaxSpecDriverControllerEnvsArrayOutput
	ToCSIPowerMaxSpecDriverControllerEnvsArrayOutputWithContext(context.Context) CSIPowerMaxSpecDriverControllerEnvsArrayOutput
}

type CSIPowerMaxSpecDriverControllerEnvsArray []CSIPowerMaxSpecDriverControllerEnvsInput

func (CSIPowerMaxSpecDriverControllerEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxSpecDriverControllerEnvs)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverControllerEnvsArray) ToCSIPowerMaxSpecDriverControllerEnvsArrayOutput() CSIPowerMaxSpecDriverControllerEnvsArrayOutput {
	return i.ToCSIPowerMaxSpecDriverControllerEnvsArrayOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverControllerEnvsArray) ToCSIPowerMaxSpecDriverControllerEnvsArrayOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIPowerMaxSpecDriverControllerEnvsOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverControllerEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverControllerEnvs)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverControllerEnvsOutput) ToCSIPowerMaxSpecDriverControllerEnvsOutput() CSIPowerMaxSpecDriverControllerEnvsOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsOutput) ToCSIPowerMaxSpecDriverControllerEnvsOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o CSIPowerMaxSpecDriverControllerEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o CSIPowerMaxSpecDriverControllerEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o CSIPowerMaxSpecDriverControllerEnvsOutput) ValueFrom() CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvs) *CSIPowerMaxSpecDriverControllerEnvsValueFrom {
		return v.ValueFrom
	}).(CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput)
}

type CSIPowerMaxSpecDriverControllerEnvsArrayOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverControllerEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxSpecDriverControllerEnvs)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverControllerEnvsArrayOutput) ToCSIPowerMaxSpecDriverControllerEnvsArrayOutput() CSIPowerMaxSpecDriverControllerEnvsArrayOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsArrayOutput) ToCSIPowerMaxSpecDriverControllerEnvsArrayOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsArrayOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsArrayOutput) Index(i pulumi.IntInput) CSIPowerMaxSpecDriverControllerEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIPowerMaxSpecDriverControllerEnvs {
		return vs[0].([]CSIPowerMaxSpecDriverControllerEnvs)[vs[1].(int)]
	}).(CSIPowerMaxSpecDriverControllerEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIPowerMaxSpecDriverControllerEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef *CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// CSIPowerMaxSpecDriverControllerEnvsValueFromInput is an input type that accepts CSIPowerMaxSpecDriverControllerEnvsValueFromArgs and CSIPowerMaxSpecDriverControllerEnvsValueFromOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverControllerEnvsValueFromInput` via:
//
//          CSIPowerMaxSpecDriverControllerEnvsValueFromArgs{...}
type CSIPowerMaxSpecDriverControllerEnvsValueFromInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverControllerEnvsValueFromOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromOutput
	ToCSIPowerMaxSpecDriverControllerEnvsValueFromOutputWithContext(context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIPowerMaxSpecDriverControllerEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (CSIPowerMaxSpecDriverControllerEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverControllerEnvsValueFrom)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromOutput {
	return i.ToCSIPowerMaxSpecDriverControllerEnvsValueFromOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerEnvsValueFromOutput)
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput {
	return i.ToCSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerEnvsValueFromOutput).ToCSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverControllerEnvsValueFromPtrInput is an input type that accepts CSIPowerMaxSpecDriverControllerEnvsValueFromArgs, CSIPowerMaxSpecDriverControllerEnvsValueFromPtr and CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverControllerEnvsValueFromPtrInput` via:
//
//          CSIPowerMaxSpecDriverControllerEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverControllerEnvsValueFromPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput
	ToCSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput
}

type csipowerMaxSpecDriverControllerEnvsValueFromPtrType CSIPowerMaxSpecDriverControllerEnvsValueFromArgs

func CSIPowerMaxSpecDriverControllerEnvsValueFromPtr(v *CSIPowerMaxSpecDriverControllerEnvsValueFromArgs) CSIPowerMaxSpecDriverControllerEnvsValueFromPtrInput {
	return (*csipowerMaxSpecDriverControllerEnvsValueFromPtrType)(v)
}

func (*csipowerMaxSpecDriverControllerEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverControllerEnvsValueFrom)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverControllerEnvsValueFromPtrType) ToCSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput {
	return i.ToCSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverControllerEnvsValueFromPtrType) ToCSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIPowerMaxSpecDriverControllerEnvsValueFromOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverControllerEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverControllerEnvsValueFrom)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput {
	return o.ToCSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvsValueFrom) *CSIPowerMaxSpecDriverControllerEnvsValueFrom {
		return &v
	}).(CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromOutput) ConfigMapKeyRef() CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvsValueFrom) *CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromOutput) FieldRef() CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvsValueFrom) *CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRef {
		return v.FieldRef
	}).(CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromOutput) ResourceFieldRef() CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvsValueFrom) *CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromOutput) SecretKeyRef() CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvsValueFrom) *CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput)
}

type CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverControllerEnvsValueFrom)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput) Elem() CSIPowerMaxSpecDriverControllerEnvsValueFromOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverControllerEnvsValueFrom) CSIPowerMaxSpecDriverControllerEnvsValueFrom {
		return *v
	}).(CSIPowerMaxSpecDriverControllerEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput) ConfigMapKeyRef() CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverControllerEnvsValueFrom) *CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput) FieldRef() CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverControllerEnvsValueFrom) *CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput) ResourceFieldRef() CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverControllerEnvsValueFrom) *CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput) SecretKeyRef() CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverControllerEnvsValueFrom) *CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefInput is an input type that accepts CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs and CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefInput` via:
//
//          CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs{...}
type CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput
	ToCSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return i.ToCSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput)
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput).ToCSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs, CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtr and CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput
	ToCSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput
}

type csipowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs

func CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtr(v *CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput {
	return (*csipowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*csipowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType) ToCSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType) ToCSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToCSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRef) *CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRef {
		return &v
	}).(CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) Elem() CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRef) CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRef {
		return *v
	}).(CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefInput is an input type that accepts CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefArgs and CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefInput` via:
//
//          CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefArgs{...}
type CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput
	ToCSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutputWithContext(context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRef)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput {
	return i.ToCSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput)
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput).ToCSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrInput is an input type that accepts CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefArgs, CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtr and CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrInput` via:
//
//          CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput
	ToCSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput
}

type csipowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrType CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefArgs

func CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtr(v *CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefArgs) CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrInput {
	return (*csipowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrType)(v)
}

func (*csipowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrType) ToCSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrType) ToCSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o.ToCSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRef) *CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRef {
		return &v
	}).(CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput) Elem() CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRef) CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRef {
		return *v
	}).(CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *string `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefInput is an input type that accepts CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefArgs and CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefInput` via:
//
//          CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefArgs{...}
type CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput
	ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutputWithContext(context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor pulumi.StringPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return i.ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput)
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput).ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrInput is an input type that accepts CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefArgs, CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtr and CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrInput` via:
//
//          CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput
	ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput
}

type csipowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrType CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefArgs

func CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtr(v *CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefArgs) CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrInput {
	return (*csipowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*csipowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrType) ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrType) ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRef) *CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRef {
		return &v
	}).(CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRef) *string { return v.Divisor }).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) Elem() CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRef) CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRef {
		return *v
	}).(CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefInput is an input type that accepts CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefArgs and CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefInput` via:
//
//          CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefArgs{...}
type CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput
	ToCSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutputWithContext(context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return i.ToCSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput)
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput).ToCSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrInput is an input type that accepts CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefArgs, CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtr and CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrInput` via:
//
//          CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput
	ToCSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput
}

type csipowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrType CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefArgs

func CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtr(v *CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefArgs) CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrInput {
	return (*csipowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*csipowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrType) ToCSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrType) ToCSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToCSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRef) *CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRef {
		return &v
	}).(CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) Elem() CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRef) CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRef {
		return *v
	}).(CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Node is the specification for Node plugin only
type CSIPowerMaxSpecDriverNode struct {
	// Args is the set of arguments for the container
	Args []string `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs []CSIPowerMaxSpecDriverNodeEnvs `pulumi:"envs"`
	// Image is the image tag for the Container
	Image *string `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name *string `pulumi:"name"`
}

// CSIPowerMaxSpecDriverNodeInput is an input type that accepts CSIPowerMaxSpecDriverNodeArgs and CSIPowerMaxSpecDriverNodeOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverNodeInput` via:
//
//          CSIPowerMaxSpecDriverNodeArgs{...}
type CSIPowerMaxSpecDriverNodeInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverNodeOutput() CSIPowerMaxSpecDriverNodeOutput
	ToCSIPowerMaxSpecDriverNodeOutputWithContext(context.Context) CSIPowerMaxSpecDriverNodeOutput
}

// Node is the specification for Node plugin only
type CSIPowerMaxSpecDriverNodeArgs struct {
	// Args is the set of arguments for the container
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs CSIPowerMaxSpecDriverNodeEnvsArrayInput `pulumi:"envs"`
	// Image is the image tag for the Container
	Image pulumi.StringPtrInput `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (CSIPowerMaxSpecDriverNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverNode)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverNodeArgs) ToCSIPowerMaxSpecDriverNodeOutput() CSIPowerMaxSpecDriverNodeOutput {
	return i.ToCSIPowerMaxSpecDriverNodeOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverNodeArgs) ToCSIPowerMaxSpecDriverNodeOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeOutput)
}

func (i CSIPowerMaxSpecDriverNodeArgs) ToCSIPowerMaxSpecDriverNodePtrOutput() CSIPowerMaxSpecDriverNodePtrOutput {
	return i.ToCSIPowerMaxSpecDriverNodePtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverNodeArgs) ToCSIPowerMaxSpecDriverNodePtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeOutput).ToCSIPowerMaxSpecDriverNodePtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverNodePtrInput is an input type that accepts CSIPowerMaxSpecDriverNodeArgs, CSIPowerMaxSpecDriverNodePtr and CSIPowerMaxSpecDriverNodePtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverNodePtrInput` via:
//
//          CSIPowerMaxSpecDriverNodeArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverNodePtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverNodePtrOutput() CSIPowerMaxSpecDriverNodePtrOutput
	ToCSIPowerMaxSpecDriverNodePtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverNodePtrOutput
}

type csipowerMaxSpecDriverNodePtrType CSIPowerMaxSpecDriverNodeArgs

func CSIPowerMaxSpecDriverNodePtr(v *CSIPowerMaxSpecDriverNodeArgs) CSIPowerMaxSpecDriverNodePtrInput {
	return (*csipowerMaxSpecDriverNodePtrType)(v)
}

func (*csipowerMaxSpecDriverNodePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverNode)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverNodePtrType) ToCSIPowerMaxSpecDriverNodePtrOutput() CSIPowerMaxSpecDriverNodePtrOutput {
	return i.ToCSIPowerMaxSpecDriverNodePtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverNodePtrType) ToCSIPowerMaxSpecDriverNodePtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodePtrOutput)
}

// Node is the specification for Node plugin only
type CSIPowerMaxSpecDriverNodeOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverNode)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverNodeOutput) ToCSIPowerMaxSpecDriverNodeOutput() CSIPowerMaxSpecDriverNodeOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeOutput) ToCSIPowerMaxSpecDriverNodeOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeOutput) ToCSIPowerMaxSpecDriverNodePtrOutput() CSIPowerMaxSpecDriverNodePtrOutput {
	return o.ToCSIPowerMaxSpecDriverNodePtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverNodeOutput) ToCSIPowerMaxSpecDriverNodePtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodePtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNode) *CSIPowerMaxSpecDriverNode {
		return &v
	}).(CSIPowerMaxSpecDriverNodePtrOutput)
}

// Args is the set of arguments for the container
func (o CSIPowerMaxSpecDriverNodeOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNode) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIPowerMaxSpecDriverNodeOutput) Envs() CSIPowerMaxSpecDriverNodeEnvsArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNode) []CSIPowerMaxSpecDriverNodeEnvs { return v.Envs }).(CSIPowerMaxSpecDriverNodeEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIPowerMaxSpecDriverNodeOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNode) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIPowerMaxSpecDriverNodeOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNode) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIPowerMaxSpecDriverNodeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNode) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CSIPowerMaxSpecDriverNodePtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverNodePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverNode)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverNodePtrOutput) ToCSIPowerMaxSpecDriverNodePtrOutput() CSIPowerMaxSpecDriverNodePtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodePtrOutput) ToCSIPowerMaxSpecDriverNodePtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodePtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodePtrOutput) Elem() CSIPowerMaxSpecDriverNodeOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNode) CSIPowerMaxSpecDriverNode { return *v }).(CSIPowerMaxSpecDriverNodeOutput)
}

// Args is the set of arguments for the container
func (o CSIPowerMaxSpecDriverNodePtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNode) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIPowerMaxSpecDriverNodePtrOutput) Envs() CSIPowerMaxSpecDriverNodeEnvsArrayOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNode) []CSIPowerMaxSpecDriverNodeEnvs {
		if v == nil {
			return nil
		}
		return v.Envs
	}).(CSIPowerMaxSpecDriverNodeEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIPowerMaxSpecDriverNodePtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNode) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIPowerMaxSpecDriverNodePtrOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNode) *string {
		if v == nil {
			return nil
		}
		return v.ImagePullPolicy
	}).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIPowerMaxSpecDriverNodePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNode) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIPowerMaxSpecDriverNodeEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *CSIPowerMaxSpecDriverNodeEnvsValueFrom `pulumi:"valueFrom"`
}

// CSIPowerMaxSpecDriverNodeEnvsInput is an input type that accepts CSIPowerMaxSpecDriverNodeEnvsArgs and CSIPowerMaxSpecDriverNodeEnvsOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverNodeEnvsInput` via:
//
//          CSIPowerMaxSpecDriverNodeEnvsArgs{...}
type CSIPowerMaxSpecDriverNodeEnvsInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverNodeEnvsOutput() CSIPowerMaxSpecDriverNodeEnvsOutput
	ToCSIPowerMaxSpecDriverNodeEnvsOutputWithContext(context.Context) CSIPowerMaxSpecDriverNodeEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type CSIPowerMaxSpecDriverNodeEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom CSIPowerMaxSpecDriverNodeEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (CSIPowerMaxSpecDriverNodeEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverNodeEnvs)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverNodeEnvsArgs) ToCSIPowerMaxSpecDriverNodeEnvsOutput() CSIPowerMaxSpecDriverNodeEnvsOutput {
	return i.ToCSIPowerMaxSpecDriverNodeEnvsOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverNodeEnvsArgs) ToCSIPowerMaxSpecDriverNodeEnvsOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeEnvsOutput)
}

// CSIPowerMaxSpecDriverNodeEnvsArrayInput is an input type that accepts CSIPowerMaxSpecDriverNodeEnvsArray and CSIPowerMaxSpecDriverNodeEnvsArrayOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverNodeEnvsArrayInput` via:
//
//          CSIPowerMaxSpecDriverNodeEnvsArray{ CSIPowerMaxSpecDriverNodeEnvsArgs{...} }
type CSIPowerMaxSpecDriverNodeEnvsArrayInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverNodeEnvsArrayOutput() CSIPowerMaxSpecDriverNodeEnvsArrayOutput
	ToCSIPowerMaxSpecDriverNodeEnvsArrayOutputWithContext(context.Context) CSIPowerMaxSpecDriverNodeEnvsArrayOutput
}

type CSIPowerMaxSpecDriverNodeEnvsArray []CSIPowerMaxSpecDriverNodeEnvsInput

func (CSIPowerMaxSpecDriverNodeEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxSpecDriverNodeEnvs)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverNodeEnvsArray) ToCSIPowerMaxSpecDriverNodeEnvsArrayOutput() CSIPowerMaxSpecDriverNodeEnvsArrayOutput {
	return i.ToCSIPowerMaxSpecDriverNodeEnvsArrayOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverNodeEnvsArray) ToCSIPowerMaxSpecDriverNodeEnvsArrayOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIPowerMaxSpecDriverNodeEnvsOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverNodeEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverNodeEnvs)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverNodeEnvsOutput) ToCSIPowerMaxSpecDriverNodeEnvsOutput() CSIPowerMaxSpecDriverNodeEnvsOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsOutput) ToCSIPowerMaxSpecDriverNodeEnvsOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o CSIPowerMaxSpecDriverNodeEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o CSIPowerMaxSpecDriverNodeEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o CSIPowerMaxSpecDriverNodeEnvsOutput) ValueFrom() CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvs) *CSIPowerMaxSpecDriverNodeEnvsValueFrom { return v.ValueFrom }).(CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput)
}

type CSIPowerMaxSpecDriverNodeEnvsArrayOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverNodeEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxSpecDriverNodeEnvs)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverNodeEnvsArrayOutput) ToCSIPowerMaxSpecDriverNodeEnvsArrayOutput() CSIPowerMaxSpecDriverNodeEnvsArrayOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsArrayOutput) ToCSIPowerMaxSpecDriverNodeEnvsArrayOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsArrayOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsArrayOutput) Index(i pulumi.IntInput) CSIPowerMaxSpecDriverNodeEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIPowerMaxSpecDriverNodeEnvs {
		return vs[0].([]CSIPowerMaxSpecDriverNodeEnvs)[vs[1].(int)]
	}).(CSIPowerMaxSpecDriverNodeEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIPowerMaxSpecDriverNodeEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef *CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// CSIPowerMaxSpecDriverNodeEnvsValueFromInput is an input type that accepts CSIPowerMaxSpecDriverNodeEnvsValueFromArgs and CSIPowerMaxSpecDriverNodeEnvsValueFromOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverNodeEnvsValueFromInput` via:
//
//          CSIPowerMaxSpecDriverNodeEnvsValueFromArgs{...}
type CSIPowerMaxSpecDriverNodeEnvsValueFromInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverNodeEnvsValueFromOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromOutput
	ToCSIPowerMaxSpecDriverNodeEnvsValueFromOutputWithContext(context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIPowerMaxSpecDriverNodeEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (CSIPowerMaxSpecDriverNodeEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverNodeEnvsValueFrom)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromOutput {
	return i.ToCSIPowerMaxSpecDriverNodeEnvsValueFromOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeEnvsValueFromOutput)
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput {
	return i.ToCSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeEnvsValueFromOutput).ToCSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverNodeEnvsValueFromPtrInput is an input type that accepts CSIPowerMaxSpecDriverNodeEnvsValueFromArgs, CSIPowerMaxSpecDriverNodeEnvsValueFromPtr and CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverNodeEnvsValueFromPtrInput` via:
//
//          CSIPowerMaxSpecDriverNodeEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverNodeEnvsValueFromPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput
	ToCSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput
}

type csipowerMaxSpecDriverNodeEnvsValueFromPtrType CSIPowerMaxSpecDriverNodeEnvsValueFromArgs

func CSIPowerMaxSpecDriverNodeEnvsValueFromPtr(v *CSIPowerMaxSpecDriverNodeEnvsValueFromArgs) CSIPowerMaxSpecDriverNodeEnvsValueFromPtrInput {
	return (*csipowerMaxSpecDriverNodeEnvsValueFromPtrType)(v)
}

func (*csipowerMaxSpecDriverNodeEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverNodeEnvsValueFrom)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverNodeEnvsValueFromPtrType) ToCSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput {
	return i.ToCSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverNodeEnvsValueFromPtrType) ToCSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIPowerMaxSpecDriverNodeEnvsValueFromOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverNodeEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverNodeEnvsValueFrom)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput {
	return o.ToCSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvsValueFrom) *CSIPowerMaxSpecDriverNodeEnvsValueFrom {
		return &v
	}).(CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromOutput) ConfigMapKeyRef() CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvsValueFrom) *CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromOutput) FieldRef() CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvsValueFrom) *CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRef {
		return v.FieldRef
	}).(CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromOutput) ResourceFieldRef() CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvsValueFrom) *CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromOutput) SecretKeyRef() CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvsValueFrom) *CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput)
}

type CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverNodeEnvsValueFrom)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput) Elem() CSIPowerMaxSpecDriverNodeEnvsValueFromOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNodeEnvsValueFrom) CSIPowerMaxSpecDriverNodeEnvsValueFrom { return *v }).(CSIPowerMaxSpecDriverNodeEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput) ConfigMapKeyRef() CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNodeEnvsValueFrom) *CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput) FieldRef() CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNodeEnvsValueFrom) *CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput) ResourceFieldRef() CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNodeEnvsValueFrom) *CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput) SecretKeyRef() CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNodeEnvsValueFrom) *CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefInput is an input type that accepts CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs and CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefInput` via:
//
//          CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs{...}
type CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput
	ToCSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return i.ToCSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput)
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput).ToCSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs, CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtr and CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput
	ToCSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput
}

type csipowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs

func CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtr(v *CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput {
	return (*csipowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*csipowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType) ToCSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType) ToCSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToCSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRef) *CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRef {
		return &v
	}).(CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) Elem() CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRef) CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRef {
		return *v
	}).(CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefInput is an input type that accepts CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefArgs and CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefInput` via:
//
//          CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefArgs{...}
type CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput
	ToCSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutputWithContext(context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRef)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput {
	return i.ToCSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput)
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput).ToCSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrInput is an input type that accepts CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefArgs, CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtr and CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrInput` via:
//
//          CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput
	ToCSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput
}

type csipowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrType CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefArgs

func CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtr(v *CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefArgs) CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrInput {
	return (*csipowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrType)(v)
}

func (*csipowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrType) ToCSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrType) ToCSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o.ToCSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRef) *CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRef {
		return &v
	}).(CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput) Elem() CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRef) CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRef {
		return *v
	}).(CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *string `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefInput is an input type that accepts CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefArgs and CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefInput` via:
//
//          CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefArgs{...}
type CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput
	ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutputWithContext(context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor pulumi.StringPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return i.ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput)
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput).ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrInput is an input type that accepts CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefArgs, CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtr and CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrInput` via:
//
//          CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput
	ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput
}

type csipowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrType CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefArgs

func CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtr(v *CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefArgs) CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrInput {
	return (*csipowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*csipowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrType) ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrType) ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRef) *CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRef {
		return &v
	}).(CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRef) *string { return v.Divisor }).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) Elem() CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRef) CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRef {
		return *v
	}).(CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefInput is an input type that accepts CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefArgs and CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefInput` via:
//
//          CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefArgs{...}
type CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput
	ToCSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutputWithContext(context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return i.ToCSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput)
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput).ToCSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrInput is an input type that accepts CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefArgs, CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtr and CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrInput` via:
//
//          CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput
	ToCSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput
}

type csipowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrType CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefArgs

func CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtr(v *CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefArgs) CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrInput {
	return (*csipowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*csipowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrType) ToCSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrType) ToCSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToCSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRef) *CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRef {
		return &v
	}).(CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) Elem() CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRef) CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRef {
		return *v
	}).(CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// ContainerTemplate - Structure representing a container
type CSIPowerMaxSpecDriverSideCars struct {
	// Args is the set of arguments for the container
	Args []string `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs []CSIPowerMaxSpecDriverSideCarsEnvs `pulumi:"envs"`
	// Image is the image tag for the Container
	Image *string `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name *string `pulumi:"name"`
}

// CSIPowerMaxSpecDriverSideCarsInput is an input type that accepts CSIPowerMaxSpecDriverSideCarsArgs and CSIPowerMaxSpecDriverSideCarsOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverSideCarsInput` via:
//
//          CSIPowerMaxSpecDriverSideCarsArgs{...}
type CSIPowerMaxSpecDriverSideCarsInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverSideCarsOutput() CSIPowerMaxSpecDriverSideCarsOutput
	ToCSIPowerMaxSpecDriverSideCarsOutputWithContext(context.Context) CSIPowerMaxSpecDriverSideCarsOutput
}

// ContainerTemplate - Structure representing a container
type CSIPowerMaxSpecDriverSideCarsArgs struct {
	// Args is the set of arguments for the container
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs CSIPowerMaxSpecDriverSideCarsEnvsArrayInput `pulumi:"envs"`
	// Image is the image tag for the Container
	Image pulumi.StringPtrInput `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (CSIPowerMaxSpecDriverSideCarsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverSideCars)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverSideCarsArgs) ToCSIPowerMaxSpecDriverSideCarsOutput() CSIPowerMaxSpecDriverSideCarsOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverSideCarsArgs) ToCSIPowerMaxSpecDriverSideCarsOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsOutput)
}

// CSIPowerMaxSpecDriverSideCarsArrayInput is an input type that accepts CSIPowerMaxSpecDriverSideCarsArray and CSIPowerMaxSpecDriverSideCarsArrayOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverSideCarsArrayInput` via:
//
//          CSIPowerMaxSpecDriverSideCarsArray{ CSIPowerMaxSpecDriverSideCarsArgs{...} }
type CSIPowerMaxSpecDriverSideCarsArrayInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverSideCarsArrayOutput() CSIPowerMaxSpecDriverSideCarsArrayOutput
	ToCSIPowerMaxSpecDriverSideCarsArrayOutputWithContext(context.Context) CSIPowerMaxSpecDriverSideCarsArrayOutput
}

type CSIPowerMaxSpecDriverSideCarsArray []CSIPowerMaxSpecDriverSideCarsInput

func (CSIPowerMaxSpecDriverSideCarsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxSpecDriverSideCars)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverSideCarsArray) ToCSIPowerMaxSpecDriverSideCarsArrayOutput() CSIPowerMaxSpecDriverSideCarsArrayOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsArrayOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverSideCarsArray) ToCSIPowerMaxSpecDriverSideCarsArrayOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsArrayOutput)
}

// ContainerTemplate - Structure representing a container
type CSIPowerMaxSpecDriverSideCarsOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverSideCarsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverSideCars)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverSideCarsOutput) ToCSIPowerMaxSpecDriverSideCarsOutput() CSIPowerMaxSpecDriverSideCarsOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsOutput) ToCSIPowerMaxSpecDriverSideCarsOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsOutput {
	return o
}

// Args is the set of arguments for the container
func (o CSIPowerMaxSpecDriverSideCarsOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCars) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIPowerMaxSpecDriverSideCarsOutput) Envs() CSIPowerMaxSpecDriverSideCarsEnvsArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCars) []CSIPowerMaxSpecDriverSideCarsEnvs { return v.Envs }).(CSIPowerMaxSpecDriverSideCarsEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIPowerMaxSpecDriverSideCarsOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCars) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIPowerMaxSpecDriverSideCarsOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCars) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIPowerMaxSpecDriverSideCarsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCars) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CSIPowerMaxSpecDriverSideCarsArrayOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverSideCarsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxSpecDriverSideCars)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverSideCarsArrayOutput) ToCSIPowerMaxSpecDriverSideCarsArrayOutput() CSIPowerMaxSpecDriverSideCarsArrayOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsArrayOutput) ToCSIPowerMaxSpecDriverSideCarsArrayOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsArrayOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsArrayOutput) Index(i pulumi.IntInput) CSIPowerMaxSpecDriverSideCarsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIPowerMaxSpecDriverSideCars {
		return vs[0].([]CSIPowerMaxSpecDriverSideCars)[vs[1].(int)]
	}).(CSIPowerMaxSpecDriverSideCarsOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIPowerMaxSpecDriverSideCarsEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *CSIPowerMaxSpecDriverSideCarsEnvsValueFrom `pulumi:"valueFrom"`
}

// CSIPowerMaxSpecDriverSideCarsEnvsInput is an input type that accepts CSIPowerMaxSpecDriverSideCarsEnvsArgs and CSIPowerMaxSpecDriverSideCarsEnvsOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverSideCarsEnvsInput` via:
//
//          CSIPowerMaxSpecDriverSideCarsEnvsArgs{...}
type CSIPowerMaxSpecDriverSideCarsEnvsInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverSideCarsEnvsOutput() CSIPowerMaxSpecDriverSideCarsEnvsOutput
	ToCSIPowerMaxSpecDriverSideCarsEnvsOutputWithContext(context.Context) CSIPowerMaxSpecDriverSideCarsEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type CSIPowerMaxSpecDriverSideCarsEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (CSIPowerMaxSpecDriverSideCarsEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverSideCarsEnvs)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsOutput() CSIPowerMaxSpecDriverSideCarsEnvsOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsEnvsOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsEnvsOutput)
}

// CSIPowerMaxSpecDriverSideCarsEnvsArrayInput is an input type that accepts CSIPowerMaxSpecDriverSideCarsEnvsArray and CSIPowerMaxSpecDriverSideCarsEnvsArrayOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverSideCarsEnvsArrayInput` via:
//
//          CSIPowerMaxSpecDriverSideCarsEnvsArray{ CSIPowerMaxSpecDriverSideCarsEnvsArgs{...} }
type CSIPowerMaxSpecDriverSideCarsEnvsArrayInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverSideCarsEnvsArrayOutput() CSIPowerMaxSpecDriverSideCarsEnvsArrayOutput
	ToCSIPowerMaxSpecDriverSideCarsEnvsArrayOutputWithContext(context.Context) CSIPowerMaxSpecDriverSideCarsEnvsArrayOutput
}

type CSIPowerMaxSpecDriverSideCarsEnvsArray []CSIPowerMaxSpecDriverSideCarsEnvsInput

func (CSIPowerMaxSpecDriverSideCarsEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxSpecDriverSideCarsEnvs)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsArray) ToCSIPowerMaxSpecDriverSideCarsEnvsArrayOutput() CSIPowerMaxSpecDriverSideCarsEnvsArrayOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsEnvsArrayOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsArray) ToCSIPowerMaxSpecDriverSideCarsEnvsArrayOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIPowerMaxSpecDriverSideCarsEnvsOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverSideCarsEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverSideCarsEnvs)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsOutput() CSIPowerMaxSpecDriverSideCarsEnvsOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o CSIPowerMaxSpecDriverSideCarsEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o CSIPowerMaxSpecDriverSideCarsEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o CSIPowerMaxSpecDriverSideCarsEnvsOutput) ValueFrom() CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvs) *CSIPowerMaxSpecDriverSideCarsEnvsValueFrom {
		return v.ValueFrom
	}).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput)
}

type CSIPowerMaxSpecDriverSideCarsEnvsArrayOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverSideCarsEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxSpecDriverSideCarsEnvs)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsArrayOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsArrayOutput() CSIPowerMaxSpecDriverSideCarsEnvsArrayOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsArrayOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsArrayOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsArrayOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsArrayOutput) Index(i pulumi.IntInput) CSIPowerMaxSpecDriverSideCarsEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIPowerMaxSpecDriverSideCarsEnvs {
		return vs[0].([]CSIPowerMaxSpecDriverSideCarsEnvs)[vs[1].(int)]
	}).(CSIPowerMaxSpecDriverSideCarsEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIPowerMaxSpecDriverSideCarsEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef *CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// CSIPowerMaxSpecDriverSideCarsEnvsValueFromInput is an input type that accepts CSIPowerMaxSpecDriverSideCarsEnvsValueFromArgs and CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverSideCarsEnvsValueFromInput` via:
//
//          CSIPowerMaxSpecDriverSideCarsEnvsValueFromArgs{...}
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput
	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromOutputWithContext(context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (CSIPowerMaxSpecDriverSideCarsEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverSideCarsEnvsValueFrom)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput)
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput).ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrInput is an input type that accepts CSIPowerMaxSpecDriverSideCarsEnvsValueFromArgs, CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtr and CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrInput` via:
//
//          CSIPowerMaxSpecDriverSideCarsEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput
	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput
}

type csipowerMaxSpecDriverSideCarsEnvsValueFromPtrType CSIPowerMaxSpecDriverSideCarsEnvsValueFromArgs

func CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtr(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFromArgs) CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrInput {
	return (*csipowerMaxSpecDriverSideCarsEnvsValueFromPtrType)(v)
}

func (*csipowerMaxSpecDriverSideCarsEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverSideCarsEnvsValueFrom)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverSideCarsEnvsValueFromPtrType) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverSideCarsEnvsValueFromPtrType) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverSideCarsEnvsValueFrom)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput {
	return o.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvsValueFrom) *CSIPowerMaxSpecDriverSideCarsEnvsValueFrom {
		return &v
	}).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput) ConfigMapKeyRef() CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvsValueFrom) *CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput) FieldRef() CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvsValueFrom) *CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRef {
		return v.FieldRef
	}).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput) ResourceFieldRef() CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvsValueFrom) *CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput) SecretKeyRef() CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvsValueFrom) *CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput)
}

type CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverSideCarsEnvsValueFrom)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput) Elem() CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFrom) CSIPowerMaxSpecDriverSideCarsEnvsValueFrom {
		return *v
	}).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput) ConfigMapKeyRef() CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFrom) *CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput) FieldRef() CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFrom) *CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput) ResourceFieldRef() CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFrom) *CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput) SecretKeyRef() CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFrom) *CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefInput is an input type that accepts CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs and CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefInput` via:
//
//          CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs{...}
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput
	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput)
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput).ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs, CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtr and CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput
	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput
}

type csipowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs

func CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtr(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput {
	return (*csipowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*csipowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
		return &v
	}).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) Elem() CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
		return *v
	}).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefInput is an input type that accepts CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefArgs and CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefInput` via:
//
//          CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefArgs{...}
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput
	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutputWithContext(context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRef)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput)
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput).ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrInput is an input type that accepts CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefArgs, CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtr and CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrInput` via:
//
//          CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput
	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput
}

type csipowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrType CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefArgs

func CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtr(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefArgs) CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrInput {
	return (*csipowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrType)(v)
}

func (*csipowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrType) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrType) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRef) *CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRef {
		return &v
	}).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) Elem() CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRef) CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRef {
		return *v
	}).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *string `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefInput is an input type that accepts CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs and CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefInput` via:
//
//          CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs{...}
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput
	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutputWithContext(context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor pulumi.StringPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput)
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput).ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput is an input type that accepts CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs, CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtr and CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput` via:
//
//          CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput
	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput
}

type csipowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs

func CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtr(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput {
	return (*csipowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*csipowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRef) *CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRef {
		return &v
	}).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRef) *string { return v.Divisor }).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) Elem() CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRef) CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRef {
		return *v
	}).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefInput is an input type that accepts CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs and CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefInput` via:
//
//          CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs{...}
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput
	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutputWithContext(context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput)
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput).ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput is an input type that accepts CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs, CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtr and CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput` via:
//
//          CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput
	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput
}

type csipowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs

func CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtr(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput {
	return (*csipowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*csipowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRef) *CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRef {
		return &v
	}).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) Elem() CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRef) CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRef {
		return *v
	}).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// SnapshotClass represents a VolumeSnapshotClass
type CSIPowerMaxSpecDriverSnapshotClass struct {
	// Name is the name of the Snapshot Class
	Name string `pulumi:"name"`
	// Parameters is a map of driver specific parameters for snapshot class
	Parameters map[string]string `pulumi:"parameters"`
}

// CSIPowerMaxSpecDriverSnapshotClassInput is an input type that accepts CSIPowerMaxSpecDriverSnapshotClassArgs and CSIPowerMaxSpecDriverSnapshotClassOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverSnapshotClassInput` via:
//
//          CSIPowerMaxSpecDriverSnapshotClassArgs{...}
type CSIPowerMaxSpecDriverSnapshotClassInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverSnapshotClassOutput() CSIPowerMaxSpecDriverSnapshotClassOutput
	ToCSIPowerMaxSpecDriverSnapshotClassOutputWithContext(context.Context) CSIPowerMaxSpecDriverSnapshotClassOutput
}

// SnapshotClass represents a VolumeSnapshotClass
type CSIPowerMaxSpecDriverSnapshotClassArgs struct {
	// Name is the name of the Snapshot Class
	Name pulumi.StringInput `pulumi:"name"`
	// Parameters is a map of driver specific parameters for snapshot class
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
}

func (CSIPowerMaxSpecDriverSnapshotClassArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverSnapshotClass)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverSnapshotClassArgs) ToCSIPowerMaxSpecDriverSnapshotClassOutput() CSIPowerMaxSpecDriverSnapshotClassOutput {
	return i.ToCSIPowerMaxSpecDriverSnapshotClassOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverSnapshotClassArgs) ToCSIPowerMaxSpecDriverSnapshotClassOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSnapshotClassOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSnapshotClassOutput)
}

// CSIPowerMaxSpecDriverSnapshotClassArrayInput is an input type that accepts CSIPowerMaxSpecDriverSnapshotClassArray and CSIPowerMaxSpecDriverSnapshotClassArrayOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverSnapshotClassArrayInput` via:
//
//          CSIPowerMaxSpecDriverSnapshotClassArray{ CSIPowerMaxSpecDriverSnapshotClassArgs{...} }
type CSIPowerMaxSpecDriverSnapshotClassArrayInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverSnapshotClassArrayOutput() CSIPowerMaxSpecDriverSnapshotClassArrayOutput
	ToCSIPowerMaxSpecDriverSnapshotClassArrayOutputWithContext(context.Context) CSIPowerMaxSpecDriverSnapshotClassArrayOutput
}

type CSIPowerMaxSpecDriverSnapshotClassArray []CSIPowerMaxSpecDriverSnapshotClassInput

func (CSIPowerMaxSpecDriverSnapshotClassArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxSpecDriverSnapshotClass)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverSnapshotClassArray) ToCSIPowerMaxSpecDriverSnapshotClassArrayOutput() CSIPowerMaxSpecDriverSnapshotClassArrayOutput {
	return i.ToCSIPowerMaxSpecDriverSnapshotClassArrayOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverSnapshotClassArray) ToCSIPowerMaxSpecDriverSnapshotClassArrayOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSnapshotClassArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSnapshotClassArrayOutput)
}

// SnapshotClass represents a VolumeSnapshotClass
type CSIPowerMaxSpecDriverSnapshotClassOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverSnapshotClassOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverSnapshotClass)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverSnapshotClassOutput) ToCSIPowerMaxSpecDriverSnapshotClassOutput() CSIPowerMaxSpecDriverSnapshotClassOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSnapshotClassOutput) ToCSIPowerMaxSpecDriverSnapshotClassOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSnapshotClassOutput {
	return o
}

// Name is the name of the Snapshot Class
func (o CSIPowerMaxSpecDriverSnapshotClassOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSnapshotClass) string { return v.Name }).(pulumi.StringOutput)
}

// Parameters is a map of driver specific parameters for snapshot class
func (o CSIPowerMaxSpecDriverSnapshotClassOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSnapshotClass) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

type CSIPowerMaxSpecDriverSnapshotClassArrayOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverSnapshotClassArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxSpecDriverSnapshotClass)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverSnapshotClassArrayOutput) ToCSIPowerMaxSpecDriverSnapshotClassArrayOutput() CSIPowerMaxSpecDriverSnapshotClassArrayOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSnapshotClassArrayOutput) ToCSIPowerMaxSpecDriverSnapshotClassArrayOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSnapshotClassArrayOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSnapshotClassArrayOutput) Index(i pulumi.IntInput) CSIPowerMaxSpecDriverSnapshotClassOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIPowerMaxSpecDriverSnapshotClass {
		return vs[0].([]CSIPowerMaxSpecDriverSnapshotClass)[vs[1].(int)]
	}).(CSIPowerMaxSpecDriverSnapshotClassOutput)
}

// Parameters is a map of driver specific parameters for snapshot class
type CSIPowerMaxSpecDriverSnapshotClassParameters struct {
}

// CSIPowerMaxSpecDriverSnapshotClassParametersInput is an input type that accepts CSIPowerMaxSpecDriverSnapshotClassParametersArgs and CSIPowerMaxSpecDriverSnapshotClassParametersOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverSnapshotClassParametersInput` via:
//
//          CSIPowerMaxSpecDriverSnapshotClassParametersArgs{...}
type CSIPowerMaxSpecDriverSnapshotClassParametersInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverSnapshotClassParametersOutput() CSIPowerMaxSpecDriverSnapshotClassParametersOutput
	ToCSIPowerMaxSpecDriverSnapshotClassParametersOutputWithContext(context.Context) CSIPowerMaxSpecDriverSnapshotClassParametersOutput
}

// Parameters is a map of driver specific parameters for snapshot class
type CSIPowerMaxSpecDriverSnapshotClassParametersArgs struct {
}

func (CSIPowerMaxSpecDriverSnapshotClassParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverSnapshotClassParameters)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverSnapshotClassParametersArgs) ToCSIPowerMaxSpecDriverSnapshotClassParametersOutput() CSIPowerMaxSpecDriverSnapshotClassParametersOutput {
	return i.ToCSIPowerMaxSpecDriverSnapshotClassParametersOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverSnapshotClassParametersArgs) ToCSIPowerMaxSpecDriverSnapshotClassParametersOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSnapshotClassParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSnapshotClassParametersOutput)
}

// Parameters is a map of driver specific parameters for snapshot class
type CSIPowerMaxSpecDriverSnapshotClassParametersOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverSnapshotClassParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverSnapshotClassParameters)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverSnapshotClassParametersOutput) ToCSIPowerMaxSpecDriverSnapshotClassParametersOutput() CSIPowerMaxSpecDriverSnapshotClassParametersOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSnapshotClassParametersOutput) ToCSIPowerMaxSpecDriverSnapshotClassParametersOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSnapshotClassParametersOutput {
	return o
}

// StorageClass represents a kubernetes storage class
type CSIPowerMaxSpecDriverStorageClass struct {
	// AllowVolumeExpansion is a boolean flag which indicates if volumes can be expanded
	AllowVolumeExpansion *bool `pulumi:"allowVolumeExpansion"`
	// DefaultSc is a boolean flag to indicate if the storage class is going to be marked as default
	Default *bool `pulumi:"default"`
	// Name is the name of the StorageClass
	Name string `pulumi:"name"`
	// Parameters is a map of driver specific storage class
	Parameters map[string]string `pulumi:"parameters"`
	// ReclaimPolicy is the reclaim policy for the storage class
	ReclaimPolicy *string `pulumi:"reclaimPolicy"`
}

// CSIPowerMaxSpecDriverStorageClassInput is an input type that accepts CSIPowerMaxSpecDriverStorageClassArgs and CSIPowerMaxSpecDriverStorageClassOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverStorageClassInput` via:
//
//          CSIPowerMaxSpecDriverStorageClassArgs{...}
type CSIPowerMaxSpecDriverStorageClassInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverStorageClassOutput() CSIPowerMaxSpecDriverStorageClassOutput
	ToCSIPowerMaxSpecDriverStorageClassOutputWithContext(context.Context) CSIPowerMaxSpecDriverStorageClassOutput
}

// StorageClass represents a kubernetes storage class
type CSIPowerMaxSpecDriverStorageClassArgs struct {
	// AllowVolumeExpansion is a boolean flag which indicates if volumes can be expanded
	AllowVolumeExpansion pulumi.BoolPtrInput `pulumi:"allowVolumeExpansion"`
	// DefaultSc is a boolean flag to indicate if the storage class is going to be marked as default
	Default pulumi.BoolPtrInput `pulumi:"default"`
	// Name is the name of the StorageClass
	Name pulumi.StringInput `pulumi:"name"`
	// Parameters is a map of driver specific storage class
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
	// ReclaimPolicy is the reclaim policy for the storage class
	ReclaimPolicy pulumi.StringPtrInput `pulumi:"reclaimPolicy"`
}

func (CSIPowerMaxSpecDriverStorageClassArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverStorageClass)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverStorageClassArgs) ToCSIPowerMaxSpecDriverStorageClassOutput() CSIPowerMaxSpecDriverStorageClassOutput {
	return i.ToCSIPowerMaxSpecDriverStorageClassOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverStorageClassArgs) ToCSIPowerMaxSpecDriverStorageClassOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverStorageClassOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverStorageClassOutput)
}

// CSIPowerMaxSpecDriverStorageClassArrayInput is an input type that accepts CSIPowerMaxSpecDriverStorageClassArray and CSIPowerMaxSpecDriverStorageClassArrayOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverStorageClassArrayInput` via:
//
//          CSIPowerMaxSpecDriverStorageClassArray{ CSIPowerMaxSpecDriverStorageClassArgs{...} }
type CSIPowerMaxSpecDriverStorageClassArrayInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverStorageClassArrayOutput() CSIPowerMaxSpecDriverStorageClassArrayOutput
	ToCSIPowerMaxSpecDriverStorageClassArrayOutputWithContext(context.Context) CSIPowerMaxSpecDriverStorageClassArrayOutput
}

type CSIPowerMaxSpecDriverStorageClassArray []CSIPowerMaxSpecDriverStorageClassInput

func (CSIPowerMaxSpecDriverStorageClassArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxSpecDriverStorageClass)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverStorageClassArray) ToCSIPowerMaxSpecDriverStorageClassArrayOutput() CSIPowerMaxSpecDriverStorageClassArrayOutput {
	return i.ToCSIPowerMaxSpecDriverStorageClassArrayOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverStorageClassArray) ToCSIPowerMaxSpecDriverStorageClassArrayOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverStorageClassArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverStorageClassArrayOutput)
}

// StorageClass represents a kubernetes storage class
type CSIPowerMaxSpecDriverStorageClassOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverStorageClassOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverStorageClass)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverStorageClassOutput) ToCSIPowerMaxSpecDriverStorageClassOutput() CSIPowerMaxSpecDriverStorageClassOutput {
	return o
}

func (o CSIPowerMaxSpecDriverStorageClassOutput) ToCSIPowerMaxSpecDriverStorageClassOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverStorageClassOutput {
	return o
}

// AllowVolumeExpansion is a boolean flag which indicates if volumes can be expanded
func (o CSIPowerMaxSpecDriverStorageClassOutput) AllowVolumeExpansion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverStorageClass) *bool { return v.AllowVolumeExpansion }).(pulumi.BoolPtrOutput)
}

// DefaultSc is a boolean flag to indicate if the storage class is going to be marked as default
func (o CSIPowerMaxSpecDriverStorageClassOutput) Default() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverStorageClass) *bool { return v.Default }).(pulumi.BoolPtrOutput)
}

// Name is the name of the StorageClass
func (o CSIPowerMaxSpecDriverStorageClassOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverStorageClass) string { return v.Name }).(pulumi.StringOutput)
}

// Parameters is a map of driver specific storage class
func (o CSIPowerMaxSpecDriverStorageClassOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverStorageClass) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

// ReclaimPolicy is the reclaim policy for the storage class
func (o CSIPowerMaxSpecDriverStorageClassOutput) ReclaimPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverStorageClass) *string { return v.ReclaimPolicy }).(pulumi.StringPtrOutput)
}

type CSIPowerMaxSpecDriverStorageClassArrayOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverStorageClassArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxSpecDriverStorageClass)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverStorageClassArrayOutput) ToCSIPowerMaxSpecDriverStorageClassArrayOutput() CSIPowerMaxSpecDriverStorageClassArrayOutput {
	return o
}

func (o CSIPowerMaxSpecDriverStorageClassArrayOutput) ToCSIPowerMaxSpecDriverStorageClassArrayOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverStorageClassArrayOutput {
	return o
}

func (o CSIPowerMaxSpecDriverStorageClassArrayOutput) Index(i pulumi.IntInput) CSIPowerMaxSpecDriverStorageClassOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIPowerMaxSpecDriverStorageClass {
		return vs[0].([]CSIPowerMaxSpecDriverStorageClass)[vs[1].(int)]
	}).(CSIPowerMaxSpecDriverStorageClassOutput)
}

// Parameters is a map of driver specific storage class
type CSIPowerMaxSpecDriverStorageClassParameters struct {
}

// CSIPowerMaxSpecDriverStorageClassParametersInput is an input type that accepts CSIPowerMaxSpecDriverStorageClassParametersArgs and CSIPowerMaxSpecDriverStorageClassParametersOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverStorageClassParametersInput` via:
//
//          CSIPowerMaxSpecDriverStorageClassParametersArgs{...}
type CSIPowerMaxSpecDriverStorageClassParametersInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverStorageClassParametersOutput() CSIPowerMaxSpecDriverStorageClassParametersOutput
	ToCSIPowerMaxSpecDriverStorageClassParametersOutputWithContext(context.Context) CSIPowerMaxSpecDriverStorageClassParametersOutput
}

// Parameters is a map of driver specific storage class
type CSIPowerMaxSpecDriverStorageClassParametersArgs struct {
}

func (CSIPowerMaxSpecDriverStorageClassParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverStorageClassParameters)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverStorageClassParametersArgs) ToCSIPowerMaxSpecDriverStorageClassParametersOutput() CSIPowerMaxSpecDriverStorageClassParametersOutput {
	return i.ToCSIPowerMaxSpecDriverStorageClassParametersOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverStorageClassParametersArgs) ToCSIPowerMaxSpecDriverStorageClassParametersOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverStorageClassParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverStorageClassParametersOutput)
}

// Parameters is a map of driver specific storage class
type CSIPowerMaxSpecDriverStorageClassParametersOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverStorageClassParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverStorageClassParameters)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverStorageClassParametersOutput) ToCSIPowerMaxSpecDriverStorageClassParametersOutput() CSIPowerMaxSpecDriverStorageClassParametersOutput {
	return o
}

func (o CSIPowerMaxSpecDriverStorageClassParametersOutput) ToCSIPowerMaxSpecDriverStorageClassParametersOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverStorageClassParametersOutput {
	return o
}

// DriverStatus defines the observed state of CSIDriver
type CSIPowerMaxStatus struct {
	// ControllerStatus is the status of Controller pods
	ControllerStatus *CSIPowerMaxStatusControllerStatus `pulumi:"controllerStatus"`
	// DriverHash is a hash of the driver specification
	DriverHash *int `pulumi:"driverHash"`
	// LastUpdate is the last updated state of the driver
	LastUpdate *CSIPowerMaxStatusLastUpdate `pulumi:"lastUpdate"`
	// NodeStatus is the status of Controller pods
	NodeStatus *CSIPowerMaxStatusNodeStatus `pulumi:"nodeStatus"`
	// State is the state of the driver installation
	State *string `pulumi:"state"`
}

// CSIPowerMaxStatusInput is an input type that accepts CSIPowerMaxStatusArgs and CSIPowerMaxStatusOutput values.
// You can construct a concrete instance of `CSIPowerMaxStatusInput` via:
//
//          CSIPowerMaxStatusArgs{...}
type CSIPowerMaxStatusInput interface {
	pulumi.Input

	ToCSIPowerMaxStatusOutput() CSIPowerMaxStatusOutput
	ToCSIPowerMaxStatusOutputWithContext(context.Context) CSIPowerMaxStatusOutput
}

// DriverStatus defines the observed state of CSIDriver
type CSIPowerMaxStatusArgs struct {
	// ControllerStatus is the status of Controller pods
	ControllerStatus CSIPowerMaxStatusControllerStatusPtrInput `pulumi:"controllerStatus"`
	// DriverHash is a hash of the driver specification
	DriverHash pulumi.IntPtrInput `pulumi:"driverHash"`
	// LastUpdate is the last updated state of the driver
	LastUpdate CSIPowerMaxStatusLastUpdatePtrInput `pulumi:"lastUpdate"`
	// NodeStatus is the status of Controller pods
	NodeStatus CSIPowerMaxStatusNodeStatusPtrInput `pulumi:"nodeStatus"`
	// State is the state of the driver installation
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (CSIPowerMaxStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxStatus)(nil)).Elem()
}

func (i CSIPowerMaxStatusArgs) ToCSIPowerMaxStatusOutput() CSIPowerMaxStatusOutput {
	return i.ToCSIPowerMaxStatusOutputWithContext(context.Background())
}

func (i CSIPowerMaxStatusArgs) ToCSIPowerMaxStatusOutputWithContext(ctx context.Context) CSIPowerMaxStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxStatusOutput)
}

func (i CSIPowerMaxStatusArgs) ToCSIPowerMaxStatusPtrOutput() CSIPowerMaxStatusPtrOutput {
	return i.ToCSIPowerMaxStatusPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxStatusArgs) ToCSIPowerMaxStatusPtrOutputWithContext(ctx context.Context) CSIPowerMaxStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxStatusOutput).ToCSIPowerMaxStatusPtrOutputWithContext(ctx)
}

// CSIPowerMaxStatusPtrInput is an input type that accepts CSIPowerMaxStatusArgs, CSIPowerMaxStatusPtr and CSIPowerMaxStatusPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxStatusPtrInput` via:
//
//          CSIPowerMaxStatusArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxStatusPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxStatusPtrOutput() CSIPowerMaxStatusPtrOutput
	ToCSIPowerMaxStatusPtrOutputWithContext(context.Context) CSIPowerMaxStatusPtrOutput
}

type csipowerMaxStatusPtrType CSIPowerMaxStatusArgs

func CSIPowerMaxStatusPtr(v *CSIPowerMaxStatusArgs) CSIPowerMaxStatusPtrInput {
	return (*csipowerMaxStatusPtrType)(v)
}

func (*csipowerMaxStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxStatus)(nil)).Elem()
}

func (i *csipowerMaxStatusPtrType) ToCSIPowerMaxStatusPtrOutput() CSIPowerMaxStatusPtrOutput {
	return i.ToCSIPowerMaxStatusPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxStatusPtrType) ToCSIPowerMaxStatusPtrOutputWithContext(ctx context.Context) CSIPowerMaxStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxStatusPtrOutput)
}

// DriverStatus defines the observed state of CSIDriver
type CSIPowerMaxStatusOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxStatus)(nil)).Elem()
}

func (o CSIPowerMaxStatusOutput) ToCSIPowerMaxStatusOutput() CSIPowerMaxStatusOutput {
	return o
}

func (o CSIPowerMaxStatusOutput) ToCSIPowerMaxStatusOutputWithContext(ctx context.Context) CSIPowerMaxStatusOutput {
	return o
}

func (o CSIPowerMaxStatusOutput) ToCSIPowerMaxStatusPtrOutput() CSIPowerMaxStatusPtrOutput {
	return o.ToCSIPowerMaxStatusPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxStatusOutput) ToCSIPowerMaxStatusPtrOutputWithContext(ctx context.Context) CSIPowerMaxStatusPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxStatus) *CSIPowerMaxStatus {
		return &v
	}).(CSIPowerMaxStatusPtrOutput)
}

// ControllerStatus is the status of Controller pods
func (o CSIPowerMaxStatusOutput) ControllerStatus() CSIPowerMaxStatusControllerStatusPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxStatus) *CSIPowerMaxStatusControllerStatus { return v.ControllerStatus }).(CSIPowerMaxStatusControllerStatusPtrOutput)
}

// DriverHash is a hash of the driver specification
func (o CSIPowerMaxStatusOutput) DriverHash() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxStatus) *int { return v.DriverHash }).(pulumi.IntPtrOutput)
}

// LastUpdate is the last updated state of the driver
func (o CSIPowerMaxStatusOutput) LastUpdate() CSIPowerMaxStatusLastUpdatePtrOutput {
	return o.ApplyT(func(v CSIPowerMaxStatus) *CSIPowerMaxStatusLastUpdate { return v.LastUpdate }).(CSIPowerMaxStatusLastUpdatePtrOutput)
}

// NodeStatus is the status of Controller pods
func (o CSIPowerMaxStatusOutput) NodeStatus() CSIPowerMaxStatusNodeStatusPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxStatus) *CSIPowerMaxStatusNodeStatus { return v.NodeStatus }).(CSIPowerMaxStatusNodeStatusPtrOutput)
}

// State is the state of the driver installation
func (o CSIPowerMaxStatusOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxStatus) *string { return v.State }).(pulumi.StringPtrOutput)
}

type CSIPowerMaxStatusPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxStatus)(nil)).Elem()
}

func (o CSIPowerMaxStatusPtrOutput) ToCSIPowerMaxStatusPtrOutput() CSIPowerMaxStatusPtrOutput {
	return o
}

func (o CSIPowerMaxStatusPtrOutput) ToCSIPowerMaxStatusPtrOutputWithContext(ctx context.Context) CSIPowerMaxStatusPtrOutput {
	return o
}

func (o CSIPowerMaxStatusPtrOutput) Elem() CSIPowerMaxStatusOutput {
	return o.ApplyT(func(v *CSIPowerMaxStatus) CSIPowerMaxStatus { return *v }).(CSIPowerMaxStatusOutput)
}

// ControllerStatus is the status of Controller pods
func (o CSIPowerMaxStatusPtrOutput) ControllerStatus() CSIPowerMaxStatusControllerStatusPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxStatus) *CSIPowerMaxStatusControllerStatus {
		if v == nil {
			return nil
		}
		return v.ControllerStatus
	}).(CSIPowerMaxStatusControllerStatusPtrOutput)
}

// DriverHash is a hash of the driver specification
func (o CSIPowerMaxStatusPtrOutput) DriverHash() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxStatus) *int {
		if v == nil {
			return nil
		}
		return v.DriverHash
	}).(pulumi.IntPtrOutput)
}

// LastUpdate is the last updated state of the driver
func (o CSIPowerMaxStatusPtrOutput) LastUpdate() CSIPowerMaxStatusLastUpdatePtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxStatus) *CSIPowerMaxStatusLastUpdate {
		if v == nil {
			return nil
		}
		return v.LastUpdate
	}).(CSIPowerMaxStatusLastUpdatePtrOutput)
}

// NodeStatus is the status of Controller pods
func (o CSIPowerMaxStatusPtrOutput) NodeStatus() CSIPowerMaxStatusNodeStatusPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxStatus) *CSIPowerMaxStatusNodeStatus {
		if v == nil {
			return nil
		}
		return v.NodeStatus
	}).(CSIPowerMaxStatusNodeStatusPtrOutput)
}

// State is the state of the driver installation
func (o CSIPowerMaxStatusPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxStatus) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// ControllerStatus is the status of Controller pods
type CSIPowerMaxStatusControllerStatus struct {
	Available []string `pulumi:"available"`
	Ready     []string `pulumi:"ready"`
	Starting  []string `pulumi:"starting"`
	Stopped   []string `pulumi:"stopped"`
}

// CSIPowerMaxStatusControllerStatusInput is an input type that accepts CSIPowerMaxStatusControllerStatusArgs and CSIPowerMaxStatusControllerStatusOutput values.
// You can construct a concrete instance of `CSIPowerMaxStatusControllerStatusInput` via:
//
//          CSIPowerMaxStatusControllerStatusArgs{...}
type CSIPowerMaxStatusControllerStatusInput interface {
	pulumi.Input

	ToCSIPowerMaxStatusControllerStatusOutput() CSIPowerMaxStatusControllerStatusOutput
	ToCSIPowerMaxStatusControllerStatusOutputWithContext(context.Context) CSIPowerMaxStatusControllerStatusOutput
}

// ControllerStatus is the status of Controller pods
type CSIPowerMaxStatusControllerStatusArgs struct {
	Available pulumi.StringArrayInput `pulumi:"available"`
	Ready     pulumi.StringArrayInput `pulumi:"ready"`
	Starting  pulumi.StringArrayInput `pulumi:"starting"`
	Stopped   pulumi.StringArrayInput `pulumi:"stopped"`
}

func (CSIPowerMaxStatusControllerStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxStatusControllerStatus)(nil)).Elem()
}

func (i CSIPowerMaxStatusControllerStatusArgs) ToCSIPowerMaxStatusControllerStatusOutput() CSIPowerMaxStatusControllerStatusOutput {
	return i.ToCSIPowerMaxStatusControllerStatusOutputWithContext(context.Background())
}

func (i CSIPowerMaxStatusControllerStatusArgs) ToCSIPowerMaxStatusControllerStatusOutputWithContext(ctx context.Context) CSIPowerMaxStatusControllerStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxStatusControllerStatusOutput)
}

func (i CSIPowerMaxStatusControllerStatusArgs) ToCSIPowerMaxStatusControllerStatusPtrOutput() CSIPowerMaxStatusControllerStatusPtrOutput {
	return i.ToCSIPowerMaxStatusControllerStatusPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxStatusControllerStatusArgs) ToCSIPowerMaxStatusControllerStatusPtrOutputWithContext(ctx context.Context) CSIPowerMaxStatusControllerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxStatusControllerStatusOutput).ToCSIPowerMaxStatusControllerStatusPtrOutputWithContext(ctx)
}

// CSIPowerMaxStatusControllerStatusPtrInput is an input type that accepts CSIPowerMaxStatusControllerStatusArgs, CSIPowerMaxStatusControllerStatusPtr and CSIPowerMaxStatusControllerStatusPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxStatusControllerStatusPtrInput` via:
//
//          CSIPowerMaxStatusControllerStatusArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxStatusControllerStatusPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxStatusControllerStatusPtrOutput() CSIPowerMaxStatusControllerStatusPtrOutput
	ToCSIPowerMaxStatusControllerStatusPtrOutputWithContext(context.Context) CSIPowerMaxStatusControllerStatusPtrOutput
}

type csipowerMaxStatusControllerStatusPtrType CSIPowerMaxStatusControllerStatusArgs

func CSIPowerMaxStatusControllerStatusPtr(v *CSIPowerMaxStatusControllerStatusArgs) CSIPowerMaxStatusControllerStatusPtrInput {
	return (*csipowerMaxStatusControllerStatusPtrType)(v)
}

func (*csipowerMaxStatusControllerStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxStatusControllerStatus)(nil)).Elem()
}

func (i *csipowerMaxStatusControllerStatusPtrType) ToCSIPowerMaxStatusControllerStatusPtrOutput() CSIPowerMaxStatusControllerStatusPtrOutput {
	return i.ToCSIPowerMaxStatusControllerStatusPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxStatusControllerStatusPtrType) ToCSIPowerMaxStatusControllerStatusPtrOutputWithContext(ctx context.Context) CSIPowerMaxStatusControllerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxStatusControllerStatusPtrOutput)
}

// ControllerStatus is the status of Controller pods
type CSIPowerMaxStatusControllerStatusOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxStatusControllerStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxStatusControllerStatus)(nil)).Elem()
}

func (o CSIPowerMaxStatusControllerStatusOutput) ToCSIPowerMaxStatusControllerStatusOutput() CSIPowerMaxStatusControllerStatusOutput {
	return o
}

func (o CSIPowerMaxStatusControllerStatusOutput) ToCSIPowerMaxStatusControllerStatusOutputWithContext(ctx context.Context) CSIPowerMaxStatusControllerStatusOutput {
	return o
}

func (o CSIPowerMaxStatusControllerStatusOutput) ToCSIPowerMaxStatusControllerStatusPtrOutput() CSIPowerMaxStatusControllerStatusPtrOutput {
	return o.ToCSIPowerMaxStatusControllerStatusPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxStatusControllerStatusOutput) ToCSIPowerMaxStatusControllerStatusPtrOutputWithContext(ctx context.Context) CSIPowerMaxStatusControllerStatusPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxStatusControllerStatus) *CSIPowerMaxStatusControllerStatus {
		return &v
	}).(CSIPowerMaxStatusControllerStatusPtrOutput)
}
func (o CSIPowerMaxStatusControllerStatusOutput) Available() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxStatusControllerStatus) []string { return v.Available }).(pulumi.StringArrayOutput)
}

func (o CSIPowerMaxStatusControllerStatusOutput) Ready() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxStatusControllerStatus) []string { return v.Ready }).(pulumi.StringArrayOutput)
}

func (o CSIPowerMaxStatusControllerStatusOutput) Starting() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxStatusControllerStatus) []string { return v.Starting }).(pulumi.StringArrayOutput)
}

func (o CSIPowerMaxStatusControllerStatusOutput) Stopped() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxStatusControllerStatus) []string { return v.Stopped }).(pulumi.StringArrayOutput)
}

type CSIPowerMaxStatusControllerStatusPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxStatusControllerStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxStatusControllerStatus)(nil)).Elem()
}

func (o CSIPowerMaxStatusControllerStatusPtrOutput) ToCSIPowerMaxStatusControllerStatusPtrOutput() CSIPowerMaxStatusControllerStatusPtrOutput {
	return o
}

func (o CSIPowerMaxStatusControllerStatusPtrOutput) ToCSIPowerMaxStatusControllerStatusPtrOutputWithContext(ctx context.Context) CSIPowerMaxStatusControllerStatusPtrOutput {
	return o
}

func (o CSIPowerMaxStatusControllerStatusPtrOutput) Elem() CSIPowerMaxStatusControllerStatusOutput {
	return o.ApplyT(func(v *CSIPowerMaxStatusControllerStatus) CSIPowerMaxStatusControllerStatus { return *v }).(CSIPowerMaxStatusControllerStatusOutput)
}

func (o CSIPowerMaxStatusControllerStatusPtrOutput) Available() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIPowerMaxStatusControllerStatus) []string {
		if v == nil {
			return nil
		}
		return v.Available
	}).(pulumi.StringArrayOutput)
}

func (o CSIPowerMaxStatusControllerStatusPtrOutput) Ready() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIPowerMaxStatusControllerStatus) []string {
		if v == nil {
			return nil
		}
		return v.Ready
	}).(pulumi.StringArrayOutput)
}

func (o CSIPowerMaxStatusControllerStatusPtrOutput) Starting() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIPowerMaxStatusControllerStatus) []string {
		if v == nil {
			return nil
		}
		return v.Starting
	}).(pulumi.StringArrayOutput)
}

func (o CSIPowerMaxStatusControllerStatusPtrOutput) Stopped() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIPowerMaxStatusControllerStatus) []string {
		if v == nil {
			return nil
		}
		return v.Stopped
	}).(pulumi.StringArrayOutput)
}

// LastUpdate is the last updated state of the driver
type CSIPowerMaxStatusLastUpdate struct {
	// Condition is the last known condition of the Custom Resource
	Condition *string `pulumi:"condition"`
	// ErrorMessage is the last error message associated with the condition
	ErrorMessage *string `pulumi:"errorMessage"`
	// Time is the time stamp for the last condition update
	Time *string `pulumi:"time"`
}

// CSIPowerMaxStatusLastUpdateInput is an input type that accepts CSIPowerMaxStatusLastUpdateArgs and CSIPowerMaxStatusLastUpdateOutput values.
// You can construct a concrete instance of `CSIPowerMaxStatusLastUpdateInput` via:
//
//          CSIPowerMaxStatusLastUpdateArgs{...}
type CSIPowerMaxStatusLastUpdateInput interface {
	pulumi.Input

	ToCSIPowerMaxStatusLastUpdateOutput() CSIPowerMaxStatusLastUpdateOutput
	ToCSIPowerMaxStatusLastUpdateOutputWithContext(context.Context) CSIPowerMaxStatusLastUpdateOutput
}

// LastUpdate is the last updated state of the driver
type CSIPowerMaxStatusLastUpdateArgs struct {
	// Condition is the last known condition of the Custom Resource
	Condition pulumi.StringPtrInput `pulumi:"condition"`
	// ErrorMessage is the last error message associated with the condition
	ErrorMessage pulumi.StringPtrInput `pulumi:"errorMessage"`
	// Time is the time stamp for the last condition update
	Time pulumi.StringPtrInput `pulumi:"time"`
}

func (CSIPowerMaxStatusLastUpdateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxStatusLastUpdate)(nil)).Elem()
}

func (i CSIPowerMaxStatusLastUpdateArgs) ToCSIPowerMaxStatusLastUpdateOutput() CSIPowerMaxStatusLastUpdateOutput {
	return i.ToCSIPowerMaxStatusLastUpdateOutputWithContext(context.Background())
}

func (i CSIPowerMaxStatusLastUpdateArgs) ToCSIPowerMaxStatusLastUpdateOutputWithContext(ctx context.Context) CSIPowerMaxStatusLastUpdateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxStatusLastUpdateOutput)
}

func (i CSIPowerMaxStatusLastUpdateArgs) ToCSIPowerMaxStatusLastUpdatePtrOutput() CSIPowerMaxStatusLastUpdatePtrOutput {
	return i.ToCSIPowerMaxStatusLastUpdatePtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxStatusLastUpdateArgs) ToCSIPowerMaxStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIPowerMaxStatusLastUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxStatusLastUpdateOutput).ToCSIPowerMaxStatusLastUpdatePtrOutputWithContext(ctx)
}

// CSIPowerMaxStatusLastUpdatePtrInput is an input type that accepts CSIPowerMaxStatusLastUpdateArgs, CSIPowerMaxStatusLastUpdatePtr and CSIPowerMaxStatusLastUpdatePtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxStatusLastUpdatePtrInput` via:
//
//          CSIPowerMaxStatusLastUpdateArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxStatusLastUpdatePtrInput interface {
	pulumi.Input

	ToCSIPowerMaxStatusLastUpdatePtrOutput() CSIPowerMaxStatusLastUpdatePtrOutput
	ToCSIPowerMaxStatusLastUpdatePtrOutputWithContext(context.Context) CSIPowerMaxStatusLastUpdatePtrOutput
}

type csipowerMaxStatusLastUpdatePtrType CSIPowerMaxStatusLastUpdateArgs

func CSIPowerMaxStatusLastUpdatePtr(v *CSIPowerMaxStatusLastUpdateArgs) CSIPowerMaxStatusLastUpdatePtrInput {
	return (*csipowerMaxStatusLastUpdatePtrType)(v)
}

func (*csipowerMaxStatusLastUpdatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxStatusLastUpdate)(nil)).Elem()
}

func (i *csipowerMaxStatusLastUpdatePtrType) ToCSIPowerMaxStatusLastUpdatePtrOutput() CSIPowerMaxStatusLastUpdatePtrOutput {
	return i.ToCSIPowerMaxStatusLastUpdatePtrOutputWithContext(context.Background())
}

func (i *csipowerMaxStatusLastUpdatePtrType) ToCSIPowerMaxStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIPowerMaxStatusLastUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxStatusLastUpdatePtrOutput)
}

// LastUpdate is the last updated state of the driver
type CSIPowerMaxStatusLastUpdateOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxStatusLastUpdateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxStatusLastUpdate)(nil)).Elem()
}

func (o CSIPowerMaxStatusLastUpdateOutput) ToCSIPowerMaxStatusLastUpdateOutput() CSIPowerMaxStatusLastUpdateOutput {
	return o
}

func (o CSIPowerMaxStatusLastUpdateOutput) ToCSIPowerMaxStatusLastUpdateOutputWithContext(ctx context.Context) CSIPowerMaxStatusLastUpdateOutput {
	return o
}

func (o CSIPowerMaxStatusLastUpdateOutput) ToCSIPowerMaxStatusLastUpdatePtrOutput() CSIPowerMaxStatusLastUpdatePtrOutput {
	return o.ToCSIPowerMaxStatusLastUpdatePtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxStatusLastUpdateOutput) ToCSIPowerMaxStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIPowerMaxStatusLastUpdatePtrOutput {
	return o.ApplyT(func(v CSIPowerMaxStatusLastUpdate) *CSIPowerMaxStatusLastUpdate {
		return &v
	}).(CSIPowerMaxStatusLastUpdatePtrOutput)
}

// Condition is the last known condition of the Custom Resource
func (o CSIPowerMaxStatusLastUpdateOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxStatusLastUpdate) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

// ErrorMessage is the last error message associated with the condition
func (o CSIPowerMaxStatusLastUpdateOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxStatusLastUpdate) *string { return v.ErrorMessage }).(pulumi.StringPtrOutput)
}

// Time is the time stamp for the last condition update
func (o CSIPowerMaxStatusLastUpdateOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxStatusLastUpdate) *string { return v.Time }).(pulumi.StringPtrOutput)
}

type CSIPowerMaxStatusLastUpdatePtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxStatusLastUpdatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxStatusLastUpdate)(nil)).Elem()
}

func (o CSIPowerMaxStatusLastUpdatePtrOutput) ToCSIPowerMaxStatusLastUpdatePtrOutput() CSIPowerMaxStatusLastUpdatePtrOutput {
	return o
}

func (o CSIPowerMaxStatusLastUpdatePtrOutput) ToCSIPowerMaxStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIPowerMaxStatusLastUpdatePtrOutput {
	return o
}

func (o CSIPowerMaxStatusLastUpdatePtrOutput) Elem() CSIPowerMaxStatusLastUpdateOutput {
	return o.ApplyT(func(v *CSIPowerMaxStatusLastUpdate) CSIPowerMaxStatusLastUpdate { return *v }).(CSIPowerMaxStatusLastUpdateOutput)
}

// Condition is the last known condition of the Custom Resource
func (o CSIPowerMaxStatusLastUpdatePtrOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxStatusLastUpdate) *string {
		if v == nil {
			return nil
		}
		return v.Condition
	}).(pulumi.StringPtrOutput)
}

// ErrorMessage is the last error message associated with the condition
func (o CSIPowerMaxStatusLastUpdatePtrOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxStatusLastUpdate) *string {
		if v == nil {
			return nil
		}
		return v.ErrorMessage
	}).(pulumi.StringPtrOutput)
}

// Time is the time stamp for the last condition update
func (o CSIPowerMaxStatusLastUpdatePtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxStatusLastUpdate) *string {
		if v == nil {
			return nil
		}
		return v.Time
	}).(pulumi.StringPtrOutput)
}

// NodeStatus is the status of Controller pods
type CSIPowerMaxStatusNodeStatus struct {
	Available []string `pulumi:"available"`
	Ready     []string `pulumi:"ready"`
	Starting  []string `pulumi:"starting"`
	Stopped   []string `pulumi:"stopped"`
}

// CSIPowerMaxStatusNodeStatusInput is an input type that accepts CSIPowerMaxStatusNodeStatusArgs and CSIPowerMaxStatusNodeStatusOutput values.
// You can construct a concrete instance of `CSIPowerMaxStatusNodeStatusInput` via:
//
//          CSIPowerMaxStatusNodeStatusArgs{...}
type CSIPowerMaxStatusNodeStatusInput interface {
	pulumi.Input

	ToCSIPowerMaxStatusNodeStatusOutput() CSIPowerMaxStatusNodeStatusOutput
	ToCSIPowerMaxStatusNodeStatusOutputWithContext(context.Context) CSIPowerMaxStatusNodeStatusOutput
}

// NodeStatus is the status of Controller pods
type CSIPowerMaxStatusNodeStatusArgs struct {
	Available pulumi.StringArrayInput `pulumi:"available"`
	Ready     pulumi.StringArrayInput `pulumi:"ready"`
	Starting  pulumi.StringArrayInput `pulumi:"starting"`
	Stopped   pulumi.StringArrayInput `pulumi:"stopped"`
}

func (CSIPowerMaxStatusNodeStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxStatusNodeStatus)(nil)).Elem()
}

func (i CSIPowerMaxStatusNodeStatusArgs) ToCSIPowerMaxStatusNodeStatusOutput() CSIPowerMaxStatusNodeStatusOutput {
	return i.ToCSIPowerMaxStatusNodeStatusOutputWithContext(context.Background())
}

func (i CSIPowerMaxStatusNodeStatusArgs) ToCSIPowerMaxStatusNodeStatusOutputWithContext(ctx context.Context) CSIPowerMaxStatusNodeStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxStatusNodeStatusOutput)
}

func (i CSIPowerMaxStatusNodeStatusArgs) ToCSIPowerMaxStatusNodeStatusPtrOutput() CSIPowerMaxStatusNodeStatusPtrOutput {
	return i.ToCSIPowerMaxStatusNodeStatusPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxStatusNodeStatusArgs) ToCSIPowerMaxStatusNodeStatusPtrOutputWithContext(ctx context.Context) CSIPowerMaxStatusNodeStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxStatusNodeStatusOutput).ToCSIPowerMaxStatusNodeStatusPtrOutputWithContext(ctx)
}

// CSIPowerMaxStatusNodeStatusPtrInput is an input type that accepts CSIPowerMaxStatusNodeStatusArgs, CSIPowerMaxStatusNodeStatusPtr and CSIPowerMaxStatusNodeStatusPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxStatusNodeStatusPtrInput` via:
//
//          CSIPowerMaxStatusNodeStatusArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxStatusNodeStatusPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxStatusNodeStatusPtrOutput() CSIPowerMaxStatusNodeStatusPtrOutput
	ToCSIPowerMaxStatusNodeStatusPtrOutputWithContext(context.Context) CSIPowerMaxStatusNodeStatusPtrOutput
}

type csipowerMaxStatusNodeStatusPtrType CSIPowerMaxStatusNodeStatusArgs

func CSIPowerMaxStatusNodeStatusPtr(v *CSIPowerMaxStatusNodeStatusArgs) CSIPowerMaxStatusNodeStatusPtrInput {
	return (*csipowerMaxStatusNodeStatusPtrType)(v)
}

func (*csipowerMaxStatusNodeStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxStatusNodeStatus)(nil)).Elem()
}

func (i *csipowerMaxStatusNodeStatusPtrType) ToCSIPowerMaxStatusNodeStatusPtrOutput() CSIPowerMaxStatusNodeStatusPtrOutput {
	return i.ToCSIPowerMaxStatusNodeStatusPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxStatusNodeStatusPtrType) ToCSIPowerMaxStatusNodeStatusPtrOutputWithContext(ctx context.Context) CSIPowerMaxStatusNodeStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxStatusNodeStatusPtrOutput)
}

// NodeStatus is the status of Controller pods
type CSIPowerMaxStatusNodeStatusOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxStatusNodeStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxStatusNodeStatus)(nil)).Elem()
}

func (o CSIPowerMaxStatusNodeStatusOutput) ToCSIPowerMaxStatusNodeStatusOutput() CSIPowerMaxStatusNodeStatusOutput {
	return o
}

func (o CSIPowerMaxStatusNodeStatusOutput) ToCSIPowerMaxStatusNodeStatusOutputWithContext(ctx context.Context) CSIPowerMaxStatusNodeStatusOutput {
	return o
}

func (o CSIPowerMaxStatusNodeStatusOutput) ToCSIPowerMaxStatusNodeStatusPtrOutput() CSIPowerMaxStatusNodeStatusPtrOutput {
	return o.ToCSIPowerMaxStatusNodeStatusPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxStatusNodeStatusOutput) ToCSIPowerMaxStatusNodeStatusPtrOutputWithContext(ctx context.Context) CSIPowerMaxStatusNodeStatusPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxStatusNodeStatus) *CSIPowerMaxStatusNodeStatus {
		return &v
	}).(CSIPowerMaxStatusNodeStatusPtrOutput)
}
func (o CSIPowerMaxStatusNodeStatusOutput) Available() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxStatusNodeStatus) []string { return v.Available }).(pulumi.StringArrayOutput)
}

func (o CSIPowerMaxStatusNodeStatusOutput) Ready() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxStatusNodeStatus) []string { return v.Ready }).(pulumi.StringArrayOutput)
}

func (o CSIPowerMaxStatusNodeStatusOutput) Starting() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxStatusNodeStatus) []string { return v.Starting }).(pulumi.StringArrayOutput)
}

func (o CSIPowerMaxStatusNodeStatusOutput) Stopped() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxStatusNodeStatus) []string { return v.Stopped }).(pulumi.StringArrayOutput)
}

type CSIPowerMaxStatusNodeStatusPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxStatusNodeStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxStatusNodeStatus)(nil)).Elem()
}

func (o CSIPowerMaxStatusNodeStatusPtrOutput) ToCSIPowerMaxStatusNodeStatusPtrOutput() CSIPowerMaxStatusNodeStatusPtrOutput {
	return o
}

func (o CSIPowerMaxStatusNodeStatusPtrOutput) ToCSIPowerMaxStatusNodeStatusPtrOutputWithContext(ctx context.Context) CSIPowerMaxStatusNodeStatusPtrOutput {
	return o
}

func (o CSIPowerMaxStatusNodeStatusPtrOutput) Elem() CSIPowerMaxStatusNodeStatusOutput {
	return o.ApplyT(func(v *CSIPowerMaxStatusNodeStatus) CSIPowerMaxStatusNodeStatus { return *v }).(CSIPowerMaxStatusNodeStatusOutput)
}

func (o CSIPowerMaxStatusNodeStatusPtrOutput) Available() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIPowerMaxStatusNodeStatus) []string {
		if v == nil {
			return nil
		}
		return v.Available
	}).(pulumi.StringArrayOutput)
}

func (o CSIPowerMaxStatusNodeStatusPtrOutput) Ready() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIPowerMaxStatusNodeStatus) []string {
		if v == nil {
			return nil
		}
		return v.Ready
	}).(pulumi.StringArrayOutput)
}

func (o CSIPowerMaxStatusNodeStatusPtrOutput) Starting() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIPowerMaxStatusNodeStatus) []string {
		if v == nil {
			return nil
		}
		return v.Starting
	}).(pulumi.StringArrayOutput)
}

func (o CSIPowerMaxStatusNodeStatusPtrOutput) Stopped() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIPowerMaxStatusNodeStatus) []string {
		if v == nil {
			return nil
		}
		return v.Stopped
	}).(pulumi.StringArrayOutput)
}

// CSIUnity is the Schema for the csiunities API
type CSIUnityType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// CSIUnitySpec defines the desired state of CSIUnity
	Spec *CSIUnitySpec `pulumi:"spec"`
	// DriverStatus defines the observed state of CSIDriver
	Status *CSIUnityStatus `pulumi:"status"`
}

// CSIUnityTypeInput is an input type that accepts CSIUnityTypeArgs and CSIUnityTypeOutput values.
// You can construct a concrete instance of `CSIUnityTypeInput` via:
//
//          CSIUnityTypeArgs{...}
type CSIUnityTypeInput interface {
	pulumi.Input

	ToCSIUnityTypeOutput() CSIUnityTypeOutput
	ToCSIUnityTypeOutputWithContext(context.Context) CSIUnityTypeOutput
}

// CSIUnity is the Schema for the csiunities API
type CSIUnityTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// CSIUnitySpec defines the desired state of CSIUnity
	Spec CSIUnitySpecPtrInput `pulumi:"spec"`
	// DriverStatus defines the observed state of CSIDriver
	Status CSIUnityStatusPtrInput `pulumi:"status"`
}

func (CSIUnityTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnityType)(nil)).Elem()
}

func (i CSIUnityTypeArgs) ToCSIUnityTypeOutput() CSIUnityTypeOutput {
	return i.ToCSIUnityTypeOutputWithContext(context.Background())
}

func (i CSIUnityTypeArgs) ToCSIUnityTypeOutputWithContext(ctx context.Context) CSIUnityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnityTypeOutput)
}

// CSIUnity is the Schema for the csiunities API
type CSIUnityTypeOutput struct{ *pulumi.OutputState }

func (CSIUnityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnityType)(nil)).Elem()
}

func (o CSIUnityTypeOutput) ToCSIUnityTypeOutput() CSIUnityTypeOutput {
	return o
}

func (o CSIUnityTypeOutput) ToCSIUnityTypeOutputWithContext(ctx context.Context) CSIUnityTypeOutput {
	return o
}

func (o CSIUnityTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnityType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o CSIUnityTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnityType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o CSIUnityTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v CSIUnityType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// CSIUnitySpec defines the desired state of CSIUnity
func (o CSIUnityTypeOutput) Spec() CSIUnitySpecPtrOutput {
	return o.ApplyT(func(v CSIUnityType) *CSIUnitySpec { return v.Spec }).(CSIUnitySpecPtrOutput)
}

// DriverStatus defines the observed state of CSIDriver
func (o CSIUnityTypeOutput) Status() CSIUnityStatusPtrOutput {
	return o.ApplyT(func(v CSIUnityType) *CSIUnityStatus { return v.Status }).(CSIUnityStatusPtrOutput)
}

type CSIUnityMetadata struct {
}

// CSIUnityMetadataInput is an input type that accepts CSIUnityMetadataArgs and CSIUnityMetadataOutput values.
// You can construct a concrete instance of `CSIUnityMetadataInput` via:
//
//          CSIUnityMetadataArgs{...}
type CSIUnityMetadataInput interface {
	pulumi.Input

	ToCSIUnityMetadataOutput() CSIUnityMetadataOutput
	ToCSIUnityMetadataOutputWithContext(context.Context) CSIUnityMetadataOutput
}

type CSIUnityMetadataArgs struct {
}

func (CSIUnityMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnityMetadata)(nil)).Elem()
}

func (i CSIUnityMetadataArgs) ToCSIUnityMetadataOutput() CSIUnityMetadataOutput {
	return i.ToCSIUnityMetadataOutputWithContext(context.Background())
}

func (i CSIUnityMetadataArgs) ToCSIUnityMetadataOutputWithContext(ctx context.Context) CSIUnityMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnityMetadataOutput)
}

type CSIUnityMetadataOutput struct{ *pulumi.OutputState }

func (CSIUnityMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnityMetadata)(nil)).Elem()
}

func (o CSIUnityMetadataOutput) ToCSIUnityMetadataOutput() CSIUnityMetadataOutput {
	return o
}

func (o CSIUnityMetadataOutput) ToCSIUnityMetadataOutputWithContext(ctx context.Context) CSIUnityMetadataOutput {
	return o
}

// CSIUnitySpec defines the desired state of CSIUnity
type CSIUnitySpec struct {
	// Driver is the specification for the CSI Unity Driver
	Driver CSIUnitySpecDriver `pulumi:"driver"`
}

// CSIUnitySpecInput is an input type that accepts CSIUnitySpecArgs and CSIUnitySpecOutput values.
// You can construct a concrete instance of `CSIUnitySpecInput` via:
//
//          CSIUnitySpecArgs{...}
type CSIUnitySpecInput interface {
	pulumi.Input

	ToCSIUnitySpecOutput() CSIUnitySpecOutput
	ToCSIUnitySpecOutputWithContext(context.Context) CSIUnitySpecOutput
}

// CSIUnitySpec defines the desired state of CSIUnity
type CSIUnitySpecArgs struct {
	// Driver is the specification for the CSI Unity Driver
	Driver CSIUnitySpecDriverInput `pulumi:"driver"`
}

func (CSIUnitySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpec)(nil)).Elem()
}

func (i CSIUnitySpecArgs) ToCSIUnitySpecOutput() CSIUnitySpecOutput {
	return i.ToCSIUnitySpecOutputWithContext(context.Background())
}

func (i CSIUnitySpecArgs) ToCSIUnitySpecOutputWithContext(ctx context.Context) CSIUnitySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecOutput)
}

func (i CSIUnitySpecArgs) ToCSIUnitySpecPtrOutput() CSIUnitySpecPtrOutput {
	return i.ToCSIUnitySpecPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecArgs) ToCSIUnitySpecPtrOutputWithContext(ctx context.Context) CSIUnitySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecOutput).ToCSIUnitySpecPtrOutputWithContext(ctx)
}

// CSIUnitySpecPtrInput is an input type that accepts CSIUnitySpecArgs, CSIUnitySpecPtr and CSIUnitySpecPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecPtrInput` via:
//
//          CSIUnitySpecArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecPtrOutput() CSIUnitySpecPtrOutput
	ToCSIUnitySpecPtrOutputWithContext(context.Context) CSIUnitySpecPtrOutput
}

type csiunitySpecPtrType CSIUnitySpecArgs

func CSIUnitySpecPtr(v *CSIUnitySpecArgs) CSIUnitySpecPtrInput {
	return (*csiunitySpecPtrType)(v)
}

func (*csiunitySpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpec)(nil)).Elem()
}

func (i *csiunitySpecPtrType) ToCSIUnitySpecPtrOutput() CSIUnitySpecPtrOutput {
	return i.ToCSIUnitySpecPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecPtrType) ToCSIUnitySpecPtrOutputWithContext(ctx context.Context) CSIUnitySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecPtrOutput)
}

// CSIUnitySpec defines the desired state of CSIUnity
type CSIUnitySpecOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpec)(nil)).Elem()
}

func (o CSIUnitySpecOutput) ToCSIUnitySpecOutput() CSIUnitySpecOutput {
	return o
}

func (o CSIUnitySpecOutput) ToCSIUnitySpecOutputWithContext(ctx context.Context) CSIUnitySpecOutput {
	return o
}

func (o CSIUnitySpecOutput) ToCSIUnitySpecPtrOutput() CSIUnitySpecPtrOutput {
	return o.ToCSIUnitySpecPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecOutput) ToCSIUnitySpecPtrOutputWithContext(ctx context.Context) CSIUnitySpecPtrOutput {
	return o.ApplyT(func(v CSIUnitySpec) *CSIUnitySpec {
		return &v
	}).(CSIUnitySpecPtrOutput)
}

// Driver is the specification for the CSI Unity Driver
func (o CSIUnitySpecOutput) Driver() CSIUnitySpecDriverOutput {
	return o.ApplyT(func(v CSIUnitySpec) CSIUnitySpecDriver { return v.Driver }).(CSIUnitySpecDriverOutput)
}

type CSIUnitySpecPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpec)(nil)).Elem()
}

func (o CSIUnitySpecPtrOutput) ToCSIUnitySpecPtrOutput() CSIUnitySpecPtrOutput {
	return o
}

func (o CSIUnitySpecPtrOutput) ToCSIUnitySpecPtrOutputWithContext(ctx context.Context) CSIUnitySpecPtrOutput {
	return o
}

func (o CSIUnitySpecPtrOutput) Elem() CSIUnitySpecOutput {
	return o.ApplyT(func(v *CSIUnitySpec) CSIUnitySpec { return *v }).(CSIUnitySpecOutput)
}

// Driver is the specification for the CSI Unity Driver
func (o CSIUnitySpecPtrOutput) Driver() CSIUnitySpecDriverPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpec) *CSIUnitySpecDriver {
		if v == nil {
			return nil
		}
		return &v.Driver
	}).(CSIUnitySpecDriverPtrOutput)
}

// Driver is the specification for the CSI Unity Driver
type CSIUnitySpecDriver struct {
	// AuthSecret is the name of the credentials secret for the driver
	AuthSecret *string `pulumi:"authSecret"`
	// Common is the common specification for both controller and node plugins
	Common CSIUnitySpecDriverCommon `pulumi:"common"`
	// ConfigVersion is the configuration version of the driver
	ConfigVersion string `pulumi:"configVersion"`
	// Controller is the specification for Controller plugin only
	Controller *CSIUnitySpecDriverController `pulumi:"controller"`
	// ForceUpdate is the boolean flag used to force an update of the driver instance
	ForceUpdate *bool `pulumi:"forceUpdate"`
	// Node is the specification for Node plugin only
	Node *CSIUnitySpecDriverNode `pulumi:"node"`
	// Replicas is the count of controllers for Controller plugin
	Replicas int `pulumi:"replicas"`
	// SideCars is the specification for CSI sidecar containers
	SideCars []CSIUnitySpecDriverSideCars `pulumi:"sideCars"`
	// SnapshotClass is the specification for Snapshot Classes
	SnapshotClass []CSIUnitySpecDriverSnapshotClass `pulumi:"snapshotClass"`
	// StorageClass is the specification for Storage Classes
	StorageClass []CSIUnitySpecDriverStorageClass `pulumi:"storageClass"`
	// TLSCertSecret is the name of the TLS Cert secret
	TlsCertSecret *string `pulumi:"tlsCertSecret"`
}

// CSIUnitySpecDriverInput is an input type that accepts CSIUnitySpecDriverArgs and CSIUnitySpecDriverOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverInput` via:
//
//          CSIUnitySpecDriverArgs{...}
type CSIUnitySpecDriverInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverOutput() CSIUnitySpecDriverOutput
	ToCSIUnitySpecDriverOutputWithContext(context.Context) CSIUnitySpecDriverOutput
}

// Driver is the specification for the CSI Unity Driver
type CSIUnitySpecDriverArgs struct {
	// AuthSecret is the name of the credentials secret for the driver
	AuthSecret pulumi.StringPtrInput `pulumi:"authSecret"`
	// Common is the common specification for both controller and node plugins
	Common CSIUnitySpecDriverCommonInput `pulumi:"common"`
	// ConfigVersion is the configuration version of the driver
	ConfigVersion pulumi.StringInput `pulumi:"configVersion"`
	// Controller is the specification for Controller plugin only
	Controller CSIUnitySpecDriverControllerPtrInput `pulumi:"controller"`
	// ForceUpdate is the boolean flag used to force an update of the driver instance
	ForceUpdate pulumi.BoolPtrInput `pulumi:"forceUpdate"`
	// Node is the specification for Node plugin only
	Node CSIUnitySpecDriverNodePtrInput `pulumi:"node"`
	// Replicas is the count of controllers for Controller plugin
	Replicas pulumi.IntInput `pulumi:"replicas"`
	// SideCars is the specification for CSI sidecar containers
	SideCars CSIUnitySpecDriverSideCarsArrayInput `pulumi:"sideCars"`
	// SnapshotClass is the specification for Snapshot Classes
	SnapshotClass CSIUnitySpecDriverSnapshotClassArrayInput `pulumi:"snapshotClass"`
	// StorageClass is the specification for Storage Classes
	StorageClass CSIUnitySpecDriverStorageClassArrayInput `pulumi:"storageClass"`
	// TLSCertSecret is the name of the TLS Cert secret
	TlsCertSecret pulumi.StringPtrInput `pulumi:"tlsCertSecret"`
}

func (CSIUnitySpecDriverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriver)(nil)).Elem()
}

func (i CSIUnitySpecDriverArgs) ToCSIUnitySpecDriverOutput() CSIUnitySpecDriverOutput {
	return i.ToCSIUnitySpecDriverOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverArgs) ToCSIUnitySpecDriverOutputWithContext(ctx context.Context) CSIUnitySpecDriverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverOutput)
}

func (i CSIUnitySpecDriverArgs) ToCSIUnitySpecDriverPtrOutput() CSIUnitySpecDriverPtrOutput {
	return i.ToCSIUnitySpecDriverPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverArgs) ToCSIUnitySpecDriverPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverOutput).ToCSIUnitySpecDriverPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverPtrInput is an input type that accepts CSIUnitySpecDriverArgs, CSIUnitySpecDriverPtr and CSIUnitySpecDriverPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverPtrInput` via:
//
//          CSIUnitySpecDriverArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverPtrOutput() CSIUnitySpecDriverPtrOutput
	ToCSIUnitySpecDriverPtrOutputWithContext(context.Context) CSIUnitySpecDriverPtrOutput
}

type csiunitySpecDriverPtrType CSIUnitySpecDriverArgs

func CSIUnitySpecDriverPtr(v *CSIUnitySpecDriverArgs) CSIUnitySpecDriverPtrInput {
	return (*csiunitySpecDriverPtrType)(v)
}

func (*csiunitySpecDriverPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriver)(nil)).Elem()
}

func (i *csiunitySpecDriverPtrType) ToCSIUnitySpecDriverPtrOutput() CSIUnitySpecDriverPtrOutput {
	return i.ToCSIUnitySpecDriverPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverPtrType) ToCSIUnitySpecDriverPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverPtrOutput)
}

// Driver is the specification for the CSI Unity Driver
type CSIUnitySpecDriverOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriver)(nil)).Elem()
}

func (o CSIUnitySpecDriverOutput) ToCSIUnitySpecDriverOutput() CSIUnitySpecDriverOutput {
	return o
}

func (o CSIUnitySpecDriverOutput) ToCSIUnitySpecDriverOutputWithContext(ctx context.Context) CSIUnitySpecDriverOutput {
	return o
}

func (o CSIUnitySpecDriverOutput) ToCSIUnitySpecDriverPtrOutput() CSIUnitySpecDriverPtrOutput {
	return o.ToCSIUnitySpecDriverPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverOutput) ToCSIUnitySpecDriverPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriver) *CSIUnitySpecDriver {
		return &v
	}).(CSIUnitySpecDriverPtrOutput)
}

// AuthSecret is the name of the credentials secret for the driver
func (o CSIUnitySpecDriverOutput) AuthSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriver) *string { return v.AuthSecret }).(pulumi.StringPtrOutput)
}

// Common is the common specification for both controller and node plugins
func (o CSIUnitySpecDriverOutput) Common() CSIUnitySpecDriverCommonOutput {
	return o.ApplyT(func(v CSIUnitySpecDriver) CSIUnitySpecDriverCommon { return v.Common }).(CSIUnitySpecDriverCommonOutput)
}

// ConfigVersion is the configuration version of the driver
func (o CSIUnitySpecDriverOutput) ConfigVersion() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriver) string { return v.ConfigVersion }).(pulumi.StringOutput)
}

// Controller is the specification for Controller plugin only
func (o CSIUnitySpecDriverOutput) Controller() CSIUnitySpecDriverControllerPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriver) *CSIUnitySpecDriverController { return v.Controller }).(CSIUnitySpecDriverControllerPtrOutput)
}

// ForceUpdate is the boolean flag used to force an update of the driver instance
func (o CSIUnitySpecDriverOutput) ForceUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriver) *bool { return v.ForceUpdate }).(pulumi.BoolPtrOutput)
}

// Node is the specification for Node plugin only
func (o CSIUnitySpecDriverOutput) Node() CSIUnitySpecDriverNodePtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriver) *CSIUnitySpecDriverNode { return v.Node }).(CSIUnitySpecDriverNodePtrOutput)
}

// Replicas is the count of controllers for Controller plugin
func (o CSIUnitySpecDriverOutput) Replicas() pulumi.IntOutput {
	return o.ApplyT(func(v CSIUnitySpecDriver) int { return v.Replicas }).(pulumi.IntOutput)
}

// SideCars is the specification for CSI sidecar containers
func (o CSIUnitySpecDriverOutput) SideCars() CSIUnitySpecDriverSideCarsArrayOutput {
	return o.ApplyT(func(v CSIUnitySpecDriver) []CSIUnitySpecDriverSideCars { return v.SideCars }).(CSIUnitySpecDriverSideCarsArrayOutput)
}

// SnapshotClass is the specification for Snapshot Classes
func (o CSIUnitySpecDriverOutput) SnapshotClass() CSIUnitySpecDriverSnapshotClassArrayOutput {
	return o.ApplyT(func(v CSIUnitySpecDriver) []CSIUnitySpecDriverSnapshotClass { return v.SnapshotClass }).(CSIUnitySpecDriverSnapshotClassArrayOutput)
}

// StorageClass is the specification for Storage Classes
func (o CSIUnitySpecDriverOutput) StorageClass() CSIUnitySpecDriverStorageClassArrayOutput {
	return o.ApplyT(func(v CSIUnitySpecDriver) []CSIUnitySpecDriverStorageClass { return v.StorageClass }).(CSIUnitySpecDriverStorageClassArrayOutput)
}

// TLSCertSecret is the name of the TLS Cert secret
func (o CSIUnitySpecDriverOutput) TlsCertSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriver) *string { return v.TlsCertSecret }).(pulumi.StringPtrOutput)
}

type CSIUnitySpecDriverPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriver)(nil)).Elem()
}

func (o CSIUnitySpecDriverPtrOutput) ToCSIUnitySpecDriverPtrOutput() CSIUnitySpecDriverPtrOutput {
	return o
}

func (o CSIUnitySpecDriverPtrOutput) ToCSIUnitySpecDriverPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverPtrOutput {
	return o
}

func (o CSIUnitySpecDriverPtrOutput) Elem() CSIUnitySpecDriverOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriver) CSIUnitySpecDriver { return *v }).(CSIUnitySpecDriverOutput)
}

// AuthSecret is the name of the credentials secret for the driver
func (o CSIUnitySpecDriverPtrOutput) AuthSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriver) *string {
		if v == nil {
			return nil
		}
		return v.AuthSecret
	}).(pulumi.StringPtrOutput)
}

// Common is the common specification for both controller and node plugins
func (o CSIUnitySpecDriverPtrOutput) Common() CSIUnitySpecDriverCommonPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriver) *CSIUnitySpecDriverCommon {
		if v == nil {
			return nil
		}
		return &v.Common
	}).(CSIUnitySpecDriverCommonPtrOutput)
}

// ConfigVersion is the configuration version of the driver
func (o CSIUnitySpecDriverPtrOutput) ConfigVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriver) *string {
		if v == nil {
			return nil
		}
		return &v.ConfigVersion
	}).(pulumi.StringPtrOutput)
}

// Controller is the specification for Controller plugin only
func (o CSIUnitySpecDriverPtrOutput) Controller() CSIUnitySpecDriverControllerPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriver) *CSIUnitySpecDriverController {
		if v == nil {
			return nil
		}
		return v.Controller
	}).(CSIUnitySpecDriverControllerPtrOutput)
}

// ForceUpdate is the boolean flag used to force an update of the driver instance
func (o CSIUnitySpecDriverPtrOutput) ForceUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriver) *bool {
		if v == nil {
			return nil
		}
		return v.ForceUpdate
	}).(pulumi.BoolPtrOutput)
}

// Node is the specification for Node plugin only
func (o CSIUnitySpecDriverPtrOutput) Node() CSIUnitySpecDriverNodePtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriver) *CSIUnitySpecDriverNode {
		if v == nil {
			return nil
		}
		return v.Node
	}).(CSIUnitySpecDriverNodePtrOutput)
}

// Replicas is the count of controllers for Controller plugin
func (o CSIUnitySpecDriverPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriver) *int {
		if v == nil {
			return nil
		}
		return &v.Replicas
	}).(pulumi.IntPtrOutput)
}

// SideCars is the specification for CSI sidecar containers
func (o CSIUnitySpecDriverPtrOutput) SideCars() CSIUnitySpecDriverSideCarsArrayOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriver) []CSIUnitySpecDriverSideCars {
		if v == nil {
			return nil
		}
		return v.SideCars
	}).(CSIUnitySpecDriverSideCarsArrayOutput)
}

// SnapshotClass is the specification for Snapshot Classes
func (o CSIUnitySpecDriverPtrOutput) SnapshotClass() CSIUnitySpecDriverSnapshotClassArrayOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriver) []CSIUnitySpecDriverSnapshotClass {
		if v == nil {
			return nil
		}
		return v.SnapshotClass
	}).(CSIUnitySpecDriverSnapshotClassArrayOutput)
}

// StorageClass is the specification for Storage Classes
func (o CSIUnitySpecDriverPtrOutput) StorageClass() CSIUnitySpecDriverStorageClassArrayOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriver) []CSIUnitySpecDriverStorageClass {
		if v == nil {
			return nil
		}
		return v.StorageClass
	}).(CSIUnitySpecDriverStorageClassArrayOutput)
}

// TLSCertSecret is the name of the TLS Cert secret
func (o CSIUnitySpecDriverPtrOutput) TlsCertSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriver) *string {
		if v == nil {
			return nil
		}
		return v.TlsCertSecret
	}).(pulumi.StringPtrOutput)
}

// Common is the common specification for both controller and node plugins
type CSIUnitySpecDriverCommon struct {
	// Args is the set of arguments for the container
	Args []string `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs []CSIUnitySpecDriverCommonEnvs `pulumi:"envs"`
	// Image is the image tag for the Container
	Image *string `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name *string `pulumi:"name"`
}

// CSIUnitySpecDriverCommonInput is an input type that accepts CSIUnitySpecDriverCommonArgs and CSIUnitySpecDriverCommonOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverCommonInput` via:
//
//          CSIUnitySpecDriverCommonArgs{...}
type CSIUnitySpecDriverCommonInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverCommonOutput() CSIUnitySpecDriverCommonOutput
	ToCSIUnitySpecDriverCommonOutputWithContext(context.Context) CSIUnitySpecDriverCommonOutput
}

// Common is the common specification for both controller and node plugins
type CSIUnitySpecDriverCommonArgs struct {
	// Args is the set of arguments for the container
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs CSIUnitySpecDriverCommonEnvsArrayInput `pulumi:"envs"`
	// Image is the image tag for the Container
	Image pulumi.StringPtrInput `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (CSIUnitySpecDriverCommonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverCommon)(nil)).Elem()
}

func (i CSIUnitySpecDriverCommonArgs) ToCSIUnitySpecDriverCommonOutput() CSIUnitySpecDriverCommonOutput {
	return i.ToCSIUnitySpecDriverCommonOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverCommonArgs) ToCSIUnitySpecDriverCommonOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonOutput)
}

func (i CSIUnitySpecDriverCommonArgs) ToCSIUnitySpecDriverCommonPtrOutput() CSIUnitySpecDriverCommonPtrOutput {
	return i.ToCSIUnitySpecDriverCommonPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverCommonArgs) ToCSIUnitySpecDriverCommonPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonOutput).ToCSIUnitySpecDriverCommonPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverCommonPtrInput is an input type that accepts CSIUnitySpecDriverCommonArgs, CSIUnitySpecDriverCommonPtr and CSIUnitySpecDriverCommonPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverCommonPtrInput` via:
//
//          CSIUnitySpecDriverCommonArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverCommonPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverCommonPtrOutput() CSIUnitySpecDriverCommonPtrOutput
	ToCSIUnitySpecDriverCommonPtrOutputWithContext(context.Context) CSIUnitySpecDriverCommonPtrOutput
}

type csiunitySpecDriverCommonPtrType CSIUnitySpecDriverCommonArgs

func CSIUnitySpecDriverCommonPtr(v *CSIUnitySpecDriverCommonArgs) CSIUnitySpecDriverCommonPtrInput {
	return (*csiunitySpecDriverCommonPtrType)(v)
}

func (*csiunitySpecDriverCommonPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverCommon)(nil)).Elem()
}

func (i *csiunitySpecDriverCommonPtrType) ToCSIUnitySpecDriverCommonPtrOutput() CSIUnitySpecDriverCommonPtrOutput {
	return i.ToCSIUnitySpecDriverCommonPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverCommonPtrType) ToCSIUnitySpecDriverCommonPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonPtrOutput)
}

// Common is the common specification for both controller and node plugins
type CSIUnitySpecDriverCommonOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverCommonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverCommon)(nil)).Elem()
}

func (o CSIUnitySpecDriverCommonOutput) ToCSIUnitySpecDriverCommonOutput() CSIUnitySpecDriverCommonOutput {
	return o
}

func (o CSIUnitySpecDriverCommonOutput) ToCSIUnitySpecDriverCommonOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonOutput {
	return o
}

func (o CSIUnitySpecDriverCommonOutput) ToCSIUnitySpecDriverCommonPtrOutput() CSIUnitySpecDriverCommonPtrOutput {
	return o.ToCSIUnitySpecDriverCommonPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverCommonOutput) ToCSIUnitySpecDriverCommonPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommon) *CSIUnitySpecDriverCommon {
		return &v
	}).(CSIUnitySpecDriverCommonPtrOutput)
}

// Args is the set of arguments for the container
func (o CSIUnitySpecDriverCommonOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommon) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIUnitySpecDriverCommonOutput) Envs() CSIUnitySpecDriverCommonEnvsArrayOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommon) []CSIUnitySpecDriverCommonEnvs { return v.Envs }).(CSIUnitySpecDriverCommonEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIUnitySpecDriverCommonOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommon) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIUnitySpecDriverCommonOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommon) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIUnitySpecDriverCommonOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommon) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CSIUnitySpecDriverCommonPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverCommonPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverCommon)(nil)).Elem()
}

func (o CSIUnitySpecDriverCommonPtrOutput) ToCSIUnitySpecDriverCommonPtrOutput() CSIUnitySpecDriverCommonPtrOutput {
	return o
}

func (o CSIUnitySpecDriverCommonPtrOutput) ToCSIUnitySpecDriverCommonPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonPtrOutput {
	return o
}

func (o CSIUnitySpecDriverCommonPtrOutput) Elem() CSIUnitySpecDriverCommonOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommon) CSIUnitySpecDriverCommon { return *v }).(CSIUnitySpecDriverCommonOutput)
}

// Args is the set of arguments for the container
func (o CSIUnitySpecDriverCommonPtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommon) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIUnitySpecDriverCommonPtrOutput) Envs() CSIUnitySpecDriverCommonEnvsArrayOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommon) []CSIUnitySpecDriverCommonEnvs {
		if v == nil {
			return nil
		}
		return v.Envs
	}).(CSIUnitySpecDriverCommonEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIUnitySpecDriverCommonPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommon) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIUnitySpecDriverCommonPtrOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommon) *string {
		if v == nil {
			return nil
		}
		return v.ImagePullPolicy
	}).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIUnitySpecDriverCommonPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommon) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIUnitySpecDriverCommonEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *CSIUnitySpecDriverCommonEnvsValueFrom `pulumi:"valueFrom"`
}

// CSIUnitySpecDriverCommonEnvsInput is an input type that accepts CSIUnitySpecDriverCommonEnvsArgs and CSIUnitySpecDriverCommonEnvsOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverCommonEnvsInput` via:
//
//          CSIUnitySpecDriverCommonEnvsArgs{...}
type CSIUnitySpecDriverCommonEnvsInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverCommonEnvsOutput() CSIUnitySpecDriverCommonEnvsOutput
	ToCSIUnitySpecDriverCommonEnvsOutputWithContext(context.Context) CSIUnitySpecDriverCommonEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type CSIUnitySpecDriverCommonEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom CSIUnitySpecDriverCommonEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (CSIUnitySpecDriverCommonEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverCommonEnvs)(nil)).Elem()
}

func (i CSIUnitySpecDriverCommonEnvsArgs) ToCSIUnitySpecDriverCommonEnvsOutput() CSIUnitySpecDriverCommonEnvsOutput {
	return i.ToCSIUnitySpecDriverCommonEnvsOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverCommonEnvsArgs) ToCSIUnitySpecDriverCommonEnvsOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonEnvsOutput)
}

// CSIUnitySpecDriverCommonEnvsArrayInput is an input type that accepts CSIUnitySpecDriverCommonEnvsArray and CSIUnitySpecDriverCommonEnvsArrayOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverCommonEnvsArrayInput` via:
//
//          CSIUnitySpecDriverCommonEnvsArray{ CSIUnitySpecDriverCommonEnvsArgs{...} }
type CSIUnitySpecDriverCommonEnvsArrayInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverCommonEnvsArrayOutput() CSIUnitySpecDriverCommonEnvsArrayOutput
	ToCSIUnitySpecDriverCommonEnvsArrayOutputWithContext(context.Context) CSIUnitySpecDriverCommonEnvsArrayOutput
}

type CSIUnitySpecDriverCommonEnvsArray []CSIUnitySpecDriverCommonEnvsInput

func (CSIUnitySpecDriverCommonEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIUnitySpecDriverCommonEnvs)(nil)).Elem()
}

func (i CSIUnitySpecDriverCommonEnvsArray) ToCSIUnitySpecDriverCommonEnvsArrayOutput() CSIUnitySpecDriverCommonEnvsArrayOutput {
	return i.ToCSIUnitySpecDriverCommonEnvsArrayOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverCommonEnvsArray) ToCSIUnitySpecDriverCommonEnvsArrayOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIUnitySpecDriverCommonEnvsOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverCommonEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverCommonEnvs)(nil)).Elem()
}

func (o CSIUnitySpecDriverCommonEnvsOutput) ToCSIUnitySpecDriverCommonEnvsOutput() CSIUnitySpecDriverCommonEnvsOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsOutput) ToCSIUnitySpecDriverCommonEnvsOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o CSIUnitySpecDriverCommonEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o CSIUnitySpecDriverCommonEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o CSIUnitySpecDriverCommonEnvsOutput) ValueFrom() CSIUnitySpecDriverCommonEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvs) *CSIUnitySpecDriverCommonEnvsValueFrom { return v.ValueFrom }).(CSIUnitySpecDriverCommonEnvsValueFromPtrOutput)
}

type CSIUnitySpecDriverCommonEnvsArrayOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverCommonEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIUnitySpecDriverCommonEnvs)(nil)).Elem()
}

func (o CSIUnitySpecDriverCommonEnvsArrayOutput) ToCSIUnitySpecDriverCommonEnvsArrayOutput() CSIUnitySpecDriverCommonEnvsArrayOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsArrayOutput) ToCSIUnitySpecDriverCommonEnvsArrayOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsArrayOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsArrayOutput) Index(i pulumi.IntInput) CSIUnitySpecDriverCommonEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIUnitySpecDriverCommonEnvs {
		return vs[0].([]CSIUnitySpecDriverCommonEnvs)[vs[1].(int)]
	}).(CSIUnitySpecDriverCommonEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIUnitySpecDriverCommonEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef *CSIUnitySpecDriverCommonEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// CSIUnitySpecDriverCommonEnvsValueFromInput is an input type that accepts CSIUnitySpecDriverCommonEnvsValueFromArgs and CSIUnitySpecDriverCommonEnvsValueFromOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverCommonEnvsValueFromInput` via:
//
//          CSIUnitySpecDriverCommonEnvsValueFromArgs{...}
type CSIUnitySpecDriverCommonEnvsValueFromInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverCommonEnvsValueFromOutput() CSIUnitySpecDriverCommonEnvsValueFromOutput
	ToCSIUnitySpecDriverCommonEnvsValueFromOutputWithContext(context.Context) CSIUnitySpecDriverCommonEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIUnitySpecDriverCommonEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (CSIUnitySpecDriverCommonEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverCommonEnvsValueFrom)(nil)).Elem()
}

func (i CSIUnitySpecDriverCommonEnvsValueFromArgs) ToCSIUnitySpecDriverCommonEnvsValueFromOutput() CSIUnitySpecDriverCommonEnvsValueFromOutput {
	return i.ToCSIUnitySpecDriverCommonEnvsValueFromOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverCommonEnvsValueFromArgs) ToCSIUnitySpecDriverCommonEnvsValueFromOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonEnvsValueFromOutput)
}

func (i CSIUnitySpecDriverCommonEnvsValueFromArgs) ToCSIUnitySpecDriverCommonEnvsValueFromPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromPtrOutput {
	return i.ToCSIUnitySpecDriverCommonEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverCommonEnvsValueFromArgs) ToCSIUnitySpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonEnvsValueFromOutput).ToCSIUnitySpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverCommonEnvsValueFromPtrInput is an input type that accepts CSIUnitySpecDriverCommonEnvsValueFromArgs, CSIUnitySpecDriverCommonEnvsValueFromPtr and CSIUnitySpecDriverCommonEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverCommonEnvsValueFromPtrInput` via:
//
//          CSIUnitySpecDriverCommonEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverCommonEnvsValueFromPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverCommonEnvsValueFromPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromPtrOutput
	ToCSIUnitySpecDriverCommonEnvsValueFromPtrOutputWithContext(context.Context) CSIUnitySpecDriverCommonEnvsValueFromPtrOutput
}

type csiunitySpecDriverCommonEnvsValueFromPtrType CSIUnitySpecDriverCommonEnvsValueFromArgs

func CSIUnitySpecDriverCommonEnvsValueFromPtr(v *CSIUnitySpecDriverCommonEnvsValueFromArgs) CSIUnitySpecDriverCommonEnvsValueFromPtrInput {
	return (*csiunitySpecDriverCommonEnvsValueFromPtrType)(v)
}

func (*csiunitySpecDriverCommonEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverCommonEnvsValueFrom)(nil)).Elem()
}

func (i *csiunitySpecDriverCommonEnvsValueFromPtrType) ToCSIUnitySpecDriverCommonEnvsValueFromPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromPtrOutput {
	return i.ToCSIUnitySpecDriverCommonEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverCommonEnvsValueFromPtrType) ToCSIUnitySpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIUnitySpecDriverCommonEnvsValueFromOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverCommonEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverCommonEnvsValueFrom)(nil)).Elem()
}

func (o CSIUnitySpecDriverCommonEnvsValueFromOutput) ToCSIUnitySpecDriverCommonEnvsValueFromOutput() CSIUnitySpecDriverCommonEnvsValueFromOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromOutput) ToCSIUnitySpecDriverCommonEnvsValueFromOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromOutput) ToCSIUnitySpecDriverCommonEnvsValueFromPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromPtrOutput {
	return o.ToCSIUnitySpecDriverCommonEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverCommonEnvsValueFromOutput) ToCSIUnitySpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvsValueFrom) *CSIUnitySpecDriverCommonEnvsValueFrom {
		return &v
	}).(CSIUnitySpecDriverCommonEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o CSIUnitySpecDriverCommonEnvsValueFromOutput) ConfigMapKeyRef() CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvsValueFrom) *CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o CSIUnitySpecDriverCommonEnvsValueFromOutput) FieldRef() CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvsValueFrom) *CSIUnitySpecDriverCommonEnvsValueFromFieldRef {
		return v.FieldRef
	}).(CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIUnitySpecDriverCommonEnvsValueFromOutput) ResourceFieldRef() CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvsValueFrom) *CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIUnitySpecDriverCommonEnvsValueFromOutput) SecretKeyRef() CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvsValueFrom) *CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput)
}

type CSIUnitySpecDriverCommonEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverCommonEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverCommonEnvsValueFrom)(nil)).Elem()
}

func (o CSIUnitySpecDriverCommonEnvsValueFromPtrOutput) ToCSIUnitySpecDriverCommonEnvsValueFromPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromPtrOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromPtrOutput) ToCSIUnitySpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromPtrOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromPtrOutput) Elem() CSIUnitySpecDriverCommonEnvsValueFromOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommonEnvsValueFrom) CSIUnitySpecDriverCommonEnvsValueFrom { return *v }).(CSIUnitySpecDriverCommonEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o CSIUnitySpecDriverCommonEnvsValueFromPtrOutput) ConfigMapKeyRef() CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommonEnvsValueFrom) *CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o CSIUnitySpecDriverCommonEnvsValueFromPtrOutput) FieldRef() CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommonEnvsValueFrom) *CSIUnitySpecDriverCommonEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIUnitySpecDriverCommonEnvsValueFromPtrOutput) ResourceFieldRef() CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommonEnvsValueFrom) *CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIUnitySpecDriverCommonEnvsValueFromPtrOutput) SecretKeyRef() CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommonEnvsValueFrom) *CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefInput is an input type that accepts CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefArgs and CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefInput` via:
//
//          CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefArgs{...}
type CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput() CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput
	ToCSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ToCSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput() CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return i.ToCSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ToCSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput)
}

func (i CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ToCSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ToCSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput).ToCSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefArgs, CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtr and CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput
	ToCSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput
}

type csiunitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefArgs

func CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtr(v *CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput {
	return (*csiunitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*csiunitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *csiunitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType) ToCSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType) ToCSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ToCSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput() CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ToCSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ToCSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToCSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ToCSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRef) *CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRef {
		return &v
	}).(CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) Elem() CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRef) CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRef {
		return *v
	}).(CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIUnitySpecDriverCommonEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// CSIUnitySpecDriverCommonEnvsValueFromFieldRefInput is an input type that accepts CSIUnitySpecDriverCommonEnvsValueFromFieldRefArgs and CSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverCommonEnvsValueFromFieldRefInput` via:
//
//          CSIUnitySpecDriverCommonEnvsValueFromFieldRefArgs{...}
type CSIUnitySpecDriverCommonEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput() CSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput
	ToCSIUnitySpecDriverCommonEnvsValueFromFieldRefOutputWithContext(context.Context) CSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIUnitySpecDriverCommonEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (CSIUnitySpecDriverCommonEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverCommonEnvsValueFromFieldRef)(nil)).Elem()
}

func (i CSIUnitySpecDriverCommonEnvsValueFromFieldRefArgs) ToCSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput() CSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput {
	return i.ToCSIUnitySpecDriverCommonEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverCommonEnvsValueFromFieldRefArgs) ToCSIUnitySpecDriverCommonEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput)
}

func (i CSIUnitySpecDriverCommonEnvsValueFromFieldRefArgs) ToCSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverCommonEnvsValueFromFieldRefArgs) ToCSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput).ToCSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrInput is an input type that accepts CSIUnitySpecDriverCommonEnvsValueFromFieldRefArgs, CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtr and CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrInput` via:
//
//          CSIUnitySpecDriverCommonEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput
	ToCSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(context.Context) CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput
}

type csiunitySpecDriverCommonEnvsValueFromFieldRefPtrType CSIUnitySpecDriverCommonEnvsValueFromFieldRefArgs

func CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtr(v *CSIUnitySpecDriverCommonEnvsValueFromFieldRefArgs) CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrInput {
	return (*csiunitySpecDriverCommonEnvsValueFromFieldRefPtrType)(v)
}

func (*csiunitySpecDriverCommonEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverCommonEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *csiunitySpecDriverCommonEnvsValueFromFieldRefPtrType) ToCSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverCommonEnvsValueFromFieldRefPtrType) ToCSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverCommonEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput) ToCSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput() CSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput) ToCSIUnitySpecDriverCommonEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput) ToCSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o.ToCSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput) ToCSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvsValueFromFieldRef) *CSIUnitySpecDriverCommonEnvsValueFromFieldRef {
		return &v
	}).(CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverCommonEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput) ToCSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput) ToCSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput) Elem() CSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommonEnvsValueFromFieldRef) CSIUnitySpecDriverCommonEnvsValueFromFieldRef {
		return *v
	}).(CSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommonEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommonEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *string `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefInput is an input type that accepts CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefArgs and CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefInput` via:
//
//          CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefArgs{...}
type CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput() CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput
	ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutputWithContext(context.Context) CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor pulumi.StringPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefArgs) ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput() CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return i.ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefArgs) ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput)
}

func (i CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefArgs) ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefArgs) ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput).ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrInput is an input type that accepts CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefArgs, CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtr and CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrInput` via:
//
//          CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput
	ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput
}

type csiunitySpecDriverCommonEnvsValueFromResourceFieldRefPtrType CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefArgs

func CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtr(v *CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefArgs) CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrInput {
	return (*csiunitySpecDriverCommonEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*csiunitySpecDriverCommonEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *csiunitySpecDriverCommonEnvsValueFromResourceFieldRefPtrType) ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverCommonEnvsValueFromResourceFieldRefPtrType) ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput) ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput() CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput) ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput) ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput) ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRef) *CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRef {
		return &v
	}).(CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRef) *string { return v.Divisor }).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) Elem() CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRef) CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRef {
		return *v
	}).(CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefInput is an input type that accepts CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefArgs and CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefInput` via:
//
//          CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefArgs{...}
type CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput() CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput
	ToCSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutputWithContext(context.Context) CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefArgs) ToCSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput() CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return i.ToCSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefArgs) ToCSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput)
}

func (i CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefArgs) ToCSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefArgs) ToCSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput).ToCSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrInput is an input type that accepts CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefArgs, CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtr and CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrInput` via:
//
//          CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput
	ToCSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput
}

type csiunitySpecDriverCommonEnvsValueFromSecretKeyRefPtrType CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefArgs

func CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtr(v *CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefArgs) CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrInput {
	return (*csiunitySpecDriverCommonEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*csiunitySpecDriverCommonEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *csiunitySpecDriverCommonEnvsValueFromSecretKeyRefPtrType) ToCSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverCommonEnvsValueFromSecretKeyRefPtrType) ToCSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput) ToCSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput() CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput) ToCSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput) ToCSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToCSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput) ToCSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRef) *CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRef {
		return &v
	}).(CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) ToCSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) ToCSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) Elem() CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRef) CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRef {
		return *v
	}).(CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Controller is the specification for Controller plugin only
type CSIUnitySpecDriverController struct {
	// Args is the set of arguments for the container
	Args []string `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs []CSIUnitySpecDriverControllerEnvs `pulumi:"envs"`
	// Image is the image tag for the Container
	Image *string `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name *string `pulumi:"name"`
}

// CSIUnitySpecDriverControllerInput is an input type that accepts CSIUnitySpecDriverControllerArgs and CSIUnitySpecDriverControllerOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverControllerInput` via:
//
//          CSIUnitySpecDriverControllerArgs{...}
type CSIUnitySpecDriverControllerInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverControllerOutput() CSIUnitySpecDriverControllerOutput
	ToCSIUnitySpecDriverControllerOutputWithContext(context.Context) CSIUnitySpecDriverControllerOutput
}

// Controller is the specification for Controller plugin only
type CSIUnitySpecDriverControllerArgs struct {
	// Args is the set of arguments for the container
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs CSIUnitySpecDriverControllerEnvsArrayInput `pulumi:"envs"`
	// Image is the image tag for the Container
	Image pulumi.StringPtrInput `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (CSIUnitySpecDriverControllerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverController)(nil)).Elem()
}

func (i CSIUnitySpecDriverControllerArgs) ToCSIUnitySpecDriverControllerOutput() CSIUnitySpecDriverControllerOutput {
	return i.ToCSIUnitySpecDriverControllerOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverControllerArgs) ToCSIUnitySpecDriverControllerOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerOutput)
}

func (i CSIUnitySpecDriverControllerArgs) ToCSIUnitySpecDriverControllerPtrOutput() CSIUnitySpecDriverControllerPtrOutput {
	return i.ToCSIUnitySpecDriverControllerPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverControllerArgs) ToCSIUnitySpecDriverControllerPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerOutput).ToCSIUnitySpecDriverControllerPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverControllerPtrInput is an input type that accepts CSIUnitySpecDriverControllerArgs, CSIUnitySpecDriverControllerPtr and CSIUnitySpecDriverControllerPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverControllerPtrInput` via:
//
//          CSIUnitySpecDriverControllerArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverControllerPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverControllerPtrOutput() CSIUnitySpecDriverControllerPtrOutput
	ToCSIUnitySpecDriverControllerPtrOutputWithContext(context.Context) CSIUnitySpecDriverControllerPtrOutput
}

type csiunitySpecDriverControllerPtrType CSIUnitySpecDriverControllerArgs

func CSIUnitySpecDriverControllerPtr(v *CSIUnitySpecDriverControllerArgs) CSIUnitySpecDriverControllerPtrInput {
	return (*csiunitySpecDriverControllerPtrType)(v)
}

func (*csiunitySpecDriverControllerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverController)(nil)).Elem()
}

func (i *csiunitySpecDriverControllerPtrType) ToCSIUnitySpecDriverControllerPtrOutput() CSIUnitySpecDriverControllerPtrOutput {
	return i.ToCSIUnitySpecDriverControllerPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverControllerPtrType) ToCSIUnitySpecDriverControllerPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerPtrOutput)
}

// Controller is the specification for Controller plugin only
type CSIUnitySpecDriverControllerOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverControllerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverController)(nil)).Elem()
}

func (o CSIUnitySpecDriverControllerOutput) ToCSIUnitySpecDriverControllerOutput() CSIUnitySpecDriverControllerOutput {
	return o
}

func (o CSIUnitySpecDriverControllerOutput) ToCSIUnitySpecDriverControllerOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerOutput {
	return o
}

func (o CSIUnitySpecDriverControllerOutput) ToCSIUnitySpecDriverControllerPtrOutput() CSIUnitySpecDriverControllerPtrOutput {
	return o.ToCSIUnitySpecDriverControllerPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverControllerOutput) ToCSIUnitySpecDriverControllerPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverController) *CSIUnitySpecDriverController {
		return &v
	}).(CSIUnitySpecDriverControllerPtrOutput)
}

// Args is the set of arguments for the container
func (o CSIUnitySpecDriverControllerOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverController) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIUnitySpecDriverControllerOutput) Envs() CSIUnitySpecDriverControllerEnvsArrayOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverController) []CSIUnitySpecDriverControllerEnvs { return v.Envs }).(CSIUnitySpecDriverControllerEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIUnitySpecDriverControllerOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverController) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIUnitySpecDriverControllerOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverController) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIUnitySpecDriverControllerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverController) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CSIUnitySpecDriverControllerPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverControllerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverController)(nil)).Elem()
}

func (o CSIUnitySpecDriverControllerPtrOutput) ToCSIUnitySpecDriverControllerPtrOutput() CSIUnitySpecDriverControllerPtrOutput {
	return o
}

func (o CSIUnitySpecDriverControllerPtrOutput) ToCSIUnitySpecDriverControllerPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerPtrOutput {
	return o
}

func (o CSIUnitySpecDriverControllerPtrOutput) Elem() CSIUnitySpecDriverControllerOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverController) CSIUnitySpecDriverController { return *v }).(CSIUnitySpecDriverControllerOutput)
}

// Args is the set of arguments for the container
func (o CSIUnitySpecDriverControllerPtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverController) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIUnitySpecDriverControllerPtrOutput) Envs() CSIUnitySpecDriverControllerEnvsArrayOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverController) []CSIUnitySpecDriverControllerEnvs {
		if v == nil {
			return nil
		}
		return v.Envs
	}).(CSIUnitySpecDriverControllerEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIUnitySpecDriverControllerPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverController) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIUnitySpecDriverControllerPtrOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverController) *string {
		if v == nil {
			return nil
		}
		return v.ImagePullPolicy
	}).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIUnitySpecDriverControllerPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverController) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIUnitySpecDriverControllerEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *CSIUnitySpecDriverControllerEnvsValueFrom `pulumi:"valueFrom"`
}

// CSIUnitySpecDriverControllerEnvsInput is an input type that accepts CSIUnitySpecDriverControllerEnvsArgs and CSIUnitySpecDriverControllerEnvsOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverControllerEnvsInput` via:
//
//          CSIUnitySpecDriverControllerEnvsArgs{...}
type CSIUnitySpecDriverControllerEnvsInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverControllerEnvsOutput() CSIUnitySpecDriverControllerEnvsOutput
	ToCSIUnitySpecDriverControllerEnvsOutputWithContext(context.Context) CSIUnitySpecDriverControllerEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type CSIUnitySpecDriverControllerEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom CSIUnitySpecDriverControllerEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (CSIUnitySpecDriverControllerEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverControllerEnvs)(nil)).Elem()
}

func (i CSIUnitySpecDriverControllerEnvsArgs) ToCSIUnitySpecDriverControllerEnvsOutput() CSIUnitySpecDriverControllerEnvsOutput {
	return i.ToCSIUnitySpecDriverControllerEnvsOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverControllerEnvsArgs) ToCSIUnitySpecDriverControllerEnvsOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerEnvsOutput)
}

// CSIUnitySpecDriverControllerEnvsArrayInput is an input type that accepts CSIUnitySpecDriverControllerEnvsArray and CSIUnitySpecDriverControllerEnvsArrayOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverControllerEnvsArrayInput` via:
//
//          CSIUnitySpecDriverControllerEnvsArray{ CSIUnitySpecDriverControllerEnvsArgs{...} }
type CSIUnitySpecDriverControllerEnvsArrayInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverControllerEnvsArrayOutput() CSIUnitySpecDriverControllerEnvsArrayOutput
	ToCSIUnitySpecDriverControllerEnvsArrayOutputWithContext(context.Context) CSIUnitySpecDriverControllerEnvsArrayOutput
}

type CSIUnitySpecDriverControllerEnvsArray []CSIUnitySpecDriverControllerEnvsInput

func (CSIUnitySpecDriverControllerEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIUnitySpecDriverControllerEnvs)(nil)).Elem()
}

func (i CSIUnitySpecDriverControllerEnvsArray) ToCSIUnitySpecDriverControllerEnvsArrayOutput() CSIUnitySpecDriverControllerEnvsArrayOutput {
	return i.ToCSIUnitySpecDriverControllerEnvsArrayOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverControllerEnvsArray) ToCSIUnitySpecDriverControllerEnvsArrayOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIUnitySpecDriverControllerEnvsOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverControllerEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverControllerEnvs)(nil)).Elem()
}

func (o CSIUnitySpecDriverControllerEnvsOutput) ToCSIUnitySpecDriverControllerEnvsOutput() CSIUnitySpecDriverControllerEnvsOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsOutput) ToCSIUnitySpecDriverControllerEnvsOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o CSIUnitySpecDriverControllerEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o CSIUnitySpecDriverControllerEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o CSIUnitySpecDriverControllerEnvsOutput) ValueFrom() CSIUnitySpecDriverControllerEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvs) *CSIUnitySpecDriverControllerEnvsValueFrom {
		return v.ValueFrom
	}).(CSIUnitySpecDriverControllerEnvsValueFromPtrOutput)
}

type CSIUnitySpecDriverControllerEnvsArrayOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverControllerEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIUnitySpecDriverControllerEnvs)(nil)).Elem()
}

func (o CSIUnitySpecDriverControllerEnvsArrayOutput) ToCSIUnitySpecDriverControllerEnvsArrayOutput() CSIUnitySpecDriverControllerEnvsArrayOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsArrayOutput) ToCSIUnitySpecDriverControllerEnvsArrayOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsArrayOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsArrayOutput) Index(i pulumi.IntInput) CSIUnitySpecDriverControllerEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIUnitySpecDriverControllerEnvs {
		return vs[0].([]CSIUnitySpecDriverControllerEnvs)[vs[1].(int)]
	}).(CSIUnitySpecDriverControllerEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIUnitySpecDriverControllerEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef *CSIUnitySpecDriverControllerEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// CSIUnitySpecDriverControllerEnvsValueFromInput is an input type that accepts CSIUnitySpecDriverControllerEnvsValueFromArgs and CSIUnitySpecDriverControllerEnvsValueFromOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverControllerEnvsValueFromInput` via:
//
//          CSIUnitySpecDriverControllerEnvsValueFromArgs{...}
type CSIUnitySpecDriverControllerEnvsValueFromInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverControllerEnvsValueFromOutput() CSIUnitySpecDriverControllerEnvsValueFromOutput
	ToCSIUnitySpecDriverControllerEnvsValueFromOutputWithContext(context.Context) CSIUnitySpecDriverControllerEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIUnitySpecDriverControllerEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (CSIUnitySpecDriverControllerEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverControllerEnvsValueFrom)(nil)).Elem()
}

func (i CSIUnitySpecDriverControllerEnvsValueFromArgs) ToCSIUnitySpecDriverControllerEnvsValueFromOutput() CSIUnitySpecDriverControllerEnvsValueFromOutput {
	return i.ToCSIUnitySpecDriverControllerEnvsValueFromOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverControllerEnvsValueFromArgs) ToCSIUnitySpecDriverControllerEnvsValueFromOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerEnvsValueFromOutput)
}

func (i CSIUnitySpecDriverControllerEnvsValueFromArgs) ToCSIUnitySpecDriverControllerEnvsValueFromPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromPtrOutput {
	return i.ToCSIUnitySpecDriverControllerEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverControllerEnvsValueFromArgs) ToCSIUnitySpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerEnvsValueFromOutput).ToCSIUnitySpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverControllerEnvsValueFromPtrInput is an input type that accepts CSIUnitySpecDriverControllerEnvsValueFromArgs, CSIUnitySpecDriverControllerEnvsValueFromPtr and CSIUnitySpecDriverControllerEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverControllerEnvsValueFromPtrInput` via:
//
//          CSIUnitySpecDriverControllerEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverControllerEnvsValueFromPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverControllerEnvsValueFromPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromPtrOutput
	ToCSIUnitySpecDriverControllerEnvsValueFromPtrOutputWithContext(context.Context) CSIUnitySpecDriverControllerEnvsValueFromPtrOutput
}

type csiunitySpecDriverControllerEnvsValueFromPtrType CSIUnitySpecDriverControllerEnvsValueFromArgs

func CSIUnitySpecDriverControllerEnvsValueFromPtr(v *CSIUnitySpecDriverControllerEnvsValueFromArgs) CSIUnitySpecDriverControllerEnvsValueFromPtrInput {
	return (*csiunitySpecDriverControllerEnvsValueFromPtrType)(v)
}

func (*csiunitySpecDriverControllerEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverControllerEnvsValueFrom)(nil)).Elem()
}

func (i *csiunitySpecDriverControllerEnvsValueFromPtrType) ToCSIUnitySpecDriverControllerEnvsValueFromPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromPtrOutput {
	return i.ToCSIUnitySpecDriverControllerEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverControllerEnvsValueFromPtrType) ToCSIUnitySpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIUnitySpecDriverControllerEnvsValueFromOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverControllerEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverControllerEnvsValueFrom)(nil)).Elem()
}

func (o CSIUnitySpecDriverControllerEnvsValueFromOutput) ToCSIUnitySpecDriverControllerEnvsValueFromOutput() CSIUnitySpecDriverControllerEnvsValueFromOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromOutput) ToCSIUnitySpecDriverControllerEnvsValueFromOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromOutput) ToCSIUnitySpecDriverControllerEnvsValueFromPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromPtrOutput {
	return o.ToCSIUnitySpecDriverControllerEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverControllerEnvsValueFromOutput) ToCSIUnitySpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvsValueFrom) *CSIUnitySpecDriverControllerEnvsValueFrom {
		return &v
	}).(CSIUnitySpecDriverControllerEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o CSIUnitySpecDriverControllerEnvsValueFromOutput) ConfigMapKeyRef() CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvsValueFrom) *CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o CSIUnitySpecDriverControllerEnvsValueFromOutput) FieldRef() CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvsValueFrom) *CSIUnitySpecDriverControllerEnvsValueFromFieldRef {
		return v.FieldRef
	}).(CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIUnitySpecDriverControllerEnvsValueFromOutput) ResourceFieldRef() CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvsValueFrom) *CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIUnitySpecDriverControllerEnvsValueFromOutput) SecretKeyRef() CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvsValueFrom) *CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput)
}

type CSIUnitySpecDriverControllerEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverControllerEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverControllerEnvsValueFrom)(nil)).Elem()
}

func (o CSIUnitySpecDriverControllerEnvsValueFromPtrOutput) ToCSIUnitySpecDriverControllerEnvsValueFromPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromPtrOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromPtrOutput) ToCSIUnitySpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromPtrOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromPtrOutput) Elem() CSIUnitySpecDriverControllerEnvsValueFromOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverControllerEnvsValueFrom) CSIUnitySpecDriverControllerEnvsValueFrom {
		return *v
	}).(CSIUnitySpecDriverControllerEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o CSIUnitySpecDriverControllerEnvsValueFromPtrOutput) ConfigMapKeyRef() CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverControllerEnvsValueFrom) *CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o CSIUnitySpecDriverControllerEnvsValueFromPtrOutput) FieldRef() CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverControllerEnvsValueFrom) *CSIUnitySpecDriverControllerEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIUnitySpecDriverControllerEnvsValueFromPtrOutput) ResourceFieldRef() CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverControllerEnvsValueFrom) *CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIUnitySpecDriverControllerEnvsValueFromPtrOutput) SecretKeyRef() CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverControllerEnvsValueFrom) *CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefInput is an input type that accepts CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefArgs and CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefInput` via:
//
//          CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefArgs{...}
type CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput() CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput
	ToCSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ToCSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput() CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return i.ToCSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ToCSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput)
}

func (i CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ToCSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ToCSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput).ToCSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefArgs, CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtr and CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput
	ToCSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput
}

type csiunitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefArgs

func CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtr(v *CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput {
	return (*csiunitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*csiunitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *csiunitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType) ToCSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType) ToCSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ToCSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput() CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ToCSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ToCSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToCSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ToCSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRef) *CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRef {
		return &v
	}).(CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) Elem() CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRef) CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRef {
		return *v
	}).(CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIUnitySpecDriverControllerEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// CSIUnitySpecDriverControllerEnvsValueFromFieldRefInput is an input type that accepts CSIUnitySpecDriverControllerEnvsValueFromFieldRefArgs and CSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverControllerEnvsValueFromFieldRefInput` via:
//
//          CSIUnitySpecDriverControllerEnvsValueFromFieldRefArgs{...}
type CSIUnitySpecDriverControllerEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput() CSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput
	ToCSIUnitySpecDriverControllerEnvsValueFromFieldRefOutputWithContext(context.Context) CSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIUnitySpecDriverControllerEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (CSIUnitySpecDriverControllerEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverControllerEnvsValueFromFieldRef)(nil)).Elem()
}

func (i CSIUnitySpecDriverControllerEnvsValueFromFieldRefArgs) ToCSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput() CSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput {
	return i.ToCSIUnitySpecDriverControllerEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverControllerEnvsValueFromFieldRefArgs) ToCSIUnitySpecDriverControllerEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput)
}

func (i CSIUnitySpecDriverControllerEnvsValueFromFieldRefArgs) ToCSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverControllerEnvsValueFromFieldRefArgs) ToCSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput).ToCSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrInput is an input type that accepts CSIUnitySpecDriverControllerEnvsValueFromFieldRefArgs, CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtr and CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrInput` via:
//
//          CSIUnitySpecDriverControllerEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput
	ToCSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(context.Context) CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput
}

type csiunitySpecDriverControllerEnvsValueFromFieldRefPtrType CSIUnitySpecDriverControllerEnvsValueFromFieldRefArgs

func CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtr(v *CSIUnitySpecDriverControllerEnvsValueFromFieldRefArgs) CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrInput {
	return (*csiunitySpecDriverControllerEnvsValueFromFieldRefPtrType)(v)
}

func (*csiunitySpecDriverControllerEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverControllerEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *csiunitySpecDriverControllerEnvsValueFromFieldRefPtrType) ToCSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverControllerEnvsValueFromFieldRefPtrType) ToCSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverControllerEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput) ToCSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput() CSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput) ToCSIUnitySpecDriverControllerEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput) ToCSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o.ToCSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput) ToCSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvsValueFromFieldRef) *CSIUnitySpecDriverControllerEnvsValueFromFieldRef {
		return &v
	}).(CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverControllerEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput) ToCSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput) ToCSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput) Elem() CSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverControllerEnvsValueFromFieldRef) CSIUnitySpecDriverControllerEnvsValueFromFieldRef {
		return *v
	}).(CSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverControllerEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverControllerEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *string `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefInput is an input type that accepts CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefArgs and CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefInput` via:
//
//          CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefArgs{...}
type CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput() CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput
	ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutputWithContext(context.Context) CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor pulumi.StringPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefArgs) ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput() CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return i.ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefArgs) ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput)
}

func (i CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefArgs) ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefArgs) ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput).ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrInput is an input type that accepts CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefArgs, CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtr and CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrInput` via:
//
//          CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput
	ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput
}

type csiunitySpecDriverControllerEnvsValueFromResourceFieldRefPtrType CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefArgs

func CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtr(v *CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefArgs) CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrInput {
	return (*csiunitySpecDriverControllerEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*csiunitySpecDriverControllerEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *csiunitySpecDriverControllerEnvsValueFromResourceFieldRefPtrType) ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverControllerEnvsValueFromResourceFieldRefPtrType) ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput) ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput() CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput) ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput) ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput) ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRef) *CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRef {
		return &v
	}).(CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRef) *string { return v.Divisor }).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) Elem() CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRef) CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRef {
		return *v
	}).(CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefInput is an input type that accepts CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefArgs and CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefInput` via:
//
//          CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefArgs{...}
type CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput() CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput
	ToCSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutputWithContext(context.Context) CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefArgs) ToCSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput() CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return i.ToCSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefArgs) ToCSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput)
}

func (i CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefArgs) ToCSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefArgs) ToCSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput).ToCSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrInput is an input type that accepts CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefArgs, CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtr and CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrInput` via:
//
//          CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput
	ToCSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput
}

type csiunitySpecDriverControllerEnvsValueFromSecretKeyRefPtrType CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefArgs

func CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtr(v *CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefArgs) CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrInput {
	return (*csiunitySpecDriverControllerEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*csiunitySpecDriverControllerEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *csiunitySpecDriverControllerEnvsValueFromSecretKeyRefPtrType) ToCSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverControllerEnvsValueFromSecretKeyRefPtrType) ToCSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput) ToCSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput() CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput) ToCSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput) ToCSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToCSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput) ToCSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRef) *CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRef {
		return &v
	}).(CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) ToCSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) ToCSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) Elem() CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRef) CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRef {
		return *v
	}).(CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Node is the specification for Node plugin only
type CSIUnitySpecDriverNode struct {
	// Args is the set of arguments for the container
	Args []string `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs []CSIUnitySpecDriverNodeEnvs `pulumi:"envs"`
	// Image is the image tag for the Container
	Image *string `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name *string `pulumi:"name"`
}

// CSIUnitySpecDriverNodeInput is an input type that accepts CSIUnitySpecDriverNodeArgs and CSIUnitySpecDriverNodeOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverNodeInput` via:
//
//          CSIUnitySpecDriverNodeArgs{...}
type CSIUnitySpecDriverNodeInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverNodeOutput() CSIUnitySpecDriverNodeOutput
	ToCSIUnitySpecDriverNodeOutputWithContext(context.Context) CSIUnitySpecDriverNodeOutput
}

// Node is the specification for Node plugin only
type CSIUnitySpecDriverNodeArgs struct {
	// Args is the set of arguments for the container
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs CSIUnitySpecDriverNodeEnvsArrayInput `pulumi:"envs"`
	// Image is the image tag for the Container
	Image pulumi.StringPtrInput `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (CSIUnitySpecDriverNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverNode)(nil)).Elem()
}

func (i CSIUnitySpecDriverNodeArgs) ToCSIUnitySpecDriverNodeOutput() CSIUnitySpecDriverNodeOutput {
	return i.ToCSIUnitySpecDriverNodeOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverNodeArgs) ToCSIUnitySpecDriverNodeOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeOutput)
}

func (i CSIUnitySpecDriverNodeArgs) ToCSIUnitySpecDriverNodePtrOutput() CSIUnitySpecDriverNodePtrOutput {
	return i.ToCSIUnitySpecDriverNodePtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverNodeArgs) ToCSIUnitySpecDriverNodePtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeOutput).ToCSIUnitySpecDriverNodePtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverNodePtrInput is an input type that accepts CSIUnitySpecDriverNodeArgs, CSIUnitySpecDriverNodePtr and CSIUnitySpecDriverNodePtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverNodePtrInput` via:
//
//          CSIUnitySpecDriverNodeArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverNodePtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverNodePtrOutput() CSIUnitySpecDriverNodePtrOutput
	ToCSIUnitySpecDriverNodePtrOutputWithContext(context.Context) CSIUnitySpecDriverNodePtrOutput
}

type csiunitySpecDriverNodePtrType CSIUnitySpecDriverNodeArgs

func CSIUnitySpecDriverNodePtr(v *CSIUnitySpecDriverNodeArgs) CSIUnitySpecDriverNodePtrInput {
	return (*csiunitySpecDriverNodePtrType)(v)
}

func (*csiunitySpecDriverNodePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverNode)(nil)).Elem()
}

func (i *csiunitySpecDriverNodePtrType) ToCSIUnitySpecDriverNodePtrOutput() CSIUnitySpecDriverNodePtrOutput {
	return i.ToCSIUnitySpecDriverNodePtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverNodePtrType) ToCSIUnitySpecDriverNodePtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodePtrOutput)
}

// Node is the specification for Node plugin only
type CSIUnitySpecDriverNodeOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverNode)(nil)).Elem()
}

func (o CSIUnitySpecDriverNodeOutput) ToCSIUnitySpecDriverNodeOutput() CSIUnitySpecDriverNodeOutput {
	return o
}

func (o CSIUnitySpecDriverNodeOutput) ToCSIUnitySpecDriverNodeOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeOutput {
	return o
}

func (o CSIUnitySpecDriverNodeOutput) ToCSIUnitySpecDriverNodePtrOutput() CSIUnitySpecDriverNodePtrOutput {
	return o.ToCSIUnitySpecDriverNodePtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverNodeOutput) ToCSIUnitySpecDriverNodePtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodePtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNode) *CSIUnitySpecDriverNode {
		return &v
	}).(CSIUnitySpecDriverNodePtrOutput)
}

// Args is the set of arguments for the container
func (o CSIUnitySpecDriverNodeOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNode) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIUnitySpecDriverNodeOutput) Envs() CSIUnitySpecDriverNodeEnvsArrayOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNode) []CSIUnitySpecDriverNodeEnvs { return v.Envs }).(CSIUnitySpecDriverNodeEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIUnitySpecDriverNodeOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNode) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIUnitySpecDriverNodeOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNode) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIUnitySpecDriverNodeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNode) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CSIUnitySpecDriverNodePtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverNodePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverNode)(nil)).Elem()
}

func (o CSIUnitySpecDriverNodePtrOutput) ToCSIUnitySpecDriverNodePtrOutput() CSIUnitySpecDriverNodePtrOutput {
	return o
}

func (o CSIUnitySpecDriverNodePtrOutput) ToCSIUnitySpecDriverNodePtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodePtrOutput {
	return o
}

func (o CSIUnitySpecDriverNodePtrOutput) Elem() CSIUnitySpecDriverNodeOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNode) CSIUnitySpecDriverNode { return *v }).(CSIUnitySpecDriverNodeOutput)
}

// Args is the set of arguments for the container
func (o CSIUnitySpecDriverNodePtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNode) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIUnitySpecDriverNodePtrOutput) Envs() CSIUnitySpecDriverNodeEnvsArrayOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNode) []CSIUnitySpecDriverNodeEnvs {
		if v == nil {
			return nil
		}
		return v.Envs
	}).(CSIUnitySpecDriverNodeEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIUnitySpecDriverNodePtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNode) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIUnitySpecDriverNodePtrOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNode) *string {
		if v == nil {
			return nil
		}
		return v.ImagePullPolicy
	}).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIUnitySpecDriverNodePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNode) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIUnitySpecDriverNodeEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *CSIUnitySpecDriverNodeEnvsValueFrom `pulumi:"valueFrom"`
}

// CSIUnitySpecDriverNodeEnvsInput is an input type that accepts CSIUnitySpecDriverNodeEnvsArgs and CSIUnitySpecDriverNodeEnvsOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverNodeEnvsInput` via:
//
//          CSIUnitySpecDriverNodeEnvsArgs{...}
type CSIUnitySpecDriverNodeEnvsInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverNodeEnvsOutput() CSIUnitySpecDriverNodeEnvsOutput
	ToCSIUnitySpecDriverNodeEnvsOutputWithContext(context.Context) CSIUnitySpecDriverNodeEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type CSIUnitySpecDriverNodeEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom CSIUnitySpecDriverNodeEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (CSIUnitySpecDriverNodeEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverNodeEnvs)(nil)).Elem()
}

func (i CSIUnitySpecDriverNodeEnvsArgs) ToCSIUnitySpecDriverNodeEnvsOutput() CSIUnitySpecDriverNodeEnvsOutput {
	return i.ToCSIUnitySpecDriverNodeEnvsOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverNodeEnvsArgs) ToCSIUnitySpecDriverNodeEnvsOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeEnvsOutput)
}

// CSIUnitySpecDriverNodeEnvsArrayInput is an input type that accepts CSIUnitySpecDriverNodeEnvsArray and CSIUnitySpecDriverNodeEnvsArrayOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverNodeEnvsArrayInput` via:
//
//          CSIUnitySpecDriverNodeEnvsArray{ CSIUnitySpecDriverNodeEnvsArgs{...} }
type CSIUnitySpecDriverNodeEnvsArrayInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverNodeEnvsArrayOutput() CSIUnitySpecDriverNodeEnvsArrayOutput
	ToCSIUnitySpecDriverNodeEnvsArrayOutputWithContext(context.Context) CSIUnitySpecDriverNodeEnvsArrayOutput
}

type CSIUnitySpecDriverNodeEnvsArray []CSIUnitySpecDriverNodeEnvsInput

func (CSIUnitySpecDriverNodeEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIUnitySpecDriverNodeEnvs)(nil)).Elem()
}

func (i CSIUnitySpecDriverNodeEnvsArray) ToCSIUnitySpecDriverNodeEnvsArrayOutput() CSIUnitySpecDriverNodeEnvsArrayOutput {
	return i.ToCSIUnitySpecDriverNodeEnvsArrayOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverNodeEnvsArray) ToCSIUnitySpecDriverNodeEnvsArrayOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIUnitySpecDriverNodeEnvsOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverNodeEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverNodeEnvs)(nil)).Elem()
}

func (o CSIUnitySpecDriverNodeEnvsOutput) ToCSIUnitySpecDriverNodeEnvsOutput() CSIUnitySpecDriverNodeEnvsOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsOutput) ToCSIUnitySpecDriverNodeEnvsOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o CSIUnitySpecDriverNodeEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o CSIUnitySpecDriverNodeEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o CSIUnitySpecDriverNodeEnvsOutput) ValueFrom() CSIUnitySpecDriverNodeEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvs) *CSIUnitySpecDriverNodeEnvsValueFrom { return v.ValueFrom }).(CSIUnitySpecDriverNodeEnvsValueFromPtrOutput)
}

type CSIUnitySpecDriverNodeEnvsArrayOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverNodeEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIUnitySpecDriverNodeEnvs)(nil)).Elem()
}

func (o CSIUnitySpecDriverNodeEnvsArrayOutput) ToCSIUnitySpecDriverNodeEnvsArrayOutput() CSIUnitySpecDriverNodeEnvsArrayOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsArrayOutput) ToCSIUnitySpecDriverNodeEnvsArrayOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsArrayOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsArrayOutput) Index(i pulumi.IntInput) CSIUnitySpecDriverNodeEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIUnitySpecDriverNodeEnvs {
		return vs[0].([]CSIUnitySpecDriverNodeEnvs)[vs[1].(int)]
	}).(CSIUnitySpecDriverNodeEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIUnitySpecDriverNodeEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef *CSIUnitySpecDriverNodeEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// CSIUnitySpecDriverNodeEnvsValueFromInput is an input type that accepts CSIUnitySpecDriverNodeEnvsValueFromArgs and CSIUnitySpecDriverNodeEnvsValueFromOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverNodeEnvsValueFromInput` via:
//
//          CSIUnitySpecDriverNodeEnvsValueFromArgs{...}
type CSIUnitySpecDriverNodeEnvsValueFromInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverNodeEnvsValueFromOutput() CSIUnitySpecDriverNodeEnvsValueFromOutput
	ToCSIUnitySpecDriverNodeEnvsValueFromOutputWithContext(context.Context) CSIUnitySpecDriverNodeEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIUnitySpecDriverNodeEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (CSIUnitySpecDriverNodeEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverNodeEnvsValueFrom)(nil)).Elem()
}

func (i CSIUnitySpecDriverNodeEnvsValueFromArgs) ToCSIUnitySpecDriverNodeEnvsValueFromOutput() CSIUnitySpecDriverNodeEnvsValueFromOutput {
	return i.ToCSIUnitySpecDriverNodeEnvsValueFromOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverNodeEnvsValueFromArgs) ToCSIUnitySpecDriverNodeEnvsValueFromOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeEnvsValueFromOutput)
}

func (i CSIUnitySpecDriverNodeEnvsValueFromArgs) ToCSIUnitySpecDriverNodeEnvsValueFromPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromPtrOutput {
	return i.ToCSIUnitySpecDriverNodeEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverNodeEnvsValueFromArgs) ToCSIUnitySpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeEnvsValueFromOutput).ToCSIUnitySpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverNodeEnvsValueFromPtrInput is an input type that accepts CSIUnitySpecDriverNodeEnvsValueFromArgs, CSIUnitySpecDriverNodeEnvsValueFromPtr and CSIUnitySpecDriverNodeEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverNodeEnvsValueFromPtrInput` via:
//
//          CSIUnitySpecDriverNodeEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverNodeEnvsValueFromPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverNodeEnvsValueFromPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromPtrOutput
	ToCSIUnitySpecDriverNodeEnvsValueFromPtrOutputWithContext(context.Context) CSIUnitySpecDriverNodeEnvsValueFromPtrOutput
}

type csiunitySpecDriverNodeEnvsValueFromPtrType CSIUnitySpecDriverNodeEnvsValueFromArgs

func CSIUnitySpecDriverNodeEnvsValueFromPtr(v *CSIUnitySpecDriverNodeEnvsValueFromArgs) CSIUnitySpecDriverNodeEnvsValueFromPtrInput {
	return (*csiunitySpecDriverNodeEnvsValueFromPtrType)(v)
}

func (*csiunitySpecDriverNodeEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverNodeEnvsValueFrom)(nil)).Elem()
}

func (i *csiunitySpecDriverNodeEnvsValueFromPtrType) ToCSIUnitySpecDriverNodeEnvsValueFromPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromPtrOutput {
	return i.ToCSIUnitySpecDriverNodeEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverNodeEnvsValueFromPtrType) ToCSIUnitySpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIUnitySpecDriverNodeEnvsValueFromOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverNodeEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverNodeEnvsValueFrom)(nil)).Elem()
}

func (o CSIUnitySpecDriverNodeEnvsValueFromOutput) ToCSIUnitySpecDriverNodeEnvsValueFromOutput() CSIUnitySpecDriverNodeEnvsValueFromOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromOutput) ToCSIUnitySpecDriverNodeEnvsValueFromOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromOutput) ToCSIUnitySpecDriverNodeEnvsValueFromPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromPtrOutput {
	return o.ToCSIUnitySpecDriverNodeEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverNodeEnvsValueFromOutput) ToCSIUnitySpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvsValueFrom) *CSIUnitySpecDriverNodeEnvsValueFrom {
		return &v
	}).(CSIUnitySpecDriverNodeEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o CSIUnitySpecDriverNodeEnvsValueFromOutput) ConfigMapKeyRef() CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvsValueFrom) *CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o CSIUnitySpecDriverNodeEnvsValueFromOutput) FieldRef() CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvsValueFrom) *CSIUnitySpecDriverNodeEnvsValueFromFieldRef {
		return v.FieldRef
	}).(CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIUnitySpecDriverNodeEnvsValueFromOutput) ResourceFieldRef() CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvsValueFrom) *CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIUnitySpecDriverNodeEnvsValueFromOutput) SecretKeyRef() CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvsValueFrom) *CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput)
}

type CSIUnitySpecDriverNodeEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverNodeEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverNodeEnvsValueFrom)(nil)).Elem()
}

func (o CSIUnitySpecDriverNodeEnvsValueFromPtrOutput) ToCSIUnitySpecDriverNodeEnvsValueFromPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromPtrOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromPtrOutput) ToCSIUnitySpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromPtrOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromPtrOutput) Elem() CSIUnitySpecDriverNodeEnvsValueFromOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNodeEnvsValueFrom) CSIUnitySpecDriverNodeEnvsValueFrom { return *v }).(CSIUnitySpecDriverNodeEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o CSIUnitySpecDriverNodeEnvsValueFromPtrOutput) ConfigMapKeyRef() CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNodeEnvsValueFrom) *CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o CSIUnitySpecDriverNodeEnvsValueFromPtrOutput) FieldRef() CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNodeEnvsValueFrom) *CSIUnitySpecDriverNodeEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIUnitySpecDriverNodeEnvsValueFromPtrOutput) ResourceFieldRef() CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNodeEnvsValueFrom) *CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIUnitySpecDriverNodeEnvsValueFromPtrOutput) SecretKeyRef() CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNodeEnvsValueFrom) *CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefInput is an input type that accepts CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefArgs and CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefInput` via:
//
//          CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefArgs{...}
type CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput() CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput
	ToCSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ToCSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput() CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return i.ToCSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ToCSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput)
}

func (i CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ToCSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ToCSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput).ToCSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefArgs, CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtr and CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput
	ToCSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput
}

type csiunitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefArgs

func CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtr(v *CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput {
	return (*csiunitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*csiunitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *csiunitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType) ToCSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType) ToCSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ToCSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput() CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ToCSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ToCSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToCSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ToCSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRef) *CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRef {
		return &v
	}).(CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) Elem() CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRef) CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRef {
		return *v
	}).(CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIUnitySpecDriverNodeEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// CSIUnitySpecDriverNodeEnvsValueFromFieldRefInput is an input type that accepts CSIUnitySpecDriverNodeEnvsValueFromFieldRefArgs and CSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverNodeEnvsValueFromFieldRefInput` via:
//
//          CSIUnitySpecDriverNodeEnvsValueFromFieldRefArgs{...}
type CSIUnitySpecDriverNodeEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput() CSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput
	ToCSIUnitySpecDriverNodeEnvsValueFromFieldRefOutputWithContext(context.Context) CSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIUnitySpecDriverNodeEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (CSIUnitySpecDriverNodeEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverNodeEnvsValueFromFieldRef)(nil)).Elem()
}

func (i CSIUnitySpecDriverNodeEnvsValueFromFieldRefArgs) ToCSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput() CSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput {
	return i.ToCSIUnitySpecDriverNodeEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverNodeEnvsValueFromFieldRefArgs) ToCSIUnitySpecDriverNodeEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput)
}

func (i CSIUnitySpecDriverNodeEnvsValueFromFieldRefArgs) ToCSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverNodeEnvsValueFromFieldRefArgs) ToCSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput).ToCSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrInput is an input type that accepts CSIUnitySpecDriverNodeEnvsValueFromFieldRefArgs, CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtr and CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrInput` via:
//
//          CSIUnitySpecDriverNodeEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput
	ToCSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(context.Context) CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput
}

type csiunitySpecDriverNodeEnvsValueFromFieldRefPtrType CSIUnitySpecDriverNodeEnvsValueFromFieldRefArgs

func CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtr(v *CSIUnitySpecDriverNodeEnvsValueFromFieldRefArgs) CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrInput {
	return (*csiunitySpecDriverNodeEnvsValueFromFieldRefPtrType)(v)
}

func (*csiunitySpecDriverNodeEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverNodeEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *csiunitySpecDriverNodeEnvsValueFromFieldRefPtrType) ToCSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverNodeEnvsValueFromFieldRefPtrType) ToCSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverNodeEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput) ToCSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput() CSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput) ToCSIUnitySpecDriverNodeEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput) ToCSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o.ToCSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput) ToCSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvsValueFromFieldRef) *CSIUnitySpecDriverNodeEnvsValueFromFieldRef {
		return &v
	}).(CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverNodeEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput) ToCSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput) ToCSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput) Elem() CSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNodeEnvsValueFromFieldRef) CSIUnitySpecDriverNodeEnvsValueFromFieldRef {
		return *v
	}).(CSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNodeEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNodeEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *string `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefInput is an input type that accepts CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefArgs and CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefInput` via:
//
//          CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefArgs{...}
type CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput() CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput
	ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutputWithContext(context.Context) CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor pulumi.StringPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefArgs) ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput() CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return i.ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefArgs) ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput)
}

func (i CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefArgs) ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefArgs) ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput).ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrInput is an input type that accepts CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefArgs, CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtr and CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrInput` via:
//
//          CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput
	ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput
}

type csiunitySpecDriverNodeEnvsValueFromResourceFieldRefPtrType CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefArgs

func CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtr(v *CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefArgs) CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrInput {
	return (*csiunitySpecDriverNodeEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*csiunitySpecDriverNodeEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *csiunitySpecDriverNodeEnvsValueFromResourceFieldRefPtrType) ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverNodeEnvsValueFromResourceFieldRefPtrType) ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput) ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput() CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput) ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput) ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput) ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRef) *CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRef {
		return &v
	}).(CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRef) *string { return v.Divisor }).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) Elem() CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRef) CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRef {
		return *v
	}).(CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefInput is an input type that accepts CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefArgs and CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefInput` via:
//
//          CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefArgs{...}
type CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput() CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput
	ToCSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutputWithContext(context.Context) CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefArgs) ToCSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput() CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return i.ToCSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefArgs) ToCSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput)
}

func (i CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefArgs) ToCSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefArgs) ToCSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput).ToCSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrInput is an input type that accepts CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefArgs, CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtr and CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrInput` via:
//
//          CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput
	ToCSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput
}

type csiunitySpecDriverNodeEnvsValueFromSecretKeyRefPtrType CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefArgs

func CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtr(v *CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefArgs) CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrInput {
	return (*csiunitySpecDriverNodeEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*csiunitySpecDriverNodeEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *csiunitySpecDriverNodeEnvsValueFromSecretKeyRefPtrType) ToCSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverNodeEnvsValueFromSecretKeyRefPtrType) ToCSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput) ToCSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput() CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput) ToCSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput) ToCSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToCSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput) ToCSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRef) *CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRef {
		return &v
	}).(CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) ToCSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) ToCSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) Elem() CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRef) CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRef {
		return *v
	}).(CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// ContainerTemplate - Structure representing a container
type CSIUnitySpecDriverSideCars struct {
	// Args is the set of arguments for the container
	Args []string `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs []CSIUnitySpecDriverSideCarsEnvs `pulumi:"envs"`
	// Image is the image tag for the Container
	Image *string `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name *string `pulumi:"name"`
}

// CSIUnitySpecDriverSideCarsInput is an input type that accepts CSIUnitySpecDriverSideCarsArgs and CSIUnitySpecDriverSideCarsOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverSideCarsInput` via:
//
//          CSIUnitySpecDriverSideCarsArgs{...}
type CSIUnitySpecDriverSideCarsInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverSideCarsOutput() CSIUnitySpecDriverSideCarsOutput
	ToCSIUnitySpecDriverSideCarsOutputWithContext(context.Context) CSIUnitySpecDriverSideCarsOutput
}

// ContainerTemplate - Structure representing a container
type CSIUnitySpecDriverSideCarsArgs struct {
	// Args is the set of arguments for the container
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs CSIUnitySpecDriverSideCarsEnvsArrayInput `pulumi:"envs"`
	// Image is the image tag for the Container
	Image pulumi.StringPtrInput `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (CSIUnitySpecDriverSideCarsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverSideCars)(nil)).Elem()
}

func (i CSIUnitySpecDriverSideCarsArgs) ToCSIUnitySpecDriverSideCarsOutput() CSIUnitySpecDriverSideCarsOutput {
	return i.ToCSIUnitySpecDriverSideCarsOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverSideCarsArgs) ToCSIUnitySpecDriverSideCarsOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsOutput)
}

// CSIUnitySpecDriverSideCarsArrayInput is an input type that accepts CSIUnitySpecDriverSideCarsArray and CSIUnitySpecDriverSideCarsArrayOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverSideCarsArrayInput` via:
//
//          CSIUnitySpecDriverSideCarsArray{ CSIUnitySpecDriverSideCarsArgs{...} }
type CSIUnitySpecDriverSideCarsArrayInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverSideCarsArrayOutput() CSIUnitySpecDriverSideCarsArrayOutput
	ToCSIUnitySpecDriverSideCarsArrayOutputWithContext(context.Context) CSIUnitySpecDriverSideCarsArrayOutput
}

type CSIUnitySpecDriverSideCarsArray []CSIUnitySpecDriverSideCarsInput

func (CSIUnitySpecDriverSideCarsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIUnitySpecDriverSideCars)(nil)).Elem()
}

func (i CSIUnitySpecDriverSideCarsArray) ToCSIUnitySpecDriverSideCarsArrayOutput() CSIUnitySpecDriverSideCarsArrayOutput {
	return i.ToCSIUnitySpecDriverSideCarsArrayOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverSideCarsArray) ToCSIUnitySpecDriverSideCarsArrayOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsArrayOutput)
}

// ContainerTemplate - Structure representing a container
type CSIUnitySpecDriverSideCarsOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverSideCarsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverSideCars)(nil)).Elem()
}

func (o CSIUnitySpecDriverSideCarsOutput) ToCSIUnitySpecDriverSideCarsOutput() CSIUnitySpecDriverSideCarsOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsOutput) ToCSIUnitySpecDriverSideCarsOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsOutput {
	return o
}

// Args is the set of arguments for the container
func (o CSIUnitySpecDriverSideCarsOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCars) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIUnitySpecDriverSideCarsOutput) Envs() CSIUnitySpecDriverSideCarsEnvsArrayOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCars) []CSIUnitySpecDriverSideCarsEnvs { return v.Envs }).(CSIUnitySpecDriverSideCarsEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIUnitySpecDriverSideCarsOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCars) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIUnitySpecDriverSideCarsOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCars) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIUnitySpecDriverSideCarsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCars) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CSIUnitySpecDriverSideCarsArrayOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverSideCarsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIUnitySpecDriverSideCars)(nil)).Elem()
}

func (o CSIUnitySpecDriverSideCarsArrayOutput) ToCSIUnitySpecDriverSideCarsArrayOutput() CSIUnitySpecDriverSideCarsArrayOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsArrayOutput) ToCSIUnitySpecDriverSideCarsArrayOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsArrayOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsArrayOutput) Index(i pulumi.IntInput) CSIUnitySpecDriverSideCarsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIUnitySpecDriverSideCars {
		return vs[0].([]CSIUnitySpecDriverSideCars)[vs[1].(int)]
	}).(CSIUnitySpecDriverSideCarsOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIUnitySpecDriverSideCarsEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *CSIUnitySpecDriverSideCarsEnvsValueFrom `pulumi:"valueFrom"`
}

// CSIUnitySpecDriverSideCarsEnvsInput is an input type that accepts CSIUnitySpecDriverSideCarsEnvsArgs and CSIUnitySpecDriverSideCarsEnvsOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverSideCarsEnvsInput` via:
//
//          CSIUnitySpecDriverSideCarsEnvsArgs{...}
type CSIUnitySpecDriverSideCarsEnvsInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverSideCarsEnvsOutput() CSIUnitySpecDriverSideCarsEnvsOutput
	ToCSIUnitySpecDriverSideCarsEnvsOutputWithContext(context.Context) CSIUnitySpecDriverSideCarsEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type CSIUnitySpecDriverSideCarsEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom CSIUnitySpecDriverSideCarsEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (CSIUnitySpecDriverSideCarsEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverSideCarsEnvs)(nil)).Elem()
}

func (i CSIUnitySpecDriverSideCarsEnvsArgs) ToCSIUnitySpecDriverSideCarsEnvsOutput() CSIUnitySpecDriverSideCarsEnvsOutput {
	return i.ToCSIUnitySpecDriverSideCarsEnvsOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverSideCarsEnvsArgs) ToCSIUnitySpecDriverSideCarsEnvsOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsEnvsOutput)
}

// CSIUnitySpecDriverSideCarsEnvsArrayInput is an input type that accepts CSIUnitySpecDriverSideCarsEnvsArray and CSIUnitySpecDriverSideCarsEnvsArrayOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverSideCarsEnvsArrayInput` via:
//
//          CSIUnitySpecDriverSideCarsEnvsArray{ CSIUnitySpecDriverSideCarsEnvsArgs{...} }
type CSIUnitySpecDriverSideCarsEnvsArrayInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverSideCarsEnvsArrayOutput() CSIUnitySpecDriverSideCarsEnvsArrayOutput
	ToCSIUnitySpecDriverSideCarsEnvsArrayOutputWithContext(context.Context) CSIUnitySpecDriverSideCarsEnvsArrayOutput
}

type CSIUnitySpecDriverSideCarsEnvsArray []CSIUnitySpecDriverSideCarsEnvsInput

func (CSIUnitySpecDriverSideCarsEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIUnitySpecDriverSideCarsEnvs)(nil)).Elem()
}

func (i CSIUnitySpecDriverSideCarsEnvsArray) ToCSIUnitySpecDriverSideCarsEnvsArrayOutput() CSIUnitySpecDriverSideCarsEnvsArrayOutput {
	return i.ToCSIUnitySpecDriverSideCarsEnvsArrayOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverSideCarsEnvsArray) ToCSIUnitySpecDriverSideCarsEnvsArrayOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIUnitySpecDriverSideCarsEnvsOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverSideCarsEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverSideCarsEnvs)(nil)).Elem()
}

func (o CSIUnitySpecDriverSideCarsEnvsOutput) ToCSIUnitySpecDriverSideCarsEnvsOutput() CSIUnitySpecDriverSideCarsEnvsOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsOutput) ToCSIUnitySpecDriverSideCarsEnvsOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o CSIUnitySpecDriverSideCarsEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o CSIUnitySpecDriverSideCarsEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o CSIUnitySpecDriverSideCarsEnvsOutput) ValueFrom() CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvs) *CSIUnitySpecDriverSideCarsEnvsValueFrom { return v.ValueFrom }).(CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput)
}

type CSIUnitySpecDriverSideCarsEnvsArrayOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverSideCarsEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIUnitySpecDriverSideCarsEnvs)(nil)).Elem()
}

func (o CSIUnitySpecDriverSideCarsEnvsArrayOutput) ToCSIUnitySpecDriverSideCarsEnvsArrayOutput() CSIUnitySpecDriverSideCarsEnvsArrayOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsArrayOutput) ToCSIUnitySpecDriverSideCarsEnvsArrayOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsArrayOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsArrayOutput) Index(i pulumi.IntInput) CSIUnitySpecDriverSideCarsEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIUnitySpecDriverSideCarsEnvs {
		return vs[0].([]CSIUnitySpecDriverSideCarsEnvs)[vs[1].(int)]
	}).(CSIUnitySpecDriverSideCarsEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIUnitySpecDriverSideCarsEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef *CSIUnitySpecDriverSideCarsEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// CSIUnitySpecDriverSideCarsEnvsValueFromInput is an input type that accepts CSIUnitySpecDriverSideCarsEnvsValueFromArgs and CSIUnitySpecDriverSideCarsEnvsValueFromOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverSideCarsEnvsValueFromInput` via:
//
//          CSIUnitySpecDriverSideCarsEnvsValueFromArgs{...}
type CSIUnitySpecDriverSideCarsEnvsValueFromInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverSideCarsEnvsValueFromOutput() CSIUnitySpecDriverSideCarsEnvsValueFromOutput
	ToCSIUnitySpecDriverSideCarsEnvsValueFromOutputWithContext(context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIUnitySpecDriverSideCarsEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (CSIUnitySpecDriverSideCarsEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverSideCarsEnvsValueFrom)(nil)).Elem()
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromOutput() CSIUnitySpecDriverSideCarsEnvsValueFromOutput {
	return i.ToCSIUnitySpecDriverSideCarsEnvsValueFromOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsEnvsValueFromOutput)
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput {
	return i.ToCSIUnitySpecDriverSideCarsEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsEnvsValueFromOutput).ToCSIUnitySpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverSideCarsEnvsValueFromPtrInput is an input type that accepts CSIUnitySpecDriverSideCarsEnvsValueFromArgs, CSIUnitySpecDriverSideCarsEnvsValueFromPtr and CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverSideCarsEnvsValueFromPtrInput` via:
//
//          CSIUnitySpecDriverSideCarsEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverSideCarsEnvsValueFromPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput
	ToCSIUnitySpecDriverSideCarsEnvsValueFromPtrOutputWithContext(context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput
}

type csiunitySpecDriverSideCarsEnvsValueFromPtrType CSIUnitySpecDriverSideCarsEnvsValueFromArgs

func CSIUnitySpecDriverSideCarsEnvsValueFromPtr(v *CSIUnitySpecDriverSideCarsEnvsValueFromArgs) CSIUnitySpecDriverSideCarsEnvsValueFromPtrInput {
	return (*csiunitySpecDriverSideCarsEnvsValueFromPtrType)(v)
}

func (*csiunitySpecDriverSideCarsEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverSideCarsEnvsValueFrom)(nil)).Elem()
}

func (i *csiunitySpecDriverSideCarsEnvsValueFromPtrType) ToCSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput {
	return i.ToCSIUnitySpecDriverSideCarsEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverSideCarsEnvsValueFromPtrType) ToCSIUnitySpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIUnitySpecDriverSideCarsEnvsValueFromOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverSideCarsEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverSideCarsEnvsValueFrom)(nil)).Elem()
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromOutput() CSIUnitySpecDriverSideCarsEnvsValueFromOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput {
	return o.ToCSIUnitySpecDriverSideCarsEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvsValueFrom) *CSIUnitySpecDriverSideCarsEnvsValueFrom {
		return &v
	}).(CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o CSIUnitySpecDriverSideCarsEnvsValueFromOutput) ConfigMapKeyRef() CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvsValueFrom) *CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o CSIUnitySpecDriverSideCarsEnvsValueFromOutput) FieldRef() CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvsValueFrom) *CSIUnitySpecDriverSideCarsEnvsValueFromFieldRef {
		return v.FieldRef
	}).(CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIUnitySpecDriverSideCarsEnvsValueFromOutput) ResourceFieldRef() CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvsValueFrom) *CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIUnitySpecDriverSideCarsEnvsValueFromOutput) SecretKeyRef() CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvsValueFrom) *CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput)
}

type CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverSideCarsEnvsValueFrom)(nil)).Elem()
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput) Elem() CSIUnitySpecDriverSideCarsEnvsValueFromOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverSideCarsEnvsValueFrom) CSIUnitySpecDriverSideCarsEnvsValueFrom { return *v }).(CSIUnitySpecDriverSideCarsEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput) ConfigMapKeyRef() CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverSideCarsEnvsValueFrom) *CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput) FieldRef() CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverSideCarsEnvsValueFrom) *CSIUnitySpecDriverSideCarsEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput) ResourceFieldRef() CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverSideCarsEnvsValueFrom) *CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput) SecretKeyRef() CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverSideCarsEnvsValueFrom) *CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefInput is an input type that accepts CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs and CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefInput` via:
//
//          CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs{...}
type CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput() CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput
	ToCSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput() CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return i.ToCSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput)
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput).ToCSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs, CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtr and CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput
	ToCSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput
}

type csiunitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs

func CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtr(v *CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput {
	return (*csiunitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*csiunitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *csiunitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType) ToCSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType) ToCSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput() CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToCSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
		return &v
	}).(CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) Elem() CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRef) CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
		return *v
	}).(CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIUnitySpecDriverSideCarsEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefInput is an input type that accepts CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefArgs and CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefInput` via:
//
//          CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefArgs{...}
type CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput() CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput
	ToCSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutputWithContext(context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverSideCarsEnvsValueFromFieldRef)(nil)).Elem()
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput() CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return i.ToCSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput)
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput).ToCSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrInput is an input type that accepts CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefArgs, CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtr and CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrInput` via:
//
//          CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput
	ToCSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput
}

type csiunitySpecDriverSideCarsEnvsValueFromFieldRefPtrType CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefArgs

func CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtr(v *CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefArgs) CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrInput {
	return (*csiunitySpecDriverSideCarsEnvsValueFromFieldRefPtrType)(v)
}

func (*csiunitySpecDriverSideCarsEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverSideCarsEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *csiunitySpecDriverSideCarsEnvsValueFromFieldRefPtrType) ToCSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverSideCarsEnvsValueFromFieldRefPtrType) ToCSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverSideCarsEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput() CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o.ToCSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvsValueFromFieldRef) *CSIUnitySpecDriverSideCarsEnvsValueFromFieldRef {
		return &v
	}).(CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverSideCarsEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) Elem() CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverSideCarsEnvsValueFromFieldRef) CSIUnitySpecDriverSideCarsEnvsValueFromFieldRef {
		return *v
	}).(CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverSideCarsEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverSideCarsEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *string `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefInput is an input type that accepts CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefArgs and CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefInput` via:
//
//          CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefArgs{...}
type CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput() CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput
	ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutputWithContext(context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor pulumi.StringPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput() CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return i.ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput)
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput).ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput is an input type that accepts CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefArgs, CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtr and CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput` via:
//
//          CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput
	ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput
}

type csiunitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefArgs

func CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtr(v *CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput {
	return (*csiunitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*csiunitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *csiunitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType) ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType) ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput() CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRef) *CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRef {
		return &v
	}).(CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRef) *string { return v.Divisor }).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) Elem() CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRef) CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRef {
		return *v
	}).(CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefInput is an input type that accepts CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefArgs and CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefInput` via:
//
//          CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefArgs{...}
type CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput() CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput
	ToCSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutputWithContext(context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput() CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return i.ToCSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput)
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput).ToCSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput is an input type that accepts CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefArgs, CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtr and CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput` via:
//
//          CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput
	ToCSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput
}

type csiunitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefArgs

func CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtr(v *CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput {
	return (*csiunitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*csiunitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *csiunitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType) ToCSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType) ToCSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput() CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToCSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRef) *CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRef {
		return &v
	}).(CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) Elem() CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRef) CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRef {
		return *v
	}).(CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// SnapshotClass represents a VolumeSnapshotClass
type CSIUnitySpecDriverSnapshotClass struct {
	// Name is the name of the Snapshot Class
	Name string `pulumi:"name"`
	// Parameters is a map of driver specific parameters for snapshot class
	Parameters map[string]string `pulumi:"parameters"`
}

// CSIUnitySpecDriverSnapshotClassInput is an input type that accepts CSIUnitySpecDriverSnapshotClassArgs and CSIUnitySpecDriverSnapshotClassOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverSnapshotClassInput` via:
//
//          CSIUnitySpecDriverSnapshotClassArgs{...}
type CSIUnitySpecDriverSnapshotClassInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverSnapshotClassOutput() CSIUnitySpecDriverSnapshotClassOutput
	ToCSIUnitySpecDriverSnapshotClassOutputWithContext(context.Context) CSIUnitySpecDriverSnapshotClassOutput
}

// SnapshotClass represents a VolumeSnapshotClass
type CSIUnitySpecDriverSnapshotClassArgs struct {
	// Name is the name of the Snapshot Class
	Name pulumi.StringInput `pulumi:"name"`
	// Parameters is a map of driver specific parameters for snapshot class
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
}

func (CSIUnitySpecDriverSnapshotClassArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverSnapshotClass)(nil)).Elem()
}

func (i CSIUnitySpecDriverSnapshotClassArgs) ToCSIUnitySpecDriverSnapshotClassOutput() CSIUnitySpecDriverSnapshotClassOutput {
	return i.ToCSIUnitySpecDriverSnapshotClassOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverSnapshotClassArgs) ToCSIUnitySpecDriverSnapshotClassOutputWithContext(ctx context.Context) CSIUnitySpecDriverSnapshotClassOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSnapshotClassOutput)
}

// CSIUnitySpecDriverSnapshotClassArrayInput is an input type that accepts CSIUnitySpecDriverSnapshotClassArray and CSIUnitySpecDriverSnapshotClassArrayOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverSnapshotClassArrayInput` via:
//
//          CSIUnitySpecDriverSnapshotClassArray{ CSIUnitySpecDriverSnapshotClassArgs{...} }
type CSIUnitySpecDriverSnapshotClassArrayInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverSnapshotClassArrayOutput() CSIUnitySpecDriverSnapshotClassArrayOutput
	ToCSIUnitySpecDriverSnapshotClassArrayOutputWithContext(context.Context) CSIUnitySpecDriverSnapshotClassArrayOutput
}

type CSIUnitySpecDriverSnapshotClassArray []CSIUnitySpecDriverSnapshotClassInput

func (CSIUnitySpecDriverSnapshotClassArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIUnitySpecDriverSnapshotClass)(nil)).Elem()
}

func (i CSIUnitySpecDriverSnapshotClassArray) ToCSIUnitySpecDriverSnapshotClassArrayOutput() CSIUnitySpecDriverSnapshotClassArrayOutput {
	return i.ToCSIUnitySpecDriverSnapshotClassArrayOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverSnapshotClassArray) ToCSIUnitySpecDriverSnapshotClassArrayOutputWithContext(ctx context.Context) CSIUnitySpecDriverSnapshotClassArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSnapshotClassArrayOutput)
}

// SnapshotClass represents a VolumeSnapshotClass
type CSIUnitySpecDriverSnapshotClassOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverSnapshotClassOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverSnapshotClass)(nil)).Elem()
}

func (o CSIUnitySpecDriverSnapshotClassOutput) ToCSIUnitySpecDriverSnapshotClassOutput() CSIUnitySpecDriverSnapshotClassOutput {
	return o
}

func (o CSIUnitySpecDriverSnapshotClassOutput) ToCSIUnitySpecDriverSnapshotClassOutputWithContext(ctx context.Context) CSIUnitySpecDriverSnapshotClassOutput {
	return o
}

// Name is the name of the Snapshot Class
func (o CSIUnitySpecDriverSnapshotClassOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSnapshotClass) string { return v.Name }).(pulumi.StringOutput)
}

// Parameters is a map of driver specific parameters for snapshot class
func (o CSIUnitySpecDriverSnapshotClassOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSnapshotClass) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

type CSIUnitySpecDriverSnapshotClassArrayOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverSnapshotClassArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIUnitySpecDriverSnapshotClass)(nil)).Elem()
}

func (o CSIUnitySpecDriverSnapshotClassArrayOutput) ToCSIUnitySpecDriverSnapshotClassArrayOutput() CSIUnitySpecDriverSnapshotClassArrayOutput {
	return o
}

func (o CSIUnitySpecDriverSnapshotClassArrayOutput) ToCSIUnitySpecDriverSnapshotClassArrayOutputWithContext(ctx context.Context) CSIUnitySpecDriverSnapshotClassArrayOutput {
	return o
}

func (o CSIUnitySpecDriverSnapshotClassArrayOutput) Index(i pulumi.IntInput) CSIUnitySpecDriverSnapshotClassOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIUnitySpecDriverSnapshotClass {
		return vs[0].([]CSIUnitySpecDriverSnapshotClass)[vs[1].(int)]
	}).(CSIUnitySpecDriverSnapshotClassOutput)
}

// Parameters is a map of driver specific parameters for snapshot class
type CSIUnitySpecDriverSnapshotClassParameters struct {
}

// CSIUnitySpecDriverSnapshotClassParametersInput is an input type that accepts CSIUnitySpecDriverSnapshotClassParametersArgs and CSIUnitySpecDriverSnapshotClassParametersOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverSnapshotClassParametersInput` via:
//
//          CSIUnitySpecDriverSnapshotClassParametersArgs{...}
type CSIUnitySpecDriverSnapshotClassParametersInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverSnapshotClassParametersOutput() CSIUnitySpecDriverSnapshotClassParametersOutput
	ToCSIUnitySpecDriverSnapshotClassParametersOutputWithContext(context.Context) CSIUnitySpecDriverSnapshotClassParametersOutput
}

// Parameters is a map of driver specific parameters for snapshot class
type CSIUnitySpecDriverSnapshotClassParametersArgs struct {
}

func (CSIUnitySpecDriverSnapshotClassParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverSnapshotClassParameters)(nil)).Elem()
}

func (i CSIUnitySpecDriverSnapshotClassParametersArgs) ToCSIUnitySpecDriverSnapshotClassParametersOutput() CSIUnitySpecDriverSnapshotClassParametersOutput {
	return i.ToCSIUnitySpecDriverSnapshotClassParametersOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverSnapshotClassParametersArgs) ToCSIUnitySpecDriverSnapshotClassParametersOutputWithContext(ctx context.Context) CSIUnitySpecDriverSnapshotClassParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSnapshotClassParametersOutput)
}

// Parameters is a map of driver specific parameters for snapshot class
type CSIUnitySpecDriverSnapshotClassParametersOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverSnapshotClassParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverSnapshotClassParameters)(nil)).Elem()
}

func (o CSIUnitySpecDriverSnapshotClassParametersOutput) ToCSIUnitySpecDriverSnapshotClassParametersOutput() CSIUnitySpecDriverSnapshotClassParametersOutput {
	return o
}

func (o CSIUnitySpecDriverSnapshotClassParametersOutput) ToCSIUnitySpecDriverSnapshotClassParametersOutputWithContext(ctx context.Context) CSIUnitySpecDriverSnapshotClassParametersOutput {
	return o
}

// StorageClass represents a kubernetes storage class
type CSIUnitySpecDriverStorageClass struct {
	// AllowVolumeExpansion is a boolean flag which indicates if volumes can be expanded
	AllowVolumeExpansion *bool `pulumi:"allowVolumeExpansion"`
	// DefaultSc is a boolean flag to indicate if the storage class is going to be marked as default
	Default *bool `pulumi:"default"`
	// Name is the name of the StorageClass
	Name string `pulumi:"name"`
	// Parameters is a map of driver specific storage class
	Parameters map[string]string `pulumi:"parameters"`
	// ReclaimPolicy is the reclaim policy for the storage class
	ReclaimPolicy *string `pulumi:"reclaimPolicy"`
}

// CSIUnitySpecDriverStorageClassInput is an input type that accepts CSIUnitySpecDriverStorageClassArgs and CSIUnitySpecDriverStorageClassOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverStorageClassInput` via:
//
//          CSIUnitySpecDriverStorageClassArgs{...}
type CSIUnitySpecDriverStorageClassInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverStorageClassOutput() CSIUnitySpecDriverStorageClassOutput
	ToCSIUnitySpecDriverStorageClassOutputWithContext(context.Context) CSIUnitySpecDriverStorageClassOutput
}

// StorageClass represents a kubernetes storage class
type CSIUnitySpecDriverStorageClassArgs struct {
	// AllowVolumeExpansion is a boolean flag which indicates if volumes can be expanded
	AllowVolumeExpansion pulumi.BoolPtrInput `pulumi:"allowVolumeExpansion"`
	// DefaultSc is a boolean flag to indicate if the storage class is going to be marked as default
	Default pulumi.BoolPtrInput `pulumi:"default"`
	// Name is the name of the StorageClass
	Name pulumi.StringInput `pulumi:"name"`
	// Parameters is a map of driver specific storage class
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
	// ReclaimPolicy is the reclaim policy for the storage class
	ReclaimPolicy pulumi.StringPtrInput `pulumi:"reclaimPolicy"`
}

func (CSIUnitySpecDriverStorageClassArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverStorageClass)(nil)).Elem()
}

func (i CSIUnitySpecDriverStorageClassArgs) ToCSIUnitySpecDriverStorageClassOutput() CSIUnitySpecDriverStorageClassOutput {
	return i.ToCSIUnitySpecDriverStorageClassOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverStorageClassArgs) ToCSIUnitySpecDriverStorageClassOutputWithContext(ctx context.Context) CSIUnitySpecDriverStorageClassOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverStorageClassOutput)
}

// CSIUnitySpecDriverStorageClassArrayInput is an input type that accepts CSIUnitySpecDriverStorageClassArray and CSIUnitySpecDriverStorageClassArrayOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverStorageClassArrayInput` via:
//
//          CSIUnitySpecDriverStorageClassArray{ CSIUnitySpecDriverStorageClassArgs{...} }
type CSIUnitySpecDriverStorageClassArrayInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverStorageClassArrayOutput() CSIUnitySpecDriverStorageClassArrayOutput
	ToCSIUnitySpecDriverStorageClassArrayOutputWithContext(context.Context) CSIUnitySpecDriverStorageClassArrayOutput
}

type CSIUnitySpecDriverStorageClassArray []CSIUnitySpecDriverStorageClassInput

func (CSIUnitySpecDriverStorageClassArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIUnitySpecDriverStorageClass)(nil)).Elem()
}

func (i CSIUnitySpecDriverStorageClassArray) ToCSIUnitySpecDriverStorageClassArrayOutput() CSIUnitySpecDriverStorageClassArrayOutput {
	return i.ToCSIUnitySpecDriverStorageClassArrayOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverStorageClassArray) ToCSIUnitySpecDriverStorageClassArrayOutputWithContext(ctx context.Context) CSIUnitySpecDriverStorageClassArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverStorageClassArrayOutput)
}

// StorageClass represents a kubernetes storage class
type CSIUnitySpecDriverStorageClassOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverStorageClassOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverStorageClass)(nil)).Elem()
}

func (o CSIUnitySpecDriverStorageClassOutput) ToCSIUnitySpecDriverStorageClassOutput() CSIUnitySpecDriverStorageClassOutput {
	return o
}

func (o CSIUnitySpecDriverStorageClassOutput) ToCSIUnitySpecDriverStorageClassOutputWithContext(ctx context.Context) CSIUnitySpecDriverStorageClassOutput {
	return o
}

// AllowVolumeExpansion is a boolean flag which indicates if volumes can be expanded
func (o CSIUnitySpecDriverStorageClassOutput) AllowVolumeExpansion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverStorageClass) *bool { return v.AllowVolumeExpansion }).(pulumi.BoolPtrOutput)
}

// DefaultSc is a boolean flag to indicate if the storage class is going to be marked as default
func (o CSIUnitySpecDriverStorageClassOutput) Default() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverStorageClass) *bool { return v.Default }).(pulumi.BoolPtrOutput)
}

// Name is the name of the StorageClass
func (o CSIUnitySpecDriverStorageClassOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverStorageClass) string { return v.Name }).(pulumi.StringOutput)
}

// Parameters is a map of driver specific storage class
func (o CSIUnitySpecDriverStorageClassOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverStorageClass) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

// ReclaimPolicy is the reclaim policy for the storage class
func (o CSIUnitySpecDriverStorageClassOutput) ReclaimPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverStorageClass) *string { return v.ReclaimPolicy }).(pulumi.StringPtrOutput)
}

type CSIUnitySpecDriverStorageClassArrayOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverStorageClassArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIUnitySpecDriverStorageClass)(nil)).Elem()
}

func (o CSIUnitySpecDriverStorageClassArrayOutput) ToCSIUnitySpecDriverStorageClassArrayOutput() CSIUnitySpecDriverStorageClassArrayOutput {
	return o
}

func (o CSIUnitySpecDriverStorageClassArrayOutput) ToCSIUnitySpecDriverStorageClassArrayOutputWithContext(ctx context.Context) CSIUnitySpecDriverStorageClassArrayOutput {
	return o
}

func (o CSIUnitySpecDriverStorageClassArrayOutput) Index(i pulumi.IntInput) CSIUnitySpecDriverStorageClassOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIUnitySpecDriverStorageClass {
		return vs[0].([]CSIUnitySpecDriverStorageClass)[vs[1].(int)]
	}).(CSIUnitySpecDriverStorageClassOutput)
}

// Parameters is a map of driver specific storage class
type CSIUnitySpecDriverStorageClassParameters struct {
}

// CSIUnitySpecDriverStorageClassParametersInput is an input type that accepts CSIUnitySpecDriverStorageClassParametersArgs and CSIUnitySpecDriverStorageClassParametersOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverStorageClassParametersInput` via:
//
//          CSIUnitySpecDriverStorageClassParametersArgs{...}
type CSIUnitySpecDriverStorageClassParametersInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverStorageClassParametersOutput() CSIUnitySpecDriverStorageClassParametersOutput
	ToCSIUnitySpecDriverStorageClassParametersOutputWithContext(context.Context) CSIUnitySpecDriverStorageClassParametersOutput
}

// Parameters is a map of driver specific storage class
type CSIUnitySpecDriverStorageClassParametersArgs struct {
}

func (CSIUnitySpecDriverStorageClassParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverStorageClassParameters)(nil)).Elem()
}

func (i CSIUnitySpecDriverStorageClassParametersArgs) ToCSIUnitySpecDriverStorageClassParametersOutput() CSIUnitySpecDriverStorageClassParametersOutput {
	return i.ToCSIUnitySpecDriverStorageClassParametersOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverStorageClassParametersArgs) ToCSIUnitySpecDriverStorageClassParametersOutputWithContext(ctx context.Context) CSIUnitySpecDriverStorageClassParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverStorageClassParametersOutput)
}

// Parameters is a map of driver specific storage class
type CSIUnitySpecDriverStorageClassParametersOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverStorageClassParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverStorageClassParameters)(nil)).Elem()
}

func (o CSIUnitySpecDriverStorageClassParametersOutput) ToCSIUnitySpecDriverStorageClassParametersOutput() CSIUnitySpecDriverStorageClassParametersOutput {
	return o
}

func (o CSIUnitySpecDriverStorageClassParametersOutput) ToCSIUnitySpecDriverStorageClassParametersOutputWithContext(ctx context.Context) CSIUnitySpecDriverStorageClassParametersOutput {
	return o
}

// DriverStatus defines the observed state of CSIDriver
type CSIUnityStatus struct {
	// ControllerStatus is the status of Controller pods
	ControllerStatus *CSIUnityStatusControllerStatus `pulumi:"controllerStatus"`
	// DriverHash is a hash of the driver specification
	DriverHash *int `pulumi:"driverHash"`
	// LastUpdate is the last updated state of the driver
	LastUpdate *CSIUnityStatusLastUpdate `pulumi:"lastUpdate"`
	// NodeStatus is the status of Controller pods
	NodeStatus *CSIUnityStatusNodeStatus `pulumi:"nodeStatus"`
	// State is the state of the driver installation
	State *string `pulumi:"state"`
}

// CSIUnityStatusInput is an input type that accepts CSIUnityStatusArgs and CSIUnityStatusOutput values.
// You can construct a concrete instance of `CSIUnityStatusInput` via:
//
//          CSIUnityStatusArgs{...}
type CSIUnityStatusInput interface {
	pulumi.Input

	ToCSIUnityStatusOutput() CSIUnityStatusOutput
	ToCSIUnityStatusOutputWithContext(context.Context) CSIUnityStatusOutput
}

// DriverStatus defines the observed state of CSIDriver
type CSIUnityStatusArgs struct {
	// ControllerStatus is the status of Controller pods
	ControllerStatus CSIUnityStatusControllerStatusPtrInput `pulumi:"controllerStatus"`
	// DriverHash is a hash of the driver specification
	DriverHash pulumi.IntPtrInput `pulumi:"driverHash"`
	// LastUpdate is the last updated state of the driver
	LastUpdate CSIUnityStatusLastUpdatePtrInput `pulumi:"lastUpdate"`
	// NodeStatus is the status of Controller pods
	NodeStatus CSIUnityStatusNodeStatusPtrInput `pulumi:"nodeStatus"`
	// State is the state of the driver installation
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (CSIUnityStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnityStatus)(nil)).Elem()
}

func (i CSIUnityStatusArgs) ToCSIUnityStatusOutput() CSIUnityStatusOutput {
	return i.ToCSIUnityStatusOutputWithContext(context.Background())
}

func (i CSIUnityStatusArgs) ToCSIUnityStatusOutputWithContext(ctx context.Context) CSIUnityStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnityStatusOutput)
}

func (i CSIUnityStatusArgs) ToCSIUnityStatusPtrOutput() CSIUnityStatusPtrOutput {
	return i.ToCSIUnityStatusPtrOutputWithContext(context.Background())
}

func (i CSIUnityStatusArgs) ToCSIUnityStatusPtrOutputWithContext(ctx context.Context) CSIUnityStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnityStatusOutput).ToCSIUnityStatusPtrOutputWithContext(ctx)
}

// CSIUnityStatusPtrInput is an input type that accepts CSIUnityStatusArgs, CSIUnityStatusPtr and CSIUnityStatusPtrOutput values.
// You can construct a concrete instance of `CSIUnityStatusPtrInput` via:
//
//          CSIUnityStatusArgs{...}
//
//  or:
//
//          nil
type CSIUnityStatusPtrInput interface {
	pulumi.Input

	ToCSIUnityStatusPtrOutput() CSIUnityStatusPtrOutput
	ToCSIUnityStatusPtrOutputWithContext(context.Context) CSIUnityStatusPtrOutput
}

type csiunityStatusPtrType CSIUnityStatusArgs

func CSIUnityStatusPtr(v *CSIUnityStatusArgs) CSIUnityStatusPtrInput {
	return (*csiunityStatusPtrType)(v)
}

func (*csiunityStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnityStatus)(nil)).Elem()
}

func (i *csiunityStatusPtrType) ToCSIUnityStatusPtrOutput() CSIUnityStatusPtrOutput {
	return i.ToCSIUnityStatusPtrOutputWithContext(context.Background())
}

func (i *csiunityStatusPtrType) ToCSIUnityStatusPtrOutputWithContext(ctx context.Context) CSIUnityStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnityStatusPtrOutput)
}

// DriverStatus defines the observed state of CSIDriver
type CSIUnityStatusOutput struct{ *pulumi.OutputState }

func (CSIUnityStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnityStatus)(nil)).Elem()
}

func (o CSIUnityStatusOutput) ToCSIUnityStatusOutput() CSIUnityStatusOutput {
	return o
}

func (o CSIUnityStatusOutput) ToCSIUnityStatusOutputWithContext(ctx context.Context) CSIUnityStatusOutput {
	return o
}

func (o CSIUnityStatusOutput) ToCSIUnityStatusPtrOutput() CSIUnityStatusPtrOutput {
	return o.ToCSIUnityStatusPtrOutputWithContext(context.Background())
}

func (o CSIUnityStatusOutput) ToCSIUnityStatusPtrOutputWithContext(ctx context.Context) CSIUnityStatusPtrOutput {
	return o.ApplyT(func(v CSIUnityStatus) *CSIUnityStatus {
		return &v
	}).(CSIUnityStatusPtrOutput)
}

// ControllerStatus is the status of Controller pods
func (o CSIUnityStatusOutput) ControllerStatus() CSIUnityStatusControllerStatusPtrOutput {
	return o.ApplyT(func(v CSIUnityStatus) *CSIUnityStatusControllerStatus { return v.ControllerStatus }).(CSIUnityStatusControllerStatusPtrOutput)
}

// DriverHash is a hash of the driver specification
func (o CSIUnityStatusOutput) DriverHash() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIUnityStatus) *int { return v.DriverHash }).(pulumi.IntPtrOutput)
}

// LastUpdate is the last updated state of the driver
func (o CSIUnityStatusOutput) LastUpdate() CSIUnityStatusLastUpdatePtrOutput {
	return o.ApplyT(func(v CSIUnityStatus) *CSIUnityStatusLastUpdate { return v.LastUpdate }).(CSIUnityStatusLastUpdatePtrOutput)
}

// NodeStatus is the status of Controller pods
func (o CSIUnityStatusOutput) NodeStatus() CSIUnityStatusNodeStatusPtrOutput {
	return o.ApplyT(func(v CSIUnityStatus) *CSIUnityStatusNodeStatus { return v.NodeStatus }).(CSIUnityStatusNodeStatusPtrOutput)
}

// State is the state of the driver installation
func (o CSIUnityStatusOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnityStatus) *string { return v.State }).(pulumi.StringPtrOutput)
}

type CSIUnityStatusPtrOutput struct{ *pulumi.OutputState }

func (CSIUnityStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnityStatus)(nil)).Elem()
}

func (o CSIUnityStatusPtrOutput) ToCSIUnityStatusPtrOutput() CSIUnityStatusPtrOutput {
	return o
}

func (o CSIUnityStatusPtrOutput) ToCSIUnityStatusPtrOutputWithContext(ctx context.Context) CSIUnityStatusPtrOutput {
	return o
}

func (o CSIUnityStatusPtrOutput) Elem() CSIUnityStatusOutput {
	return o.ApplyT(func(v *CSIUnityStatus) CSIUnityStatus { return *v }).(CSIUnityStatusOutput)
}

// ControllerStatus is the status of Controller pods
func (o CSIUnityStatusPtrOutput) ControllerStatus() CSIUnityStatusControllerStatusPtrOutput {
	return o.ApplyT(func(v *CSIUnityStatus) *CSIUnityStatusControllerStatus {
		if v == nil {
			return nil
		}
		return v.ControllerStatus
	}).(CSIUnityStatusControllerStatusPtrOutput)
}

// DriverHash is a hash of the driver specification
func (o CSIUnityStatusPtrOutput) DriverHash() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CSIUnityStatus) *int {
		if v == nil {
			return nil
		}
		return v.DriverHash
	}).(pulumi.IntPtrOutput)
}

// LastUpdate is the last updated state of the driver
func (o CSIUnityStatusPtrOutput) LastUpdate() CSIUnityStatusLastUpdatePtrOutput {
	return o.ApplyT(func(v *CSIUnityStatus) *CSIUnityStatusLastUpdate {
		if v == nil {
			return nil
		}
		return v.LastUpdate
	}).(CSIUnityStatusLastUpdatePtrOutput)
}

// NodeStatus is the status of Controller pods
func (o CSIUnityStatusPtrOutput) NodeStatus() CSIUnityStatusNodeStatusPtrOutput {
	return o.ApplyT(func(v *CSIUnityStatus) *CSIUnityStatusNodeStatus {
		if v == nil {
			return nil
		}
		return v.NodeStatus
	}).(CSIUnityStatusNodeStatusPtrOutput)
}

// State is the state of the driver installation
func (o CSIUnityStatusPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnityStatus) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// ControllerStatus is the status of Controller pods
type CSIUnityStatusControllerStatus struct {
	Available []string `pulumi:"available"`
	Ready     []string `pulumi:"ready"`
	Starting  []string `pulumi:"starting"`
	Stopped   []string `pulumi:"stopped"`
}

// CSIUnityStatusControllerStatusInput is an input type that accepts CSIUnityStatusControllerStatusArgs and CSIUnityStatusControllerStatusOutput values.
// You can construct a concrete instance of `CSIUnityStatusControllerStatusInput` via:
//
//          CSIUnityStatusControllerStatusArgs{...}
type CSIUnityStatusControllerStatusInput interface {
	pulumi.Input

	ToCSIUnityStatusControllerStatusOutput() CSIUnityStatusControllerStatusOutput
	ToCSIUnityStatusControllerStatusOutputWithContext(context.Context) CSIUnityStatusControllerStatusOutput
}

// ControllerStatus is the status of Controller pods
type CSIUnityStatusControllerStatusArgs struct {
	Available pulumi.StringArrayInput `pulumi:"available"`
	Ready     pulumi.StringArrayInput `pulumi:"ready"`
	Starting  pulumi.StringArrayInput `pulumi:"starting"`
	Stopped   pulumi.StringArrayInput `pulumi:"stopped"`
}

func (CSIUnityStatusControllerStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnityStatusControllerStatus)(nil)).Elem()
}

func (i CSIUnityStatusControllerStatusArgs) ToCSIUnityStatusControllerStatusOutput() CSIUnityStatusControllerStatusOutput {
	return i.ToCSIUnityStatusControllerStatusOutputWithContext(context.Background())
}

func (i CSIUnityStatusControllerStatusArgs) ToCSIUnityStatusControllerStatusOutputWithContext(ctx context.Context) CSIUnityStatusControllerStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnityStatusControllerStatusOutput)
}

func (i CSIUnityStatusControllerStatusArgs) ToCSIUnityStatusControllerStatusPtrOutput() CSIUnityStatusControllerStatusPtrOutput {
	return i.ToCSIUnityStatusControllerStatusPtrOutputWithContext(context.Background())
}

func (i CSIUnityStatusControllerStatusArgs) ToCSIUnityStatusControllerStatusPtrOutputWithContext(ctx context.Context) CSIUnityStatusControllerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnityStatusControllerStatusOutput).ToCSIUnityStatusControllerStatusPtrOutputWithContext(ctx)
}

// CSIUnityStatusControllerStatusPtrInput is an input type that accepts CSIUnityStatusControllerStatusArgs, CSIUnityStatusControllerStatusPtr and CSIUnityStatusControllerStatusPtrOutput values.
// You can construct a concrete instance of `CSIUnityStatusControllerStatusPtrInput` via:
//
//          CSIUnityStatusControllerStatusArgs{...}
//
//  or:
//
//          nil
type CSIUnityStatusControllerStatusPtrInput interface {
	pulumi.Input

	ToCSIUnityStatusControllerStatusPtrOutput() CSIUnityStatusControllerStatusPtrOutput
	ToCSIUnityStatusControllerStatusPtrOutputWithContext(context.Context) CSIUnityStatusControllerStatusPtrOutput
}

type csiunityStatusControllerStatusPtrType CSIUnityStatusControllerStatusArgs

func CSIUnityStatusControllerStatusPtr(v *CSIUnityStatusControllerStatusArgs) CSIUnityStatusControllerStatusPtrInput {
	return (*csiunityStatusControllerStatusPtrType)(v)
}

func (*csiunityStatusControllerStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnityStatusControllerStatus)(nil)).Elem()
}

func (i *csiunityStatusControllerStatusPtrType) ToCSIUnityStatusControllerStatusPtrOutput() CSIUnityStatusControllerStatusPtrOutput {
	return i.ToCSIUnityStatusControllerStatusPtrOutputWithContext(context.Background())
}

func (i *csiunityStatusControllerStatusPtrType) ToCSIUnityStatusControllerStatusPtrOutputWithContext(ctx context.Context) CSIUnityStatusControllerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnityStatusControllerStatusPtrOutput)
}

// ControllerStatus is the status of Controller pods
type CSIUnityStatusControllerStatusOutput struct{ *pulumi.OutputState }

func (CSIUnityStatusControllerStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnityStatusControllerStatus)(nil)).Elem()
}

func (o CSIUnityStatusControllerStatusOutput) ToCSIUnityStatusControllerStatusOutput() CSIUnityStatusControllerStatusOutput {
	return o
}

func (o CSIUnityStatusControllerStatusOutput) ToCSIUnityStatusControllerStatusOutputWithContext(ctx context.Context) CSIUnityStatusControllerStatusOutput {
	return o
}

func (o CSIUnityStatusControllerStatusOutput) ToCSIUnityStatusControllerStatusPtrOutput() CSIUnityStatusControllerStatusPtrOutput {
	return o.ToCSIUnityStatusControllerStatusPtrOutputWithContext(context.Background())
}

func (o CSIUnityStatusControllerStatusOutput) ToCSIUnityStatusControllerStatusPtrOutputWithContext(ctx context.Context) CSIUnityStatusControllerStatusPtrOutput {
	return o.ApplyT(func(v CSIUnityStatusControllerStatus) *CSIUnityStatusControllerStatus {
		return &v
	}).(CSIUnityStatusControllerStatusPtrOutput)
}
func (o CSIUnityStatusControllerStatusOutput) Available() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIUnityStatusControllerStatus) []string { return v.Available }).(pulumi.StringArrayOutput)
}

func (o CSIUnityStatusControllerStatusOutput) Ready() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIUnityStatusControllerStatus) []string { return v.Ready }).(pulumi.StringArrayOutput)
}

func (o CSIUnityStatusControllerStatusOutput) Starting() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIUnityStatusControllerStatus) []string { return v.Starting }).(pulumi.StringArrayOutput)
}

func (o CSIUnityStatusControllerStatusOutput) Stopped() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIUnityStatusControllerStatus) []string { return v.Stopped }).(pulumi.StringArrayOutput)
}

type CSIUnityStatusControllerStatusPtrOutput struct{ *pulumi.OutputState }

func (CSIUnityStatusControllerStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnityStatusControllerStatus)(nil)).Elem()
}

func (o CSIUnityStatusControllerStatusPtrOutput) ToCSIUnityStatusControllerStatusPtrOutput() CSIUnityStatusControllerStatusPtrOutput {
	return o
}

func (o CSIUnityStatusControllerStatusPtrOutput) ToCSIUnityStatusControllerStatusPtrOutputWithContext(ctx context.Context) CSIUnityStatusControllerStatusPtrOutput {
	return o
}

func (o CSIUnityStatusControllerStatusPtrOutput) Elem() CSIUnityStatusControllerStatusOutput {
	return o.ApplyT(func(v *CSIUnityStatusControllerStatus) CSIUnityStatusControllerStatus { return *v }).(CSIUnityStatusControllerStatusOutput)
}

func (o CSIUnityStatusControllerStatusPtrOutput) Available() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIUnityStatusControllerStatus) []string {
		if v == nil {
			return nil
		}
		return v.Available
	}).(pulumi.StringArrayOutput)
}

func (o CSIUnityStatusControllerStatusPtrOutput) Ready() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIUnityStatusControllerStatus) []string {
		if v == nil {
			return nil
		}
		return v.Ready
	}).(pulumi.StringArrayOutput)
}

func (o CSIUnityStatusControllerStatusPtrOutput) Starting() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIUnityStatusControllerStatus) []string {
		if v == nil {
			return nil
		}
		return v.Starting
	}).(pulumi.StringArrayOutput)
}

func (o CSIUnityStatusControllerStatusPtrOutput) Stopped() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIUnityStatusControllerStatus) []string {
		if v == nil {
			return nil
		}
		return v.Stopped
	}).(pulumi.StringArrayOutput)
}

// LastUpdate is the last updated state of the driver
type CSIUnityStatusLastUpdate struct {
	// Condition is the last known condition of the Custom Resource
	Condition *string `pulumi:"condition"`
	// ErrorMessage is the last error message associated with the condition
	ErrorMessage *string `pulumi:"errorMessage"`
	// Time is the time stamp for the last condition update
	Time *string `pulumi:"time"`
}

// CSIUnityStatusLastUpdateInput is an input type that accepts CSIUnityStatusLastUpdateArgs and CSIUnityStatusLastUpdateOutput values.
// You can construct a concrete instance of `CSIUnityStatusLastUpdateInput` via:
//
//          CSIUnityStatusLastUpdateArgs{...}
type CSIUnityStatusLastUpdateInput interface {
	pulumi.Input

	ToCSIUnityStatusLastUpdateOutput() CSIUnityStatusLastUpdateOutput
	ToCSIUnityStatusLastUpdateOutputWithContext(context.Context) CSIUnityStatusLastUpdateOutput
}

// LastUpdate is the last updated state of the driver
type CSIUnityStatusLastUpdateArgs struct {
	// Condition is the last known condition of the Custom Resource
	Condition pulumi.StringPtrInput `pulumi:"condition"`
	// ErrorMessage is the last error message associated with the condition
	ErrorMessage pulumi.StringPtrInput `pulumi:"errorMessage"`
	// Time is the time stamp for the last condition update
	Time pulumi.StringPtrInput `pulumi:"time"`
}

func (CSIUnityStatusLastUpdateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnityStatusLastUpdate)(nil)).Elem()
}

func (i CSIUnityStatusLastUpdateArgs) ToCSIUnityStatusLastUpdateOutput() CSIUnityStatusLastUpdateOutput {
	return i.ToCSIUnityStatusLastUpdateOutputWithContext(context.Background())
}

func (i CSIUnityStatusLastUpdateArgs) ToCSIUnityStatusLastUpdateOutputWithContext(ctx context.Context) CSIUnityStatusLastUpdateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnityStatusLastUpdateOutput)
}

func (i CSIUnityStatusLastUpdateArgs) ToCSIUnityStatusLastUpdatePtrOutput() CSIUnityStatusLastUpdatePtrOutput {
	return i.ToCSIUnityStatusLastUpdatePtrOutputWithContext(context.Background())
}

func (i CSIUnityStatusLastUpdateArgs) ToCSIUnityStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIUnityStatusLastUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnityStatusLastUpdateOutput).ToCSIUnityStatusLastUpdatePtrOutputWithContext(ctx)
}

// CSIUnityStatusLastUpdatePtrInput is an input type that accepts CSIUnityStatusLastUpdateArgs, CSIUnityStatusLastUpdatePtr and CSIUnityStatusLastUpdatePtrOutput values.
// You can construct a concrete instance of `CSIUnityStatusLastUpdatePtrInput` via:
//
//          CSIUnityStatusLastUpdateArgs{...}
//
//  or:
//
//          nil
type CSIUnityStatusLastUpdatePtrInput interface {
	pulumi.Input

	ToCSIUnityStatusLastUpdatePtrOutput() CSIUnityStatusLastUpdatePtrOutput
	ToCSIUnityStatusLastUpdatePtrOutputWithContext(context.Context) CSIUnityStatusLastUpdatePtrOutput
}

type csiunityStatusLastUpdatePtrType CSIUnityStatusLastUpdateArgs

func CSIUnityStatusLastUpdatePtr(v *CSIUnityStatusLastUpdateArgs) CSIUnityStatusLastUpdatePtrInput {
	return (*csiunityStatusLastUpdatePtrType)(v)
}

func (*csiunityStatusLastUpdatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnityStatusLastUpdate)(nil)).Elem()
}

func (i *csiunityStatusLastUpdatePtrType) ToCSIUnityStatusLastUpdatePtrOutput() CSIUnityStatusLastUpdatePtrOutput {
	return i.ToCSIUnityStatusLastUpdatePtrOutputWithContext(context.Background())
}

func (i *csiunityStatusLastUpdatePtrType) ToCSIUnityStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIUnityStatusLastUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnityStatusLastUpdatePtrOutput)
}

// LastUpdate is the last updated state of the driver
type CSIUnityStatusLastUpdateOutput struct{ *pulumi.OutputState }

func (CSIUnityStatusLastUpdateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnityStatusLastUpdate)(nil)).Elem()
}

func (o CSIUnityStatusLastUpdateOutput) ToCSIUnityStatusLastUpdateOutput() CSIUnityStatusLastUpdateOutput {
	return o
}

func (o CSIUnityStatusLastUpdateOutput) ToCSIUnityStatusLastUpdateOutputWithContext(ctx context.Context) CSIUnityStatusLastUpdateOutput {
	return o
}

func (o CSIUnityStatusLastUpdateOutput) ToCSIUnityStatusLastUpdatePtrOutput() CSIUnityStatusLastUpdatePtrOutput {
	return o.ToCSIUnityStatusLastUpdatePtrOutputWithContext(context.Background())
}

func (o CSIUnityStatusLastUpdateOutput) ToCSIUnityStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIUnityStatusLastUpdatePtrOutput {
	return o.ApplyT(func(v CSIUnityStatusLastUpdate) *CSIUnityStatusLastUpdate {
		return &v
	}).(CSIUnityStatusLastUpdatePtrOutput)
}

// Condition is the last known condition of the Custom Resource
func (o CSIUnityStatusLastUpdateOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnityStatusLastUpdate) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

// ErrorMessage is the last error message associated with the condition
func (o CSIUnityStatusLastUpdateOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnityStatusLastUpdate) *string { return v.ErrorMessage }).(pulumi.StringPtrOutput)
}

// Time is the time stamp for the last condition update
func (o CSIUnityStatusLastUpdateOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnityStatusLastUpdate) *string { return v.Time }).(pulumi.StringPtrOutput)
}

type CSIUnityStatusLastUpdatePtrOutput struct{ *pulumi.OutputState }

func (CSIUnityStatusLastUpdatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnityStatusLastUpdate)(nil)).Elem()
}

func (o CSIUnityStatusLastUpdatePtrOutput) ToCSIUnityStatusLastUpdatePtrOutput() CSIUnityStatusLastUpdatePtrOutput {
	return o
}

func (o CSIUnityStatusLastUpdatePtrOutput) ToCSIUnityStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIUnityStatusLastUpdatePtrOutput {
	return o
}

func (o CSIUnityStatusLastUpdatePtrOutput) Elem() CSIUnityStatusLastUpdateOutput {
	return o.ApplyT(func(v *CSIUnityStatusLastUpdate) CSIUnityStatusLastUpdate { return *v }).(CSIUnityStatusLastUpdateOutput)
}

// Condition is the last known condition of the Custom Resource
func (o CSIUnityStatusLastUpdatePtrOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnityStatusLastUpdate) *string {
		if v == nil {
			return nil
		}
		return v.Condition
	}).(pulumi.StringPtrOutput)
}

// ErrorMessage is the last error message associated with the condition
func (o CSIUnityStatusLastUpdatePtrOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnityStatusLastUpdate) *string {
		if v == nil {
			return nil
		}
		return v.ErrorMessage
	}).(pulumi.StringPtrOutput)
}

// Time is the time stamp for the last condition update
func (o CSIUnityStatusLastUpdatePtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnityStatusLastUpdate) *string {
		if v == nil {
			return nil
		}
		return v.Time
	}).(pulumi.StringPtrOutput)
}

// NodeStatus is the status of Controller pods
type CSIUnityStatusNodeStatus struct {
	Available []string `pulumi:"available"`
	Ready     []string `pulumi:"ready"`
	Starting  []string `pulumi:"starting"`
	Stopped   []string `pulumi:"stopped"`
}

// CSIUnityStatusNodeStatusInput is an input type that accepts CSIUnityStatusNodeStatusArgs and CSIUnityStatusNodeStatusOutput values.
// You can construct a concrete instance of `CSIUnityStatusNodeStatusInput` via:
//
//          CSIUnityStatusNodeStatusArgs{...}
type CSIUnityStatusNodeStatusInput interface {
	pulumi.Input

	ToCSIUnityStatusNodeStatusOutput() CSIUnityStatusNodeStatusOutput
	ToCSIUnityStatusNodeStatusOutputWithContext(context.Context) CSIUnityStatusNodeStatusOutput
}

// NodeStatus is the status of Controller pods
type CSIUnityStatusNodeStatusArgs struct {
	Available pulumi.StringArrayInput `pulumi:"available"`
	Ready     pulumi.StringArrayInput `pulumi:"ready"`
	Starting  pulumi.StringArrayInput `pulumi:"starting"`
	Stopped   pulumi.StringArrayInput `pulumi:"stopped"`
}

func (CSIUnityStatusNodeStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnityStatusNodeStatus)(nil)).Elem()
}

func (i CSIUnityStatusNodeStatusArgs) ToCSIUnityStatusNodeStatusOutput() CSIUnityStatusNodeStatusOutput {
	return i.ToCSIUnityStatusNodeStatusOutputWithContext(context.Background())
}

func (i CSIUnityStatusNodeStatusArgs) ToCSIUnityStatusNodeStatusOutputWithContext(ctx context.Context) CSIUnityStatusNodeStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnityStatusNodeStatusOutput)
}

func (i CSIUnityStatusNodeStatusArgs) ToCSIUnityStatusNodeStatusPtrOutput() CSIUnityStatusNodeStatusPtrOutput {
	return i.ToCSIUnityStatusNodeStatusPtrOutputWithContext(context.Background())
}

func (i CSIUnityStatusNodeStatusArgs) ToCSIUnityStatusNodeStatusPtrOutputWithContext(ctx context.Context) CSIUnityStatusNodeStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnityStatusNodeStatusOutput).ToCSIUnityStatusNodeStatusPtrOutputWithContext(ctx)
}

// CSIUnityStatusNodeStatusPtrInput is an input type that accepts CSIUnityStatusNodeStatusArgs, CSIUnityStatusNodeStatusPtr and CSIUnityStatusNodeStatusPtrOutput values.
// You can construct a concrete instance of `CSIUnityStatusNodeStatusPtrInput` via:
//
//          CSIUnityStatusNodeStatusArgs{...}
//
//  or:
//
//          nil
type CSIUnityStatusNodeStatusPtrInput interface {
	pulumi.Input

	ToCSIUnityStatusNodeStatusPtrOutput() CSIUnityStatusNodeStatusPtrOutput
	ToCSIUnityStatusNodeStatusPtrOutputWithContext(context.Context) CSIUnityStatusNodeStatusPtrOutput
}

type csiunityStatusNodeStatusPtrType CSIUnityStatusNodeStatusArgs

func CSIUnityStatusNodeStatusPtr(v *CSIUnityStatusNodeStatusArgs) CSIUnityStatusNodeStatusPtrInput {
	return (*csiunityStatusNodeStatusPtrType)(v)
}

func (*csiunityStatusNodeStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnityStatusNodeStatus)(nil)).Elem()
}

func (i *csiunityStatusNodeStatusPtrType) ToCSIUnityStatusNodeStatusPtrOutput() CSIUnityStatusNodeStatusPtrOutput {
	return i.ToCSIUnityStatusNodeStatusPtrOutputWithContext(context.Background())
}

func (i *csiunityStatusNodeStatusPtrType) ToCSIUnityStatusNodeStatusPtrOutputWithContext(ctx context.Context) CSIUnityStatusNodeStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnityStatusNodeStatusPtrOutput)
}

// NodeStatus is the status of Controller pods
type CSIUnityStatusNodeStatusOutput struct{ *pulumi.OutputState }

func (CSIUnityStatusNodeStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnityStatusNodeStatus)(nil)).Elem()
}

func (o CSIUnityStatusNodeStatusOutput) ToCSIUnityStatusNodeStatusOutput() CSIUnityStatusNodeStatusOutput {
	return o
}

func (o CSIUnityStatusNodeStatusOutput) ToCSIUnityStatusNodeStatusOutputWithContext(ctx context.Context) CSIUnityStatusNodeStatusOutput {
	return o
}

func (o CSIUnityStatusNodeStatusOutput) ToCSIUnityStatusNodeStatusPtrOutput() CSIUnityStatusNodeStatusPtrOutput {
	return o.ToCSIUnityStatusNodeStatusPtrOutputWithContext(context.Background())
}

func (o CSIUnityStatusNodeStatusOutput) ToCSIUnityStatusNodeStatusPtrOutputWithContext(ctx context.Context) CSIUnityStatusNodeStatusPtrOutput {
	return o.ApplyT(func(v CSIUnityStatusNodeStatus) *CSIUnityStatusNodeStatus {
		return &v
	}).(CSIUnityStatusNodeStatusPtrOutput)
}
func (o CSIUnityStatusNodeStatusOutput) Available() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIUnityStatusNodeStatus) []string { return v.Available }).(pulumi.StringArrayOutput)
}

func (o CSIUnityStatusNodeStatusOutput) Ready() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIUnityStatusNodeStatus) []string { return v.Ready }).(pulumi.StringArrayOutput)
}

func (o CSIUnityStatusNodeStatusOutput) Starting() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIUnityStatusNodeStatus) []string { return v.Starting }).(pulumi.StringArrayOutput)
}

func (o CSIUnityStatusNodeStatusOutput) Stopped() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIUnityStatusNodeStatus) []string { return v.Stopped }).(pulumi.StringArrayOutput)
}

type CSIUnityStatusNodeStatusPtrOutput struct{ *pulumi.OutputState }

func (CSIUnityStatusNodeStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnityStatusNodeStatus)(nil)).Elem()
}

func (o CSIUnityStatusNodeStatusPtrOutput) ToCSIUnityStatusNodeStatusPtrOutput() CSIUnityStatusNodeStatusPtrOutput {
	return o
}

func (o CSIUnityStatusNodeStatusPtrOutput) ToCSIUnityStatusNodeStatusPtrOutputWithContext(ctx context.Context) CSIUnityStatusNodeStatusPtrOutput {
	return o
}

func (o CSIUnityStatusNodeStatusPtrOutput) Elem() CSIUnityStatusNodeStatusOutput {
	return o.ApplyT(func(v *CSIUnityStatusNodeStatus) CSIUnityStatusNodeStatus { return *v }).(CSIUnityStatusNodeStatusOutput)
}

func (o CSIUnityStatusNodeStatusPtrOutput) Available() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIUnityStatusNodeStatus) []string {
		if v == nil {
			return nil
		}
		return v.Available
	}).(pulumi.StringArrayOutput)
}

func (o CSIUnityStatusNodeStatusPtrOutput) Ready() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIUnityStatusNodeStatus) []string {
		if v == nil {
			return nil
		}
		return v.Ready
	}).(pulumi.StringArrayOutput)
}

func (o CSIUnityStatusNodeStatusPtrOutput) Starting() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIUnityStatusNodeStatus) []string {
		if v == nil {
			return nil
		}
		return v.Starting
	}).(pulumi.StringArrayOutput)
}

func (o CSIUnityStatusNodeStatusPtrOutput) Stopped() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIUnityStatusNodeStatus) []string {
		if v == nil {
			return nil
		}
		return v.Stopped
	}).(pulumi.StringArrayOutput)
}

// CSIVXFlexOS is the Schema for the csivxflexoses API
type CSIVXFlexOSType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// CSIVXFlexOSSpec defines the desired state of CSIVXFlexOS
	Spec *CSIVXFlexOSSpec `pulumi:"spec"`
	// DriverStatus defines the observed state of CSIDriver
	Status *CSIVXFlexOSStatus `pulumi:"status"`
}

// CSIVXFlexOSTypeInput is an input type that accepts CSIVXFlexOSTypeArgs and CSIVXFlexOSTypeOutput values.
// You can construct a concrete instance of `CSIVXFlexOSTypeInput` via:
//
//          CSIVXFlexOSTypeArgs{...}
type CSIVXFlexOSTypeInput interface {
	pulumi.Input

	ToCSIVXFlexOSTypeOutput() CSIVXFlexOSTypeOutput
	ToCSIVXFlexOSTypeOutputWithContext(context.Context) CSIVXFlexOSTypeOutput
}

// CSIVXFlexOS is the Schema for the csivxflexoses API
type CSIVXFlexOSTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// CSIVXFlexOSSpec defines the desired state of CSIVXFlexOS
	Spec CSIVXFlexOSSpecPtrInput `pulumi:"spec"`
	// DriverStatus defines the observed state of CSIDriver
	Status CSIVXFlexOSStatusPtrInput `pulumi:"status"`
}

func (CSIVXFlexOSTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSType)(nil)).Elem()
}

func (i CSIVXFlexOSTypeArgs) ToCSIVXFlexOSTypeOutput() CSIVXFlexOSTypeOutput {
	return i.ToCSIVXFlexOSTypeOutputWithContext(context.Background())
}

func (i CSIVXFlexOSTypeArgs) ToCSIVXFlexOSTypeOutputWithContext(ctx context.Context) CSIVXFlexOSTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSTypeOutput)
}

// CSIVXFlexOS is the Schema for the csivxflexoses API
type CSIVXFlexOSTypeOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSType)(nil)).Elem()
}

func (o CSIVXFlexOSTypeOutput) ToCSIVXFlexOSTypeOutput() CSIVXFlexOSTypeOutput {
	return o
}

func (o CSIVXFlexOSTypeOutput) ToCSIVXFlexOSTypeOutputWithContext(ctx context.Context) CSIVXFlexOSTypeOutput {
	return o
}

func (o CSIVXFlexOSTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o CSIVXFlexOSTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o CSIVXFlexOSTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// CSIVXFlexOSSpec defines the desired state of CSIVXFlexOS
func (o CSIVXFlexOSTypeOutput) Spec() CSIVXFlexOSSpecPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSType) *CSIVXFlexOSSpec { return v.Spec }).(CSIVXFlexOSSpecPtrOutput)
}

// DriverStatus defines the observed state of CSIDriver
func (o CSIVXFlexOSTypeOutput) Status() CSIVXFlexOSStatusPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSType) *CSIVXFlexOSStatus { return v.Status }).(CSIVXFlexOSStatusPtrOutput)
}

type CSIVXFlexOSMetadata struct {
}

// CSIVXFlexOSMetadataInput is an input type that accepts CSIVXFlexOSMetadataArgs and CSIVXFlexOSMetadataOutput values.
// You can construct a concrete instance of `CSIVXFlexOSMetadataInput` via:
//
//          CSIVXFlexOSMetadataArgs{...}
type CSIVXFlexOSMetadataInput interface {
	pulumi.Input

	ToCSIVXFlexOSMetadataOutput() CSIVXFlexOSMetadataOutput
	ToCSIVXFlexOSMetadataOutputWithContext(context.Context) CSIVXFlexOSMetadataOutput
}

type CSIVXFlexOSMetadataArgs struct {
}

func (CSIVXFlexOSMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSMetadata)(nil)).Elem()
}

func (i CSIVXFlexOSMetadataArgs) ToCSIVXFlexOSMetadataOutput() CSIVXFlexOSMetadataOutput {
	return i.ToCSIVXFlexOSMetadataOutputWithContext(context.Background())
}

func (i CSIVXFlexOSMetadataArgs) ToCSIVXFlexOSMetadataOutputWithContext(ctx context.Context) CSIVXFlexOSMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSMetadataOutput)
}

type CSIVXFlexOSMetadataOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSMetadata)(nil)).Elem()
}

func (o CSIVXFlexOSMetadataOutput) ToCSIVXFlexOSMetadataOutput() CSIVXFlexOSMetadataOutput {
	return o
}

func (o CSIVXFlexOSMetadataOutput) ToCSIVXFlexOSMetadataOutputWithContext(ctx context.Context) CSIVXFlexOSMetadataOutput {
	return o
}

// CSIVXFlexOSSpec defines the desired state of CSIVXFlexOS
type CSIVXFlexOSSpec struct {
	// Driver is the specification for the CSI VxFlexOS Driver
	Driver CSIVXFlexOSSpecDriver `pulumi:"driver"`
}

// CSIVXFlexOSSpecInput is an input type that accepts CSIVXFlexOSSpecArgs and CSIVXFlexOSSpecOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecInput` via:
//
//          CSIVXFlexOSSpecArgs{...}
type CSIVXFlexOSSpecInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecOutput() CSIVXFlexOSSpecOutput
	ToCSIVXFlexOSSpecOutputWithContext(context.Context) CSIVXFlexOSSpecOutput
}

// CSIVXFlexOSSpec defines the desired state of CSIVXFlexOS
type CSIVXFlexOSSpecArgs struct {
	// Driver is the specification for the CSI VxFlexOS Driver
	Driver CSIVXFlexOSSpecDriverInput `pulumi:"driver"`
}

func (CSIVXFlexOSSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpec)(nil)).Elem()
}

func (i CSIVXFlexOSSpecArgs) ToCSIVXFlexOSSpecOutput() CSIVXFlexOSSpecOutput {
	return i.ToCSIVXFlexOSSpecOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecArgs) ToCSIVXFlexOSSpecOutputWithContext(ctx context.Context) CSIVXFlexOSSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecOutput)
}

func (i CSIVXFlexOSSpecArgs) ToCSIVXFlexOSSpecPtrOutput() CSIVXFlexOSSpecPtrOutput {
	return i.ToCSIVXFlexOSSpecPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecArgs) ToCSIVXFlexOSSpecPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecOutput).ToCSIVXFlexOSSpecPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecPtrInput is an input type that accepts CSIVXFlexOSSpecArgs, CSIVXFlexOSSpecPtr and CSIVXFlexOSSpecPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecPtrInput` via:
//
//          CSIVXFlexOSSpecArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecPtrOutput() CSIVXFlexOSSpecPtrOutput
	ToCSIVXFlexOSSpecPtrOutputWithContext(context.Context) CSIVXFlexOSSpecPtrOutput
}

type csivxflexOSSpecPtrType CSIVXFlexOSSpecArgs

func CSIVXFlexOSSpecPtr(v *CSIVXFlexOSSpecArgs) CSIVXFlexOSSpecPtrInput {
	return (*csivxflexOSSpecPtrType)(v)
}

func (*csivxflexOSSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpec)(nil)).Elem()
}

func (i *csivxflexOSSpecPtrType) ToCSIVXFlexOSSpecPtrOutput() CSIVXFlexOSSpecPtrOutput {
	return i.ToCSIVXFlexOSSpecPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecPtrType) ToCSIVXFlexOSSpecPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecPtrOutput)
}

// CSIVXFlexOSSpec defines the desired state of CSIVXFlexOS
type CSIVXFlexOSSpecOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpec)(nil)).Elem()
}

func (o CSIVXFlexOSSpecOutput) ToCSIVXFlexOSSpecOutput() CSIVXFlexOSSpecOutput {
	return o
}

func (o CSIVXFlexOSSpecOutput) ToCSIVXFlexOSSpecOutputWithContext(ctx context.Context) CSIVXFlexOSSpecOutput {
	return o
}

func (o CSIVXFlexOSSpecOutput) ToCSIVXFlexOSSpecPtrOutput() CSIVXFlexOSSpecPtrOutput {
	return o.ToCSIVXFlexOSSpecPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecOutput) ToCSIVXFlexOSSpecPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpec) *CSIVXFlexOSSpec {
		return &v
	}).(CSIVXFlexOSSpecPtrOutput)
}

// Driver is the specification for the CSI VxFlexOS Driver
func (o CSIVXFlexOSSpecOutput) Driver() CSIVXFlexOSSpecDriverOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpec) CSIVXFlexOSSpecDriver { return v.Driver }).(CSIVXFlexOSSpecDriverOutput)
}

type CSIVXFlexOSSpecPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpec)(nil)).Elem()
}

func (o CSIVXFlexOSSpecPtrOutput) ToCSIVXFlexOSSpecPtrOutput() CSIVXFlexOSSpecPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecPtrOutput) ToCSIVXFlexOSSpecPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecPtrOutput) Elem() CSIVXFlexOSSpecOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpec) CSIVXFlexOSSpec { return *v }).(CSIVXFlexOSSpecOutput)
}

// Driver is the specification for the CSI VxFlexOS Driver
func (o CSIVXFlexOSSpecPtrOutput) Driver() CSIVXFlexOSSpecDriverPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpec) *CSIVXFlexOSSpecDriver {
		if v == nil {
			return nil
		}
		return &v.Driver
	}).(CSIVXFlexOSSpecDriverPtrOutput)
}

// Driver is the specification for the CSI VxFlexOS Driver
type CSIVXFlexOSSpecDriver struct {
	// AuthSecret is the name of the credentials secret for the driver
	AuthSecret *string `pulumi:"authSecret"`
	// Common is the common specification for both controller and node plugins
	Common CSIVXFlexOSSpecDriverCommon `pulumi:"common"`
	// ConfigVersion is the configuration version of the driver
	ConfigVersion string `pulumi:"configVersion"`
	// Controller is the specification for Controller plugin only
	Controller *CSIVXFlexOSSpecDriverController `pulumi:"controller"`
	// ForceUpdate is the boolean flag used to force an update of the driver instance
	ForceUpdate *bool `pulumi:"forceUpdate"`
	// Node is the specification for Node plugin only
	Node *CSIVXFlexOSSpecDriverNode `pulumi:"node"`
	// Replicas is the count of controllers for Controller plugin
	Replicas int `pulumi:"replicas"`
	// SideCars is the specification for CSI sidecar containers
	SideCars []CSIVXFlexOSSpecDriverSideCars `pulumi:"sideCars"`
	// SnapshotClass is the specification for Snapshot Classes
	SnapshotClass []CSIVXFlexOSSpecDriverSnapshotClass `pulumi:"snapshotClass"`
	// StorageClass is the specification for Storage Classes
	StorageClass []CSIVXFlexOSSpecDriverStorageClass `pulumi:"storageClass"`
	// TLSCertSecret is the name of the TLS Cert secret
	TlsCertSecret *string `pulumi:"tlsCertSecret"`
}

// CSIVXFlexOSSpecDriverInput is an input type that accepts CSIVXFlexOSSpecDriverArgs and CSIVXFlexOSSpecDriverOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverInput` via:
//
//          CSIVXFlexOSSpecDriverArgs{...}
type CSIVXFlexOSSpecDriverInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverOutput() CSIVXFlexOSSpecDriverOutput
	ToCSIVXFlexOSSpecDriverOutputWithContext(context.Context) CSIVXFlexOSSpecDriverOutput
}

// Driver is the specification for the CSI VxFlexOS Driver
type CSIVXFlexOSSpecDriverArgs struct {
	// AuthSecret is the name of the credentials secret for the driver
	AuthSecret pulumi.StringPtrInput `pulumi:"authSecret"`
	// Common is the common specification for both controller and node plugins
	Common CSIVXFlexOSSpecDriverCommonInput `pulumi:"common"`
	// ConfigVersion is the configuration version of the driver
	ConfigVersion pulumi.StringInput `pulumi:"configVersion"`
	// Controller is the specification for Controller plugin only
	Controller CSIVXFlexOSSpecDriverControllerPtrInput `pulumi:"controller"`
	// ForceUpdate is the boolean flag used to force an update of the driver instance
	ForceUpdate pulumi.BoolPtrInput `pulumi:"forceUpdate"`
	// Node is the specification for Node plugin only
	Node CSIVXFlexOSSpecDriverNodePtrInput `pulumi:"node"`
	// Replicas is the count of controllers for Controller plugin
	Replicas pulumi.IntInput `pulumi:"replicas"`
	// SideCars is the specification for CSI sidecar containers
	SideCars CSIVXFlexOSSpecDriverSideCarsArrayInput `pulumi:"sideCars"`
	// SnapshotClass is the specification for Snapshot Classes
	SnapshotClass CSIVXFlexOSSpecDriverSnapshotClassArrayInput `pulumi:"snapshotClass"`
	// StorageClass is the specification for Storage Classes
	StorageClass CSIVXFlexOSSpecDriverStorageClassArrayInput `pulumi:"storageClass"`
	// TLSCertSecret is the name of the TLS Cert secret
	TlsCertSecret pulumi.StringPtrInput `pulumi:"tlsCertSecret"`
}

func (CSIVXFlexOSSpecDriverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriver)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverArgs) ToCSIVXFlexOSSpecDriverOutput() CSIVXFlexOSSpecDriverOutput {
	return i.ToCSIVXFlexOSSpecDriverOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverArgs) ToCSIVXFlexOSSpecDriverOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverOutput)
}

func (i CSIVXFlexOSSpecDriverArgs) ToCSIVXFlexOSSpecDriverPtrOutput() CSIVXFlexOSSpecDriverPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverArgs) ToCSIVXFlexOSSpecDriverPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverOutput).ToCSIVXFlexOSSpecDriverPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverPtrInput is an input type that accepts CSIVXFlexOSSpecDriverArgs, CSIVXFlexOSSpecDriverPtr and CSIVXFlexOSSpecDriverPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverPtrInput` via:
//
//          CSIVXFlexOSSpecDriverArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverPtrOutput() CSIVXFlexOSSpecDriverPtrOutput
	ToCSIVXFlexOSSpecDriverPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverPtrOutput
}

type csivxflexOSSpecDriverPtrType CSIVXFlexOSSpecDriverArgs

func CSIVXFlexOSSpecDriverPtr(v *CSIVXFlexOSSpecDriverArgs) CSIVXFlexOSSpecDriverPtrInput {
	return (*csivxflexOSSpecDriverPtrType)(v)
}

func (*csivxflexOSSpecDriverPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriver)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverPtrType) ToCSIVXFlexOSSpecDriverPtrOutput() CSIVXFlexOSSpecDriverPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverPtrType) ToCSIVXFlexOSSpecDriverPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverPtrOutput)
}

// Driver is the specification for the CSI VxFlexOS Driver
type CSIVXFlexOSSpecDriverOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriver)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverOutput) ToCSIVXFlexOSSpecDriverOutput() CSIVXFlexOSSpecDriverOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverOutput) ToCSIVXFlexOSSpecDriverOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverOutput) ToCSIVXFlexOSSpecDriverPtrOutput() CSIVXFlexOSSpecDriverPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverOutput) ToCSIVXFlexOSSpecDriverPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriver) *CSIVXFlexOSSpecDriver {
		return &v
	}).(CSIVXFlexOSSpecDriverPtrOutput)
}

// AuthSecret is the name of the credentials secret for the driver
func (o CSIVXFlexOSSpecDriverOutput) AuthSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriver) *string { return v.AuthSecret }).(pulumi.StringPtrOutput)
}

// Common is the common specification for both controller and node plugins
func (o CSIVXFlexOSSpecDriverOutput) Common() CSIVXFlexOSSpecDriverCommonOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriver) CSIVXFlexOSSpecDriverCommon { return v.Common }).(CSIVXFlexOSSpecDriverCommonOutput)
}

// ConfigVersion is the configuration version of the driver
func (o CSIVXFlexOSSpecDriverOutput) ConfigVersion() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriver) string { return v.ConfigVersion }).(pulumi.StringOutput)
}

// Controller is the specification for Controller plugin only
func (o CSIVXFlexOSSpecDriverOutput) Controller() CSIVXFlexOSSpecDriverControllerPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriver) *CSIVXFlexOSSpecDriverController { return v.Controller }).(CSIVXFlexOSSpecDriverControllerPtrOutput)
}

// ForceUpdate is the boolean flag used to force an update of the driver instance
func (o CSIVXFlexOSSpecDriverOutput) ForceUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriver) *bool { return v.ForceUpdate }).(pulumi.BoolPtrOutput)
}

// Node is the specification for Node plugin only
func (o CSIVXFlexOSSpecDriverOutput) Node() CSIVXFlexOSSpecDriverNodePtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriver) *CSIVXFlexOSSpecDriverNode { return v.Node }).(CSIVXFlexOSSpecDriverNodePtrOutput)
}

// Replicas is the count of controllers for Controller plugin
func (o CSIVXFlexOSSpecDriverOutput) Replicas() pulumi.IntOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriver) int { return v.Replicas }).(pulumi.IntOutput)
}

// SideCars is the specification for CSI sidecar containers
func (o CSIVXFlexOSSpecDriverOutput) SideCars() CSIVXFlexOSSpecDriverSideCarsArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriver) []CSIVXFlexOSSpecDriverSideCars { return v.SideCars }).(CSIVXFlexOSSpecDriverSideCarsArrayOutput)
}

// SnapshotClass is the specification for Snapshot Classes
func (o CSIVXFlexOSSpecDriverOutput) SnapshotClass() CSIVXFlexOSSpecDriverSnapshotClassArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriver) []CSIVXFlexOSSpecDriverSnapshotClass { return v.SnapshotClass }).(CSIVXFlexOSSpecDriverSnapshotClassArrayOutput)
}

// StorageClass is the specification for Storage Classes
func (o CSIVXFlexOSSpecDriverOutput) StorageClass() CSIVXFlexOSSpecDriverStorageClassArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriver) []CSIVXFlexOSSpecDriverStorageClass { return v.StorageClass }).(CSIVXFlexOSSpecDriverStorageClassArrayOutput)
}

// TLSCertSecret is the name of the TLS Cert secret
func (o CSIVXFlexOSSpecDriverOutput) TlsCertSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriver) *string { return v.TlsCertSecret }).(pulumi.StringPtrOutput)
}

type CSIVXFlexOSSpecDriverPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriver)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverPtrOutput) ToCSIVXFlexOSSpecDriverPtrOutput() CSIVXFlexOSSpecDriverPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverPtrOutput) ToCSIVXFlexOSSpecDriverPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverPtrOutput) Elem() CSIVXFlexOSSpecDriverOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriver) CSIVXFlexOSSpecDriver { return *v }).(CSIVXFlexOSSpecDriverOutput)
}

// AuthSecret is the name of the credentials secret for the driver
func (o CSIVXFlexOSSpecDriverPtrOutput) AuthSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriver) *string {
		if v == nil {
			return nil
		}
		return v.AuthSecret
	}).(pulumi.StringPtrOutput)
}

// Common is the common specification for both controller and node plugins
func (o CSIVXFlexOSSpecDriverPtrOutput) Common() CSIVXFlexOSSpecDriverCommonPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriver) *CSIVXFlexOSSpecDriverCommon {
		if v == nil {
			return nil
		}
		return &v.Common
	}).(CSIVXFlexOSSpecDriverCommonPtrOutput)
}

// ConfigVersion is the configuration version of the driver
func (o CSIVXFlexOSSpecDriverPtrOutput) ConfigVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriver) *string {
		if v == nil {
			return nil
		}
		return &v.ConfigVersion
	}).(pulumi.StringPtrOutput)
}

// Controller is the specification for Controller plugin only
func (o CSIVXFlexOSSpecDriverPtrOutput) Controller() CSIVXFlexOSSpecDriverControllerPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriver) *CSIVXFlexOSSpecDriverController {
		if v == nil {
			return nil
		}
		return v.Controller
	}).(CSIVXFlexOSSpecDriverControllerPtrOutput)
}

// ForceUpdate is the boolean flag used to force an update of the driver instance
func (o CSIVXFlexOSSpecDriverPtrOutput) ForceUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriver) *bool {
		if v == nil {
			return nil
		}
		return v.ForceUpdate
	}).(pulumi.BoolPtrOutput)
}

// Node is the specification for Node plugin only
func (o CSIVXFlexOSSpecDriverPtrOutput) Node() CSIVXFlexOSSpecDriverNodePtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriver) *CSIVXFlexOSSpecDriverNode {
		if v == nil {
			return nil
		}
		return v.Node
	}).(CSIVXFlexOSSpecDriverNodePtrOutput)
}

// Replicas is the count of controllers for Controller plugin
func (o CSIVXFlexOSSpecDriverPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriver) *int {
		if v == nil {
			return nil
		}
		return &v.Replicas
	}).(pulumi.IntPtrOutput)
}

// SideCars is the specification for CSI sidecar containers
func (o CSIVXFlexOSSpecDriverPtrOutput) SideCars() CSIVXFlexOSSpecDriverSideCarsArrayOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriver) []CSIVXFlexOSSpecDriverSideCars {
		if v == nil {
			return nil
		}
		return v.SideCars
	}).(CSIVXFlexOSSpecDriverSideCarsArrayOutput)
}

// SnapshotClass is the specification for Snapshot Classes
func (o CSIVXFlexOSSpecDriverPtrOutput) SnapshotClass() CSIVXFlexOSSpecDriverSnapshotClassArrayOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriver) []CSIVXFlexOSSpecDriverSnapshotClass {
		if v == nil {
			return nil
		}
		return v.SnapshotClass
	}).(CSIVXFlexOSSpecDriverSnapshotClassArrayOutput)
}

// StorageClass is the specification for Storage Classes
func (o CSIVXFlexOSSpecDriverPtrOutput) StorageClass() CSIVXFlexOSSpecDriverStorageClassArrayOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriver) []CSIVXFlexOSSpecDriverStorageClass {
		if v == nil {
			return nil
		}
		return v.StorageClass
	}).(CSIVXFlexOSSpecDriverStorageClassArrayOutput)
}

// TLSCertSecret is the name of the TLS Cert secret
func (o CSIVXFlexOSSpecDriverPtrOutput) TlsCertSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriver) *string {
		if v == nil {
			return nil
		}
		return v.TlsCertSecret
	}).(pulumi.StringPtrOutput)
}

// Common is the common specification for both controller and node plugins
type CSIVXFlexOSSpecDriverCommon struct {
	// Args is the set of arguments for the container
	Args []string `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs []CSIVXFlexOSSpecDriverCommonEnvs `pulumi:"envs"`
	// Image is the image tag for the Container
	Image *string `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name *string `pulumi:"name"`
}

// CSIVXFlexOSSpecDriverCommonInput is an input type that accepts CSIVXFlexOSSpecDriverCommonArgs and CSIVXFlexOSSpecDriverCommonOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverCommonInput` via:
//
//          CSIVXFlexOSSpecDriverCommonArgs{...}
type CSIVXFlexOSSpecDriverCommonInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverCommonOutput() CSIVXFlexOSSpecDriverCommonOutput
	ToCSIVXFlexOSSpecDriverCommonOutputWithContext(context.Context) CSIVXFlexOSSpecDriverCommonOutput
}

// Common is the common specification for both controller and node plugins
type CSIVXFlexOSSpecDriverCommonArgs struct {
	// Args is the set of arguments for the container
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs CSIVXFlexOSSpecDriverCommonEnvsArrayInput `pulumi:"envs"`
	// Image is the image tag for the Container
	Image pulumi.StringPtrInput `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (CSIVXFlexOSSpecDriverCommonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverCommon)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverCommonArgs) ToCSIVXFlexOSSpecDriverCommonOutput() CSIVXFlexOSSpecDriverCommonOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverCommonArgs) ToCSIVXFlexOSSpecDriverCommonOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonOutput)
}

func (i CSIVXFlexOSSpecDriverCommonArgs) ToCSIVXFlexOSSpecDriverCommonPtrOutput() CSIVXFlexOSSpecDriverCommonPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverCommonArgs) ToCSIVXFlexOSSpecDriverCommonPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonOutput).ToCSIVXFlexOSSpecDriverCommonPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverCommonPtrInput is an input type that accepts CSIVXFlexOSSpecDriverCommonArgs, CSIVXFlexOSSpecDriverCommonPtr and CSIVXFlexOSSpecDriverCommonPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverCommonPtrInput` via:
//
//          CSIVXFlexOSSpecDriverCommonArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverCommonPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverCommonPtrOutput() CSIVXFlexOSSpecDriverCommonPtrOutput
	ToCSIVXFlexOSSpecDriverCommonPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverCommonPtrOutput
}

type csivxflexOSSpecDriverCommonPtrType CSIVXFlexOSSpecDriverCommonArgs

func CSIVXFlexOSSpecDriverCommonPtr(v *CSIVXFlexOSSpecDriverCommonArgs) CSIVXFlexOSSpecDriverCommonPtrInput {
	return (*csivxflexOSSpecDriverCommonPtrType)(v)
}

func (*csivxflexOSSpecDriverCommonPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverCommon)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverCommonPtrType) ToCSIVXFlexOSSpecDriverCommonPtrOutput() CSIVXFlexOSSpecDriverCommonPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverCommonPtrType) ToCSIVXFlexOSSpecDriverCommonPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonPtrOutput)
}

// Common is the common specification for both controller and node plugins
type CSIVXFlexOSSpecDriverCommonOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverCommonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverCommon)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverCommonOutput) ToCSIVXFlexOSSpecDriverCommonOutput() CSIVXFlexOSSpecDriverCommonOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonOutput) ToCSIVXFlexOSSpecDriverCommonOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonOutput) ToCSIVXFlexOSSpecDriverCommonPtrOutput() CSIVXFlexOSSpecDriverCommonPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverCommonPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverCommonOutput) ToCSIVXFlexOSSpecDriverCommonPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommon) *CSIVXFlexOSSpecDriverCommon {
		return &v
	}).(CSIVXFlexOSSpecDriverCommonPtrOutput)
}

// Args is the set of arguments for the container
func (o CSIVXFlexOSSpecDriverCommonOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommon) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIVXFlexOSSpecDriverCommonOutput) Envs() CSIVXFlexOSSpecDriverCommonEnvsArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommon) []CSIVXFlexOSSpecDriverCommonEnvs { return v.Envs }).(CSIVXFlexOSSpecDriverCommonEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIVXFlexOSSpecDriverCommonOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommon) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIVXFlexOSSpecDriverCommonOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommon) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIVXFlexOSSpecDriverCommonOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommon) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CSIVXFlexOSSpecDriverCommonPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverCommonPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverCommon)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverCommonPtrOutput) ToCSIVXFlexOSSpecDriverCommonPtrOutput() CSIVXFlexOSSpecDriverCommonPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonPtrOutput) ToCSIVXFlexOSSpecDriverCommonPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonPtrOutput) Elem() CSIVXFlexOSSpecDriverCommonOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommon) CSIVXFlexOSSpecDriverCommon { return *v }).(CSIVXFlexOSSpecDriverCommonOutput)
}

// Args is the set of arguments for the container
func (o CSIVXFlexOSSpecDriverCommonPtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommon) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIVXFlexOSSpecDriverCommonPtrOutput) Envs() CSIVXFlexOSSpecDriverCommonEnvsArrayOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommon) []CSIVXFlexOSSpecDriverCommonEnvs {
		if v == nil {
			return nil
		}
		return v.Envs
	}).(CSIVXFlexOSSpecDriverCommonEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIVXFlexOSSpecDriverCommonPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommon) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIVXFlexOSSpecDriverCommonPtrOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommon) *string {
		if v == nil {
			return nil
		}
		return v.ImagePullPolicy
	}).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIVXFlexOSSpecDriverCommonPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommon) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIVXFlexOSSpecDriverCommonEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *CSIVXFlexOSSpecDriverCommonEnvsValueFrom `pulumi:"valueFrom"`
}

// CSIVXFlexOSSpecDriverCommonEnvsInput is an input type that accepts CSIVXFlexOSSpecDriverCommonEnvsArgs and CSIVXFlexOSSpecDriverCommonEnvsOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverCommonEnvsInput` via:
//
//          CSIVXFlexOSSpecDriverCommonEnvsArgs{...}
type CSIVXFlexOSSpecDriverCommonEnvsInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverCommonEnvsOutput() CSIVXFlexOSSpecDriverCommonEnvsOutput
	ToCSIVXFlexOSSpecDriverCommonEnvsOutputWithContext(context.Context) CSIVXFlexOSSpecDriverCommonEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type CSIVXFlexOSSpecDriverCommonEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (CSIVXFlexOSSpecDriverCommonEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverCommonEnvs)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverCommonEnvsArgs) ToCSIVXFlexOSSpecDriverCommonEnvsOutput() CSIVXFlexOSSpecDriverCommonEnvsOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonEnvsOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverCommonEnvsArgs) ToCSIVXFlexOSSpecDriverCommonEnvsOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonEnvsOutput)
}

// CSIVXFlexOSSpecDriverCommonEnvsArrayInput is an input type that accepts CSIVXFlexOSSpecDriverCommonEnvsArray and CSIVXFlexOSSpecDriverCommonEnvsArrayOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverCommonEnvsArrayInput` via:
//
//          CSIVXFlexOSSpecDriverCommonEnvsArray{ CSIVXFlexOSSpecDriverCommonEnvsArgs{...} }
type CSIVXFlexOSSpecDriverCommonEnvsArrayInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverCommonEnvsArrayOutput() CSIVXFlexOSSpecDriverCommonEnvsArrayOutput
	ToCSIVXFlexOSSpecDriverCommonEnvsArrayOutputWithContext(context.Context) CSIVXFlexOSSpecDriverCommonEnvsArrayOutput
}

type CSIVXFlexOSSpecDriverCommonEnvsArray []CSIVXFlexOSSpecDriverCommonEnvsInput

func (CSIVXFlexOSSpecDriverCommonEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIVXFlexOSSpecDriverCommonEnvs)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverCommonEnvsArray) ToCSIVXFlexOSSpecDriverCommonEnvsArrayOutput() CSIVXFlexOSSpecDriverCommonEnvsArrayOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonEnvsArrayOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverCommonEnvsArray) ToCSIVXFlexOSSpecDriverCommonEnvsArrayOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIVXFlexOSSpecDriverCommonEnvsOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverCommonEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverCommonEnvs)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverCommonEnvsOutput) ToCSIVXFlexOSSpecDriverCommonEnvsOutput() CSIVXFlexOSSpecDriverCommonEnvsOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsOutput) ToCSIVXFlexOSSpecDriverCommonEnvsOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o CSIVXFlexOSSpecDriverCommonEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o CSIVXFlexOSSpecDriverCommonEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o CSIVXFlexOSSpecDriverCommonEnvsOutput) ValueFrom() CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvs) *CSIVXFlexOSSpecDriverCommonEnvsValueFrom { return v.ValueFrom }).(CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput)
}

type CSIVXFlexOSSpecDriverCommonEnvsArrayOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverCommonEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIVXFlexOSSpecDriverCommonEnvs)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverCommonEnvsArrayOutput) ToCSIVXFlexOSSpecDriverCommonEnvsArrayOutput() CSIVXFlexOSSpecDriverCommonEnvsArrayOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsArrayOutput) ToCSIVXFlexOSSpecDriverCommonEnvsArrayOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsArrayOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsArrayOutput) Index(i pulumi.IntInput) CSIVXFlexOSSpecDriverCommonEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIVXFlexOSSpecDriverCommonEnvs {
		return vs[0].([]CSIVXFlexOSSpecDriverCommonEnvs)[vs[1].(int)]
	}).(CSIVXFlexOSSpecDriverCommonEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIVXFlexOSSpecDriverCommonEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef *CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// CSIVXFlexOSSpecDriverCommonEnvsValueFromInput is an input type that accepts CSIVXFlexOSSpecDriverCommonEnvsValueFromArgs and CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverCommonEnvsValueFromInput` via:
//
//          CSIVXFlexOSSpecDriverCommonEnvsValueFromArgs{...}
type CSIVXFlexOSSpecDriverCommonEnvsValueFromInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput
	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromOutputWithContext(context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIVXFlexOSSpecDriverCommonEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (CSIVXFlexOSSpecDriverCommonEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverCommonEnvsValueFrom)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput)
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput).ToCSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrInput is an input type that accepts CSIVXFlexOSSpecDriverCommonEnvsValueFromArgs, CSIVXFlexOSSpecDriverCommonEnvsValueFromPtr and CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrInput` via:
//
//          CSIVXFlexOSSpecDriverCommonEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput
	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput
}

type csivxflexOSSpecDriverCommonEnvsValueFromPtrType CSIVXFlexOSSpecDriverCommonEnvsValueFromArgs

func CSIVXFlexOSSpecDriverCommonEnvsValueFromPtr(v *CSIVXFlexOSSpecDriverCommonEnvsValueFromArgs) CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrInput {
	return (*csivxflexOSSpecDriverCommonEnvsValueFromPtrType)(v)
}

func (*csivxflexOSSpecDriverCommonEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverCommonEnvsValueFrom)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverCommonEnvsValueFromPtrType) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverCommonEnvsValueFromPtrType) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverCommonEnvsValueFrom)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvsValueFrom) *CSIVXFlexOSSpecDriverCommonEnvsValueFrom {
		return &v
	}).(CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput) ConfigMapKeyRef() CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvsValueFrom) *CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput) FieldRef() CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvsValueFrom) *CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRef {
		return v.FieldRef
	}).(CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput) ResourceFieldRef() CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvsValueFrom) *CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput) SecretKeyRef() CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvsValueFrom) *CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput)
}

type CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverCommonEnvsValueFrom)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput) Elem() CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommonEnvsValueFrom) CSIVXFlexOSSpecDriverCommonEnvsValueFrom { return *v }).(CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput) ConfigMapKeyRef() CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommonEnvsValueFrom) *CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput) FieldRef() CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommonEnvsValueFrom) *CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput) ResourceFieldRef() CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommonEnvsValueFrom) *CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput) SecretKeyRef() CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommonEnvsValueFrom) *CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefInput is an input type that accepts CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs and CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefInput` via:
//
//          CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs{...}
type CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput
	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput)
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput).ToCSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs, CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtr and CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput
	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput
}

type csivxflexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs

func CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtr(v *CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput {
	return (*csivxflexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*csivxflexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRef) *CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRef {
		return &v
	}).(CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) Elem() CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRef) CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRef {
		return *v
	}).(CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefInput is an input type that accepts CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefArgs and CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefInput` via:
//
//          CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefArgs{...}
type CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput
	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutputWithContext(context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRef)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput)
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput).ToCSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrInput is an input type that accepts CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefArgs, CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtr and CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrInput` via:
//
//          CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput
	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput
}

type csivxflexOSSpecDriverCommonEnvsValueFromFieldRefPtrType CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefArgs

func CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtr(v *CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefArgs) CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrInput {
	return (*csivxflexOSSpecDriverCommonEnvsValueFromFieldRefPtrType)(v)
}

func (*csivxflexOSSpecDriverCommonEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverCommonEnvsValueFromFieldRefPtrType) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverCommonEnvsValueFromFieldRefPtrType) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRef) *CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRef {
		return &v
	}).(CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput) Elem() CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRef) CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRef {
		return *v
	}).(CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *string `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefInput is an input type that accepts CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefArgs and CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefInput` via:
//
//          CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefArgs{...}
type CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput
	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutputWithContext(context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor pulumi.StringPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput)
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput).ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrInput is an input type that accepts CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefArgs, CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtr and CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrInput` via:
//
//          CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput
	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput
}

type csivxflexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrType CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefArgs

func CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtr(v *CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefArgs) CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrInput {
	return (*csivxflexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*csivxflexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrType) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrType) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRef) *CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRef {
		return &v
	}).(CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRef) *string { return v.Divisor }).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) Elem() CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRef) CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRef {
		return *v
	}).(CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefInput is an input type that accepts CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefArgs and CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefInput` via:
//
//          CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefArgs{...}
type CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput
	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutputWithContext(context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput)
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput).ToCSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrInput is an input type that accepts CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefArgs, CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtr and CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrInput` via:
//
//          CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput
	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput
}

type csivxflexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrType CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefArgs

func CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtr(v *CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefArgs) CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrInput {
	return (*csivxflexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*csivxflexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrType) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrType) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRef) *CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRef {
		return &v
	}).(CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) Elem() CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRef) CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRef {
		return *v
	}).(CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Controller is the specification for Controller plugin only
type CSIVXFlexOSSpecDriverController struct {
	// Args is the set of arguments for the container
	Args []string `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs []CSIVXFlexOSSpecDriverControllerEnvs `pulumi:"envs"`
	// Image is the image tag for the Container
	Image *string `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name *string `pulumi:"name"`
}

// CSIVXFlexOSSpecDriverControllerInput is an input type that accepts CSIVXFlexOSSpecDriverControllerArgs and CSIVXFlexOSSpecDriverControllerOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverControllerInput` via:
//
//          CSIVXFlexOSSpecDriverControllerArgs{...}
type CSIVXFlexOSSpecDriverControllerInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverControllerOutput() CSIVXFlexOSSpecDriverControllerOutput
	ToCSIVXFlexOSSpecDriverControllerOutputWithContext(context.Context) CSIVXFlexOSSpecDriverControllerOutput
}

// Controller is the specification for Controller plugin only
type CSIVXFlexOSSpecDriverControllerArgs struct {
	// Args is the set of arguments for the container
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs CSIVXFlexOSSpecDriverControllerEnvsArrayInput `pulumi:"envs"`
	// Image is the image tag for the Container
	Image pulumi.StringPtrInput `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (CSIVXFlexOSSpecDriverControllerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverController)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverControllerArgs) ToCSIVXFlexOSSpecDriverControllerOutput() CSIVXFlexOSSpecDriverControllerOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverControllerArgs) ToCSIVXFlexOSSpecDriverControllerOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerOutput)
}

func (i CSIVXFlexOSSpecDriverControllerArgs) ToCSIVXFlexOSSpecDriverControllerPtrOutput() CSIVXFlexOSSpecDriverControllerPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverControllerArgs) ToCSIVXFlexOSSpecDriverControllerPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerOutput).ToCSIVXFlexOSSpecDriverControllerPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverControllerPtrInput is an input type that accepts CSIVXFlexOSSpecDriverControllerArgs, CSIVXFlexOSSpecDriverControllerPtr and CSIVXFlexOSSpecDriverControllerPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverControllerPtrInput` via:
//
//          CSIVXFlexOSSpecDriverControllerArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverControllerPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverControllerPtrOutput() CSIVXFlexOSSpecDriverControllerPtrOutput
	ToCSIVXFlexOSSpecDriverControllerPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverControllerPtrOutput
}

type csivxflexOSSpecDriverControllerPtrType CSIVXFlexOSSpecDriverControllerArgs

func CSIVXFlexOSSpecDriverControllerPtr(v *CSIVXFlexOSSpecDriverControllerArgs) CSIVXFlexOSSpecDriverControllerPtrInput {
	return (*csivxflexOSSpecDriverControllerPtrType)(v)
}

func (*csivxflexOSSpecDriverControllerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverController)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverControllerPtrType) ToCSIVXFlexOSSpecDriverControllerPtrOutput() CSIVXFlexOSSpecDriverControllerPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverControllerPtrType) ToCSIVXFlexOSSpecDriverControllerPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerPtrOutput)
}

// Controller is the specification for Controller plugin only
type CSIVXFlexOSSpecDriverControllerOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverControllerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverController)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverControllerOutput) ToCSIVXFlexOSSpecDriverControllerOutput() CSIVXFlexOSSpecDriverControllerOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerOutput) ToCSIVXFlexOSSpecDriverControllerOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerOutput) ToCSIVXFlexOSSpecDriverControllerPtrOutput() CSIVXFlexOSSpecDriverControllerPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverControllerPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverControllerOutput) ToCSIVXFlexOSSpecDriverControllerPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverController) *CSIVXFlexOSSpecDriverController {
		return &v
	}).(CSIVXFlexOSSpecDriverControllerPtrOutput)
}

// Args is the set of arguments for the container
func (o CSIVXFlexOSSpecDriverControllerOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverController) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIVXFlexOSSpecDriverControllerOutput) Envs() CSIVXFlexOSSpecDriverControllerEnvsArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverController) []CSIVXFlexOSSpecDriverControllerEnvs { return v.Envs }).(CSIVXFlexOSSpecDriverControllerEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIVXFlexOSSpecDriverControllerOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverController) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIVXFlexOSSpecDriverControllerOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverController) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIVXFlexOSSpecDriverControllerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverController) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CSIVXFlexOSSpecDriverControllerPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverControllerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverController)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverControllerPtrOutput) ToCSIVXFlexOSSpecDriverControllerPtrOutput() CSIVXFlexOSSpecDriverControllerPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerPtrOutput) ToCSIVXFlexOSSpecDriverControllerPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerPtrOutput) Elem() CSIVXFlexOSSpecDriverControllerOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverController) CSIVXFlexOSSpecDriverController { return *v }).(CSIVXFlexOSSpecDriverControllerOutput)
}

// Args is the set of arguments for the container
func (o CSIVXFlexOSSpecDriverControllerPtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverController) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIVXFlexOSSpecDriverControllerPtrOutput) Envs() CSIVXFlexOSSpecDriverControllerEnvsArrayOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverController) []CSIVXFlexOSSpecDriverControllerEnvs {
		if v == nil {
			return nil
		}
		return v.Envs
	}).(CSIVXFlexOSSpecDriverControllerEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIVXFlexOSSpecDriverControllerPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverController) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIVXFlexOSSpecDriverControllerPtrOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverController) *string {
		if v == nil {
			return nil
		}
		return v.ImagePullPolicy
	}).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIVXFlexOSSpecDriverControllerPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverController) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIVXFlexOSSpecDriverControllerEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *CSIVXFlexOSSpecDriverControllerEnvsValueFrom `pulumi:"valueFrom"`
}

// CSIVXFlexOSSpecDriverControllerEnvsInput is an input type that accepts CSIVXFlexOSSpecDriverControllerEnvsArgs and CSIVXFlexOSSpecDriverControllerEnvsOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverControllerEnvsInput` via:
//
//          CSIVXFlexOSSpecDriverControllerEnvsArgs{...}
type CSIVXFlexOSSpecDriverControllerEnvsInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverControllerEnvsOutput() CSIVXFlexOSSpecDriverControllerEnvsOutput
	ToCSIVXFlexOSSpecDriverControllerEnvsOutputWithContext(context.Context) CSIVXFlexOSSpecDriverControllerEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type CSIVXFlexOSSpecDriverControllerEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (CSIVXFlexOSSpecDriverControllerEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverControllerEnvs)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverControllerEnvsArgs) ToCSIVXFlexOSSpecDriverControllerEnvsOutput() CSIVXFlexOSSpecDriverControllerEnvsOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerEnvsOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverControllerEnvsArgs) ToCSIVXFlexOSSpecDriverControllerEnvsOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerEnvsOutput)
}

// CSIVXFlexOSSpecDriverControllerEnvsArrayInput is an input type that accepts CSIVXFlexOSSpecDriverControllerEnvsArray and CSIVXFlexOSSpecDriverControllerEnvsArrayOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverControllerEnvsArrayInput` via:
//
//          CSIVXFlexOSSpecDriverControllerEnvsArray{ CSIVXFlexOSSpecDriverControllerEnvsArgs{...} }
type CSIVXFlexOSSpecDriverControllerEnvsArrayInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverControllerEnvsArrayOutput() CSIVXFlexOSSpecDriverControllerEnvsArrayOutput
	ToCSIVXFlexOSSpecDriverControllerEnvsArrayOutputWithContext(context.Context) CSIVXFlexOSSpecDriverControllerEnvsArrayOutput
}

type CSIVXFlexOSSpecDriverControllerEnvsArray []CSIVXFlexOSSpecDriverControllerEnvsInput

func (CSIVXFlexOSSpecDriverControllerEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIVXFlexOSSpecDriverControllerEnvs)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverControllerEnvsArray) ToCSIVXFlexOSSpecDriverControllerEnvsArrayOutput() CSIVXFlexOSSpecDriverControllerEnvsArrayOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerEnvsArrayOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverControllerEnvsArray) ToCSIVXFlexOSSpecDriverControllerEnvsArrayOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIVXFlexOSSpecDriverControllerEnvsOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverControllerEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverControllerEnvs)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverControllerEnvsOutput) ToCSIVXFlexOSSpecDriverControllerEnvsOutput() CSIVXFlexOSSpecDriverControllerEnvsOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsOutput) ToCSIVXFlexOSSpecDriverControllerEnvsOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o CSIVXFlexOSSpecDriverControllerEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o CSIVXFlexOSSpecDriverControllerEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o CSIVXFlexOSSpecDriverControllerEnvsOutput) ValueFrom() CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvs) *CSIVXFlexOSSpecDriverControllerEnvsValueFrom {
		return v.ValueFrom
	}).(CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput)
}

type CSIVXFlexOSSpecDriverControllerEnvsArrayOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverControllerEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIVXFlexOSSpecDriverControllerEnvs)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverControllerEnvsArrayOutput) ToCSIVXFlexOSSpecDriverControllerEnvsArrayOutput() CSIVXFlexOSSpecDriverControllerEnvsArrayOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsArrayOutput) ToCSIVXFlexOSSpecDriverControllerEnvsArrayOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsArrayOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsArrayOutput) Index(i pulumi.IntInput) CSIVXFlexOSSpecDriverControllerEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIVXFlexOSSpecDriverControllerEnvs {
		return vs[0].([]CSIVXFlexOSSpecDriverControllerEnvs)[vs[1].(int)]
	}).(CSIVXFlexOSSpecDriverControllerEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIVXFlexOSSpecDriverControllerEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef *CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// CSIVXFlexOSSpecDriverControllerEnvsValueFromInput is an input type that accepts CSIVXFlexOSSpecDriverControllerEnvsValueFromArgs and CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverControllerEnvsValueFromInput` via:
//
//          CSIVXFlexOSSpecDriverControllerEnvsValueFromArgs{...}
type CSIVXFlexOSSpecDriverControllerEnvsValueFromInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput
	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromOutputWithContext(context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIVXFlexOSSpecDriverControllerEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (CSIVXFlexOSSpecDriverControllerEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverControllerEnvsValueFrom)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput)
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput).ToCSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrInput is an input type that accepts CSIVXFlexOSSpecDriverControllerEnvsValueFromArgs, CSIVXFlexOSSpecDriverControllerEnvsValueFromPtr and CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrInput` via:
//
//          CSIVXFlexOSSpecDriverControllerEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput
	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput
}

type csivxflexOSSpecDriverControllerEnvsValueFromPtrType CSIVXFlexOSSpecDriverControllerEnvsValueFromArgs

func CSIVXFlexOSSpecDriverControllerEnvsValueFromPtr(v *CSIVXFlexOSSpecDriverControllerEnvsValueFromArgs) CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrInput {
	return (*csivxflexOSSpecDriverControllerEnvsValueFromPtrType)(v)
}

func (*csivxflexOSSpecDriverControllerEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverControllerEnvsValueFrom)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverControllerEnvsValueFromPtrType) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverControllerEnvsValueFromPtrType) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverControllerEnvsValueFrom)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvsValueFrom) *CSIVXFlexOSSpecDriverControllerEnvsValueFrom {
		return &v
	}).(CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput) ConfigMapKeyRef() CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvsValueFrom) *CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput) FieldRef() CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvsValueFrom) *CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRef {
		return v.FieldRef
	}).(CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput) ResourceFieldRef() CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvsValueFrom) *CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput) SecretKeyRef() CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvsValueFrom) *CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput)
}

type CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverControllerEnvsValueFrom)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput) Elem() CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverControllerEnvsValueFrom) CSIVXFlexOSSpecDriverControllerEnvsValueFrom {
		return *v
	}).(CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput) ConfigMapKeyRef() CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverControllerEnvsValueFrom) *CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput) FieldRef() CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverControllerEnvsValueFrom) *CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput) ResourceFieldRef() CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverControllerEnvsValueFrom) *CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput) SecretKeyRef() CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverControllerEnvsValueFrom) *CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefInput is an input type that accepts CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs and CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefInput` via:
//
//          CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs{...}
type CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput
	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput)
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput).ToCSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs, CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtr and CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput
	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput
}

type csivxflexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs

func CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtr(v *CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput {
	return (*csivxflexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*csivxflexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRef) *CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRef {
		return &v
	}).(CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) Elem() CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRef) CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRef {
		return *v
	}).(CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefInput is an input type that accepts CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefArgs and CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefInput` via:
//
//          CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefArgs{...}
type CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput
	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutputWithContext(context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRef)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput)
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput).ToCSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrInput is an input type that accepts CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefArgs, CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtr and CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrInput` via:
//
//          CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput
	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput
}

type csivxflexOSSpecDriverControllerEnvsValueFromFieldRefPtrType CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefArgs

func CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtr(v *CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefArgs) CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrInput {
	return (*csivxflexOSSpecDriverControllerEnvsValueFromFieldRefPtrType)(v)
}

func (*csivxflexOSSpecDriverControllerEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverControllerEnvsValueFromFieldRefPtrType) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverControllerEnvsValueFromFieldRefPtrType) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRef) *CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRef {
		return &v
	}).(CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput) Elem() CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRef) CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRef {
		return *v
	}).(CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *string `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefInput is an input type that accepts CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefArgs and CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefInput` via:
//
//          CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefArgs{...}
type CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput
	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutputWithContext(context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor pulumi.StringPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput)
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput).ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrInput is an input type that accepts CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefArgs, CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtr and CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrInput` via:
//
//          CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput
	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput
}

type csivxflexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrType CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefArgs

func CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtr(v *CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefArgs) CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrInput {
	return (*csivxflexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*csivxflexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrType) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrType) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRef) *CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRef {
		return &v
	}).(CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRef) *string { return v.Divisor }).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) Elem() CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRef) CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRef {
		return *v
	}).(CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefInput is an input type that accepts CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefArgs and CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefInput` via:
//
//          CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefArgs{...}
type CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput
	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutputWithContext(context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput)
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput).ToCSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrInput is an input type that accepts CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefArgs, CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtr and CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrInput` via:
//
//          CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput
	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput
}

type csivxflexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrType CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefArgs

func CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtr(v *CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefArgs) CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrInput {
	return (*csivxflexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*csivxflexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrType) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrType) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRef) *CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRef {
		return &v
	}).(CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) Elem() CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRef) CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRef {
		return *v
	}).(CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Node is the specification for Node plugin only
type CSIVXFlexOSSpecDriverNode struct {
	// Args is the set of arguments for the container
	Args []string `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs []CSIVXFlexOSSpecDriverNodeEnvs `pulumi:"envs"`
	// Image is the image tag for the Container
	Image *string `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name *string `pulumi:"name"`
}

// CSIVXFlexOSSpecDriverNodeInput is an input type that accepts CSIVXFlexOSSpecDriverNodeArgs and CSIVXFlexOSSpecDriverNodeOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverNodeInput` via:
//
//          CSIVXFlexOSSpecDriverNodeArgs{...}
type CSIVXFlexOSSpecDriverNodeInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverNodeOutput() CSIVXFlexOSSpecDriverNodeOutput
	ToCSIVXFlexOSSpecDriverNodeOutputWithContext(context.Context) CSIVXFlexOSSpecDriverNodeOutput
}

// Node is the specification for Node plugin only
type CSIVXFlexOSSpecDriverNodeArgs struct {
	// Args is the set of arguments for the container
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs CSIVXFlexOSSpecDriverNodeEnvsArrayInput `pulumi:"envs"`
	// Image is the image tag for the Container
	Image pulumi.StringPtrInput `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (CSIVXFlexOSSpecDriverNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverNode)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverNodeArgs) ToCSIVXFlexOSSpecDriverNodeOutput() CSIVXFlexOSSpecDriverNodeOutput {
	return i.ToCSIVXFlexOSSpecDriverNodeOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverNodeArgs) ToCSIVXFlexOSSpecDriverNodeOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeOutput)
}

func (i CSIVXFlexOSSpecDriverNodeArgs) ToCSIVXFlexOSSpecDriverNodePtrOutput() CSIVXFlexOSSpecDriverNodePtrOutput {
	return i.ToCSIVXFlexOSSpecDriverNodePtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverNodeArgs) ToCSIVXFlexOSSpecDriverNodePtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeOutput).ToCSIVXFlexOSSpecDriverNodePtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverNodePtrInput is an input type that accepts CSIVXFlexOSSpecDriverNodeArgs, CSIVXFlexOSSpecDriverNodePtr and CSIVXFlexOSSpecDriverNodePtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverNodePtrInput` via:
//
//          CSIVXFlexOSSpecDriverNodeArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverNodePtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverNodePtrOutput() CSIVXFlexOSSpecDriverNodePtrOutput
	ToCSIVXFlexOSSpecDriverNodePtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverNodePtrOutput
}

type csivxflexOSSpecDriverNodePtrType CSIVXFlexOSSpecDriverNodeArgs

func CSIVXFlexOSSpecDriverNodePtr(v *CSIVXFlexOSSpecDriverNodeArgs) CSIVXFlexOSSpecDriverNodePtrInput {
	return (*csivxflexOSSpecDriverNodePtrType)(v)
}

func (*csivxflexOSSpecDriverNodePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverNode)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverNodePtrType) ToCSIVXFlexOSSpecDriverNodePtrOutput() CSIVXFlexOSSpecDriverNodePtrOutput {
	return i.ToCSIVXFlexOSSpecDriverNodePtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverNodePtrType) ToCSIVXFlexOSSpecDriverNodePtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodePtrOutput)
}

// Node is the specification for Node plugin only
type CSIVXFlexOSSpecDriverNodeOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverNode)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverNodeOutput) ToCSIVXFlexOSSpecDriverNodeOutput() CSIVXFlexOSSpecDriverNodeOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeOutput) ToCSIVXFlexOSSpecDriverNodeOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeOutput) ToCSIVXFlexOSSpecDriverNodePtrOutput() CSIVXFlexOSSpecDriverNodePtrOutput {
	return o.ToCSIVXFlexOSSpecDriverNodePtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverNodeOutput) ToCSIVXFlexOSSpecDriverNodePtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodePtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNode) *CSIVXFlexOSSpecDriverNode {
		return &v
	}).(CSIVXFlexOSSpecDriverNodePtrOutput)
}

// Args is the set of arguments for the container
func (o CSIVXFlexOSSpecDriverNodeOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNode) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIVXFlexOSSpecDriverNodeOutput) Envs() CSIVXFlexOSSpecDriverNodeEnvsArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNode) []CSIVXFlexOSSpecDriverNodeEnvs { return v.Envs }).(CSIVXFlexOSSpecDriverNodeEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIVXFlexOSSpecDriverNodeOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNode) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIVXFlexOSSpecDriverNodeOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNode) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIVXFlexOSSpecDriverNodeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNode) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CSIVXFlexOSSpecDriverNodePtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverNodePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverNode)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverNodePtrOutput) ToCSIVXFlexOSSpecDriverNodePtrOutput() CSIVXFlexOSSpecDriverNodePtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodePtrOutput) ToCSIVXFlexOSSpecDriverNodePtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodePtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodePtrOutput) Elem() CSIVXFlexOSSpecDriverNodeOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNode) CSIVXFlexOSSpecDriverNode { return *v }).(CSIVXFlexOSSpecDriverNodeOutput)
}

// Args is the set of arguments for the container
func (o CSIVXFlexOSSpecDriverNodePtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNode) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIVXFlexOSSpecDriverNodePtrOutput) Envs() CSIVXFlexOSSpecDriverNodeEnvsArrayOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNode) []CSIVXFlexOSSpecDriverNodeEnvs {
		if v == nil {
			return nil
		}
		return v.Envs
	}).(CSIVXFlexOSSpecDriverNodeEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIVXFlexOSSpecDriverNodePtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNode) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIVXFlexOSSpecDriverNodePtrOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNode) *string {
		if v == nil {
			return nil
		}
		return v.ImagePullPolicy
	}).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIVXFlexOSSpecDriverNodePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNode) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIVXFlexOSSpecDriverNodeEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *CSIVXFlexOSSpecDriverNodeEnvsValueFrom `pulumi:"valueFrom"`
}

// CSIVXFlexOSSpecDriverNodeEnvsInput is an input type that accepts CSIVXFlexOSSpecDriverNodeEnvsArgs and CSIVXFlexOSSpecDriverNodeEnvsOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverNodeEnvsInput` via:
//
//          CSIVXFlexOSSpecDriverNodeEnvsArgs{...}
type CSIVXFlexOSSpecDriverNodeEnvsInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverNodeEnvsOutput() CSIVXFlexOSSpecDriverNodeEnvsOutput
	ToCSIVXFlexOSSpecDriverNodeEnvsOutputWithContext(context.Context) CSIVXFlexOSSpecDriverNodeEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type CSIVXFlexOSSpecDriverNodeEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (CSIVXFlexOSSpecDriverNodeEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverNodeEnvs)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverNodeEnvsArgs) ToCSIVXFlexOSSpecDriverNodeEnvsOutput() CSIVXFlexOSSpecDriverNodeEnvsOutput {
	return i.ToCSIVXFlexOSSpecDriverNodeEnvsOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverNodeEnvsArgs) ToCSIVXFlexOSSpecDriverNodeEnvsOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeEnvsOutput)
}

// CSIVXFlexOSSpecDriverNodeEnvsArrayInput is an input type that accepts CSIVXFlexOSSpecDriverNodeEnvsArray and CSIVXFlexOSSpecDriverNodeEnvsArrayOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverNodeEnvsArrayInput` via:
//
//          CSIVXFlexOSSpecDriverNodeEnvsArray{ CSIVXFlexOSSpecDriverNodeEnvsArgs{...} }
type CSIVXFlexOSSpecDriverNodeEnvsArrayInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverNodeEnvsArrayOutput() CSIVXFlexOSSpecDriverNodeEnvsArrayOutput
	ToCSIVXFlexOSSpecDriverNodeEnvsArrayOutputWithContext(context.Context) CSIVXFlexOSSpecDriverNodeEnvsArrayOutput
}

type CSIVXFlexOSSpecDriverNodeEnvsArray []CSIVXFlexOSSpecDriverNodeEnvsInput

func (CSIVXFlexOSSpecDriverNodeEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIVXFlexOSSpecDriverNodeEnvs)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverNodeEnvsArray) ToCSIVXFlexOSSpecDriverNodeEnvsArrayOutput() CSIVXFlexOSSpecDriverNodeEnvsArrayOutput {
	return i.ToCSIVXFlexOSSpecDriverNodeEnvsArrayOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverNodeEnvsArray) ToCSIVXFlexOSSpecDriverNodeEnvsArrayOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIVXFlexOSSpecDriverNodeEnvsOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverNodeEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverNodeEnvs)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverNodeEnvsOutput) ToCSIVXFlexOSSpecDriverNodeEnvsOutput() CSIVXFlexOSSpecDriverNodeEnvsOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsOutput) ToCSIVXFlexOSSpecDriverNodeEnvsOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o CSIVXFlexOSSpecDriverNodeEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o CSIVXFlexOSSpecDriverNodeEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o CSIVXFlexOSSpecDriverNodeEnvsOutput) ValueFrom() CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvs) *CSIVXFlexOSSpecDriverNodeEnvsValueFrom { return v.ValueFrom }).(CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput)
}

type CSIVXFlexOSSpecDriverNodeEnvsArrayOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverNodeEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIVXFlexOSSpecDriverNodeEnvs)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverNodeEnvsArrayOutput) ToCSIVXFlexOSSpecDriverNodeEnvsArrayOutput() CSIVXFlexOSSpecDriverNodeEnvsArrayOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsArrayOutput) ToCSIVXFlexOSSpecDriverNodeEnvsArrayOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsArrayOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsArrayOutput) Index(i pulumi.IntInput) CSIVXFlexOSSpecDriverNodeEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIVXFlexOSSpecDriverNodeEnvs {
		return vs[0].([]CSIVXFlexOSSpecDriverNodeEnvs)[vs[1].(int)]
	}).(CSIVXFlexOSSpecDriverNodeEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIVXFlexOSSpecDriverNodeEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef *CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// CSIVXFlexOSSpecDriverNodeEnvsValueFromInput is an input type that accepts CSIVXFlexOSSpecDriverNodeEnvsValueFromArgs and CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverNodeEnvsValueFromInput` via:
//
//          CSIVXFlexOSSpecDriverNodeEnvsValueFromArgs{...}
type CSIVXFlexOSSpecDriverNodeEnvsValueFromInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput
	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromOutputWithContext(context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIVXFlexOSSpecDriverNodeEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (CSIVXFlexOSSpecDriverNodeEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverNodeEnvsValueFrom)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput {
	return i.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput)
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput).ToCSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrInput is an input type that accepts CSIVXFlexOSSpecDriverNodeEnvsValueFromArgs, CSIVXFlexOSSpecDriverNodeEnvsValueFromPtr and CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrInput` via:
//
//          CSIVXFlexOSSpecDriverNodeEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput
	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput
}

type csivxflexOSSpecDriverNodeEnvsValueFromPtrType CSIVXFlexOSSpecDriverNodeEnvsValueFromArgs

func CSIVXFlexOSSpecDriverNodeEnvsValueFromPtr(v *CSIVXFlexOSSpecDriverNodeEnvsValueFromArgs) CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrInput {
	return (*csivxflexOSSpecDriverNodeEnvsValueFromPtrType)(v)
}

func (*csivxflexOSSpecDriverNodeEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverNodeEnvsValueFrom)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverNodeEnvsValueFromPtrType) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverNodeEnvsValueFromPtrType) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverNodeEnvsValueFrom)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvsValueFrom) *CSIVXFlexOSSpecDriverNodeEnvsValueFrom {
		return &v
	}).(CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput) ConfigMapKeyRef() CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvsValueFrom) *CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput) FieldRef() CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvsValueFrom) *CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRef {
		return v.FieldRef
	}).(CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput) ResourceFieldRef() CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvsValueFrom) *CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput) SecretKeyRef() CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvsValueFrom) *CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput)
}

type CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverNodeEnvsValueFrom)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput) Elem() CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNodeEnvsValueFrom) CSIVXFlexOSSpecDriverNodeEnvsValueFrom { return *v }).(CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput) ConfigMapKeyRef() CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNodeEnvsValueFrom) *CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput) FieldRef() CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNodeEnvsValueFrom) *CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput) ResourceFieldRef() CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNodeEnvsValueFrom) *CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput) SecretKeyRef() CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNodeEnvsValueFrom) *CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefInput is an input type that accepts CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs and CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefInput` via:
//
//          CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs{...}
type CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput
	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return i.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput)
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput).ToCSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs, CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtr and CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput
	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput
}

type csivxflexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs

func CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtr(v *CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput {
	return (*csivxflexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*csivxflexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRef) *CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRef {
		return &v
	}).(CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) Elem() CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRef) CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRef {
		return *v
	}).(CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefInput is an input type that accepts CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefArgs and CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefInput` via:
//
//          CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefArgs{...}
type CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput
	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutputWithContext(context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRef)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput {
	return i.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput)
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput).ToCSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrInput is an input type that accepts CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefArgs, CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtr and CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrInput` via:
//
//          CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput
	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput
}

type csivxflexOSSpecDriverNodeEnvsValueFromFieldRefPtrType CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefArgs

func CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtr(v *CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefArgs) CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrInput {
	return (*csivxflexOSSpecDriverNodeEnvsValueFromFieldRefPtrType)(v)
}

func (*csivxflexOSSpecDriverNodeEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverNodeEnvsValueFromFieldRefPtrType) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverNodeEnvsValueFromFieldRefPtrType) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRef) *CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRef {
		return &v
	}).(CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput) Elem() CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRef) CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRef {
		return *v
	}).(CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *string `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefInput is an input type that accepts CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefArgs and CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefInput` via:
//
//          CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefArgs{...}
type CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput
	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutputWithContext(context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor pulumi.StringPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return i.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput)
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput).ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrInput is an input type that accepts CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefArgs, CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtr and CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrInput` via:
//
//          CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput
	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput
}

type csivxflexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrType CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefArgs

func CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtr(v *CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefArgs) CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrInput {
	return (*csivxflexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*csivxflexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrType) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrType) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRef) *CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRef {
		return &v
	}).(CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRef) *string { return v.Divisor }).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) Elem() CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRef) CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRef {
		return *v
	}).(CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefInput is an input type that accepts CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefArgs and CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefInput` via:
//
//          CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefArgs{...}
type CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput
	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutputWithContext(context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return i.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput)
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput).ToCSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrInput is an input type that accepts CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefArgs, CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtr and CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrInput` via:
//
//          CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput
	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput
}

type csivxflexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrType CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefArgs

func CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtr(v *CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefArgs) CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrInput {
	return (*csivxflexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*csivxflexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrType) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrType) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRef) *CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRef {
		return &v
	}).(CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) Elem() CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRef) CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRef {
		return *v
	}).(CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// ContainerTemplate - Structure representing a container
type CSIVXFlexOSSpecDriverSideCars struct {
	// Args is the set of arguments for the container
	Args []string `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs []CSIVXFlexOSSpecDriverSideCarsEnvs `pulumi:"envs"`
	// Image is the image tag for the Container
	Image *string `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name *string `pulumi:"name"`
}

// CSIVXFlexOSSpecDriverSideCarsInput is an input type that accepts CSIVXFlexOSSpecDriverSideCarsArgs and CSIVXFlexOSSpecDriverSideCarsOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverSideCarsInput` via:
//
//          CSIVXFlexOSSpecDriverSideCarsArgs{...}
type CSIVXFlexOSSpecDriverSideCarsInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverSideCarsOutput() CSIVXFlexOSSpecDriverSideCarsOutput
	ToCSIVXFlexOSSpecDriverSideCarsOutputWithContext(context.Context) CSIVXFlexOSSpecDriverSideCarsOutput
}

// ContainerTemplate - Structure representing a container
type CSIVXFlexOSSpecDriverSideCarsArgs struct {
	// Args is the set of arguments for the container
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs CSIVXFlexOSSpecDriverSideCarsEnvsArrayInput `pulumi:"envs"`
	// Image is the image tag for the Container
	Image pulumi.StringPtrInput `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (CSIVXFlexOSSpecDriverSideCarsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverSideCars)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverSideCarsArgs) ToCSIVXFlexOSSpecDriverSideCarsOutput() CSIVXFlexOSSpecDriverSideCarsOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverSideCarsArgs) ToCSIVXFlexOSSpecDriverSideCarsOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsOutput)
}

// CSIVXFlexOSSpecDriverSideCarsArrayInput is an input type that accepts CSIVXFlexOSSpecDriverSideCarsArray and CSIVXFlexOSSpecDriverSideCarsArrayOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverSideCarsArrayInput` via:
//
//          CSIVXFlexOSSpecDriverSideCarsArray{ CSIVXFlexOSSpecDriverSideCarsArgs{...} }
type CSIVXFlexOSSpecDriverSideCarsArrayInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverSideCarsArrayOutput() CSIVXFlexOSSpecDriverSideCarsArrayOutput
	ToCSIVXFlexOSSpecDriverSideCarsArrayOutputWithContext(context.Context) CSIVXFlexOSSpecDriverSideCarsArrayOutput
}

type CSIVXFlexOSSpecDriverSideCarsArray []CSIVXFlexOSSpecDriverSideCarsInput

func (CSIVXFlexOSSpecDriverSideCarsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIVXFlexOSSpecDriverSideCars)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverSideCarsArray) ToCSIVXFlexOSSpecDriverSideCarsArrayOutput() CSIVXFlexOSSpecDriverSideCarsArrayOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsArrayOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverSideCarsArray) ToCSIVXFlexOSSpecDriverSideCarsArrayOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsArrayOutput)
}

// ContainerTemplate - Structure representing a container
type CSIVXFlexOSSpecDriverSideCarsOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverSideCarsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverSideCars)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverSideCarsOutput) ToCSIVXFlexOSSpecDriverSideCarsOutput() CSIVXFlexOSSpecDriverSideCarsOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsOutput) ToCSIVXFlexOSSpecDriverSideCarsOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsOutput {
	return o
}

// Args is the set of arguments for the container
func (o CSIVXFlexOSSpecDriverSideCarsOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCars) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIVXFlexOSSpecDriverSideCarsOutput) Envs() CSIVXFlexOSSpecDriverSideCarsEnvsArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCars) []CSIVXFlexOSSpecDriverSideCarsEnvs { return v.Envs }).(CSIVXFlexOSSpecDriverSideCarsEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIVXFlexOSSpecDriverSideCarsOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCars) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIVXFlexOSSpecDriverSideCarsOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCars) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIVXFlexOSSpecDriverSideCarsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCars) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CSIVXFlexOSSpecDriverSideCarsArrayOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverSideCarsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIVXFlexOSSpecDriverSideCars)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverSideCarsArrayOutput) ToCSIVXFlexOSSpecDriverSideCarsArrayOutput() CSIVXFlexOSSpecDriverSideCarsArrayOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsArrayOutput) ToCSIVXFlexOSSpecDriverSideCarsArrayOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsArrayOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsArrayOutput) Index(i pulumi.IntInput) CSIVXFlexOSSpecDriverSideCarsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIVXFlexOSSpecDriverSideCars {
		return vs[0].([]CSIVXFlexOSSpecDriverSideCars)[vs[1].(int)]
	}).(CSIVXFlexOSSpecDriverSideCarsOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIVXFlexOSSpecDriverSideCarsEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *CSIVXFlexOSSpecDriverSideCarsEnvsValueFrom `pulumi:"valueFrom"`
}

// CSIVXFlexOSSpecDriverSideCarsEnvsInput is an input type that accepts CSIVXFlexOSSpecDriverSideCarsEnvsArgs and CSIVXFlexOSSpecDriverSideCarsEnvsOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverSideCarsEnvsInput` via:
//
//          CSIVXFlexOSSpecDriverSideCarsEnvsArgs{...}
type CSIVXFlexOSSpecDriverSideCarsEnvsInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverSideCarsEnvsOutput() CSIVXFlexOSSpecDriverSideCarsEnvsOutput
	ToCSIVXFlexOSSpecDriverSideCarsEnvsOutputWithContext(context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type CSIVXFlexOSSpecDriverSideCarsEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (CSIVXFlexOSSpecDriverSideCarsEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverSideCarsEnvs)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsOutput() CSIVXFlexOSSpecDriverSideCarsEnvsOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsEnvsOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsEnvsOutput)
}

// CSIVXFlexOSSpecDriverSideCarsEnvsArrayInput is an input type that accepts CSIVXFlexOSSpecDriverSideCarsEnvsArray and CSIVXFlexOSSpecDriverSideCarsEnvsArrayOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverSideCarsEnvsArrayInput` via:
//
//          CSIVXFlexOSSpecDriverSideCarsEnvsArray{ CSIVXFlexOSSpecDriverSideCarsEnvsArgs{...} }
type CSIVXFlexOSSpecDriverSideCarsEnvsArrayInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverSideCarsEnvsArrayOutput() CSIVXFlexOSSpecDriverSideCarsEnvsArrayOutput
	ToCSIVXFlexOSSpecDriverSideCarsEnvsArrayOutputWithContext(context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsArrayOutput
}

type CSIVXFlexOSSpecDriverSideCarsEnvsArray []CSIVXFlexOSSpecDriverSideCarsEnvsInput

func (CSIVXFlexOSSpecDriverSideCarsEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIVXFlexOSSpecDriverSideCarsEnvs)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsArray) ToCSIVXFlexOSSpecDriverSideCarsEnvsArrayOutput() CSIVXFlexOSSpecDriverSideCarsEnvsArrayOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsEnvsArrayOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsArray) ToCSIVXFlexOSSpecDriverSideCarsEnvsArrayOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIVXFlexOSSpecDriverSideCarsEnvsOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverSideCarsEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverSideCarsEnvs)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsOutput() CSIVXFlexOSSpecDriverSideCarsEnvsOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o CSIVXFlexOSSpecDriverSideCarsEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o CSIVXFlexOSSpecDriverSideCarsEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o CSIVXFlexOSSpecDriverSideCarsEnvsOutput) ValueFrom() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvs) *CSIVXFlexOSSpecDriverSideCarsEnvsValueFrom {
		return v.ValueFrom
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput)
}

type CSIVXFlexOSSpecDriverSideCarsEnvsArrayOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverSideCarsEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIVXFlexOSSpecDriverSideCarsEnvs)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsArrayOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsArrayOutput() CSIVXFlexOSSpecDriverSideCarsEnvsArrayOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsArrayOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsArrayOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsArrayOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsArrayOutput) Index(i pulumi.IntInput) CSIVXFlexOSSpecDriverSideCarsEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIVXFlexOSSpecDriverSideCarsEnvs {
		return vs[0].([]CSIVXFlexOSSpecDriverSideCarsEnvs)[vs[1].(int)]
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// CSIVXFlexOSSpecDriverSideCarsEnvsValueFromInput is an input type that accepts CSIVXFlexOSSpecDriverSideCarsEnvsValueFromArgs and CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverSideCarsEnvsValueFromInput` via:
//
//          CSIVXFlexOSSpecDriverSideCarsEnvsValueFromArgs{...}
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput
	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutputWithContext(context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (CSIVXFlexOSSpecDriverSideCarsEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverSideCarsEnvsValueFrom)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput)
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput).ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrInput is an input type that accepts CSIVXFlexOSSpecDriverSideCarsEnvsValueFromArgs, CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtr and CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrInput` via:
//
//          CSIVXFlexOSSpecDriverSideCarsEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput
	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput
}

type csivxflexOSSpecDriverSideCarsEnvsValueFromPtrType CSIVXFlexOSSpecDriverSideCarsEnvsValueFromArgs

func CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtr(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromArgs) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrInput {
	return (*csivxflexOSSpecDriverSideCarsEnvsValueFromPtrType)(v)
}

func (*csivxflexOSSpecDriverSideCarsEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverSideCarsEnvsValueFrom)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverSideCarsEnvsValueFromPtrType) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverSideCarsEnvsValueFromPtrType) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverSideCarsEnvsValueFrom)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvsValueFrom) *CSIVXFlexOSSpecDriverSideCarsEnvsValueFrom {
		return &v
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput) ConfigMapKeyRef() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvsValueFrom) *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput) FieldRef() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvsValueFrom) *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRef {
		return v.FieldRef
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput) ResourceFieldRef() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvsValueFrom) *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput) SecretKeyRef() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvsValueFrom) *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput)
}

type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverSideCarsEnvsValueFrom)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput) Elem() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFrom) CSIVXFlexOSSpecDriverSideCarsEnvsValueFrom {
		return *v
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput) ConfigMapKeyRef() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFrom) *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput) FieldRef() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFrom) *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput) ResourceFieldRef() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFrom) *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput) SecretKeyRef() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFrom) *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefInput is an input type that accepts CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs and CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefInput` via:
//
//          CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs{...}
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput
	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput)
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput).ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs, CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtr and CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput
	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput
}

type csivxflexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs

func CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtr(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput {
	return (*csivxflexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*csivxflexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
		return &v
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) Elem() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
		return *v
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefInput is an input type that accepts CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefArgs and CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefInput` via:
//
//          CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefArgs{...}
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput
	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutputWithContext(context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRef)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput)
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput).ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrInput is an input type that accepts CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefArgs, CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtr and CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrInput` via:
//
//          CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput
	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput
}

type csivxflexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrType CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefArgs

func CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtr(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefArgs) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrInput {
	return (*csivxflexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrType)(v)
}

func (*csivxflexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrType) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrType) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRef) *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRef {
		return &v
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) Elem() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRef) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRef {
		return *v
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *string `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefInput is an input type that accepts CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs and CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefInput` via:
//
//          CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs{...}
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput
	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutputWithContext(context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor pulumi.StringPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput)
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput).ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput is an input type that accepts CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs, CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtr and CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput` via:
//
//          CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput
	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput
}

type csivxflexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs

func CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtr(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput {
	return (*csivxflexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*csivxflexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRef) *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRef {
		return &v
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRef) *string { return v.Divisor }).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) Elem() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRef) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRef {
		return *v
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) Divisor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(pulumi.StringPtrOutput)
}

// Required: resource to select
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefInput is an input type that accepts CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs and CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefInput` via:
//
//          CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs{...}
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput
	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutputWithContext(context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput)
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput).ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput is an input type that accepts CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs, CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtr and CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput` via:
//
//          CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput
	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput
}

type csivxflexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs

func CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtr(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput {
	return (*csivxflexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*csivxflexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRef) *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRef {
		return &v
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) Elem() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRef) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRef {
		return *v
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// SnapshotClass represents a VolumeSnapshotClass
type CSIVXFlexOSSpecDriverSnapshotClass struct {
	// Name is the name of the Snapshot Class
	Name string `pulumi:"name"`
	// Parameters is a map of driver specific parameters for snapshot class
	Parameters map[string]string `pulumi:"parameters"`
}

// CSIVXFlexOSSpecDriverSnapshotClassInput is an input type that accepts CSIVXFlexOSSpecDriverSnapshotClassArgs and CSIVXFlexOSSpecDriverSnapshotClassOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverSnapshotClassInput` via:
//
//          CSIVXFlexOSSpecDriverSnapshotClassArgs{...}
type CSIVXFlexOSSpecDriverSnapshotClassInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverSnapshotClassOutput() CSIVXFlexOSSpecDriverSnapshotClassOutput
	ToCSIVXFlexOSSpecDriverSnapshotClassOutputWithContext(context.Context) CSIVXFlexOSSpecDriverSnapshotClassOutput
}

// SnapshotClass represents a VolumeSnapshotClass
type CSIVXFlexOSSpecDriverSnapshotClassArgs struct {
	// Name is the name of the Snapshot Class
	Name pulumi.StringInput `pulumi:"name"`
	// Parameters is a map of driver specific parameters for snapshot class
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
}

func (CSIVXFlexOSSpecDriverSnapshotClassArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverSnapshotClass)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverSnapshotClassArgs) ToCSIVXFlexOSSpecDriverSnapshotClassOutput() CSIVXFlexOSSpecDriverSnapshotClassOutput {
	return i.ToCSIVXFlexOSSpecDriverSnapshotClassOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverSnapshotClassArgs) ToCSIVXFlexOSSpecDriverSnapshotClassOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSnapshotClassOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSnapshotClassOutput)
}

// CSIVXFlexOSSpecDriverSnapshotClassArrayInput is an input type that accepts CSIVXFlexOSSpecDriverSnapshotClassArray and CSIVXFlexOSSpecDriverSnapshotClassArrayOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverSnapshotClassArrayInput` via:
//
//          CSIVXFlexOSSpecDriverSnapshotClassArray{ CSIVXFlexOSSpecDriverSnapshotClassArgs{...} }
type CSIVXFlexOSSpecDriverSnapshotClassArrayInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverSnapshotClassArrayOutput() CSIVXFlexOSSpecDriverSnapshotClassArrayOutput
	ToCSIVXFlexOSSpecDriverSnapshotClassArrayOutputWithContext(context.Context) CSIVXFlexOSSpecDriverSnapshotClassArrayOutput
}

type CSIVXFlexOSSpecDriverSnapshotClassArray []CSIVXFlexOSSpecDriverSnapshotClassInput

func (CSIVXFlexOSSpecDriverSnapshotClassArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIVXFlexOSSpecDriverSnapshotClass)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverSnapshotClassArray) ToCSIVXFlexOSSpecDriverSnapshotClassArrayOutput() CSIVXFlexOSSpecDriverSnapshotClassArrayOutput {
	return i.ToCSIVXFlexOSSpecDriverSnapshotClassArrayOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverSnapshotClassArray) ToCSIVXFlexOSSpecDriverSnapshotClassArrayOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSnapshotClassArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSnapshotClassArrayOutput)
}

// SnapshotClass represents a VolumeSnapshotClass
type CSIVXFlexOSSpecDriverSnapshotClassOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverSnapshotClassOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverSnapshotClass)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverSnapshotClassOutput) ToCSIVXFlexOSSpecDriverSnapshotClassOutput() CSIVXFlexOSSpecDriverSnapshotClassOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSnapshotClassOutput) ToCSIVXFlexOSSpecDriverSnapshotClassOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSnapshotClassOutput {
	return o
}

// Name is the name of the Snapshot Class
func (o CSIVXFlexOSSpecDriverSnapshotClassOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSnapshotClass) string { return v.Name }).(pulumi.StringOutput)
}

// Parameters is a map of driver specific parameters for snapshot class
func (o CSIVXFlexOSSpecDriverSnapshotClassOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSnapshotClass) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

type CSIVXFlexOSSpecDriverSnapshotClassArrayOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverSnapshotClassArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIVXFlexOSSpecDriverSnapshotClass)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverSnapshotClassArrayOutput) ToCSIVXFlexOSSpecDriverSnapshotClassArrayOutput() CSIVXFlexOSSpecDriverSnapshotClassArrayOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSnapshotClassArrayOutput) ToCSIVXFlexOSSpecDriverSnapshotClassArrayOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSnapshotClassArrayOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSnapshotClassArrayOutput) Index(i pulumi.IntInput) CSIVXFlexOSSpecDriverSnapshotClassOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIVXFlexOSSpecDriverSnapshotClass {
		return vs[0].([]CSIVXFlexOSSpecDriverSnapshotClass)[vs[1].(int)]
	}).(CSIVXFlexOSSpecDriverSnapshotClassOutput)
}

// Parameters is a map of driver specific parameters for snapshot class
type CSIVXFlexOSSpecDriverSnapshotClassParameters struct {
}

// CSIVXFlexOSSpecDriverSnapshotClassParametersInput is an input type that accepts CSIVXFlexOSSpecDriverSnapshotClassParametersArgs and CSIVXFlexOSSpecDriverSnapshotClassParametersOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverSnapshotClassParametersInput` via:
//
//          CSIVXFlexOSSpecDriverSnapshotClassParametersArgs{...}
type CSIVXFlexOSSpecDriverSnapshotClassParametersInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverSnapshotClassParametersOutput() CSIVXFlexOSSpecDriverSnapshotClassParametersOutput
	ToCSIVXFlexOSSpecDriverSnapshotClassParametersOutputWithContext(context.Context) CSIVXFlexOSSpecDriverSnapshotClassParametersOutput
}

// Parameters is a map of driver specific parameters for snapshot class
type CSIVXFlexOSSpecDriverSnapshotClassParametersArgs struct {
}

func (CSIVXFlexOSSpecDriverSnapshotClassParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverSnapshotClassParameters)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverSnapshotClassParametersArgs) ToCSIVXFlexOSSpecDriverSnapshotClassParametersOutput() CSIVXFlexOSSpecDriverSnapshotClassParametersOutput {
	return i.ToCSIVXFlexOSSpecDriverSnapshotClassParametersOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverSnapshotClassParametersArgs) ToCSIVXFlexOSSpecDriverSnapshotClassParametersOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSnapshotClassParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSnapshotClassParametersOutput)
}

// Parameters is a map of driver specific parameters for snapshot class
type CSIVXFlexOSSpecDriverSnapshotClassParametersOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverSnapshotClassParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverSnapshotClassParameters)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverSnapshotClassParametersOutput) ToCSIVXFlexOSSpecDriverSnapshotClassParametersOutput() CSIVXFlexOSSpecDriverSnapshotClassParametersOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSnapshotClassParametersOutput) ToCSIVXFlexOSSpecDriverSnapshotClassParametersOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSnapshotClassParametersOutput {
	return o
}

// StorageClass represents a kubernetes storage class
type CSIVXFlexOSSpecDriverStorageClass struct {
	// AllowVolumeExpansion is a boolean flag which indicates if volumes can be expanded
	AllowVolumeExpansion *bool `pulumi:"allowVolumeExpansion"`
	// DefaultSc is a boolean flag to indicate if the storage class is going to be marked as default
	Default *bool `pulumi:"default"`
	// Name is the name of the StorageClass
	Name string `pulumi:"name"`
	// Parameters is a map of driver specific storage class
	Parameters map[string]string `pulumi:"parameters"`
	// ReclaimPolicy is the reclaim policy for the storage class
	ReclaimPolicy *string `pulumi:"reclaimPolicy"`
}

// CSIVXFlexOSSpecDriverStorageClassInput is an input type that accepts CSIVXFlexOSSpecDriverStorageClassArgs and CSIVXFlexOSSpecDriverStorageClassOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverStorageClassInput` via:
//
//          CSIVXFlexOSSpecDriverStorageClassArgs{...}
type CSIVXFlexOSSpecDriverStorageClassInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverStorageClassOutput() CSIVXFlexOSSpecDriverStorageClassOutput
	ToCSIVXFlexOSSpecDriverStorageClassOutputWithContext(context.Context) CSIVXFlexOSSpecDriverStorageClassOutput
}

// StorageClass represents a kubernetes storage class
type CSIVXFlexOSSpecDriverStorageClassArgs struct {
	// AllowVolumeExpansion is a boolean flag which indicates if volumes can be expanded
	AllowVolumeExpansion pulumi.BoolPtrInput `pulumi:"allowVolumeExpansion"`
	// DefaultSc is a boolean flag to indicate if the storage class is going to be marked as default
	Default pulumi.BoolPtrInput `pulumi:"default"`
	// Name is the name of the StorageClass
	Name pulumi.StringInput `pulumi:"name"`
	// Parameters is a map of driver specific storage class
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
	// ReclaimPolicy is the reclaim policy for the storage class
	ReclaimPolicy pulumi.StringPtrInput `pulumi:"reclaimPolicy"`
}

func (CSIVXFlexOSSpecDriverStorageClassArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverStorageClass)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverStorageClassArgs) ToCSIVXFlexOSSpecDriverStorageClassOutput() CSIVXFlexOSSpecDriverStorageClassOutput {
	return i.ToCSIVXFlexOSSpecDriverStorageClassOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverStorageClassArgs) ToCSIVXFlexOSSpecDriverStorageClassOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverStorageClassOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverStorageClassOutput)
}

// CSIVXFlexOSSpecDriverStorageClassArrayInput is an input type that accepts CSIVXFlexOSSpecDriverStorageClassArray and CSIVXFlexOSSpecDriverStorageClassArrayOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverStorageClassArrayInput` via:
//
//          CSIVXFlexOSSpecDriverStorageClassArray{ CSIVXFlexOSSpecDriverStorageClassArgs{...} }
type CSIVXFlexOSSpecDriverStorageClassArrayInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverStorageClassArrayOutput() CSIVXFlexOSSpecDriverStorageClassArrayOutput
	ToCSIVXFlexOSSpecDriverStorageClassArrayOutputWithContext(context.Context) CSIVXFlexOSSpecDriverStorageClassArrayOutput
}

type CSIVXFlexOSSpecDriverStorageClassArray []CSIVXFlexOSSpecDriverStorageClassInput

func (CSIVXFlexOSSpecDriverStorageClassArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIVXFlexOSSpecDriverStorageClass)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverStorageClassArray) ToCSIVXFlexOSSpecDriverStorageClassArrayOutput() CSIVXFlexOSSpecDriverStorageClassArrayOutput {
	return i.ToCSIVXFlexOSSpecDriverStorageClassArrayOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverStorageClassArray) ToCSIVXFlexOSSpecDriverStorageClassArrayOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverStorageClassArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverStorageClassArrayOutput)
}

// StorageClass represents a kubernetes storage class
type CSIVXFlexOSSpecDriverStorageClassOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverStorageClassOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverStorageClass)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverStorageClassOutput) ToCSIVXFlexOSSpecDriverStorageClassOutput() CSIVXFlexOSSpecDriverStorageClassOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverStorageClassOutput) ToCSIVXFlexOSSpecDriverStorageClassOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverStorageClassOutput {
	return o
}

// AllowVolumeExpansion is a boolean flag which indicates if volumes can be expanded
func (o CSIVXFlexOSSpecDriverStorageClassOutput) AllowVolumeExpansion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverStorageClass) *bool { return v.AllowVolumeExpansion }).(pulumi.BoolPtrOutput)
}

// DefaultSc is a boolean flag to indicate if the storage class is going to be marked as default
func (o CSIVXFlexOSSpecDriverStorageClassOutput) Default() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverStorageClass) *bool { return v.Default }).(pulumi.BoolPtrOutput)
}

// Name is the name of the StorageClass
func (o CSIVXFlexOSSpecDriverStorageClassOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverStorageClass) string { return v.Name }).(pulumi.StringOutput)
}

// Parameters is a map of driver specific storage class
func (o CSIVXFlexOSSpecDriverStorageClassOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverStorageClass) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

// ReclaimPolicy is the reclaim policy for the storage class
func (o CSIVXFlexOSSpecDriverStorageClassOutput) ReclaimPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverStorageClass) *string { return v.ReclaimPolicy }).(pulumi.StringPtrOutput)
}

type CSIVXFlexOSSpecDriverStorageClassArrayOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverStorageClassArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIVXFlexOSSpecDriverStorageClass)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverStorageClassArrayOutput) ToCSIVXFlexOSSpecDriverStorageClassArrayOutput() CSIVXFlexOSSpecDriverStorageClassArrayOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverStorageClassArrayOutput) ToCSIVXFlexOSSpecDriverStorageClassArrayOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverStorageClassArrayOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverStorageClassArrayOutput) Index(i pulumi.IntInput) CSIVXFlexOSSpecDriverStorageClassOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIVXFlexOSSpecDriverStorageClass {
		return vs[0].([]CSIVXFlexOSSpecDriverStorageClass)[vs[1].(int)]
	}).(CSIVXFlexOSSpecDriverStorageClassOutput)
}

// Parameters is a map of driver specific storage class
type CSIVXFlexOSSpecDriverStorageClassParameters struct {
}

// CSIVXFlexOSSpecDriverStorageClassParametersInput is an input type that accepts CSIVXFlexOSSpecDriverStorageClassParametersArgs and CSIVXFlexOSSpecDriverStorageClassParametersOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverStorageClassParametersInput` via:
//
//          CSIVXFlexOSSpecDriverStorageClassParametersArgs{...}
type CSIVXFlexOSSpecDriverStorageClassParametersInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverStorageClassParametersOutput() CSIVXFlexOSSpecDriverStorageClassParametersOutput
	ToCSIVXFlexOSSpecDriverStorageClassParametersOutputWithContext(context.Context) CSIVXFlexOSSpecDriverStorageClassParametersOutput
}

// Parameters is a map of driver specific storage class
type CSIVXFlexOSSpecDriverStorageClassParametersArgs struct {
}

func (CSIVXFlexOSSpecDriverStorageClassParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverStorageClassParameters)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverStorageClassParametersArgs) ToCSIVXFlexOSSpecDriverStorageClassParametersOutput() CSIVXFlexOSSpecDriverStorageClassParametersOutput {
	return i.ToCSIVXFlexOSSpecDriverStorageClassParametersOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverStorageClassParametersArgs) ToCSIVXFlexOSSpecDriverStorageClassParametersOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverStorageClassParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverStorageClassParametersOutput)
}

// Parameters is a map of driver specific storage class
type CSIVXFlexOSSpecDriverStorageClassParametersOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverStorageClassParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverStorageClassParameters)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverStorageClassParametersOutput) ToCSIVXFlexOSSpecDriverStorageClassParametersOutput() CSIVXFlexOSSpecDriverStorageClassParametersOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverStorageClassParametersOutput) ToCSIVXFlexOSSpecDriverStorageClassParametersOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverStorageClassParametersOutput {
	return o
}

// DriverStatus defines the observed state of CSIDriver
type CSIVXFlexOSStatus struct {
	// ControllerStatus is the status of Controller pods
	ControllerStatus *CSIVXFlexOSStatusControllerStatus `pulumi:"controllerStatus"`
	// DriverHash is a hash of the driver specification
	DriverHash *int `pulumi:"driverHash"`
	// LastUpdate is the last updated state of the driver
	LastUpdate *CSIVXFlexOSStatusLastUpdate `pulumi:"lastUpdate"`
	// NodeStatus is the status of Controller pods
	NodeStatus *CSIVXFlexOSStatusNodeStatus `pulumi:"nodeStatus"`
	// State is the state of the driver installation
	State *string `pulumi:"state"`
}

// CSIVXFlexOSStatusInput is an input type that accepts CSIVXFlexOSStatusArgs and CSIVXFlexOSStatusOutput values.
// You can construct a concrete instance of `CSIVXFlexOSStatusInput` via:
//
//          CSIVXFlexOSStatusArgs{...}
type CSIVXFlexOSStatusInput interface {
	pulumi.Input

	ToCSIVXFlexOSStatusOutput() CSIVXFlexOSStatusOutput
	ToCSIVXFlexOSStatusOutputWithContext(context.Context) CSIVXFlexOSStatusOutput
}

// DriverStatus defines the observed state of CSIDriver
type CSIVXFlexOSStatusArgs struct {
	// ControllerStatus is the status of Controller pods
	ControllerStatus CSIVXFlexOSStatusControllerStatusPtrInput `pulumi:"controllerStatus"`
	// DriverHash is a hash of the driver specification
	DriverHash pulumi.IntPtrInput `pulumi:"driverHash"`
	// LastUpdate is the last updated state of the driver
	LastUpdate CSIVXFlexOSStatusLastUpdatePtrInput `pulumi:"lastUpdate"`
	// NodeStatus is the status of Controller pods
	NodeStatus CSIVXFlexOSStatusNodeStatusPtrInput `pulumi:"nodeStatus"`
	// State is the state of the driver installation
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (CSIVXFlexOSStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSStatus)(nil)).Elem()
}

func (i CSIVXFlexOSStatusArgs) ToCSIVXFlexOSStatusOutput() CSIVXFlexOSStatusOutput {
	return i.ToCSIVXFlexOSStatusOutputWithContext(context.Background())
}

func (i CSIVXFlexOSStatusArgs) ToCSIVXFlexOSStatusOutputWithContext(ctx context.Context) CSIVXFlexOSStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSStatusOutput)
}

func (i CSIVXFlexOSStatusArgs) ToCSIVXFlexOSStatusPtrOutput() CSIVXFlexOSStatusPtrOutput {
	return i.ToCSIVXFlexOSStatusPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSStatusArgs) ToCSIVXFlexOSStatusPtrOutputWithContext(ctx context.Context) CSIVXFlexOSStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSStatusOutput).ToCSIVXFlexOSStatusPtrOutputWithContext(ctx)
}

// CSIVXFlexOSStatusPtrInput is an input type that accepts CSIVXFlexOSStatusArgs, CSIVXFlexOSStatusPtr and CSIVXFlexOSStatusPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSStatusPtrInput` via:
//
//          CSIVXFlexOSStatusArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSStatusPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSStatusPtrOutput() CSIVXFlexOSStatusPtrOutput
	ToCSIVXFlexOSStatusPtrOutputWithContext(context.Context) CSIVXFlexOSStatusPtrOutput
}

type csivxflexOSStatusPtrType CSIVXFlexOSStatusArgs

func CSIVXFlexOSStatusPtr(v *CSIVXFlexOSStatusArgs) CSIVXFlexOSStatusPtrInput {
	return (*csivxflexOSStatusPtrType)(v)
}

func (*csivxflexOSStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSStatus)(nil)).Elem()
}

func (i *csivxflexOSStatusPtrType) ToCSIVXFlexOSStatusPtrOutput() CSIVXFlexOSStatusPtrOutput {
	return i.ToCSIVXFlexOSStatusPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSStatusPtrType) ToCSIVXFlexOSStatusPtrOutputWithContext(ctx context.Context) CSIVXFlexOSStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSStatusPtrOutput)
}

// DriverStatus defines the observed state of CSIDriver
type CSIVXFlexOSStatusOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSStatus)(nil)).Elem()
}

func (o CSIVXFlexOSStatusOutput) ToCSIVXFlexOSStatusOutput() CSIVXFlexOSStatusOutput {
	return o
}

func (o CSIVXFlexOSStatusOutput) ToCSIVXFlexOSStatusOutputWithContext(ctx context.Context) CSIVXFlexOSStatusOutput {
	return o
}

func (o CSIVXFlexOSStatusOutput) ToCSIVXFlexOSStatusPtrOutput() CSIVXFlexOSStatusPtrOutput {
	return o.ToCSIVXFlexOSStatusPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSStatusOutput) ToCSIVXFlexOSStatusPtrOutputWithContext(ctx context.Context) CSIVXFlexOSStatusPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSStatus) *CSIVXFlexOSStatus {
		return &v
	}).(CSIVXFlexOSStatusPtrOutput)
}

// ControllerStatus is the status of Controller pods
func (o CSIVXFlexOSStatusOutput) ControllerStatus() CSIVXFlexOSStatusControllerStatusPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSStatus) *CSIVXFlexOSStatusControllerStatus { return v.ControllerStatus }).(CSIVXFlexOSStatusControllerStatusPtrOutput)
}

// DriverHash is a hash of the driver specification
func (o CSIVXFlexOSStatusOutput) DriverHash() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSStatus) *int { return v.DriverHash }).(pulumi.IntPtrOutput)
}

// LastUpdate is the last updated state of the driver
func (o CSIVXFlexOSStatusOutput) LastUpdate() CSIVXFlexOSStatusLastUpdatePtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSStatus) *CSIVXFlexOSStatusLastUpdate { return v.LastUpdate }).(CSIVXFlexOSStatusLastUpdatePtrOutput)
}

// NodeStatus is the status of Controller pods
func (o CSIVXFlexOSStatusOutput) NodeStatus() CSIVXFlexOSStatusNodeStatusPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSStatus) *CSIVXFlexOSStatusNodeStatus { return v.NodeStatus }).(CSIVXFlexOSStatusNodeStatusPtrOutput)
}

// State is the state of the driver installation
func (o CSIVXFlexOSStatusOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSStatus) *string { return v.State }).(pulumi.StringPtrOutput)
}

type CSIVXFlexOSStatusPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSStatus)(nil)).Elem()
}

func (o CSIVXFlexOSStatusPtrOutput) ToCSIVXFlexOSStatusPtrOutput() CSIVXFlexOSStatusPtrOutput {
	return o
}

func (o CSIVXFlexOSStatusPtrOutput) ToCSIVXFlexOSStatusPtrOutputWithContext(ctx context.Context) CSIVXFlexOSStatusPtrOutput {
	return o
}

func (o CSIVXFlexOSStatusPtrOutput) Elem() CSIVXFlexOSStatusOutput {
	return o.ApplyT(func(v *CSIVXFlexOSStatus) CSIVXFlexOSStatus { return *v }).(CSIVXFlexOSStatusOutput)
}

// ControllerStatus is the status of Controller pods
func (o CSIVXFlexOSStatusPtrOutput) ControllerStatus() CSIVXFlexOSStatusControllerStatusPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSStatus) *CSIVXFlexOSStatusControllerStatus {
		if v == nil {
			return nil
		}
		return v.ControllerStatus
	}).(CSIVXFlexOSStatusControllerStatusPtrOutput)
}

// DriverHash is a hash of the driver specification
func (o CSIVXFlexOSStatusPtrOutput) DriverHash() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSStatus) *int {
		if v == nil {
			return nil
		}
		return v.DriverHash
	}).(pulumi.IntPtrOutput)
}

// LastUpdate is the last updated state of the driver
func (o CSIVXFlexOSStatusPtrOutput) LastUpdate() CSIVXFlexOSStatusLastUpdatePtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSStatus) *CSIVXFlexOSStatusLastUpdate {
		if v == nil {
			return nil
		}
		return v.LastUpdate
	}).(CSIVXFlexOSStatusLastUpdatePtrOutput)
}

// NodeStatus is the status of Controller pods
func (o CSIVXFlexOSStatusPtrOutput) NodeStatus() CSIVXFlexOSStatusNodeStatusPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSStatus) *CSIVXFlexOSStatusNodeStatus {
		if v == nil {
			return nil
		}
		return v.NodeStatus
	}).(CSIVXFlexOSStatusNodeStatusPtrOutput)
}

// State is the state of the driver installation
func (o CSIVXFlexOSStatusPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSStatus) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// ControllerStatus is the status of Controller pods
type CSIVXFlexOSStatusControllerStatus struct {
	Available []string `pulumi:"available"`
	Ready     []string `pulumi:"ready"`
	Starting  []string `pulumi:"starting"`
	Stopped   []string `pulumi:"stopped"`
}

// CSIVXFlexOSStatusControllerStatusInput is an input type that accepts CSIVXFlexOSStatusControllerStatusArgs and CSIVXFlexOSStatusControllerStatusOutput values.
// You can construct a concrete instance of `CSIVXFlexOSStatusControllerStatusInput` via:
//
//          CSIVXFlexOSStatusControllerStatusArgs{...}
type CSIVXFlexOSStatusControllerStatusInput interface {
	pulumi.Input

	ToCSIVXFlexOSStatusControllerStatusOutput() CSIVXFlexOSStatusControllerStatusOutput
	ToCSIVXFlexOSStatusControllerStatusOutputWithContext(context.Context) CSIVXFlexOSStatusControllerStatusOutput
}

// ControllerStatus is the status of Controller pods
type CSIVXFlexOSStatusControllerStatusArgs struct {
	Available pulumi.StringArrayInput `pulumi:"available"`
	Ready     pulumi.StringArrayInput `pulumi:"ready"`
	Starting  pulumi.StringArrayInput `pulumi:"starting"`
	Stopped   pulumi.StringArrayInput `pulumi:"stopped"`
}

func (CSIVXFlexOSStatusControllerStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSStatusControllerStatus)(nil)).Elem()
}

func (i CSIVXFlexOSStatusControllerStatusArgs) ToCSIVXFlexOSStatusControllerStatusOutput() CSIVXFlexOSStatusControllerStatusOutput {
	return i.ToCSIVXFlexOSStatusControllerStatusOutputWithContext(context.Background())
}

func (i CSIVXFlexOSStatusControllerStatusArgs) ToCSIVXFlexOSStatusControllerStatusOutputWithContext(ctx context.Context) CSIVXFlexOSStatusControllerStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSStatusControllerStatusOutput)
}

func (i CSIVXFlexOSStatusControllerStatusArgs) ToCSIVXFlexOSStatusControllerStatusPtrOutput() CSIVXFlexOSStatusControllerStatusPtrOutput {
	return i.ToCSIVXFlexOSStatusControllerStatusPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSStatusControllerStatusArgs) ToCSIVXFlexOSStatusControllerStatusPtrOutputWithContext(ctx context.Context) CSIVXFlexOSStatusControllerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSStatusControllerStatusOutput).ToCSIVXFlexOSStatusControllerStatusPtrOutputWithContext(ctx)
}

// CSIVXFlexOSStatusControllerStatusPtrInput is an input type that accepts CSIVXFlexOSStatusControllerStatusArgs, CSIVXFlexOSStatusControllerStatusPtr and CSIVXFlexOSStatusControllerStatusPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSStatusControllerStatusPtrInput` via:
//
//          CSIVXFlexOSStatusControllerStatusArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSStatusControllerStatusPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSStatusControllerStatusPtrOutput() CSIVXFlexOSStatusControllerStatusPtrOutput
	ToCSIVXFlexOSStatusControllerStatusPtrOutputWithContext(context.Context) CSIVXFlexOSStatusControllerStatusPtrOutput
}

type csivxflexOSStatusControllerStatusPtrType CSIVXFlexOSStatusControllerStatusArgs

func CSIVXFlexOSStatusControllerStatusPtr(v *CSIVXFlexOSStatusControllerStatusArgs) CSIVXFlexOSStatusControllerStatusPtrInput {
	return (*csivxflexOSStatusControllerStatusPtrType)(v)
}

func (*csivxflexOSStatusControllerStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSStatusControllerStatus)(nil)).Elem()
}

func (i *csivxflexOSStatusControllerStatusPtrType) ToCSIVXFlexOSStatusControllerStatusPtrOutput() CSIVXFlexOSStatusControllerStatusPtrOutput {
	return i.ToCSIVXFlexOSStatusControllerStatusPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSStatusControllerStatusPtrType) ToCSIVXFlexOSStatusControllerStatusPtrOutputWithContext(ctx context.Context) CSIVXFlexOSStatusControllerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSStatusControllerStatusPtrOutput)
}

// ControllerStatus is the status of Controller pods
type CSIVXFlexOSStatusControllerStatusOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSStatusControllerStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSStatusControllerStatus)(nil)).Elem()
}

func (o CSIVXFlexOSStatusControllerStatusOutput) ToCSIVXFlexOSStatusControllerStatusOutput() CSIVXFlexOSStatusControllerStatusOutput {
	return o
}

func (o CSIVXFlexOSStatusControllerStatusOutput) ToCSIVXFlexOSStatusControllerStatusOutputWithContext(ctx context.Context) CSIVXFlexOSStatusControllerStatusOutput {
	return o
}

func (o CSIVXFlexOSStatusControllerStatusOutput) ToCSIVXFlexOSStatusControllerStatusPtrOutput() CSIVXFlexOSStatusControllerStatusPtrOutput {
	return o.ToCSIVXFlexOSStatusControllerStatusPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSStatusControllerStatusOutput) ToCSIVXFlexOSStatusControllerStatusPtrOutputWithContext(ctx context.Context) CSIVXFlexOSStatusControllerStatusPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSStatusControllerStatus) *CSIVXFlexOSStatusControllerStatus {
		return &v
	}).(CSIVXFlexOSStatusControllerStatusPtrOutput)
}
func (o CSIVXFlexOSStatusControllerStatusOutput) Available() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSStatusControllerStatus) []string { return v.Available }).(pulumi.StringArrayOutput)
}

func (o CSIVXFlexOSStatusControllerStatusOutput) Ready() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSStatusControllerStatus) []string { return v.Ready }).(pulumi.StringArrayOutput)
}

func (o CSIVXFlexOSStatusControllerStatusOutput) Starting() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSStatusControllerStatus) []string { return v.Starting }).(pulumi.StringArrayOutput)
}

func (o CSIVXFlexOSStatusControllerStatusOutput) Stopped() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSStatusControllerStatus) []string { return v.Stopped }).(pulumi.StringArrayOutput)
}

type CSIVXFlexOSStatusControllerStatusPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSStatusControllerStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSStatusControllerStatus)(nil)).Elem()
}

func (o CSIVXFlexOSStatusControllerStatusPtrOutput) ToCSIVXFlexOSStatusControllerStatusPtrOutput() CSIVXFlexOSStatusControllerStatusPtrOutput {
	return o
}

func (o CSIVXFlexOSStatusControllerStatusPtrOutput) ToCSIVXFlexOSStatusControllerStatusPtrOutputWithContext(ctx context.Context) CSIVXFlexOSStatusControllerStatusPtrOutput {
	return o
}

func (o CSIVXFlexOSStatusControllerStatusPtrOutput) Elem() CSIVXFlexOSStatusControllerStatusOutput {
	return o.ApplyT(func(v *CSIVXFlexOSStatusControllerStatus) CSIVXFlexOSStatusControllerStatus { return *v }).(CSIVXFlexOSStatusControllerStatusOutput)
}

func (o CSIVXFlexOSStatusControllerStatusPtrOutput) Available() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIVXFlexOSStatusControllerStatus) []string {
		if v == nil {
			return nil
		}
		return v.Available
	}).(pulumi.StringArrayOutput)
}

func (o CSIVXFlexOSStatusControllerStatusPtrOutput) Ready() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIVXFlexOSStatusControllerStatus) []string {
		if v == nil {
			return nil
		}
		return v.Ready
	}).(pulumi.StringArrayOutput)
}

func (o CSIVXFlexOSStatusControllerStatusPtrOutput) Starting() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIVXFlexOSStatusControllerStatus) []string {
		if v == nil {
			return nil
		}
		return v.Starting
	}).(pulumi.StringArrayOutput)
}

func (o CSIVXFlexOSStatusControllerStatusPtrOutput) Stopped() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIVXFlexOSStatusControllerStatus) []string {
		if v == nil {
			return nil
		}
		return v.Stopped
	}).(pulumi.StringArrayOutput)
}

// LastUpdate is the last updated state of the driver
type CSIVXFlexOSStatusLastUpdate struct {
	// Condition is the last known condition of the Custom Resource
	Condition *string `pulumi:"condition"`
	// ErrorMessage is the last error message associated with the condition
	ErrorMessage *string `pulumi:"errorMessage"`
	// Time is the time stamp for the last condition update
	Time *string `pulumi:"time"`
}

// CSIVXFlexOSStatusLastUpdateInput is an input type that accepts CSIVXFlexOSStatusLastUpdateArgs and CSIVXFlexOSStatusLastUpdateOutput values.
// You can construct a concrete instance of `CSIVXFlexOSStatusLastUpdateInput` via:
//
//          CSIVXFlexOSStatusLastUpdateArgs{...}
type CSIVXFlexOSStatusLastUpdateInput interface {
	pulumi.Input

	ToCSIVXFlexOSStatusLastUpdateOutput() CSIVXFlexOSStatusLastUpdateOutput
	ToCSIVXFlexOSStatusLastUpdateOutputWithContext(context.Context) CSIVXFlexOSStatusLastUpdateOutput
}

// LastUpdate is the last updated state of the driver
type CSIVXFlexOSStatusLastUpdateArgs struct {
	// Condition is the last known condition of the Custom Resource
	Condition pulumi.StringPtrInput `pulumi:"condition"`
	// ErrorMessage is the last error message associated with the condition
	ErrorMessage pulumi.StringPtrInput `pulumi:"errorMessage"`
	// Time is the time stamp for the last condition update
	Time pulumi.StringPtrInput `pulumi:"time"`
}

func (CSIVXFlexOSStatusLastUpdateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSStatusLastUpdate)(nil)).Elem()
}

func (i CSIVXFlexOSStatusLastUpdateArgs) ToCSIVXFlexOSStatusLastUpdateOutput() CSIVXFlexOSStatusLastUpdateOutput {
	return i.ToCSIVXFlexOSStatusLastUpdateOutputWithContext(context.Background())
}

func (i CSIVXFlexOSStatusLastUpdateArgs) ToCSIVXFlexOSStatusLastUpdateOutputWithContext(ctx context.Context) CSIVXFlexOSStatusLastUpdateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSStatusLastUpdateOutput)
}

func (i CSIVXFlexOSStatusLastUpdateArgs) ToCSIVXFlexOSStatusLastUpdatePtrOutput() CSIVXFlexOSStatusLastUpdatePtrOutput {
	return i.ToCSIVXFlexOSStatusLastUpdatePtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSStatusLastUpdateArgs) ToCSIVXFlexOSStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIVXFlexOSStatusLastUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSStatusLastUpdateOutput).ToCSIVXFlexOSStatusLastUpdatePtrOutputWithContext(ctx)
}

// CSIVXFlexOSStatusLastUpdatePtrInput is an input type that accepts CSIVXFlexOSStatusLastUpdateArgs, CSIVXFlexOSStatusLastUpdatePtr and CSIVXFlexOSStatusLastUpdatePtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSStatusLastUpdatePtrInput` via:
//
//          CSIVXFlexOSStatusLastUpdateArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSStatusLastUpdatePtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSStatusLastUpdatePtrOutput() CSIVXFlexOSStatusLastUpdatePtrOutput
	ToCSIVXFlexOSStatusLastUpdatePtrOutputWithContext(context.Context) CSIVXFlexOSStatusLastUpdatePtrOutput
}

type csivxflexOSStatusLastUpdatePtrType CSIVXFlexOSStatusLastUpdateArgs

func CSIVXFlexOSStatusLastUpdatePtr(v *CSIVXFlexOSStatusLastUpdateArgs) CSIVXFlexOSStatusLastUpdatePtrInput {
	return (*csivxflexOSStatusLastUpdatePtrType)(v)
}

func (*csivxflexOSStatusLastUpdatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSStatusLastUpdate)(nil)).Elem()
}

func (i *csivxflexOSStatusLastUpdatePtrType) ToCSIVXFlexOSStatusLastUpdatePtrOutput() CSIVXFlexOSStatusLastUpdatePtrOutput {
	return i.ToCSIVXFlexOSStatusLastUpdatePtrOutputWithContext(context.Background())
}

func (i *csivxflexOSStatusLastUpdatePtrType) ToCSIVXFlexOSStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIVXFlexOSStatusLastUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSStatusLastUpdatePtrOutput)
}

// LastUpdate is the last updated state of the driver
type CSIVXFlexOSStatusLastUpdateOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSStatusLastUpdateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSStatusLastUpdate)(nil)).Elem()
}

func (o CSIVXFlexOSStatusLastUpdateOutput) ToCSIVXFlexOSStatusLastUpdateOutput() CSIVXFlexOSStatusLastUpdateOutput {
	return o
}

func (o CSIVXFlexOSStatusLastUpdateOutput) ToCSIVXFlexOSStatusLastUpdateOutputWithContext(ctx context.Context) CSIVXFlexOSStatusLastUpdateOutput {
	return o
}

func (o CSIVXFlexOSStatusLastUpdateOutput) ToCSIVXFlexOSStatusLastUpdatePtrOutput() CSIVXFlexOSStatusLastUpdatePtrOutput {
	return o.ToCSIVXFlexOSStatusLastUpdatePtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSStatusLastUpdateOutput) ToCSIVXFlexOSStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIVXFlexOSStatusLastUpdatePtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSStatusLastUpdate) *CSIVXFlexOSStatusLastUpdate {
		return &v
	}).(CSIVXFlexOSStatusLastUpdatePtrOutput)
}

// Condition is the last known condition of the Custom Resource
func (o CSIVXFlexOSStatusLastUpdateOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSStatusLastUpdate) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

// ErrorMessage is the last error message associated with the condition
func (o CSIVXFlexOSStatusLastUpdateOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSStatusLastUpdate) *string { return v.ErrorMessage }).(pulumi.StringPtrOutput)
}

// Time is the time stamp for the last condition update
func (o CSIVXFlexOSStatusLastUpdateOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSStatusLastUpdate) *string { return v.Time }).(pulumi.StringPtrOutput)
}

type CSIVXFlexOSStatusLastUpdatePtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSStatusLastUpdatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSStatusLastUpdate)(nil)).Elem()
}

func (o CSIVXFlexOSStatusLastUpdatePtrOutput) ToCSIVXFlexOSStatusLastUpdatePtrOutput() CSIVXFlexOSStatusLastUpdatePtrOutput {
	return o
}

func (o CSIVXFlexOSStatusLastUpdatePtrOutput) ToCSIVXFlexOSStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIVXFlexOSStatusLastUpdatePtrOutput {
	return o
}

func (o CSIVXFlexOSStatusLastUpdatePtrOutput) Elem() CSIVXFlexOSStatusLastUpdateOutput {
	return o.ApplyT(func(v *CSIVXFlexOSStatusLastUpdate) CSIVXFlexOSStatusLastUpdate { return *v }).(CSIVXFlexOSStatusLastUpdateOutput)
}

// Condition is the last known condition of the Custom Resource
func (o CSIVXFlexOSStatusLastUpdatePtrOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSStatusLastUpdate) *string {
		if v == nil {
			return nil
		}
		return v.Condition
	}).(pulumi.StringPtrOutput)
}

// ErrorMessage is the last error message associated with the condition
func (o CSIVXFlexOSStatusLastUpdatePtrOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSStatusLastUpdate) *string {
		if v == nil {
			return nil
		}
		return v.ErrorMessage
	}).(pulumi.StringPtrOutput)
}

// Time is the time stamp for the last condition update
func (o CSIVXFlexOSStatusLastUpdatePtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSStatusLastUpdate) *string {
		if v == nil {
			return nil
		}
		return v.Time
	}).(pulumi.StringPtrOutput)
}

// NodeStatus is the status of Controller pods
type CSIVXFlexOSStatusNodeStatus struct {
	Available []string `pulumi:"available"`
	Ready     []string `pulumi:"ready"`
	Starting  []string `pulumi:"starting"`
	Stopped   []string `pulumi:"stopped"`
}

// CSIVXFlexOSStatusNodeStatusInput is an input type that accepts CSIVXFlexOSStatusNodeStatusArgs and CSIVXFlexOSStatusNodeStatusOutput values.
// You can construct a concrete instance of `CSIVXFlexOSStatusNodeStatusInput` via:
//
//          CSIVXFlexOSStatusNodeStatusArgs{...}
type CSIVXFlexOSStatusNodeStatusInput interface {
	pulumi.Input

	ToCSIVXFlexOSStatusNodeStatusOutput() CSIVXFlexOSStatusNodeStatusOutput
	ToCSIVXFlexOSStatusNodeStatusOutputWithContext(context.Context) CSIVXFlexOSStatusNodeStatusOutput
}

// NodeStatus is the status of Controller pods
type CSIVXFlexOSStatusNodeStatusArgs struct {
	Available pulumi.StringArrayInput `pulumi:"available"`
	Ready     pulumi.StringArrayInput `pulumi:"ready"`
	Starting  pulumi.StringArrayInput `pulumi:"starting"`
	Stopped   pulumi.StringArrayInput `pulumi:"stopped"`
}

func (CSIVXFlexOSStatusNodeStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSStatusNodeStatus)(nil)).Elem()
}

func (i CSIVXFlexOSStatusNodeStatusArgs) ToCSIVXFlexOSStatusNodeStatusOutput() CSIVXFlexOSStatusNodeStatusOutput {
	return i.ToCSIVXFlexOSStatusNodeStatusOutputWithContext(context.Background())
}

func (i CSIVXFlexOSStatusNodeStatusArgs) ToCSIVXFlexOSStatusNodeStatusOutputWithContext(ctx context.Context) CSIVXFlexOSStatusNodeStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSStatusNodeStatusOutput)
}

func (i CSIVXFlexOSStatusNodeStatusArgs) ToCSIVXFlexOSStatusNodeStatusPtrOutput() CSIVXFlexOSStatusNodeStatusPtrOutput {
	return i.ToCSIVXFlexOSStatusNodeStatusPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSStatusNodeStatusArgs) ToCSIVXFlexOSStatusNodeStatusPtrOutputWithContext(ctx context.Context) CSIVXFlexOSStatusNodeStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSStatusNodeStatusOutput).ToCSIVXFlexOSStatusNodeStatusPtrOutputWithContext(ctx)
}

// CSIVXFlexOSStatusNodeStatusPtrInput is an input type that accepts CSIVXFlexOSStatusNodeStatusArgs, CSIVXFlexOSStatusNodeStatusPtr and CSIVXFlexOSStatusNodeStatusPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSStatusNodeStatusPtrInput` via:
//
//          CSIVXFlexOSStatusNodeStatusArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSStatusNodeStatusPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSStatusNodeStatusPtrOutput() CSIVXFlexOSStatusNodeStatusPtrOutput
	ToCSIVXFlexOSStatusNodeStatusPtrOutputWithContext(context.Context) CSIVXFlexOSStatusNodeStatusPtrOutput
}

type csivxflexOSStatusNodeStatusPtrType CSIVXFlexOSStatusNodeStatusArgs

func CSIVXFlexOSStatusNodeStatusPtr(v *CSIVXFlexOSStatusNodeStatusArgs) CSIVXFlexOSStatusNodeStatusPtrInput {
	return (*csivxflexOSStatusNodeStatusPtrType)(v)
}

func (*csivxflexOSStatusNodeStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSStatusNodeStatus)(nil)).Elem()
}

func (i *csivxflexOSStatusNodeStatusPtrType) ToCSIVXFlexOSStatusNodeStatusPtrOutput() CSIVXFlexOSStatusNodeStatusPtrOutput {
	return i.ToCSIVXFlexOSStatusNodeStatusPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSStatusNodeStatusPtrType) ToCSIVXFlexOSStatusNodeStatusPtrOutputWithContext(ctx context.Context) CSIVXFlexOSStatusNodeStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSStatusNodeStatusPtrOutput)
}

// NodeStatus is the status of Controller pods
type CSIVXFlexOSStatusNodeStatusOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSStatusNodeStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSStatusNodeStatus)(nil)).Elem()
}

func (o CSIVXFlexOSStatusNodeStatusOutput) ToCSIVXFlexOSStatusNodeStatusOutput() CSIVXFlexOSStatusNodeStatusOutput {
	return o
}

func (o CSIVXFlexOSStatusNodeStatusOutput) ToCSIVXFlexOSStatusNodeStatusOutputWithContext(ctx context.Context) CSIVXFlexOSStatusNodeStatusOutput {
	return o
}

func (o CSIVXFlexOSStatusNodeStatusOutput) ToCSIVXFlexOSStatusNodeStatusPtrOutput() CSIVXFlexOSStatusNodeStatusPtrOutput {
	return o.ToCSIVXFlexOSStatusNodeStatusPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSStatusNodeStatusOutput) ToCSIVXFlexOSStatusNodeStatusPtrOutputWithContext(ctx context.Context) CSIVXFlexOSStatusNodeStatusPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSStatusNodeStatus) *CSIVXFlexOSStatusNodeStatus {
		return &v
	}).(CSIVXFlexOSStatusNodeStatusPtrOutput)
}
func (o CSIVXFlexOSStatusNodeStatusOutput) Available() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSStatusNodeStatus) []string { return v.Available }).(pulumi.StringArrayOutput)
}

func (o CSIVXFlexOSStatusNodeStatusOutput) Ready() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSStatusNodeStatus) []string { return v.Ready }).(pulumi.StringArrayOutput)
}

func (o CSIVXFlexOSStatusNodeStatusOutput) Starting() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSStatusNodeStatus) []string { return v.Starting }).(pulumi.StringArrayOutput)
}

func (o CSIVXFlexOSStatusNodeStatusOutput) Stopped() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSStatusNodeStatus) []string { return v.Stopped }).(pulumi.StringArrayOutput)
}

type CSIVXFlexOSStatusNodeStatusPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSStatusNodeStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSStatusNodeStatus)(nil)).Elem()
}

func (o CSIVXFlexOSStatusNodeStatusPtrOutput) ToCSIVXFlexOSStatusNodeStatusPtrOutput() CSIVXFlexOSStatusNodeStatusPtrOutput {
	return o
}

func (o CSIVXFlexOSStatusNodeStatusPtrOutput) ToCSIVXFlexOSStatusNodeStatusPtrOutputWithContext(ctx context.Context) CSIVXFlexOSStatusNodeStatusPtrOutput {
	return o
}

func (o CSIVXFlexOSStatusNodeStatusPtrOutput) Elem() CSIVXFlexOSStatusNodeStatusOutput {
	return o.ApplyT(func(v *CSIVXFlexOSStatusNodeStatus) CSIVXFlexOSStatusNodeStatus { return *v }).(CSIVXFlexOSStatusNodeStatusOutput)
}

func (o CSIVXFlexOSStatusNodeStatusPtrOutput) Available() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIVXFlexOSStatusNodeStatus) []string {
		if v == nil {
			return nil
		}
		return v.Available
	}).(pulumi.StringArrayOutput)
}

func (o CSIVXFlexOSStatusNodeStatusPtrOutput) Ready() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIVXFlexOSStatusNodeStatus) []string {
		if v == nil {
			return nil
		}
		return v.Ready
	}).(pulumi.StringArrayOutput)
}

func (o CSIVXFlexOSStatusNodeStatusPtrOutput) Starting() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIVXFlexOSStatusNodeStatus) []string {
		if v == nil {
			return nil
		}
		return v.Starting
	}).(pulumi.StringArrayOutput)
}

func (o CSIVXFlexOSStatusNodeStatusPtrOutput) Stopped() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIVXFlexOSStatusNodeStatus) []string {
		if v == nil {
			return nil
		}
		return v.Stopped
	}).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(CSIIsilonTypeOutput{})
	pulumi.RegisterOutputType(CSIIsilonMetadataOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonEnvsOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonEnvsArrayOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonEnvsValueFromOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerEnvsOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerEnvsArrayOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerEnvsValueFromOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodePtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeEnvsOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeEnvsArrayOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeEnvsValueFromOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsArrayOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsEnvsOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsEnvsArrayOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsEnvsValueFromOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSnapshotClassOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSnapshotClassArrayOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSnapshotClassParametersOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverStorageClassOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverStorageClassArrayOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverStorageClassParametersOutput{})
	pulumi.RegisterOutputType(CSIIsilonStatusOutput{})
	pulumi.RegisterOutputType(CSIIsilonStatusPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonStatusControllerStatusOutput{})
	pulumi.RegisterOutputType(CSIIsilonStatusControllerStatusPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonStatusLastUpdateOutput{})
	pulumi.RegisterOutputType(CSIIsilonStatusLastUpdatePtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonStatusNodeStatusOutput{})
	pulumi.RegisterOutputType(CSIIsilonStatusNodeStatusPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxTypeOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxMetadataOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverCommonOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverCommonPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverCommonEnvsOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverCommonEnvsArrayOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverCommonEnvsValueFromOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverControllerOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverControllerPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverControllerEnvsOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverControllerEnvsArrayOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverControllerEnvsValueFromOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverNodeOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverNodePtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverNodeEnvsOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverNodeEnvsArrayOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverNodeEnvsValueFromOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverSideCarsOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverSideCarsArrayOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverSideCarsEnvsOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverSideCarsEnvsArrayOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverSnapshotClassOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverSnapshotClassArrayOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverSnapshotClassParametersOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverStorageClassOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverStorageClassArrayOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverStorageClassParametersOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxStatusOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxStatusPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxStatusControllerStatusOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxStatusControllerStatusPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxStatusLastUpdateOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxStatusLastUpdatePtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxStatusNodeStatusOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxStatusNodeStatusPtrOutput{})
	pulumi.RegisterOutputType(CSIUnityTypeOutput{})
	pulumi.RegisterOutputType(CSIUnityMetadataOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverCommonOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverCommonPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverCommonEnvsOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverCommonEnvsArrayOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverCommonEnvsValueFromOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverCommonEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverControllerOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverControllerPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverControllerEnvsOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverControllerEnvsArrayOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverControllerEnvsValueFromOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverControllerEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverNodeOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverNodePtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverNodeEnvsOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverNodeEnvsArrayOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverNodeEnvsValueFromOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverNodeEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverSideCarsOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverSideCarsArrayOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverSideCarsEnvsOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverSideCarsEnvsArrayOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverSideCarsEnvsValueFromOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverSnapshotClassOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverSnapshotClassArrayOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverSnapshotClassParametersOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverStorageClassOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverStorageClassArrayOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverStorageClassParametersOutput{})
	pulumi.RegisterOutputType(CSIUnityStatusOutput{})
	pulumi.RegisterOutputType(CSIUnityStatusPtrOutput{})
	pulumi.RegisterOutputType(CSIUnityStatusControllerStatusOutput{})
	pulumi.RegisterOutputType(CSIUnityStatusControllerStatusPtrOutput{})
	pulumi.RegisterOutputType(CSIUnityStatusLastUpdateOutput{})
	pulumi.RegisterOutputType(CSIUnityStatusLastUpdatePtrOutput{})
	pulumi.RegisterOutputType(CSIUnityStatusNodeStatusOutput{})
	pulumi.RegisterOutputType(CSIUnityStatusNodeStatusPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSTypeOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSMetadataOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverCommonOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverCommonPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverCommonEnvsOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverCommonEnvsArrayOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverControllerOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverControllerPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverControllerEnvsOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverControllerEnvsArrayOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverNodeOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverNodePtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverNodeEnvsOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverNodeEnvsArrayOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverSideCarsOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverSideCarsArrayOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverSideCarsEnvsOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverSideCarsEnvsArrayOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverSnapshotClassOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverSnapshotClassArrayOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverSnapshotClassParametersOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverStorageClassOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverStorageClassArrayOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverStorageClassParametersOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSStatusOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSStatusPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSStatusControllerStatusOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSStatusControllerStatusPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSStatusLastUpdateOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSStatusLastUpdatePtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSStatusNodeStatusOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSStatusNodeStatusPtrOutput{})
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// CSIIsilon is the Schema for the csiisilons API
type CSIIsilonType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// CSIIsilonSpec defines the desired state of CSIIsilon
	Spec *CSIIsilonSpec `pulumi:"spec"`
	// DriverStatus defines the observed state of CSIDriver
	Status *CSIIsilonStatus `pulumi:"status"`
}

// CSIIsilonTypeInput is an input type that accepts CSIIsilonTypeArgs and CSIIsilonTypeOutput values.
// You can construct a concrete instance of `CSIIsilonTypeInput` via:
//
//          CSIIsilonTypeArgs{...}
type CSIIsilonTypeInput interface {
	pulumi.Input

	ToCSIIsilonTypeOutput() CSIIsilonTypeOutput
	ToCSIIsilonTypeOutputWithContext(context.Context) CSIIsilonTypeOutput
}

// CSIIsilon is the Schema for the csiisilons API
type CSIIsilonTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// CSIIsilonSpec defines the desired state of CSIIsilon
	Spec CSIIsilonSpecPtrInput `pulumi:"spec"`
	// DriverStatus defines the observed state of CSIDriver
	Status CSIIsilonStatusPtrInput `pulumi:"status"`
}

func (CSIIsilonTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonType)(nil)).Elem()
}

func (i CSIIsilonTypeArgs) ToCSIIsilonTypeOutput() CSIIsilonTypeOutput {
	return i.ToCSIIsilonTypeOutputWithContext(context.Background())
}

func (i CSIIsilonTypeArgs) ToCSIIsilonTypeOutputWithContext(ctx context.Context) CSIIsilonTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonTypeOutput)
}

// CSIIsilon is the Schema for the csiisilons API
type CSIIsilonTypeOutput struct{ *pulumi.OutputState }

func (CSIIsilonTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonType)(nil)).Elem()
}

func (o CSIIsilonTypeOutput) ToCSIIsilonTypeOutput() CSIIsilonTypeOutput {
	return o
}

func (o CSIIsilonTypeOutput) ToCSIIsilonTypeOutputWithContext(ctx context.Context) CSIIsilonTypeOutput {
	return o
}

func (o CSIIsilonTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o CSIIsilonTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o CSIIsilonTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v CSIIsilonType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// CSIIsilonSpec defines the desired state of CSIIsilon
func (o CSIIsilonTypeOutput) Spec() CSIIsilonSpecPtrOutput {
	return o.ApplyT(func(v CSIIsilonType) *CSIIsilonSpec { return v.Spec }).(CSIIsilonSpecPtrOutput)
}

// DriverStatus defines the observed state of CSIDriver
func (o CSIIsilonTypeOutput) Status() CSIIsilonStatusPtrOutput {
	return o.ApplyT(func(v CSIIsilonType) *CSIIsilonStatus { return v.Status }).(CSIIsilonStatusPtrOutput)
}

type CSIIsilonMetadata struct {
}

// CSIIsilonMetadataInput is an input type that accepts CSIIsilonMetadataArgs and CSIIsilonMetadataOutput values.
// You can construct a concrete instance of `CSIIsilonMetadataInput` via:
//
//          CSIIsilonMetadataArgs{...}
type CSIIsilonMetadataInput interface {
	pulumi.Input

	ToCSIIsilonMetadataOutput() CSIIsilonMetadataOutput
	ToCSIIsilonMetadataOutputWithContext(context.Context) CSIIsilonMetadataOutput
}

type CSIIsilonMetadataArgs struct {
}

func (CSIIsilonMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonMetadata)(nil)).Elem()
}

func (i CSIIsilonMetadataArgs) ToCSIIsilonMetadataOutput() CSIIsilonMetadataOutput {
	return i.ToCSIIsilonMetadataOutputWithContext(context.Background())
}

func (i CSIIsilonMetadataArgs) ToCSIIsilonMetadataOutputWithContext(ctx context.Context) CSIIsilonMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonMetadataOutput)
}

type CSIIsilonMetadataOutput struct{ *pulumi.OutputState }

func (CSIIsilonMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonMetadata)(nil)).Elem()
}

func (o CSIIsilonMetadataOutput) ToCSIIsilonMetadataOutput() CSIIsilonMetadataOutput {
	return o
}

func (o CSIIsilonMetadataOutput) ToCSIIsilonMetadataOutputWithContext(ctx context.Context) CSIIsilonMetadataOutput {
	return o
}

// CSIIsilonSpec defines the desired state of CSIIsilon
type CSIIsilonSpec struct {
	// Driver is the specification for the CSI Isilon Driver
	Driver CSIIsilonSpecDriver `pulumi:"driver"`
}

// CSIIsilonSpecInput is an input type that accepts CSIIsilonSpecArgs and CSIIsilonSpecOutput values.
// You can construct a concrete instance of `CSIIsilonSpecInput` via:
//
//          CSIIsilonSpecArgs{...}
type CSIIsilonSpecInput interface {
	pulumi.Input

	ToCSIIsilonSpecOutput() CSIIsilonSpecOutput
	ToCSIIsilonSpecOutputWithContext(context.Context) CSIIsilonSpecOutput
}

// CSIIsilonSpec defines the desired state of CSIIsilon
type CSIIsilonSpecArgs struct {
	// Driver is the specification for the CSI Isilon Driver
	Driver CSIIsilonSpecDriverInput `pulumi:"driver"`
}

func (CSIIsilonSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpec)(nil)).Elem()
}

func (i CSIIsilonSpecArgs) ToCSIIsilonSpecOutput() CSIIsilonSpecOutput {
	return i.ToCSIIsilonSpecOutputWithContext(context.Background())
}

func (i CSIIsilonSpecArgs) ToCSIIsilonSpecOutputWithContext(ctx context.Context) CSIIsilonSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecOutput)
}

func (i CSIIsilonSpecArgs) ToCSIIsilonSpecPtrOutput() CSIIsilonSpecPtrOutput {
	return i.ToCSIIsilonSpecPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecArgs) ToCSIIsilonSpecPtrOutputWithContext(ctx context.Context) CSIIsilonSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecOutput).ToCSIIsilonSpecPtrOutputWithContext(ctx)
}

// CSIIsilonSpecPtrInput is an input type that accepts CSIIsilonSpecArgs, CSIIsilonSpecPtr and CSIIsilonSpecPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecPtrInput` via:
//
//          CSIIsilonSpecArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecPtrOutput() CSIIsilonSpecPtrOutput
	ToCSIIsilonSpecPtrOutputWithContext(context.Context) CSIIsilonSpecPtrOutput
}

type csiisilonSpecPtrType CSIIsilonSpecArgs

func CSIIsilonSpecPtr(v *CSIIsilonSpecArgs) CSIIsilonSpecPtrInput {
	return (*csiisilonSpecPtrType)(v)
}

func (*csiisilonSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpec)(nil)).Elem()
}

func (i *csiisilonSpecPtrType) ToCSIIsilonSpecPtrOutput() CSIIsilonSpecPtrOutput {
	return i.ToCSIIsilonSpecPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecPtrType) ToCSIIsilonSpecPtrOutputWithContext(ctx context.Context) CSIIsilonSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecPtrOutput)
}

// CSIIsilonSpec defines the desired state of CSIIsilon
type CSIIsilonSpecOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpec)(nil)).Elem()
}

func (o CSIIsilonSpecOutput) ToCSIIsilonSpecOutput() CSIIsilonSpecOutput {
	return o
}

func (o CSIIsilonSpecOutput) ToCSIIsilonSpecOutputWithContext(ctx context.Context) CSIIsilonSpecOutput {
	return o
}

func (o CSIIsilonSpecOutput) ToCSIIsilonSpecPtrOutput() CSIIsilonSpecPtrOutput {
	return o.ToCSIIsilonSpecPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecOutput) ToCSIIsilonSpecPtrOutputWithContext(ctx context.Context) CSIIsilonSpecPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpec) *CSIIsilonSpec {
		return &v
	}).(CSIIsilonSpecPtrOutput)
}

// Driver is the specification for the CSI Isilon Driver
func (o CSIIsilonSpecOutput) Driver() CSIIsilonSpecDriverOutput {
	return o.ApplyT(func(v CSIIsilonSpec) CSIIsilonSpecDriver { return v.Driver }).(CSIIsilonSpecDriverOutput)
}

type CSIIsilonSpecPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpec)(nil)).Elem()
}

func (o CSIIsilonSpecPtrOutput) ToCSIIsilonSpecPtrOutput() CSIIsilonSpecPtrOutput {
	return o
}

func (o CSIIsilonSpecPtrOutput) ToCSIIsilonSpecPtrOutputWithContext(ctx context.Context) CSIIsilonSpecPtrOutput {
	return o
}

func (o CSIIsilonSpecPtrOutput) Elem() CSIIsilonSpecOutput {
	return o.ApplyT(func(v *CSIIsilonSpec) CSIIsilonSpec { return *v }).(CSIIsilonSpecOutput)
}

// Driver is the specification for the CSI Isilon Driver
func (o CSIIsilonSpecPtrOutput) Driver() CSIIsilonSpecDriverPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpec) *CSIIsilonSpecDriver {
		if v == nil {
			return nil
		}
		return &v.Driver
	}).(CSIIsilonSpecDriverPtrOutput)
}

// Driver is the specification for the CSI Isilon Driver
type CSIIsilonSpecDriver struct {
	// AuthSecret is the name of the credentials secret for the driver
	AuthSecret *string `pulumi:"authSecret"`
	// Common is the common specification for both controller and node plugins
	Common CSIIsilonSpecDriverCommon `pulumi:"common"`
	// ConfigVersion is the configuration version of the driver
	ConfigVersion string `pulumi:"configVersion"`
	// Controller is the specification for Controller plugin only
	Controller *CSIIsilonSpecDriverController `pulumi:"controller"`
	// ForceUpdate is the boolean flag used to force an update of the driver instance
	ForceUpdate *bool `pulumi:"forceUpdate"`
	// Node is the specification for Node plugin only
	Node *CSIIsilonSpecDriverNode `pulumi:"node"`
	// Replicas is the count of controllers for Controller plugin
	Replicas int `pulumi:"replicas"`
	// SideCars is the specification for CSI sidecar containers
	SideCars []CSIIsilonSpecDriverSideCars `pulumi:"sideCars"`
	// SnapshotClass is the specification for Snapshot Classes
	SnapshotClass []CSIIsilonSpecDriverSnapshotClass `pulumi:"snapshotClass"`
	// StorageClass is the specification for Storage Classes
	StorageClass []CSIIsilonSpecDriverStorageClass `pulumi:"storageClass"`
	// TLSCertSecret is the name of the TLS Cert secret
	TlsCertSecret *string `pulumi:"tlsCertSecret"`
}

// CSIIsilonSpecDriverInput is an input type that accepts CSIIsilonSpecDriverArgs and CSIIsilonSpecDriverOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverInput` via:
//
//          CSIIsilonSpecDriverArgs{...}
type CSIIsilonSpecDriverInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverOutput() CSIIsilonSpecDriverOutput
	ToCSIIsilonSpecDriverOutputWithContext(context.Context) CSIIsilonSpecDriverOutput
}

// Driver is the specification for the CSI Isilon Driver
type CSIIsilonSpecDriverArgs struct {
	// AuthSecret is the name of the credentials secret for the driver
	AuthSecret pulumi.StringPtrInput `pulumi:"authSecret"`
	// Common is the common specification for both controller and node plugins
	Common CSIIsilonSpecDriverCommonInput `pulumi:"common"`
	// ConfigVersion is the configuration version of the driver
	ConfigVersion pulumi.StringInput `pulumi:"configVersion"`
	// Controller is the specification for Controller plugin only
	Controller CSIIsilonSpecDriverControllerPtrInput `pulumi:"controller"`
	// ForceUpdate is the boolean flag used to force an update of the driver instance
	ForceUpdate pulumi.BoolPtrInput `pulumi:"forceUpdate"`
	// Node is the specification for Node plugin only
	Node CSIIsilonSpecDriverNodePtrInput `pulumi:"node"`
	// Replicas is the count of controllers for Controller plugin
	Replicas pulumi.IntInput `pulumi:"replicas"`
	// SideCars is the specification for CSI sidecar containers
	SideCars CSIIsilonSpecDriverSideCarsArrayInput `pulumi:"sideCars"`
	// SnapshotClass is the specification for Snapshot Classes
	SnapshotClass CSIIsilonSpecDriverSnapshotClassArrayInput `pulumi:"snapshotClass"`
	// StorageClass is the specification for Storage Classes
	StorageClass CSIIsilonSpecDriverStorageClassArrayInput `pulumi:"storageClass"`
	// TLSCertSecret is the name of the TLS Cert secret
	TlsCertSecret pulumi.StringPtrInput `pulumi:"tlsCertSecret"`
}

func (CSIIsilonSpecDriverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriver)(nil)).Elem()
}

func (i CSIIsilonSpecDriverArgs) ToCSIIsilonSpecDriverOutput() CSIIsilonSpecDriverOutput {
	return i.ToCSIIsilonSpecDriverOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverArgs) ToCSIIsilonSpecDriverOutputWithContext(ctx context.Context) CSIIsilonSpecDriverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverOutput)
}

func (i CSIIsilonSpecDriverArgs) ToCSIIsilonSpecDriverPtrOutput() CSIIsilonSpecDriverPtrOutput {
	return i.ToCSIIsilonSpecDriverPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverArgs) ToCSIIsilonSpecDriverPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverOutput).ToCSIIsilonSpecDriverPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverPtrInput is an input type that accepts CSIIsilonSpecDriverArgs, CSIIsilonSpecDriverPtr and CSIIsilonSpecDriverPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverPtrInput` via:
//
//          CSIIsilonSpecDriverArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverPtrOutput() CSIIsilonSpecDriverPtrOutput
	ToCSIIsilonSpecDriverPtrOutputWithContext(context.Context) CSIIsilonSpecDriverPtrOutput
}

type csiisilonSpecDriverPtrType CSIIsilonSpecDriverArgs

func CSIIsilonSpecDriverPtr(v *CSIIsilonSpecDriverArgs) CSIIsilonSpecDriverPtrInput {
	return (*csiisilonSpecDriverPtrType)(v)
}

func (*csiisilonSpecDriverPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriver)(nil)).Elem()
}

func (i *csiisilonSpecDriverPtrType) ToCSIIsilonSpecDriverPtrOutput() CSIIsilonSpecDriverPtrOutput {
	return i.ToCSIIsilonSpecDriverPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverPtrType) ToCSIIsilonSpecDriverPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverPtrOutput)
}

// Driver is the specification for the CSI Isilon Driver
type CSIIsilonSpecDriverOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriver)(nil)).Elem()
}

func (o CSIIsilonSpecDriverOutput) ToCSIIsilonSpecDriverOutput() CSIIsilonSpecDriverOutput {
	return o
}

func (o CSIIsilonSpecDriverOutput) ToCSIIsilonSpecDriverOutputWithContext(ctx context.Context) CSIIsilonSpecDriverOutput {
	return o
}

func (o CSIIsilonSpecDriverOutput) ToCSIIsilonSpecDriverPtrOutput() CSIIsilonSpecDriverPtrOutput {
	return o.ToCSIIsilonSpecDriverPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverOutput) ToCSIIsilonSpecDriverPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriver) *CSIIsilonSpecDriver {
		return &v
	}).(CSIIsilonSpecDriverPtrOutput)
}

// AuthSecret is the name of the credentials secret for the driver
func (o CSIIsilonSpecDriverOutput) AuthSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriver) *string { return v.AuthSecret }).(pulumi.StringPtrOutput)
}

// Common is the common specification for both controller and node plugins
func (o CSIIsilonSpecDriverOutput) Common() CSIIsilonSpecDriverCommonOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriver) CSIIsilonSpecDriverCommon { return v.Common }).(CSIIsilonSpecDriverCommonOutput)
}

// ConfigVersion is the configuration version of the driver
func (o CSIIsilonSpecDriverOutput) ConfigVersion() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriver) string { return v.ConfigVersion }).(pulumi.StringOutput)
}

// Controller is the specification for Controller plugin only
func (o CSIIsilonSpecDriverOutput) Controller() CSIIsilonSpecDriverControllerPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriver) *CSIIsilonSpecDriverController { return v.Controller }).(CSIIsilonSpecDriverControllerPtrOutput)
}

// ForceUpdate is the boolean flag used to force an update of the driver instance
func (o CSIIsilonSpecDriverOutput) ForceUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriver) *bool { return v.ForceUpdate }).(pulumi.BoolPtrOutput)
}

// Node is the specification for Node plugin only
func (o CSIIsilonSpecDriverOutput) Node() CSIIsilonSpecDriverNodePtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriver) *CSIIsilonSpecDriverNode { return v.Node }).(CSIIsilonSpecDriverNodePtrOutput)
}

// Replicas is the count of controllers for Controller plugin
func (o CSIIsilonSpecDriverOutput) Replicas() pulumi.IntOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriver) int { return v.Replicas }).(pulumi.IntOutput)
}

// SideCars is the specification for CSI sidecar containers
func (o CSIIsilonSpecDriverOutput) SideCars() CSIIsilonSpecDriverSideCarsArrayOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriver) []CSIIsilonSpecDriverSideCars { return v.SideCars }).(CSIIsilonSpecDriverSideCarsArrayOutput)
}

// SnapshotClass is the specification for Snapshot Classes
func (o CSIIsilonSpecDriverOutput) SnapshotClass() CSIIsilonSpecDriverSnapshotClassArrayOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriver) []CSIIsilonSpecDriverSnapshotClass { return v.SnapshotClass }).(CSIIsilonSpecDriverSnapshotClassArrayOutput)
}

// StorageClass is the specification for Storage Classes
func (o CSIIsilonSpecDriverOutput) StorageClass() CSIIsilonSpecDriverStorageClassArrayOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriver) []CSIIsilonSpecDriverStorageClass { return v.StorageClass }).(CSIIsilonSpecDriverStorageClassArrayOutput)
}

// TLSCertSecret is the name of the TLS Cert secret
func (o CSIIsilonSpecDriverOutput) TlsCertSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriver) *string { return v.TlsCertSecret }).(pulumi.StringPtrOutput)
}

type CSIIsilonSpecDriverPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriver)(nil)).Elem()
}

func (o CSIIsilonSpecDriverPtrOutput) ToCSIIsilonSpecDriverPtrOutput() CSIIsilonSpecDriverPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverPtrOutput) ToCSIIsilonSpecDriverPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverPtrOutput) Elem() CSIIsilonSpecDriverOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriver) CSIIsilonSpecDriver { return *v }).(CSIIsilonSpecDriverOutput)
}

// AuthSecret is the name of the credentials secret for the driver
func (o CSIIsilonSpecDriverPtrOutput) AuthSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriver) *string {
		if v == nil {
			return nil
		}
		return v.AuthSecret
	}).(pulumi.StringPtrOutput)
}

// Common is the common specification for both controller and node plugins
func (o CSIIsilonSpecDriverPtrOutput) Common() CSIIsilonSpecDriverCommonPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriver) *CSIIsilonSpecDriverCommon {
		if v == nil {
			return nil
		}
		return &v.Common
	}).(CSIIsilonSpecDriverCommonPtrOutput)
}

// ConfigVersion is the configuration version of the driver
func (o CSIIsilonSpecDriverPtrOutput) ConfigVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriver) *string {
		if v == nil {
			return nil
		}
		return &v.ConfigVersion
	}).(pulumi.StringPtrOutput)
}

// Controller is the specification for Controller plugin only
func (o CSIIsilonSpecDriverPtrOutput) Controller() CSIIsilonSpecDriverControllerPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriver) *CSIIsilonSpecDriverController {
		if v == nil {
			return nil
		}
		return v.Controller
	}).(CSIIsilonSpecDriverControllerPtrOutput)
}

// ForceUpdate is the boolean flag used to force an update of the driver instance
func (o CSIIsilonSpecDriverPtrOutput) ForceUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriver) *bool {
		if v == nil {
			return nil
		}
		return v.ForceUpdate
	}).(pulumi.BoolPtrOutput)
}

// Node is the specification for Node plugin only
func (o CSIIsilonSpecDriverPtrOutput) Node() CSIIsilonSpecDriverNodePtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriver) *CSIIsilonSpecDriverNode {
		if v == nil {
			return nil
		}
		return v.Node
	}).(CSIIsilonSpecDriverNodePtrOutput)
}

// Replicas is the count of controllers for Controller plugin
func (o CSIIsilonSpecDriverPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriver) *int {
		if v == nil {
			return nil
		}
		return &v.Replicas
	}).(pulumi.IntPtrOutput)
}

// SideCars is the specification for CSI sidecar containers
func (o CSIIsilonSpecDriverPtrOutput) SideCars() CSIIsilonSpecDriverSideCarsArrayOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriver) []CSIIsilonSpecDriverSideCars {
		if v == nil {
			return nil
		}
		return v.SideCars
	}).(CSIIsilonSpecDriverSideCarsArrayOutput)
}

// SnapshotClass is the specification for Snapshot Classes
func (o CSIIsilonSpecDriverPtrOutput) SnapshotClass() CSIIsilonSpecDriverSnapshotClassArrayOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriver) []CSIIsilonSpecDriverSnapshotClass {
		if v == nil {
			return nil
		}
		return v.SnapshotClass
	}).(CSIIsilonSpecDriverSnapshotClassArrayOutput)
}

// StorageClass is the specification for Storage Classes
func (o CSIIsilonSpecDriverPtrOutput) StorageClass() CSIIsilonSpecDriverStorageClassArrayOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriver) []CSIIsilonSpecDriverStorageClass {
		if v == nil {
			return nil
		}
		return v.StorageClass
	}).(CSIIsilonSpecDriverStorageClassArrayOutput)
}

// TLSCertSecret is the name of the TLS Cert secret
func (o CSIIsilonSpecDriverPtrOutput) TlsCertSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriver) *string {
		if v == nil {
			return nil
		}
		return v.TlsCertSecret
	}).(pulumi.StringPtrOutput)
}

// Common is the common specification for both controller and node plugins
type CSIIsilonSpecDriverCommon struct {
	// Args is the set of arguments for the container
	Args []string `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs []CSIIsilonSpecDriverCommonEnvs `pulumi:"envs"`
	// Image is the image tag for the Container
	Image *string `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name *string `pulumi:"name"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
	NodeSelector map[string]string `pulumi:"nodeSelector"`
	// Tolerations is the list of tolerations for the driver pods
	Tolerations []CSIIsilonSpecDriverCommonTolerations `pulumi:"tolerations"`
}

// CSIIsilonSpecDriverCommonInput is an input type that accepts CSIIsilonSpecDriverCommonArgs and CSIIsilonSpecDriverCommonOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonInput` via:
//
//          CSIIsilonSpecDriverCommonArgs{...}
type CSIIsilonSpecDriverCommonInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonOutput() CSIIsilonSpecDriverCommonOutput
	ToCSIIsilonSpecDriverCommonOutputWithContext(context.Context) CSIIsilonSpecDriverCommonOutput
}

// Common is the common specification for both controller and node plugins
type CSIIsilonSpecDriverCommonArgs struct {
	// Args is the set of arguments for the container
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs CSIIsilonSpecDriverCommonEnvsArrayInput `pulumi:"envs"`
	// Image is the image tag for the Container
	Image pulumi.StringPtrInput `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name pulumi.StringPtrInput `pulumi:"name"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
	NodeSelector pulumi.StringMapInput `pulumi:"nodeSelector"`
	// Tolerations is the list of tolerations for the driver pods
	Tolerations CSIIsilonSpecDriverCommonTolerationsArrayInput `pulumi:"tolerations"`
}

func (CSIIsilonSpecDriverCommonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommon)(nil)).Elem()
}

func (i CSIIsilonSpecDriverCommonArgs) ToCSIIsilonSpecDriverCommonOutput() CSIIsilonSpecDriverCommonOutput {
	return i.ToCSIIsilonSpecDriverCommonOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonArgs) ToCSIIsilonSpecDriverCommonOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonOutput)
}

func (i CSIIsilonSpecDriverCommonArgs) ToCSIIsilonSpecDriverCommonPtrOutput() CSIIsilonSpecDriverCommonPtrOutput {
	return i.ToCSIIsilonSpecDriverCommonPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonArgs) ToCSIIsilonSpecDriverCommonPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonOutput).ToCSIIsilonSpecDriverCommonPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverCommonPtrInput is an input type that accepts CSIIsilonSpecDriverCommonArgs, CSIIsilonSpecDriverCommonPtr and CSIIsilonSpecDriverCommonPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonPtrInput` via:
//
//          CSIIsilonSpecDriverCommonArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverCommonPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonPtrOutput() CSIIsilonSpecDriverCommonPtrOutput
	ToCSIIsilonSpecDriverCommonPtrOutputWithContext(context.Context) CSIIsilonSpecDriverCommonPtrOutput
}

type csiisilonSpecDriverCommonPtrType CSIIsilonSpecDriverCommonArgs

func CSIIsilonSpecDriverCommonPtr(v *CSIIsilonSpecDriverCommonArgs) CSIIsilonSpecDriverCommonPtrInput {
	return (*csiisilonSpecDriverCommonPtrType)(v)
}

func (*csiisilonSpecDriverCommonPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverCommon)(nil)).Elem()
}

func (i *csiisilonSpecDriverCommonPtrType) ToCSIIsilonSpecDriverCommonPtrOutput() CSIIsilonSpecDriverCommonPtrOutput {
	return i.ToCSIIsilonSpecDriverCommonPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverCommonPtrType) ToCSIIsilonSpecDriverCommonPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonPtrOutput)
}

// Common is the common specification for both controller and node plugins
type CSIIsilonSpecDriverCommonOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommon)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonOutput) ToCSIIsilonSpecDriverCommonOutput() CSIIsilonSpecDriverCommonOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonOutput) ToCSIIsilonSpecDriverCommonOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonOutput) ToCSIIsilonSpecDriverCommonPtrOutput() CSIIsilonSpecDriverCommonPtrOutput {
	return o.ToCSIIsilonSpecDriverCommonPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverCommonOutput) ToCSIIsilonSpecDriverCommonPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommon) *CSIIsilonSpecDriverCommon {
		return &v
	}).(CSIIsilonSpecDriverCommonPtrOutput)
}

// Args is the set of arguments for the container
func (o CSIIsilonSpecDriverCommonOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommon) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIIsilonSpecDriverCommonOutput) Envs() CSIIsilonSpecDriverCommonEnvsArrayOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommon) []CSIIsilonSpecDriverCommonEnvs { return v.Envs }).(CSIIsilonSpecDriverCommonEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIIsilonSpecDriverCommonOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommon) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIIsilonSpecDriverCommonOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommon) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIIsilonSpecDriverCommonOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommon) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
func (o CSIIsilonSpecDriverCommonOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommon) map[string]string { return v.NodeSelector }).(pulumi.StringMapOutput)
}

// Tolerations is the list of tolerations for the driver pods
func (o CSIIsilonSpecDriverCommonOutput) Tolerations() CSIIsilonSpecDriverCommonTolerationsArrayOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommon) []CSIIsilonSpecDriverCommonTolerations { return v.Tolerations }).(CSIIsilonSpecDriverCommonTolerationsArrayOutput)
}

type CSIIsilonSpecDriverCommonPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverCommon)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonPtrOutput) ToCSIIsilonSpecDriverCommonPtrOutput() CSIIsilonSpecDriverCommonPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonPtrOutput) ToCSIIsilonSpecDriverCommonPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonPtrOutput) Elem() CSIIsilonSpecDriverCommonOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommon) CSIIsilonSpecDriverCommon { return *v }).(CSIIsilonSpecDriverCommonOutput)
}

// Args is the set of arguments for the container
func (o CSIIsilonSpecDriverCommonPtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommon) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIIsilonSpecDriverCommonPtrOutput) Envs() CSIIsilonSpecDriverCommonEnvsArrayOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommon) []CSIIsilonSpecDriverCommonEnvs {
		if v == nil {
			return nil
		}
		return v.Envs
	}).(CSIIsilonSpecDriverCommonEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIIsilonSpecDriverCommonPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommon) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIIsilonSpecDriverCommonPtrOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommon) *string {
		if v == nil {
			return nil
		}
		return v.ImagePullPolicy
	}).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIIsilonSpecDriverCommonPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommon) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
func (o CSIIsilonSpecDriverCommonPtrOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommon) map[string]string {
		if v == nil {
			return nil
		}
		return v.NodeSelector
	}).(pulumi.StringMapOutput)
}

// Tolerations is the list of tolerations for the driver pods
func (o CSIIsilonSpecDriverCommonPtrOutput) Tolerations() CSIIsilonSpecDriverCommonTolerationsArrayOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommon) []CSIIsilonSpecDriverCommonTolerations {
		if v == nil {
			return nil
		}
		return v.Tolerations
	}).(CSIIsilonSpecDriverCommonTolerationsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIIsilonSpecDriverCommonEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *CSIIsilonSpecDriverCommonEnvsValueFrom `pulumi:"valueFrom"`
}

// CSIIsilonSpecDriverCommonEnvsInput is an input type that accepts CSIIsilonSpecDriverCommonEnvsArgs and CSIIsilonSpecDriverCommonEnvsOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonEnvsInput` via:
//
//          CSIIsilonSpecDriverCommonEnvsArgs{...}
type CSIIsilonSpecDriverCommonEnvsInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonEnvsOutput() CSIIsilonSpecDriverCommonEnvsOutput
	ToCSIIsilonSpecDriverCommonEnvsOutputWithContext(context.Context) CSIIsilonSpecDriverCommonEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type CSIIsilonSpecDriverCommonEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom CSIIsilonSpecDriverCommonEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (CSIIsilonSpecDriverCommonEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommonEnvs)(nil)).Elem()
}

func (i CSIIsilonSpecDriverCommonEnvsArgs) ToCSIIsilonSpecDriverCommonEnvsOutput() CSIIsilonSpecDriverCommonEnvsOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonEnvsArgs) ToCSIIsilonSpecDriverCommonEnvsOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsOutput)
}

// CSIIsilonSpecDriverCommonEnvsArrayInput is an input type that accepts CSIIsilonSpecDriverCommonEnvsArray and CSIIsilonSpecDriverCommonEnvsArrayOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonEnvsArrayInput` via:
//
//          CSIIsilonSpecDriverCommonEnvsArray{ CSIIsilonSpecDriverCommonEnvsArgs{...} }
type CSIIsilonSpecDriverCommonEnvsArrayInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonEnvsArrayOutput() CSIIsilonSpecDriverCommonEnvsArrayOutput
	ToCSIIsilonSpecDriverCommonEnvsArrayOutputWithContext(context.Context) CSIIsilonSpecDriverCommonEnvsArrayOutput
}

type CSIIsilonSpecDriverCommonEnvsArray []CSIIsilonSpecDriverCommonEnvsInput

func (CSIIsilonSpecDriverCommonEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverCommonEnvs)(nil)).Elem()
}

func (i CSIIsilonSpecDriverCommonEnvsArray) ToCSIIsilonSpecDriverCommonEnvsArrayOutput() CSIIsilonSpecDriverCommonEnvsArrayOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsArrayOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonEnvsArray) ToCSIIsilonSpecDriverCommonEnvsArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIIsilonSpecDriverCommonEnvsOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommonEnvs)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonEnvsOutput) ToCSIIsilonSpecDriverCommonEnvsOutput() CSIIsilonSpecDriverCommonEnvsOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsOutput) ToCSIIsilonSpecDriverCommonEnvsOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o CSIIsilonSpecDriverCommonEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o CSIIsilonSpecDriverCommonEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o CSIIsilonSpecDriverCommonEnvsOutput) ValueFrom() CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvs) *CSIIsilonSpecDriverCommonEnvsValueFrom { return v.ValueFrom }).(CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput)
}

type CSIIsilonSpecDriverCommonEnvsArrayOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverCommonEnvs)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonEnvsArrayOutput) ToCSIIsilonSpecDriverCommonEnvsArrayOutput() CSIIsilonSpecDriverCommonEnvsArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsArrayOutput) ToCSIIsilonSpecDriverCommonEnvsArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsArrayOutput) Index(i pulumi.IntInput) CSIIsilonSpecDriverCommonEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIIsilonSpecDriverCommonEnvs {
		return vs[0].([]CSIIsilonSpecDriverCommonEnvs)[vs[1].(int)]
	}).(CSIIsilonSpecDriverCommonEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIIsilonSpecDriverCommonEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef *CSIIsilonSpecDriverCommonEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// CSIIsilonSpecDriverCommonEnvsValueFromInput is an input type that accepts CSIIsilonSpecDriverCommonEnvsValueFromArgs and CSIIsilonSpecDriverCommonEnvsValueFromOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonEnvsValueFromInput` via:
//
//          CSIIsilonSpecDriverCommonEnvsValueFromArgs{...}
type CSIIsilonSpecDriverCommonEnvsValueFromInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonEnvsValueFromOutput() CSIIsilonSpecDriverCommonEnvsValueFromOutput
	ToCSIIsilonSpecDriverCommonEnvsValueFromOutputWithContext(context.Context) CSIIsilonSpecDriverCommonEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIIsilonSpecDriverCommonEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (CSIIsilonSpecDriverCommonEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommonEnvsValueFrom)(nil)).Elem()
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromOutput() CSIIsilonSpecDriverCommonEnvsValueFromOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromOutput)
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromOutput).ToCSIIsilonSpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverCommonEnvsValueFromPtrInput is an input type that accepts CSIIsilonSpecDriverCommonEnvsValueFromArgs, CSIIsilonSpecDriverCommonEnvsValueFromPtr and CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonEnvsValueFromPtrInput` via:
//
//          CSIIsilonSpecDriverCommonEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverCommonEnvsValueFromPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonEnvsValueFromPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput
	ToCSIIsilonSpecDriverCommonEnvsValueFromPtrOutputWithContext(context.Context) CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput
}

type csiisilonSpecDriverCommonEnvsValueFromPtrType CSIIsilonSpecDriverCommonEnvsValueFromArgs

func CSIIsilonSpecDriverCommonEnvsValueFromPtr(v *CSIIsilonSpecDriverCommonEnvsValueFromArgs) CSIIsilonSpecDriverCommonEnvsValueFromPtrInput {
	return (*csiisilonSpecDriverCommonEnvsValueFromPtrType)(v)
}

func (*csiisilonSpecDriverCommonEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverCommonEnvsValueFrom)(nil)).Elem()
}

func (i *csiisilonSpecDriverCommonEnvsValueFromPtrType) ToCSIIsilonSpecDriverCommonEnvsValueFromPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverCommonEnvsValueFromPtrType) ToCSIIsilonSpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIIsilonSpecDriverCommonEnvsValueFromOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommonEnvsValueFrom)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromOutput() CSIIsilonSpecDriverCommonEnvsValueFromOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput {
	return o.ToCSIIsilonSpecDriverCommonEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFrom) *CSIIsilonSpecDriverCommonEnvsValueFrom {
		return &v
	}).(CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o CSIIsilonSpecDriverCommonEnvsValueFromOutput) ConfigMapKeyRef() CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFrom) *CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o CSIIsilonSpecDriverCommonEnvsValueFromOutput) FieldRef() CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFrom) *CSIIsilonSpecDriverCommonEnvsValueFromFieldRef {
		return v.FieldRef
	}).(CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIIsilonSpecDriverCommonEnvsValueFromOutput) ResourceFieldRef() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFrom) *CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIIsilonSpecDriverCommonEnvsValueFromOutput) SecretKeyRef() CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFrom) *CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput)
}

type CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverCommonEnvsValueFrom)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput) Elem() CSIIsilonSpecDriverCommonEnvsValueFromOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFrom) CSIIsilonSpecDriverCommonEnvsValueFrom { return *v }).(CSIIsilonSpecDriverCommonEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput) ConfigMapKeyRef() CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFrom) *CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput) FieldRef() CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFrom) *CSIIsilonSpecDriverCommonEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput) ResourceFieldRef() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFrom) *CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput) SecretKeyRef() CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFrom) *CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefInput is an input type that accepts CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs and CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefInput` via:
//
//          CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs{...}
type CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput() CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput
	ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput() CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput)
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput).ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs, CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtr and CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput
	ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput
}

type csiisilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs

func CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtr(v *CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput {
	return (*csiisilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*csiisilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType) ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType) ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput() CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef) *CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef {
		return &v
	}).(CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) Elem() CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef) CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef {
		return *v
	}).(CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIIsilonSpecDriverCommonEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// CSIIsilonSpecDriverCommonEnvsValueFromFieldRefInput is an input type that accepts CSIIsilonSpecDriverCommonEnvsValueFromFieldRefArgs and CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonEnvsValueFromFieldRefInput` via:
//
//          CSIIsilonSpecDriverCommonEnvsValueFromFieldRefArgs{...}
type CSIIsilonSpecDriverCommonEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput() CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput
	ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutputWithContext(context.Context) CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIIsilonSpecDriverCommonEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (CSIIsilonSpecDriverCommonEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommonEnvsValueFromFieldRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput() CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput)
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput).ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrInput is an input type that accepts CSIIsilonSpecDriverCommonEnvsValueFromFieldRefArgs, CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtr and CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrInput` via:
//
//          CSIIsilonSpecDriverCommonEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput
	ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput
}

type csiisilonSpecDriverCommonEnvsValueFromFieldRefPtrType CSIIsilonSpecDriverCommonEnvsValueFromFieldRefArgs

func CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtr(v *CSIIsilonSpecDriverCommonEnvsValueFromFieldRefArgs) CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrInput {
	return (*csiisilonSpecDriverCommonEnvsValueFromFieldRefPtrType)(v)
}

func (*csiisilonSpecDriverCommonEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverCommonEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverCommonEnvsValueFromFieldRefPtrType) ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverCommonEnvsValueFromFieldRefPtrType) ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommonEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput() CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o.ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromFieldRef) *CSIIsilonSpecDriverCommonEnvsValueFromFieldRef {
		return &v
	}).(CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverCommonEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput) Elem() CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromFieldRef) CSIIsilonSpecDriverCommonEnvsValueFromFieldRef {
		return *v
	}).(CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisor `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefInput is an input type that accepts CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefArgs and CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefInput` via:
//
//          CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefArgs{...}
type CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput
	ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutputWithContext(context.Context) CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput)
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput).ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrInput is an input type that accepts CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefArgs, CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtr and CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrInput` via:
//
//          CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput
	ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput
}

type csiisilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrType CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefArgs

func CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtr(v *CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefArgs) CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrInput {
	return (*csiisilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*csiisilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrType) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrType) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef) *CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef {
		return &v
	}).(CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput) Divisor() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef) *CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisor {
		return v.Divisor
	}).(CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) Elem() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef) CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef {
		return *v
	}).(CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) Divisor() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef) *CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisor {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

type CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisor struct {
}

// CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorInput is an input type that accepts CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs and CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorInput` via:
//
//          CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs{...}
type CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput
	ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Context) CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput
}

type CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs struct {
}

func (CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput)
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput).ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrInput is an input type that accepts CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs, CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtr and CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrInput` via:
//
//          CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput
	ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Context) CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput
}

type csiisilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrType CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs

func CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtr(v *CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs) CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrInput {
	return (*csiisilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrType)(v)
}

func (*csiisilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i *csiisilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrType) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrType) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisor) *CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisor {
		return &v
	}).(CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput) Elem() CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisor) CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisor {
		return *v
	}).(CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefInput is an input type that accepts CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefArgs and CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefInput` via:
//
//          CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefArgs{...}
type CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput() CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput
	ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutputWithContext(context.Context) CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput() CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput)
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput).ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrInput is an input type that accepts CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefArgs, CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtr and CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrInput` via:
//
//          CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput
	ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput
}

type csiisilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrType CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefArgs

func CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtr(v *CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefArgs) CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrInput {
	return (*csiisilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*csiisilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrType) ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrType) ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput() CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef) *CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef {
		return &v
	}).(CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) ToCSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) Elem() CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef) CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef {
		return *v
	}).(CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIIsilonSpecDriverCommonNodeSelector struct {
}

// CSIIsilonSpecDriverCommonNodeSelectorInput is an input type that accepts CSIIsilonSpecDriverCommonNodeSelectorArgs and CSIIsilonSpecDriverCommonNodeSelectorOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonNodeSelectorInput` via:
//
//          CSIIsilonSpecDriverCommonNodeSelectorArgs{...}
type CSIIsilonSpecDriverCommonNodeSelectorInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonNodeSelectorOutput() CSIIsilonSpecDriverCommonNodeSelectorOutput
	ToCSIIsilonSpecDriverCommonNodeSelectorOutputWithContext(context.Context) CSIIsilonSpecDriverCommonNodeSelectorOutput
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIIsilonSpecDriverCommonNodeSelectorArgs struct {
}

func (CSIIsilonSpecDriverCommonNodeSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommonNodeSelector)(nil)).Elem()
}

func (i CSIIsilonSpecDriverCommonNodeSelectorArgs) ToCSIIsilonSpecDriverCommonNodeSelectorOutput() CSIIsilonSpecDriverCommonNodeSelectorOutput {
	return i.ToCSIIsilonSpecDriverCommonNodeSelectorOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonNodeSelectorArgs) ToCSIIsilonSpecDriverCommonNodeSelectorOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonNodeSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonNodeSelectorOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIIsilonSpecDriverCommonNodeSelectorOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonNodeSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommonNodeSelector)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonNodeSelectorOutput) ToCSIIsilonSpecDriverCommonNodeSelectorOutput() CSIIsilonSpecDriverCommonNodeSelectorOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonNodeSelectorOutput) ToCSIIsilonSpecDriverCommonNodeSelectorOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonNodeSelectorOutput {
	return o
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIIsilonSpecDriverCommonTolerations struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect *string `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key *string `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator *string `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds *int `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value *string `pulumi:"value"`
}

// CSIIsilonSpecDriverCommonTolerationsInput is an input type that accepts CSIIsilonSpecDriverCommonTolerationsArgs and CSIIsilonSpecDriverCommonTolerationsOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonTolerationsInput` via:
//
//          CSIIsilonSpecDriverCommonTolerationsArgs{...}
type CSIIsilonSpecDriverCommonTolerationsInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonTolerationsOutput() CSIIsilonSpecDriverCommonTolerationsOutput
	ToCSIIsilonSpecDriverCommonTolerationsOutputWithContext(context.Context) CSIIsilonSpecDriverCommonTolerationsOutput
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIIsilonSpecDriverCommonTolerationsArgs struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect pulumi.StringPtrInput `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds pulumi.IntPtrInput `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (CSIIsilonSpecDriverCommonTolerationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommonTolerations)(nil)).Elem()
}

func (i CSIIsilonSpecDriverCommonTolerationsArgs) ToCSIIsilonSpecDriverCommonTolerationsOutput() CSIIsilonSpecDriverCommonTolerationsOutput {
	return i.ToCSIIsilonSpecDriverCommonTolerationsOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonTolerationsArgs) ToCSIIsilonSpecDriverCommonTolerationsOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonTolerationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonTolerationsOutput)
}

// CSIIsilonSpecDriverCommonTolerationsArrayInput is an input type that accepts CSIIsilonSpecDriverCommonTolerationsArray and CSIIsilonSpecDriverCommonTolerationsArrayOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverCommonTolerationsArrayInput` via:
//
//          CSIIsilonSpecDriverCommonTolerationsArray{ CSIIsilonSpecDriverCommonTolerationsArgs{...} }
type CSIIsilonSpecDriverCommonTolerationsArrayInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverCommonTolerationsArrayOutput() CSIIsilonSpecDriverCommonTolerationsArrayOutput
	ToCSIIsilonSpecDriverCommonTolerationsArrayOutputWithContext(context.Context) CSIIsilonSpecDriverCommonTolerationsArrayOutput
}

type CSIIsilonSpecDriverCommonTolerationsArray []CSIIsilonSpecDriverCommonTolerationsInput

func (CSIIsilonSpecDriverCommonTolerationsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverCommonTolerations)(nil)).Elem()
}

func (i CSIIsilonSpecDriverCommonTolerationsArray) ToCSIIsilonSpecDriverCommonTolerationsArrayOutput() CSIIsilonSpecDriverCommonTolerationsArrayOutput {
	return i.ToCSIIsilonSpecDriverCommonTolerationsArrayOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverCommonTolerationsArray) ToCSIIsilonSpecDriverCommonTolerationsArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonTolerationsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverCommonTolerationsArrayOutput)
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIIsilonSpecDriverCommonTolerationsOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonTolerationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverCommonTolerations)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonTolerationsOutput) ToCSIIsilonSpecDriverCommonTolerationsOutput() CSIIsilonSpecDriverCommonTolerationsOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonTolerationsOutput) ToCSIIsilonSpecDriverCommonTolerationsOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonTolerationsOutput {
	return o
}

// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
func (o CSIIsilonSpecDriverCommonTolerationsOutput) Effect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonTolerations) *string { return v.Effect }).(pulumi.StringPtrOutput)
}

// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
func (o CSIIsilonSpecDriverCommonTolerationsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonTolerations) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
func (o CSIIsilonSpecDriverCommonTolerationsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonTolerations) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
func (o CSIIsilonSpecDriverCommonTolerationsOutput) TolerationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonTolerations) *int { return v.TolerationSeconds }).(pulumi.IntPtrOutput)
}

// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
func (o CSIIsilonSpecDriverCommonTolerationsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverCommonTolerations) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type CSIIsilonSpecDriverCommonTolerationsArrayOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverCommonTolerationsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverCommonTolerations)(nil)).Elem()
}

func (o CSIIsilonSpecDriverCommonTolerationsArrayOutput) ToCSIIsilonSpecDriverCommonTolerationsArrayOutput() CSIIsilonSpecDriverCommonTolerationsArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonTolerationsArrayOutput) ToCSIIsilonSpecDriverCommonTolerationsArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverCommonTolerationsArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverCommonTolerationsArrayOutput) Index(i pulumi.IntInput) CSIIsilonSpecDriverCommonTolerationsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIIsilonSpecDriverCommonTolerations {
		return vs[0].([]CSIIsilonSpecDriverCommonTolerations)[vs[1].(int)]
	}).(CSIIsilonSpecDriverCommonTolerationsOutput)
}

// Controller is the specification for Controller plugin only
type CSIIsilonSpecDriverController struct {
	// Args is the set of arguments for the container
	Args []string `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs []CSIIsilonSpecDriverControllerEnvs `pulumi:"envs"`
	// Image is the image tag for the Container
	Image *string `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name *string `pulumi:"name"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
	NodeSelector map[string]string `pulumi:"nodeSelector"`
	// Tolerations is the list of tolerations for the driver pods
	Tolerations []CSIIsilonSpecDriverControllerTolerations `pulumi:"tolerations"`
}

// CSIIsilonSpecDriverControllerInput is an input type that accepts CSIIsilonSpecDriverControllerArgs and CSIIsilonSpecDriverControllerOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerInput` via:
//
//          CSIIsilonSpecDriverControllerArgs{...}
type CSIIsilonSpecDriverControllerInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerOutput() CSIIsilonSpecDriverControllerOutput
	ToCSIIsilonSpecDriverControllerOutputWithContext(context.Context) CSIIsilonSpecDriverControllerOutput
}

// Controller is the specification for Controller plugin only
type CSIIsilonSpecDriverControllerArgs struct {
	// Args is the set of arguments for the container
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs CSIIsilonSpecDriverControllerEnvsArrayInput `pulumi:"envs"`
	// Image is the image tag for the Container
	Image pulumi.StringPtrInput `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name pulumi.StringPtrInput `pulumi:"name"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
	NodeSelector pulumi.StringMapInput `pulumi:"nodeSelector"`
	// Tolerations is the list of tolerations for the driver pods
	Tolerations CSIIsilonSpecDriverControllerTolerationsArrayInput `pulumi:"tolerations"`
}

func (CSIIsilonSpecDriverControllerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverController)(nil)).Elem()
}

func (i CSIIsilonSpecDriverControllerArgs) ToCSIIsilonSpecDriverControllerOutput() CSIIsilonSpecDriverControllerOutput {
	return i.ToCSIIsilonSpecDriverControllerOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerArgs) ToCSIIsilonSpecDriverControllerOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerOutput)
}

func (i CSIIsilonSpecDriverControllerArgs) ToCSIIsilonSpecDriverControllerPtrOutput() CSIIsilonSpecDriverControllerPtrOutput {
	return i.ToCSIIsilonSpecDriverControllerPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerArgs) ToCSIIsilonSpecDriverControllerPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerOutput).ToCSIIsilonSpecDriverControllerPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverControllerPtrInput is an input type that accepts CSIIsilonSpecDriverControllerArgs, CSIIsilonSpecDriverControllerPtr and CSIIsilonSpecDriverControllerPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerPtrInput` via:
//
//          CSIIsilonSpecDriverControllerArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverControllerPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerPtrOutput() CSIIsilonSpecDriverControllerPtrOutput
	ToCSIIsilonSpecDriverControllerPtrOutputWithContext(context.Context) CSIIsilonSpecDriverControllerPtrOutput
}

type csiisilonSpecDriverControllerPtrType CSIIsilonSpecDriverControllerArgs

func CSIIsilonSpecDriverControllerPtr(v *CSIIsilonSpecDriverControllerArgs) CSIIsilonSpecDriverControllerPtrInput {
	return (*csiisilonSpecDriverControllerPtrType)(v)
}

func (*csiisilonSpecDriverControllerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverController)(nil)).Elem()
}

func (i *csiisilonSpecDriverControllerPtrType) ToCSIIsilonSpecDriverControllerPtrOutput() CSIIsilonSpecDriverControllerPtrOutput {
	return i.ToCSIIsilonSpecDriverControllerPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverControllerPtrType) ToCSIIsilonSpecDriverControllerPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerPtrOutput)
}

// Controller is the specification for Controller plugin only
type CSIIsilonSpecDriverControllerOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverController)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerOutput) ToCSIIsilonSpecDriverControllerOutput() CSIIsilonSpecDriverControllerOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerOutput) ToCSIIsilonSpecDriverControllerOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerOutput) ToCSIIsilonSpecDriverControllerPtrOutput() CSIIsilonSpecDriverControllerPtrOutput {
	return o.ToCSIIsilonSpecDriverControllerPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverControllerOutput) ToCSIIsilonSpecDriverControllerPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverController) *CSIIsilonSpecDriverController {
		return &v
	}).(CSIIsilonSpecDriverControllerPtrOutput)
}

// Args is the set of arguments for the container
func (o CSIIsilonSpecDriverControllerOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverController) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIIsilonSpecDriverControllerOutput) Envs() CSIIsilonSpecDriverControllerEnvsArrayOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverController) []CSIIsilonSpecDriverControllerEnvs { return v.Envs }).(CSIIsilonSpecDriverControllerEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIIsilonSpecDriverControllerOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverController) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIIsilonSpecDriverControllerOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverController) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIIsilonSpecDriverControllerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverController) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
func (o CSIIsilonSpecDriverControllerOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverController) map[string]string { return v.NodeSelector }).(pulumi.StringMapOutput)
}

// Tolerations is the list of tolerations for the driver pods
func (o CSIIsilonSpecDriverControllerOutput) Tolerations() CSIIsilonSpecDriverControllerTolerationsArrayOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverController) []CSIIsilonSpecDriverControllerTolerations { return v.Tolerations }).(CSIIsilonSpecDriverControllerTolerationsArrayOutput)
}

type CSIIsilonSpecDriverControllerPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverController)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerPtrOutput) ToCSIIsilonSpecDriverControllerPtrOutput() CSIIsilonSpecDriverControllerPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerPtrOutput) ToCSIIsilonSpecDriverControllerPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerPtrOutput) Elem() CSIIsilonSpecDriverControllerOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverController) CSIIsilonSpecDriverController { return *v }).(CSIIsilonSpecDriverControllerOutput)
}

// Args is the set of arguments for the container
func (o CSIIsilonSpecDriverControllerPtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverController) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIIsilonSpecDriverControllerPtrOutput) Envs() CSIIsilonSpecDriverControllerEnvsArrayOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverController) []CSIIsilonSpecDriverControllerEnvs {
		if v == nil {
			return nil
		}
		return v.Envs
	}).(CSIIsilonSpecDriverControllerEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIIsilonSpecDriverControllerPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverController) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIIsilonSpecDriverControllerPtrOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverController) *string {
		if v == nil {
			return nil
		}
		return v.ImagePullPolicy
	}).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIIsilonSpecDriverControllerPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverController) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
func (o CSIIsilonSpecDriverControllerPtrOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverController) map[string]string {
		if v == nil {
			return nil
		}
		return v.NodeSelector
	}).(pulumi.StringMapOutput)
}

// Tolerations is the list of tolerations for the driver pods
func (o CSIIsilonSpecDriverControllerPtrOutput) Tolerations() CSIIsilonSpecDriverControllerTolerationsArrayOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverController) []CSIIsilonSpecDriverControllerTolerations {
		if v == nil {
			return nil
		}
		return v.Tolerations
	}).(CSIIsilonSpecDriverControllerTolerationsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIIsilonSpecDriverControllerEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *CSIIsilonSpecDriverControllerEnvsValueFrom `pulumi:"valueFrom"`
}

// CSIIsilonSpecDriverControllerEnvsInput is an input type that accepts CSIIsilonSpecDriverControllerEnvsArgs and CSIIsilonSpecDriverControllerEnvsOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerEnvsInput` via:
//
//          CSIIsilonSpecDriverControllerEnvsArgs{...}
type CSIIsilonSpecDriverControllerEnvsInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerEnvsOutput() CSIIsilonSpecDriverControllerEnvsOutput
	ToCSIIsilonSpecDriverControllerEnvsOutputWithContext(context.Context) CSIIsilonSpecDriverControllerEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type CSIIsilonSpecDriverControllerEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom CSIIsilonSpecDriverControllerEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (CSIIsilonSpecDriverControllerEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverControllerEnvs)(nil)).Elem()
}

func (i CSIIsilonSpecDriverControllerEnvsArgs) ToCSIIsilonSpecDriverControllerEnvsOutput() CSIIsilonSpecDriverControllerEnvsOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerEnvsArgs) ToCSIIsilonSpecDriverControllerEnvsOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsOutput)
}

// CSIIsilonSpecDriverControllerEnvsArrayInput is an input type that accepts CSIIsilonSpecDriverControllerEnvsArray and CSIIsilonSpecDriverControllerEnvsArrayOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerEnvsArrayInput` via:
//
//          CSIIsilonSpecDriverControllerEnvsArray{ CSIIsilonSpecDriverControllerEnvsArgs{...} }
type CSIIsilonSpecDriverControllerEnvsArrayInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerEnvsArrayOutput() CSIIsilonSpecDriverControllerEnvsArrayOutput
	ToCSIIsilonSpecDriverControllerEnvsArrayOutputWithContext(context.Context) CSIIsilonSpecDriverControllerEnvsArrayOutput
}

type CSIIsilonSpecDriverControllerEnvsArray []CSIIsilonSpecDriverControllerEnvsInput

func (CSIIsilonSpecDriverControllerEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverControllerEnvs)(nil)).Elem()
}

func (i CSIIsilonSpecDriverControllerEnvsArray) ToCSIIsilonSpecDriverControllerEnvsArrayOutput() CSIIsilonSpecDriverControllerEnvsArrayOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsArrayOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerEnvsArray) ToCSIIsilonSpecDriverControllerEnvsArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIIsilonSpecDriverControllerEnvsOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverControllerEnvs)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerEnvsOutput) ToCSIIsilonSpecDriverControllerEnvsOutput() CSIIsilonSpecDriverControllerEnvsOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsOutput) ToCSIIsilonSpecDriverControllerEnvsOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o CSIIsilonSpecDriverControllerEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o CSIIsilonSpecDriverControllerEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o CSIIsilonSpecDriverControllerEnvsOutput) ValueFrom() CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvs) *CSIIsilonSpecDriverControllerEnvsValueFrom {
		return v.ValueFrom
	}).(CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput)
}

type CSIIsilonSpecDriverControllerEnvsArrayOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverControllerEnvs)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerEnvsArrayOutput) ToCSIIsilonSpecDriverControllerEnvsArrayOutput() CSIIsilonSpecDriverControllerEnvsArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsArrayOutput) ToCSIIsilonSpecDriverControllerEnvsArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsArrayOutput) Index(i pulumi.IntInput) CSIIsilonSpecDriverControllerEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIIsilonSpecDriverControllerEnvs {
		return vs[0].([]CSIIsilonSpecDriverControllerEnvs)[vs[1].(int)]
	}).(CSIIsilonSpecDriverControllerEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIIsilonSpecDriverControllerEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef *CSIIsilonSpecDriverControllerEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// CSIIsilonSpecDriverControllerEnvsValueFromInput is an input type that accepts CSIIsilonSpecDriverControllerEnvsValueFromArgs and CSIIsilonSpecDriverControllerEnvsValueFromOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerEnvsValueFromInput` via:
//
//          CSIIsilonSpecDriverControllerEnvsValueFromArgs{...}
type CSIIsilonSpecDriverControllerEnvsValueFromInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerEnvsValueFromOutput() CSIIsilonSpecDriverControllerEnvsValueFromOutput
	ToCSIIsilonSpecDriverControllerEnvsValueFromOutputWithContext(context.Context) CSIIsilonSpecDriverControllerEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIIsilonSpecDriverControllerEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (CSIIsilonSpecDriverControllerEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverControllerEnvsValueFrom)(nil)).Elem()
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromOutput() CSIIsilonSpecDriverControllerEnvsValueFromOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromOutput)
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromOutput).ToCSIIsilonSpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverControllerEnvsValueFromPtrInput is an input type that accepts CSIIsilonSpecDriverControllerEnvsValueFromArgs, CSIIsilonSpecDriverControllerEnvsValueFromPtr and CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerEnvsValueFromPtrInput` via:
//
//          CSIIsilonSpecDriverControllerEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverControllerEnvsValueFromPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerEnvsValueFromPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput
	ToCSIIsilonSpecDriverControllerEnvsValueFromPtrOutputWithContext(context.Context) CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput
}

type csiisilonSpecDriverControllerEnvsValueFromPtrType CSIIsilonSpecDriverControllerEnvsValueFromArgs

func CSIIsilonSpecDriverControllerEnvsValueFromPtr(v *CSIIsilonSpecDriverControllerEnvsValueFromArgs) CSIIsilonSpecDriverControllerEnvsValueFromPtrInput {
	return (*csiisilonSpecDriverControllerEnvsValueFromPtrType)(v)
}

func (*csiisilonSpecDriverControllerEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverControllerEnvsValueFrom)(nil)).Elem()
}

func (i *csiisilonSpecDriverControllerEnvsValueFromPtrType) ToCSIIsilonSpecDriverControllerEnvsValueFromPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverControllerEnvsValueFromPtrType) ToCSIIsilonSpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIIsilonSpecDriverControllerEnvsValueFromOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverControllerEnvsValueFrom)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromOutput() CSIIsilonSpecDriverControllerEnvsValueFromOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput {
	return o.ToCSIIsilonSpecDriverControllerEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFrom) *CSIIsilonSpecDriverControllerEnvsValueFrom {
		return &v
	}).(CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o CSIIsilonSpecDriverControllerEnvsValueFromOutput) ConfigMapKeyRef() CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFrom) *CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o CSIIsilonSpecDriverControllerEnvsValueFromOutput) FieldRef() CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFrom) *CSIIsilonSpecDriverControllerEnvsValueFromFieldRef {
		return v.FieldRef
	}).(CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIIsilonSpecDriverControllerEnvsValueFromOutput) ResourceFieldRef() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFrom) *CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIIsilonSpecDriverControllerEnvsValueFromOutput) SecretKeyRef() CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFrom) *CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput)
}

type CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverControllerEnvsValueFrom)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput) Elem() CSIIsilonSpecDriverControllerEnvsValueFromOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFrom) CSIIsilonSpecDriverControllerEnvsValueFrom {
		return *v
	}).(CSIIsilonSpecDriverControllerEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput) ConfigMapKeyRef() CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFrom) *CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput) FieldRef() CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFrom) *CSIIsilonSpecDriverControllerEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput) ResourceFieldRef() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFrom) *CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput) SecretKeyRef() CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFrom) *CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefInput is an input type that accepts CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs and CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefInput` via:
//
//          CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs{...}
type CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput() CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput
	ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput() CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput)
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput).ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs, CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtr and CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput
	ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput
}

type csiisilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs

func CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtr(v *CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput {
	return (*csiisilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*csiisilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType) ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType) ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput() CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef) *CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef {
		return &v
	}).(CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) Elem() CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef) CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef {
		return *v
	}).(CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIIsilonSpecDriverControllerEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// CSIIsilonSpecDriverControllerEnvsValueFromFieldRefInput is an input type that accepts CSIIsilonSpecDriverControllerEnvsValueFromFieldRefArgs and CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerEnvsValueFromFieldRefInput` via:
//
//          CSIIsilonSpecDriverControllerEnvsValueFromFieldRefArgs{...}
type CSIIsilonSpecDriverControllerEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput() CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput
	ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutputWithContext(context.Context) CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIIsilonSpecDriverControllerEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (CSIIsilonSpecDriverControllerEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverControllerEnvsValueFromFieldRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput() CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput)
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput).ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrInput is an input type that accepts CSIIsilonSpecDriverControllerEnvsValueFromFieldRefArgs, CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtr and CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrInput` via:
//
//          CSIIsilonSpecDriverControllerEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput
	ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput
}

type csiisilonSpecDriverControllerEnvsValueFromFieldRefPtrType CSIIsilonSpecDriverControllerEnvsValueFromFieldRefArgs

func CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtr(v *CSIIsilonSpecDriverControllerEnvsValueFromFieldRefArgs) CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrInput {
	return (*csiisilonSpecDriverControllerEnvsValueFromFieldRefPtrType)(v)
}

func (*csiisilonSpecDriverControllerEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverControllerEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverControllerEnvsValueFromFieldRefPtrType) ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverControllerEnvsValueFromFieldRefPtrType) ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverControllerEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput() CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o.ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromFieldRef) *CSIIsilonSpecDriverControllerEnvsValueFromFieldRef {
		return &v
	}).(CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverControllerEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput) Elem() CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromFieldRef) CSIIsilonSpecDriverControllerEnvsValueFromFieldRef {
		return *v
	}).(CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisor `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefInput is an input type that accepts CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefArgs and CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefInput` via:
//
//          CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefArgs{...}
type CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput
	ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutputWithContext(context.Context) CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput)
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput).ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrInput is an input type that accepts CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefArgs, CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtr and CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrInput` via:
//
//          CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput
	ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput
}

type csiisilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrType CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefArgs

func CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtr(v *CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefArgs) CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrInput {
	return (*csiisilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*csiisilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrType) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrType) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef) *CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef {
		return &v
	}).(CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput) Divisor() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef) *CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisor {
		return v.Divisor
	}).(CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) Elem() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef) CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef {
		return *v
	}).(CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) Divisor() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef) *CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisor {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

type CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisor struct {
}

// CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorInput is an input type that accepts CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs and CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorInput` via:
//
//          CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs{...}
type CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput
	ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Context) CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput
}

type CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs struct {
}

func (CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput)
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput).ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrInput is an input type that accepts CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs, CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtr and CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrInput` via:
//
//          CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput
	ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Context) CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput
}

type csiisilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrType CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs

func CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtr(v *CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs) CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrInput {
	return (*csiisilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrType)(v)
}

func (*csiisilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i *csiisilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrType) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrType) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisor) *CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisor {
		return &v
	}).(CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput) Elem() CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisor) CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisor {
		return *v
	}).(CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefInput is an input type that accepts CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefArgs and CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefInput` via:
//
//          CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefArgs{...}
type CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput() CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput
	ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutputWithContext(context.Context) CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput() CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput)
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput).ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrInput is an input type that accepts CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefArgs, CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtr and CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrInput` via:
//
//          CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput
	ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput
}

type csiisilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrType CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefArgs

func CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtr(v *CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefArgs) CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrInput {
	return (*csiisilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*csiisilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrType) ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrType) ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput() CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef) *CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef {
		return &v
	}).(CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) ToCSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) Elem() CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef) CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef {
		return *v
	}).(CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIIsilonSpecDriverControllerNodeSelector struct {
}

// CSIIsilonSpecDriverControllerNodeSelectorInput is an input type that accepts CSIIsilonSpecDriverControllerNodeSelectorArgs and CSIIsilonSpecDriverControllerNodeSelectorOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerNodeSelectorInput` via:
//
//          CSIIsilonSpecDriverControllerNodeSelectorArgs{...}
type CSIIsilonSpecDriverControllerNodeSelectorInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerNodeSelectorOutput() CSIIsilonSpecDriverControllerNodeSelectorOutput
	ToCSIIsilonSpecDriverControllerNodeSelectorOutputWithContext(context.Context) CSIIsilonSpecDriverControllerNodeSelectorOutput
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIIsilonSpecDriverControllerNodeSelectorArgs struct {
}

func (CSIIsilonSpecDriverControllerNodeSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverControllerNodeSelector)(nil)).Elem()
}

func (i CSIIsilonSpecDriverControllerNodeSelectorArgs) ToCSIIsilonSpecDriverControllerNodeSelectorOutput() CSIIsilonSpecDriverControllerNodeSelectorOutput {
	return i.ToCSIIsilonSpecDriverControllerNodeSelectorOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerNodeSelectorArgs) ToCSIIsilonSpecDriverControllerNodeSelectorOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerNodeSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerNodeSelectorOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIIsilonSpecDriverControllerNodeSelectorOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerNodeSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverControllerNodeSelector)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerNodeSelectorOutput) ToCSIIsilonSpecDriverControllerNodeSelectorOutput() CSIIsilonSpecDriverControllerNodeSelectorOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerNodeSelectorOutput) ToCSIIsilonSpecDriverControllerNodeSelectorOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerNodeSelectorOutput {
	return o
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIIsilonSpecDriverControllerTolerations struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect *string `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key *string `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator *string `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds *int `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value *string `pulumi:"value"`
}

// CSIIsilonSpecDriverControllerTolerationsInput is an input type that accepts CSIIsilonSpecDriverControllerTolerationsArgs and CSIIsilonSpecDriverControllerTolerationsOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerTolerationsInput` via:
//
//          CSIIsilonSpecDriverControllerTolerationsArgs{...}
type CSIIsilonSpecDriverControllerTolerationsInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerTolerationsOutput() CSIIsilonSpecDriverControllerTolerationsOutput
	ToCSIIsilonSpecDriverControllerTolerationsOutputWithContext(context.Context) CSIIsilonSpecDriverControllerTolerationsOutput
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIIsilonSpecDriverControllerTolerationsArgs struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect pulumi.StringPtrInput `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds pulumi.IntPtrInput `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (CSIIsilonSpecDriverControllerTolerationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverControllerTolerations)(nil)).Elem()
}

func (i CSIIsilonSpecDriverControllerTolerationsArgs) ToCSIIsilonSpecDriverControllerTolerationsOutput() CSIIsilonSpecDriverControllerTolerationsOutput {
	return i.ToCSIIsilonSpecDriverControllerTolerationsOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerTolerationsArgs) ToCSIIsilonSpecDriverControllerTolerationsOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerTolerationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerTolerationsOutput)
}

// CSIIsilonSpecDriverControllerTolerationsArrayInput is an input type that accepts CSIIsilonSpecDriverControllerTolerationsArray and CSIIsilonSpecDriverControllerTolerationsArrayOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverControllerTolerationsArrayInput` via:
//
//          CSIIsilonSpecDriverControllerTolerationsArray{ CSIIsilonSpecDriverControllerTolerationsArgs{...} }
type CSIIsilonSpecDriverControllerTolerationsArrayInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverControllerTolerationsArrayOutput() CSIIsilonSpecDriverControllerTolerationsArrayOutput
	ToCSIIsilonSpecDriverControllerTolerationsArrayOutputWithContext(context.Context) CSIIsilonSpecDriverControllerTolerationsArrayOutput
}

type CSIIsilonSpecDriverControllerTolerationsArray []CSIIsilonSpecDriverControllerTolerationsInput

func (CSIIsilonSpecDriverControllerTolerationsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverControllerTolerations)(nil)).Elem()
}

func (i CSIIsilonSpecDriverControllerTolerationsArray) ToCSIIsilonSpecDriverControllerTolerationsArrayOutput() CSIIsilonSpecDriverControllerTolerationsArrayOutput {
	return i.ToCSIIsilonSpecDriverControllerTolerationsArrayOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverControllerTolerationsArray) ToCSIIsilonSpecDriverControllerTolerationsArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerTolerationsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverControllerTolerationsArrayOutput)
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIIsilonSpecDriverControllerTolerationsOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerTolerationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverControllerTolerations)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerTolerationsOutput) ToCSIIsilonSpecDriverControllerTolerationsOutput() CSIIsilonSpecDriverControllerTolerationsOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerTolerationsOutput) ToCSIIsilonSpecDriverControllerTolerationsOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerTolerationsOutput {
	return o
}

// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
func (o CSIIsilonSpecDriverControllerTolerationsOutput) Effect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerTolerations) *string { return v.Effect }).(pulumi.StringPtrOutput)
}

// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
func (o CSIIsilonSpecDriverControllerTolerationsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerTolerations) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
func (o CSIIsilonSpecDriverControllerTolerationsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerTolerations) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
func (o CSIIsilonSpecDriverControllerTolerationsOutput) TolerationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerTolerations) *int { return v.TolerationSeconds }).(pulumi.IntPtrOutput)
}

// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
func (o CSIIsilonSpecDriverControllerTolerationsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverControllerTolerations) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type CSIIsilonSpecDriverControllerTolerationsArrayOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverControllerTolerationsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverControllerTolerations)(nil)).Elem()
}

func (o CSIIsilonSpecDriverControllerTolerationsArrayOutput) ToCSIIsilonSpecDriverControllerTolerationsArrayOutput() CSIIsilonSpecDriverControllerTolerationsArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerTolerationsArrayOutput) ToCSIIsilonSpecDriverControllerTolerationsArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverControllerTolerationsArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverControllerTolerationsArrayOutput) Index(i pulumi.IntInput) CSIIsilonSpecDriverControllerTolerationsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIIsilonSpecDriverControllerTolerations {
		return vs[0].([]CSIIsilonSpecDriverControllerTolerations)[vs[1].(int)]
	}).(CSIIsilonSpecDriverControllerTolerationsOutput)
}

// Node is the specification for Node plugin only
type CSIIsilonSpecDriverNode struct {
	// Args is the set of arguments for the container
	Args []string `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs []CSIIsilonSpecDriverNodeEnvs `pulumi:"envs"`
	// Image is the image tag for the Container
	Image *string `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name *string `pulumi:"name"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
	NodeSelector map[string]string `pulumi:"nodeSelector"`
	// Tolerations is the list of tolerations for the driver pods
	Tolerations []CSIIsilonSpecDriverNodeTolerations `pulumi:"tolerations"`
}

// CSIIsilonSpecDriverNodeInput is an input type that accepts CSIIsilonSpecDriverNodeArgs and CSIIsilonSpecDriverNodeOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeInput` via:
//
//          CSIIsilonSpecDriverNodeArgs{...}
type CSIIsilonSpecDriverNodeInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeOutput() CSIIsilonSpecDriverNodeOutput
	ToCSIIsilonSpecDriverNodeOutputWithContext(context.Context) CSIIsilonSpecDriverNodeOutput
}

// Node is the specification for Node plugin only
type CSIIsilonSpecDriverNodeArgs struct {
	// Args is the set of arguments for the container
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs CSIIsilonSpecDriverNodeEnvsArrayInput `pulumi:"envs"`
	// Image is the image tag for the Container
	Image pulumi.StringPtrInput `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name pulumi.StringPtrInput `pulumi:"name"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
	NodeSelector pulumi.StringMapInput `pulumi:"nodeSelector"`
	// Tolerations is the list of tolerations for the driver pods
	Tolerations CSIIsilonSpecDriverNodeTolerationsArrayInput `pulumi:"tolerations"`
}

func (CSIIsilonSpecDriverNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNode)(nil)).Elem()
}

func (i CSIIsilonSpecDriverNodeArgs) ToCSIIsilonSpecDriverNodeOutput() CSIIsilonSpecDriverNodeOutput {
	return i.ToCSIIsilonSpecDriverNodeOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeArgs) ToCSIIsilonSpecDriverNodeOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeOutput)
}

func (i CSIIsilonSpecDriverNodeArgs) ToCSIIsilonSpecDriverNodePtrOutput() CSIIsilonSpecDriverNodePtrOutput {
	return i.ToCSIIsilonSpecDriverNodePtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeArgs) ToCSIIsilonSpecDriverNodePtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeOutput).ToCSIIsilonSpecDriverNodePtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverNodePtrInput is an input type that accepts CSIIsilonSpecDriverNodeArgs, CSIIsilonSpecDriverNodePtr and CSIIsilonSpecDriverNodePtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodePtrInput` via:
//
//          CSIIsilonSpecDriverNodeArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverNodePtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodePtrOutput() CSIIsilonSpecDriverNodePtrOutput
	ToCSIIsilonSpecDriverNodePtrOutputWithContext(context.Context) CSIIsilonSpecDriverNodePtrOutput
}

type csiisilonSpecDriverNodePtrType CSIIsilonSpecDriverNodeArgs

func CSIIsilonSpecDriverNodePtr(v *CSIIsilonSpecDriverNodeArgs) CSIIsilonSpecDriverNodePtrInput {
	return (*csiisilonSpecDriverNodePtrType)(v)
}

func (*csiisilonSpecDriverNodePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverNode)(nil)).Elem()
}

func (i *csiisilonSpecDriverNodePtrType) ToCSIIsilonSpecDriverNodePtrOutput() CSIIsilonSpecDriverNodePtrOutput {
	return i.ToCSIIsilonSpecDriverNodePtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverNodePtrType) ToCSIIsilonSpecDriverNodePtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodePtrOutput)
}

// Node is the specification for Node plugin only
type CSIIsilonSpecDriverNodeOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNode)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeOutput) ToCSIIsilonSpecDriverNodeOutput() CSIIsilonSpecDriverNodeOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeOutput) ToCSIIsilonSpecDriverNodeOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeOutput) ToCSIIsilonSpecDriverNodePtrOutput() CSIIsilonSpecDriverNodePtrOutput {
	return o.ToCSIIsilonSpecDriverNodePtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverNodeOutput) ToCSIIsilonSpecDriverNodePtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodePtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNode) *CSIIsilonSpecDriverNode {
		return &v
	}).(CSIIsilonSpecDriverNodePtrOutput)
}

// Args is the set of arguments for the container
func (o CSIIsilonSpecDriverNodeOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNode) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIIsilonSpecDriverNodeOutput) Envs() CSIIsilonSpecDriverNodeEnvsArrayOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNode) []CSIIsilonSpecDriverNodeEnvs { return v.Envs }).(CSIIsilonSpecDriverNodeEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIIsilonSpecDriverNodeOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNode) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIIsilonSpecDriverNodeOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNode) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIIsilonSpecDriverNodeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNode) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
func (o CSIIsilonSpecDriverNodeOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNode) map[string]string { return v.NodeSelector }).(pulumi.StringMapOutput)
}

// Tolerations is the list of tolerations for the driver pods
func (o CSIIsilonSpecDriverNodeOutput) Tolerations() CSIIsilonSpecDriverNodeTolerationsArrayOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNode) []CSIIsilonSpecDriverNodeTolerations { return v.Tolerations }).(CSIIsilonSpecDriverNodeTolerationsArrayOutput)
}

type CSIIsilonSpecDriverNodePtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverNode)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodePtrOutput) ToCSIIsilonSpecDriverNodePtrOutput() CSIIsilonSpecDriverNodePtrOutput {
	return o
}

func (o CSIIsilonSpecDriverNodePtrOutput) ToCSIIsilonSpecDriverNodePtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodePtrOutput {
	return o
}

func (o CSIIsilonSpecDriverNodePtrOutput) Elem() CSIIsilonSpecDriverNodeOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNode) CSIIsilonSpecDriverNode { return *v }).(CSIIsilonSpecDriverNodeOutput)
}

// Args is the set of arguments for the container
func (o CSIIsilonSpecDriverNodePtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNode) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIIsilonSpecDriverNodePtrOutput) Envs() CSIIsilonSpecDriverNodeEnvsArrayOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNode) []CSIIsilonSpecDriverNodeEnvs {
		if v == nil {
			return nil
		}
		return v.Envs
	}).(CSIIsilonSpecDriverNodeEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIIsilonSpecDriverNodePtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNode) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIIsilonSpecDriverNodePtrOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNode) *string {
		if v == nil {
			return nil
		}
		return v.ImagePullPolicy
	}).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIIsilonSpecDriverNodePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNode) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
func (o CSIIsilonSpecDriverNodePtrOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNode) map[string]string {
		if v == nil {
			return nil
		}
		return v.NodeSelector
	}).(pulumi.StringMapOutput)
}

// Tolerations is the list of tolerations for the driver pods
func (o CSIIsilonSpecDriverNodePtrOutput) Tolerations() CSIIsilonSpecDriverNodeTolerationsArrayOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNode) []CSIIsilonSpecDriverNodeTolerations {
		if v == nil {
			return nil
		}
		return v.Tolerations
	}).(CSIIsilonSpecDriverNodeTolerationsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIIsilonSpecDriverNodeEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *CSIIsilonSpecDriverNodeEnvsValueFrom `pulumi:"valueFrom"`
}

// CSIIsilonSpecDriverNodeEnvsInput is an input type that accepts CSIIsilonSpecDriverNodeEnvsArgs and CSIIsilonSpecDriverNodeEnvsOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeEnvsInput` via:
//
//          CSIIsilonSpecDriverNodeEnvsArgs{...}
type CSIIsilonSpecDriverNodeEnvsInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeEnvsOutput() CSIIsilonSpecDriverNodeEnvsOutput
	ToCSIIsilonSpecDriverNodeEnvsOutputWithContext(context.Context) CSIIsilonSpecDriverNodeEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type CSIIsilonSpecDriverNodeEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom CSIIsilonSpecDriverNodeEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (CSIIsilonSpecDriverNodeEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNodeEnvs)(nil)).Elem()
}

func (i CSIIsilonSpecDriverNodeEnvsArgs) ToCSIIsilonSpecDriverNodeEnvsOutput() CSIIsilonSpecDriverNodeEnvsOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeEnvsArgs) ToCSIIsilonSpecDriverNodeEnvsOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsOutput)
}

// CSIIsilonSpecDriverNodeEnvsArrayInput is an input type that accepts CSIIsilonSpecDriverNodeEnvsArray and CSIIsilonSpecDriverNodeEnvsArrayOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeEnvsArrayInput` via:
//
//          CSIIsilonSpecDriverNodeEnvsArray{ CSIIsilonSpecDriverNodeEnvsArgs{...} }
type CSIIsilonSpecDriverNodeEnvsArrayInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeEnvsArrayOutput() CSIIsilonSpecDriverNodeEnvsArrayOutput
	ToCSIIsilonSpecDriverNodeEnvsArrayOutputWithContext(context.Context) CSIIsilonSpecDriverNodeEnvsArrayOutput
}

type CSIIsilonSpecDriverNodeEnvsArray []CSIIsilonSpecDriverNodeEnvsInput

func (CSIIsilonSpecDriverNodeEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverNodeEnvs)(nil)).Elem()
}

func (i CSIIsilonSpecDriverNodeEnvsArray) ToCSIIsilonSpecDriverNodeEnvsArrayOutput() CSIIsilonSpecDriverNodeEnvsArrayOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsArrayOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeEnvsArray) ToCSIIsilonSpecDriverNodeEnvsArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIIsilonSpecDriverNodeEnvsOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNodeEnvs)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeEnvsOutput) ToCSIIsilonSpecDriverNodeEnvsOutput() CSIIsilonSpecDriverNodeEnvsOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsOutput) ToCSIIsilonSpecDriverNodeEnvsOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o CSIIsilonSpecDriverNodeEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o CSIIsilonSpecDriverNodeEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o CSIIsilonSpecDriverNodeEnvsOutput) ValueFrom() CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvs) *CSIIsilonSpecDriverNodeEnvsValueFrom { return v.ValueFrom }).(CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput)
}

type CSIIsilonSpecDriverNodeEnvsArrayOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverNodeEnvs)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeEnvsArrayOutput) ToCSIIsilonSpecDriverNodeEnvsArrayOutput() CSIIsilonSpecDriverNodeEnvsArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsArrayOutput) ToCSIIsilonSpecDriverNodeEnvsArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsArrayOutput) Index(i pulumi.IntInput) CSIIsilonSpecDriverNodeEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIIsilonSpecDriverNodeEnvs {
		return vs[0].([]CSIIsilonSpecDriverNodeEnvs)[vs[1].(int)]
	}).(CSIIsilonSpecDriverNodeEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIIsilonSpecDriverNodeEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef *CSIIsilonSpecDriverNodeEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// CSIIsilonSpecDriverNodeEnvsValueFromInput is an input type that accepts CSIIsilonSpecDriverNodeEnvsValueFromArgs and CSIIsilonSpecDriverNodeEnvsValueFromOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeEnvsValueFromInput` via:
//
//          CSIIsilonSpecDriverNodeEnvsValueFromArgs{...}
type CSIIsilonSpecDriverNodeEnvsValueFromInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeEnvsValueFromOutput() CSIIsilonSpecDriverNodeEnvsValueFromOutput
	ToCSIIsilonSpecDriverNodeEnvsValueFromOutputWithContext(context.Context) CSIIsilonSpecDriverNodeEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIIsilonSpecDriverNodeEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (CSIIsilonSpecDriverNodeEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNodeEnvsValueFrom)(nil)).Elem()
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromOutput() CSIIsilonSpecDriverNodeEnvsValueFromOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromOutput)
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromOutput).ToCSIIsilonSpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverNodeEnvsValueFromPtrInput is an input type that accepts CSIIsilonSpecDriverNodeEnvsValueFromArgs, CSIIsilonSpecDriverNodeEnvsValueFromPtr and CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeEnvsValueFromPtrInput` via:
//
//          CSIIsilonSpecDriverNodeEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverNodeEnvsValueFromPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeEnvsValueFromPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput
	ToCSIIsilonSpecDriverNodeEnvsValueFromPtrOutputWithContext(context.Context) CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput
}

type csiisilonSpecDriverNodeEnvsValueFromPtrType CSIIsilonSpecDriverNodeEnvsValueFromArgs

func CSIIsilonSpecDriverNodeEnvsValueFromPtr(v *CSIIsilonSpecDriverNodeEnvsValueFromArgs) CSIIsilonSpecDriverNodeEnvsValueFromPtrInput {
	return (*csiisilonSpecDriverNodeEnvsValueFromPtrType)(v)
}

func (*csiisilonSpecDriverNodeEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverNodeEnvsValueFrom)(nil)).Elem()
}

func (i *csiisilonSpecDriverNodeEnvsValueFromPtrType) ToCSIIsilonSpecDriverNodeEnvsValueFromPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverNodeEnvsValueFromPtrType) ToCSIIsilonSpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIIsilonSpecDriverNodeEnvsValueFromOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNodeEnvsValueFrom)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromOutput() CSIIsilonSpecDriverNodeEnvsValueFromOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput {
	return o.ToCSIIsilonSpecDriverNodeEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFrom) *CSIIsilonSpecDriverNodeEnvsValueFrom {
		return &v
	}).(CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o CSIIsilonSpecDriverNodeEnvsValueFromOutput) ConfigMapKeyRef() CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFrom) *CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o CSIIsilonSpecDriverNodeEnvsValueFromOutput) FieldRef() CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFrom) *CSIIsilonSpecDriverNodeEnvsValueFromFieldRef {
		return v.FieldRef
	}).(CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIIsilonSpecDriverNodeEnvsValueFromOutput) ResourceFieldRef() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFrom) *CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIIsilonSpecDriverNodeEnvsValueFromOutput) SecretKeyRef() CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFrom) *CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput)
}

type CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverNodeEnvsValueFrom)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput) Elem() CSIIsilonSpecDriverNodeEnvsValueFromOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFrom) CSIIsilonSpecDriverNodeEnvsValueFrom { return *v }).(CSIIsilonSpecDriverNodeEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput) ConfigMapKeyRef() CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFrom) *CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput) FieldRef() CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFrom) *CSIIsilonSpecDriverNodeEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput) ResourceFieldRef() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFrom) *CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput) SecretKeyRef() CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFrom) *CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefInput is an input type that accepts CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs and CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefInput` via:
//
//          CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs{...}
type CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput() CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput
	ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput() CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput)
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput).ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs, CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtr and CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput
	ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput
}

type csiisilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs

func CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtr(v *CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput {
	return (*csiisilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*csiisilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType) ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType) ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput() CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef) *CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef {
		return &v
	}).(CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) Elem() CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef) CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef {
		return *v
	}).(CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIIsilonSpecDriverNodeEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// CSIIsilonSpecDriverNodeEnvsValueFromFieldRefInput is an input type that accepts CSIIsilonSpecDriverNodeEnvsValueFromFieldRefArgs and CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeEnvsValueFromFieldRefInput` via:
//
//          CSIIsilonSpecDriverNodeEnvsValueFromFieldRefArgs{...}
type CSIIsilonSpecDriverNodeEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput() CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput
	ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutputWithContext(context.Context) CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIIsilonSpecDriverNodeEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (CSIIsilonSpecDriverNodeEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNodeEnvsValueFromFieldRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput() CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput)
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput).ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrInput is an input type that accepts CSIIsilonSpecDriverNodeEnvsValueFromFieldRefArgs, CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtr and CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrInput` via:
//
//          CSIIsilonSpecDriverNodeEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput
	ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput
}

type csiisilonSpecDriverNodeEnvsValueFromFieldRefPtrType CSIIsilonSpecDriverNodeEnvsValueFromFieldRefArgs

func CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtr(v *CSIIsilonSpecDriverNodeEnvsValueFromFieldRefArgs) CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrInput {
	return (*csiisilonSpecDriverNodeEnvsValueFromFieldRefPtrType)(v)
}

func (*csiisilonSpecDriverNodeEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverNodeEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverNodeEnvsValueFromFieldRefPtrType) ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverNodeEnvsValueFromFieldRefPtrType) ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNodeEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput() CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o.ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromFieldRef) *CSIIsilonSpecDriverNodeEnvsValueFromFieldRef {
		return &v
	}).(CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverNodeEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput) Elem() CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromFieldRef) CSIIsilonSpecDriverNodeEnvsValueFromFieldRef {
		return *v
	}).(CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisor `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefInput is an input type that accepts CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefArgs and CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefInput` via:
//
//          CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefArgs{...}
type CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput
	ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutputWithContext(context.Context) CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput)
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput).ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrInput is an input type that accepts CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefArgs, CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtr and CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrInput` via:
//
//          CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput
	ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput
}

type csiisilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrType CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefArgs

func CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtr(v *CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefArgs) CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrInput {
	return (*csiisilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*csiisilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrType) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrType) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef) *CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef {
		return &v
	}).(CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput) Divisor() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef) *CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisor {
		return v.Divisor
	}).(CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) Elem() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef) CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef {
		return *v
	}).(CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) Divisor() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef) *CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisor {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

type CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisor struct {
}

// CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorInput is an input type that accepts CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs and CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorInput` via:
//
//          CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs{...}
type CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput
	ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Context) CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput
}

type CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs struct {
}

func (CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput)
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput).ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrInput is an input type that accepts CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs, CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtr and CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrInput` via:
//
//          CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput
	ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Context) CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput
}

type csiisilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrType CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs

func CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtr(v *CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs) CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrInput {
	return (*csiisilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrType)(v)
}

func (*csiisilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i *csiisilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrType) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrType) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisor) *CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisor {
		return &v
	}).(CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput) Elem() CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisor) CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisor {
		return *v
	}).(CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefInput is an input type that accepts CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefArgs and CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefInput` via:
//
//          CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefArgs{...}
type CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput() CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput
	ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutputWithContext(context.Context) CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput() CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput)
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput).ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrInput is an input type that accepts CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefArgs, CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtr and CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrInput` via:
//
//          CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput
	ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput
}

type csiisilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrType CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefArgs

func CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtr(v *CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefArgs) CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrInput {
	return (*csiisilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*csiisilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrType) ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrType) ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput() CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef) *CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef {
		return &v
	}).(CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) ToCSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) Elem() CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef) CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef {
		return *v
	}).(CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIIsilonSpecDriverNodeNodeSelector struct {
}

// CSIIsilonSpecDriverNodeNodeSelectorInput is an input type that accepts CSIIsilonSpecDriverNodeNodeSelectorArgs and CSIIsilonSpecDriverNodeNodeSelectorOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeNodeSelectorInput` via:
//
//          CSIIsilonSpecDriverNodeNodeSelectorArgs{...}
type CSIIsilonSpecDriverNodeNodeSelectorInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeNodeSelectorOutput() CSIIsilonSpecDriverNodeNodeSelectorOutput
	ToCSIIsilonSpecDriverNodeNodeSelectorOutputWithContext(context.Context) CSIIsilonSpecDriverNodeNodeSelectorOutput
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIIsilonSpecDriverNodeNodeSelectorArgs struct {
}

func (CSIIsilonSpecDriverNodeNodeSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNodeNodeSelector)(nil)).Elem()
}

func (i CSIIsilonSpecDriverNodeNodeSelectorArgs) ToCSIIsilonSpecDriverNodeNodeSelectorOutput() CSIIsilonSpecDriverNodeNodeSelectorOutput {
	return i.ToCSIIsilonSpecDriverNodeNodeSelectorOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeNodeSelectorArgs) ToCSIIsilonSpecDriverNodeNodeSelectorOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeNodeSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeNodeSelectorOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIIsilonSpecDriverNodeNodeSelectorOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeNodeSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNodeNodeSelector)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeNodeSelectorOutput) ToCSIIsilonSpecDriverNodeNodeSelectorOutput() CSIIsilonSpecDriverNodeNodeSelectorOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeNodeSelectorOutput) ToCSIIsilonSpecDriverNodeNodeSelectorOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeNodeSelectorOutput {
	return o
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIIsilonSpecDriverNodeTolerations struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect *string `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key *string `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator *string `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds *int `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value *string `pulumi:"value"`
}

// CSIIsilonSpecDriverNodeTolerationsInput is an input type that accepts CSIIsilonSpecDriverNodeTolerationsArgs and CSIIsilonSpecDriverNodeTolerationsOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeTolerationsInput` via:
//
//          CSIIsilonSpecDriverNodeTolerationsArgs{...}
type CSIIsilonSpecDriverNodeTolerationsInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeTolerationsOutput() CSIIsilonSpecDriverNodeTolerationsOutput
	ToCSIIsilonSpecDriverNodeTolerationsOutputWithContext(context.Context) CSIIsilonSpecDriverNodeTolerationsOutput
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIIsilonSpecDriverNodeTolerationsArgs struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect pulumi.StringPtrInput `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds pulumi.IntPtrInput `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (CSIIsilonSpecDriverNodeTolerationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNodeTolerations)(nil)).Elem()
}

func (i CSIIsilonSpecDriverNodeTolerationsArgs) ToCSIIsilonSpecDriverNodeTolerationsOutput() CSIIsilonSpecDriverNodeTolerationsOutput {
	return i.ToCSIIsilonSpecDriverNodeTolerationsOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeTolerationsArgs) ToCSIIsilonSpecDriverNodeTolerationsOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeTolerationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeTolerationsOutput)
}

// CSIIsilonSpecDriverNodeTolerationsArrayInput is an input type that accepts CSIIsilonSpecDriverNodeTolerationsArray and CSIIsilonSpecDriverNodeTolerationsArrayOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverNodeTolerationsArrayInput` via:
//
//          CSIIsilonSpecDriverNodeTolerationsArray{ CSIIsilonSpecDriverNodeTolerationsArgs{...} }
type CSIIsilonSpecDriverNodeTolerationsArrayInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverNodeTolerationsArrayOutput() CSIIsilonSpecDriverNodeTolerationsArrayOutput
	ToCSIIsilonSpecDriverNodeTolerationsArrayOutputWithContext(context.Context) CSIIsilonSpecDriverNodeTolerationsArrayOutput
}

type CSIIsilonSpecDriverNodeTolerationsArray []CSIIsilonSpecDriverNodeTolerationsInput

func (CSIIsilonSpecDriverNodeTolerationsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverNodeTolerations)(nil)).Elem()
}

func (i CSIIsilonSpecDriverNodeTolerationsArray) ToCSIIsilonSpecDriverNodeTolerationsArrayOutput() CSIIsilonSpecDriverNodeTolerationsArrayOutput {
	return i.ToCSIIsilonSpecDriverNodeTolerationsArrayOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverNodeTolerationsArray) ToCSIIsilonSpecDriverNodeTolerationsArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeTolerationsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverNodeTolerationsArrayOutput)
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIIsilonSpecDriverNodeTolerationsOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeTolerationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverNodeTolerations)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeTolerationsOutput) ToCSIIsilonSpecDriverNodeTolerationsOutput() CSIIsilonSpecDriverNodeTolerationsOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeTolerationsOutput) ToCSIIsilonSpecDriverNodeTolerationsOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeTolerationsOutput {
	return o
}

// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
func (o CSIIsilonSpecDriverNodeTolerationsOutput) Effect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeTolerations) *string { return v.Effect }).(pulumi.StringPtrOutput)
}

// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
func (o CSIIsilonSpecDriverNodeTolerationsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeTolerations) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
func (o CSIIsilonSpecDriverNodeTolerationsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeTolerations) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
func (o CSIIsilonSpecDriverNodeTolerationsOutput) TolerationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeTolerations) *int { return v.TolerationSeconds }).(pulumi.IntPtrOutput)
}

// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
func (o CSIIsilonSpecDriverNodeTolerationsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverNodeTolerations) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type CSIIsilonSpecDriverNodeTolerationsArrayOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverNodeTolerationsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverNodeTolerations)(nil)).Elem()
}

func (o CSIIsilonSpecDriverNodeTolerationsArrayOutput) ToCSIIsilonSpecDriverNodeTolerationsArrayOutput() CSIIsilonSpecDriverNodeTolerationsArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeTolerationsArrayOutput) ToCSIIsilonSpecDriverNodeTolerationsArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverNodeTolerationsArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverNodeTolerationsArrayOutput) Index(i pulumi.IntInput) CSIIsilonSpecDriverNodeTolerationsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIIsilonSpecDriverNodeTolerations {
		return vs[0].([]CSIIsilonSpecDriverNodeTolerations)[vs[1].(int)]
	}).(CSIIsilonSpecDriverNodeTolerationsOutput)
}

// ContainerTemplate - Structure representing a container
type CSIIsilonSpecDriverSideCars struct {
	// Args is the set of arguments for the container
	Args []string `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs []CSIIsilonSpecDriverSideCarsEnvs `pulumi:"envs"`
	// Image is the image tag for the Container
	Image *string `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name *string `pulumi:"name"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
	NodeSelector map[string]string `pulumi:"nodeSelector"`
	// Tolerations is the list of tolerations for the driver pods
	Tolerations []CSIIsilonSpecDriverSideCarsTolerations `pulumi:"tolerations"`
}

// CSIIsilonSpecDriverSideCarsInput is an input type that accepts CSIIsilonSpecDriverSideCarsArgs and CSIIsilonSpecDriverSideCarsOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsInput` via:
//
//          CSIIsilonSpecDriverSideCarsArgs{...}
type CSIIsilonSpecDriverSideCarsInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsOutput() CSIIsilonSpecDriverSideCarsOutput
	ToCSIIsilonSpecDriverSideCarsOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsOutput
}

// ContainerTemplate - Structure representing a container
type CSIIsilonSpecDriverSideCarsArgs struct {
	// Args is the set of arguments for the container
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs CSIIsilonSpecDriverSideCarsEnvsArrayInput `pulumi:"envs"`
	// Image is the image tag for the Container
	Image pulumi.StringPtrInput `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name pulumi.StringPtrInput `pulumi:"name"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
	NodeSelector pulumi.StringMapInput `pulumi:"nodeSelector"`
	// Tolerations is the list of tolerations for the driver pods
	Tolerations CSIIsilonSpecDriverSideCarsTolerationsArrayInput `pulumi:"tolerations"`
}

func (CSIIsilonSpecDriverSideCarsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCars)(nil)).Elem()
}

func (i CSIIsilonSpecDriverSideCarsArgs) ToCSIIsilonSpecDriverSideCarsOutput() CSIIsilonSpecDriverSideCarsOutput {
	return i.ToCSIIsilonSpecDriverSideCarsOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsArgs) ToCSIIsilonSpecDriverSideCarsOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsOutput)
}

// CSIIsilonSpecDriverSideCarsArrayInput is an input type that accepts CSIIsilonSpecDriverSideCarsArray and CSIIsilonSpecDriverSideCarsArrayOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsArrayInput` via:
//
//          CSIIsilonSpecDriverSideCarsArray{ CSIIsilonSpecDriverSideCarsArgs{...} }
type CSIIsilonSpecDriverSideCarsArrayInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsArrayOutput() CSIIsilonSpecDriverSideCarsArrayOutput
	ToCSIIsilonSpecDriverSideCarsArrayOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsArrayOutput
}

type CSIIsilonSpecDriverSideCarsArray []CSIIsilonSpecDriverSideCarsInput

func (CSIIsilonSpecDriverSideCarsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverSideCars)(nil)).Elem()
}

func (i CSIIsilonSpecDriverSideCarsArray) ToCSIIsilonSpecDriverSideCarsArrayOutput() CSIIsilonSpecDriverSideCarsArrayOutput {
	return i.ToCSIIsilonSpecDriverSideCarsArrayOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsArray) ToCSIIsilonSpecDriverSideCarsArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsArrayOutput)
}

// ContainerTemplate - Structure representing a container
type CSIIsilonSpecDriverSideCarsOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCars)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsOutput) ToCSIIsilonSpecDriverSideCarsOutput() CSIIsilonSpecDriverSideCarsOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsOutput) ToCSIIsilonSpecDriverSideCarsOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsOutput {
	return o
}

// Args is the set of arguments for the container
func (o CSIIsilonSpecDriverSideCarsOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCars) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIIsilonSpecDriverSideCarsOutput) Envs() CSIIsilonSpecDriverSideCarsEnvsArrayOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCars) []CSIIsilonSpecDriverSideCarsEnvs { return v.Envs }).(CSIIsilonSpecDriverSideCarsEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIIsilonSpecDriverSideCarsOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCars) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIIsilonSpecDriverSideCarsOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCars) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIIsilonSpecDriverSideCarsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCars) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
func (o CSIIsilonSpecDriverSideCarsOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCars) map[string]string { return v.NodeSelector }).(pulumi.StringMapOutput)
}

// Tolerations is the list of tolerations for the driver pods
func (o CSIIsilonSpecDriverSideCarsOutput) Tolerations() CSIIsilonSpecDriverSideCarsTolerationsArrayOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCars) []CSIIsilonSpecDriverSideCarsTolerations { return v.Tolerations }).(CSIIsilonSpecDriverSideCarsTolerationsArrayOutput)
}

type CSIIsilonSpecDriverSideCarsArrayOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverSideCars)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsArrayOutput) ToCSIIsilonSpecDriverSideCarsArrayOutput() CSIIsilonSpecDriverSideCarsArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsArrayOutput) ToCSIIsilonSpecDriverSideCarsArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsArrayOutput) Index(i pulumi.IntInput) CSIIsilonSpecDriverSideCarsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIIsilonSpecDriverSideCars {
		return vs[0].([]CSIIsilonSpecDriverSideCars)[vs[1].(int)]
	}).(CSIIsilonSpecDriverSideCarsOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIIsilonSpecDriverSideCarsEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *CSIIsilonSpecDriverSideCarsEnvsValueFrom `pulumi:"valueFrom"`
}

// CSIIsilonSpecDriverSideCarsEnvsInput is an input type that accepts CSIIsilonSpecDriverSideCarsEnvsArgs and CSIIsilonSpecDriverSideCarsEnvsOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsEnvsInput` via:
//
//          CSIIsilonSpecDriverSideCarsEnvsArgs{...}
type CSIIsilonSpecDriverSideCarsEnvsInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsEnvsOutput() CSIIsilonSpecDriverSideCarsEnvsOutput
	ToCSIIsilonSpecDriverSideCarsEnvsOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type CSIIsilonSpecDriverSideCarsEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom CSIIsilonSpecDriverSideCarsEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (CSIIsilonSpecDriverSideCarsEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCarsEnvs)(nil)).Elem()
}

func (i CSIIsilonSpecDriverSideCarsEnvsArgs) ToCSIIsilonSpecDriverSideCarsEnvsOutput() CSIIsilonSpecDriverSideCarsEnvsOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsEnvsArgs) ToCSIIsilonSpecDriverSideCarsEnvsOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsOutput)
}

// CSIIsilonSpecDriverSideCarsEnvsArrayInput is an input type that accepts CSIIsilonSpecDriverSideCarsEnvsArray and CSIIsilonSpecDriverSideCarsEnvsArrayOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsEnvsArrayInput` via:
//
//          CSIIsilonSpecDriverSideCarsEnvsArray{ CSIIsilonSpecDriverSideCarsEnvsArgs{...} }
type CSIIsilonSpecDriverSideCarsEnvsArrayInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsEnvsArrayOutput() CSIIsilonSpecDriverSideCarsEnvsArrayOutput
	ToCSIIsilonSpecDriverSideCarsEnvsArrayOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsEnvsArrayOutput
}

type CSIIsilonSpecDriverSideCarsEnvsArray []CSIIsilonSpecDriverSideCarsEnvsInput

func (CSIIsilonSpecDriverSideCarsEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverSideCarsEnvs)(nil)).Elem()
}

func (i CSIIsilonSpecDriverSideCarsEnvsArray) ToCSIIsilonSpecDriverSideCarsEnvsArrayOutput() CSIIsilonSpecDriverSideCarsEnvsArrayOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsArrayOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsEnvsArray) ToCSIIsilonSpecDriverSideCarsEnvsArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIIsilonSpecDriverSideCarsEnvsOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCarsEnvs)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsEnvsOutput) ToCSIIsilonSpecDriverSideCarsEnvsOutput() CSIIsilonSpecDriverSideCarsEnvsOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsOutput) ToCSIIsilonSpecDriverSideCarsEnvsOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o CSIIsilonSpecDriverSideCarsEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o CSIIsilonSpecDriverSideCarsEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o CSIIsilonSpecDriverSideCarsEnvsOutput) ValueFrom() CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvs) *CSIIsilonSpecDriverSideCarsEnvsValueFrom { return v.ValueFrom }).(CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput)
}

type CSIIsilonSpecDriverSideCarsEnvsArrayOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverSideCarsEnvs)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsEnvsArrayOutput) ToCSIIsilonSpecDriverSideCarsEnvsArrayOutput() CSIIsilonSpecDriverSideCarsEnvsArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsArrayOutput) ToCSIIsilonSpecDriverSideCarsEnvsArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsArrayOutput) Index(i pulumi.IntInput) CSIIsilonSpecDriverSideCarsEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIIsilonSpecDriverSideCarsEnvs {
		return vs[0].([]CSIIsilonSpecDriverSideCarsEnvs)[vs[1].(int)]
	}).(CSIIsilonSpecDriverSideCarsEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIIsilonSpecDriverSideCarsEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef *CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// CSIIsilonSpecDriverSideCarsEnvsValueFromInput is an input type that accepts CSIIsilonSpecDriverSideCarsEnvsValueFromArgs and CSIIsilonSpecDriverSideCarsEnvsValueFromOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsEnvsValueFromInput` via:
//
//          CSIIsilonSpecDriverSideCarsEnvsValueFromArgs{...}
type CSIIsilonSpecDriverSideCarsEnvsValueFromInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsEnvsValueFromOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromOutput
	ToCSIIsilonSpecDriverSideCarsEnvsValueFromOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIIsilonSpecDriverSideCarsEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (CSIIsilonSpecDriverSideCarsEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCarsEnvsValueFrom)(nil)).Elem()
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromOutput)
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromOutput).ToCSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverSideCarsEnvsValueFromPtrInput is an input type that accepts CSIIsilonSpecDriverSideCarsEnvsValueFromArgs, CSIIsilonSpecDriverSideCarsEnvsValueFromPtr and CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsEnvsValueFromPtrInput` via:
//
//          CSIIsilonSpecDriverSideCarsEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverSideCarsEnvsValueFromPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput
	ToCSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput
}

type csiisilonSpecDriverSideCarsEnvsValueFromPtrType CSIIsilonSpecDriverSideCarsEnvsValueFromArgs

func CSIIsilonSpecDriverSideCarsEnvsValueFromPtr(v *CSIIsilonSpecDriverSideCarsEnvsValueFromArgs) CSIIsilonSpecDriverSideCarsEnvsValueFromPtrInput {
	return (*csiisilonSpecDriverSideCarsEnvsValueFromPtrType)(v)
}

func (*csiisilonSpecDriverSideCarsEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverSideCarsEnvsValueFrom)(nil)).Elem()
}

func (i *csiisilonSpecDriverSideCarsEnvsValueFromPtrType) ToCSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverSideCarsEnvsValueFromPtrType) ToCSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIIsilonSpecDriverSideCarsEnvsValueFromOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCarsEnvsValueFrom)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput {
	return o.ToCSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFrom) *CSIIsilonSpecDriverSideCarsEnvsValueFrom {
		return &v
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromOutput) ConfigMapKeyRef() CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFrom) *CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromOutput) FieldRef() CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFrom) *CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef {
		return v.FieldRef
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromOutput) ResourceFieldRef() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFrom) *CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromOutput) SecretKeyRef() CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFrom) *CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput)
}

type CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverSideCarsEnvsValueFrom)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput) Elem() CSIIsilonSpecDriverSideCarsEnvsValueFromOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFrom) CSIIsilonSpecDriverSideCarsEnvsValueFrom { return *v }).(CSIIsilonSpecDriverSideCarsEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput) ConfigMapKeyRef() CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFrom) *CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput) FieldRef() CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFrom) *CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput) ResourceFieldRef() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFrom) *CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput) SecretKeyRef() CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFrom) *CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefInput is an input type that accepts CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs and CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefInput` via:
//
//          CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs{...}
type CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput
	ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput)
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput).ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs, CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtr and CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput
	ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput
}

type csiisilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs

func CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtr(v *CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput {
	return (*csiisilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*csiisilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType) ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType) ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
		return &v
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) Elem() CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
		return *v
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefInput is an input type that accepts CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefArgs and CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefInput` via:
//
//          CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefArgs{...}
type CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput
	ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput)
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput).ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrInput is an input type that accepts CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefArgs, CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtr and CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrInput` via:
//
//          CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput
	ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput
}

type csiisilonSpecDriverSideCarsEnvsValueFromFieldRefPtrType CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefArgs

func CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtr(v *CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefArgs) CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrInput {
	return (*csiisilonSpecDriverSideCarsEnvsValueFromFieldRefPtrType)(v)
}

func (*csiisilonSpecDriverSideCarsEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverSideCarsEnvsValueFromFieldRefPtrType) ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverSideCarsEnvsValueFromFieldRefPtrType) ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o.ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef) *CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef {
		return &v
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) Elem() CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef) CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef {
		return *v
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefInput is an input type that accepts CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs and CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefInput` via:
//
//          CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs{...}
type CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput
	ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput)
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput).ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput is an input type that accepts CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs, CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtr and CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput` via:
//
//          CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput
	ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput
}

type csiisilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs

func CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtr(v *CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput {
	return (*csiisilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*csiisilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef) *CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef {
		return &v
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) Divisor() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef) *CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor {
		return v.Divisor
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) Elem() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef) CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef {
		return *v
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) Divisor() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef) *CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

type CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor struct {
}

// CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorInput is an input type that accepts CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs and CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorInput` via:
//
//          CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs{...}
type CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput
	ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput
}

type CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs struct {
}

func (CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput)
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput).ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrInput is an input type that accepts CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs, CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtr and CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrInput` via:
//
//          CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput
	ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput
}

type csiisilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrType CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs

func CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtr(v *CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs) CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrInput {
	return (*csiisilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrType)(v)
}

func (*csiisilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i *csiisilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrType) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrType) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor) *CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor {
		return &v
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput) Elem() CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor) CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor {
		return *v
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefInput is an input type that accepts CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs and CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefInput` via:
//
//          CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs{...}
type CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput
	ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput)
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput).ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput is an input type that accepts CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs, CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtr and CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput` via:
//
//          CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput
	ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput
}

type csiisilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs

func CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtr(v *CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput {
	return (*csiisilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*csiisilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *csiisilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType) ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *csiisilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType) ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef) *CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef {
		return &v
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) ToCSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) Elem() CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef) CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef {
		return *v
	}).(CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIIsilonSpecDriverSideCarsNodeSelector struct {
}

// CSIIsilonSpecDriverSideCarsNodeSelectorInput is an input type that accepts CSIIsilonSpecDriverSideCarsNodeSelectorArgs and CSIIsilonSpecDriverSideCarsNodeSelectorOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsNodeSelectorInput` via:
//
//          CSIIsilonSpecDriverSideCarsNodeSelectorArgs{...}
type CSIIsilonSpecDriverSideCarsNodeSelectorInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsNodeSelectorOutput() CSIIsilonSpecDriverSideCarsNodeSelectorOutput
	ToCSIIsilonSpecDriverSideCarsNodeSelectorOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsNodeSelectorOutput
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIIsilonSpecDriverSideCarsNodeSelectorArgs struct {
}

func (CSIIsilonSpecDriverSideCarsNodeSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCarsNodeSelector)(nil)).Elem()
}

func (i CSIIsilonSpecDriverSideCarsNodeSelectorArgs) ToCSIIsilonSpecDriverSideCarsNodeSelectorOutput() CSIIsilonSpecDriverSideCarsNodeSelectorOutput {
	return i.ToCSIIsilonSpecDriverSideCarsNodeSelectorOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsNodeSelectorArgs) ToCSIIsilonSpecDriverSideCarsNodeSelectorOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsNodeSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsNodeSelectorOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIIsilonSpecDriverSideCarsNodeSelectorOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsNodeSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCarsNodeSelector)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsNodeSelectorOutput) ToCSIIsilonSpecDriverSideCarsNodeSelectorOutput() CSIIsilonSpecDriverSideCarsNodeSelectorOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsNodeSelectorOutput) ToCSIIsilonSpecDriverSideCarsNodeSelectorOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsNodeSelectorOutput {
	return o
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIIsilonSpecDriverSideCarsTolerations struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect *string `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key *string `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator *string `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds *int `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value *string `pulumi:"value"`
}

// CSIIsilonSpecDriverSideCarsTolerationsInput is an input type that accepts CSIIsilonSpecDriverSideCarsTolerationsArgs and CSIIsilonSpecDriverSideCarsTolerationsOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsTolerationsInput` via:
//
//          CSIIsilonSpecDriverSideCarsTolerationsArgs{...}
type CSIIsilonSpecDriverSideCarsTolerationsInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsTolerationsOutput() CSIIsilonSpecDriverSideCarsTolerationsOutput
	ToCSIIsilonSpecDriverSideCarsTolerationsOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsTolerationsOutput
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIIsilonSpecDriverSideCarsTolerationsArgs struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect pulumi.StringPtrInput `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds pulumi.IntPtrInput `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (CSIIsilonSpecDriverSideCarsTolerationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCarsTolerations)(nil)).Elem()
}

func (i CSIIsilonSpecDriverSideCarsTolerationsArgs) ToCSIIsilonSpecDriverSideCarsTolerationsOutput() CSIIsilonSpecDriverSideCarsTolerationsOutput {
	return i.ToCSIIsilonSpecDriverSideCarsTolerationsOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsTolerationsArgs) ToCSIIsilonSpecDriverSideCarsTolerationsOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsTolerationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsTolerationsOutput)
}

// CSIIsilonSpecDriverSideCarsTolerationsArrayInput is an input type that accepts CSIIsilonSpecDriverSideCarsTolerationsArray and CSIIsilonSpecDriverSideCarsTolerationsArrayOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSideCarsTolerationsArrayInput` via:
//
//          CSIIsilonSpecDriverSideCarsTolerationsArray{ CSIIsilonSpecDriverSideCarsTolerationsArgs{...} }
type CSIIsilonSpecDriverSideCarsTolerationsArrayInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSideCarsTolerationsArrayOutput() CSIIsilonSpecDriverSideCarsTolerationsArrayOutput
	ToCSIIsilonSpecDriverSideCarsTolerationsArrayOutputWithContext(context.Context) CSIIsilonSpecDriverSideCarsTolerationsArrayOutput
}

type CSIIsilonSpecDriverSideCarsTolerationsArray []CSIIsilonSpecDriverSideCarsTolerationsInput

func (CSIIsilonSpecDriverSideCarsTolerationsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverSideCarsTolerations)(nil)).Elem()
}

func (i CSIIsilonSpecDriverSideCarsTolerationsArray) ToCSIIsilonSpecDriverSideCarsTolerationsArrayOutput() CSIIsilonSpecDriverSideCarsTolerationsArrayOutput {
	return i.ToCSIIsilonSpecDriverSideCarsTolerationsArrayOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSideCarsTolerationsArray) ToCSIIsilonSpecDriverSideCarsTolerationsArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsTolerationsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSideCarsTolerationsArrayOutput)
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIIsilonSpecDriverSideCarsTolerationsOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsTolerationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSideCarsTolerations)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsTolerationsOutput) ToCSIIsilonSpecDriverSideCarsTolerationsOutput() CSIIsilonSpecDriverSideCarsTolerationsOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsTolerationsOutput) ToCSIIsilonSpecDriverSideCarsTolerationsOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsTolerationsOutput {
	return o
}

// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
func (o CSIIsilonSpecDriverSideCarsTolerationsOutput) Effect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsTolerations) *string { return v.Effect }).(pulumi.StringPtrOutput)
}

// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
func (o CSIIsilonSpecDriverSideCarsTolerationsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsTolerations) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
func (o CSIIsilonSpecDriverSideCarsTolerationsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsTolerations) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
func (o CSIIsilonSpecDriverSideCarsTolerationsOutput) TolerationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsTolerations) *int { return v.TolerationSeconds }).(pulumi.IntPtrOutput)
}

// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
func (o CSIIsilonSpecDriverSideCarsTolerationsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSideCarsTolerations) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type CSIIsilonSpecDriverSideCarsTolerationsArrayOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSideCarsTolerationsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverSideCarsTolerations)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSideCarsTolerationsArrayOutput) ToCSIIsilonSpecDriverSideCarsTolerationsArrayOutput() CSIIsilonSpecDriverSideCarsTolerationsArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsTolerationsArrayOutput) ToCSIIsilonSpecDriverSideCarsTolerationsArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSideCarsTolerationsArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverSideCarsTolerationsArrayOutput) Index(i pulumi.IntInput) CSIIsilonSpecDriverSideCarsTolerationsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIIsilonSpecDriverSideCarsTolerations {
		return vs[0].([]CSIIsilonSpecDriverSideCarsTolerations)[vs[1].(int)]
	}).(CSIIsilonSpecDriverSideCarsTolerationsOutput)
}

// SnapshotClass represents a VolumeSnapshotClass
type CSIIsilonSpecDriverSnapshotClass struct {
	// Name is the name of the Snapshot Class
	Name string `pulumi:"name"`
	// Parameters is a map of driver specific parameters for snapshot class
	Parameters map[string]string `pulumi:"parameters"`
}

// CSIIsilonSpecDriverSnapshotClassInput is an input type that accepts CSIIsilonSpecDriverSnapshotClassArgs and CSIIsilonSpecDriverSnapshotClassOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSnapshotClassInput` via:
//
//          CSIIsilonSpecDriverSnapshotClassArgs{...}
type CSIIsilonSpecDriverSnapshotClassInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSnapshotClassOutput() CSIIsilonSpecDriverSnapshotClassOutput
	ToCSIIsilonSpecDriverSnapshotClassOutputWithContext(context.Context) CSIIsilonSpecDriverSnapshotClassOutput
}

// SnapshotClass represents a VolumeSnapshotClass
type CSIIsilonSpecDriverSnapshotClassArgs struct {
	// Name is the name of the Snapshot Class
	Name pulumi.StringInput `pulumi:"name"`
	// Parameters is a map of driver specific parameters for snapshot class
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
}

func (CSIIsilonSpecDriverSnapshotClassArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSnapshotClass)(nil)).Elem()
}

func (i CSIIsilonSpecDriverSnapshotClassArgs) ToCSIIsilonSpecDriverSnapshotClassOutput() CSIIsilonSpecDriverSnapshotClassOutput {
	return i.ToCSIIsilonSpecDriverSnapshotClassOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSnapshotClassArgs) ToCSIIsilonSpecDriverSnapshotClassOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSnapshotClassOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSnapshotClassOutput)
}

// CSIIsilonSpecDriverSnapshotClassArrayInput is an input type that accepts CSIIsilonSpecDriverSnapshotClassArray and CSIIsilonSpecDriverSnapshotClassArrayOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSnapshotClassArrayInput` via:
//
//          CSIIsilonSpecDriverSnapshotClassArray{ CSIIsilonSpecDriverSnapshotClassArgs{...} }
type CSIIsilonSpecDriverSnapshotClassArrayInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSnapshotClassArrayOutput() CSIIsilonSpecDriverSnapshotClassArrayOutput
	ToCSIIsilonSpecDriverSnapshotClassArrayOutputWithContext(context.Context) CSIIsilonSpecDriverSnapshotClassArrayOutput
}

type CSIIsilonSpecDriverSnapshotClassArray []CSIIsilonSpecDriverSnapshotClassInput

func (CSIIsilonSpecDriverSnapshotClassArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverSnapshotClass)(nil)).Elem()
}

func (i CSIIsilonSpecDriverSnapshotClassArray) ToCSIIsilonSpecDriverSnapshotClassArrayOutput() CSIIsilonSpecDriverSnapshotClassArrayOutput {
	return i.ToCSIIsilonSpecDriverSnapshotClassArrayOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSnapshotClassArray) ToCSIIsilonSpecDriverSnapshotClassArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSnapshotClassArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSnapshotClassArrayOutput)
}

// SnapshotClass represents a VolumeSnapshotClass
type CSIIsilonSpecDriverSnapshotClassOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSnapshotClassOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSnapshotClass)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSnapshotClassOutput) ToCSIIsilonSpecDriverSnapshotClassOutput() CSIIsilonSpecDriverSnapshotClassOutput {
	return o
}

func (o CSIIsilonSpecDriverSnapshotClassOutput) ToCSIIsilonSpecDriverSnapshotClassOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSnapshotClassOutput {
	return o
}

// Name is the name of the Snapshot Class
func (o CSIIsilonSpecDriverSnapshotClassOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSnapshotClass) string { return v.Name }).(pulumi.StringOutput)
}

// Parameters is a map of driver specific parameters for snapshot class
func (o CSIIsilonSpecDriverSnapshotClassOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverSnapshotClass) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

type CSIIsilonSpecDriverSnapshotClassArrayOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSnapshotClassArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverSnapshotClass)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSnapshotClassArrayOutput) ToCSIIsilonSpecDriverSnapshotClassArrayOutput() CSIIsilonSpecDriverSnapshotClassArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverSnapshotClassArrayOutput) ToCSIIsilonSpecDriverSnapshotClassArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSnapshotClassArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverSnapshotClassArrayOutput) Index(i pulumi.IntInput) CSIIsilonSpecDriverSnapshotClassOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIIsilonSpecDriverSnapshotClass {
		return vs[0].([]CSIIsilonSpecDriverSnapshotClass)[vs[1].(int)]
	}).(CSIIsilonSpecDriverSnapshotClassOutput)
}

// Parameters is a map of driver specific parameters for snapshot class
type CSIIsilonSpecDriverSnapshotClassParameters struct {
}

// CSIIsilonSpecDriverSnapshotClassParametersInput is an input type that accepts CSIIsilonSpecDriverSnapshotClassParametersArgs and CSIIsilonSpecDriverSnapshotClassParametersOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverSnapshotClassParametersInput` via:
//
//          CSIIsilonSpecDriverSnapshotClassParametersArgs{...}
type CSIIsilonSpecDriverSnapshotClassParametersInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverSnapshotClassParametersOutput() CSIIsilonSpecDriverSnapshotClassParametersOutput
	ToCSIIsilonSpecDriverSnapshotClassParametersOutputWithContext(context.Context) CSIIsilonSpecDriverSnapshotClassParametersOutput
}

// Parameters is a map of driver specific parameters for snapshot class
type CSIIsilonSpecDriverSnapshotClassParametersArgs struct {
}

func (CSIIsilonSpecDriverSnapshotClassParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSnapshotClassParameters)(nil)).Elem()
}

func (i CSIIsilonSpecDriverSnapshotClassParametersArgs) ToCSIIsilonSpecDriverSnapshotClassParametersOutput() CSIIsilonSpecDriverSnapshotClassParametersOutput {
	return i.ToCSIIsilonSpecDriverSnapshotClassParametersOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverSnapshotClassParametersArgs) ToCSIIsilonSpecDriverSnapshotClassParametersOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSnapshotClassParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverSnapshotClassParametersOutput)
}

// Parameters is a map of driver specific parameters for snapshot class
type CSIIsilonSpecDriverSnapshotClassParametersOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverSnapshotClassParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverSnapshotClassParameters)(nil)).Elem()
}

func (o CSIIsilonSpecDriverSnapshotClassParametersOutput) ToCSIIsilonSpecDriverSnapshotClassParametersOutput() CSIIsilonSpecDriverSnapshotClassParametersOutput {
	return o
}

func (o CSIIsilonSpecDriverSnapshotClassParametersOutput) ToCSIIsilonSpecDriverSnapshotClassParametersOutputWithContext(ctx context.Context) CSIIsilonSpecDriverSnapshotClassParametersOutput {
	return o
}

// StorageClass represents a kubernetes storage class
type CSIIsilonSpecDriverStorageClass struct {
	// AllowVolumeExpansion is a boolean flag which indicates if volumes can be expanded
	AllowVolumeExpansion *bool `pulumi:"allowVolumeExpansion"`
	// Restrict the node topologies where volumes can be dynamically provisioned.
	AllowedTopologies []CSIIsilonSpecDriverStorageClassAllowedTopologies `pulumi:"allowedTopologies"`
	// DefaultSc is a boolean flag to indicate if the storage class is going to be marked as default
	Default *bool `pulumi:"default"`
	// Name is the name of the StorageClass
	Name string `pulumi:"name"`
	// Parameters is a map of driver specific storage class
	Parameters map[string]string `pulumi:"parameters"`
	// ReclaimPolicy is the reclaim policy for the storage class
	ReclaimPolicy *string `pulumi:"reclaimPolicy"`
}

// CSIIsilonSpecDriverStorageClassInput is an input type that accepts CSIIsilonSpecDriverStorageClassArgs and CSIIsilonSpecDriverStorageClassOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverStorageClassInput` via:
//
//          CSIIsilonSpecDriverStorageClassArgs{...}
type CSIIsilonSpecDriverStorageClassInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverStorageClassOutput() CSIIsilonSpecDriverStorageClassOutput
	ToCSIIsilonSpecDriverStorageClassOutputWithContext(context.Context) CSIIsilonSpecDriverStorageClassOutput
}

// StorageClass represents a kubernetes storage class
type CSIIsilonSpecDriverStorageClassArgs struct {
	// AllowVolumeExpansion is a boolean flag which indicates if volumes can be expanded
	AllowVolumeExpansion pulumi.BoolPtrInput `pulumi:"allowVolumeExpansion"`
	// Restrict the node topologies where volumes can be dynamically provisioned.
	AllowedTopologies CSIIsilonSpecDriverStorageClassAllowedTopologiesArrayInput `pulumi:"allowedTopologies"`
	// DefaultSc is a boolean flag to indicate if the storage class is going to be marked as default
	Default pulumi.BoolPtrInput `pulumi:"default"`
	// Name is the name of the StorageClass
	Name pulumi.StringInput `pulumi:"name"`
	// Parameters is a map of driver specific storage class
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
	// ReclaimPolicy is the reclaim policy for the storage class
	ReclaimPolicy pulumi.StringPtrInput `pulumi:"reclaimPolicy"`
}

func (CSIIsilonSpecDriverStorageClassArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverStorageClass)(nil)).Elem()
}

func (i CSIIsilonSpecDriverStorageClassArgs) ToCSIIsilonSpecDriverStorageClassOutput() CSIIsilonSpecDriverStorageClassOutput {
	return i.ToCSIIsilonSpecDriverStorageClassOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverStorageClassArgs) ToCSIIsilonSpecDriverStorageClassOutputWithContext(ctx context.Context) CSIIsilonSpecDriverStorageClassOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverStorageClassOutput)
}

// CSIIsilonSpecDriverStorageClassArrayInput is an input type that accepts CSIIsilonSpecDriverStorageClassArray and CSIIsilonSpecDriverStorageClassArrayOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverStorageClassArrayInput` via:
//
//          CSIIsilonSpecDriverStorageClassArray{ CSIIsilonSpecDriverStorageClassArgs{...} }
type CSIIsilonSpecDriverStorageClassArrayInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverStorageClassArrayOutput() CSIIsilonSpecDriverStorageClassArrayOutput
	ToCSIIsilonSpecDriverStorageClassArrayOutputWithContext(context.Context) CSIIsilonSpecDriverStorageClassArrayOutput
}

type CSIIsilonSpecDriverStorageClassArray []CSIIsilonSpecDriverStorageClassInput

func (CSIIsilonSpecDriverStorageClassArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverStorageClass)(nil)).Elem()
}

func (i CSIIsilonSpecDriverStorageClassArray) ToCSIIsilonSpecDriverStorageClassArrayOutput() CSIIsilonSpecDriverStorageClassArrayOutput {
	return i.ToCSIIsilonSpecDriverStorageClassArrayOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverStorageClassArray) ToCSIIsilonSpecDriverStorageClassArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverStorageClassArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverStorageClassArrayOutput)
}

// StorageClass represents a kubernetes storage class
type CSIIsilonSpecDriverStorageClassOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverStorageClassOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverStorageClass)(nil)).Elem()
}

func (o CSIIsilonSpecDriverStorageClassOutput) ToCSIIsilonSpecDriverStorageClassOutput() CSIIsilonSpecDriverStorageClassOutput {
	return o
}

func (o CSIIsilonSpecDriverStorageClassOutput) ToCSIIsilonSpecDriverStorageClassOutputWithContext(ctx context.Context) CSIIsilonSpecDriverStorageClassOutput {
	return o
}

// AllowVolumeExpansion is a boolean flag which indicates if volumes can be expanded
func (o CSIIsilonSpecDriverStorageClassOutput) AllowVolumeExpansion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverStorageClass) *bool { return v.AllowVolumeExpansion }).(pulumi.BoolPtrOutput)
}

// Restrict the node topologies where volumes can be dynamically provisioned.
func (o CSIIsilonSpecDriverStorageClassOutput) AllowedTopologies() CSIIsilonSpecDriverStorageClassAllowedTopologiesArrayOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverStorageClass) []CSIIsilonSpecDriverStorageClassAllowedTopologies {
		return v.AllowedTopologies
	}).(CSIIsilonSpecDriverStorageClassAllowedTopologiesArrayOutput)
}

// DefaultSc is a boolean flag to indicate if the storage class is going to be marked as default
func (o CSIIsilonSpecDriverStorageClassOutput) Default() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverStorageClass) *bool { return v.Default }).(pulumi.BoolPtrOutput)
}

// Name is the name of the StorageClass
func (o CSIIsilonSpecDriverStorageClassOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverStorageClass) string { return v.Name }).(pulumi.StringOutput)
}

// Parameters is a map of driver specific storage class
func (o CSIIsilonSpecDriverStorageClassOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverStorageClass) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

// ReclaimPolicy is the reclaim policy for the storage class
func (o CSIIsilonSpecDriverStorageClassOutput) ReclaimPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverStorageClass) *string { return v.ReclaimPolicy }).(pulumi.StringPtrOutput)
}

type CSIIsilonSpecDriverStorageClassArrayOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverStorageClassArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverStorageClass)(nil)).Elem()
}

func (o CSIIsilonSpecDriverStorageClassArrayOutput) ToCSIIsilonSpecDriverStorageClassArrayOutput() CSIIsilonSpecDriverStorageClassArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverStorageClassArrayOutput) ToCSIIsilonSpecDriverStorageClassArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverStorageClassArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverStorageClassArrayOutput) Index(i pulumi.IntInput) CSIIsilonSpecDriverStorageClassOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIIsilonSpecDriverStorageClass {
		return vs[0].([]CSIIsilonSpecDriverStorageClass)[vs[1].(int)]
	}).(CSIIsilonSpecDriverStorageClassOutput)
}

// A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.
type CSIIsilonSpecDriverStorageClassAllowedTopologies struct {
	// A list of topology selector requirements by labels.
	MatchLabelExpressions []CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions `pulumi:"matchLabelExpressions"`
}

// CSIIsilonSpecDriverStorageClassAllowedTopologiesInput is an input type that accepts CSIIsilonSpecDriverStorageClassAllowedTopologiesArgs and CSIIsilonSpecDriverStorageClassAllowedTopologiesOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverStorageClassAllowedTopologiesInput` via:
//
//          CSIIsilonSpecDriverStorageClassAllowedTopologiesArgs{...}
type CSIIsilonSpecDriverStorageClassAllowedTopologiesInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverStorageClassAllowedTopologiesOutput() CSIIsilonSpecDriverStorageClassAllowedTopologiesOutput
	ToCSIIsilonSpecDriverStorageClassAllowedTopologiesOutputWithContext(context.Context) CSIIsilonSpecDriverStorageClassAllowedTopologiesOutput
}

// A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.
type CSIIsilonSpecDriverStorageClassAllowedTopologiesArgs struct {
	// A list of topology selector requirements by labels.
	MatchLabelExpressions CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayInput `pulumi:"matchLabelExpressions"`
}

func (CSIIsilonSpecDriverStorageClassAllowedTopologiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverStorageClassAllowedTopologies)(nil)).Elem()
}

func (i CSIIsilonSpecDriverStorageClassAllowedTopologiesArgs) ToCSIIsilonSpecDriverStorageClassAllowedTopologiesOutput() CSIIsilonSpecDriverStorageClassAllowedTopologiesOutput {
	return i.ToCSIIsilonSpecDriverStorageClassAllowedTopologiesOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverStorageClassAllowedTopologiesArgs) ToCSIIsilonSpecDriverStorageClassAllowedTopologiesOutputWithContext(ctx context.Context) CSIIsilonSpecDriverStorageClassAllowedTopologiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverStorageClassAllowedTopologiesOutput)
}

// CSIIsilonSpecDriverStorageClassAllowedTopologiesArrayInput is an input type that accepts CSIIsilonSpecDriverStorageClassAllowedTopologiesArray and CSIIsilonSpecDriverStorageClassAllowedTopologiesArrayOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverStorageClassAllowedTopologiesArrayInput` via:
//
//          CSIIsilonSpecDriverStorageClassAllowedTopologiesArray{ CSIIsilonSpecDriverStorageClassAllowedTopologiesArgs{...} }
type CSIIsilonSpecDriverStorageClassAllowedTopologiesArrayInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverStorageClassAllowedTopologiesArrayOutput() CSIIsilonSpecDriverStorageClassAllowedTopologiesArrayOutput
	ToCSIIsilonSpecDriverStorageClassAllowedTopologiesArrayOutputWithContext(context.Context) CSIIsilonSpecDriverStorageClassAllowedTopologiesArrayOutput
}

type CSIIsilonSpecDriverStorageClassAllowedTopologiesArray []CSIIsilonSpecDriverStorageClassAllowedTopologiesInput

func (CSIIsilonSpecDriverStorageClassAllowedTopologiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverStorageClassAllowedTopologies)(nil)).Elem()
}

func (i CSIIsilonSpecDriverStorageClassAllowedTopologiesArray) ToCSIIsilonSpecDriverStorageClassAllowedTopologiesArrayOutput() CSIIsilonSpecDriverStorageClassAllowedTopologiesArrayOutput {
	return i.ToCSIIsilonSpecDriverStorageClassAllowedTopologiesArrayOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverStorageClassAllowedTopologiesArray) ToCSIIsilonSpecDriverStorageClassAllowedTopologiesArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverStorageClassAllowedTopologiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverStorageClassAllowedTopologiesArrayOutput)
}

// A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.
type CSIIsilonSpecDriverStorageClassAllowedTopologiesOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverStorageClassAllowedTopologiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverStorageClassAllowedTopologies)(nil)).Elem()
}

func (o CSIIsilonSpecDriverStorageClassAllowedTopologiesOutput) ToCSIIsilonSpecDriverStorageClassAllowedTopologiesOutput() CSIIsilonSpecDriverStorageClassAllowedTopologiesOutput {
	return o
}

func (o CSIIsilonSpecDriverStorageClassAllowedTopologiesOutput) ToCSIIsilonSpecDriverStorageClassAllowedTopologiesOutputWithContext(ctx context.Context) CSIIsilonSpecDriverStorageClassAllowedTopologiesOutput {
	return o
}

// A list of topology selector requirements by labels.
func (o CSIIsilonSpecDriverStorageClassAllowedTopologiesOutput) MatchLabelExpressions() CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverStorageClassAllowedTopologies) []CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions {
		return v.MatchLabelExpressions
	}).(CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput)
}

type CSIIsilonSpecDriverStorageClassAllowedTopologiesArrayOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverStorageClassAllowedTopologiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverStorageClassAllowedTopologies)(nil)).Elem()
}

func (o CSIIsilonSpecDriverStorageClassAllowedTopologiesArrayOutput) ToCSIIsilonSpecDriverStorageClassAllowedTopologiesArrayOutput() CSIIsilonSpecDriverStorageClassAllowedTopologiesArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverStorageClassAllowedTopologiesArrayOutput) ToCSIIsilonSpecDriverStorageClassAllowedTopologiesArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverStorageClassAllowedTopologiesArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverStorageClassAllowedTopologiesArrayOutput) Index(i pulumi.IntInput) CSIIsilonSpecDriverStorageClassAllowedTopologiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIIsilonSpecDriverStorageClassAllowedTopologies {
		return vs[0].([]CSIIsilonSpecDriverStorageClassAllowedTopologies)[vs[1].(int)]
	}).(CSIIsilonSpecDriverStorageClassAllowedTopologiesOutput)
}

// A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.
type CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions struct {
	// The label key that the selector applies to.
	Key string `pulumi:"key"`
	// An array of string values. One value must match the label to be selected. Each entry in Values is ORed.
	Values []string `pulumi:"values"`
}

// CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsInput is an input type that accepts CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArgs and CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsInput` via:
//
//          CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArgs{...}
type CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput() CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput
	ToCSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutputWithContext(context.Context) CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput
}

// A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.
type CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArgs struct {
	// The label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// An array of string values. One value must match the label to be selected. Each entry in Values is ORed.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions)(nil)).Elem()
}

func (i CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArgs) ToCSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput() CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput {
	return i.ToCSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArgs) ToCSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutputWithContext(ctx context.Context) CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput)
}

// CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayInput is an input type that accepts CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArray and CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayInput` via:
//
//          CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArray{ CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArgs{...} }
type CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput() CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput
	ToCSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutputWithContext(context.Context) CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput
}

type CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArray []CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsInput

func (CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions)(nil)).Elem()
}

func (i CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArray) ToCSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput() CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput {
	return i.ToCSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArray) ToCSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput)
}

// A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.
type CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions)(nil)).Elem()
}

func (o CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput) ToCSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput() CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput {
	return o
}

func (o CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput) ToCSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutputWithContext(ctx context.Context) CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput {
	return o
}

// The label key that the selector applies to.
func (o CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions) string { return v.Key }).(pulumi.StringOutput)
}

// An array of string values. One value must match the label to be selected. Each entry in Values is ORed.
func (o CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions)(nil)).Elem()
}

func (o CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput) ToCSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput() CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput) ToCSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutputWithContext(ctx context.Context) CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput {
	return o
}

func (o CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput) Index(i pulumi.IntInput) CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions {
		return vs[0].([]CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions)[vs[1].(int)]
	}).(CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput)
}

// Parameters is a map of driver specific storage class
type CSIIsilonSpecDriverStorageClassParameters struct {
}

// CSIIsilonSpecDriverStorageClassParametersInput is an input type that accepts CSIIsilonSpecDriverStorageClassParametersArgs and CSIIsilonSpecDriverStorageClassParametersOutput values.
// You can construct a concrete instance of `CSIIsilonSpecDriverStorageClassParametersInput` via:
//
//          CSIIsilonSpecDriverStorageClassParametersArgs{...}
type CSIIsilonSpecDriverStorageClassParametersInput interface {
	pulumi.Input

	ToCSIIsilonSpecDriverStorageClassParametersOutput() CSIIsilonSpecDriverStorageClassParametersOutput
	ToCSIIsilonSpecDriverStorageClassParametersOutputWithContext(context.Context) CSIIsilonSpecDriverStorageClassParametersOutput
}

// Parameters is a map of driver specific storage class
type CSIIsilonSpecDriverStorageClassParametersArgs struct {
}

func (CSIIsilonSpecDriverStorageClassParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverStorageClassParameters)(nil)).Elem()
}

func (i CSIIsilonSpecDriverStorageClassParametersArgs) ToCSIIsilonSpecDriverStorageClassParametersOutput() CSIIsilonSpecDriverStorageClassParametersOutput {
	return i.ToCSIIsilonSpecDriverStorageClassParametersOutputWithContext(context.Background())
}

func (i CSIIsilonSpecDriverStorageClassParametersArgs) ToCSIIsilonSpecDriverStorageClassParametersOutputWithContext(ctx context.Context) CSIIsilonSpecDriverStorageClassParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonSpecDriverStorageClassParametersOutput)
}

// Parameters is a map of driver specific storage class
type CSIIsilonSpecDriverStorageClassParametersOutput struct{ *pulumi.OutputState }

func (CSIIsilonSpecDriverStorageClassParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonSpecDriverStorageClassParameters)(nil)).Elem()
}

func (o CSIIsilonSpecDriverStorageClassParametersOutput) ToCSIIsilonSpecDriverStorageClassParametersOutput() CSIIsilonSpecDriverStorageClassParametersOutput {
	return o
}

func (o CSIIsilonSpecDriverStorageClassParametersOutput) ToCSIIsilonSpecDriverStorageClassParametersOutputWithContext(ctx context.Context) CSIIsilonSpecDriverStorageClassParametersOutput {
	return o
}

// DriverStatus defines the observed state of CSIDriver
type CSIIsilonStatus struct {
	// ControllerStatus is the status of Controller pods
	ControllerStatus *CSIIsilonStatusControllerStatus `pulumi:"controllerStatus"`
	// DriverHash is a hash of the driver specification
	DriverHash *int `pulumi:"driverHash"`
	// LastUpdate is the last updated state of the driver
	LastUpdate *CSIIsilonStatusLastUpdate `pulumi:"lastUpdate"`
	// NodeStatus is the status of Controller pods
	NodeStatus *CSIIsilonStatusNodeStatus `pulumi:"nodeStatus"`
	// State is the state of the driver installation
	State *string `pulumi:"state"`
}

// CSIIsilonStatusInput is an input type that accepts CSIIsilonStatusArgs and CSIIsilonStatusOutput values.
// You can construct a concrete instance of `CSIIsilonStatusInput` via:
//
//          CSIIsilonStatusArgs{...}
type CSIIsilonStatusInput interface {
	pulumi.Input

	ToCSIIsilonStatusOutput() CSIIsilonStatusOutput
	ToCSIIsilonStatusOutputWithContext(context.Context) CSIIsilonStatusOutput
}

// DriverStatus defines the observed state of CSIDriver
type CSIIsilonStatusArgs struct {
	// ControllerStatus is the status of Controller pods
	ControllerStatus CSIIsilonStatusControllerStatusPtrInput `pulumi:"controllerStatus"`
	// DriverHash is a hash of the driver specification
	DriverHash pulumi.IntPtrInput `pulumi:"driverHash"`
	// LastUpdate is the last updated state of the driver
	LastUpdate CSIIsilonStatusLastUpdatePtrInput `pulumi:"lastUpdate"`
	// NodeStatus is the status of Controller pods
	NodeStatus CSIIsilonStatusNodeStatusPtrInput `pulumi:"nodeStatus"`
	// State is the state of the driver installation
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (CSIIsilonStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonStatus)(nil)).Elem()
}

func (i CSIIsilonStatusArgs) ToCSIIsilonStatusOutput() CSIIsilonStatusOutput {
	return i.ToCSIIsilonStatusOutputWithContext(context.Background())
}

func (i CSIIsilonStatusArgs) ToCSIIsilonStatusOutputWithContext(ctx context.Context) CSIIsilonStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonStatusOutput)
}

func (i CSIIsilonStatusArgs) ToCSIIsilonStatusPtrOutput() CSIIsilonStatusPtrOutput {
	return i.ToCSIIsilonStatusPtrOutputWithContext(context.Background())
}

func (i CSIIsilonStatusArgs) ToCSIIsilonStatusPtrOutputWithContext(ctx context.Context) CSIIsilonStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonStatusOutput).ToCSIIsilonStatusPtrOutputWithContext(ctx)
}

// CSIIsilonStatusPtrInput is an input type that accepts CSIIsilonStatusArgs, CSIIsilonStatusPtr and CSIIsilonStatusPtrOutput values.
// You can construct a concrete instance of `CSIIsilonStatusPtrInput` via:
//
//          CSIIsilonStatusArgs{...}
//
//  or:
//
//          nil
type CSIIsilonStatusPtrInput interface {
	pulumi.Input

	ToCSIIsilonStatusPtrOutput() CSIIsilonStatusPtrOutput
	ToCSIIsilonStatusPtrOutputWithContext(context.Context) CSIIsilonStatusPtrOutput
}

type csiisilonStatusPtrType CSIIsilonStatusArgs

func CSIIsilonStatusPtr(v *CSIIsilonStatusArgs) CSIIsilonStatusPtrInput {
	return (*csiisilonStatusPtrType)(v)
}

func (*csiisilonStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonStatus)(nil)).Elem()
}

func (i *csiisilonStatusPtrType) ToCSIIsilonStatusPtrOutput() CSIIsilonStatusPtrOutput {
	return i.ToCSIIsilonStatusPtrOutputWithContext(context.Background())
}

func (i *csiisilonStatusPtrType) ToCSIIsilonStatusPtrOutputWithContext(ctx context.Context) CSIIsilonStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonStatusPtrOutput)
}

// DriverStatus defines the observed state of CSIDriver
type CSIIsilonStatusOutput struct{ *pulumi.OutputState }

func (CSIIsilonStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonStatus)(nil)).Elem()
}

func (o CSIIsilonStatusOutput) ToCSIIsilonStatusOutput() CSIIsilonStatusOutput {
	return o
}

func (o CSIIsilonStatusOutput) ToCSIIsilonStatusOutputWithContext(ctx context.Context) CSIIsilonStatusOutput {
	return o
}

func (o CSIIsilonStatusOutput) ToCSIIsilonStatusPtrOutput() CSIIsilonStatusPtrOutput {
	return o.ToCSIIsilonStatusPtrOutputWithContext(context.Background())
}

func (o CSIIsilonStatusOutput) ToCSIIsilonStatusPtrOutputWithContext(ctx context.Context) CSIIsilonStatusPtrOutput {
	return o.ApplyT(func(v CSIIsilonStatus) *CSIIsilonStatus {
		return &v
	}).(CSIIsilonStatusPtrOutput)
}

// ControllerStatus is the status of Controller pods
func (o CSIIsilonStatusOutput) ControllerStatus() CSIIsilonStatusControllerStatusPtrOutput {
	return o.ApplyT(func(v CSIIsilonStatus) *CSIIsilonStatusControllerStatus { return v.ControllerStatus }).(CSIIsilonStatusControllerStatusPtrOutput)
}

// DriverHash is a hash of the driver specification
func (o CSIIsilonStatusOutput) DriverHash() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIIsilonStatus) *int { return v.DriverHash }).(pulumi.IntPtrOutput)
}

// LastUpdate is the last updated state of the driver
func (o CSIIsilonStatusOutput) LastUpdate() CSIIsilonStatusLastUpdatePtrOutput {
	return o.ApplyT(func(v CSIIsilonStatus) *CSIIsilonStatusLastUpdate { return v.LastUpdate }).(CSIIsilonStatusLastUpdatePtrOutput)
}

// NodeStatus is the status of Controller pods
func (o CSIIsilonStatusOutput) NodeStatus() CSIIsilonStatusNodeStatusPtrOutput {
	return o.ApplyT(func(v CSIIsilonStatus) *CSIIsilonStatusNodeStatus { return v.NodeStatus }).(CSIIsilonStatusNodeStatusPtrOutput)
}

// State is the state of the driver installation
func (o CSIIsilonStatusOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonStatus) *string { return v.State }).(pulumi.StringPtrOutput)
}

type CSIIsilonStatusPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonStatus)(nil)).Elem()
}

func (o CSIIsilonStatusPtrOutput) ToCSIIsilonStatusPtrOutput() CSIIsilonStatusPtrOutput {
	return o
}

func (o CSIIsilonStatusPtrOutput) ToCSIIsilonStatusPtrOutputWithContext(ctx context.Context) CSIIsilonStatusPtrOutput {
	return o
}

func (o CSIIsilonStatusPtrOutput) Elem() CSIIsilonStatusOutput {
	return o.ApplyT(func(v *CSIIsilonStatus) CSIIsilonStatus { return *v }).(CSIIsilonStatusOutput)
}

// ControllerStatus is the status of Controller pods
func (o CSIIsilonStatusPtrOutput) ControllerStatus() CSIIsilonStatusControllerStatusPtrOutput {
	return o.ApplyT(func(v *CSIIsilonStatus) *CSIIsilonStatusControllerStatus {
		if v == nil {
			return nil
		}
		return v.ControllerStatus
	}).(CSIIsilonStatusControllerStatusPtrOutput)
}

// DriverHash is a hash of the driver specification
func (o CSIIsilonStatusPtrOutput) DriverHash() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CSIIsilonStatus) *int {
		if v == nil {
			return nil
		}
		return v.DriverHash
	}).(pulumi.IntPtrOutput)
}

// LastUpdate is the last updated state of the driver
func (o CSIIsilonStatusPtrOutput) LastUpdate() CSIIsilonStatusLastUpdatePtrOutput {
	return o.ApplyT(func(v *CSIIsilonStatus) *CSIIsilonStatusLastUpdate {
		if v == nil {
			return nil
		}
		return v.LastUpdate
	}).(CSIIsilonStatusLastUpdatePtrOutput)
}

// NodeStatus is the status of Controller pods
func (o CSIIsilonStatusPtrOutput) NodeStatus() CSIIsilonStatusNodeStatusPtrOutput {
	return o.ApplyT(func(v *CSIIsilonStatus) *CSIIsilonStatusNodeStatus {
		if v == nil {
			return nil
		}
		return v.NodeStatus
	}).(CSIIsilonStatusNodeStatusPtrOutput)
}

// State is the state of the driver installation
func (o CSIIsilonStatusPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonStatus) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// ControllerStatus is the status of Controller pods
type CSIIsilonStatusControllerStatus struct {
	Available []string `pulumi:"available"`
	Ready     []string `pulumi:"ready"`
	Starting  []string `pulumi:"starting"`
	Stopped   []string `pulumi:"stopped"`
}

// CSIIsilonStatusControllerStatusInput is an input type that accepts CSIIsilonStatusControllerStatusArgs and CSIIsilonStatusControllerStatusOutput values.
// You can construct a concrete instance of `CSIIsilonStatusControllerStatusInput` via:
//
//          CSIIsilonStatusControllerStatusArgs{...}
type CSIIsilonStatusControllerStatusInput interface {
	pulumi.Input

	ToCSIIsilonStatusControllerStatusOutput() CSIIsilonStatusControllerStatusOutput
	ToCSIIsilonStatusControllerStatusOutputWithContext(context.Context) CSIIsilonStatusControllerStatusOutput
}

// ControllerStatus is the status of Controller pods
type CSIIsilonStatusControllerStatusArgs struct {
	Available pulumi.StringArrayInput `pulumi:"available"`
	Ready     pulumi.StringArrayInput `pulumi:"ready"`
	Starting  pulumi.StringArrayInput `pulumi:"starting"`
	Stopped   pulumi.StringArrayInput `pulumi:"stopped"`
}

func (CSIIsilonStatusControllerStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonStatusControllerStatus)(nil)).Elem()
}

func (i CSIIsilonStatusControllerStatusArgs) ToCSIIsilonStatusControllerStatusOutput() CSIIsilonStatusControllerStatusOutput {
	return i.ToCSIIsilonStatusControllerStatusOutputWithContext(context.Background())
}

func (i CSIIsilonStatusControllerStatusArgs) ToCSIIsilonStatusControllerStatusOutputWithContext(ctx context.Context) CSIIsilonStatusControllerStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonStatusControllerStatusOutput)
}

func (i CSIIsilonStatusControllerStatusArgs) ToCSIIsilonStatusControllerStatusPtrOutput() CSIIsilonStatusControllerStatusPtrOutput {
	return i.ToCSIIsilonStatusControllerStatusPtrOutputWithContext(context.Background())
}

func (i CSIIsilonStatusControllerStatusArgs) ToCSIIsilonStatusControllerStatusPtrOutputWithContext(ctx context.Context) CSIIsilonStatusControllerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonStatusControllerStatusOutput).ToCSIIsilonStatusControllerStatusPtrOutputWithContext(ctx)
}

// CSIIsilonStatusControllerStatusPtrInput is an input type that accepts CSIIsilonStatusControllerStatusArgs, CSIIsilonStatusControllerStatusPtr and CSIIsilonStatusControllerStatusPtrOutput values.
// You can construct a concrete instance of `CSIIsilonStatusControllerStatusPtrInput` via:
//
//          CSIIsilonStatusControllerStatusArgs{...}
//
//  or:
//
//          nil
type CSIIsilonStatusControllerStatusPtrInput interface {
	pulumi.Input

	ToCSIIsilonStatusControllerStatusPtrOutput() CSIIsilonStatusControllerStatusPtrOutput
	ToCSIIsilonStatusControllerStatusPtrOutputWithContext(context.Context) CSIIsilonStatusControllerStatusPtrOutput
}

type csiisilonStatusControllerStatusPtrType CSIIsilonStatusControllerStatusArgs

func CSIIsilonStatusControllerStatusPtr(v *CSIIsilonStatusControllerStatusArgs) CSIIsilonStatusControllerStatusPtrInput {
	return (*csiisilonStatusControllerStatusPtrType)(v)
}

func (*csiisilonStatusControllerStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonStatusControllerStatus)(nil)).Elem()
}

func (i *csiisilonStatusControllerStatusPtrType) ToCSIIsilonStatusControllerStatusPtrOutput() CSIIsilonStatusControllerStatusPtrOutput {
	return i.ToCSIIsilonStatusControllerStatusPtrOutputWithContext(context.Background())
}

func (i *csiisilonStatusControllerStatusPtrType) ToCSIIsilonStatusControllerStatusPtrOutputWithContext(ctx context.Context) CSIIsilonStatusControllerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonStatusControllerStatusPtrOutput)
}

// ControllerStatus is the status of Controller pods
type CSIIsilonStatusControllerStatusOutput struct{ *pulumi.OutputState }

func (CSIIsilonStatusControllerStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonStatusControllerStatus)(nil)).Elem()
}

func (o CSIIsilonStatusControllerStatusOutput) ToCSIIsilonStatusControllerStatusOutput() CSIIsilonStatusControllerStatusOutput {
	return o
}

func (o CSIIsilonStatusControllerStatusOutput) ToCSIIsilonStatusControllerStatusOutputWithContext(ctx context.Context) CSIIsilonStatusControllerStatusOutput {
	return o
}

func (o CSIIsilonStatusControllerStatusOutput) ToCSIIsilonStatusControllerStatusPtrOutput() CSIIsilonStatusControllerStatusPtrOutput {
	return o.ToCSIIsilonStatusControllerStatusPtrOutputWithContext(context.Background())
}

func (o CSIIsilonStatusControllerStatusOutput) ToCSIIsilonStatusControllerStatusPtrOutputWithContext(ctx context.Context) CSIIsilonStatusControllerStatusPtrOutput {
	return o.ApplyT(func(v CSIIsilonStatusControllerStatus) *CSIIsilonStatusControllerStatus {
		return &v
	}).(CSIIsilonStatusControllerStatusPtrOutput)
}
func (o CSIIsilonStatusControllerStatusOutput) Available() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIIsilonStatusControllerStatus) []string { return v.Available }).(pulumi.StringArrayOutput)
}

func (o CSIIsilonStatusControllerStatusOutput) Ready() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIIsilonStatusControllerStatus) []string { return v.Ready }).(pulumi.StringArrayOutput)
}

func (o CSIIsilonStatusControllerStatusOutput) Starting() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIIsilonStatusControllerStatus) []string { return v.Starting }).(pulumi.StringArrayOutput)
}

func (o CSIIsilonStatusControllerStatusOutput) Stopped() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIIsilonStatusControllerStatus) []string { return v.Stopped }).(pulumi.StringArrayOutput)
}

type CSIIsilonStatusControllerStatusPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonStatusControllerStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonStatusControllerStatus)(nil)).Elem()
}

func (o CSIIsilonStatusControllerStatusPtrOutput) ToCSIIsilonStatusControllerStatusPtrOutput() CSIIsilonStatusControllerStatusPtrOutput {
	return o
}

func (o CSIIsilonStatusControllerStatusPtrOutput) ToCSIIsilonStatusControllerStatusPtrOutputWithContext(ctx context.Context) CSIIsilonStatusControllerStatusPtrOutput {
	return o
}

func (o CSIIsilonStatusControllerStatusPtrOutput) Elem() CSIIsilonStatusControllerStatusOutput {
	return o.ApplyT(func(v *CSIIsilonStatusControllerStatus) CSIIsilonStatusControllerStatus { return *v }).(CSIIsilonStatusControllerStatusOutput)
}

func (o CSIIsilonStatusControllerStatusPtrOutput) Available() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIIsilonStatusControllerStatus) []string {
		if v == nil {
			return nil
		}
		return v.Available
	}).(pulumi.StringArrayOutput)
}

func (o CSIIsilonStatusControllerStatusPtrOutput) Ready() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIIsilonStatusControllerStatus) []string {
		if v == nil {
			return nil
		}
		return v.Ready
	}).(pulumi.StringArrayOutput)
}

func (o CSIIsilonStatusControllerStatusPtrOutput) Starting() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIIsilonStatusControllerStatus) []string {
		if v == nil {
			return nil
		}
		return v.Starting
	}).(pulumi.StringArrayOutput)
}

func (o CSIIsilonStatusControllerStatusPtrOutput) Stopped() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIIsilonStatusControllerStatus) []string {
		if v == nil {
			return nil
		}
		return v.Stopped
	}).(pulumi.StringArrayOutput)
}

// LastUpdate is the last updated state of the driver
type CSIIsilonStatusLastUpdate struct {
	// Condition is the last known condition of the Custom Resource
	Condition *string `pulumi:"condition"`
	// ErrorMessage is the last error message associated with the condition
	ErrorMessage *string `pulumi:"errorMessage"`
	// Time is the time stamp for the last condition update
	Time *string `pulumi:"time"`
}

// CSIIsilonStatusLastUpdateInput is an input type that accepts CSIIsilonStatusLastUpdateArgs and CSIIsilonStatusLastUpdateOutput values.
// You can construct a concrete instance of `CSIIsilonStatusLastUpdateInput` via:
//
//          CSIIsilonStatusLastUpdateArgs{...}
type CSIIsilonStatusLastUpdateInput interface {
	pulumi.Input

	ToCSIIsilonStatusLastUpdateOutput() CSIIsilonStatusLastUpdateOutput
	ToCSIIsilonStatusLastUpdateOutputWithContext(context.Context) CSIIsilonStatusLastUpdateOutput
}

// LastUpdate is the last updated state of the driver
type CSIIsilonStatusLastUpdateArgs struct {
	// Condition is the last known condition of the Custom Resource
	Condition pulumi.StringPtrInput `pulumi:"condition"`
	// ErrorMessage is the last error message associated with the condition
	ErrorMessage pulumi.StringPtrInput `pulumi:"errorMessage"`
	// Time is the time stamp for the last condition update
	Time pulumi.StringPtrInput `pulumi:"time"`
}

func (CSIIsilonStatusLastUpdateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonStatusLastUpdate)(nil)).Elem()
}

func (i CSIIsilonStatusLastUpdateArgs) ToCSIIsilonStatusLastUpdateOutput() CSIIsilonStatusLastUpdateOutput {
	return i.ToCSIIsilonStatusLastUpdateOutputWithContext(context.Background())
}

func (i CSIIsilonStatusLastUpdateArgs) ToCSIIsilonStatusLastUpdateOutputWithContext(ctx context.Context) CSIIsilonStatusLastUpdateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonStatusLastUpdateOutput)
}

func (i CSIIsilonStatusLastUpdateArgs) ToCSIIsilonStatusLastUpdatePtrOutput() CSIIsilonStatusLastUpdatePtrOutput {
	return i.ToCSIIsilonStatusLastUpdatePtrOutputWithContext(context.Background())
}

func (i CSIIsilonStatusLastUpdateArgs) ToCSIIsilonStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIIsilonStatusLastUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonStatusLastUpdateOutput).ToCSIIsilonStatusLastUpdatePtrOutputWithContext(ctx)
}

// CSIIsilonStatusLastUpdatePtrInput is an input type that accepts CSIIsilonStatusLastUpdateArgs, CSIIsilonStatusLastUpdatePtr and CSIIsilonStatusLastUpdatePtrOutput values.
// You can construct a concrete instance of `CSIIsilonStatusLastUpdatePtrInput` via:
//
//          CSIIsilonStatusLastUpdateArgs{...}
//
//  or:
//
//          nil
type CSIIsilonStatusLastUpdatePtrInput interface {
	pulumi.Input

	ToCSIIsilonStatusLastUpdatePtrOutput() CSIIsilonStatusLastUpdatePtrOutput
	ToCSIIsilonStatusLastUpdatePtrOutputWithContext(context.Context) CSIIsilonStatusLastUpdatePtrOutput
}

type csiisilonStatusLastUpdatePtrType CSIIsilonStatusLastUpdateArgs

func CSIIsilonStatusLastUpdatePtr(v *CSIIsilonStatusLastUpdateArgs) CSIIsilonStatusLastUpdatePtrInput {
	return (*csiisilonStatusLastUpdatePtrType)(v)
}

func (*csiisilonStatusLastUpdatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonStatusLastUpdate)(nil)).Elem()
}

func (i *csiisilonStatusLastUpdatePtrType) ToCSIIsilonStatusLastUpdatePtrOutput() CSIIsilonStatusLastUpdatePtrOutput {
	return i.ToCSIIsilonStatusLastUpdatePtrOutputWithContext(context.Background())
}

func (i *csiisilonStatusLastUpdatePtrType) ToCSIIsilonStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIIsilonStatusLastUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonStatusLastUpdatePtrOutput)
}

// LastUpdate is the last updated state of the driver
type CSIIsilonStatusLastUpdateOutput struct{ *pulumi.OutputState }

func (CSIIsilonStatusLastUpdateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonStatusLastUpdate)(nil)).Elem()
}

func (o CSIIsilonStatusLastUpdateOutput) ToCSIIsilonStatusLastUpdateOutput() CSIIsilonStatusLastUpdateOutput {
	return o
}

func (o CSIIsilonStatusLastUpdateOutput) ToCSIIsilonStatusLastUpdateOutputWithContext(ctx context.Context) CSIIsilonStatusLastUpdateOutput {
	return o
}

func (o CSIIsilonStatusLastUpdateOutput) ToCSIIsilonStatusLastUpdatePtrOutput() CSIIsilonStatusLastUpdatePtrOutput {
	return o.ToCSIIsilonStatusLastUpdatePtrOutputWithContext(context.Background())
}

func (o CSIIsilonStatusLastUpdateOutput) ToCSIIsilonStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIIsilonStatusLastUpdatePtrOutput {
	return o.ApplyT(func(v CSIIsilonStatusLastUpdate) *CSIIsilonStatusLastUpdate {
		return &v
	}).(CSIIsilonStatusLastUpdatePtrOutput)
}

// Condition is the last known condition of the Custom Resource
func (o CSIIsilonStatusLastUpdateOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonStatusLastUpdate) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

// ErrorMessage is the last error message associated with the condition
func (o CSIIsilonStatusLastUpdateOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonStatusLastUpdate) *string { return v.ErrorMessage }).(pulumi.StringPtrOutput)
}

// Time is the time stamp for the last condition update
func (o CSIIsilonStatusLastUpdateOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIIsilonStatusLastUpdate) *string { return v.Time }).(pulumi.StringPtrOutput)
}

type CSIIsilonStatusLastUpdatePtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonStatusLastUpdatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonStatusLastUpdate)(nil)).Elem()
}

func (o CSIIsilonStatusLastUpdatePtrOutput) ToCSIIsilonStatusLastUpdatePtrOutput() CSIIsilonStatusLastUpdatePtrOutput {
	return o
}

func (o CSIIsilonStatusLastUpdatePtrOutput) ToCSIIsilonStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIIsilonStatusLastUpdatePtrOutput {
	return o
}

func (o CSIIsilonStatusLastUpdatePtrOutput) Elem() CSIIsilonStatusLastUpdateOutput {
	return o.ApplyT(func(v *CSIIsilonStatusLastUpdate) CSIIsilonStatusLastUpdate { return *v }).(CSIIsilonStatusLastUpdateOutput)
}

// Condition is the last known condition of the Custom Resource
func (o CSIIsilonStatusLastUpdatePtrOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonStatusLastUpdate) *string {
		if v == nil {
			return nil
		}
		return v.Condition
	}).(pulumi.StringPtrOutput)
}

// ErrorMessage is the last error message associated with the condition
func (o CSIIsilonStatusLastUpdatePtrOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonStatusLastUpdate) *string {
		if v == nil {
			return nil
		}
		return v.ErrorMessage
	}).(pulumi.StringPtrOutput)
}

// Time is the time stamp for the last condition update
func (o CSIIsilonStatusLastUpdatePtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIIsilonStatusLastUpdate) *string {
		if v == nil {
			return nil
		}
		return v.Time
	}).(pulumi.StringPtrOutput)
}

// NodeStatus is the status of Controller pods
type CSIIsilonStatusNodeStatus struct {
	Available []string `pulumi:"available"`
	Ready     []string `pulumi:"ready"`
	Starting  []string `pulumi:"starting"`
	Stopped   []string `pulumi:"stopped"`
}

// CSIIsilonStatusNodeStatusInput is an input type that accepts CSIIsilonStatusNodeStatusArgs and CSIIsilonStatusNodeStatusOutput values.
// You can construct a concrete instance of `CSIIsilonStatusNodeStatusInput` via:
//
//          CSIIsilonStatusNodeStatusArgs{...}
type CSIIsilonStatusNodeStatusInput interface {
	pulumi.Input

	ToCSIIsilonStatusNodeStatusOutput() CSIIsilonStatusNodeStatusOutput
	ToCSIIsilonStatusNodeStatusOutputWithContext(context.Context) CSIIsilonStatusNodeStatusOutput
}

// NodeStatus is the status of Controller pods
type CSIIsilonStatusNodeStatusArgs struct {
	Available pulumi.StringArrayInput `pulumi:"available"`
	Ready     pulumi.StringArrayInput `pulumi:"ready"`
	Starting  pulumi.StringArrayInput `pulumi:"starting"`
	Stopped   pulumi.StringArrayInput `pulumi:"stopped"`
}

func (CSIIsilonStatusNodeStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonStatusNodeStatus)(nil)).Elem()
}

func (i CSIIsilonStatusNodeStatusArgs) ToCSIIsilonStatusNodeStatusOutput() CSIIsilonStatusNodeStatusOutput {
	return i.ToCSIIsilonStatusNodeStatusOutputWithContext(context.Background())
}

func (i CSIIsilonStatusNodeStatusArgs) ToCSIIsilonStatusNodeStatusOutputWithContext(ctx context.Context) CSIIsilonStatusNodeStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonStatusNodeStatusOutput)
}

func (i CSIIsilonStatusNodeStatusArgs) ToCSIIsilonStatusNodeStatusPtrOutput() CSIIsilonStatusNodeStatusPtrOutput {
	return i.ToCSIIsilonStatusNodeStatusPtrOutputWithContext(context.Background())
}

func (i CSIIsilonStatusNodeStatusArgs) ToCSIIsilonStatusNodeStatusPtrOutputWithContext(ctx context.Context) CSIIsilonStatusNodeStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonStatusNodeStatusOutput).ToCSIIsilonStatusNodeStatusPtrOutputWithContext(ctx)
}

// CSIIsilonStatusNodeStatusPtrInput is an input type that accepts CSIIsilonStatusNodeStatusArgs, CSIIsilonStatusNodeStatusPtr and CSIIsilonStatusNodeStatusPtrOutput values.
// You can construct a concrete instance of `CSIIsilonStatusNodeStatusPtrInput` via:
//
//          CSIIsilonStatusNodeStatusArgs{...}
//
//  or:
//
//          nil
type CSIIsilonStatusNodeStatusPtrInput interface {
	pulumi.Input

	ToCSIIsilonStatusNodeStatusPtrOutput() CSIIsilonStatusNodeStatusPtrOutput
	ToCSIIsilonStatusNodeStatusPtrOutputWithContext(context.Context) CSIIsilonStatusNodeStatusPtrOutput
}

type csiisilonStatusNodeStatusPtrType CSIIsilonStatusNodeStatusArgs

func CSIIsilonStatusNodeStatusPtr(v *CSIIsilonStatusNodeStatusArgs) CSIIsilonStatusNodeStatusPtrInput {
	return (*csiisilonStatusNodeStatusPtrType)(v)
}

func (*csiisilonStatusNodeStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonStatusNodeStatus)(nil)).Elem()
}

func (i *csiisilonStatusNodeStatusPtrType) ToCSIIsilonStatusNodeStatusPtrOutput() CSIIsilonStatusNodeStatusPtrOutput {
	return i.ToCSIIsilonStatusNodeStatusPtrOutputWithContext(context.Background())
}

func (i *csiisilonStatusNodeStatusPtrType) ToCSIIsilonStatusNodeStatusPtrOutputWithContext(ctx context.Context) CSIIsilonStatusNodeStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIIsilonStatusNodeStatusPtrOutput)
}

// NodeStatus is the status of Controller pods
type CSIIsilonStatusNodeStatusOutput struct{ *pulumi.OutputState }

func (CSIIsilonStatusNodeStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIIsilonStatusNodeStatus)(nil)).Elem()
}

func (o CSIIsilonStatusNodeStatusOutput) ToCSIIsilonStatusNodeStatusOutput() CSIIsilonStatusNodeStatusOutput {
	return o
}

func (o CSIIsilonStatusNodeStatusOutput) ToCSIIsilonStatusNodeStatusOutputWithContext(ctx context.Context) CSIIsilonStatusNodeStatusOutput {
	return o
}

func (o CSIIsilonStatusNodeStatusOutput) ToCSIIsilonStatusNodeStatusPtrOutput() CSIIsilonStatusNodeStatusPtrOutput {
	return o.ToCSIIsilonStatusNodeStatusPtrOutputWithContext(context.Background())
}

func (o CSIIsilonStatusNodeStatusOutput) ToCSIIsilonStatusNodeStatusPtrOutputWithContext(ctx context.Context) CSIIsilonStatusNodeStatusPtrOutput {
	return o.ApplyT(func(v CSIIsilonStatusNodeStatus) *CSIIsilonStatusNodeStatus {
		return &v
	}).(CSIIsilonStatusNodeStatusPtrOutput)
}
func (o CSIIsilonStatusNodeStatusOutput) Available() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIIsilonStatusNodeStatus) []string { return v.Available }).(pulumi.StringArrayOutput)
}

func (o CSIIsilonStatusNodeStatusOutput) Ready() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIIsilonStatusNodeStatus) []string { return v.Ready }).(pulumi.StringArrayOutput)
}

func (o CSIIsilonStatusNodeStatusOutput) Starting() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIIsilonStatusNodeStatus) []string { return v.Starting }).(pulumi.StringArrayOutput)
}

func (o CSIIsilonStatusNodeStatusOutput) Stopped() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIIsilonStatusNodeStatus) []string { return v.Stopped }).(pulumi.StringArrayOutput)
}

type CSIIsilonStatusNodeStatusPtrOutput struct{ *pulumi.OutputState }

func (CSIIsilonStatusNodeStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIIsilonStatusNodeStatus)(nil)).Elem()
}

func (o CSIIsilonStatusNodeStatusPtrOutput) ToCSIIsilonStatusNodeStatusPtrOutput() CSIIsilonStatusNodeStatusPtrOutput {
	return o
}

func (o CSIIsilonStatusNodeStatusPtrOutput) ToCSIIsilonStatusNodeStatusPtrOutputWithContext(ctx context.Context) CSIIsilonStatusNodeStatusPtrOutput {
	return o
}

func (o CSIIsilonStatusNodeStatusPtrOutput) Elem() CSIIsilonStatusNodeStatusOutput {
	return o.ApplyT(func(v *CSIIsilonStatusNodeStatus) CSIIsilonStatusNodeStatus { return *v }).(CSIIsilonStatusNodeStatusOutput)
}

func (o CSIIsilonStatusNodeStatusPtrOutput) Available() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIIsilonStatusNodeStatus) []string {
		if v == nil {
			return nil
		}
		return v.Available
	}).(pulumi.StringArrayOutput)
}

func (o CSIIsilonStatusNodeStatusPtrOutput) Ready() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIIsilonStatusNodeStatus) []string {
		if v == nil {
			return nil
		}
		return v.Ready
	}).(pulumi.StringArrayOutput)
}

func (o CSIIsilonStatusNodeStatusPtrOutput) Starting() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIIsilonStatusNodeStatus) []string {
		if v == nil {
			return nil
		}
		return v.Starting
	}).(pulumi.StringArrayOutput)
}

func (o CSIIsilonStatusNodeStatusPtrOutput) Stopped() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIIsilonStatusNodeStatus) []string {
		if v == nil {
			return nil
		}
		return v.Stopped
	}).(pulumi.StringArrayOutput)
}

// CSIPowerMax is the Schema for the csipowermaxes API
type CSIPowerMaxType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// CSIPowerMaxSpec defines the desired state of CSIPowerMax
	Spec *CSIPowerMaxSpec `pulumi:"spec"`
	// DriverStatus defines the observed state of CSIDriver
	Status *CSIPowerMaxStatus `pulumi:"status"`
}

// CSIPowerMaxTypeInput is an input type that accepts CSIPowerMaxTypeArgs and CSIPowerMaxTypeOutput values.
// You can construct a concrete instance of `CSIPowerMaxTypeInput` via:
//
//          CSIPowerMaxTypeArgs{...}
type CSIPowerMaxTypeInput interface {
	pulumi.Input

	ToCSIPowerMaxTypeOutput() CSIPowerMaxTypeOutput
	ToCSIPowerMaxTypeOutputWithContext(context.Context) CSIPowerMaxTypeOutput
}

// CSIPowerMax is the Schema for the csipowermaxes API
type CSIPowerMaxTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// CSIPowerMaxSpec defines the desired state of CSIPowerMax
	Spec CSIPowerMaxSpecPtrInput `pulumi:"spec"`
	// DriverStatus defines the observed state of CSIDriver
	Status CSIPowerMaxStatusPtrInput `pulumi:"status"`
}

func (CSIPowerMaxTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxType)(nil)).Elem()
}

func (i CSIPowerMaxTypeArgs) ToCSIPowerMaxTypeOutput() CSIPowerMaxTypeOutput {
	return i.ToCSIPowerMaxTypeOutputWithContext(context.Background())
}

func (i CSIPowerMaxTypeArgs) ToCSIPowerMaxTypeOutputWithContext(ctx context.Context) CSIPowerMaxTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxTypeOutput)
}

// CSIPowerMax is the Schema for the csipowermaxes API
type CSIPowerMaxTypeOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxType)(nil)).Elem()
}

func (o CSIPowerMaxTypeOutput) ToCSIPowerMaxTypeOutput() CSIPowerMaxTypeOutput {
	return o
}

func (o CSIPowerMaxTypeOutput) ToCSIPowerMaxTypeOutputWithContext(ctx context.Context) CSIPowerMaxTypeOutput {
	return o
}

func (o CSIPowerMaxTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o CSIPowerMaxTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o CSIPowerMaxTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// CSIPowerMaxSpec defines the desired state of CSIPowerMax
func (o CSIPowerMaxTypeOutput) Spec() CSIPowerMaxSpecPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxType) *CSIPowerMaxSpec { return v.Spec }).(CSIPowerMaxSpecPtrOutput)
}

// DriverStatus defines the observed state of CSIDriver
func (o CSIPowerMaxTypeOutput) Status() CSIPowerMaxStatusPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxType) *CSIPowerMaxStatus { return v.Status }).(CSIPowerMaxStatusPtrOutput)
}

type CSIPowerMaxMetadata struct {
}

// CSIPowerMaxMetadataInput is an input type that accepts CSIPowerMaxMetadataArgs and CSIPowerMaxMetadataOutput values.
// You can construct a concrete instance of `CSIPowerMaxMetadataInput` via:
//
//          CSIPowerMaxMetadataArgs{...}
type CSIPowerMaxMetadataInput interface {
	pulumi.Input

	ToCSIPowerMaxMetadataOutput() CSIPowerMaxMetadataOutput
	ToCSIPowerMaxMetadataOutputWithContext(context.Context) CSIPowerMaxMetadataOutput
}

type CSIPowerMaxMetadataArgs struct {
}

func (CSIPowerMaxMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxMetadata)(nil)).Elem()
}

func (i CSIPowerMaxMetadataArgs) ToCSIPowerMaxMetadataOutput() CSIPowerMaxMetadataOutput {
	return i.ToCSIPowerMaxMetadataOutputWithContext(context.Background())
}

func (i CSIPowerMaxMetadataArgs) ToCSIPowerMaxMetadataOutputWithContext(ctx context.Context) CSIPowerMaxMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxMetadataOutput)
}

type CSIPowerMaxMetadataOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxMetadata)(nil)).Elem()
}

func (o CSIPowerMaxMetadataOutput) ToCSIPowerMaxMetadataOutput() CSIPowerMaxMetadataOutput {
	return o
}

func (o CSIPowerMaxMetadataOutput) ToCSIPowerMaxMetadataOutputWithContext(ctx context.Context) CSIPowerMaxMetadataOutput {
	return o
}

// CSIPowerMaxRevProxy is the Schema for the csipowermaxrevproxies API
type CSIPowerMaxRevProxyType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// CSIPowerMaxRevProxySpec defines the desired state of CSIPowerMaxRevProxy
	Spec *CSIPowerMaxRevProxySpec `pulumi:"spec"`
	// CSIPowerMaxRevProxyStatus defines the observed state of CSIPowerMaxRevProxy
	Status *CSIPowerMaxRevProxyStatus `pulumi:"status"`
}

// CSIPowerMaxRevProxyTypeInput is an input type that accepts CSIPowerMaxRevProxyTypeArgs and CSIPowerMaxRevProxyTypeOutput values.
// You can construct a concrete instance of `CSIPowerMaxRevProxyTypeInput` via:
//
//          CSIPowerMaxRevProxyTypeArgs{...}
type CSIPowerMaxRevProxyTypeInput interface {
	pulumi.Input

	ToCSIPowerMaxRevProxyTypeOutput() CSIPowerMaxRevProxyTypeOutput
	ToCSIPowerMaxRevProxyTypeOutputWithContext(context.Context) CSIPowerMaxRevProxyTypeOutput
}

// CSIPowerMaxRevProxy is the Schema for the csipowermaxrevproxies API
type CSIPowerMaxRevProxyTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// CSIPowerMaxRevProxySpec defines the desired state of CSIPowerMaxRevProxy
	Spec CSIPowerMaxRevProxySpecPtrInput `pulumi:"spec"`
	// CSIPowerMaxRevProxyStatus defines the observed state of CSIPowerMaxRevProxy
	Status CSIPowerMaxRevProxyStatusPtrInput `pulumi:"status"`
}

func (CSIPowerMaxRevProxyTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxRevProxyType)(nil)).Elem()
}

func (i CSIPowerMaxRevProxyTypeArgs) ToCSIPowerMaxRevProxyTypeOutput() CSIPowerMaxRevProxyTypeOutput {
	return i.ToCSIPowerMaxRevProxyTypeOutputWithContext(context.Background())
}

func (i CSIPowerMaxRevProxyTypeArgs) ToCSIPowerMaxRevProxyTypeOutputWithContext(ctx context.Context) CSIPowerMaxRevProxyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxRevProxyTypeOutput)
}

// CSIPowerMaxRevProxy is the Schema for the csipowermaxrevproxies API
type CSIPowerMaxRevProxyTypeOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxRevProxyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxRevProxyType)(nil)).Elem()
}

func (o CSIPowerMaxRevProxyTypeOutput) ToCSIPowerMaxRevProxyTypeOutput() CSIPowerMaxRevProxyTypeOutput {
	return o
}

func (o CSIPowerMaxRevProxyTypeOutput) ToCSIPowerMaxRevProxyTypeOutputWithContext(ctx context.Context) CSIPowerMaxRevProxyTypeOutput {
	return o
}

func (o CSIPowerMaxRevProxyTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxyType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o CSIPowerMaxRevProxyTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxyType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o CSIPowerMaxRevProxyTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxyType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// CSIPowerMaxRevProxySpec defines the desired state of CSIPowerMaxRevProxy
func (o CSIPowerMaxRevProxyTypeOutput) Spec() CSIPowerMaxRevProxySpecPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxyType) *CSIPowerMaxRevProxySpec { return v.Spec }).(CSIPowerMaxRevProxySpecPtrOutput)
}

// CSIPowerMaxRevProxyStatus defines the observed state of CSIPowerMaxRevProxy
func (o CSIPowerMaxRevProxyTypeOutput) Status() CSIPowerMaxRevProxyStatusPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxyType) *CSIPowerMaxRevProxyStatus { return v.Status }).(CSIPowerMaxRevProxyStatusPtrOutput)
}

type CSIPowerMaxRevProxyMetadata struct {
}

// CSIPowerMaxRevProxyMetadataInput is an input type that accepts CSIPowerMaxRevProxyMetadataArgs and CSIPowerMaxRevProxyMetadataOutput values.
// You can construct a concrete instance of `CSIPowerMaxRevProxyMetadataInput` via:
//
//          CSIPowerMaxRevProxyMetadataArgs{...}
type CSIPowerMaxRevProxyMetadataInput interface {
	pulumi.Input

	ToCSIPowerMaxRevProxyMetadataOutput() CSIPowerMaxRevProxyMetadataOutput
	ToCSIPowerMaxRevProxyMetadataOutputWithContext(context.Context) CSIPowerMaxRevProxyMetadataOutput
}

type CSIPowerMaxRevProxyMetadataArgs struct {
}

func (CSIPowerMaxRevProxyMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxRevProxyMetadata)(nil)).Elem()
}

func (i CSIPowerMaxRevProxyMetadataArgs) ToCSIPowerMaxRevProxyMetadataOutput() CSIPowerMaxRevProxyMetadataOutput {
	return i.ToCSIPowerMaxRevProxyMetadataOutputWithContext(context.Background())
}

func (i CSIPowerMaxRevProxyMetadataArgs) ToCSIPowerMaxRevProxyMetadataOutputWithContext(ctx context.Context) CSIPowerMaxRevProxyMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxRevProxyMetadataOutput)
}

type CSIPowerMaxRevProxyMetadataOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxRevProxyMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxRevProxyMetadata)(nil)).Elem()
}

func (o CSIPowerMaxRevProxyMetadataOutput) ToCSIPowerMaxRevProxyMetadataOutput() CSIPowerMaxRevProxyMetadataOutput {
	return o
}

func (o CSIPowerMaxRevProxyMetadataOutput) ToCSIPowerMaxRevProxyMetadataOutputWithContext(ctx context.Context) CSIPowerMaxRevProxyMetadataOutput {
	return o
}

// CSIPowerMaxRevProxySpec defines the desired state of CSIPowerMaxRevProxy
type CSIPowerMaxRevProxySpec struct {
	// RevProxyConfig represents the reverse proxy configuration
	Config CSIPowerMaxRevProxySpecConfig `pulumi:"config"`
	// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html
	Image string `pulumi:"image"`
	// PullPolicy describes a policy for if/when to pull a container image
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	TlsSecret       string  `pulumi:"tlsSecret"`
}

// CSIPowerMaxRevProxySpecInput is an input type that accepts CSIPowerMaxRevProxySpecArgs and CSIPowerMaxRevProxySpecOutput values.
// You can construct a concrete instance of `CSIPowerMaxRevProxySpecInput` via:
//
//          CSIPowerMaxRevProxySpecArgs{...}
type CSIPowerMaxRevProxySpecInput interface {
	pulumi.Input

	ToCSIPowerMaxRevProxySpecOutput() CSIPowerMaxRevProxySpecOutput
	ToCSIPowerMaxRevProxySpecOutputWithContext(context.Context) CSIPowerMaxRevProxySpecOutput
}

// CSIPowerMaxRevProxySpec defines the desired state of CSIPowerMaxRevProxy
type CSIPowerMaxRevProxySpecArgs struct {
	// RevProxyConfig represents the reverse proxy configuration
	Config CSIPowerMaxRevProxySpecConfigInput `pulumi:"config"`
	// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html
	Image pulumi.StringInput `pulumi:"image"`
	// PullPolicy describes a policy for if/when to pull a container image
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	TlsSecret       pulumi.StringInput    `pulumi:"tlsSecret"`
}

func (CSIPowerMaxRevProxySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxRevProxySpec)(nil)).Elem()
}

func (i CSIPowerMaxRevProxySpecArgs) ToCSIPowerMaxRevProxySpecOutput() CSIPowerMaxRevProxySpecOutput {
	return i.ToCSIPowerMaxRevProxySpecOutputWithContext(context.Background())
}

func (i CSIPowerMaxRevProxySpecArgs) ToCSIPowerMaxRevProxySpecOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxRevProxySpecOutput)
}

func (i CSIPowerMaxRevProxySpecArgs) ToCSIPowerMaxRevProxySpecPtrOutput() CSIPowerMaxRevProxySpecPtrOutput {
	return i.ToCSIPowerMaxRevProxySpecPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxRevProxySpecArgs) ToCSIPowerMaxRevProxySpecPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxRevProxySpecOutput).ToCSIPowerMaxRevProxySpecPtrOutputWithContext(ctx)
}

// CSIPowerMaxRevProxySpecPtrInput is an input type that accepts CSIPowerMaxRevProxySpecArgs, CSIPowerMaxRevProxySpecPtr and CSIPowerMaxRevProxySpecPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxRevProxySpecPtrInput` via:
//
//          CSIPowerMaxRevProxySpecArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxRevProxySpecPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxRevProxySpecPtrOutput() CSIPowerMaxRevProxySpecPtrOutput
	ToCSIPowerMaxRevProxySpecPtrOutputWithContext(context.Context) CSIPowerMaxRevProxySpecPtrOutput
}

type csipowerMaxRevProxySpecPtrType CSIPowerMaxRevProxySpecArgs

func CSIPowerMaxRevProxySpecPtr(v *CSIPowerMaxRevProxySpecArgs) CSIPowerMaxRevProxySpecPtrInput {
	return (*csipowerMaxRevProxySpecPtrType)(v)
}

func (*csipowerMaxRevProxySpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxRevProxySpec)(nil)).Elem()
}

func (i *csipowerMaxRevProxySpecPtrType) ToCSIPowerMaxRevProxySpecPtrOutput() CSIPowerMaxRevProxySpecPtrOutput {
	return i.ToCSIPowerMaxRevProxySpecPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxRevProxySpecPtrType) ToCSIPowerMaxRevProxySpecPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxRevProxySpecPtrOutput)
}

// CSIPowerMaxRevProxySpec defines the desired state of CSIPowerMaxRevProxy
type CSIPowerMaxRevProxySpecOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxRevProxySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxRevProxySpec)(nil)).Elem()
}

func (o CSIPowerMaxRevProxySpecOutput) ToCSIPowerMaxRevProxySpecOutput() CSIPowerMaxRevProxySpecOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecOutput) ToCSIPowerMaxRevProxySpecOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecOutput) ToCSIPowerMaxRevProxySpecPtrOutput() CSIPowerMaxRevProxySpecPtrOutput {
	return o.ToCSIPowerMaxRevProxySpecPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxRevProxySpecOutput) ToCSIPowerMaxRevProxySpecPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpec) *CSIPowerMaxRevProxySpec {
		return &v
	}).(CSIPowerMaxRevProxySpecPtrOutput)
}

// RevProxyConfig represents the reverse proxy configuration
func (o CSIPowerMaxRevProxySpecOutput) Config() CSIPowerMaxRevProxySpecConfigOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpec) CSIPowerMaxRevProxySpecConfig { return v.Config }).(CSIPowerMaxRevProxySpecConfigOutput)
}

// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html
func (o CSIPowerMaxRevProxySpecOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpec) string { return v.Image }).(pulumi.StringOutput)
}

// PullPolicy describes a policy for if/when to pull a container image
func (o CSIPowerMaxRevProxySpecOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpec) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

func (o CSIPowerMaxRevProxySpecOutput) TlsSecret() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpec) string { return v.TlsSecret }).(pulumi.StringOutput)
}

type CSIPowerMaxRevProxySpecPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxRevProxySpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxRevProxySpec)(nil)).Elem()
}

func (o CSIPowerMaxRevProxySpecPtrOutput) ToCSIPowerMaxRevProxySpecPtrOutput() CSIPowerMaxRevProxySpecPtrOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecPtrOutput) ToCSIPowerMaxRevProxySpecPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecPtrOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecPtrOutput) Elem() CSIPowerMaxRevProxySpecOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxySpec) CSIPowerMaxRevProxySpec { return *v }).(CSIPowerMaxRevProxySpecOutput)
}

// RevProxyConfig represents the reverse proxy configuration
func (o CSIPowerMaxRevProxySpecPtrOutput) Config() CSIPowerMaxRevProxySpecConfigPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxySpec) *CSIPowerMaxRevProxySpecConfig {
		if v == nil {
			return nil
		}
		return &v.Config
	}).(CSIPowerMaxRevProxySpecConfigPtrOutput)
}

// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html
func (o CSIPowerMaxRevProxySpecPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxySpec) *string {
		if v == nil {
			return nil
		}
		return &v.Image
	}).(pulumi.StringPtrOutput)
}

// PullPolicy describes a policy for if/when to pull a container image
func (o CSIPowerMaxRevProxySpecPtrOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxySpec) *string {
		if v == nil {
			return nil
		}
		return v.ImagePullPolicy
	}).(pulumi.StringPtrOutput)
}

func (o CSIPowerMaxRevProxySpecPtrOutput) TlsSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxySpec) *string {
		if v == nil {
			return nil
		}
		return &v.TlsSecret
	}).(pulumi.StringPtrOutput)
}

// RevProxyConfig represents the reverse proxy configuration
type CSIPowerMaxRevProxySpecConfig struct {
	// LinkConfig is one of the configuration modes for reverse proxy
	LinkConfig *CSIPowerMaxRevProxySpecConfigLinkConfig `pulumi:"linkConfig"`
	Mode       *string                                  `pulumi:"mode"`
	Port       *int                                     `pulumi:"port"`
	// StandAloneConfig is one of the configuration modes for reverse proxy
	StandAloneConfig *CSIPowerMaxRevProxySpecConfigStandAloneConfig `pulumi:"standAloneConfig"`
}

// CSIPowerMaxRevProxySpecConfigInput is an input type that accepts CSIPowerMaxRevProxySpecConfigArgs and CSIPowerMaxRevProxySpecConfigOutput values.
// You can construct a concrete instance of `CSIPowerMaxRevProxySpecConfigInput` via:
//
//          CSIPowerMaxRevProxySpecConfigArgs{...}
type CSIPowerMaxRevProxySpecConfigInput interface {
	pulumi.Input

	ToCSIPowerMaxRevProxySpecConfigOutput() CSIPowerMaxRevProxySpecConfigOutput
	ToCSIPowerMaxRevProxySpecConfigOutputWithContext(context.Context) CSIPowerMaxRevProxySpecConfigOutput
}

// RevProxyConfig represents the reverse proxy configuration
type CSIPowerMaxRevProxySpecConfigArgs struct {
	// LinkConfig is one of the configuration modes for reverse proxy
	LinkConfig CSIPowerMaxRevProxySpecConfigLinkConfigPtrInput `pulumi:"linkConfig"`
	Mode       pulumi.StringPtrInput                           `pulumi:"mode"`
	Port       pulumi.IntPtrInput                              `pulumi:"port"`
	// StandAloneConfig is one of the configuration modes for reverse proxy
	StandAloneConfig CSIPowerMaxRevProxySpecConfigStandAloneConfigPtrInput `pulumi:"standAloneConfig"`
}

func (CSIPowerMaxRevProxySpecConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxRevProxySpecConfig)(nil)).Elem()
}

func (i CSIPowerMaxRevProxySpecConfigArgs) ToCSIPowerMaxRevProxySpecConfigOutput() CSIPowerMaxRevProxySpecConfigOutput {
	return i.ToCSIPowerMaxRevProxySpecConfigOutputWithContext(context.Background())
}

func (i CSIPowerMaxRevProxySpecConfigArgs) ToCSIPowerMaxRevProxySpecConfigOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxRevProxySpecConfigOutput)
}

func (i CSIPowerMaxRevProxySpecConfigArgs) ToCSIPowerMaxRevProxySpecConfigPtrOutput() CSIPowerMaxRevProxySpecConfigPtrOutput {
	return i.ToCSIPowerMaxRevProxySpecConfigPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxRevProxySpecConfigArgs) ToCSIPowerMaxRevProxySpecConfigPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxRevProxySpecConfigOutput).ToCSIPowerMaxRevProxySpecConfigPtrOutputWithContext(ctx)
}

// CSIPowerMaxRevProxySpecConfigPtrInput is an input type that accepts CSIPowerMaxRevProxySpecConfigArgs, CSIPowerMaxRevProxySpecConfigPtr and CSIPowerMaxRevProxySpecConfigPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxRevProxySpecConfigPtrInput` via:
//
//          CSIPowerMaxRevProxySpecConfigArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxRevProxySpecConfigPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxRevProxySpecConfigPtrOutput() CSIPowerMaxRevProxySpecConfigPtrOutput
	ToCSIPowerMaxRevProxySpecConfigPtrOutputWithContext(context.Context) CSIPowerMaxRevProxySpecConfigPtrOutput
}

type csipowerMaxRevProxySpecConfigPtrType CSIPowerMaxRevProxySpecConfigArgs

func CSIPowerMaxRevProxySpecConfigPtr(v *CSIPowerMaxRevProxySpecConfigArgs) CSIPowerMaxRevProxySpecConfigPtrInput {
	return (*csipowerMaxRevProxySpecConfigPtrType)(v)
}

func (*csipowerMaxRevProxySpecConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxRevProxySpecConfig)(nil)).Elem()
}

func (i *csipowerMaxRevProxySpecConfigPtrType) ToCSIPowerMaxRevProxySpecConfigPtrOutput() CSIPowerMaxRevProxySpecConfigPtrOutput {
	return i.ToCSIPowerMaxRevProxySpecConfigPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxRevProxySpecConfigPtrType) ToCSIPowerMaxRevProxySpecConfigPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxRevProxySpecConfigPtrOutput)
}

// RevProxyConfig represents the reverse proxy configuration
type CSIPowerMaxRevProxySpecConfigOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxRevProxySpecConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxRevProxySpecConfig)(nil)).Elem()
}

func (o CSIPowerMaxRevProxySpecConfigOutput) ToCSIPowerMaxRevProxySpecConfigOutput() CSIPowerMaxRevProxySpecConfigOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecConfigOutput) ToCSIPowerMaxRevProxySpecConfigOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecConfigOutput) ToCSIPowerMaxRevProxySpecConfigPtrOutput() CSIPowerMaxRevProxySpecConfigPtrOutput {
	return o.ToCSIPowerMaxRevProxySpecConfigPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxRevProxySpecConfigOutput) ToCSIPowerMaxRevProxySpecConfigPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfig) *CSIPowerMaxRevProxySpecConfig {
		return &v
	}).(CSIPowerMaxRevProxySpecConfigPtrOutput)
}

// LinkConfig is one of the configuration modes for reverse proxy
func (o CSIPowerMaxRevProxySpecConfigOutput) LinkConfig() CSIPowerMaxRevProxySpecConfigLinkConfigPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfig) *CSIPowerMaxRevProxySpecConfigLinkConfig { return v.LinkConfig }).(CSIPowerMaxRevProxySpecConfigLinkConfigPtrOutput)
}

func (o CSIPowerMaxRevProxySpecConfigOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfig) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

func (o CSIPowerMaxRevProxySpecConfigOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfig) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// StandAloneConfig is one of the configuration modes for reverse proxy
func (o CSIPowerMaxRevProxySpecConfigOutput) StandAloneConfig() CSIPowerMaxRevProxySpecConfigStandAloneConfigPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfig) *CSIPowerMaxRevProxySpecConfigStandAloneConfig {
		return v.StandAloneConfig
	}).(CSIPowerMaxRevProxySpecConfigStandAloneConfigPtrOutput)
}

type CSIPowerMaxRevProxySpecConfigPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxRevProxySpecConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxRevProxySpecConfig)(nil)).Elem()
}

func (o CSIPowerMaxRevProxySpecConfigPtrOutput) ToCSIPowerMaxRevProxySpecConfigPtrOutput() CSIPowerMaxRevProxySpecConfigPtrOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecConfigPtrOutput) ToCSIPowerMaxRevProxySpecConfigPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigPtrOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecConfigPtrOutput) Elem() CSIPowerMaxRevProxySpecConfigOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxySpecConfig) CSIPowerMaxRevProxySpecConfig { return *v }).(CSIPowerMaxRevProxySpecConfigOutput)
}

// LinkConfig is one of the configuration modes for reverse proxy
func (o CSIPowerMaxRevProxySpecConfigPtrOutput) LinkConfig() CSIPowerMaxRevProxySpecConfigLinkConfigPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxySpecConfig) *CSIPowerMaxRevProxySpecConfigLinkConfig {
		if v == nil {
			return nil
		}
		return v.LinkConfig
	}).(CSIPowerMaxRevProxySpecConfigLinkConfigPtrOutput)
}

func (o CSIPowerMaxRevProxySpecConfigPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxySpecConfig) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

func (o CSIPowerMaxRevProxySpecConfigPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxySpecConfig) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// StandAloneConfig is one of the configuration modes for reverse proxy
func (o CSIPowerMaxRevProxySpecConfigPtrOutput) StandAloneConfig() CSIPowerMaxRevProxySpecConfigStandAloneConfigPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxySpecConfig) *CSIPowerMaxRevProxySpecConfigStandAloneConfig {
		if v == nil {
			return nil
		}
		return v.StandAloneConfig
	}).(CSIPowerMaxRevProxySpecConfigStandAloneConfigPtrOutput)
}

// LinkConfig is one of the configuration modes for reverse proxy
type CSIPowerMaxRevProxySpecConfigLinkConfig struct {
	// ManagementServerConfig - represents a management server configuration for the management server
	Backup *CSIPowerMaxRevProxySpecConfigLinkConfigBackup `pulumi:"backup"`
	// ManagementServerConfig - represents a management server configuration for the management server
	Primary CSIPowerMaxRevProxySpecConfigLinkConfigPrimary `pulumi:"primary"`
}

// CSIPowerMaxRevProxySpecConfigLinkConfigInput is an input type that accepts CSIPowerMaxRevProxySpecConfigLinkConfigArgs and CSIPowerMaxRevProxySpecConfigLinkConfigOutput values.
// You can construct a concrete instance of `CSIPowerMaxRevProxySpecConfigLinkConfigInput` via:
//
//          CSIPowerMaxRevProxySpecConfigLinkConfigArgs{...}
type CSIPowerMaxRevProxySpecConfigLinkConfigInput interface {
	pulumi.Input

	ToCSIPowerMaxRevProxySpecConfigLinkConfigOutput() CSIPowerMaxRevProxySpecConfigLinkConfigOutput
	ToCSIPowerMaxRevProxySpecConfigLinkConfigOutputWithContext(context.Context) CSIPowerMaxRevProxySpecConfigLinkConfigOutput
}

// LinkConfig is one of the configuration modes for reverse proxy
type CSIPowerMaxRevProxySpecConfigLinkConfigArgs struct {
	// ManagementServerConfig - represents a management server configuration for the management server
	Backup CSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrInput `pulumi:"backup"`
	// ManagementServerConfig - represents a management server configuration for the management server
	Primary CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryInput `pulumi:"primary"`
}

func (CSIPowerMaxRevProxySpecConfigLinkConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxRevProxySpecConfigLinkConfig)(nil)).Elem()
}

func (i CSIPowerMaxRevProxySpecConfigLinkConfigArgs) ToCSIPowerMaxRevProxySpecConfigLinkConfigOutput() CSIPowerMaxRevProxySpecConfigLinkConfigOutput {
	return i.ToCSIPowerMaxRevProxySpecConfigLinkConfigOutputWithContext(context.Background())
}

func (i CSIPowerMaxRevProxySpecConfigLinkConfigArgs) ToCSIPowerMaxRevProxySpecConfigLinkConfigOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigLinkConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxRevProxySpecConfigLinkConfigOutput)
}

func (i CSIPowerMaxRevProxySpecConfigLinkConfigArgs) ToCSIPowerMaxRevProxySpecConfigLinkConfigPtrOutput() CSIPowerMaxRevProxySpecConfigLinkConfigPtrOutput {
	return i.ToCSIPowerMaxRevProxySpecConfigLinkConfigPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxRevProxySpecConfigLinkConfigArgs) ToCSIPowerMaxRevProxySpecConfigLinkConfigPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigLinkConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxRevProxySpecConfigLinkConfigOutput).ToCSIPowerMaxRevProxySpecConfigLinkConfigPtrOutputWithContext(ctx)
}

// CSIPowerMaxRevProxySpecConfigLinkConfigPtrInput is an input type that accepts CSIPowerMaxRevProxySpecConfigLinkConfigArgs, CSIPowerMaxRevProxySpecConfigLinkConfigPtr and CSIPowerMaxRevProxySpecConfigLinkConfigPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxRevProxySpecConfigLinkConfigPtrInput` via:
//
//          CSIPowerMaxRevProxySpecConfigLinkConfigArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxRevProxySpecConfigLinkConfigPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxRevProxySpecConfigLinkConfigPtrOutput() CSIPowerMaxRevProxySpecConfigLinkConfigPtrOutput
	ToCSIPowerMaxRevProxySpecConfigLinkConfigPtrOutputWithContext(context.Context) CSIPowerMaxRevProxySpecConfigLinkConfigPtrOutput
}

type csipowerMaxRevProxySpecConfigLinkConfigPtrType CSIPowerMaxRevProxySpecConfigLinkConfigArgs

func CSIPowerMaxRevProxySpecConfigLinkConfigPtr(v *CSIPowerMaxRevProxySpecConfigLinkConfigArgs) CSIPowerMaxRevProxySpecConfigLinkConfigPtrInput {
	return (*csipowerMaxRevProxySpecConfigLinkConfigPtrType)(v)
}

func (*csipowerMaxRevProxySpecConfigLinkConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxRevProxySpecConfigLinkConfig)(nil)).Elem()
}

func (i *csipowerMaxRevProxySpecConfigLinkConfigPtrType) ToCSIPowerMaxRevProxySpecConfigLinkConfigPtrOutput() CSIPowerMaxRevProxySpecConfigLinkConfigPtrOutput {
	return i.ToCSIPowerMaxRevProxySpecConfigLinkConfigPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxRevProxySpecConfigLinkConfigPtrType) ToCSIPowerMaxRevProxySpecConfigLinkConfigPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigLinkConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxRevProxySpecConfigLinkConfigPtrOutput)
}

// LinkConfig is one of the configuration modes for reverse proxy
type CSIPowerMaxRevProxySpecConfigLinkConfigOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxRevProxySpecConfigLinkConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxRevProxySpecConfigLinkConfig)(nil)).Elem()
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigOutput) ToCSIPowerMaxRevProxySpecConfigLinkConfigOutput() CSIPowerMaxRevProxySpecConfigLinkConfigOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigOutput) ToCSIPowerMaxRevProxySpecConfigLinkConfigOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigLinkConfigOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigOutput) ToCSIPowerMaxRevProxySpecConfigLinkConfigPtrOutput() CSIPowerMaxRevProxySpecConfigLinkConfigPtrOutput {
	return o.ToCSIPowerMaxRevProxySpecConfigLinkConfigPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigOutput) ToCSIPowerMaxRevProxySpecConfigLinkConfigPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigLinkConfigPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfigLinkConfig) *CSIPowerMaxRevProxySpecConfigLinkConfig {
		return &v
	}).(CSIPowerMaxRevProxySpecConfigLinkConfigPtrOutput)
}

// ManagementServerConfig - represents a management server configuration for the management server
func (o CSIPowerMaxRevProxySpecConfigLinkConfigOutput) Backup() CSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfigLinkConfig) *CSIPowerMaxRevProxySpecConfigLinkConfigBackup {
		return v.Backup
	}).(CSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrOutput)
}

// ManagementServerConfig - represents a management server configuration for the management server
func (o CSIPowerMaxRevProxySpecConfigLinkConfigOutput) Primary() CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfigLinkConfig) CSIPowerMaxRevProxySpecConfigLinkConfigPrimary {
		return v.Primary
	}).(CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryOutput)
}

type CSIPowerMaxRevProxySpecConfigLinkConfigPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxRevProxySpecConfigLinkConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxRevProxySpecConfigLinkConfig)(nil)).Elem()
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigPtrOutput) ToCSIPowerMaxRevProxySpecConfigLinkConfigPtrOutput() CSIPowerMaxRevProxySpecConfigLinkConfigPtrOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigPtrOutput) ToCSIPowerMaxRevProxySpecConfigLinkConfigPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigLinkConfigPtrOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigPtrOutput) Elem() CSIPowerMaxRevProxySpecConfigLinkConfigOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxySpecConfigLinkConfig) CSIPowerMaxRevProxySpecConfigLinkConfig { return *v }).(CSIPowerMaxRevProxySpecConfigLinkConfigOutput)
}

// ManagementServerConfig - represents a management server configuration for the management server
func (o CSIPowerMaxRevProxySpecConfigLinkConfigPtrOutput) Backup() CSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxySpecConfigLinkConfig) *CSIPowerMaxRevProxySpecConfigLinkConfigBackup {
		if v == nil {
			return nil
		}
		return v.Backup
	}).(CSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrOutput)
}

// ManagementServerConfig - represents a management server configuration for the management server
func (o CSIPowerMaxRevProxySpecConfigLinkConfigPtrOutput) Primary() CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxySpecConfigLinkConfig) *CSIPowerMaxRevProxySpecConfigLinkConfigPrimary {
		if v == nil {
			return nil
		}
		return &v.Primary
	}).(CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrOutput)
}

// ManagementServerConfig - represents a management server configuration for the management server
type CSIPowerMaxRevProxySpecConfigLinkConfigBackup struct {
	ArrayCredentialSecret *string `pulumi:"arrayCredentialSecret"`
	CertSecret            *string `pulumi:"certSecret"`
	// ProxyLimits is used for storing the various types of limits applied for a particular proxy instance
	Limits                    *CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimits `pulumi:"limits"`
	SkipCertificateValidation *bool                                                `pulumi:"skipCertificateValidation"`
	Url                       string                                               `pulumi:"url"`
}

// CSIPowerMaxRevProxySpecConfigLinkConfigBackupInput is an input type that accepts CSIPowerMaxRevProxySpecConfigLinkConfigBackupArgs and CSIPowerMaxRevProxySpecConfigLinkConfigBackupOutput values.
// You can construct a concrete instance of `CSIPowerMaxRevProxySpecConfigLinkConfigBackupInput` via:
//
//          CSIPowerMaxRevProxySpecConfigLinkConfigBackupArgs{...}
type CSIPowerMaxRevProxySpecConfigLinkConfigBackupInput interface {
	pulumi.Input

	ToCSIPowerMaxRevProxySpecConfigLinkConfigBackupOutput() CSIPowerMaxRevProxySpecConfigLinkConfigBackupOutput
	ToCSIPowerMaxRevProxySpecConfigLinkConfigBackupOutputWithContext(context.Context) CSIPowerMaxRevProxySpecConfigLinkConfigBackupOutput
}

// ManagementServerConfig - represents a management server configuration for the management server
type CSIPowerMaxRevProxySpecConfigLinkConfigBackupArgs struct {
	ArrayCredentialSecret pulumi.StringPtrInput `pulumi:"arrayCredentialSecret"`
	CertSecret            pulumi.StringPtrInput `pulumi:"certSecret"`
	// ProxyLimits is used for storing the various types of limits applied for a particular proxy instance
	Limits                    CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrInput `pulumi:"limits"`
	SkipCertificateValidation pulumi.BoolPtrInput                                         `pulumi:"skipCertificateValidation"`
	Url                       pulumi.StringInput                                          `pulumi:"url"`
}

func (CSIPowerMaxRevProxySpecConfigLinkConfigBackupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxRevProxySpecConfigLinkConfigBackup)(nil)).Elem()
}

func (i CSIPowerMaxRevProxySpecConfigLinkConfigBackupArgs) ToCSIPowerMaxRevProxySpecConfigLinkConfigBackupOutput() CSIPowerMaxRevProxySpecConfigLinkConfigBackupOutput {
	return i.ToCSIPowerMaxRevProxySpecConfigLinkConfigBackupOutputWithContext(context.Background())
}

func (i CSIPowerMaxRevProxySpecConfigLinkConfigBackupArgs) ToCSIPowerMaxRevProxySpecConfigLinkConfigBackupOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigLinkConfigBackupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxRevProxySpecConfigLinkConfigBackupOutput)
}

func (i CSIPowerMaxRevProxySpecConfigLinkConfigBackupArgs) ToCSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrOutput() CSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrOutput {
	return i.ToCSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxRevProxySpecConfigLinkConfigBackupArgs) ToCSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxRevProxySpecConfigLinkConfigBackupOutput).ToCSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrOutputWithContext(ctx)
}

// CSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrInput is an input type that accepts CSIPowerMaxRevProxySpecConfigLinkConfigBackupArgs, CSIPowerMaxRevProxySpecConfigLinkConfigBackupPtr and CSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrInput` via:
//
//          CSIPowerMaxRevProxySpecConfigLinkConfigBackupArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrOutput() CSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrOutput
	ToCSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrOutputWithContext(context.Context) CSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrOutput
}

type csipowerMaxRevProxySpecConfigLinkConfigBackupPtrType CSIPowerMaxRevProxySpecConfigLinkConfigBackupArgs

func CSIPowerMaxRevProxySpecConfigLinkConfigBackupPtr(v *CSIPowerMaxRevProxySpecConfigLinkConfigBackupArgs) CSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrInput {
	return (*csipowerMaxRevProxySpecConfigLinkConfigBackupPtrType)(v)
}

func (*csipowerMaxRevProxySpecConfigLinkConfigBackupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxRevProxySpecConfigLinkConfigBackup)(nil)).Elem()
}

func (i *csipowerMaxRevProxySpecConfigLinkConfigBackupPtrType) ToCSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrOutput() CSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrOutput {
	return i.ToCSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxRevProxySpecConfigLinkConfigBackupPtrType) ToCSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrOutput)
}

// ManagementServerConfig - represents a management server configuration for the management server
type CSIPowerMaxRevProxySpecConfigLinkConfigBackupOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxRevProxySpecConfigLinkConfigBackupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxRevProxySpecConfigLinkConfigBackup)(nil)).Elem()
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigBackupOutput) ToCSIPowerMaxRevProxySpecConfigLinkConfigBackupOutput() CSIPowerMaxRevProxySpecConfigLinkConfigBackupOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigBackupOutput) ToCSIPowerMaxRevProxySpecConfigLinkConfigBackupOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigLinkConfigBackupOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigBackupOutput) ToCSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrOutput() CSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrOutput {
	return o.ToCSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigBackupOutput) ToCSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfigLinkConfigBackup) *CSIPowerMaxRevProxySpecConfigLinkConfigBackup {
		return &v
	}).(CSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrOutput)
}
func (o CSIPowerMaxRevProxySpecConfigLinkConfigBackupOutput) ArrayCredentialSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfigLinkConfigBackup) *string { return v.ArrayCredentialSecret }).(pulumi.StringPtrOutput)
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigBackupOutput) CertSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfigLinkConfigBackup) *string { return v.CertSecret }).(pulumi.StringPtrOutput)
}

// ProxyLimits is used for storing the various types of limits applied for a particular proxy instance
func (o CSIPowerMaxRevProxySpecConfigLinkConfigBackupOutput) Limits() CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfigLinkConfigBackup) *CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimits {
		return v.Limits
	}).(CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrOutput)
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigBackupOutput) SkipCertificateValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfigLinkConfigBackup) *bool { return v.SkipCertificateValidation }).(pulumi.BoolPtrOutput)
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigBackupOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfigLinkConfigBackup) string { return v.Url }).(pulumi.StringOutput)
}

type CSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxRevProxySpecConfigLinkConfigBackup)(nil)).Elem()
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrOutput) ToCSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrOutput() CSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrOutput) ToCSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrOutput) Elem() CSIPowerMaxRevProxySpecConfigLinkConfigBackupOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxySpecConfigLinkConfigBackup) CSIPowerMaxRevProxySpecConfigLinkConfigBackup {
		return *v
	}).(CSIPowerMaxRevProxySpecConfigLinkConfigBackupOutput)
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrOutput) ArrayCredentialSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxySpecConfigLinkConfigBackup) *string {
		if v == nil {
			return nil
		}
		return v.ArrayCredentialSecret
	}).(pulumi.StringPtrOutput)
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrOutput) CertSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxySpecConfigLinkConfigBackup) *string {
		if v == nil {
			return nil
		}
		return v.CertSecret
	}).(pulumi.StringPtrOutput)
}

// ProxyLimits is used for storing the various types of limits applied for a particular proxy instance
func (o CSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrOutput) Limits() CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxySpecConfigLinkConfigBackup) *CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimits {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrOutput)
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrOutput) SkipCertificateValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxySpecConfigLinkConfigBackup) *bool {
		if v == nil {
			return nil
		}
		return v.SkipCertificateValidation
	}).(pulumi.BoolPtrOutput)
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxySpecConfigLinkConfigBackup) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

// ProxyLimits is used for storing the various types of limits applied for a particular proxy instance
type CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimits struct {
	MaxActiveRead       *int `pulumi:"maxActiveRead"`
	MaxActiveWrite      *int `pulumi:"maxActiveWrite"`
	MaxOutStandingRead  *int `pulumi:"maxOutStandingRead"`
	MaxOutStandingWrite *int `pulumi:"maxOutStandingWrite"`
}

// CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsInput is an input type that accepts CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsArgs and CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsOutput values.
// You can construct a concrete instance of `CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsInput` via:
//
//          CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsArgs{...}
type CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsInput interface {
	pulumi.Input

	ToCSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsOutput() CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsOutput
	ToCSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsOutputWithContext(context.Context) CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsOutput
}

// ProxyLimits is used for storing the various types of limits applied for a particular proxy instance
type CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsArgs struct {
	MaxActiveRead       pulumi.IntPtrInput `pulumi:"maxActiveRead"`
	MaxActiveWrite      pulumi.IntPtrInput `pulumi:"maxActiveWrite"`
	MaxOutStandingRead  pulumi.IntPtrInput `pulumi:"maxOutStandingRead"`
	MaxOutStandingWrite pulumi.IntPtrInput `pulumi:"maxOutStandingWrite"`
}

func (CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimits)(nil)).Elem()
}

func (i CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsArgs) ToCSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsOutput() CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsOutput {
	return i.ToCSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsOutputWithContext(context.Background())
}

func (i CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsArgs) ToCSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsOutput)
}

func (i CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsArgs) ToCSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrOutput() CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrOutput {
	return i.ToCSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsArgs) ToCSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsOutput).ToCSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrOutputWithContext(ctx)
}

// CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrInput is an input type that accepts CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsArgs, CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtr and CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrInput` via:
//
//          CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrOutput() CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrOutput
	ToCSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrOutputWithContext(context.Context) CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrOutput
}

type csipowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrType CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsArgs

func CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtr(v *CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsArgs) CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrInput {
	return (*csipowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrType)(v)
}

func (*csipowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimits)(nil)).Elem()
}

func (i *csipowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrType) ToCSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrOutput() CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrOutput {
	return i.ToCSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrType) ToCSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrOutput)
}

// ProxyLimits is used for storing the various types of limits applied for a particular proxy instance
type CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimits)(nil)).Elem()
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsOutput) ToCSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsOutput() CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsOutput) ToCSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsOutput) ToCSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrOutput() CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrOutput {
	return o.ToCSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsOutput) ToCSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimits) *CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimits {
		return &v
	}).(CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrOutput)
}
func (o CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsOutput) MaxActiveRead() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimits) *int { return v.MaxActiveRead }).(pulumi.IntPtrOutput)
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsOutput) MaxActiveWrite() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimits) *int { return v.MaxActiveWrite }).(pulumi.IntPtrOutput)
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsOutput) MaxOutStandingRead() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimits) *int { return v.MaxOutStandingRead }).(pulumi.IntPtrOutput)
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsOutput) MaxOutStandingWrite() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimits) *int { return v.MaxOutStandingWrite }).(pulumi.IntPtrOutput)
}

type CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimits)(nil)).Elem()
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrOutput) ToCSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrOutput() CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrOutput) ToCSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrOutput) Elem() CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimits) CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimits {
		return *v
	}).(CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsOutput)
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrOutput) MaxActiveRead() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimits) *int {
		if v == nil {
			return nil
		}
		return v.MaxActiveRead
	}).(pulumi.IntPtrOutput)
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrOutput) MaxActiveWrite() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimits) *int {
		if v == nil {
			return nil
		}
		return v.MaxActiveWrite
	}).(pulumi.IntPtrOutput)
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrOutput) MaxOutStandingRead() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimits) *int {
		if v == nil {
			return nil
		}
		return v.MaxOutStandingRead
	}).(pulumi.IntPtrOutput)
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrOutput) MaxOutStandingWrite() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimits) *int {
		if v == nil {
			return nil
		}
		return v.MaxOutStandingWrite
	}).(pulumi.IntPtrOutput)
}

// ManagementServerConfig - represents a management server configuration for the management server
type CSIPowerMaxRevProxySpecConfigLinkConfigPrimary struct {
	ArrayCredentialSecret *string `pulumi:"arrayCredentialSecret"`
	CertSecret            *string `pulumi:"certSecret"`
	// ProxyLimits is used for storing the various types of limits applied for a particular proxy instance
	Limits                    *CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimits `pulumi:"limits"`
	SkipCertificateValidation *bool                                                 `pulumi:"skipCertificateValidation"`
	Url                       string                                                `pulumi:"url"`
}

// CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryInput is an input type that accepts CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryArgs and CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryOutput values.
// You can construct a concrete instance of `CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryInput` via:
//
//          CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryArgs{...}
type CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryInput interface {
	pulumi.Input

	ToCSIPowerMaxRevProxySpecConfigLinkConfigPrimaryOutput() CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryOutput
	ToCSIPowerMaxRevProxySpecConfigLinkConfigPrimaryOutputWithContext(context.Context) CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryOutput
}

// ManagementServerConfig - represents a management server configuration for the management server
type CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryArgs struct {
	ArrayCredentialSecret pulumi.StringPtrInput `pulumi:"arrayCredentialSecret"`
	CertSecret            pulumi.StringPtrInput `pulumi:"certSecret"`
	// ProxyLimits is used for storing the various types of limits applied for a particular proxy instance
	Limits                    CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrInput `pulumi:"limits"`
	SkipCertificateValidation pulumi.BoolPtrInput                                          `pulumi:"skipCertificateValidation"`
	Url                       pulumi.StringInput                                           `pulumi:"url"`
}

func (CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxRevProxySpecConfigLinkConfigPrimary)(nil)).Elem()
}

func (i CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryArgs) ToCSIPowerMaxRevProxySpecConfigLinkConfigPrimaryOutput() CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryOutput {
	return i.ToCSIPowerMaxRevProxySpecConfigLinkConfigPrimaryOutputWithContext(context.Background())
}

func (i CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryArgs) ToCSIPowerMaxRevProxySpecConfigLinkConfigPrimaryOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryOutput)
}

func (i CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryArgs) ToCSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrOutput() CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrOutput {
	return i.ToCSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryArgs) ToCSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryOutput).ToCSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrOutputWithContext(ctx)
}

// CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrInput is an input type that accepts CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryArgs, CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtr and CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrInput` via:
//
//          CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrOutput() CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrOutput
	ToCSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrOutputWithContext(context.Context) CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrOutput
}

type csipowerMaxRevProxySpecConfigLinkConfigPrimaryPtrType CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryArgs

func CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtr(v *CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryArgs) CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrInput {
	return (*csipowerMaxRevProxySpecConfigLinkConfigPrimaryPtrType)(v)
}

func (*csipowerMaxRevProxySpecConfigLinkConfigPrimaryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxRevProxySpecConfigLinkConfigPrimary)(nil)).Elem()
}

func (i *csipowerMaxRevProxySpecConfigLinkConfigPrimaryPtrType) ToCSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrOutput() CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrOutput {
	return i.ToCSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxRevProxySpecConfigLinkConfigPrimaryPtrType) ToCSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrOutput)
}

// ManagementServerConfig - represents a management server configuration for the management server
type CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxRevProxySpecConfigLinkConfigPrimary)(nil)).Elem()
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryOutput) ToCSIPowerMaxRevProxySpecConfigLinkConfigPrimaryOutput() CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryOutput) ToCSIPowerMaxRevProxySpecConfigLinkConfigPrimaryOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryOutput) ToCSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrOutput() CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrOutput {
	return o.ToCSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryOutput) ToCSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfigLinkConfigPrimary) *CSIPowerMaxRevProxySpecConfigLinkConfigPrimary {
		return &v
	}).(CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrOutput)
}
func (o CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryOutput) ArrayCredentialSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfigLinkConfigPrimary) *string { return v.ArrayCredentialSecret }).(pulumi.StringPtrOutput)
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryOutput) CertSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfigLinkConfigPrimary) *string { return v.CertSecret }).(pulumi.StringPtrOutput)
}

// ProxyLimits is used for storing the various types of limits applied for a particular proxy instance
func (o CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryOutput) Limits() CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfigLinkConfigPrimary) *CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimits {
		return v.Limits
	}).(CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrOutput)
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryOutput) SkipCertificateValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfigLinkConfigPrimary) *bool { return v.SkipCertificateValidation }).(pulumi.BoolPtrOutput)
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfigLinkConfigPrimary) string { return v.Url }).(pulumi.StringOutput)
}

type CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxRevProxySpecConfigLinkConfigPrimary)(nil)).Elem()
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrOutput) ToCSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrOutput() CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrOutput) ToCSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrOutput) Elem() CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxySpecConfigLinkConfigPrimary) CSIPowerMaxRevProxySpecConfigLinkConfigPrimary {
		return *v
	}).(CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryOutput)
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrOutput) ArrayCredentialSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxySpecConfigLinkConfigPrimary) *string {
		if v == nil {
			return nil
		}
		return v.ArrayCredentialSecret
	}).(pulumi.StringPtrOutput)
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrOutput) CertSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxySpecConfigLinkConfigPrimary) *string {
		if v == nil {
			return nil
		}
		return v.CertSecret
	}).(pulumi.StringPtrOutput)
}

// ProxyLimits is used for storing the various types of limits applied for a particular proxy instance
func (o CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrOutput) Limits() CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxySpecConfigLinkConfigPrimary) *CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimits {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrOutput)
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrOutput) SkipCertificateValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxySpecConfigLinkConfigPrimary) *bool {
		if v == nil {
			return nil
		}
		return v.SkipCertificateValidation
	}).(pulumi.BoolPtrOutput)
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxySpecConfigLinkConfigPrimary) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

// ProxyLimits is used for storing the various types of limits applied for a particular proxy instance
type CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimits struct {
	MaxActiveRead       *int `pulumi:"maxActiveRead"`
	MaxActiveWrite      *int `pulumi:"maxActiveWrite"`
	MaxOutStandingRead  *int `pulumi:"maxOutStandingRead"`
	MaxOutStandingWrite *int `pulumi:"maxOutStandingWrite"`
}

// CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsInput is an input type that accepts CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsArgs and CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsOutput values.
// You can construct a concrete instance of `CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsInput` via:
//
//          CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsArgs{...}
type CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsInput interface {
	pulumi.Input

	ToCSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsOutput() CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsOutput
	ToCSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsOutputWithContext(context.Context) CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsOutput
}

// ProxyLimits is used for storing the various types of limits applied for a particular proxy instance
type CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsArgs struct {
	MaxActiveRead       pulumi.IntPtrInput `pulumi:"maxActiveRead"`
	MaxActiveWrite      pulumi.IntPtrInput `pulumi:"maxActiveWrite"`
	MaxOutStandingRead  pulumi.IntPtrInput `pulumi:"maxOutStandingRead"`
	MaxOutStandingWrite pulumi.IntPtrInput `pulumi:"maxOutStandingWrite"`
}

func (CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimits)(nil)).Elem()
}

func (i CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsArgs) ToCSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsOutput() CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsOutput {
	return i.ToCSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsOutputWithContext(context.Background())
}

func (i CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsArgs) ToCSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsOutput)
}

func (i CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsArgs) ToCSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrOutput() CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrOutput {
	return i.ToCSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsArgs) ToCSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsOutput).ToCSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrOutputWithContext(ctx)
}

// CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrInput is an input type that accepts CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsArgs, CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtr and CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrInput` via:
//
//          CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrOutput() CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrOutput
	ToCSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrOutputWithContext(context.Context) CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrOutput
}

type csipowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrType CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsArgs

func CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtr(v *CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsArgs) CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrInput {
	return (*csipowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrType)(v)
}

func (*csipowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimits)(nil)).Elem()
}

func (i *csipowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrType) ToCSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrOutput() CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrOutput {
	return i.ToCSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrType) ToCSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrOutput)
}

// ProxyLimits is used for storing the various types of limits applied for a particular proxy instance
type CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimits)(nil)).Elem()
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsOutput) ToCSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsOutput() CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsOutput) ToCSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsOutput) ToCSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrOutput() CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrOutput {
	return o.ToCSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsOutput) ToCSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimits) *CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimits {
		return &v
	}).(CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrOutput)
}
func (o CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsOutput) MaxActiveRead() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimits) *int { return v.MaxActiveRead }).(pulumi.IntPtrOutput)
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsOutput) MaxActiveWrite() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimits) *int { return v.MaxActiveWrite }).(pulumi.IntPtrOutput)
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsOutput) MaxOutStandingRead() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimits) *int { return v.MaxOutStandingRead }).(pulumi.IntPtrOutput)
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsOutput) MaxOutStandingWrite() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimits) *int { return v.MaxOutStandingWrite }).(pulumi.IntPtrOutput)
}

type CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimits)(nil)).Elem()
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrOutput) ToCSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrOutput() CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrOutput) ToCSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrOutput) Elem() CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimits) CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimits {
		return *v
	}).(CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsOutput)
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrOutput) MaxActiveRead() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimits) *int {
		if v == nil {
			return nil
		}
		return v.MaxActiveRead
	}).(pulumi.IntPtrOutput)
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrOutput) MaxActiveWrite() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimits) *int {
		if v == nil {
			return nil
		}
		return v.MaxActiveWrite
	}).(pulumi.IntPtrOutput)
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrOutput) MaxOutStandingRead() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimits) *int {
		if v == nil {
			return nil
		}
		return v.MaxOutStandingRead
	}).(pulumi.IntPtrOutput)
}

func (o CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrOutput) MaxOutStandingWrite() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimits) *int {
		if v == nil {
			return nil
		}
		return v.MaxOutStandingWrite
	}).(pulumi.IntPtrOutput)
}

// StandAloneConfig is one of the configuration modes for reverse proxy
type CSIPowerMaxRevProxySpecConfigStandAloneConfig struct {
	ManagementServers []CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServers `pulumi:"managementServers"`
	StorageArrays     []CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArrays     `pulumi:"storageArrays"`
}

// CSIPowerMaxRevProxySpecConfigStandAloneConfigInput is an input type that accepts CSIPowerMaxRevProxySpecConfigStandAloneConfigArgs and CSIPowerMaxRevProxySpecConfigStandAloneConfigOutput values.
// You can construct a concrete instance of `CSIPowerMaxRevProxySpecConfigStandAloneConfigInput` via:
//
//          CSIPowerMaxRevProxySpecConfigStandAloneConfigArgs{...}
type CSIPowerMaxRevProxySpecConfigStandAloneConfigInput interface {
	pulumi.Input

	ToCSIPowerMaxRevProxySpecConfigStandAloneConfigOutput() CSIPowerMaxRevProxySpecConfigStandAloneConfigOutput
	ToCSIPowerMaxRevProxySpecConfigStandAloneConfigOutputWithContext(context.Context) CSIPowerMaxRevProxySpecConfigStandAloneConfigOutput
}

// StandAloneConfig is one of the configuration modes for reverse proxy
type CSIPowerMaxRevProxySpecConfigStandAloneConfigArgs struct {
	ManagementServers CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersArrayInput `pulumi:"managementServers"`
	StorageArrays     CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysArrayInput     `pulumi:"storageArrays"`
}

func (CSIPowerMaxRevProxySpecConfigStandAloneConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxRevProxySpecConfigStandAloneConfig)(nil)).Elem()
}

func (i CSIPowerMaxRevProxySpecConfigStandAloneConfigArgs) ToCSIPowerMaxRevProxySpecConfigStandAloneConfigOutput() CSIPowerMaxRevProxySpecConfigStandAloneConfigOutput {
	return i.ToCSIPowerMaxRevProxySpecConfigStandAloneConfigOutputWithContext(context.Background())
}

func (i CSIPowerMaxRevProxySpecConfigStandAloneConfigArgs) ToCSIPowerMaxRevProxySpecConfigStandAloneConfigOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigStandAloneConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxRevProxySpecConfigStandAloneConfigOutput)
}

func (i CSIPowerMaxRevProxySpecConfigStandAloneConfigArgs) ToCSIPowerMaxRevProxySpecConfigStandAloneConfigPtrOutput() CSIPowerMaxRevProxySpecConfigStandAloneConfigPtrOutput {
	return i.ToCSIPowerMaxRevProxySpecConfigStandAloneConfigPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxRevProxySpecConfigStandAloneConfigArgs) ToCSIPowerMaxRevProxySpecConfigStandAloneConfigPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigStandAloneConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxRevProxySpecConfigStandAloneConfigOutput).ToCSIPowerMaxRevProxySpecConfigStandAloneConfigPtrOutputWithContext(ctx)
}

// CSIPowerMaxRevProxySpecConfigStandAloneConfigPtrInput is an input type that accepts CSIPowerMaxRevProxySpecConfigStandAloneConfigArgs, CSIPowerMaxRevProxySpecConfigStandAloneConfigPtr and CSIPowerMaxRevProxySpecConfigStandAloneConfigPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxRevProxySpecConfigStandAloneConfigPtrInput` via:
//
//          CSIPowerMaxRevProxySpecConfigStandAloneConfigArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxRevProxySpecConfigStandAloneConfigPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxRevProxySpecConfigStandAloneConfigPtrOutput() CSIPowerMaxRevProxySpecConfigStandAloneConfigPtrOutput
	ToCSIPowerMaxRevProxySpecConfigStandAloneConfigPtrOutputWithContext(context.Context) CSIPowerMaxRevProxySpecConfigStandAloneConfigPtrOutput
}

type csipowerMaxRevProxySpecConfigStandAloneConfigPtrType CSIPowerMaxRevProxySpecConfigStandAloneConfigArgs

func CSIPowerMaxRevProxySpecConfigStandAloneConfigPtr(v *CSIPowerMaxRevProxySpecConfigStandAloneConfigArgs) CSIPowerMaxRevProxySpecConfigStandAloneConfigPtrInput {
	return (*csipowerMaxRevProxySpecConfigStandAloneConfigPtrType)(v)
}

func (*csipowerMaxRevProxySpecConfigStandAloneConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxRevProxySpecConfigStandAloneConfig)(nil)).Elem()
}

func (i *csipowerMaxRevProxySpecConfigStandAloneConfigPtrType) ToCSIPowerMaxRevProxySpecConfigStandAloneConfigPtrOutput() CSIPowerMaxRevProxySpecConfigStandAloneConfigPtrOutput {
	return i.ToCSIPowerMaxRevProxySpecConfigStandAloneConfigPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxRevProxySpecConfigStandAloneConfigPtrType) ToCSIPowerMaxRevProxySpecConfigStandAloneConfigPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigStandAloneConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxRevProxySpecConfigStandAloneConfigPtrOutput)
}

// StandAloneConfig is one of the configuration modes for reverse proxy
type CSIPowerMaxRevProxySpecConfigStandAloneConfigOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxRevProxySpecConfigStandAloneConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxRevProxySpecConfigStandAloneConfig)(nil)).Elem()
}

func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigOutput) ToCSIPowerMaxRevProxySpecConfigStandAloneConfigOutput() CSIPowerMaxRevProxySpecConfigStandAloneConfigOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigOutput) ToCSIPowerMaxRevProxySpecConfigStandAloneConfigOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigStandAloneConfigOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigOutput) ToCSIPowerMaxRevProxySpecConfigStandAloneConfigPtrOutput() CSIPowerMaxRevProxySpecConfigStandAloneConfigPtrOutput {
	return o.ToCSIPowerMaxRevProxySpecConfigStandAloneConfigPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigOutput) ToCSIPowerMaxRevProxySpecConfigStandAloneConfigPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigStandAloneConfigPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfigStandAloneConfig) *CSIPowerMaxRevProxySpecConfigStandAloneConfig {
		return &v
	}).(CSIPowerMaxRevProxySpecConfigStandAloneConfigPtrOutput)
}
func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigOutput) ManagementServers() CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfigStandAloneConfig) []CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServers {
		return v.ManagementServers
	}).(CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersArrayOutput)
}

func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigOutput) StorageArrays() CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfigStandAloneConfig) []CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArrays {
		return v.StorageArrays
	}).(CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysArrayOutput)
}

type CSIPowerMaxRevProxySpecConfigStandAloneConfigPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxRevProxySpecConfigStandAloneConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxRevProxySpecConfigStandAloneConfig)(nil)).Elem()
}

func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigPtrOutput) ToCSIPowerMaxRevProxySpecConfigStandAloneConfigPtrOutput() CSIPowerMaxRevProxySpecConfigStandAloneConfigPtrOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigPtrOutput) ToCSIPowerMaxRevProxySpecConfigStandAloneConfigPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigStandAloneConfigPtrOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigPtrOutput) Elem() CSIPowerMaxRevProxySpecConfigStandAloneConfigOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxySpecConfigStandAloneConfig) CSIPowerMaxRevProxySpecConfigStandAloneConfig {
		return *v
	}).(CSIPowerMaxRevProxySpecConfigStandAloneConfigOutput)
}

func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigPtrOutput) ManagementServers() CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersArrayOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxySpecConfigStandAloneConfig) []CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServers {
		if v == nil {
			return nil
		}
		return v.ManagementServers
	}).(CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersArrayOutput)
}

func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigPtrOutput) StorageArrays() CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysArrayOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxySpecConfigStandAloneConfig) []CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArrays {
		if v == nil {
			return nil
		}
		return v.StorageArrays
	}).(CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysArrayOutput)
}

// ManagementServerConfig - represents a management server configuration for the management server
type CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServers struct {
	ArrayCredentialSecret *string `pulumi:"arrayCredentialSecret"`
	CertSecret            *string `pulumi:"certSecret"`
	// ProxyLimits is used for storing the various types of limits applied for a particular proxy instance
	Limits                    *CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimits `pulumi:"limits"`
	SkipCertificateValidation *bool                                                                 `pulumi:"skipCertificateValidation"`
	Url                       string                                                                `pulumi:"url"`
}

// CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersInput is an input type that accepts CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersArgs and CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersOutput values.
// You can construct a concrete instance of `CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersInput` via:
//
//          CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersArgs{...}
type CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersInput interface {
	pulumi.Input

	ToCSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersOutput() CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersOutput
	ToCSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersOutputWithContext(context.Context) CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersOutput
}

// ManagementServerConfig - represents a management server configuration for the management server
type CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersArgs struct {
	ArrayCredentialSecret pulumi.StringPtrInput `pulumi:"arrayCredentialSecret"`
	CertSecret            pulumi.StringPtrInput `pulumi:"certSecret"`
	// ProxyLimits is used for storing the various types of limits applied for a particular proxy instance
	Limits                    CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrInput `pulumi:"limits"`
	SkipCertificateValidation pulumi.BoolPtrInput                                                          `pulumi:"skipCertificateValidation"`
	Url                       pulumi.StringInput                                                           `pulumi:"url"`
}

func (CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServers)(nil)).Elem()
}

func (i CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersArgs) ToCSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersOutput() CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersOutput {
	return i.ToCSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersOutputWithContext(context.Background())
}

func (i CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersArgs) ToCSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersOutput)
}

// CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersArrayInput is an input type that accepts CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersArray and CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersArrayOutput values.
// You can construct a concrete instance of `CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersArrayInput` via:
//
//          CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersArray{ CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersArgs{...} }
type CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersArrayInput interface {
	pulumi.Input

	ToCSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersArrayOutput() CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersArrayOutput
	ToCSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersArrayOutputWithContext(context.Context) CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersArrayOutput
}

type CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersArray []CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersInput

func (CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServers)(nil)).Elem()
}

func (i CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersArray) ToCSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersArrayOutput() CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersArrayOutput {
	return i.ToCSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersArrayOutputWithContext(context.Background())
}

func (i CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersArray) ToCSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersArrayOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersArrayOutput)
}

// ManagementServerConfig - represents a management server configuration for the management server
type CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServers)(nil)).Elem()
}

func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersOutput) ToCSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersOutput() CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersOutput) ToCSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersOutput) ArrayCredentialSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServers) *string {
		return v.ArrayCredentialSecret
	}).(pulumi.StringPtrOutput)
}

func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersOutput) CertSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServers) *string { return v.CertSecret }).(pulumi.StringPtrOutput)
}

// ProxyLimits is used for storing the various types of limits applied for a particular proxy instance
func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersOutput) Limits() CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServers) *CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimits {
		return v.Limits
	}).(CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrOutput)
}

func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersOutput) SkipCertificateValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServers) *bool {
		return v.SkipCertificateValidation
	}).(pulumi.BoolPtrOutput)
}

func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServers) string { return v.Url }).(pulumi.StringOutput)
}

type CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersArrayOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServers)(nil)).Elem()
}

func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersArrayOutput) ToCSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersArrayOutput() CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersArrayOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersArrayOutput) ToCSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersArrayOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersArrayOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersArrayOutput) Index(i pulumi.IntInput) CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServers {
		return vs[0].([]CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServers)[vs[1].(int)]
	}).(CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersOutput)
}

// ProxyLimits is used for storing the various types of limits applied for a particular proxy instance
type CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimits struct {
	MaxActiveRead       *int `pulumi:"maxActiveRead"`
	MaxActiveWrite      *int `pulumi:"maxActiveWrite"`
	MaxOutStandingRead  *int `pulumi:"maxOutStandingRead"`
	MaxOutStandingWrite *int `pulumi:"maxOutStandingWrite"`
}

// CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsInput is an input type that accepts CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsArgs and CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsOutput values.
// You can construct a concrete instance of `CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsInput` via:
//
//          CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsArgs{...}
type CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsInput interface {
	pulumi.Input

	ToCSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsOutput() CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsOutput
	ToCSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsOutputWithContext(context.Context) CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsOutput
}

// ProxyLimits is used for storing the various types of limits applied for a particular proxy instance
type CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsArgs struct {
	MaxActiveRead       pulumi.IntPtrInput `pulumi:"maxActiveRead"`
	MaxActiveWrite      pulumi.IntPtrInput `pulumi:"maxActiveWrite"`
	MaxOutStandingRead  pulumi.IntPtrInput `pulumi:"maxOutStandingRead"`
	MaxOutStandingWrite pulumi.IntPtrInput `pulumi:"maxOutStandingWrite"`
}

func (CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimits)(nil)).Elem()
}

func (i CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsArgs) ToCSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsOutput() CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsOutput {
	return i.ToCSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsOutputWithContext(context.Background())
}

func (i CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsArgs) ToCSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsOutput)
}

func (i CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsArgs) ToCSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrOutput() CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrOutput {
	return i.ToCSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsArgs) ToCSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsOutput).ToCSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrOutputWithContext(ctx)
}

// CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrInput is an input type that accepts CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsArgs, CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtr and CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrInput` via:
//
//          CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrOutput() CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrOutput
	ToCSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrOutputWithContext(context.Context) CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrOutput
}

type csipowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrType CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsArgs

func CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtr(v *CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsArgs) CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrInput {
	return (*csipowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrType)(v)
}

func (*csipowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimits)(nil)).Elem()
}

func (i *csipowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrType) ToCSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrOutput() CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrOutput {
	return i.ToCSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrType) ToCSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrOutput)
}

// ProxyLimits is used for storing the various types of limits applied for a particular proxy instance
type CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimits)(nil)).Elem()
}

func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsOutput) ToCSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsOutput() CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsOutput) ToCSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsOutput) ToCSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrOutput() CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrOutput {
	return o.ToCSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsOutput) ToCSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimits) *CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimits {
		return &v
	}).(CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrOutput)
}
func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsOutput) MaxActiveRead() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimits) *int {
		return v.MaxActiveRead
	}).(pulumi.IntPtrOutput)
}

func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsOutput) MaxActiveWrite() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimits) *int {
		return v.MaxActiveWrite
	}).(pulumi.IntPtrOutput)
}

func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsOutput) MaxOutStandingRead() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimits) *int {
		return v.MaxOutStandingRead
	}).(pulumi.IntPtrOutput)
}

func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsOutput) MaxOutStandingWrite() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimits) *int {
		return v.MaxOutStandingWrite
	}).(pulumi.IntPtrOutput)
}

type CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimits)(nil)).Elem()
}

func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrOutput) ToCSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrOutput() CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrOutput) ToCSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrOutput) Elem() CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimits) CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimits {
		return *v
	}).(CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsOutput)
}

func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrOutput) MaxActiveRead() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimits) *int {
		if v == nil {
			return nil
		}
		return v.MaxActiveRead
	}).(pulumi.IntPtrOutput)
}

func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrOutput) MaxActiveWrite() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimits) *int {
		if v == nil {
			return nil
		}
		return v.MaxActiveWrite
	}).(pulumi.IntPtrOutput)
}

func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrOutput) MaxOutStandingRead() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimits) *int {
		if v == nil {
			return nil
		}
		return v.MaxOutStandingRead
	}).(pulumi.IntPtrOutput)
}

func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrOutput) MaxOutStandingWrite() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimits) *int {
		if v == nil {
			return nil
		}
		return v.MaxOutStandingWrite
	}).(pulumi.IntPtrOutput)
}

// StorageArrayConfig represents a storage array managed by reverse proxy
type CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArrays struct {
	BackupURL              *string  `pulumi:"backupURL"`
	PrimaryURL             string   `pulumi:"primaryURL"`
	ProxyCredentialSecrets []string `pulumi:"proxyCredentialSecrets"`
	StorageArrayId         string   `pulumi:"storageArrayId"`
}

// CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysInput is an input type that accepts CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysArgs and CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysOutput values.
// You can construct a concrete instance of `CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysInput` via:
//
//          CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysArgs{...}
type CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysInput interface {
	pulumi.Input

	ToCSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysOutput() CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysOutput
	ToCSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysOutputWithContext(context.Context) CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysOutput
}

// StorageArrayConfig represents a storage array managed by reverse proxy
type CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysArgs struct {
	BackupURL              pulumi.StringPtrInput   `pulumi:"backupURL"`
	PrimaryURL             pulumi.StringInput      `pulumi:"primaryURL"`
	ProxyCredentialSecrets pulumi.StringArrayInput `pulumi:"proxyCredentialSecrets"`
	StorageArrayId         pulumi.StringInput      `pulumi:"storageArrayId"`
}

func (CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArrays)(nil)).Elem()
}

func (i CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysArgs) ToCSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysOutput() CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysOutput {
	return i.ToCSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysOutputWithContext(context.Background())
}

func (i CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysArgs) ToCSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysOutput)
}

// CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysArrayInput is an input type that accepts CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysArray and CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysArrayOutput values.
// You can construct a concrete instance of `CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysArrayInput` via:
//
//          CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysArray{ CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysArgs{...} }
type CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysArrayInput interface {
	pulumi.Input

	ToCSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysArrayOutput() CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysArrayOutput
	ToCSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysArrayOutputWithContext(context.Context) CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysArrayOutput
}

type CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysArray []CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysInput

func (CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArrays)(nil)).Elem()
}

func (i CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysArray) ToCSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysArrayOutput() CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysArrayOutput {
	return i.ToCSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysArrayOutputWithContext(context.Background())
}

func (i CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysArray) ToCSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysArrayOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysArrayOutput)
}

// StorageArrayConfig represents a storage array managed by reverse proxy
type CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArrays)(nil)).Elem()
}

func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysOutput) ToCSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysOutput() CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysOutput) ToCSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysOutput) BackupURL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArrays) *string { return v.BackupURL }).(pulumi.StringPtrOutput)
}

func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysOutput) PrimaryURL() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArrays) string { return v.PrimaryURL }).(pulumi.StringOutput)
}

func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysOutput) ProxyCredentialSecrets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArrays) []string {
		return v.ProxyCredentialSecrets
	}).(pulumi.StringArrayOutput)
}

func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysOutput) StorageArrayId() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArrays) string { return v.StorageArrayId }).(pulumi.StringOutput)
}

type CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysArrayOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArrays)(nil)).Elem()
}

func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysArrayOutput) ToCSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysArrayOutput() CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysArrayOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysArrayOutput) ToCSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysArrayOutputWithContext(ctx context.Context) CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysArrayOutput {
	return o
}

func (o CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysArrayOutput) Index(i pulumi.IntInput) CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArrays {
		return vs[0].([]CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArrays)[vs[1].(int)]
	}).(CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysOutput)
}

// CSIPowerMaxRevProxyStatus defines the observed state of CSIPowerMaxRevProxy
type CSIPowerMaxRevProxyStatus struct {
	// LastUpdate is the last updated state of the driver
	LastUpdate *CSIPowerMaxRevProxyStatusLastUpdate `pulumi:"lastUpdate"`
	// DriverHash is a hash of the driver specification
	ProxyHash *int `pulumi:"proxyHash"`
	// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html ProxyStatus is the status of proxy pod
	ProxyStatus *CSIPowerMaxRevProxyStatusProxyStatus `pulumi:"proxyStatus"`
	// State is the state of the driver installation
	State *string `pulumi:"state"`
}

// CSIPowerMaxRevProxyStatusInput is an input type that accepts CSIPowerMaxRevProxyStatusArgs and CSIPowerMaxRevProxyStatusOutput values.
// You can construct a concrete instance of `CSIPowerMaxRevProxyStatusInput` via:
//
//          CSIPowerMaxRevProxyStatusArgs{...}
type CSIPowerMaxRevProxyStatusInput interface {
	pulumi.Input

	ToCSIPowerMaxRevProxyStatusOutput() CSIPowerMaxRevProxyStatusOutput
	ToCSIPowerMaxRevProxyStatusOutputWithContext(context.Context) CSIPowerMaxRevProxyStatusOutput
}

// CSIPowerMaxRevProxyStatus defines the observed state of CSIPowerMaxRevProxy
type CSIPowerMaxRevProxyStatusArgs struct {
	// LastUpdate is the last updated state of the driver
	LastUpdate CSIPowerMaxRevProxyStatusLastUpdatePtrInput `pulumi:"lastUpdate"`
	// DriverHash is a hash of the driver specification
	ProxyHash pulumi.IntPtrInput `pulumi:"proxyHash"`
	// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html ProxyStatus is the status of proxy pod
	ProxyStatus CSIPowerMaxRevProxyStatusProxyStatusPtrInput `pulumi:"proxyStatus"`
	// State is the state of the driver installation
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (CSIPowerMaxRevProxyStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxRevProxyStatus)(nil)).Elem()
}

func (i CSIPowerMaxRevProxyStatusArgs) ToCSIPowerMaxRevProxyStatusOutput() CSIPowerMaxRevProxyStatusOutput {
	return i.ToCSIPowerMaxRevProxyStatusOutputWithContext(context.Background())
}

func (i CSIPowerMaxRevProxyStatusArgs) ToCSIPowerMaxRevProxyStatusOutputWithContext(ctx context.Context) CSIPowerMaxRevProxyStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxRevProxyStatusOutput)
}

func (i CSIPowerMaxRevProxyStatusArgs) ToCSIPowerMaxRevProxyStatusPtrOutput() CSIPowerMaxRevProxyStatusPtrOutput {
	return i.ToCSIPowerMaxRevProxyStatusPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxRevProxyStatusArgs) ToCSIPowerMaxRevProxyStatusPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxyStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxRevProxyStatusOutput).ToCSIPowerMaxRevProxyStatusPtrOutputWithContext(ctx)
}

// CSIPowerMaxRevProxyStatusPtrInput is an input type that accepts CSIPowerMaxRevProxyStatusArgs, CSIPowerMaxRevProxyStatusPtr and CSIPowerMaxRevProxyStatusPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxRevProxyStatusPtrInput` via:
//
//          CSIPowerMaxRevProxyStatusArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxRevProxyStatusPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxRevProxyStatusPtrOutput() CSIPowerMaxRevProxyStatusPtrOutput
	ToCSIPowerMaxRevProxyStatusPtrOutputWithContext(context.Context) CSIPowerMaxRevProxyStatusPtrOutput
}

type csipowerMaxRevProxyStatusPtrType CSIPowerMaxRevProxyStatusArgs

func CSIPowerMaxRevProxyStatusPtr(v *CSIPowerMaxRevProxyStatusArgs) CSIPowerMaxRevProxyStatusPtrInput {
	return (*csipowerMaxRevProxyStatusPtrType)(v)
}

func (*csipowerMaxRevProxyStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxRevProxyStatus)(nil)).Elem()
}

func (i *csipowerMaxRevProxyStatusPtrType) ToCSIPowerMaxRevProxyStatusPtrOutput() CSIPowerMaxRevProxyStatusPtrOutput {
	return i.ToCSIPowerMaxRevProxyStatusPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxRevProxyStatusPtrType) ToCSIPowerMaxRevProxyStatusPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxyStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxRevProxyStatusPtrOutput)
}

// CSIPowerMaxRevProxyStatus defines the observed state of CSIPowerMaxRevProxy
type CSIPowerMaxRevProxyStatusOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxRevProxyStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxRevProxyStatus)(nil)).Elem()
}

func (o CSIPowerMaxRevProxyStatusOutput) ToCSIPowerMaxRevProxyStatusOutput() CSIPowerMaxRevProxyStatusOutput {
	return o
}

func (o CSIPowerMaxRevProxyStatusOutput) ToCSIPowerMaxRevProxyStatusOutputWithContext(ctx context.Context) CSIPowerMaxRevProxyStatusOutput {
	return o
}

func (o CSIPowerMaxRevProxyStatusOutput) ToCSIPowerMaxRevProxyStatusPtrOutput() CSIPowerMaxRevProxyStatusPtrOutput {
	return o.ToCSIPowerMaxRevProxyStatusPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxRevProxyStatusOutput) ToCSIPowerMaxRevProxyStatusPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxyStatusPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxyStatus) *CSIPowerMaxRevProxyStatus {
		return &v
	}).(CSIPowerMaxRevProxyStatusPtrOutput)
}

// LastUpdate is the last updated state of the driver
func (o CSIPowerMaxRevProxyStatusOutput) LastUpdate() CSIPowerMaxRevProxyStatusLastUpdatePtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxyStatus) *CSIPowerMaxRevProxyStatusLastUpdate { return v.LastUpdate }).(CSIPowerMaxRevProxyStatusLastUpdatePtrOutput)
}

// DriverHash is a hash of the driver specification
func (o CSIPowerMaxRevProxyStatusOutput) ProxyHash() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxyStatus) *int { return v.ProxyHash }).(pulumi.IntPtrOutput)
}

// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html ProxyStatus is the status of proxy pod
func (o CSIPowerMaxRevProxyStatusOutput) ProxyStatus() CSIPowerMaxRevProxyStatusProxyStatusPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxyStatus) *CSIPowerMaxRevProxyStatusProxyStatus { return v.ProxyStatus }).(CSIPowerMaxRevProxyStatusProxyStatusPtrOutput)
}

// State is the state of the driver installation
func (o CSIPowerMaxRevProxyStatusOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxyStatus) *string { return v.State }).(pulumi.StringPtrOutput)
}

type CSIPowerMaxRevProxyStatusPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxRevProxyStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxRevProxyStatus)(nil)).Elem()
}

func (o CSIPowerMaxRevProxyStatusPtrOutput) ToCSIPowerMaxRevProxyStatusPtrOutput() CSIPowerMaxRevProxyStatusPtrOutput {
	return o
}

func (o CSIPowerMaxRevProxyStatusPtrOutput) ToCSIPowerMaxRevProxyStatusPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxyStatusPtrOutput {
	return o
}

func (o CSIPowerMaxRevProxyStatusPtrOutput) Elem() CSIPowerMaxRevProxyStatusOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxyStatus) CSIPowerMaxRevProxyStatus { return *v }).(CSIPowerMaxRevProxyStatusOutput)
}

// LastUpdate is the last updated state of the driver
func (o CSIPowerMaxRevProxyStatusPtrOutput) LastUpdate() CSIPowerMaxRevProxyStatusLastUpdatePtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxyStatus) *CSIPowerMaxRevProxyStatusLastUpdate {
		if v == nil {
			return nil
		}
		return v.LastUpdate
	}).(CSIPowerMaxRevProxyStatusLastUpdatePtrOutput)
}

// DriverHash is a hash of the driver specification
func (o CSIPowerMaxRevProxyStatusPtrOutput) ProxyHash() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxyStatus) *int {
		if v == nil {
			return nil
		}
		return v.ProxyHash
	}).(pulumi.IntPtrOutput)
}

// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html ProxyStatus is the status of proxy pod
func (o CSIPowerMaxRevProxyStatusPtrOutput) ProxyStatus() CSIPowerMaxRevProxyStatusProxyStatusPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxyStatus) *CSIPowerMaxRevProxyStatusProxyStatus {
		if v == nil {
			return nil
		}
		return v.ProxyStatus
	}).(CSIPowerMaxRevProxyStatusProxyStatusPtrOutput)
}

// State is the state of the driver installation
func (o CSIPowerMaxRevProxyStatusPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxyStatus) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// LastUpdate is the last updated state of the driver
type CSIPowerMaxRevProxyStatusLastUpdate struct {
	// Condition is the last known condition of the Custom Resource
	Condition *string `pulumi:"condition"`
	// ErrorMessage is the last error message associated with the condition
	ErrorMessage *string `pulumi:"errorMessage"`
	// Time is the time stamp for the last condition update
	Time *string `pulumi:"time"`
}

// CSIPowerMaxRevProxyStatusLastUpdateInput is an input type that accepts CSIPowerMaxRevProxyStatusLastUpdateArgs and CSIPowerMaxRevProxyStatusLastUpdateOutput values.
// You can construct a concrete instance of `CSIPowerMaxRevProxyStatusLastUpdateInput` via:
//
//          CSIPowerMaxRevProxyStatusLastUpdateArgs{...}
type CSIPowerMaxRevProxyStatusLastUpdateInput interface {
	pulumi.Input

	ToCSIPowerMaxRevProxyStatusLastUpdateOutput() CSIPowerMaxRevProxyStatusLastUpdateOutput
	ToCSIPowerMaxRevProxyStatusLastUpdateOutputWithContext(context.Context) CSIPowerMaxRevProxyStatusLastUpdateOutput
}

// LastUpdate is the last updated state of the driver
type CSIPowerMaxRevProxyStatusLastUpdateArgs struct {
	// Condition is the last known condition of the Custom Resource
	Condition pulumi.StringPtrInput `pulumi:"condition"`
	// ErrorMessage is the last error message associated with the condition
	ErrorMessage pulumi.StringPtrInput `pulumi:"errorMessage"`
	// Time is the time stamp for the last condition update
	Time pulumi.StringPtrInput `pulumi:"time"`
}

func (CSIPowerMaxRevProxyStatusLastUpdateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxRevProxyStatusLastUpdate)(nil)).Elem()
}

func (i CSIPowerMaxRevProxyStatusLastUpdateArgs) ToCSIPowerMaxRevProxyStatusLastUpdateOutput() CSIPowerMaxRevProxyStatusLastUpdateOutput {
	return i.ToCSIPowerMaxRevProxyStatusLastUpdateOutputWithContext(context.Background())
}

func (i CSIPowerMaxRevProxyStatusLastUpdateArgs) ToCSIPowerMaxRevProxyStatusLastUpdateOutputWithContext(ctx context.Context) CSIPowerMaxRevProxyStatusLastUpdateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxRevProxyStatusLastUpdateOutput)
}

func (i CSIPowerMaxRevProxyStatusLastUpdateArgs) ToCSIPowerMaxRevProxyStatusLastUpdatePtrOutput() CSIPowerMaxRevProxyStatusLastUpdatePtrOutput {
	return i.ToCSIPowerMaxRevProxyStatusLastUpdatePtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxRevProxyStatusLastUpdateArgs) ToCSIPowerMaxRevProxyStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxyStatusLastUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxRevProxyStatusLastUpdateOutput).ToCSIPowerMaxRevProxyStatusLastUpdatePtrOutputWithContext(ctx)
}

// CSIPowerMaxRevProxyStatusLastUpdatePtrInput is an input type that accepts CSIPowerMaxRevProxyStatusLastUpdateArgs, CSIPowerMaxRevProxyStatusLastUpdatePtr and CSIPowerMaxRevProxyStatusLastUpdatePtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxRevProxyStatusLastUpdatePtrInput` via:
//
//          CSIPowerMaxRevProxyStatusLastUpdateArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxRevProxyStatusLastUpdatePtrInput interface {
	pulumi.Input

	ToCSIPowerMaxRevProxyStatusLastUpdatePtrOutput() CSIPowerMaxRevProxyStatusLastUpdatePtrOutput
	ToCSIPowerMaxRevProxyStatusLastUpdatePtrOutputWithContext(context.Context) CSIPowerMaxRevProxyStatusLastUpdatePtrOutput
}

type csipowerMaxRevProxyStatusLastUpdatePtrType CSIPowerMaxRevProxyStatusLastUpdateArgs

func CSIPowerMaxRevProxyStatusLastUpdatePtr(v *CSIPowerMaxRevProxyStatusLastUpdateArgs) CSIPowerMaxRevProxyStatusLastUpdatePtrInput {
	return (*csipowerMaxRevProxyStatusLastUpdatePtrType)(v)
}

func (*csipowerMaxRevProxyStatusLastUpdatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxRevProxyStatusLastUpdate)(nil)).Elem()
}

func (i *csipowerMaxRevProxyStatusLastUpdatePtrType) ToCSIPowerMaxRevProxyStatusLastUpdatePtrOutput() CSIPowerMaxRevProxyStatusLastUpdatePtrOutput {
	return i.ToCSIPowerMaxRevProxyStatusLastUpdatePtrOutputWithContext(context.Background())
}

func (i *csipowerMaxRevProxyStatusLastUpdatePtrType) ToCSIPowerMaxRevProxyStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxyStatusLastUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxRevProxyStatusLastUpdatePtrOutput)
}

// LastUpdate is the last updated state of the driver
type CSIPowerMaxRevProxyStatusLastUpdateOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxRevProxyStatusLastUpdateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxRevProxyStatusLastUpdate)(nil)).Elem()
}

func (o CSIPowerMaxRevProxyStatusLastUpdateOutput) ToCSIPowerMaxRevProxyStatusLastUpdateOutput() CSIPowerMaxRevProxyStatusLastUpdateOutput {
	return o
}

func (o CSIPowerMaxRevProxyStatusLastUpdateOutput) ToCSIPowerMaxRevProxyStatusLastUpdateOutputWithContext(ctx context.Context) CSIPowerMaxRevProxyStatusLastUpdateOutput {
	return o
}

func (o CSIPowerMaxRevProxyStatusLastUpdateOutput) ToCSIPowerMaxRevProxyStatusLastUpdatePtrOutput() CSIPowerMaxRevProxyStatusLastUpdatePtrOutput {
	return o.ToCSIPowerMaxRevProxyStatusLastUpdatePtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxRevProxyStatusLastUpdateOutput) ToCSIPowerMaxRevProxyStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxyStatusLastUpdatePtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxyStatusLastUpdate) *CSIPowerMaxRevProxyStatusLastUpdate {
		return &v
	}).(CSIPowerMaxRevProxyStatusLastUpdatePtrOutput)
}

// Condition is the last known condition of the Custom Resource
func (o CSIPowerMaxRevProxyStatusLastUpdateOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxyStatusLastUpdate) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

// ErrorMessage is the last error message associated with the condition
func (o CSIPowerMaxRevProxyStatusLastUpdateOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxyStatusLastUpdate) *string { return v.ErrorMessage }).(pulumi.StringPtrOutput)
}

// Time is the time stamp for the last condition update
func (o CSIPowerMaxRevProxyStatusLastUpdateOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxyStatusLastUpdate) *string { return v.Time }).(pulumi.StringPtrOutput)
}

type CSIPowerMaxRevProxyStatusLastUpdatePtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxRevProxyStatusLastUpdatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxRevProxyStatusLastUpdate)(nil)).Elem()
}

func (o CSIPowerMaxRevProxyStatusLastUpdatePtrOutput) ToCSIPowerMaxRevProxyStatusLastUpdatePtrOutput() CSIPowerMaxRevProxyStatusLastUpdatePtrOutput {
	return o
}

func (o CSIPowerMaxRevProxyStatusLastUpdatePtrOutput) ToCSIPowerMaxRevProxyStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxyStatusLastUpdatePtrOutput {
	return o
}

func (o CSIPowerMaxRevProxyStatusLastUpdatePtrOutput) Elem() CSIPowerMaxRevProxyStatusLastUpdateOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxyStatusLastUpdate) CSIPowerMaxRevProxyStatusLastUpdate { return *v }).(CSIPowerMaxRevProxyStatusLastUpdateOutput)
}

// Condition is the last known condition of the Custom Resource
func (o CSIPowerMaxRevProxyStatusLastUpdatePtrOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxyStatusLastUpdate) *string {
		if v == nil {
			return nil
		}
		return v.Condition
	}).(pulumi.StringPtrOutput)
}

// ErrorMessage is the last error message associated with the condition
func (o CSIPowerMaxRevProxyStatusLastUpdatePtrOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxyStatusLastUpdate) *string {
		if v == nil {
			return nil
		}
		return v.ErrorMessage
	}).(pulumi.StringPtrOutput)
}

// Time is the time stamp for the last condition update
func (o CSIPowerMaxRevProxyStatusLastUpdatePtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxyStatusLastUpdate) *string {
		if v == nil {
			return nil
		}
		return v.Time
	}).(pulumi.StringPtrOutput)
}

// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html ProxyStatus is the status of proxy pod
type CSIPowerMaxRevProxyStatusProxyStatus struct {
	Available []string `pulumi:"available"`
	Ready     []string `pulumi:"ready"`
	Starting  []string `pulumi:"starting"`
	Stopped   []string `pulumi:"stopped"`
}

// CSIPowerMaxRevProxyStatusProxyStatusInput is an input type that accepts CSIPowerMaxRevProxyStatusProxyStatusArgs and CSIPowerMaxRevProxyStatusProxyStatusOutput values.
// You can construct a concrete instance of `CSIPowerMaxRevProxyStatusProxyStatusInput` via:
//
//          CSIPowerMaxRevProxyStatusProxyStatusArgs{...}
type CSIPowerMaxRevProxyStatusProxyStatusInput interface {
	pulumi.Input

	ToCSIPowerMaxRevProxyStatusProxyStatusOutput() CSIPowerMaxRevProxyStatusProxyStatusOutput
	ToCSIPowerMaxRevProxyStatusProxyStatusOutputWithContext(context.Context) CSIPowerMaxRevProxyStatusProxyStatusOutput
}

// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html ProxyStatus is the status of proxy pod
type CSIPowerMaxRevProxyStatusProxyStatusArgs struct {
	Available pulumi.StringArrayInput `pulumi:"available"`
	Ready     pulumi.StringArrayInput `pulumi:"ready"`
	Starting  pulumi.StringArrayInput `pulumi:"starting"`
	Stopped   pulumi.StringArrayInput `pulumi:"stopped"`
}

func (CSIPowerMaxRevProxyStatusProxyStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxRevProxyStatusProxyStatus)(nil)).Elem()
}

func (i CSIPowerMaxRevProxyStatusProxyStatusArgs) ToCSIPowerMaxRevProxyStatusProxyStatusOutput() CSIPowerMaxRevProxyStatusProxyStatusOutput {
	return i.ToCSIPowerMaxRevProxyStatusProxyStatusOutputWithContext(context.Background())
}

func (i CSIPowerMaxRevProxyStatusProxyStatusArgs) ToCSIPowerMaxRevProxyStatusProxyStatusOutputWithContext(ctx context.Context) CSIPowerMaxRevProxyStatusProxyStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxRevProxyStatusProxyStatusOutput)
}

func (i CSIPowerMaxRevProxyStatusProxyStatusArgs) ToCSIPowerMaxRevProxyStatusProxyStatusPtrOutput() CSIPowerMaxRevProxyStatusProxyStatusPtrOutput {
	return i.ToCSIPowerMaxRevProxyStatusProxyStatusPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxRevProxyStatusProxyStatusArgs) ToCSIPowerMaxRevProxyStatusProxyStatusPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxyStatusProxyStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxRevProxyStatusProxyStatusOutput).ToCSIPowerMaxRevProxyStatusProxyStatusPtrOutputWithContext(ctx)
}

// CSIPowerMaxRevProxyStatusProxyStatusPtrInput is an input type that accepts CSIPowerMaxRevProxyStatusProxyStatusArgs, CSIPowerMaxRevProxyStatusProxyStatusPtr and CSIPowerMaxRevProxyStatusProxyStatusPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxRevProxyStatusProxyStatusPtrInput` via:
//
//          CSIPowerMaxRevProxyStatusProxyStatusArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxRevProxyStatusProxyStatusPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxRevProxyStatusProxyStatusPtrOutput() CSIPowerMaxRevProxyStatusProxyStatusPtrOutput
	ToCSIPowerMaxRevProxyStatusProxyStatusPtrOutputWithContext(context.Context) CSIPowerMaxRevProxyStatusProxyStatusPtrOutput
}

type csipowerMaxRevProxyStatusProxyStatusPtrType CSIPowerMaxRevProxyStatusProxyStatusArgs

func CSIPowerMaxRevProxyStatusProxyStatusPtr(v *CSIPowerMaxRevProxyStatusProxyStatusArgs) CSIPowerMaxRevProxyStatusProxyStatusPtrInput {
	return (*csipowerMaxRevProxyStatusProxyStatusPtrType)(v)
}

func (*csipowerMaxRevProxyStatusProxyStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxRevProxyStatusProxyStatus)(nil)).Elem()
}

func (i *csipowerMaxRevProxyStatusProxyStatusPtrType) ToCSIPowerMaxRevProxyStatusProxyStatusPtrOutput() CSIPowerMaxRevProxyStatusProxyStatusPtrOutput {
	return i.ToCSIPowerMaxRevProxyStatusProxyStatusPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxRevProxyStatusProxyStatusPtrType) ToCSIPowerMaxRevProxyStatusProxyStatusPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxyStatusProxyStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxRevProxyStatusProxyStatusPtrOutput)
}

// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html ProxyStatus is the status of proxy pod
type CSIPowerMaxRevProxyStatusProxyStatusOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxRevProxyStatusProxyStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxRevProxyStatusProxyStatus)(nil)).Elem()
}

func (o CSIPowerMaxRevProxyStatusProxyStatusOutput) ToCSIPowerMaxRevProxyStatusProxyStatusOutput() CSIPowerMaxRevProxyStatusProxyStatusOutput {
	return o
}

func (o CSIPowerMaxRevProxyStatusProxyStatusOutput) ToCSIPowerMaxRevProxyStatusProxyStatusOutputWithContext(ctx context.Context) CSIPowerMaxRevProxyStatusProxyStatusOutput {
	return o
}

func (o CSIPowerMaxRevProxyStatusProxyStatusOutput) ToCSIPowerMaxRevProxyStatusProxyStatusPtrOutput() CSIPowerMaxRevProxyStatusProxyStatusPtrOutput {
	return o.ToCSIPowerMaxRevProxyStatusProxyStatusPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxRevProxyStatusProxyStatusOutput) ToCSIPowerMaxRevProxyStatusProxyStatusPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxyStatusProxyStatusPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxyStatusProxyStatus) *CSIPowerMaxRevProxyStatusProxyStatus {
		return &v
	}).(CSIPowerMaxRevProxyStatusProxyStatusPtrOutput)
}
func (o CSIPowerMaxRevProxyStatusProxyStatusOutput) Available() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxyStatusProxyStatus) []string { return v.Available }).(pulumi.StringArrayOutput)
}

func (o CSIPowerMaxRevProxyStatusProxyStatusOutput) Ready() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxyStatusProxyStatus) []string { return v.Ready }).(pulumi.StringArrayOutput)
}

func (o CSIPowerMaxRevProxyStatusProxyStatusOutput) Starting() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxyStatusProxyStatus) []string { return v.Starting }).(pulumi.StringArrayOutput)
}

func (o CSIPowerMaxRevProxyStatusProxyStatusOutput) Stopped() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxRevProxyStatusProxyStatus) []string { return v.Stopped }).(pulumi.StringArrayOutput)
}

type CSIPowerMaxRevProxyStatusProxyStatusPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxRevProxyStatusProxyStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxRevProxyStatusProxyStatus)(nil)).Elem()
}

func (o CSIPowerMaxRevProxyStatusProxyStatusPtrOutput) ToCSIPowerMaxRevProxyStatusProxyStatusPtrOutput() CSIPowerMaxRevProxyStatusProxyStatusPtrOutput {
	return o
}

func (o CSIPowerMaxRevProxyStatusProxyStatusPtrOutput) ToCSIPowerMaxRevProxyStatusProxyStatusPtrOutputWithContext(ctx context.Context) CSIPowerMaxRevProxyStatusProxyStatusPtrOutput {
	return o
}

func (o CSIPowerMaxRevProxyStatusProxyStatusPtrOutput) Elem() CSIPowerMaxRevProxyStatusProxyStatusOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxyStatusProxyStatus) CSIPowerMaxRevProxyStatusProxyStatus { return *v }).(CSIPowerMaxRevProxyStatusProxyStatusOutput)
}

func (o CSIPowerMaxRevProxyStatusProxyStatusPtrOutput) Available() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxyStatusProxyStatus) []string {
		if v == nil {
			return nil
		}
		return v.Available
	}).(pulumi.StringArrayOutput)
}

func (o CSIPowerMaxRevProxyStatusProxyStatusPtrOutput) Ready() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxyStatusProxyStatus) []string {
		if v == nil {
			return nil
		}
		return v.Ready
	}).(pulumi.StringArrayOutput)
}

func (o CSIPowerMaxRevProxyStatusProxyStatusPtrOutput) Starting() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxyStatusProxyStatus) []string {
		if v == nil {
			return nil
		}
		return v.Starting
	}).(pulumi.StringArrayOutput)
}

func (o CSIPowerMaxRevProxyStatusProxyStatusPtrOutput) Stopped() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIPowerMaxRevProxyStatusProxyStatus) []string {
		if v == nil {
			return nil
		}
		return v.Stopped
	}).(pulumi.StringArrayOutput)
}

// CSIPowerMaxSpec defines the desired state of CSIPowerMax
type CSIPowerMaxSpec struct {
	// Driver is the specification for the CSI PowerMax Driver
	Driver CSIPowerMaxSpecDriver `pulumi:"driver"`
}

// CSIPowerMaxSpecInput is an input type that accepts CSIPowerMaxSpecArgs and CSIPowerMaxSpecOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecInput` via:
//
//          CSIPowerMaxSpecArgs{...}
type CSIPowerMaxSpecInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecOutput() CSIPowerMaxSpecOutput
	ToCSIPowerMaxSpecOutputWithContext(context.Context) CSIPowerMaxSpecOutput
}

// CSIPowerMaxSpec defines the desired state of CSIPowerMax
type CSIPowerMaxSpecArgs struct {
	// Driver is the specification for the CSI PowerMax Driver
	Driver CSIPowerMaxSpecDriverInput `pulumi:"driver"`
}

func (CSIPowerMaxSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpec)(nil)).Elem()
}

func (i CSIPowerMaxSpecArgs) ToCSIPowerMaxSpecOutput() CSIPowerMaxSpecOutput {
	return i.ToCSIPowerMaxSpecOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecArgs) ToCSIPowerMaxSpecOutputWithContext(ctx context.Context) CSIPowerMaxSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecOutput)
}

func (i CSIPowerMaxSpecArgs) ToCSIPowerMaxSpecPtrOutput() CSIPowerMaxSpecPtrOutput {
	return i.ToCSIPowerMaxSpecPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecArgs) ToCSIPowerMaxSpecPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecOutput).ToCSIPowerMaxSpecPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecPtrInput is an input type that accepts CSIPowerMaxSpecArgs, CSIPowerMaxSpecPtr and CSIPowerMaxSpecPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecPtrInput` via:
//
//          CSIPowerMaxSpecArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecPtrOutput() CSIPowerMaxSpecPtrOutput
	ToCSIPowerMaxSpecPtrOutputWithContext(context.Context) CSIPowerMaxSpecPtrOutput
}

type csipowerMaxSpecPtrType CSIPowerMaxSpecArgs

func CSIPowerMaxSpecPtr(v *CSIPowerMaxSpecArgs) CSIPowerMaxSpecPtrInput {
	return (*csipowerMaxSpecPtrType)(v)
}

func (*csipowerMaxSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpec)(nil)).Elem()
}

func (i *csipowerMaxSpecPtrType) ToCSIPowerMaxSpecPtrOutput() CSIPowerMaxSpecPtrOutput {
	return i.ToCSIPowerMaxSpecPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecPtrType) ToCSIPowerMaxSpecPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecPtrOutput)
}

// CSIPowerMaxSpec defines the desired state of CSIPowerMax
type CSIPowerMaxSpecOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpec)(nil)).Elem()
}

func (o CSIPowerMaxSpecOutput) ToCSIPowerMaxSpecOutput() CSIPowerMaxSpecOutput {
	return o
}

func (o CSIPowerMaxSpecOutput) ToCSIPowerMaxSpecOutputWithContext(ctx context.Context) CSIPowerMaxSpecOutput {
	return o
}

func (o CSIPowerMaxSpecOutput) ToCSIPowerMaxSpecPtrOutput() CSIPowerMaxSpecPtrOutput {
	return o.ToCSIPowerMaxSpecPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecOutput) ToCSIPowerMaxSpecPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpec) *CSIPowerMaxSpec {
		return &v
	}).(CSIPowerMaxSpecPtrOutput)
}

// Driver is the specification for the CSI PowerMax Driver
func (o CSIPowerMaxSpecOutput) Driver() CSIPowerMaxSpecDriverOutput {
	return o.ApplyT(func(v CSIPowerMaxSpec) CSIPowerMaxSpecDriver { return v.Driver }).(CSIPowerMaxSpecDriverOutput)
}

type CSIPowerMaxSpecPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpec)(nil)).Elem()
}

func (o CSIPowerMaxSpecPtrOutput) ToCSIPowerMaxSpecPtrOutput() CSIPowerMaxSpecPtrOutput {
	return o
}

func (o CSIPowerMaxSpecPtrOutput) ToCSIPowerMaxSpecPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecPtrOutput {
	return o
}

func (o CSIPowerMaxSpecPtrOutput) Elem() CSIPowerMaxSpecOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpec) CSIPowerMaxSpec { return *v }).(CSIPowerMaxSpecOutput)
}

// Driver is the specification for the CSI PowerMax Driver
func (o CSIPowerMaxSpecPtrOutput) Driver() CSIPowerMaxSpecDriverPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpec) *CSIPowerMaxSpecDriver {
		if v == nil {
			return nil
		}
		return &v.Driver
	}).(CSIPowerMaxSpecDriverPtrOutput)
}

// Driver is the specification for the CSI PowerMax Driver
type CSIPowerMaxSpecDriver struct {
	// AuthSecret is the name of the credentials secret for the driver
	AuthSecret *string `pulumi:"authSecret"`
	// Common is the common specification for both controller and node plugins
	Common CSIPowerMaxSpecDriverCommon `pulumi:"common"`
	// ConfigVersion is the configuration version of the driver
	ConfigVersion string `pulumi:"configVersion"`
	// Controller is the specification for Controller plugin only
	Controller *CSIPowerMaxSpecDriverController `pulumi:"controller"`
	// ForceUpdate is the boolean flag used to force an update of the driver instance
	ForceUpdate *bool `pulumi:"forceUpdate"`
	// Node is the specification for Node plugin only
	Node *CSIPowerMaxSpecDriverNode `pulumi:"node"`
	// Replicas is the count of controllers for Controller plugin
	Replicas int `pulumi:"replicas"`
	// SideCars is the specification for CSI sidecar containers
	SideCars []CSIPowerMaxSpecDriverSideCars `pulumi:"sideCars"`
	// SnapshotClass is the specification for Snapshot Classes
	SnapshotClass []CSIPowerMaxSpecDriverSnapshotClass `pulumi:"snapshotClass"`
	// StorageClass is the specification for Storage Classes
	StorageClass []CSIPowerMaxSpecDriverStorageClass `pulumi:"storageClass"`
	// TLSCertSecret is the name of the TLS Cert secret
	TlsCertSecret *string `pulumi:"tlsCertSecret"`
}

// CSIPowerMaxSpecDriverInput is an input type that accepts CSIPowerMaxSpecDriverArgs and CSIPowerMaxSpecDriverOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverInput` via:
//
//          CSIPowerMaxSpecDriverArgs{...}
type CSIPowerMaxSpecDriverInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverOutput() CSIPowerMaxSpecDriverOutput
	ToCSIPowerMaxSpecDriverOutputWithContext(context.Context) CSIPowerMaxSpecDriverOutput
}

// Driver is the specification for the CSI PowerMax Driver
type CSIPowerMaxSpecDriverArgs struct {
	// AuthSecret is the name of the credentials secret for the driver
	AuthSecret pulumi.StringPtrInput `pulumi:"authSecret"`
	// Common is the common specification for both controller and node plugins
	Common CSIPowerMaxSpecDriverCommonInput `pulumi:"common"`
	// ConfigVersion is the configuration version of the driver
	ConfigVersion pulumi.StringInput `pulumi:"configVersion"`
	// Controller is the specification for Controller plugin only
	Controller CSIPowerMaxSpecDriverControllerPtrInput `pulumi:"controller"`
	// ForceUpdate is the boolean flag used to force an update of the driver instance
	ForceUpdate pulumi.BoolPtrInput `pulumi:"forceUpdate"`
	// Node is the specification for Node plugin only
	Node CSIPowerMaxSpecDriverNodePtrInput `pulumi:"node"`
	// Replicas is the count of controllers for Controller plugin
	Replicas pulumi.IntInput `pulumi:"replicas"`
	// SideCars is the specification for CSI sidecar containers
	SideCars CSIPowerMaxSpecDriverSideCarsArrayInput `pulumi:"sideCars"`
	// SnapshotClass is the specification for Snapshot Classes
	SnapshotClass CSIPowerMaxSpecDriverSnapshotClassArrayInput `pulumi:"snapshotClass"`
	// StorageClass is the specification for Storage Classes
	StorageClass CSIPowerMaxSpecDriverStorageClassArrayInput `pulumi:"storageClass"`
	// TLSCertSecret is the name of the TLS Cert secret
	TlsCertSecret pulumi.StringPtrInput `pulumi:"tlsCertSecret"`
}

func (CSIPowerMaxSpecDriverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriver)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverArgs) ToCSIPowerMaxSpecDriverOutput() CSIPowerMaxSpecDriverOutput {
	return i.ToCSIPowerMaxSpecDriverOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverArgs) ToCSIPowerMaxSpecDriverOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverOutput)
}

func (i CSIPowerMaxSpecDriverArgs) ToCSIPowerMaxSpecDriverPtrOutput() CSIPowerMaxSpecDriverPtrOutput {
	return i.ToCSIPowerMaxSpecDriverPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverArgs) ToCSIPowerMaxSpecDriverPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverOutput).ToCSIPowerMaxSpecDriverPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverPtrInput is an input type that accepts CSIPowerMaxSpecDriverArgs, CSIPowerMaxSpecDriverPtr and CSIPowerMaxSpecDriverPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverPtrInput` via:
//
//          CSIPowerMaxSpecDriverArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverPtrOutput() CSIPowerMaxSpecDriverPtrOutput
	ToCSIPowerMaxSpecDriverPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverPtrOutput
}

type csipowerMaxSpecDriverPtrType CSIPowerMaxSpecDriverArgs

func CSIPowerMaxSpecDriverPtr(v *CSIPowerMaxSpecDriverArgs) CSIPowerMaxSpecDriverPtrInput {
	return (*csipowerMaxSpecDriverPtrType)(v)
}

func (*csipowerMaxSpecDriverPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriver)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverPtrType) ToCSIPowerMaxSpecDriverPtrOutput() CSIPowerMaxSpecDriverPtrOutput {
	return i.ToCSIPowerMaxSpecDriverPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverPtrType) ToCSIPowerMaxSpecDriverPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverPtrOutput)
}

// Driver is the specification for the CSI PowerMax Driver
type CSIPowerMaxSpecDriverOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriver)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverOutput) ToCSIPowerMaxSpecDriverOutput() CSIPowerMaxSpecDriverOutput {
	return o
}

func (o CSIPowerMaxSpecDriverOutput) ToCSIPowerMaxSpecDriverOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverOutput {
	return o
}

func (o CSIPowerMaxSpecDriverOutput) ToCSIPowerMaxSpecDriverPtrOutput() CSIPowerMaxSpecDriverPtrOutput {
	return o.ToCSIPowerMaxSpecDriverPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverOutput) ToCSIPowerMaxSpecDriverPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriver) *CSIPowerMaxSpecDriver {
		return &v
	}).(CSIPowerMaxSpecDriverPtrOutput)
}

// AuthSecret is the name of the credentials secret for the driver
func (o CSIPowerMaxSpecDriverOutput) AuthSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriver) *string { return v.AuthSecret }).(pulumi.StringPtrOutput)
}

// Common is the common specification for both controller and node plugins
func (o CSIPowerMaxSpecDriverOutput) Common() CSIPowerMaxSpecDriverCommonOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriver) CSIPowerMaxSpecDriverCommon { return v.Common }).(CSIPowerMaxSpecDriverCommonOutput)
}

// ConfigVersion is the configuration version of the driver
func (o CSIPowerMaxSpecDriverOutput) ConfigVersion() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriver) string { return v.ConfigVersion }).(pulumi.StringOutput)
}

// Controller is the specification for Controller plugin only
func (o CSIPowerMaxSpecDriverOutput) Controller() CSIPowerMaxSpecDriverControllerPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriver) *CSIPowerMaxSpecDriverController { return v.Controller }).(CSIPowerMaxSpecDriverControllerPtrOutput)
}

// ForceUpdate is the boolean flag used to force an update of the driver instance
func (o CSIPowerMaxSpecDriverOutput) ForceUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriver) *bool { return v.ForceUpdate }).(pulumi.BoolPtrOutput)
}

// Node is the specification for Node plugin only
func (o CSIPowerMaxSpecDriverOutput) Node() CSIPowerMaxSpecDriverNodePtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriver) *CSIPowerMaxSpecDriverNode { return v.Node }).(CSIPowerMaxSpecDriverNodePtrOutput)
}

// Replicas is the count of controllers for Controller plugin
func (o CSIPowerMaxSpecDriverOutput) Replicas() pulumi.IntOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriver) int { return v.Replicas }).(pulumi.IntOutput)
}

// SideCars is the specification for CSI sidecar containers
func (o CSIPowerMaxSpecDriverOutput) SideCars() CSIPowerMaxSpecDriverSideCarsArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriver) []CSIPowerMaxSpecDriverSideCars { return v.SideCars }).(CSIPowerMaxSpecDriverSideCarsArrayOutput)
}

// SnapshotClass is the specification for Snapshot Classes
func (o CSIPowerMaxSpecDriverOutput) SnapshotClass() CSIPowerMaxSpecDriverSnapshotClassArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriver) []CSIPowerMaxSpecDriverSnapshotClass { return v.SnapshotClass }).(CSIPowerMaxSpecDriverSnapshotClassArrayOutput)
}

// StorageClass is the specification for Storage Classes
func (o CSIPowerMaxSpecDriverOutput) StorageClass() CSIPowerMaxSpecDriverStorageClassArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriver) []CSIPowerMaxSpecDriverStorageClass { return v.StorageClass }).(CSIPowerMaxSpecDriverStorageClassArrayOutput)
}

// TLSCertSecret is the name of the TLS Cert secret
func (o CSIPowerMaxSpecDriverOutput) TlsCertSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriver) *string { return v.TlsCertSecret }).(pulumi.StringPtrOutput)
}

type CSIPowerMaxSpecDriverPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriver)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverPtrOutput) ToCSIPowerMaxSpecDriverPtrOutput() CSIPowerMaxSpecDriverPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverPtrOutput) ToCSIPowerMaxSpecDriverPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverPtrOutput) Elem() CSIPowerMaxSpecDriverOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriver) CSIPowerMaxSpecDriver { return *v }).(CSIPowerMaxSpecDriverOutput)
}

// AuthSecret is the name of the credentials secret for the driver
func (o CSIPowerMaxSpecDriverPtrOutput) AuthSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriver) *string {
		if v == nil {
			return nil
		}
		return v.AuthSecret
	}).(pulumi.StringPtrOutput)
}

// Common is the common specification for both controller and node plugins
func (o CSIPowerMaxSpecDriverPtrOutput) Common() CSIPowerMaxSpecDriverCommonPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriver) *CSIPowerMaxSpecDriverCommon {
		if v == nil {
			return nil
		}
		return &v.Common
	}).(CSIPowerMaxSpecDriverCommonPtrOutput)
}

// ConfigVersion is the configuration version of the driver
func (o CSIPowerMaxSpecDriverPtrOutput) ConfigVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriver) *string {
		if v == nil {
			return nil
		}
		return &v.ConfigVersion
	}).(pulumi.StringPtrOutput)
}

// Controller is the specification for Controller plugin only
func (o CSIPowerMaxSpecDriverPtrOutput) Controller() CSIPowerMaxSpecDriverControllerPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriver) *CSIPowerMaxSpecDriverController {
		if v == nil {
			return nil
		}
		return v.Controller
	}).(CSIPowerMaxSpecDriverControllerPtrOutput)
}

// ForceUpdate is the boolean flag used to force an update of the driver instance
func (o CSIPowerMaxSpecDriverPtrOutput) ForceUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriver) *bool {
		if v == nil {
			return nil
		}
		return v.ForceUpdate
	}).(pulumi.BoolPtrOutput)
}

// Node is the specification for Node plugin only
func (o CSIPowerMaxSpecDriverPtrOutput) Node() CSIPowerMaxSpecDriverNodePtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriver) *CSIPowerMaxSpecDriverNode {
		if v == nil {
			return nil
		}
		return v.Node
	}).(CSIPowerMaxSpecDriverNodePtrOutput)
}

// Replicas is the count of controllers for Controller plugin
func (o CSIPowerMaxSpecDriverPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriver) *int {
		if v == nil {
			return nil
		}
		return &v.Replicas
	}).(pulumi.IntPtrOutput)
}

// SideCars is the specification for CSI sidecar containers
func (o CSIPowerMaxSpecDriverPtrOutput) SideCars() CSIPowerMaxSpecDriverSideCarsArrayOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriver) []CSIPowerMaxSpecDriverSideCars {
		if v == nil {
			return nil
		}
		return v.SideCars
	}).(CSIPowerMaxSpecDriverSideCarsArrayOutput)
}

// SnapshotClass is the specification for Snapshot Classes
func (o CSIPowerMaxSpecDriverPtrOutput) SnapshotClass() CSIPowerMaxSpecDriverSnapshotClassArrayOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriver) []CSIPowerMaxSpecDriverSnapshotClass {
		if v == nil {
			return nil
		}
		return v.SnapshotClass
	}).(CSIPowerMaxSpecDriverSnapshotClassArrayOutput)
}

// StorageClass is the specification for Storage Classes
func (o CSIPowerMaxSpecDriverPtrOutput) StorageClass() CSIPowerMaxSpecDriverStorageClassArrayOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriver) []CSIPowerMaxSpecDriverStorageClass {
		if v == nil {
			return nil
		}
		return v.StorageClass
	}).(CSIPowerMaxSpecDriverStorageClassArrayOutput)
}

// TLSCertSecret is the name of the TLS Cert secret
func (o CSIPowerMaxSpecDriverPtrOutput) TlsCertSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriver) *string {
		if v == nil {
			return nil
		}
		return v.TlsCertSecret
	}).(pulumi.StringPtrOutput)
}

// Common is the common specification for both controller and node plugins
type CSIPowerMaxSpecDriverCommon struct {
	// Args is the set of arguments for the container
	Args []string `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs []CSIPowerMaxSpecDriverCommonEnvs `pulumi:"envs"`
	// Image is the image tag for the Container
	Image *string `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name *string `pulumi:"name"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
	NodeSelector map[string]string `pulumi:"nodeSelector"`
	// Tolerations is the list of tolerations for the driver pods
	Tolerations []CSIPowerMaxSpecDriverCommonTolerations `pulumi:"tolerations"`
}

// CSIPowerMaxSpecDriverCommonInput is an input type that accepts CSIPowerMaxSpecDriverCommonArgs and CSIPowerMaxSpecDriverCommonOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverCommonInput` via:
//
//          CSIPowerMaxSpecDriverCommonArgs{...}
type CSIPowerMaxSpecDriverCommonInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverCommonOutput() CSIPowerMaxSpecDriverCommonOutput
	ToCSIPowerMaxSpecDriverCommonOutputWithContext(context.Context) CSIPowerMaxSpecDriverCommonOutput
}

// Common is the common specification for both controller and node plugins
type CSIPowerMaxSpecDriverCommonArgs struct {
	// Args is the set of arguments for the container
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs CSIPowerMaxSpecDriverCommonEnvsArrayInput `pulumi:"envs"`
	// Image is the image tag for the Container
	Image pulumi.StringPtrInput `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name pulumi.StringPtrInput `pulumi:"name"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
	NodeSelector pulumi.StringMapInput `pulumi:"nodeSelector"`
	// Tolerations is the list of tolerations for the driver pods
	Tolerations CSIPowerMaxSpecDriverCommonTolerationsArrayInput `pulumi:"tolerations"`
}

func (CSIPowerMaxSpecDriverCommonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverCommon)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverCommonArgs) ToCSIPowerMaxSpecDriverCommonOutput() CSIPowerMaxSpecDriverCommonOutput {
	return i.ToCSIPowerMaxSpecDriverCommonOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverCommonArgs) ToCSIPowerMaxSpecDriverCommonOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonOutput)
}

func (i CSIPowerMaxSpecDriverCommonArgs) ToCSIPowerMaxSpecDriverCommonPtrOutput() CSIPowerMaxSpecDriverCommonPtrOutput {
	return i.ToCSIPowerMaxSpecDriverCommonPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverCommonArgs) ToCSIPowerMaxSpecDriverCommonPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonOutput).ToCSIPowerMaxSpecDriverCommonPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverCommonPtrInput is an input type that accepts CSIPowerMaxSpecDriverCommonArgs, CSIPowerMaxSpecDriverCommonPtr and CSIPowerMaxSpecDriverCommonPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverCommonPtrInput` via:
//
//          CSIPowerMaxSpecDriverCommonArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverCommonPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverCommonPtrOutput() CSIPowerMaxSpecDriverCommonPtrOutput
	ToCSIPowerMaxSpecDriverCommonPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverCommonPtrOutput
}

type csipowerMaxSpecDriverCommonPtrType CSIPowerMaxSpecDriverCommonArgs

func CSIPowerMaxSpecDriverCommonPtr(v *CSIPowerMaxSpecDriverCommonArgs) CSIPowerMaxSpecDriverCommonPtrInput {
	return (*csipowerMaxSpecDriverCommonPtrType)(v)
}

func (*csipowerMaxSpecDriverCommonPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverCommon)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverCommonPtrType) ToCSIPowerMaxSpecDriverCommonPtrOutput() CSIPowerMaxSpecDriverCommonPtrOutput {
	return i.ToCSIPowerMaxSpecDriverCommonPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverCommonPtrType) ToCSIPowerMaxSpecDriverCommonPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonPtrOutput)
}

// Common is the common specification for both controller and node plugins
type CSIPowerMaxSpecDriverCommonOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverCommonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverCommon)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverCommonOutput) ToCSIPowerMaxSpecDriverCommonOutput() CSIPowerMaxSpecDriverCommonOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonOutput) ToCSIPowerMaxSpecDriverCommonOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonOutput) ToCSIPowerMaxSpecDriverCommonPtrOutput() CSIPowerMaxSpecDriverCommonPtrOutput {
	return o.ToCSIPowerMaxSpecDriverCommonPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverCommonOutput) ToCSIPowerMaxSpecDriverCommonPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommon) *CSIPowerMaxSpecDriverCommon {
		return &v
	}).(CSIPowerMaxSpecDriverCommonPtrOutput)
}

// Args is the set of arguments for the container
func (o CSIPowerMaxSpecDriverCommonOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommon) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIPowerMaxSpecDriverCommonOutput) Envs() CSIPowerMaxSpecDriverCommonEnvsArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommon) []CSIPowerMaxSpecDriverCommonEnvs { return v.Envs }).(CSIPowerMaxSpecDriverCommonEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIPowerMaxSpecDriverCommonOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommon) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIPowerMaxSpecDriverCommonOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommon) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIPowerMaxSpecDriverCommonOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommon) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
func (o CSIPowerMaxSpecDriverCommonOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommon) map[string]string { return v.NodeSelector }).(pulumi.StringMapOutput)
}

// Tolerations is the list of tolerations for the driver pods
func (o CSIPowerMaxSpecDriverCommonOutput) Tolerations() CSIPowerMaxSpecDriverCommonTolerationsArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommon) []CSIPowerMaxSpecDriverCommonTolerations { return v.Tolerations }).(CSIPowerMaxSpecDriverCommonTolerationsArrayOutput)
}

type CSIPowerMaxSpecDriverCommonPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverCommonPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverCommon)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverCommonPtrOutput) ToCSIPowerMaxSpecDriverCommonPtrOutput() CSIPowerMaxSpecDriverCommonPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonPtrOutput) ToCSIPowerMaxSpecDriverCommonPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonPtrOutput) Elem() CSIPowerMaxSpecDriverCommonOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommon) CSIPowerMaxSpecDriverCommon { return *v }).(CSIPowerMaxSpecDriverCommonOutput)
}

// Args is the set of arguments for the container
func (o CSIPowerMaxSpecDriverCommonPtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommon) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIPowerMaxSpecDriverCommonPtrOutput) Envs() CSIPowerMaxSpecDriverCommonEnvsArrayOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommon) []CSIPowerMaxSpecDriverCommonEnvs {
		if v == nil {
			return nil
		}
		return v.Envs
	}).(CSIPowerMaxSpecDriverCommonEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIPowerMaxSpecDriverCommonPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommon) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIPowerMaxSpecDriverCommonPtrOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommon) *string {
		if v == nil {
			return nil
		}
		return v.ImagePullPolicy
	}).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIPowerMaxSpecDriverCommonPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommon) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
func (o CSIPowerMaxSpecDriverCommonPtrOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommon) map[string]string {
		if v == nil {
			return nil
		}
		return v.NodeSelector
	}).(pulumi.StringMapOutput)
}

// Tolerations is the list of tolerations for the driver pods
func (o CSIPowerMaxSpecDriverCommonPtrOutput) Tolerations() CSIPowerMaxSpecDriverCommonTolerationsArrayOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommon) []CSIPowerMaxSpecDriverCommonTolerations {
		if v == nil {
			return nil
		}
		return v.Tolerations
	}).(CSIPowerMaxSpecDriverCommonTolerationsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIPowerMaxSpecDriverCommonEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *CSIPowerMaxSpecDriverCommonEnvsValueFrom `pulumi:"valueFrom"`
}

// CSIPowerMaxSpecDriverCommonEnvsInput is an input type that accepts CSIPowerMaxSpecDriverCommonEnvsArgs and CSIPowerMaxSpecDriverCommonEnvsOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverCommonEnvsInput` via:
//
//          CSIPowerMaxSpecDriverCommonEnvsArgs{...}
type CSIPowerMaxSpecDriverCommonEnvsInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverCommonEnvsOutput() CSIPowerMaxSpecDriverCommonEnvsOutput
	ToCSIPowerMaxSpecDriverCommonEnvsOutputWithContext(context.Context) CSIPowerMaxSpecDriverCommonEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type CSIPowerMaxSpecDriverCommonEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom CSIPowerMaxSpecDriverCommonEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (CSIPowerMaxSpecDriverCommonEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverCommonEnvs)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverCommonEnvsArgs) ToCSIPowerMaxSpecDriverCommonEnvsOutput() CSIPowerMaxSpecDriverCommonEnvsOutput {
	return i.ToCSIPowerMaxSpecDriverCommonEnvsOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverCommonEnvsArgs) ToCSIPowerMaxSpecDriverCommonEnvsOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonEnvsOutput)
}

// CSIPowerMaxSpecDriverCommonEnvsArrayInput is an input type that accepts CSIPowerMaxSpecDriverCommonEnvsArray and CSIPowerMaxSpecDriverCommonEnvsArrayOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverCommonEnvsArrayInput` via:
//
//          CSIPowerMaxSpecDriverCommonEnvsArray{ CSIPowerMaxSpecDriverCommonEnvsArgs{...} }
type CSIPowerMaxSpecDriverCommonEnvsArrayInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverCommonEnvsArrayOutput() CSIPowerMaxSpecDriverCommonEnvsArrayOutput
	ToCSIPowerMaxSpecDriverCommonEnvsArrayOutputWithContext(context.Context) CSIPowerMaxSpecDriverCommonEnvsArrayOutput
}

type CSIPowerMaxSpecDriverCommonEnvsArray []CSIPowerMaxSpecDriverCommonEnvsInput

func (CSIPowerMaxSpecDriverCommonEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxSpecDriverCommonEnvs)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverCommonEnvsArray) ToCSIPowerMaxSpecDriverCommonEnvsArrayOutput() CSIPowerMaxSpecDriverCommonEnvsArrayOutput {
	return i.ToCSIPowerMaxSpecDriverCommonEnvsArrayOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverCommonEnvsArray) ToCSIPowerMaxSpecDriverCommonEnvsArrayOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIPowerMaxSpecDriverCommonEnvsOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverCommonEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverCommonEnvs)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverCommonEnvsOutput) ToCSIPowerMaxSpecDriverCommonEnvsOutput() CSIPowerMaxSpecDriverCommonEnvsOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsOutput) ToCSIPowerMaxSpecDriverCommonEnvsOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o CSIPowerMaxSpecDriverCommonEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o CSIPowerMaxSpecDriverCommonEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o CSIPowerMaxSpecDriverCommonEnvsOutput) ValueFrom() CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvs) *CSIPowerMaxSpecDriverCommonEnvsValueFrom { return v.ValueFrom }).(CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput)
}

type CSIPowerMaxSpecDriverCommonEnvsArrayOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverCommonEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxSpecDriverCommonEnvs)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverCommonEnvsArrayOutput) ToCSIPowerMaxSpecDriverCommonEnvsArrayOutput() CSIPowerMaxSpecDriverCommonEnvsArrayOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsArrayOutput) ToCSIPowerMaxSpecDriverCommonEnvsArrayOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsArrayOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsArrayOutput) Index(i pulumi.IntInput) CSIPowerMaxSpecDriverCommonEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIPowerMaxSpecDriverCommonEnvs {
		return vs[0].([]CSIPowerMaxSpecDriverCommonEnvs)[vs[1].(int)]
	}).(CSIPowerMaxSpecDriverCommonEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIPowerMaxSpecDriverCommonEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef *CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// CSIPowerMaxSpecDriverCommonEnvsValueFromInput is an input type that accepts CSIPowerMaxSpecDriverCommonEnvsValueFromArgs and CSIPowerMaxSpecDriverCommonEnvsValueFromOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverCommonEnvsValueFromInput` via:
//
//          CSIPowerMaxSpecDriverCommonEnvsValueFromArgs{...}
type CSIPowerMaxSpecDriverCommonEnvsValueFromInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverCommonEnvsValueFromOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromOutput
	ToCSIPowerMaxSpecDriverCommonEnvsValueFromOutputWithContext(context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIPowerMaxSpecDriverCommonEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (CSIPowerMaxSpecDriverCommonEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverCommonEnvsValueFrom)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromOutput {
	return i.ToCSIPowerMaxSpecDriverCommonEnvsValueFromOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonEnvsValueFromOutput)
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput {
	return i.ToCSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonEnvsValueFromOutput).ToCSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverCommonEnvsValueFromPtrInput is an input type that accepts CSIPowerMaxSpecDriverCommonEnvsValueFromArgs, CSIPowerMaxSpecDriverCommonEnvsValueFromPtr and CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverCommonEnvsValueFromPtrInput` via:
//
//          CSIPowerMaxSpecDriverCommonEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverCommonEnvsValueFromPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput
	ToCSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput
}

type csipowerMaxSpecDriverCommonEnvsValueFromPtrType CSIPowerMaxSpecDriverCommonEnvsValueFromArgs

func CSIPowerMaxSpecDriverCommonEnvsValueFromPtr(v *CSIPowerMaxSpecDriverCommonEnvsValueFromArgs) CSIPowerMaxSpecDriverCommonEnvsValueFromPtrInput {
	return (*csipowerMaxSpecDriverCommonEnvsValueFromPtrType)(v)
}

func (*csipowerMaxSpecDriverCommonEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverCommonEnvsValueFrom)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverCommonEnvsValueFromPtrType) ToCSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput {
	return i.ToCSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverCommonEnvsValueFromPtrType) ToCSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIPowerMaxSpecDriverCommonEnvsValueFromOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverCommonEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverCommonEnvsValueFrom)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput {
	return o.ToCSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvsValueFrom) *CSIPowerMaxSpecDriverCommonEnvsValueFrom {
		return &v
	}).(CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromOutput) ConfigMapKeyRef() CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvsValueFrom) *CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromOutput) FieldRef() CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvsValueFrom) *CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRef {
		return v.FieldRef
	}).(CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromOutput) ResourceFieldRef() CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvsValueFrom) *CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromOutput) SecretKeyRef() CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvsValueFrom) *CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput)
}

type CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverCommonEnvsValueFrom)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput) Elem() CSIPowerMaxSpecDriverCommonEnvsValueFromOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommonEnvsValueFrom) CSIPowerMaxSpecDriverCommonEnvsValueFrom { return *v }).(CSIPowerMaxSpecDriverCommonEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput) ConfigMapKeyRef() CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommonEnvsValueFrom) *CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput) FieldRef() CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommonEnvsValueFrom) *CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput) ResourceFieldRef() CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommonEnvsValueFrom) *CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput) SecretKeyRef() CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommonEnvsValueFrom) *CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefInput is an input type that accepts CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs and CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefInput` via:
//
//          CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs{...}
type CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput
	ToCSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return i.ToCSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput)
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput).ToCSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs, CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtr and CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput
	ToCSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput
}

type csipowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs

func CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtr(v *CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput {
	return (*csipowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*csipowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType) ToCSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType) ToCSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToCSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRef) *CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRef {
		return &v
	}).(CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) Elem() CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRef) CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRef {
		return *v
	}).(CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefInput is an input type that accepts CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefArgs and CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefInput` via:
//
//          CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefArgs{...}
type CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput
	ToCSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutputWithContext(context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRef)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput {
	return i.ToCSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput)
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput).ToCSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrInput is an input type that accepts CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefArgs, CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtr and CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrInput` via:
//
//          CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput
	ToCSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput
}

type csipowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrType CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefArgs

func CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtr(v *CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefArgs) CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrInput {
	return (*csipowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrType)(v)
}

func (*csipowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrType) ToCSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrType) ToCSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o.ToCSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRef) *CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRef {
		return &v
	}).(CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput) Elem() CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRef) CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRef {
		return *v
	}).(CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisor `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefInput is an input type that accepts CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefArgs and CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefInput` via:
//
//          CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefArgs{...}
type CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput
	ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutputWithContext(context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return i.ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput)
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput).ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrInput is an input type that accepts CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefArgs, CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtr and CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrInput` via:
//
//          CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput
	ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput
}

type csipowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrType CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefArgs

func CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtr(v *CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefArgs) CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrInput {
	return (*csipowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*csipowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrType) ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrType) ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRef) *CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRef {
		return &v
	}).(CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput) Divisor() CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRef) *CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisor {
		return v.Divisor
	}).(CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) Elem() CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRef) CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRef {
		return *v
	}).(CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) Divisor() CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRef) *CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisor {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

type CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisor struct {
}

// CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorInput is an input type that accepts CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs and CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorInput` via:
//
//          CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs{...}
type CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput
	ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput
}

type CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs struct {
}

func (CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput {
	return i.ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput)
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput).ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrInput is an input type that accepts CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs, CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtr and CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrInput` via:
//
//          CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput
	ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput
}

type csipowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrType CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs

func CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtr(v *CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs) CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrInput {
	return (*csipowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrType)(v)
}

func (*csipowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrType) ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrType) ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisor) *CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisor {
		return &v
	}).(CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput) Elem() CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisor) CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisor {
		return *v
	}).(CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefInput is an input type that accepts CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefArgs and CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefInput` via:
//
//          CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefArgs{...}
type CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput
	ToCSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutputWithContext(context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return i.ToCSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput)
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefArgs) ToCSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput).ToCSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrInput is an input type that accepts CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefArgs, CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtr and CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrInput` via:
//
//          CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput
	ToCSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput
}

type csipowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrType CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefArgs

func CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtr(v *CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefArgs) CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrInput {
	return (*csipowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*csipowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrType) ToCSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrType) ToCSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToCSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRef) *CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRef {
		return &v
	}).(CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) ToCSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) Elem() CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRef) CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRef {
		return *v
	}).(CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIPowerMaxSpecDriverCommonNodeSelector struct {
}

// CSIPowerMaxSpecDriverCommonNodeSelectorInput is an input type that accepts CSIPowerMaxSpecDriverCommonNodeSelectorArgs and CSIPowerMaxSpecDriverCommonNodeSelectorOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverCommonNodeSelectorInput` via:
//
//          CSIPowerMaxSpecDriverCommonNodeSelectorArgs{...}
type CSIPowerMaxSpecDriverCommonNodeSelectorInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverCommonNodeSelectorOutput() CSIPowerMaxSpecDriverCommonNodeSelectorOutput
	ToCSIPowerMaxSpecDriverCommonNodeSelectorOutputWithContext(context.Context) CSIPowerMaxSpecDriverCommonNodeSelectorOutput
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIPowerMaxSpecDriverCommonNodeSelectorArgs struct {
}

func (CSIPowerMaxSpecDriverCommonNodeSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverCommonNodeSelector)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverCommonNodeSelectorArgs) ToCSIPowerMaxSpecDriverCommonNodeSelectorOutput() CSIPowerMaxSpecDriverCommonNodeSelectorOutput {
	return i.ToCSIPowerMaxSpecDriverCommonNodeSelectorOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverCommonNodeSelectorArgs) ToCSIPowerMaxSpecDriverCommonNodeSelectorOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonNodeSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonNodeSelectorOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIPowerMaxSpecDriverCommonNodeSelectorOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverCommonNodeSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverCommonNodeSelector)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverCommonNodeSelectorOutput) ToCSIPowerMaxSpecDriverCommonNodeSelectorOutput() CSIPowerMaxSpecDriverCommonNodeSelectorOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonNodeSelectorOutput) ToCSIPowerMaxSpecDriverCommonNodeSelectorOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonNodeSelectorOutput {
	return o
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIPowerMaxSpecDriverCommonTolerations struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect *string `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key *string `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator *string `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds *int `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value *string `pulumi:"value"`
}

// CSIPowerMaxSpecDriverCommonTolerationsInput is an input type that accepts CSIPowerMaxSpecDriverCommonTolerationsArgs and CSIPowerMaxSpecDriverCommonTolerationsOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverCommonTolerationsInput` via:
//
//          CSIPowerMaxSpecDriverCommonTolerationsArgs{...}
type CSIPowerMaxSpecDriverCommonTolerationsInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverCommonTolerationsOutput() CSIPowerMaxSpecDriverCommonTolerationsOutput
	ToCSIPowerMaxSpecDriverCommonTolerationsOutputWithContext(context.Context) CSIPowerMaxSpecDriverCommonTolerationsOutput
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIPowerMaxSpecDriverCommonTolerationsArgs struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect pulumi.StringPtrInput `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds pulumi.IntPtrInput `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (CSIPowerMaxSpecDriverCommonTolerationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverCommonTolerations)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverCommonTolerationsArgs) ToCSIPowerMaxSpecDriverCommonTolerationsOutput() CSIPowerMaxSpecDriverCommonTolerationsOutput {
	return i.ToCSIPowerMaxSpecDriverCommonTolerationsOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverCommonTolerationsArgs) ToCSIPowerMaxSpecDriverCommonTolerationsOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonTolerationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonTolerationsOutput)
}

// CSIPowerMaxSpecDriverCommonTolerationsArrayInput is an input type that accepts CSIPowerMaxSpecDriverCommonTolerationsArray and CSIPowerMaxSpecDriverCommonTolerationsArrayOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverCommonTolerationsArrayInput` via:
//
//          CSIPowerMaxSpecDriverCommonTolerationsArray{ CSIPowerMaxSpecDriverCommonTolerationsArgs{...} }
type CSIPowerMaxSpecDriverCommonTolerationsArrayInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverCommonTolerationsArrayOutput() CSIPowerMaxSpecDriverCommonTolerationsArrayOutput
	ToCSIPowerMaxSpecDriverCommonTolerationsArrayOutputWithContext(context.Context) CSIPowerMaxSpecDriverCommonTolerationsArrayOutput
}

type CSIPowerMaxSpecDriverCommonTolerationsArray []CSIPowerMaxSpecDriverCommonTolerationsInput

func (CSIPowerMaxSpecDriverCommonTolerationsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxSpecDriverCommonTolerations)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverCommonTolerationsArray) ToCSIPowerMaxSpecDriverCommonTolerationsArrayOutput() CSIPowerMaxSpecDriverCommonTolerationsArrayOutput {
	return i.ToCSIPowerMaxSpecDriverCommonTolerationsArrayOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverCommonTolerationsArray) ToCSIPowerMaxSpecDriverCommonTolerationsArrayOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonTolerationsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverCommonTolerationsArrayOutput)
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIPowerMaxSpecDriverCommonTolerationsOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverCommonTolerationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverCommonTolerations)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverCommonTolerationsOutput) ToCSIPowerMaxSpecDriverCommonTolerationsOutput() CSIPowerMaxSpecDriverCommonTolerationsOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonTolerationsOutput) ToCSIPowerMaxSpecDriverCommonTolerationsOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonTolerationsOutput {
	return o
}

// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
func (o CSIPowerMaxSpecDriverCommonTolerationsOutput) Effect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonTolerations) *string { return v.Effect }).(pulumi.StringPtrOutput)
}

// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
func (o CSIPowerMaxSpecDriverCommonTolerationsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonTolerations) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
func (o CSIPowerMaxSpecDriverCommonTolerationsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonTolerations) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
func (o CSIPowerMaxSpecDriverCommonTolerationsOutput) TolerationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonTolerations) *int { return v.TolerationSeconds }).(pulumi.IntPtrOutput)
}

// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
func (o CSIPowerMaxSpecDriverCommonTolerationsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverCommonTolerations) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type CSIPowerMaxSpecDriverCommonTolerationsArrayOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverCommonTolerationsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxSpecDriverCommonTolerations)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverCommonTolerationsArrayOutput) ToCSIPowerMaxSpecDriverCommonTolerationsArrayOutput() CSIPowerMaxSpecDriverCommonTolerationsArrayOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonTolerationsArrayOutput) ToCSIPowerMaxSpecDriverCommonTolerationsArrayOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverCommonTolerationsArrayOutput {
	return o
}

func (o CSIPowerMaxSpecDriverCommonTolerationsArrayOutput) Index(i pulumi.IntInput) CSIPowerMaxSpecDriverCommonTolerationsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIPowerMaxSpecDriverCommonTolerations {
		return vs[0].([]CSIPowerMaxSpecDriverCommonTolerations)[vs[1].(int)]
	}).(CSIPowerMaxSpecDriverCommonTolerationsOutput)
}

// Controller is the specification for Controller plugin only
type CSIPowerMaxSpecDriverController struct {
	// Args is the set of arguments for the container
	Args []string `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs []CSIPowerMaxSpecDriverControllerEnvs `pulumi:"envs"`
	// Image is the image tag for the Container
	Image *string `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name *string `pulumi:"name"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
	NodeSelector map[string]string `pulumi:"nodeSelector"`
	// Tolerations is the list of tolerations for the driver pods
	Tolerations []CSIPowerMaxSpecDriverControllerTolerations `pulumi:"tolerations"`
}

// CSIPowerMaxSpecDriverControllerInput is an input type that accepts CSIPowerMaxSpecDriverControllerArgs and CSIPowerMaxSpecDriverControllerOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverControllerInput` via:
//
//          CSIPowerMaxSpecDriverControllerArgs{...}
type CSIPowerMaxSpecDriverControllerInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverControllerOutput() CSIPowerMaxSpecDriverControllerOutput
	ToCSIPowerMaxSpecDriverControllerOutputWithContext(context.Context) CSIPowerMaxSpecDriverControllerOutput
}

// Controller is the specification for Controller plugin only
type CSIPowerMaxSpecDriverControllerArgs struct {
	// Args is the set of arguments for the container
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs CSIPowerMaxSpecDriverControllerEnvsArrayInput `pulumi:"envs"`
	// Image is the image tag for the Container
	Image pulumi.StringPtrInput `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name pulumi.StringPtrInput `pulumi:"name"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
	NodeSelector pulumi.StringMapInput `pulumi:"nodeSelector"`
	// Tolerations is the list of tolerations for the driver pods
	Tolerations CSIPowerMaxSpecDriverControllerTolerationsArrayInput `pulumi:"tolerations"`
}

func (CSIPowerMaxSpecDriverControllerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverController)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverControllerArgs) ToCSIPowerMaxSpecDriverControllerOutput() CSIPowerMaxSpecDriverControllerOutput {
	return i.ToCSIPowerMaxSpecDriverControllerOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverControllerArgs) ToCSIPowerMaxSpecDriverControllerOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerOutput)
}

func (i CSIPowerMaxSpecDriverControllerArgs) ToCSIPowerMaxSpecDriverControllerPtrOutput() CSIPowerMaxSpecDriverControllerPtrOutput {
	return i.ToCSIPowerMaxSpecDriverControllerPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverControllerArgs) ToCSIPowerMaxSpecDriverControllerPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerOutput).ToCSIPowerMaxSpecDriverControllerPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverControllerPtrInput is an input type that accepts CSIPowerMaxSpecDriverControllerArgs, CSIPowerMaxSpecDriverControllerPtr and CSIPowerMaxSpecDriverControllerPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverControllerPtrInput` via:
//
//          CSIPowerMaxSpecDriverControllerArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverControllerPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverControllerPtrOutput() CSIPowerMaxSpecDriverControllerPtrOutput
	ToCSIPowerMaxSpecDriverControllerPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverControllerPtrOutput
}

type csipowerMaxSpecDriverControllerPtrType CSIPowerMaxSpecDriverControllerArgs

func CSIPowerMaxSpecDriverControllerPtr(v *CSIPowerMaxSpecDriverControllerArgs) CSIPowerMaxSpecDriverControllerPtrInput {
	return (*csipowerMaxSpecDriverControllerPtrType)(v)
}

func (*csipowerMaxSpecDriverControllerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverController)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverControllerPtrType) ToCSIPowerMaxSpecDriverControllerPtrOutput() CSIPowerMaxSpecDriverControllerPtrOutput {
	return i.ToCSIPowerMaxSpecDriverControllerPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverControllerPtrType) ToCSIPowerMaxSpecDriverControllerPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerPtrOutput)
}

// Controller is the specification for Controller plugin only
type CSIPowerMaxSpecDriverControllerOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverControllerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverController)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverControllerOutput) ToCSIPowerMaxSpecDriverControllerOutput() CSIPowerMaxSpecDriverControllerOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerOutput) ToCSIPowerMaxSpecDriverControllerOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerOutput) ToCSIPowerMaxSpecDriverControllerPtrOutput() CSIPowerMaxSpecDriverControllerPtrOutput {
	return o.ToCSIPowerMaxSpecDriverControllerPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverControllerOutput) ToCSIPowerMaxSpecDriverControllerPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverController) *CSIPowerMaxSpecDriverController {
		return &v
	}).(CSIPowerMaxSpecDriverControllerPtrOutput)
}

// Args is the set of arguments for the container
func (o CSIPowerMaxSpecDriverControllerOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverController) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIPowerMaxSpecDriverControllerOutput) Envs() CSIPowerMaxSpecDriverControllerEnvsArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverController) []CSIPowerMaxSpecDriverControllerEnvs { return v.Envs }).(CSIPowerMaxSpecDriverControllerEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIPowerMaxSpecDriverControllerOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverController) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIPowerMaxSpecDriverControllerOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverController) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIPowerMaxSpecDriverControllerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverController) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
func (o CSIPowerMaxSpecDriverControllerOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverController) map[string]string { return v.NodeSelector }).(pulumi.StringMapOutput)
}

// Tolerations is the list of tolerations for the driver pods
func (o CSIPowerMaxSpecDriverControllerOutput) Tolerations() CSIPowerMaxSpecDriverControllerTolerationsArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverController) []CSIPowerMaxSpecDriverControllerTolerations {
		return v.Tolerations
	}).(CSIPowerMaxSpecDriverControllerTolerationsArrayOutput)
}

type CSIPowerMaxSpecDriverControllerPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverControllerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverController)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverControllerPtrOutput) ToCSIPowerMaxSpecDriverControllerPtrOutput() CSIPowerMaxSpecDriverControllerPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerPtrOutput) ToCSIPowerMaxSpecDriverControllerPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerPtrOutput) Elem() CSIPowerMaxSpecDriverControllerOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverController) CSIPowerMaxSpecDriverController { return *v }).(CSIPowerMaxSpecDriverControllerOutput)
}

// Args is the set of arguments for the container
func (o CSIPowerMaxSpecDriverControllerPtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverController) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIPowerMaxSpecDriverControllerPtrOutput) Envs() CSIPowerMaxSpecDriverControllerEnvsArrayOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverController) []CSIPowerMaxSpecDriverControllerEnvs {
		if v == nil {
			return nil
		}
		return v.Envs
	}).(CSIPowerMaxSpecDriverControllerEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIPowerMaxSpecDriverControllerPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverController) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIPowerMaxSpecDriverControllerPtrOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverController) *string {
		if v == nil {
			return nil
		}
		return v.ImagePullPolicy
	}).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIPowerMaxSpecDriverControllerPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverController) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
func (o CSIPowerMaxSpecDriverControllerPtrOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverController) map[string]string {
		if v == nil {
			return nil
		}
		return v.NodeSelector
	}).(pulumi.StringMapOutput)
}

// Tolerations is the list of tolerations for the driver pods
func (o CSIPowerMaxSpecDriverControllerPtrOutput) Tolerations() CSIPowerMaxSpecDriverControllerTolerationsArrayOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverController) []CSIPowerMaxSpecDriverControllerTolerations {
		if v == nil {
			return nil
		}
		return v.Tolerations
	}).(CSIPowerMaxSpecDriverControllerTolerationsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIPowerMaxSpecDriverControllerEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *CSIPowerMaxSpecDriverControllerEnvsValueFrom `pulumi:"valueFrom"`
}

// CSIPowerMaxSpecDriverControllerEnvsInput is an input type that accepts CSIPowerMaxSpecDriverControllerEnvsArgs and CSIPowerMaxSpecDriverControllerEnvsOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverControllerEnvsInput` via:
//
//          CSIPowerMaxSpecDriverControllerEnvsArgs{...}
type CSIPowerMaxSpecDriverControllerEnvsInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverControllerEnvsOutput() CSIPowerMaxSpecDriverControllerEnvsOutput
	ToCSIPowerMaxSpecDriverControllerEnvsOutputWithContext(context.Context) CSIPowerMaxSpecDriverControllerEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type CSIPowerMaxSpecDriverControllerEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom CSIPowerMaxSpecDriverControllerEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (CSIPowerMaxSpecDriverControllerEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverControllerEnvs)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverControllerEnvsArgs) ToCSIPowerMaxSpecDriverControllerEnvsOutput() CSIPowerMaxSpecDriverControllerEnvsOutput {
	return i.ToCSIPowerMaxSpecDriverControllerEnvsOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverControllerEnvsArgs) ToCSIPowerMaxSpecDriverControllerEnvsOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerEnvsOutput)
}

// CSIPowerMaxSpecDriverControllerEnvsArrayInput is an input type that accepts CSIPowerMaxSpecDriverControllerEnvsArray and CSIPowerMaxSpecDriverControllerEnvsArrayOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverControllerEnvsArrayInput` via:
//
//          CSIPowerMaxSpecDriverControllerEnvsArray{ CSIPowerMaxSpecDriverControllerEnvsArgs{...} }
type CSIPowerMaxSpecDriverControllerEnvsArrayInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverControllerEnvsArrayOutput() CSIPowerMaxSpecDriverControllerEnvsArrayOutput
	ToCSIPowerMaxSpecDriverControllerEnvsArrayOutputWithContext(context.Context) CSIPowerMaxSpecDriverControllerEnvsArrayOutput
}

type CSIPowerMaxSpecDriverControllerEnvsArray []CSIPowerMaxSpecDriverControllerEnvsInput

func (CSIPowerMaxSpecDriverControllerEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxSpecDriverControllerEnvs)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverControllerEnvsArray) ToCSIPowerMaxSpecDriverControllerEnvsArrayOutput() CSIPowerMaxSpecDriverControllerEnvsArrayOutput {
	return i.ToCSIPowerMaxSpecDriverControllerEnvsArrayOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverControllerEnvsArray) ToCSIPowerMaxSpecDriverControllerEnvsArrayOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIPowerMaxSpecDriverControllerEnvsOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverControllerEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverControllerEnvs)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverControllerEnvsOutput) ToCSIPowerMaxSpecDriverControllerEnvsOutput() CSIPowerMaxSpecDriverControllerEnvsOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsOutput) ToCSIPowerMaxSpecDriverControllerEnvsOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o CSIPowerMaxSpecDriverControllerEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o CSIPowerMaxSpecDriverControllerEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o CSIPowerMaxSpecDriverControllerEnvsOutput) ValueFrom() CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvs) *CSIPowerMaxSpecDriverControllerEnvsValueFrom {
		return v.ValueFrom
	}).(CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput)
}

type CSIPowerMaxSpecDriverControllerEnvsArrayOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverControllerEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxSpecDriverControllerEnvs)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverControllerEnvsArrayOutput) ToCSIPowerMaxSpecDriverControllerEnvsArrayOutput() CSIPowerMaxSpecDriverControllerEnvsArrayOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsArrayOutput) ToCSIPowerMaxSpecDriverControllerEnvsArrayOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsArrayOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsArrayOutput) Index(i pulumi.IntInput) CSIPowerMaxSpecDriverControllerEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIPowerMaxSpecDriverControllerEnvs {
		return vs[0].([]CSIPowerMaxSpecDriverControllerEnvs)[vs[1].(int)]
	}).(CSIPowerMaxSpecDriverControllerEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIPowerMaxSpecDriverControllerEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef *CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// CSIPowerMaxSpecDriverControllerEnvsValueFromInput is an input type that accepts CSIPowerMaxSpecDriverControllerEnvsValueFromArgs and CSIPowerMaxSpecDriverControllerEnvsValueFromOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverControllerEnvsValueFromInput` via:
//
//          CSIPowerMaxSpecDriverControllerEnvsValueFromArgs{...}
type CSIPowerMaxSpecDriverControllerEnvsValueFromInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverControllerEnvsValueFromOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromOutput
	ToCSIPowerMaxSpecDriverControllerEnvsValueFromOutputWithContext(context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIPowerMaxSpecDriverControllerEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (CSIPowerMaxSpecDriverControllerEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverControllerEnvsValueFrom)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromOutput {
	return i.ToCSIPowerMaxSpecDriverControllerEnvsValueFromOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerEnvsValueFromOutput)
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput {
	return i.ToCSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerEnvsValueFromOutput).ToCSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverControllerEnvsValueFromPtrInput is an input type that accepts CSIPowerMaxSpecDriverControllerEnvsValueFromArgs, CSIPowerMaxSpecDriverControllerEnvsValueFromPtr and CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverControllerEnvsValueFromPtrInput` via:
//
//          CSIPowerMaxSpecDriverControllerEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverControllerEnvsValueFromPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput
	ToCSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput
}

type csipowerMaxSpecDriverControllerEnvsValueFromPtrType CSIPowerMaxSpecDriverControllerEnvsValueFromArgs

func CSIPowerMaxSpecDriverControllerEnvsValueFromPtr(v *CSIPowerMaxSpecDriverControllerEnvsValueFromArgs) CSIPowerMaxSpecDriverControllerEnvsValueFromPtrInput {
	return (*csipowerMaxSpecDriverControllerEnvsValueFromPtrType)(v)
}

func (*csipowerMaxSpecDriverControllerEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverControllerEnvsValueFrom)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverControllerEnvsValueFromPtrType) ToCSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput {
	return i.ToCSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverControllerEnvsValueFromPtrType) ToCSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIPowerMaxSpecDriverControllerEnvsValueFromOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverControllerEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverControllerEnvsValueFrom)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput {
	return o.ToCSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvsValueFrom) *CSIPowerMaxSpecDriverControllerEnvsValueFrom {
		return &v
	}).(CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromOutput) ConfigMapKeyRef() CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvsValueFrom) *CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromOutput) FieldRef() CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvsValueFrom) *CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRef {
		return v.FieldRef
	}).(CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromOutput) ResourceFieldRef() CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvsValueFrom) *CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromOutput) SecretKeyRef() CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvsValueFrom) *CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput)
}

type CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverControllerEnvsValueFrom)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput) Elem() CSIPowerMaxSpecDriverControllerEnvsValueFromOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverControllerEnvsValueFrom) CSIPowerMaxSpecDriverControllerEnvsValueFrom {
		return *v
	}).(CSIPowerMaxSpecDriverControllerEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput) ConfigMapKeyRef() CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverControllerEnvsValueFrom) *CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput) FieldRef() CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverControllerEnvsValueFrom) *CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput) ResourceFieldRef() CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverControllerEnvsValueFrom) *CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput) SecretKeyRef() CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverControllerEnvsValueFrom) *CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefInput is an input type that accepts CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs and CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefInput` via:
//
//          CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs{...}
type CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput
	ToCSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return i.ToCSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput)
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput).ToCSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs, CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtr and CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput
	ToCSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput
}

type csipowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs

func CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtr(v *CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput {
	return (*csipowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*csipowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType) ToCSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType) ToCSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToCSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRef) *CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRef {
		return &v
	}).(CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) Elem() CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRef) CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRef {
		return *v
	}).(CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefInput is an input type that accepts CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefArgs and CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefInput` via:
//
//          CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefArgs{...}
type CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput
	ToCSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutputWithContext(context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRef)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput {
	return i.ToCSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput)
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput).ToCSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrInput is an input type that accepts CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefArgs, CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtr and CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrInput` via:
//
//          CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput
	ToCSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput
}

type csipowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrType CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefArgs

func CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtr(v *CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefArgs) CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrInput {
	return (*csipowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrType)(v)
}

func (*csipowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrType) ToCSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrType) ToCSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o.ToCSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRef) *CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRef {
		return &v
	}).(CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput) Elem() CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRef) CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRef {
		return *v
	}).(CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisor `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefInput is an input type that accepts CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefArgs and CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefInput` via:
//
//          CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefArgs{...}
type CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput
	ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutputWithContext(context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return i.ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput)
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput).ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrInput is an input type that accepts CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefArgs, CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtr and CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrInput` via:
//
//          CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput
	ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput
}

type csipowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrType CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefArgs

func CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtr(v *CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefArgs) CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrInput {
	return (*csipowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*csipowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrType) ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrType) ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRef) *CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRef {
		return &v
	}).(CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput) Divisor() CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRef) *CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisor {
		return v.Divisor
	}).(CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) Elem() CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRef) CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRef {
		return *v
	}).(CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) Divisor() CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRef) *CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisor {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

type CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisor struct {
}

// CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorInput is an input type that accepts CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs and CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorInput` via:
//
//          CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs{...}
type CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput
	ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput
}

type CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs struct {
}

func (CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput {
	return i.ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput)
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput).ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrInput is an input type that accepts CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs, CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtr and CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrInput` via:
//
//          CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput
	ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput
}

type csipowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrType CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs

func CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtr(v *CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs) CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrInput {
	return (*csipowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrType)(v)
}

func (*csipowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrType) ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrType) ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisor) *CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisor {
		return &v
	}).(CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput) Elem() CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisor) CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisor {
		return *v
	}).(CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefInput is an input type that accepts CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefArgs and CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefInput` via:
//
//          CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefArgs{...}
type CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput
	ToCSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutputWithContext(context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return i.ToCSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput)
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefArgs) ToCSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput).ToCSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrInput is an input type that accepts CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefArgs, CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtr and CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrInput` via:
//
//          CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput
	ToCSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput
}

type csipowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrType CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefArgs

func CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtr(v *CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefArgs) CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrInput {
	return (*csipowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*csipowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrType) ToCSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrType) ToCSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToCSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRef) *CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRef {
		return &v
	}).(CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) ToCSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) Elem() CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRef) CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRef {
		return *v
	}).(CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIPowerMaxSpecDriverControllerNodeSelector struct {
}

// CSIPowerMaxSpecDriverControllerNodeSelectorInput is an input type that accepts CSIPowerMaxSpecDriverControllerNodeSelectorArgs and CSIPowerMaxSpecDriverControllerNodeSelectorOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverControllerNodeSelectorInput` via:
//
//          CSIPowerMaxSpecDriverControllerNodeSelectorArgs{...}
type CSIPowerMaxSpecDriverControllerNodeSelectorInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverControllerNodeSelectorOutput() CSIPowerMaxSpecDriverControllerNodeSelectorOutput
	ToCSIPowerMaxSpecDriverControllerNodeSelectorOutputWithContext(context.Context) CSIPowerMaxSpecDriverControllerNodeSelectorOutput
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIPowerMaxSpecDriverControllerNodeSelectorArgs struct {
}

func (CSIPowerMaxSpecDriverControllerNodeSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverControllerNodeSelector)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverControllerNodeSelectorArgs) ToCSIPowerMaxSpecDriverControllerNodeSelectorOutput() CSIPowerMaxSpecDriverControllerNodeSelectorOutput {
	return i.ToCSIPowerMaxSpecDriverControllerNodeSelectorOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverControllerNodeSelectorArgs) ToCSIPowerMaxSpecDriverControllerNodeSelectorOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerNodeSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerNodeSelectorOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIPowerMaxSpecDriverControllerNodeSelectorOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverControllerNodeSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverControllerNodeSelector)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverControllerNodeSelectorOutput) ToCSIPowerMaxSpecDriverControllerNodeSelectorOutput() CSIPowerMaxSpecDriverControllerNodeSelectorOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerNodeSelectorOutput) ToCSIPowerMaxSpecDriverControllerNodeSelectorOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerNodeSelectorOutput {
	return o
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIPowerMaxSpecDriverControllerTolerations struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect *string `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key *string `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator *string `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds *int `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value *string `pulumi:"value"`
}

// CSIPowerMaxSpecDriverControllerTolerationsInput is an input type that accepts CSIPowerMaxSpecDriverControllerTolerationsArgs and CSIPowerMaxSpecDriverControllerTolerationsOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverControllerTolerationsInput` via:
//
//          CSIPowerMaxSpecDriverControllerTolerationsArgs{...}
type CSIPowerMaxSpecDriverControllerTolerationsInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverControllerTolerationsOutput() CSIPowerMaxSpecDriverControllerTolerationsOutput
	ToCSIPowerMaxSpecDriverControllerTolerationsOutputWithContext(context.Context) CSIPowerMaxSpecDriverControllerTolerationsOutput
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIPowerMaxSpecDriverControllerTolerationsArgs struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect pulumi.StringPtrInput `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds pulumi.IntPtrInput `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (CSIPowerMaxSpecDriverControllerTolerationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverControllerTolerations)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverControllerTolerationsArgs) ToCSIPowerMaxSpecDriverControllerTolerationsOutput() CSIPowerMaxSpecDriverControllerTolerationsOutput {
	return i.ToCSIPowerMaxSpecDriverControllerTolerationsOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverControllerTolerationsArgs) ToCSIPowerMaxSpecDriverControllerTolerationsOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerTolerationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerTolerationsOutput)
}

// CSIPowerMaxSpecDriverControllerTolerationsArrayInput is an input type that accepts CSIPowerMaxSpecDriverControllerTolerationsArray and CSIPowerMaxSpecDriverControllerTolerationsArrayOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverControllerTolerationsArrayInput` via:
//
//          CSIPowerMaxSpecDriverControllerTolerationsArray{ CSIPowerMaxSpecDriverControllerTolerationsArgs{...} }
type CSIPowerMaxSpecDriverControllerTolerationsArrayInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverControllerTolerationsArrayOutput() CSIPowerMaxSpecDriverControllerTolerationsArrayOutput
	ToCSIPowerMaxSpecDriverControllerTolerationsArrayOutputWithContext(context.Context) CSIPowerMaxSpecDriverControllerTolerationsArrayOutput
}

type CSIPowerMaxSpecDriverControllerTolerationsArray []CSIPowerMaxSpecDriverControllerTolerationsInput

func (CSIPowerMaxSpecDriverControllerTolerationsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxSpecDriverControllerTolerations)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverControllerTolerationsArray) ToCSIPowerMaxSpecDriverControllerTolerationsArrayOutput() CSIPowerMaxSpecDriverControllerTolerationsArrayOutput {
	return i.ToCSIPowerMaxSpecDriverControllerTolerationsArrayOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverControllerTolerationsArray) ToCSIPowerMaxSpecDriverControllerTolerationsArrayOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerTolerationsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverControllerTolerationsArrayOutput)
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIPowerMaxSpecDriverControllerTolerationsOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverControllerTolerationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverControllerTolerations)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverControllerTolerationsOutput) ToCSIPowerMaxSpecDriverControllerTolerationsOutput() CSIPowerMaxSpecDriverControllerTolerationsOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerTolerationsOutput) ToCSIPowerMaxSpecDriverControllerTolerationsOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerTolerationsOutput {
	return o
}

// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
func (o CSIPowerMaxSpecDriverControllerTolerationsOutput) Effect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerTolerations) *string { return v.Effect }).(pulumi.StringPtrOutput)
}

// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
func (o CSIPowerMaxSpecDriverControllerTolerationsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerTolerations) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
func (o CSIPowerMaxSpecDriverControllerTolerationsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerTolerations) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
func (o CSIPowerMaxSpecDriverControllerTolerationsOutput) TolerationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerTolerations) *int { return v.TolerationSeconds }).(pulumi.IntPtrOutput)
}

// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
func (o CSIPowerMaxSpecDriverControllerTolerationsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverControllerTolerations) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type CSIPowerMaxSpecDriverControllerTolerationsArrayOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverControllerTolerationsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxSpecDriverControllerTolerations)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverControllerTolerationsArrayOutput) ToCSIPowerMaxSpecDriverControllerTolerationsArrayOutput() CSIPowerMaxSpecDriverControllerTolerationsArrayOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerTolerationsArrayOutput) ToCSIPowerMaxSpecDriverControllerTolerationsArrayOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverControllerTolerationsArrayOutput {
	return o
}

func (o CSIPowerMaxSpecDriverControllerTolerationsArrayOutput) Index(i pulumi.IntInput) CSIPowerMaxSpecDriverControllerTolerationsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIPowerMaxSpecDriverControllerTolerations {
		return vs[0].([]CSIPowerMaxSpecDriverControllerTolerations)[vs[1].(int)]
	}).(CSIPowerMaxSpecDriverControllerTolerationsOutput)
}

// Node is the specification for Node plugin only
type CSIPowerMaxSpecDriverNode struct {
	// Args is the set of arguments for the container
	Args []string `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs []CSIPowerMaxSpecDriverNodeEnvs `pulumi:"envs"`
	// Image is the image tag for the Container
	Image *string `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name *string `pulumi:"name"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
	NodeSelector map[string]string `pulumi:"nodeSelector"`
	// Tolerations is the list of tolerations for the driver pods
	Tolerations []CSIPowerMaxSpecDriverNodeTolerations `pulumi:"tolerations"`
}

// CSIPowerMaxSpecDriverNodeInput is an input type that accepts CSIPowerMaxSpecDriverNodeArgs and CSIPowerMaxSpecDriverNodeOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverNodeInput` via:
//
//          CSIPowerMaxSpecDriverNodeArgs{...}
type CSIPowerMaxSpecDriverNodeInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverNodeOutput() CSIPowerMaxSpecDriverNodeOutput
	ToCSIPowerMaxSpecDriverNodeOutputWithContext(context.Context) CSIPowerMaxSpecDriverNodeOutput
}

// Node is the specification for Node plugin only
type CSIPowerMaxSpecDriverNodeArgs struct {
	// Args is the set of arguments for the container
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs CSIPowerMaxSpecDriverNodeEnvsArrayInput `pulumi:"envs"`
	// Image is the image tag for the Container
	Image pulumi.StringPtrInput `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name pulumi.StringPtrInput `pulumi:"name"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
	NodeSelector pulumi.StringMapInput `pulumi:"nodeSelector"`
	// Tolerations is the list of tolerations for the driver pods
	Tolerations CSIPowerMaxSpecDriverNodeTolerationsArrayInput `pulumi:"tolerations"`
}

func (CSIPowerMaxSpecDriverNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverNode)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverNodeArgs) ToCSIPowerMaxSpecDriverNodeOutput() CSIPowerMaxSpecDriverNodeOutput {
	return i.ToCSIPowerMaxSpecDriverNodeOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverNodeArgs) ToCSIPowerMaxSpecDriverNodeOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeOutput)
}

func (i CSIPowerMaxSpecDriverNodeArgs) ToCSIPowerMaxSpecDriverNodePtrOutput() CSIPowerMaxSpecDriverNodePtrOutput {
	return i.ToCSIPowerMaxSpecDriverNodePtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverNodeArgs) ToCSIPowerMaxSpecDriverNodePtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeOutput).ToCSIPowerMaxSpecDriverNodePtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverNodePtrInput is an input type that accepts CSIPowerMaxSpecDriverNodeArgs, CSIPowerMaxSpecDriverNodePtr and CSIPowerMaxSpecDriverNodePtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverNodePtrInput` via:
//
//          CSIPowerMaxSpecDriverNodeArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverNodePtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverNodePtrOutput() CSIPowerMaxSpecDriverNodePtrOutput
	ToCSIPowerMaxSpecDriverNodePtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverNodePtrOutput
}

type csipowerMaxSpecDriverNodePtrType CSIPowerMaxSpecDriverNodeArgs

func CSIPowerMaxSpecDriverNodePtr(v *CSIPowerMaxSpecDriverNodeArgs) CSIPowerMaxSpecDriverNodePtrInput {
	return (*csipowerMaxSpecDriverNodePtrType)(v)
}

func (*csipowerMaxSpecDriverNodePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverNode)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverNodePtrType) ToCSIPowerMaxSpecDriverNodePtrOutput() CSIPowerMaxSpecDriverNodePtrOutput {
	return i.ToCSIPowerMaxSpecDriverNodePtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverNodePtrType) ToCSIPowerMaxSpecDriverNodePtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodePtrOutput)
}

// Node is the specification for Node plugin only
type CSIPowerMaxSpecDriverNodeOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverNode)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverNodeOutput) ToCSIPowerMaxSpecDriverNodeOutput() CSIPowerMaxSpecDriverNodeOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeOutput) ToCSIPowerMaxSpecDriverNodeOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeOutput) ToCSIPowerMaxSpecDriverNodePtrOutput() CSIPowerMaxSpecDriverNodePtrOutput {
	return o.ToCSIPowerMaxSpecDriverNodePtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverNodeOutput) ToCSIPowerMaxSpecDriverNodePtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodePtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNode) *CSIPowerMaxSpecDriverNode {
		return &v
	}).(CSIPowerMaxSpecDriverNodePtrOutput)
}

// Args is the set of arguments for the container
func (o CSIPowerMaxSpecDriverNodeOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNode) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIPowerMaxSpecDriverNodeOutput) Envs() CSIPowerMaxSpecDriverNodeEnvsArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNode) []CSIPowerMaxSpecDriverNodeEnvs { return v.Envs }).(CSIPowerMaxSpecDriverNodeEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIPowerMaxSpecDriverNodeOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNode) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIPowerMaxSpecDriverNodeOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNode) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIPowerMaxSpecDriverNodeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNode) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
func (o CSIPowerMaxSpecDriverNodeOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNode) map[string]string { return v.NodeSelector }).(pulumi.StringMapOutput)
}

// Tolerations is the list of tolerations for the driver pods
func (o CSIPowerMaxSpecDriverNodeOutput) Tolerations() CSIPowerMaxSpecDriverNodeTolerationsArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNode) []CSIPowerMaxSpecDriverNodeTolerations { return v.Tolerations }).(CSIPowerMaxSpecDriverNodeTolerationsArrayOutput)
}

type CSIPowerMaxSpecDriverNodePtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverNodePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverNode)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverNodePtrOutput) ToCSIPowerMaxSpecDriverNodePtrOutput() CSIPowerMaxSpecDriverNodePtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodePtrOutput) ToCSIPowerMaxSpecDriverNodePtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodePtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodePtrOutput) Elem() CSIPowerMaxSpecDriverNodeOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNode) CSIPowerMaxSpecDriverNode { return *v }).(CSIPowerMaxSpecDriverNodeOutput)
}

// Args is the set of arguments for the container
func (o CSIPowerMaxSpecDriverNodePtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNode) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIPowerMaxSpecDriverNodePtrOutput) Envs() CSIPowerMaxSpecDriverNodeEnvsArrayOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNode) []CSIPowerMaxSpecDriverNodeEnvs {
		if v == nil {
			return nil
		}
		return v.Envs
	}).(CSIPowerMaxSpecDriverNodeEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIPowerMaxSpecDriverNodePtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNode) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIPowerMaxSpecDriverNodePtrOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNode) *string {
		if v == nil {
			return nil
		}
		return v.ImagePullPolicy
	}).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIPowerMaxSpecDriverNodePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNode) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
func (o CSIPowerMaxSpecDriverNodePtrOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNode) map[string]string {
		if v == nil {
			return nil
		}
		return v.NodeSelector
	}).(pulumi.StringMapOutput)
}

// Tolerations is the list of tolerations for the driver pods
func (o CSIPowerMaxSpecDriverNodePtrOutput) Tolerations() CSIPowerMaxSpecDriverNodeTolerationsArrayOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNode) []CSIPowerMaxSpecDriverNodeTolerations {
		if v == nil {
			return nil
		}
		return v.Tolerations
	}).(CSIPowerMaxSpecDriverNodeTolerationsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIPowerMaxSpecDriverNodeEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *CSIPowerMaxSpecDriverNodeEnvsValueFrom `pulumi:"valueFrom"`
}

// CSIPowerMaxSpecDriverNodeEnvsInput is an input type that accepts CSIPowerMaxSpecDriverNodeEnvsArgs and CSIPowerMaxSpecDriverNodeEnvsOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverNodeEnvsInput` via:
//
//          CSIPowerMaxSpecDriverNodeEnvsArgs{...}
type CSIPowerMaxSpecDriverNodeEnvsInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverNodeEnvsOutput() CSIPowerMaxSpecDriverNodeEnvsOutput
	ToCSIPowerMaxSpecDriverNodeEnvsOutputWithContext(context.Context) CSIPowerMaxSpecDriverNodeEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type CSIPowerMaxSpecDriverNodeEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom CSIPowerMaxSpecDriverNodeEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (CSIPowerMaxSpecDriverNodeEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverNodeEnvs)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverNodeEnvsArgs) ToCSIPowerMaxSpecDriverNodeEnvsOutput() CSIPowerMaxSpecDriverNodeEnvsOutput {
	return i.ToCSIPowerMaxSpecDriverNodeEnvsOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverNodeEnvsArgs) ToCSIPowerMaxSpecDriverNodeEnvsOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeEnvsOutput)
}

// CSIPowerMaxSpecDriverNodeEnvsArrayInput is an input type that accepts CSIPowerMaxSpecDriverNodeEnvsArray and CSIPowerMaxSpecDriverNodeEnvsArrayOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverNodeEnvsArrayInput` via:
//
//          CSIPowerMaxSpecDriverNodeEnvsArray{ CSIPowerMaxSpecDriverNodeEnvsArgs{...} }
type CSIPowerMaxSpecDriverNodeEnvsArrayInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverNodeEnvsArrayOutput() CSIPowerMaxSpecDriverNodeEnvsArrayOutput
	ToCSIPowerMaxSpecDriverNodeEnvsArrayOutputWithContext(context.Context) CSIPowerMaxSpecDriverNodeEnvsArrayOutput
}

type CSIPowerMaxSpecDriverNodeEnvsArray []CSIPowerMaxSpecDriverNodeEnvsInput

func (CSIPowerMaxSpecDriverNodeEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxSpecDriverNodeEnvs)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverNodeEnvsArray) ToCSIPowerMaxSpecDriverNodeEnvsArrayOutput() CSIPowerMaxSpecDriverNodeEnvsArrayOutput {
	return i.ToCSIPowerMaxSpecDriverNodeEnvsArrayOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverNodeEnvsArray) ToCSIPowerMaxSpecDriverNodeEnvsArrayOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIPowerMaxSpecDriverNodeEnvsOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverNodeEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverNodeEnvs)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverNodeEnvsOutput) ToCSIPowerMaxSpecDriverNodeEnvsOutput() CSIPowerMaxSpecDriverNodeEnvsOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsOutput) ToCSIPowerMaxSpecDriverNodeEnvsOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o CSIPowerMaxSpecDriverNodeEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o CSIPowerMaxSpecDriverNodeEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o CSIPowerMaxSpecDriverNodeEnvsOutput) ValueFrom() CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvs) *CSIPowerMaxSpecDriverNodeEnvsValueFrom { return v.ValueFrom }).(CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput)
}

type CSIPowerMaxSpecDriverNodeEnvsArrayOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverNodeEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxSpecDriverNodeEnvs)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverNodeEnvsArrayOutput) ToCSIPowerMaxSpecDriverNodeEnvsArrayOutput() CSIPowerMaxSpecDriverNodeEnvsArrayOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsArrayOutput) ToCSIPowerMaxSpecDriverNodeEnvsArrayOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsArrayOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsArrayOutput) Index(i pulumi.IntInput) CSIPowerMaxSpecDriverNodeEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIPowerMaxSpecDriverNodeEnvs {
		return vs[0].([]CSIPowerMaxSpecDriverNodeEnvs)[vs[1].(int)]
	}).(CSIPowerMaxSpecDriverNodeEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIPowerMaxSpecDriverNodeEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef *CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// CSIPowerMaxSpecDriverNodeEnvsValueFromInput is an input type that accepts CSIPowerMaxSpecDriverNodeEnvsValueFromArgs and CSIPowerMaxSpecDriverNodeEnvsValueFromOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverNodeEnvsValueFromInput` via:
//
//          CSIPowerMaxSpecDriverNodeEnvsValueFromArgs{...}
type CSIPowerMaxSpecDriverNodeEnvsValueFromInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverNodeEnvsValueFromOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromOutput
	ToCSIPowerMaxSpecDriverNodeEnvsValueFromOutputWithContext(context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIPowerMaxSpecDriverNodeEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (CSIPowerMaxSpecDriverNodeEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverNodeEnvsValueFrom)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromOutput {
	return i.ToCSIPowerMaxSpecDriverNodeEnvsValueFromOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeEnvsValueFromOutput)
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput {
	return i.ToCSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeEnvsValueFromOutput).ToCSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverNodeEnvsValueFromPtrInput is an input type that accepts CSIPowerMaxSpecDriverNodeEnvsValueFromArgs, CSIPowerMaxSpecDriverNodeEnvsValueFromPtr and CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverNodeEnvsValueFromPtrInput` via:
//
//          CSIPowerMaxSpecDriverNodeEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverNodeEnvsValueFromPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput
	ToCSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput
}

type csipowerMaxSpecDriverNodeEnvsValueFromPtrType CSIPowerMaxSpecDriverNodeEnvsValueFromArgs

func CSIPowerMaxSpecDriverNodeEnvsValueFromPtr(v *CSIPowerMaxSpecDriverNodeEnvsValueFromArgs) CSIPowerMaxSpecDriverNodeEnvsValueFromPtrInput {
	return (*csipowerMaxSpecDriverNodeEnvsValueFromPtrType)(v)
}

func (*csipowerMaxSpecDriverNodeEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverNodeEnvsValueFrom)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverNodeEnvsValueFromPtrType) ToCSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput {
	return i.ToCSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverNodeEnvsValueFromPtrType) ToCSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIPowerMaxSpecDriverNodeEnvsValueFromOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverNodeEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverNodeEnvsValueFrom)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput {
	return o.ToCSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvsValueFrom) *CSIPowerMaxSpecDriverNodeEnvsValueFrom {
		return &v
	}).(CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromOutput) ConfigMapKeyRef() CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvsValueFrom) *CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromOutput) FieldRef() CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvsValueFrom) *CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRef {
		return v.FieldRef
	}).(CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromOutput) ResourceFieldRef() CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvsValueFrom) *CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromOutput) SecretKeyRef() CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvsValueFrom) *CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput)
}

type CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverNodeEnvsValueFrom)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput) Elem() CSIPowerMaxSpecDriverNodeEnvsValueFromOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNodeEnvsValueFrom) CSIPowerMaxSpecDriverNodeEnvsValueFrom { return *v }).(CSIPowerMaxSpecDriverNodeEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput) ConfigMapKeyRef() CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNodeEnvsValueFrom) *CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput) FieldRef() CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNodeEnvsValueFrom) *CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput) ResourceFieldRef() CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNodeEnvsValueFrom) *CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput) SecretKeyRef() CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNodeEnvsValueFrom) *CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefInput is an input type that accepts CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs and CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefInput` via:
//
//          CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs{...}
type CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput
	ToCSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return i.ToCSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput)
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput).ToCSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs, CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtr and CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput
	ToCSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput
}

type csipowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs

func CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtr(v *CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput {
	return (*csipowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*csipowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType) ToCSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType) ToCSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToCSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRef) *CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRef {
		return &v
	}).(CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) Elem() CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRef) CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRef {
		return *v
	}).(CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefInput is an input type that accepts CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefArgs and CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefInput` via:
//
//          CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefArgs{...}
type CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput
	ToCSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutputWithContext(context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRef)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput {
	return i.ToCSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput)
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput).ToCSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrInput is an input type that accepts CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefArgs, CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtr and CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrInput` via:
//
//          CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput
	ToCSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput
}

type csipowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrType CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefArgs

func CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtr(v *CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefArgs) CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrInput {
	return (*csipowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrType)(v)
}

func (*csipowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrType) ToCSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrType) ToCSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o.ToCSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRef) *CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRef {
		return &v
	}).(CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput) Elem() CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRef) CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRef {
		return *v
	}).(CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisor `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefInput is an input type that accepts CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefArgs and CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefInput` via:
//
//          CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefArgs{...}
type CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput
	ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutputWithContext(context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return i.ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput)
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput).ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrInput is an input type that accepts CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefArgs, CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtr and CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrInput` via:
//
//          CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput
	ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput
}

type csipowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrType CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefArgs

func CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtr(v *CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefArgs) CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrInput {
	return (*csipowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*csipowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrType) ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrType) ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRef) *CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRef {
		return &v
	}).(CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput) Divisor() CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRef) *CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisor {
		return v.Divisor
	}).(CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) Elem() CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRef) CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRef {
		return *v
	}).(CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) Divisor() CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRef) *CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisor {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

type CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisor struct {
}

// CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorInput is an input type that accepts CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs and CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorInput` via:
//
//          CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs{...}
type CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput
	ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput
}

type CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs struct {
}

func (CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput {
	return i.ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput)
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput).ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrInput is an input type that accepts CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs, CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtr and CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrInput` via:
//
//          CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput
	ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput
}

type csipowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrType CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs

func CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtr(v *CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs) CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrInput {
	return (*csipowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrType)(v)
}

func (*csipowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrType) ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrType) ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisor) *CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisor {
		return &v
	}).(CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput) Elem() CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisor) CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisor {
		return *v
	}).(CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefInput is an input type that accepts CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefArgs and CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefInput` via:
//
//          CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefArgs{...}
type CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput
	ToCSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutputWithContext(context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return i.ToCSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput)
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefArgs) ToCSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput).ToCSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrInput is an input type that accepts CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefArgs, CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtr and CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrInput` via:
//
//          CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput
	ToCSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput
}

type csipowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrType CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefArgs

func CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtr(v *CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefArgs) CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrInput {
	return (*csipowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*csipowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrType) ToCSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrType) ToCSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToCSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRef) *CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRef {
		return &v
	}).(CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) ToCSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) Elem() CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRef) CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRef {
		return *v
	}).(CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIPowerMaxSpecDriverNodeNodeSelector struct {
}

// CSIPowerMaxSpecDriverNodeNodeSelectorInput is an input type that accepts CSIPowerMaxSpecDriverNodeNodeSelectorArgs and CSIPowerMaxSpecDriverNodeNodeSelectorOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverNodeNodeSelectorInput` via:
//
//          CSIPowerMaxSpecDriverNodeNodeSelectorArgs{...}
type CSIPowerMaxSpecDriverNodeNodeSelectorInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverNodeNodeSelectorOutput() CSIPowerMaxSpecDriverNodeNodeSelectorOutput
	ToCSIPowerMaxSpecDriverNodeNodeSelectorOutputWithContext(context.Context) CSIPowerMaxSpecDriverNodeNodeSelectorOutput
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIPowerMaxSpecDriverNodeNodeSelectorArgs struct {
}

func (CSIPowerMaxSpecDriverNodeNodeSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverNodeNodeSelector)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverNodeNodeSelectorArgs) ToCSIPowerMaxSpecDriverNodeNodeSelectorOutput() CSIPowerMaxSpecDriverNodeNodeSelectorOutput {
	return i.ToCSIPowerMaxSpecDriverNodeNodeSelectorOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverNodeNodeSelectorArgs) ToCSIPowerMaxSpecDriverNodeNodeSelectorOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeNodeSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeNodeSelectorOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIPowerMaxSpecDriverNodeNodeSelectorOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverNodeNodeSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverNodeNodeSelector)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverNodeNodeSelectorOutput) ToCSIPowerMaxSpecDriverNodeNodeSelectorOutput() CSIPowerMaxSpecDriverNodeNodeSelectorOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeNodeSelectorOutput) ToCSIPowerMaxSpecDriverNodeNodeSelectorOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeNodeSelectorOutput {
	return o
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIPowerMaxSpecDriverNodeTolerations struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect *string `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key *string `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator *string `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds *int `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value *string `pulumi:"value"`
}

// CSIPowerMaxSpecDriverNodeTolerationsInput is an input type that accepts CSIPowerMaxSpecDriverNodeTolerationsArgs and CSIPowerMaxSpecDriverNodeTolerationsOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverNodeTolerationsInput` via:
//
//          CSIPowerMaxSpecDriverNodeTolerationsArgs{...}
type CSIPowerMaxSpecDriverNodeTolerationsInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverNodeTolerationsOutput() CSIPowerMaxSpecDriverNodeTolerationsOutput
	ToCSIPowerMaxSpecDriverNodeTolerationsOutputWithContext(context.Context) CSIPowerMaxSpecDriverNodeTolerationsOutput
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIPowerMaxSpecDriverNodeTolerationsArgs struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect pulumi.StringPtrInput `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds pulumi.IntPtrInput `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (CSIPowerMaxSpecDriverNodeTolerationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverNodeTolerations)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverNodeTolerationsArgs) ToCSIPowerMaxSpecDriverNodeTolerationsOutput() CSIPowerMaxSpecDriverNodeTolerationsOutput {
	return i.ToCSIPowerMaxSpecDriverNodeTolerationsOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverNodeTolerationsArgs) ToCSIPowerMaxSpecDriverNodeTolerationsOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeTolerationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeTolerationsOutput)
}

// CSIPowerMaxSpecDriverNodeTolerationsArrayInput is an input type that accepts CSIPowerMaxSpecDriverNodeTolerationsArray and CSIPowerMaxSpecDriverNodeTolerationsArrayOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverNodeTolerationsArrayInput` via:
//
//          CSIPowerMaxSpecDriverNodeTolerationsArray{ CSIPowerMaxSpecDriverNodeTolerationsArgs{...} }
type CSIPowerMaxSpecDriverNodeTolerationsArrayInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverNodeTolerationsArrayOutput() CSIPowerMaxSpecDriverNodeTolerationsArrayOutput
	ToCSIPowerMaxSpecDriverNodeTolerationsArrayOutputWithContext(context.Context) CSIPowerMaxSpecDriverNodeTolerationsArrayOutput
}

type CSIPowerMaxSpecDriverNodeTolerationsArray []CSIPowerMaxSpecDriverNodeTolerationsInput

func (CSIPowerMaxSpecDriverNodeTolerationsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxSpecDriverNodeTolerations)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverNodeTolerationsArray) ToCSIPowerMaxSpecDriverNodeTolerationsArrayOutput() CSIPowerMaxSpecDriverNodeTolerationsArrayOutput {
	return i.ToCSIPowerMaxSpecDriverNodeTolerationsArrayOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverNodeTolerationsArray) ToCSIPowerMaxSpecDriverNodeTolerationsArrayOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeTolerationsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverNodeTolerationsArrayOutput)
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIPowerMaxSpecDriverNodeTolerationsOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverNodeTolerationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverNodeTolerations)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverNodeTolerationsOutput) ToCSIPowerMaxSpecDriverNodeTolerationsOutput() CSIPowerMaxSpecDriverNodeTolerationsOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeTolerationsOutput) ToCSIPowerMaxSpecDriverNodeTolerationsOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeTolerationsOutput {
	return o
}

// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
func (o CSIPowerMaxSpecDriverNodeTolerationsOutput) Effect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeTolerations) *string { return v.Effect }).(pulumi.StringPtrOutput)
}

// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
func (o CSIPowerMaxSpecDriverNodeTolerationsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeTolerations) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
func (o CSIPowerMaxSpecDriverNodeTolerationsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeTolerations) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
func (o CSIPowerMaxSpecDriverNodeTolerationsOutput) TolerationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeTolerations) *int { return v.TolerationSeconds }).(pulumi.IntPtrOutput)
}

// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
func (o CSIPowerMaxSpecDriverNodeTolerationsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverNodeTolerations) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type CSIPowerMaxSpecDriverNodeTolerationsArrayOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverNodeTolerationsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxSpecDriverNodeTolerations)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverNodeTolerationsArrayOutput) ToCSIPowerMaxSpecDriverNodeTolerationsArrayOutput() CSIPowerMaxSpecDriverNodeTolerationsArrayOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeTolerationsArrayOutput) ToCSIPowerMaxSpecDriverNodeTolerationsArrayOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverNodeTolerationsArrayOutput {
	return o
}

func (o CSIPowerMaxSpecDriverNodeTolerationsArrayOutput) Index(i pulumi.IntInput) CSIPowerMaxSpecDriverNodeTolerationsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIPowerMaxSpecDriverNodeTolerations {
		return vs[0].([]CSIPowerMaxSpecDriverNodeTolerations)[vs[1].(int)]
	}).(CSIPowerMaxSpecDriverNodeTolerationsOutput)
}

// ContainerTemplate - Structure representing a container
type CSIPowerMaxSpecDriverSideCars struct {
	// Args is the set of arguments for the container
	Args []string `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs []CSIPowerMaxSpecDriverSideCarsEnvs `pulumi:"envs"`
	// Image is the image tag for the Container
	Image *string `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name *string `pulumi:"name"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
	NodeSelector map[string]string `pulumi:"nodeSelector"`
	// Tolerations is the list of tolerations for the driver pods
	Tolerations []CSIPowerMaxSpecDriverSideCarsTolerations `pulumi:"tolerations"`
}

// CSIPowerMaxSpecDriverSideCarsInput is an input type that accepts CSIPowerMaxSpecDriverSideCarsArgs and CSIPowerMaxSpecDriverSideCarsOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverSideCarsInput` via:
//
//          CSIPowerMaxSpecDriverSideCarsArgs{...}
type CSIPowerMaxSpecDriverSideCarsInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverSideCarsOutput() CSIPowerMaxSpecDriverSideCarsOutput
	ToCSIPowerMaxSpecDriverSideCarsOutputWithContext(context.Context) CSIPowerMaxSpecDriverSideCarsOutput
}

// ContainerTemplate - Structure representing a container
type CSIPowerMaxSpecDriverSideCarsArgs struct {
	// Args is the set of arguments for the container
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs CSIPowerMaxSpecDriverSideCarsEnvsArrayInput `pulumi:"envs"`
	// Image is the image tag for the Container
	Image pulumi.StringPtrInput `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name pulumi.StringPtrInput `pulumi:"name"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
	NodeSelector pulumi.StringMapInput `pulumi:"nodeSelector"`
	// Tolerations is the list of tolerations for the driver pods
	Tolerations CSIPowerMaxSpecDriverSideCarsTolerationsArrayInput `pulumi:"tolerations"`
}

func (CSIPowerMaxSpecDriverSideCarsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverSideCars)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverSideCarsArgs) ToCSIPowerMaxSpecDriverSideCarsOutput() CSIPowerMaxSpecDriverSideCarsOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverSideCarsArgs) ToCSIPowerMaxSpecDriverSideCarsOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsOutput)
}

// CSIPowerMaxSpecDriverSideCarsArrayInput is an input type that accepts CSIPowerMaxSpecDriverSideCarsArray and CSIPowerMaxSpecDriverSideCarsArrayOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverSideCarsArrayInput` via:
//
//          CSIPowerMaxSpecDriverSideCarsArray{ CSIPowerMaxSpecDriverSideCarsArgs{...} }
type CSIPowerMaxSpecDriverSideCarsArrayInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverSideCarsArrayOutput() CSIPowerMaxSpecDriverSideCarsArrayOutput
	ToCSIPowerMaxSpecDriverSideCarsArrayOutputWithContext(context.Context) CSIPowerMaxSpecDriverSideCarsArrayOutput
}

type CSIPowerMaxSpecDriverSideCarsArray []CSIPowerMaxSpecDriverSideCarsInput

func (CSIPowerMaxSpecDriverSideCarsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxSpecDriverSideCars)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverSideCarsArray) ToCSIPowerMaxSpecDriverSideCarsArrayOutput() CSIPowerMaxSpecDriverSideCarsArrayOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsArrayOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverSideCarsArray) ToCSIPowerMaxSpecDriverSideCarsArrayOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsArrayOutput)
}

// ContainerTemplate - Structure representing a container
type CSIPowerMaxSpecDriverSideCarsOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverSideCarsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverSideCars)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverSideCarsOutput) ToCSIPowerMaxSpecDriverSideCarsOutput() CSIPowerMaxSpecDriverSideCarsOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsOutput) ToCSIPowerMaxSpecDriverSideCarsOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsOutput {
	return o
}

// Args is the set of arguments for the container
func (o CSIPowerMaxSpecDriverSideCarsOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCars) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIPowerMaxSpecDriverSideCarsOutput) Envs() CSIPowerMaxSpecDriverSideCarsEnvsArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCars) []CSIPowerMaxSpecDriverSideCarsEnvs { return v.Envs }).(CSIPowerMaxSpecDriverSideCarsEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIPowerMaxSpecDriverSideCarsOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCars) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIPowerMaxSpecDriverSideCarsOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCars) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIPowerMaxSpecDriverSideCarsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCars) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
func (o CSIPowerMaxSpecDriverSideCarsOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCars) map[string]string { return v.NodeSelector }).(pulumi.StringMapOutput)
}

// Tolerations is the list of tolerations for the driver pods
func (o CSIPowerMaxSpecDriverSideCarsOutput) Tolerations() CSIPowerMaxSpecDriverSideCarsTolerationsArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCars) []CSIPowerMaxSpecDriverSideCarsTolerations { return v.Tolerations }).(CSIPowerMaxSpecDriverSideCarsTolerationsArrayOutput)
}

type CSIPowerMaxSpecDriverSideCarsArrayOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverSideCarsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxSpecDriverSideCars)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverSideCarsArrayOutput) ToCSIPowerMaxSpecDriverSideCarsArrayOutput() CSIPowerMaxSpecDriverSideCarsArrayOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsArrayOutput) ToCSIPowerMaxSpecDriverSideCarsArrayOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsArrayOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsArrayOutput) Index(i pulumi.IntInput) CSIPowerMaxSpecDriverSideCarsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIPowerMaxSpecDriverSideCars {
		return vs[0].([]CSIPowerMaxSpecDriverSideCars)[vs[1].(int)]
	}).(CSIPowerMaxSpecDriverSideCarsOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIPowerMaxSpecDriverSideCarsEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *CSIPowerMaxSpecDriverSideCarsEnvsValueFrom `pulumi:"valueFrom"`
}

// CSIPowerMaxSpecDriverSideCarsEnvsInput is an input type that accepts CSIPowerMaxSpecDriverSideCarsEnvsArgs and CSIPowerMaxSpecDriverSideCarsEnvsOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverSideCarsEnvsInput` via:
//
//          CSIPowerMaxSpecDriverSideCarsEnvsArgs{...}
type CSIPowerMaxSpecDriverSideCarsEnvsInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverSideCarsEnvsOutput() CSIPowerMaxSpecDriverSideCarsEnvsOutput
	ToCSIPowerMaxSpecDriverSideCarsEnvsOutputWithContext(context.Context) CSIPowerMaxSpecDriverSideCarsEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type CSIPowerMaxSpecDriverSideCarsEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (CSIPowerMaxSpecDriverSideCarsEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverSideCarsEnvs)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsOutput() CSIPowerMaxSpecDriverSideCarsEnvsOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsEnvsOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsEnvsOutput)
}

// CSIPowerMaxSpecDriverSideCarsEnvsArrayInput is an input type that accepts CSIPowerMaxSpecDriverSideCarsEnvsArray and CSIPowerMaxSpecDriverSideCarsEnvsArrayOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverSideCarsEnvsArrayInput` via:
//
//          CSIPowerMaxSpecDriverSideCarsEnvsArray{ CSIPowerMaxSpecDriverSideCarsEnvsArgs{...} }
type CSIPowerMaxSpecDriverSideCarsEnvsArrayInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverSideCarsEnvsArrayOutput() CSIPowerMaxSpecDriverSideCarsEnvsArrayOutput
	ToCSIPowerMaxSpecDriverSideCarsEnvsArrayOutputWithContext(context.Context) CSIPowerMaxSpecDriverSideCarsEnvsArrayOutput
}

type CSIPowerMaxSpecDriverSideCarsEnvsArray []CSIPowerMaxSpecDriverSideCarsEnvsInput

func (CSIPowerMaxSpecDriverSideCarsEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxSpecDriverSideCarsEnvs)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsArray) ToCSIPowerMaxSpecDriverSideCarsEnvsArrayOutput() CSIPowerMaxSpecDriverSideCarsEnvsArrayOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsEnvsArrayOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsArray) ToCSIPowerMaxSpecDriverSideCarsEnvsArrayOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIPowerMaxSpecDriverSideCarsEnvsOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverSideCarsEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverSideCarsEnvs)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsOutput() CSIPowerMaxSpecDriverSideCarsEnvsOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o CSIPowerMaxSpecDriverSideCarsEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o CSIPowerMaxSpecDriverSideCarsEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o CSIPowerMaxSpecDriverSideCarsEnvsOutput) ValueFrom() CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvs) *CSIPowerMaxSpecDriverSideCarsEnvsValueFrom {
		return v.ValueFrom
	}).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput)
}

type CSIPowerMaxSpecDriverSideCarsEnvsArrayOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverSideCarsEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxSpecDriverSideCarsEnvs)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsArrayOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsArrayOutput() CSIPowerMaxSpecDriverSideCarsEnvsArrayOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsArrayOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsArrayOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsArrayOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsArrayOutput) Index(i pulumi.IntInput) CSIPowerMaxSpecDriverSideCarsEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIPowerMaxSpecDriverSideCarsEnvs {
		return vs[0].([]CSIPowerMaxSpecDriverSideCarsEnvs)[vs[1].(int)]
	}).(CSIPowerMaxSpecDriverSideCarsEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIPowerMaxSpecDriverSideCarsEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef *CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// CSIPowerMaxSpecDriverSideCarsEnvsValueFromInput is an input type that accepts CSIPowerMaxSpecDriverSideCarsEnvsValueFromArgs and CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverSideCarsEnvsValueFromInput` via:
//
//          CSIPowerMaxSpecDriverSideCarsEnvsValueFromArgs{...}
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput
	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromOutputWithContext(context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (CSIPowerMaxSpecDriverSideCarsEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverSideCarsEnvsValueFrom)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput)
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput).ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrInput is an input type that accepts CSIPowerMaxSpecDriverSideCarsEnvsValueFromArgs, CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtr and CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrInput` via:
//
//          CSIPowerMaxSpecDriverSideCarsEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput
	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput
}

type csipowerMaxSpecDriverSideCarsEnvsValueFromPtrType CSIPowerMaxSpecDriverSideCarsEnvsValueFromArgs

func CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtr(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFromArgs) CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrInput {
	return (*csipowerMaxSpecDriverSideCarsEnvsValueFromPtrType)(v)
}

func (*csipowerMaxSpecDriverSideCarsEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverSideCarsEnvsValueFrom)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverSideCarsEnvsValueFromPtrType) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverSideCarsEnvsValueFromPtrType) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverSideCarsEnvsValueFrom)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput {
	return o.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvsValueFrom) *CSIPowerMaxSpecDriverSideCarsEnvsValueFrom {
		return &v
	}).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput) ConfigMapKeyRef() CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvsValueFrom) *CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput) FieldRef() CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvsValueFrom) *CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRef {
		return v.FieldRef
	}).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput) ResourceFieldRef() CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvsValueFrom) *CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput) SecretKeyRef() CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvsValueFrom) *CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput)
}

type CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverSideCarsEnvsValueFrom)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput) Elem() CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFrom) CSIPowerMaxSpecDriverSideCarsEnvsValueFrom {
		return *v
	}).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput) ConfigMapKeyRef() CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFrom) *CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput) FieldRef() CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFrom) *CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput) ResourceFieldRef() CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFrom) *CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput) SecretKeyRef() CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFrom) *CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefInput is an input type that accepts CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs and CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefInput` via:
//
//          CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs{...}
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput
	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput)
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput).ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs, CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtr and CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput
	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput
}

type csipowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs

func CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtr(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput {
	return (*csipowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*csipowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
		return &v
	}).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) Elem() CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
		return *v
	}).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefInput is an input type that accepts CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefArgs and CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefInput` via:
//
//          CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefArgs{...}
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput
	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutputWithContext(context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRef)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput)
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput).ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrInput is an input type that accepts CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefArgs, CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtr and CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrInput` via:
//
//          CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput
	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput
}

type csipowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrType CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefArgs

func CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtr(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefArgs) CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrInput {
	return (*csipowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrType)(v)
}

func (*csipowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrType) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrType) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRef) *CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRef {
		return &v
	}).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) Elem() CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRef) CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRef {
		return *v
	}).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefInput is an input type that accepts CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs and CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefInput` via:
//
//          CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs{...}
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput
	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutputWithContext(context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput)
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput).ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput is an input type that accepts CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs, CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtr and CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput` via:
//
//          CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput
	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput
}

type csipowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs

func CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtr(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput {
	return (*csipowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*csipowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRef) *CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRef {
		return &v
	}).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) Divisor() CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRef) *CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor {
		return v.Divisor
	}).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) Elem() CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRef) CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRef {
		return *v
	}).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) Divisor() CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRef) *CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

type CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor struct {
}

// CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorInput is an input type that accepts CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs and CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorInput` via:
//
//          CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs{...}
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput
	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput
}

type CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs struct {
}

func (CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput)
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput).ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrInput is an input type that accepts CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs, CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtr and CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrInput` via:
//
//          CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput
	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput
}

type csipowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrType CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs

func CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtr(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs) CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrInput {
	return (*csipowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrType)(v)
}

func (*csipowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrType) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrType) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor) *CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor {
		return &v
	}).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput) Elem() CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor) CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor {
		return *v
	}).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefInput is an input type that accepts CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs and CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefInput` via:
//
//          CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs{...}
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput
	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutputWithContext(context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput)
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput).ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput is an input type that accepts CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs, CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtr and CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput` via:
//
//          CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput
	ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput
}

type csipowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs

func CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtr(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput {
	return (*csipowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*csipowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *csipowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRef) *CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRef {
		return &v
	}).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) ToCSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) Elem() CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRef) CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRef {
		return *v
	}).(CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIPowerMaxSpecDriverSideCarsNodeSelector struct {
}

// CSIPowerMaxSpecDriverSideCarsNodeSelectorInput is an input type that accepts CSIPowerMaxSpecDriverSideCarsNodeSelectorArgs and CSIPowerMaxSpecDriverSideCarsNodeSelectorOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverSideCarsNodeSelectorInput` via:
//
//          CSIPowerMaxSpecDriverSideCarsNodeSelectorArgs{...}
type CSIPowerMaxSpecDriverSideCarsNodeSelectorInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverSideCarsNodeSelectorOutput() CSIPowerMaxSpecDriverSideCarsNodeSelectorOutput
	ToCSIPowerMaxSpecDriverSideCarsNodeSelectorOutputWithContext(context.Context) CSIPowerMaxSpecDriverSideCarsNodeSelectorOutput
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIPowerMaxSpecDriverSideCarsNodeSelectorArgs struct {
}

func (CSIPowerMaxSpecDriverSideCarsNodeSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverSideCarsNodeSelector)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverSideCarsNodeSelectorArgs) ToCSIPowerMaxSpecDriverSideCarsNodeSelectorOutput() CSIPowerMaxSpecDriverSideCarsNodeSelectorOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsNodeSelectorOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverSideCarsNodeSelectorArgs) ToCSIPowerMaxSpecDriverSideCarsNodeSelectorOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsNodeSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsNodeSelectorOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIPowerMaxSpecDriverSideCarsNodeSelectorOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverSideCarsNodeSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverSideCarsNodeSelector)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverSideCarsNodeSelectorOutput) ToCSIPowerMaxSpecDriverSideCarsNodeSelectorOutput() CSIPowerMaxSpecDriverSideCarsNodeSelectorOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsNodeSelectorOutput) ToCSIPowerMaxSpecDriverSideCarsNodeSelectorOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsNodeSelectorOutput {
	return o
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIPowerMaxSpecDriverSideCarsTolerations struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect *string `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key *string `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator *string `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds *int `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value *string `pulumi:"value"`
}

// CSIPowerMaxSpecDriverSideCarsTolerationsInput is an input type that accepts CSIPowerMaxSpecDriverSideCarsTolerationsArgs and CSIPowerMaxSpecDriverSideCarsTolerationsOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverSideCarsTolerationsInput` via:
//
//          CSIPowerMaxSpecDriverSideCarsTolerationsArgs{...}
type CSIPowerMaxSpecDriverSideCarsTolerationsInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverSideCarsTolerationsOutput() CSIPowerMaxSpecDriverSideCarsTolerationsOutput
	ToCSIPowerMaxSpecDriverSideCarsTolerationsOutputWithContext(context.Context) CSIPowerMaxSpecDriverSideCarsTolerationsOutput
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIPowerMaxSpecDriverSideCarsTolerationsArgs struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect pulumi.StringPtrInput `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds pulumi.IntPtrInput `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (CSIPowerMaxSpecDriverSideCarsTolerationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverSideCarsTolerations)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverSideCarsTolerationsArgs) ToCSIPowerMaxSpecDriverSideCarsTolerationsOutput() CSIPowerMaxSpecDriverSideCarsTolerationsOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsTolerationsOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverSideCarsTolerationsArgs) ToCSIPowerMaxSpecDriverSideCarsTolerationsOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsTolerationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsTolerationsOutput)
}

// CSIPowerMaxSpecDriverSideCarsTolerationsArrayInput is an input type that accepts CSIPowerMaxSpecDriverSideCarsTolerationsArray and CSIPowerMaxSpecDriverSideCarsTolerationsArrayOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverSideCarsTolerationsArrayInput` via:
//
//          CSIPowerMaxSpecDriverSideCarsTolerationsArray{ CSIPowerMaxSpecDriverSideCarsTolerationsArgs{...} }
type CSIPowerMaxSpecDriverSideCarsTolerationsArrayInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverSideCarsTolerationsArrayOutput() CSIPowerMaxSpecDriverSideCarsTolerationsArrayOutput
	ToCSIPowerMaxSpecDriverSideCarsTolerationsArrayOutputWithContext(context.Context) CSIPowerMaxSpecDriverSideCarsTolerationsArrayOutput
}

type CSIPowerMaxSpecDriverSideCarsTolerationsArray []CSIPowerMaxSpecDriverSideCarsTolerationsInput

func (CSIPowerMaxSpecDriverSideCarsTolerationsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxSpecDriverSideCarsTolerations)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverSideCarsTolerationsArray) ToCSIPowerMaxSpecDriverSideCarsTolerationsArrayOutput() CSIPowerMaxSpecDriverSideCarsTolerationsArrayOutput {
	return i.ToCSIPowerMaxSpecDriverSideCarsTolerationsArrayOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverSideCarsTolerationsArray) ToCSIPowerMaxSpecDriverSideCarsTolerationsArrayOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsTolerationsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSideCarsTolerationsArrayOutput)
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIPowerMaxSpecDriverSideCarsTolerationsOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverSideCarsTolerationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverSideCarsTolerations)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverSideCarsTolerationsOutput) ToCSIPowerMaxSpecDriverSideCarsTolerationsOutput() CSIPowerMaxSpecDriverSideCarsTolerationsOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsTolerationsOutput) ToCSIPowerMaxSpecDriverSideCarsTolerationsOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsTolerationsOutput {
	return o
}

// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
func (o CSIPowerMaxSpecDriverSideCarsTolerationsOutput) Effect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsTolerations) *string { return v.Effect }).(pulumi.StringPtrOutput)
}

// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
func (o CSIPowerMaxSpecDriverSideCarsTolerationsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsTolerations) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
func (o CSIPowerMaxSpecDriverSideCarsTolerationsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsTolerations) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
func (o CSIPowerMaxSpecDriverSideCarsTolerationsOutput) TolerationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsTolerations) *int { return v.TolerationSeconds }).(pulumi.IntPtrOutput)
}

// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
func (o CSIPowerMaxSpecDriverSideCarsTolerationsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSideCarsTolerations) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type CSIPowerMaxSpecDriverSideCarsTolerationsArrayOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverSideCarsTolerationsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxSpecDriverSideCarsTolerations)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverSideCarsTolerationsArrayOutput) ToCSIPowerMaxSpecDriverSideCarsTolerationsArrayOutput() CSIPowerMaxSpecDriverSideCarsTolerationsArrayOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsTolerationsArrayOutput) ToCSIPowerMaxSpecDriverSideCarsTolerationsArrayOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSideCarsTolerationsArrayOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSideCarsTolerationsArrayOutput) Index(i pulumi.IntInput) CSIPowerMaxSpecDriverSideCarsTolerationsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIPowerMaxSpecDriverSideCarsTolerations {
		return vs[0].([]CSIPowerMaxSpecDriverSideCarsTolerations)[vs[1].(int)]
	}).(CSIPowerMaxSpecDriverSideCarsTolerationsOutput)
}

// SnapshotClass represents a VolumeSnapshotClass
type CSIPowerMaxSpecDriverSnapshotClass struct {
	// Name is the name of the Snapshot Class
	Name string `pulumi:"name"`
	// Parameters is a map of driver specific parameters for snapshot class
	Parameters map[string]string `pulumi:"parameters"`
}

// CSIPowerMaxSpecDriverSnapshotClassInput is an input type that accepts CSIPowerMaxSpecDriverSnapshotClassArgs and CSIPowerMaxSpecDriverSnapshotClassOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverSnapshotClassInput` via:
//
//          CSIPowerMaxSpecDriverSnapshotClassArgs{...}
type CSIPowerMaxSpecDriverSnapshotClassInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverSnapshotClassOutput() CSIPowerMaxSpecDriverSnapshotClassOutput
	ToCSIPowerMaxSpecDriverSnapshotClassOutputWithContext(context.Context) CSIPowerMaxSpecDriverSnapshotClassOutput
}

// SnapshotClass represents a VolumeSnapshotClass
type CSIPowerMaxSpecDriverSnapshotClassArgs struct {
	// Name is the name of the Snapshot Class
	Name pulumi.StringInput `pulumi:"name"`
	// Parameters is a map of driver specific parameters for snapshot class
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
}

func (CSIPowerMaxSpecDriverSnapshotClassArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverSnapshotClass)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverSnapshotClassArgs) ToCSIPowerMaxSpecDriverSnapshotClassOutput() CSIPowerMaxSpecDriverSnapshotClassOutput {
	return i.ToCSIPowerMaxSpecDriverSnapshotClassOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverSnapshotClassArgs) ToCSIPowerMaxSpecDriverSnapshotClassOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSnapshotClassOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSnapshotClassOutput)
}

// CSIPowerMaxSpecDriverSnapshotClassArrayInput is an input type that accepts CSIPowerMaxSpecDriverSnapshotClassArray and CSIPowerMaxSpecDriverSnapshotClassArrayOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverSnapshotClassArrayInput` via:
//
//          CSIPowerMaxSpecDriverSnapshotClassArray{ CSIPowerMaxSpecDriverSnapshotClassArgs{...} }
type CSIPowerMaxSpecDriverSnapshotClassArrayInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverSnapshotClassArrayOutput() CSIPowerMaxSpecDriverSnapshotClassArrayOutput
	ToCSIPowerMaxSpecDriverSnapshotClassArrayOutputWithContext(context.Context) CSIPowerMaxSpecDriverSnapshotClassArrayOutput
}

type CSIPowerMaxSpecDriverSnapshotClassArray []CSIPowerMaxSpecDriverSnapshotClassInput

func (CSIPowerMaxSpecDriverSnapshotClassArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxSpecDriverSnapshotClass)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverSnapshotClassArray) ToCSIPowerMaxSpecDriverSnapshotClassArrayOutput() CSIPowerMaxSpecDriverSnapshotClassArrayOutput {
	return i.ToCSIPowerMaxSpecDriverSnapshotClassArrayOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverSnapshotClassArray) ToCSIPowerMaxSpecDriverSnapshotClassArrayOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSnapshotClassArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSnapshotClassArrayOutput)
}

// SnapshotClass represents a VolumeSnapshotClass
type CSIPowerMaxSpecDriverSnapshotClassOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverSnapshotClassOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverSnapshotClass)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverSnapshotClassOutput) ToCSIPowerMaxSpecDriverSnapshotClassOutput() CSIPowerMaxSpecDriverSnapshotClassOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSnapshotClassOutput) ToCSIPowerMaxSpecDriverSnapshotClassOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSnapshotClassOutput {
	return o
}

// Name is the name of the Snapshot Class
func (o CSIPowerMaxSpecDriverSnapshotClassOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSnapshotClass) string { return v.Name }).(pulumi.StringOutput)
}

// Parameters is a map of driver specific parameters for snapshot class
func (o CSIPowerMaxSpecDriverSnapshotClassOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverSnapshotClass) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

type CSIPowerMaxSpecDriverSnapshotClassArrayOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverSnapshotClassArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxSpecDriverSnapshotClass)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverSnapshotClassArrayOutput) ToCSIPowerMaxSpecDriverSnapshotClassArrayOutput() CSIPowerMaxSpecDriverSnapshotClassArrayOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSnapshotClassArrayOutput) ToCSIPowerMaxSpecDriverSnapshotClassArrayOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSnapshotClassArrayOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSnapshotClassArrayOutput) Index(i pulumi.IntInput) CSIPowerMaxSpecDriverSnapshotClassOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIPowerMaxSpecDriverSnapshotClass {
		return vs[0].([]CSIPowerMaxSpecDriverSnapshotClass)[vs[1].(int)]
	}).(CSIPowerMaxSpecDriverSnapshotClassOutput)
}

// Parameters is a map of driver specific parameters for snapshot class
type CSIPowerMaxSpecDriverSnapshotClassParameters struct {
}

// CSIPowerMaxSpecDriverSnapshotClassParametersInput is an input type that accepts CSIPowerMaxSpecDriverSnapshotClassParametersArgs and CSIPowerMaxSpecDriverSnapshotClassParametersOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverSnapshotClassParametersInput` via:
//
//          CSIPowerMaxSpecDriverSnapshotClassParametersArgs{...}
type CSIPowerMaxSpecDriverSnapshotClassParametersInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverSnapshotClassParametersOutput() CSIPowerMaxSpecDriverSnapshotClassParametersOutput
	ToCSIPowerMaxSpecDriverSnapshotClassParametersOutputWithContext(context.Context) CSIPowerMaxSpecDriverSnapshotClassParametersOutput
}

// Parameters is a map of driver specific parameters for snapshot class
type CSIPowerMaxSpecDriverSnapshotClassParametersArgs struct {
}

func (CSIPowerMaxSpecDriverSnapshotClassParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverSnapshotClassParameters)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverSnapshotClassParametersArgs) ToCSIPowerMaxSpecDriverSnapshotClassParametersOutput() CSIPowerMaxSpecDriverSnapshotClassParametersOutput {
	return i.ToCSIPowerMaxSpecDriverSnapshotClassParametersOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverSnapshotClassParametersArgs) ToCSIPowerMaxSpecDriverSnapshotClassParametersOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSnapshotClassParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverSnapshotClassParametersOutput)
}

// Parameters is a map of driver specific parameters for snapshot class
type CSIPowerMaxSpecDriverSnapshotClassParametersOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverSnapshotClassParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverSnapshotClassParameters)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverSnapshotClassParametersOutput) ToCSIPowerMaxSpecDriverSnapshotClassParametersOutput() CSIPowerMaxSpecDriverSnapshotClassParametersOutput {
	return o
}

func (o CSIPowerMaxSpecDriverSnapshotClassParametersOutput) ToCSIPowerMaxSpecDriverSnapshotClassParametersOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverSnapshotClassParametersOutput {
	return o
}

// StorageClass represents a kubernetes storage class
type CSIPowerMaxSpecDriverStorageClass struct {
	// AllowVolumeExpansion is a boolean flag which indicates if volumes can be expanded
	AllowVolumeExpansion *bool `pulumi:"allowVolumeExpansion"`
	// Restrict the node topologies where volumes can be dynamically provisioned.
	AllowedTopologies []CSIPowerMaxSpecDriverStorageClassAllowedTopologies `pulumi:"allowedTopologies"`
	// DefaultSc is a boolean flag to indicate if the storage class is going to be marked as default
	Default *bool `pulumi:"default"`
	// Name is the name of the StorageClass
	Name string `pulumi:"name"`
	// Parameters is a map of driver specific storage class
	Parameters map[string]string `pulumi:"parameters"`
	// ReclaimPolicy is the reclaim policy for the storage class
	ReclaimPolicy *string `pulumi:"reclaimPolicy"`
}

// CSIPowerMaxSpecDriverStorageClassInput is an input type that accepts CSIPowerMaxSpecDriverStorageClassArgs and CSIPowerMaxSpecDriverStorageClassOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverStorageClassInput` via:
//
//          CSIPowerMaxSpecDriverStorageClassArgs{...}
type CSIPowerMaxSpecDriverStorageClassInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverStorageClassOutput() CSIPowerMaxSpecDriverStorageClassOutput
	ToCSIPowerMaxSpecDriverStorageClassOutputWithContext(context.Context) CSIPowerMaxSpecDriverStorageClassOutput
}

// StorageClass represents a kubernetes storage class
type CSIPowerMaxSpecDriverStorageClassArgs struct {
	// AllowVolumeExpansion is a boolean flag which indicates if volumes can be expanded
	AllowVolumeExpansion pulumi.BoolPtrInput `pulumi:"allowVolumeExpansion"`
	// Restrict the node topologies where volumes can be dynamically provisioned.
	AllowedTopologies CSIPowerMaxSpecDriverStorageClassAllowedTopologiesArrayInput `pulumi:"allowedTopologies"`
	// DefaultSc is a boolean flag to indicate if the storage class is going to be marked as default
	Default pulumi.BoolPtrInput `pulumi:"default"`
	// Name is the name of the StorageClass
	Name pulumi.StringInput `pulumi:"name"`
	// Parameters is a map of driver specific storage class
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
	// ReclaimPolicy is the reclaim policy for the storage class
	ReclaimPolicy pulumi.StringPtrInput `pulumi:"reclaimPolicy"`
}

func (CSIPowerMaxSpecDriverStorageClassArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverStorageClass)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverStorageClassArgs) ToCSIPowerMaxSpecDriverStorageClassOutput() CSIPowerMaxSpecDriverStorageClassOutput {
	return i.ToCSIPowerMaxSpecDriverStorageClassOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverStorageClassArgs) ToCSIPowerMaxSpecDriverStorageClassOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverStorageClassOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverStorageClassOutput)
}

// CSIPowerMaxSpecDriverStorageClassArrayInput is an input type that accepts CSIPowerMaxSpecDriverStorageClassArray and CSIPowerMaxSpecDriverStorageClassArrayOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverStorageClassArrayInput` via:
//
//          CSIPowerMaxSpecDriverStorageClassArray{ CSIPowerMaxSpecDriverStorageClassArgs{...} }
type CSIPowerMaxSpecDriverStorageClassArrayInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverStorageClassArrayOutput() CSIPowerMaxSpecDriverStorageClassArrayOutput
	ToCSIPowerMaxSpecDriverStorageClassArrayOutputWithContext(context.Context) CSIPowerMaxSpecDriverStorageClassArrayOutput
}

type CSIPowerMaxSpecDriverStorageClassArray []CSIPowerMaxSpecDriverStorageClassInput

func (CSIPowerMaxSpecDriverStorageClassArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxSpecDriverStorageClass)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverStorageClassArray) ToCSIPowerMaxSpecDriverStorageClassArrayOutput() CSIPowerMaxSpecDriverStorageClassArrayOutput {
	return i.ToCSIPowerMaxSpecDriverStorageClassArrayOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverStorageClassArray) ToCSIPowerMaxSpecDriverStorageClassArrayOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverStorageClassArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverStorageClassArrayOutput)
}

// StorageClass represents a kubernetes storage class
type CSIPowerMaxSpecDriverStorageClassOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverStorageClassOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverStorageClass)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverStorageClassOutput) ToCSIPowerMaxSpecDriverStorageClassOutput() CSIPowerMaxSpecDriverStorageClassOutput {
	return o
}

func (o CSIPowerMaxSpecDriverStorageClassOutput) ToCSIPowerMaxSpecDriverStorageClassOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverStorageClassOutput {
	return o
}

// AllowVolumeExpansion is a boolean flag which indicates if volumes can be expanded
func (o CSIPowerMaxSpecDriverStorageClassOutput) AllowVolumeExpansion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverStorageClass) *bool { return v.AllowVolumeExpansion }).(pulumi.BoolPtrOutput)
}

// Restrict the node topologies where volumes can be dynamically provisioned.
func (o CSIPowerMaxSpecDriverStorageClassOutput) AllowedTopologies() CSIPowerMaxSpecDriverStorageClassAllowedTopologiesArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverStorageClass) []CSIPowerMaxSpecDriverStorageClassAllowedTopologies {
		return v.AllowedTopologies
	}).(CSIPowerMaxSpecDriverStorageClassAllowedTopologiesArrayOutput)
}

// DefaultSc is a boolean flag to indicate if the storage class is going to be marked as default
func (o CSIPowerMaxSpecDriverStorageClassOutput) Default() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverStorageClass) *bool { return v.Default }).(pulumi.BoolPtrOutput)
}

// Name is the name of the StorageClass
func (o CSIPowerMaxSpecDriverStorageClassOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverStorageClass) string { return v.Name }).(pulumi.StringOutput)
}

// Parameters is a map of driver specific storage class
func (o CSIPowerMaxSpecDriverStorageClassOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverStorageClass) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

// ReclaimPolicy is the reclaim policy for the storage class
func (o CSIPowerMaxSpecDriverStorageClassOutput) ReclaimPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverStorageClass) *string { return v.ReclaimPolicy }).(pulumi.StringPtrOutput)
}

type CSIPowerMaxSpecDriverStorageClassArrayOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverStorageClassArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxSpecDriverStorageClass)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverStorageClassArrayOutput) ToCSIPowerMaxSpecDriverStorageClassArrayOutput() CSIPowerMaxSpecDriverStorageClassArrayOutput {
	return o
}

func (o CSIPowerMaxSpecDriverStorageClassArrayOutput) ToCSIPowerMaxSpecDriverStorageClassArrayOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverStorageClassArrayOutput {
	return o
}

func (o CSIPowerMaxSpecDriverStorageClassArrayOutput) Index(i pulumi.IntInput) CSIPowerMaxSpecDriverStorageClassOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIPowerMaxSpecDriverStorageClass {
		return vs[0].([]CSIPowerMaxSpecDriverStorageClass)[vs[1].(int)]
	}).(CSIPowerMaxSpecDriverStorageClassOutput)
}

// A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.
type CSIPowerMaxSpecDriverStorageClassAllowedTopologies struct {
	// A list of topology selector requirements by labels.
	MatchLabelExpressions []CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions `pulumi:"matchLabelExpressions"`
}

// CSIPowerMaxSpecDriverStorageClassAllowedTopologiesInput is an input type that accepts CSIPowerMaxSpecDriverStorageClassAllowedTopologiesArgs and CSIPowerMaxSpecDriverStorageClassAllowedTopologiesOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverStorageClassAllowedTopologiesInput` via:
//
//          CSIPowerMaxSpecDriverStorageClassAllowedTopologiesArgs{...}
type CSIPowerMaxSpecDriverStorageClassAllowedTopologiesInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverStorageClassAllowedTopologiesOutput() CSIPowerMaxSpecDriverStorageClassAllowedTopologiesOutput
	ToCSIPowerMaxSpecDriverStorageClassAllowedTopologiesOutputWithContext(context.Context) CSIPowerMaxSpecDriverStorageClassAllowedTopologiesOutput
}

// A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.
type CSIPowerMaxSpecDriverStorageClassAllowedTopologiesArgs struct {
	// A list of topology selector requirements by labels.
	MatchLabelExpressions CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayInput `pulumi:"matchLabelExpressions"`
}

func (CSIPowerMaxSpecDriverStorageClassAllowedTopologiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverStorageClassAllowedTopologies)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverStorageClassAllowedTopologiesArgs) ToCSIPowerMaxSpecDriverStorageClassAllowedTopologiesOutput() CSIPowerMaxSpecDriverStorageClassAllowedTopologiesOutput {
	return i.ToCSIPowerMaxSpecDriverStorageClassAllowedTopologiesOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverStorageClassAllowedTopologiesArgs) ToCSIPowerMaxSpecDriverStorageClassAllowedTopologiesOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverStorageClassAllowedTopologiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverStorageClassAllowedTopologiesOutput)
}

// CSIPowerMaxSpecDriverStorageClassAllowedTopologiesArrayInput is an input type that accepts CSIPowerMaxSpecDriverStorageClassAllowedTopologiesArray and CSIPowerMaxSpecDriverStorageClassAllowedTopologiesArrayOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverStorageClassAllowedTopologiesArrayInput` via:
//
//          CSIPowerMaxSpecDriverStorageClassAllowedTopologiesArray{ CSIPowerMaxSpecDriverStorageClassAllowedTopologiesArgs{...} }
type CSIPowerMaxSpecDriverStorageClassAllowedTopologiesArrayInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverStorageClassAllowedTopologiesArrayOutput() CSIPowerMaxSpecDriverStorageClassAllowedTopologiesArrayOutput
	ToCSIPowerMaxSpecDriverStorageClassAllowedTopologiesArrayOutputWithContext(context.Context) CSIPowerMaxSpecDriverStorageClassAllowedTopologiesArrayOutput
}

type CSIPowerMaxSpecDriverStorageClassAllowedTopologiesArray []CSIPowerMaxSpecDriverStorageClassAllowedTopologiesInput

func (CSIPowerMaxSpecDriverStorageClassAllowedTopologiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxSpecDriverStorageClassAllowedTopologies)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverStorageClassAllowedTopologiesArray) ToCSIPowerMaxSpecDriverStorageClassAllowedTopologiesArrayOutput() CSIPowerMaxSpecDriverStorageClassAllowedTopologiesArrayOutput {
	return i.ToCSIPowerMaxSpecDriverStorageClassAllowedTopologiesArrayOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverStorageClassAllowedTopologiesArray) ToCSIPowerMaxSpecDriverStorageClassAllowedTopologiesArrayOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverStorageClassAllowedTopologiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverStorageClassAllowedTopologiesArrayOutput)
}

// A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.
type CSIPowerMaxSpecDriverStorageClassAllowedTopologiesOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverStorageClassAllowedTopologiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverStorageClassAllowedTopologies)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverStorageClassAllowedTopologiesOutput) ToCSIPowerMaxSpecDriverStorageClassAllowedTopologiesOutput() CSIPowerMaxSpecDriverStorageClassAllowedTopologiesOutput {
	return o
}

func (o CSIPowerMaxSpecDriverStorageClassAllowedTopologiesOutput) ToCSIPowerMaxSpecDriverStorageClassAllowedTopologiesOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverStorageClassAllowedTopologiesOutput {
	return o
}

// A list of topology selector requirements by labels.
func (o CSIPowerMaxSpecDriverStorageClassAllowedTopologiesOutput) MatchLabelExpressions() CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverStorageClassAllowedTopologies) []CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions {
		return v.MatchLabelExpressions
	}).(CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput)
}

type CSIPowerMaxSpecDriverStorageClassAllowedTopologiesArrayOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverStorageClassAllowedTopologiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxSpecDriverStorageClassAllowedTopologies)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverStorageClassAllowedTopologiesArrayOutput) ToCSIPowerMaxSpecDriverStorageClassAllowedTopologiesArrayOutput() CSIPowerMaxSpecDriverStorageClassAllowedTopologiesArrayOutput {
	return o
}

func (o CSIPowerMaxSpecDriverStorageClassAllowedTopologiesArrayOutput) ToCSIPowerMaxSpecDriverStorageClassAllowedTopologiesArrayOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverStorageClassAllowedTopologiesArrayOutput {
	return o
}

func (o CSIPowerMaxSpecDriverStorageClassAllowedTopologiesArrayOutput) Index(i pulumi.IntInput) CSIPowerMaxSpecDriverStorageClassAllowedTopologiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIPowerMaxSpecDriverStorageClassAllowedTopologies {
		return vs[0].([]CSIPowerMaxSpecDriverStorageClassAllowedTopologies)[vs[1].(int)]
	}).(CSIPowerMaxSpecDriverStorageClassAllowedTopologiesOutput)
}

// A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.
type CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions struct {
	// The label key that the selector applies to.
	Key string `pulumi:"key"`
	// An array of string values. One value must match the label to be selected. Each entry in Values is ORed.
	Values []string `pulumi:"values"`
}

// CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsInput is an input type that accepts CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArgs and CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsInput` via:
//
//          CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArgs{...}
type CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput() CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput
	ToCSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutputWithContext(context.Context) CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput
}

// A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.
type CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArgs struct {
	// The label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// An array of string values. One value must match the label to be selected. Each entry in Values is ORed.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArgs) ToCSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput() CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput {
	return i.ToCSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArgs) ToCSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput)
}

// CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayInput is an input type that accepts CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArray and CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayInput` via:
//
//          CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArray{ CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArgs{...} }
type CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput() CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput
	ToCSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutputWithContext(context.Context) CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput
}

type CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArray []CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsInput

func (CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArray) ToCSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput() CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput {
	return i.ToCSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArray) ToCSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput)
}

// A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.
type CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput) ToCSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput() CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput {
	return o
}

func (o CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput) ToCSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput {
	return o
}

// The label key that the selector applies to.
func (o CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions) string { return v.Key }).(pulumi.StringOutput)
}

// An array of string values. One value must match the label to be selected. Each entry in Values is ORed.
func (o CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput) ToCSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput() CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput {
	return o
}

func (o CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput) ToCSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput {
	return o
}

func (o CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput) Index(i pulumi.IntInput) CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions {
		return vs[0].([]CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions)[vs[1].(int)]
	}).(CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput)
}

// Parameters is a map of driver specific storage class
type CSIPowerMaxSpecDriverStorageClassParameters struct {
}

// CSIPowerMaxSpecDriverStorageClassParametersInput is an input type that accepts CSIPowerMaxSpecDriverStorageClassParametersArgs and CSIPowerMaxSpecDriverStorageClassParametersOutput values.
// You can construct a concrete instance of `CSIPowerMaxSpecDriverStorageClassParametersInput` via:
//
//          CSIPowerMaxSpecDriverStorageClassParametersArgs{...}
type CSIPowerMaxSpecDriverStorageClassParametersInput interface {
	pulumi.Input

	ToCSIPowerMaxSpecDriverStorageClassParametersOutput() CSIPowerMaxSpecDriverStorageClassParametersOutput
	ToCSIPowerMaxSpecDriverStorageClassParametersOutputWithContext(context.Context) CSIPowerMaxSpecDriverStorageClassParametersOutput
}

// Parameters is a map of driver specific storage class
type CSIPowerMaxSpecDriverStorageClassParametersArgs struct {
}

func (CSIPowerMaxSpecDriverStorageClassParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverStorageClassParameters)(nil)).Elem()
}

func (i CSIPowerMaxSpecDriverStorageClassParametersArgs) ToCSIPowerMaxSpecDriverStorageClassParametersOutput() CSIPowerMaxSpecDriverStorageClassParametersOutput {
	return i.ToCSIPowerMaxSpecDriverStorageClassParametersOutputWithContext(context.Background())
}

func (i CSIPowerMaxSpecDriverStorageClassParametersArgs) ToCSIPowerMaxSpecDriverStorageClassParametersOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverStorageClassParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxSpecDriverStorageClassParametersOutput)
}

// Parameters is a map of driver specific storage class
type CSIPowerMaxSpecDriverStorageClassParametersOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxSpecDriverStorageClassParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxSpecDriverStorageClassParameters)(nil)).Elem()
}

func (o CSIPowerMaxSpecDriverStorageClassParametersOutput) ToCSIPowerMaxSpecDriverStorageClassParametersOutput() CSIPowerMaxSpecDriverStorageClassParametersOutput {
	return o
}

func (o CSIPowerMaxSpecDriverStorageClassParametersOutput) ToCSIPowerMaxSpecDriverStorageClassParametersOutputWithContext(ctx context.Context) CSIPowerMaxSpecDriverStorageClassParametersOutput {
	return o
}

// DriverStatus defines the observed state of CSIDriver
type CSIPowerMaxStatus struct {
	// ControllerStatus is the status of Controller pods
	ControllerStatus *CSIPowerMaxStatusControllerStatus `pulumi:"controllerStatus"`
	// DriverHash is a hash of the driver specification
	DriverHash *int `pulumi:"driverHash"`
	// LastUpdate is the last updated state of the driver
	LastUpdate *CSIPowerMaxStatusLastUpdate `pulumi:"lastUpdate"`
	// NodeStatus is the status of Controller pods
	NodeStatus *CSIPowerMaxStatusNodeStatus `pulumi:"nodeStatus"`
	// State is the state of the driver installation
	State *string `pulumi:"state"`
}

// CSIPowerMaxStatusInput is an input type that accepts CSIPowerMaxStatusArgs and CSIPowerMaxStatusOutput values.
// You can construct a concrete instance of `CSIPowerMaxStatusInput` via:
//
//          CSIPowerMaxStatusArgs{...}
type CSIPowerMaxStatusInput interface {
	pulumi.Input

	ToCSIPowerMaxStatusOutput() CSIPowerMaxStatusOutput
	ToCSIPowerMaxStatusOutputWithContext(context.Context) CSIPowerMaxStatusOutput
}

// DriverStatus defines the observed state of CSIDriver
type CSIPowerMaxStatusArgs struct {
	// ControllerStatus is the status of Controller pods
	ControllerStatus CSIPowerMaxStatusControllerStatusPtrInput `pulumi:"controllerStatus"`
	// DriverHash is a hash of the driver specification
	DriverHash pulumi.IntPtrInput `pulumi:"driverHash"`
	// LastUpdate is the last updated state of the driver
	LastUpdate CSIPowerMaxStatusLastUpdatePtrInput `pulumi:"lastUpdate"`
	// NodeStatus is the status of Controller pods
	NodeStatus CSIPowerMaxStatusNodeStatusPtrInput `pulumi:"nodeStatus"`
	// State is the state of the driver installation
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (CSIPowerMaxStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxStatus)(nil)).Elem()
}

func (i CSIPowerMaxStatusArgs) ToCSIPowerMaxStatusOutput() CSIPowerMaxStatusOutput {
	return i.ToCSIPowerMaxStatusOutputWithContext(context.Background())
}

func (i CSIPowerMaxStatusArgs) ToCSIPowerMaxStatusOutputWithContext(ctx context.Context) CSIPowerMaxStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxStatusOutput)
}

func (i CSIPowerMaxStatusArgs) ToCSIPowerMaxStatusPtrOutput() CSIPowerMaxStatusPtrOutput {
	return i.ToCSIPowerMaxStatusPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxStatusArgs) ToCSIPowerMaxStatusPtrOutputWithContext(ctx context.Context) CSIPowerMaxStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxStatusOutput).ToCSIPowerMaxStatusPtrOutputWithContext(ctx)
}

// CSIPowerMaxStatusPtrInput is an input type that accepts CSIPowerMaxStatusArgs, CSIPowerMaxStatusPtr and CSIPowerMaxStatusPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxStatusPtrInput` via:
//
//          CSIPowerMaxStatusArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxStatusPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxStatusPtrOutput() CSIPowerMaxStatusPtrOutput
	ToCSIPowerMaxStatusPtrOutputWithContext(context.Context) CSIPowerMaxStatusPtrOutput
}

type csipowerMaxStatusPtrType CSIPowerMaxStatusArgs

func CSIPowerMaxStatusPtr(v *CSIPowerMaxStatusArgs) CSIPowerMaxStatusPtrInput {
	return (*csipowerMaxStatusPtrType)(v)
}

func (*csipowerMaxStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxStatus)(nil)).Elem()
}

func (i *csipowerMaxStatusPtrType) ToCSIPowerMaxStatusPtrOutput() CSIPowerMaxStatusPtrOutput {
	return i.ToCSIPowerMaxStatusPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxStatusPtrType) ToCSIPowerMaxStatusPtrOutputWithContext(ctx context.Context) CSIPowerMaxStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxStatusPtrOutput)
}

// DriverStatus defines the observed state of CSIDriver
type CSIPowerMaxStatusOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxStatus)(nil)).Elem()
}

func (o CSIPowerMaxStatusOutput) ToCSIPowerMaxStatusOutput() CSIPowerMaxStatusOutput {
	return o
}

func (o CSIPowerMaxStatusOutput) ToCSIPowerMaxStatusOutputWithContext(ctx context.Context) CSIPowerMaxStatusOutput {
	return o
}

func (o CSIPowerMaxStatusOutput) ToCSIPowerMaxStatusPtrOutput() CSIPowerMaxStatusPtrOutput {
	return o.ToCSIPowerMaxStatusPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxStatusOutput) ToCSIPowerMaxStatusPtrOutputWithContext(ctx context.Context) CSIPowerMaxStatusPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxStatus) *CSIPowerMaxStatus {
		return &v
	}).(CSIPowerMaxStatusPtrOutput)
}

// ControllerStatus is the status of Controller pods
func (o CSIPowerMaxStatusOutput) ControllerStatus() CSIPowerMaxStatusControllerStatusPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxStatus) *CSIPowerMaxStatusControllerStatus { return v.ControllerStatus }).(CSIPowerMaxStatusControllerStatusPtrOutput)
}

// DriverHash is a hash of the driver specification
func (o CSIPowerMaxStatusOutput) DriverHash() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxStatus) *int { return v.DriverHash }).(pulumi.IntPtrOutput)
}

// LastUpdate is the last updated state of the driver
func (o CSIPowerMaxStatusOutput) LastUpdate() CSIPowerMaxStatusLastUpdatePtrOutput {
	return o.ApplyT(func(v CSIPowerMaxStatus) *CSIPowerMaxStatusLastUpdate { return v.LastUpdate }).(CSIPowerMaxStatusLastUpdatePtrOutput)
}

// NodeStatus is the status of Controller pods
func (o CSIPowerMaxStatusOutput) NodeStatus() CSIPowerMaxStatusNodeStatusPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxStatus) *CSIPowerMaxStatusNodeStatus { return v.NodeStatus }).(CSIPowerMaxStatusNodeStatusPtrOutput)
}

// State is the state of the driver installation
func (o CSIPowerMaxStatusOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxStatus) *string { return v.State }).(pulumi.StringPtrOutput)
}

type CSIPowerMaxStatusPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxStatus)(nil)).Elem()
}

func (o CSIPowerMaxStatusPtrOutput) ToCSIPowerMaxStatusPtrOutput() CSIPowerMaxStatusPtrOutput {
	return o
}

func (o CSIPowerMaxStatusPtrOutput) ToCSIPowerMaxStatusPtrOutputWithContext(ctx context.Context) CSIPowerMaxStatusPtrOutput {
	return o
}

func (o CSIPowerMaxStatusPtrOutput) Elem() CSIPowerMaxStatusOutput {
	return o.ApplyT(func(v *CSIPowerMaxStatus) CSIPowerMaxStatus { return *v }).(CSIPowerMaxStatusOutput)
}

// ControllerStatus is the status of Controller pods
func (o CSIPowerMaxStatusPtrOutput) ControllerStatus() CSIPowerMaxStatusControllerStatusPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxStatus) *CSIPowerMaxStatusControllerStatus {
		if v == nil {
			return nil
		}
		return v.ControllerStatus
	}).(CSIPowerMaxStatusControllerStatusPtrOutput)
}

// DriverHash is a hash of the driver specification
func (o CSIPowerMaxStatusPtrOutput) DriverHash() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxStatus) *int {
		if v == nil {
			return nil
		}
		return v.DriverHash
	}).(pulumi.IntPtrOutput)
}

// LastUpdate is the last updated state of the driver
func (o CSIPowerMaxStatusPtrOutput) LastUpdate() CSIPowerMaxStatusLastUpdatePtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxStatus) *CSIPowerMaxStatusLastUpdate {
		if v == nil {
			return nil
		}
		return v.LastUpdate
	}).(CSIPowerMaxStatusLastUpdatePtrOutput)
}

// NodeStatus is the status of Controller pods
func (o CSIPowerMaxStatusPtrOutput) NodeStatus() CSIPowerMaxStatusNodeStatusPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxStatus) *CSIPowerMaxStatusNodeStatus {
		if v == nil {
			return nil
		}
		return v.NodeStatus
	}).(CSIPowerMaxStatusNodeStatusPtrOutput)
}

// State is the state of the driver installation
func (o CSIPowerMaxStatusPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxStatus) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// ControllerStatus is the status of Controller pods
type CSIPowerMaxStatusControllerStatus struct {
	Available []string `pulumi:"available"`
	Ready     []string `pulumi:"ready"`
	Starting  []string `pulumi:"starting"`
	Stopped   []string `pulumi:"stopped"`
}

// CSIPowerMaxStatusControllerStatusInput is an input type that accepts CSIPowerMaxStatusControllerStatusArgs and CSIPowerMaxStatusControllerStatusOutput values.
// You can construct a concrete instance of `CSIPowerMaxStatusControllerStatusInput` via:
//
//          CSIPowerMaxStatusControllerStatusArgs{...}
type CSIPowerMaxStatusControllerStatusInput interface {
	pulumi.Input

	ToCSIPowerMaxStatusControllerStatusOutput() CSIPowerMaxStatusControllerStatusOutput
	ToCSIPowerMaxStatusControllerStatusOutputWithContext(context.Context) CSIPowerMaxStatusControllerStatusOutput
}

// ControllerStatus is the status of Controller pods
type CSIPowerMaxStatusControllerStatusArgs struct {
	Available pulumi.StringArrayInput `pulumi:"available"`
	Ready     pulumi.StringArrayInput `pulumi:"ready"`
	Starting  pulumi.StringArrayInput `pulumi:"starting"`
	Stopped   pulumi.StringArrayInput `pulumi:"stopped"`
}

func (CSIPowerMaxStatusControllerStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxStatusControllerStatus)(nil)).Elem()
}

func (i CSIPowerMaxStatusControllerStatusArgs) ToCSIPowerMaxStatusControllerStatusOutput() CSIPowerMaxStatusControllerStatusOutput {
	return i.ToCSIPowerMaxStatusControllerStatusOutputWithContext(context.Background())
}

func (i CSIPowerMaxStatusControllerStatusArgs) ToCSIPowerMaxStatusControllerStatusOutputWithContext(ctx context.Context) CSIPowerMaxStatusControllerStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxStatusControllerStatusOutput)
}

func (i CSIPowerMaxStatusControllerStatusArgs) ToCSIPowerMaxStatusControllerStatusPtrOutput() CSIPowerMaxStatusControllerStatusPtrOutput {
	return i.ToCSIPowerMaxStatusControllerStatusPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxStatusControllerStatusArgs) ToCSIPowerMaxStatusControllerStatusPtrOutputWithContext(ctx context.Context) CSIPowerMaxStatusControllerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxStatusControllerStatusOutput).ToCSIPowerMaxStatusControllerStatusPtrOutputWithContext(ctx)
}

// CSIPowerMaxStatusControllerStatusPtrInput is an input type that accepts CSIPowerMaxStatusControllerStatusArgs, CSIPowerMaxStatusControllerStatusPtr and CSIPowerMaxStatusControllerStatusPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxStatusControllerStatusPtrInput` via:
//
//          CSIPowerMaxStatusControllerStatusArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxStatusControllerStatusPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxStatusControllerStatusPtrOutput() CSIPowerMaxStatusControllerStatusPtrOutput
	ToCSIPowerMaxStatusControllerStatusPtrOutputWithContext(context.Context) CSIPowerMaxStatusControllerStatusPtrOutput
}

type csipowerMaxStatusControllerStatusPtrType CSIPowerMaxStatusControllerStatusArgs

func CSIPowerMaxStatusControllerStatusPtr(v *CSIPowerMaxStatusControllerStatusArgs) CSIPowerMaxStatusControllerStatusPtrInput {
	return (*csipowerMaxStatusControllerStatusPtrType)(v)
}

func (*csipowerMaxStatusControllerStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxStatusControllerStatus)(nil)).Elem()
}

func (i *csipowerMaxStatusControllerStatusPtrType) ToCSIPowerMaxStatusControllerStatusPtrOutput() CSIPowerMaxStatusControllerStatusPtrOutput {
	return i.ToCSIPowerMaxStatusControllerStatusPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxStatusControllerStatusPtrType) ToCSIPowerMaxStatusControllerStatusPtrOutputWithContext(ctx context.Context) CSIPowerMaxStatusControllerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxStatusControllerStatusPtrOutput)
}

// ControllerStatus is the status of Controller pods
type CSIPowerMaxStatusControllerStatusOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxStatusControllerStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxStatusControllerStatus)(nil)).Elem()
}

func (o CSIPowerMaxStatusControllerStatusOutput) ToCSIPowerMaxStatusControllerStatusOutput() CSIPowerMaxStatusControllerStatusOutput {
	return o
}

func (o CSIPowerMaxStatusControllerStatusOutput) ToCSIPowerMaxStatusControllerStatusOutputWithContext(ctx context.Context) CSIPowerMaxStatusControllerStatusOutput {
	return o
}

func (o CSIPowerMaxStatusControllerStatusOutput) ToCSIPowerMaxStatusControllerStatusPtrOutput() CSIPowerMaxStatusControllerStatusPtrOutput {
	return o.ToCSIPowerMaxStatusControllerStatusPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxStatusControllerStatusOutput) ToCSIPowerMaxStatusControllerStatusPtrOutputWithContext(ctx context.Context) CSIPowerMaxStatusControllerStatusPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxStatusControllerStatus) *CSIPowerMaxStatusControllerStatus {
		return &v
	}).(CSIPowerMaxStatusControllerStatusPtrOutput)
}
func (o CSIPowerMaxStatusControllerStatusOutput) Available() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxStatusControllerStatus) []string { return v.Available }).(pulumi.StringArrayOutput)
}

func (o CSIPowerMaxStatusControllerStatusOutput) Ready() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxStatusControllerStatus) []string { return v.Ready }).(pulumi.StringArrayOutput)
}

func (o CSIPowerMaxStatusControllerStatusOutput) Starting() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxStatusControllerStatus) []string { return v.Starting }).(pulumi.StringArrayOutput)
}

func (o CSIPowerMaxStatusControllerStatusOutput) Stopped() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxStatusControllerStatus) []string { return v.Stopped }).(pulumi.StringArrayOutput)
}

type CSIPowerMaxStatusControllerStatusPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxStatusControllerStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxStatusControllerStatus)(nil)).Elem()
}

func (o CSIPowerMaxStatusControllerStatusPtrOutput) ToCSIPowerMaxStatusControllerStatusPtrOutput() CSIPowerMaxStatusControllerStatusPtrOutput {
	return o
}

func (o CSIPowerMaxStatusControllerStatusPtrOutput) ToCSIPowerMaxStatusControllerStatusPtrOutputWithContext(ctx context.Context) CSIPowerMaxStatusControllerStatusPtrOutput {
	return o
}

func (o CSIPowerMaxStatusControllerStatusPtrOutput) Elem() CSIPowerMaxStatusControllerStatusOutput {
	return o.ApplyT(func(v *CSIPowerMaxStatusControllerStatus) CSIPowerMaxStatusControllerStatus { return *v }).(CSIPowerMaxStatusControllerStatusOutput)
}

func (o CSIPowerMaxStatusControllerStatusPtrOutput) Available() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIPowerMaxStatusControllerStatus) []string {
		if v == nil {
			return nil
		}
		return v.Available
	}).(pulumi.StringArrayOutput)
}

func (o CSIPowerMaxStatusControllerStatusPtrOutput) Ready() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIPowerMaxStatusControllerStatus) []string {
		if v == nil {
			return nil
		}
		return v.Ready
	}).(pulumi.StringArrayOutput)
}

func (o CSIPowerMaxStatusControllerStatusPtrOutput) Starting() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIPowerMaxStatusControllerStatus) []string {
		if v == nil {
			return nil
		}
		return v.Starting
	}).(pulumi.StringArrayOutput)
}

func (o CSIPowerMaxStatusControllerStatusPtrOutput) Stopped() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIPowerMaxStatusControllerStatus) []string {
		if v == nil {
			return nil
		}
		return v.Stopped
	}).(pulumi.StringArrayOutput)
}

// LastUpdate is the last updated state of the driver
type CSIPowerMaxStatusLastUpdate struct {
	// Condition is the last known condition of the Custom Resource
	Condition *string `pulumi:"condition"`
	// ErrorMessage is the last error message associated with the condition
	ErrorMessage *string `pulumi:"errorMessage"`
	// Time is the time stamp for the last condition update
	Time *string `pulumi:"time"`
}

// CSIPowerMaxStatusLastUpdateInput is an input type that accepts CSIPowerMaxStatusLastUpdateArgs and CSIPowerMaxStatusLastUpdateOutput values.
// You can construct a concrete instance of `CSIPowerMaxStatusLastUpdateInput` via:
//
//          CSIPowerMaxStatusLastUpdateArgs{...}
type CSIPowerMaxStatusLastUpdateInput interface {
	pulumi.Input

	ToCSIPowerMaxStatusLastUpdateOutput() CSIPowerMaxStatusLastUpdateOutput
	ToCSIPowerMaxStatusLastUpdateOutputWithContext(context.Context) CSIPowerMaxStatusLastUpdateOutput
}

// LastUpdate is the last updated state of the driver
type CSIPowerMaxStatusLastUpdateArgs struct {
	// Condition is the last known condition of the Custom Resource
	Condition pulumi.StringPtrInput `pulumi:"condition"`
	// ErrorMessage is the last error message associated with the condition
	ErrorMessage pulumi.StringPtrInput `pulumi:"errorMessage"`
	// Time is the time stamp for the last condition update
	Time pulumi.StringPtrInput `pulumi:"time"`
}

func (CSIPowerMaxStatusLastUpdateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxStatusLastUpdate)(nil)).Elem()
}

func (i CSIPowerMaxStatusLastUpdateArgs) ToCSIPowerMaxStatusLastUpdateOutput() CSIPowerMaxStatusLastUpdateOutput {
	return i.ToCSIPowerMaxStatusLastUpdateOutputWithContext(context.Background())
}

func (i CSIPowerMaxStatusLastUpdateArgs) ToCSIPowerMaxStatusLastUpdateOutputWithContext(ctx context.Context) CSIPowerMaxStatusLastUpdateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxStatusLastUpdateOutput)
}

func (i CSIPowerMaxStatusLastUpdateArgs) ToCSIPowerMaxStatusLastUpdatePtrOutput() CSIPowerMaxStatusLastUpdatePtrOutput {
	return i.ToCSIPowerMaxStatusLastUpdatePtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxStatusLastUpdateArgs) ToCSIPowerMaxStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIPowerMaxStatusLastUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxStatusLastUpdateOutput).ToCSIPowerMaxStatusLastUpdatePtrOutputWithContext(ctx)
}

// CSIPowerMaxStatusLastUpdatePtrInput is an input type that accepts CSIPowerMaxStatusLastUpdateArgs, CSIPowerMaxStatusLastUpdatePtr and CSIPowerMaxStatusLastUpdatePtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxStatusLastUpdatePtrInput` via:
//
//          CSIPowerMaxStatusLastUpdateArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxStatusLastUpdatePtrInput interface {
	pulumi.Input

	ToCSIPowerMaxStatusLastUpdatePtrOutput() CSIPowerMaxStatusLastUpdatePtrOutput
	ToCSIPowerMaxStatusLastUpdatePtrOutputWithContext(context.Context) CSIPowerMaxStatusLastUpdatePtrOutput
}

type csipowerMaxStatusLastUpdatePtrType CSIPowerMaxStatusLastUpdateArgs

func CSIPowerMaxStatusLastUpdatePtr(v *CSIPowerMaxStatusLastUpdateArgs) CSIPowerMaxStatusLastUpdatePtrInput {
	return (*csipowerMaxStatusLastUpdatePtrType)(v)
}

func (*csipowerMaxStatusLastUpdatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxStatusLastUpdate)(nil)).Elem()
}

func (i *csipowerMaxStatusLastUpdatePtrType) ToCSIPowerMaxStatusLastUpdatePtrOutput() CSIPowerMaxStatusLastUpdatePtrOutput {
	return i.ToCSIPowerMaxStatusLastUpdatePtrOutputWithContext(context.Background())
}

func (i *csipowerMaxStatusLastUpdatePtrType) ToCSIPowerMaxStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIPowerMaxStatusLastUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxStatusLastUpdatePtrOutput)
}

// LastUpdate is the last updated state of the driver
type CSIPowerMaxStatusLastUpdateOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxStatusLastUpdateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxStatusLastUpdate)(nil)).Elem()
}

func (o CSIPowerMaxStatusLastUpdateOutput) ToCSIPowerMaxStatusLastUpdateOutput() CSIPowerMaxStatusLastUpdateOutput {
	return o
}

func (o CSIPowerMaxStatusLastUpdateOutput) ToCSIPowerMaxStatusLastUpdateOutputWithContext(ctx context.Context) CSIPowerMaxStatusLastUpdateOutput {
	return o
}

func (o CSIPowerMaxStatusLastUpdateOutput) ToCSIPowerMaxStatusLastUpdatePtrOutput() CSIPowerMaxStatusLastUpdatePtrOutput {
	return o.ToCSIPowerMaxStatusLastUpdatePtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxStatusLastUpdateOutput) ToCSIPowerMaxStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIPowerMaxStatusLastUpdatePtrOutput {
	return o.ApplyT(func(v CSIPowerMaxStatusLastUpdate) *CSIPowerMaxStatusLastUpdate {
		return &v
	}).(CSIPowerMaxStatusLastUpdatePtrOutput)
}

// Condition is the last known condition of the Custom Resource
func (o CSIPowerMaxStatusLastUpdateOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxStatusLastUpdate) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

// ErrorMessage is the last error message associated with the condition
func (o CSIPowerMaxStatusLastUpdateOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxStatusLastUpdate) *string { return v.ErrorMessage }).(pulumi.StringPtrOutput)
}

// Time is the time stamp for the last condition update
func (o CSIPowerMaxStatusLastUpdateOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxStatusLastUpdate) *string { return v.Time }).(pulumi.StringPtrOutput)
}

type CSIPowerMaxStatusLastUpdatePtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxStatusLastUpdatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxStatusLastUpdate)(nil)).Elem()
}

func (o CSIPowerMaxStatusLastUpdatePtrOutput) ToCSIPowerMaxStatusLastUpdatePtrOutput() CSIPowerMaxStatusLastUpdatePtrOutput {
	return o
}

func (o CSIPowerMaxStatusLastUpdatePtrOutput) ToCSIPowerMaxStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIPowerMaxStatusLastUpdatePtrOutput {
	return o
}

func (o CSIPowerMaxStatusLastUpdatePtrOutput) Elem() CSIPowerMaxStatusLastUpdateOutput {
	return o.ApplyT(func(v *CSIPowerMaxStatusLastUpdate) CSIPowerMaxStatusLastUpdate { return *v }).(CSIPowerMaxStatusLastUpdateOutput)
}

// Condition is the last known condition of the Custom Resource
func (o CSIPowerMaxStatusLastUpdatePtrOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxStatusLastUpdate) *string {
		if v == nil {
			return nil
		}
		return v.Condition
	}).(pulumi.StringPtrOutput)
}

// ErrorMessage is the last error message associated with the condition
func (o CSIPowerMaxStatusLastUpdatePtrOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxStatusLastUpdate) *string {
		if v == nil {
			return nil
		}
		return v.ErrorMessage
	}).(pulumi.StringPtrOutput)
}

// Time is the time stamp for the last condition update
func (o CSIPowerMaxStatusLastUpdatePtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerMaxStatusLastUpdate) *string {
		if v == nil {
			return nil
		}
		return v.Time
	}).(pulumi.StringPtrOutput)
}

// NodeStatus is the status of Controller pods
type CSIPowerMaxStatusNodeStatus struct {
	Available []string `pulumi:"available"`
	Ready     []string `pulumi:"ready"`
	Starting  []string `pulumi:"starting"`
	Stopped   []string `pulumi:"stopped"`
}

// CSIPowerMaxStatusNodeStatusInput is an input type that accepts CSIPowerMaxStatusNodeStatusArgs and CSIPowerMaxStatusNodeStatusOutput values.
// You can construct a concrete instance of `CSIPowerMaxStatusNodeStatusInput` via:
//
//          CSIPowerMaxStatusNodeStatusArgs{...}
type CSIPowerMaxStatusNodeStatusInput interface {
	pulumi.Input

	ToCSIPowerMaxStatusNodeStatusOutput() CSIPowerMaxStatusNodeStatusOutput
	ToCSIPowerMaxStatusNodeStatusOutputWithContext(context.Context) CSIPowerMaxStatusNodeStatusOutput
}

// NodeStatus is the status of Controller pods
type CSIPowerMaxStatusNodeStatusArgs struct {
	Available pulumi.StringArrayInput `pulumi:"available"`
	Ready     pulumi.StringArrayInput `pulumi:"ready"`
	Starting  pulumi.StringArrayInput `pulumi:"starting"`
	Stopped   pulumi.StringArrayInput `pulumi:"stopped"`
}

func (CSIPowerMaxStatusNodeStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxStatusNodeStatus)(nil)).Elem()
}

func (i CSIPowerMaxStatusNodeStatusArgs) ToCSIPowerMaxStatusNodeStatusOutput() CSIPowerMaxStatusNodeStatusOutput {
	return i.ToCSIPowerMaxStatusNodeStatusOutputWithContext(context.Background())
}

func (i CSIPowerMaxStatusNodeStatusArgs) ToCSIPowerMaxStatusNodeStatusOutputWithContext(ctx context.Context) CSIPowerMaxStatusNodeStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxStatusNodeStatusOutput)
}

func (i CSIPowerMaxStatusNodeStatusArgs) ToCSIPowerMaxStatusNodeStatusPtrOutput() CSIPowerMaxStatusNodeStatusPtrOutput {
	return i.ToCSIPowerMaxStatusNodeStatusPtrOutputWithContext(context.Background())
}

func (i CSIPowerMaxStatusNodeStatusArgs) ToCSIPowerMaxStatusNodeStatusPtrOutputWithContext(ctx context.Context) CSIPowerMaxStatusNodeStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxStatusNodeStatusOutput).ToCSIPowerMaxStatusNodeStatusPtrOutputWithContext(ctx)
}

// CSIPowerMaxStatusNodeStatusPtrInput is an input type that accepts CSIPowerMaxStatusNodeStatusArgs, CSIPowerMaxStatusNodeStatusPtr and CSIPowerMaxStatusNodeStatusPtrOutput values.
// You can construct a concrete instance of `CSIPowerMaxStatusNodeStatusPtrInput` via:
//
//          CSIPowerMaxStatusNodeStatusArgs{...}
//
//  or:
//
//          nil
type CSIPowerMaxStatusNodeStatusPtrInput interface {
	pulumi.Input

	ToCSIPowerMaxStatusNodeStatusPtrOutput() CSIPowerMaxStatusNodeStatusPtrOutput
	ToCSIPowerMaxStatusNodeStatusPtrOutputWithContext(context.Context) CSIPowerMaxStatusNodeStatusPtrOutput
}

type csipowerMaxStatusNodeStatusPtrType CSIPowerMaxStatusNodeStatusArgs

func CSIPowerMaxStatusNodeStatusPtr(v *CSIPowerMaxStatusNodeStatusArgs) CSIPowerMaxStatusNodeStatusPtrInput {
	return (*csipowerMaxStatusNodeStatusPtrType)(v)
}

func (*csipowerMaxStatusNodeStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxStatusNodeStatus)(nil)).Elem()
}

func (i *csipowerMaxStatusNodeStatusPtrType) ToCSIPowerMaxStatusNodeStatusPtrOutput() CSIPowerMaxStatusNodeStatusPtrOutput {
	return i.ToCSIPowerMaxStatusNodeStatusPtrOutputWithContext(context.Background())
}

func (i *csipowerMaxStatusNodeStatusPtrType) ToCSIPowerMaxStatusNodeStatusPtrOutputWithContext(ctx context.Context) CSIPowerMaxStatusNodeStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerMaxStatusNodeStatusPtrOutput)
}

// NodeStatus is the status of Controller pods
type CSIPowerMaxStatusNodeStatusOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxStatusNodeStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerMaxStatusNodeStatus)(nil)).Elem()
}

func (o CSIPowerMaxStatusNodeStatusOutput) ToCSIPowerMaxStatusNodeStatusOutput() CSIPowerMaxStatusNodeStatusOutput {
	return o
}

func (o CSIPowerMaxStatusNodeStatusOutput) ToCSIPowerMaxStatusNodeStatusOutputWithContext(ctx context.Context) CSIPowerMaxStatusNodeStatusOutput {
	return o
}

func (o CSIPowerMaxStatusNodeStatusOutput) ToCSIPowerMaxStatusNodeStatusPtrOutput() CSIPowerMaxStatusNodeStatusPtrOutput {
	return o.ToCSIPowerMaxStatusNodeStatusPtrOutputWithContext(context.Background())
}

func (o CSIPowerMaxStatusNodeStatusOutput) ToCSIPowerMaxStatusNodeStatusPtrOutputWithContext(ctx context.Context) CSIPowerMaxStatusNodeStatusPtrOutput {
	return o.ApplyT(func(v CSIPowerMaxStatusNodeStatus) *CSIPowerMaxStatusNodeStatus {
		return &v
	}).(CSIPowerMaxStatusNodeStatusPtrOutput)
}
func (o CSIPowerMaxStatusNodeStatusOutput) Available() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxStatusNodeStatus) []string { return v.Available }).(pulumi.StringArrayOutput)
}

func (o CSIPowerMaxStatusNodeStatusOutput) Ready() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxStatusNodeStatus) []string { return v.Ready }).(pulumi.StringArrayOutput)
}

func (o CSIPowerMaxStatusNodeStatusOutput) Starting() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxStatusNodeStatus) []string { return v.Starting }).(pulumi.StringArrayOutput)
}

func (o CSIPowerMaxStatusNodeStatusOutput) Stopped() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIPowerMaxStatusNodeStatus) []string { return v.Stopped }).(pulumi.StringArrayOutput)
}

type CSIPowerMaxStatusNodeStatusPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerMaxStatusNodeStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerMaxStatusNodeStatus)(nil)).Elem()
}

func (o CSIPowerMaxStatusNodeStatusPtrOutput) ToCSIPowerMaxStatusNodeStatusPtrOutput() CSIPowerMaxStatusNodeStatusPtrOutput {
	return o
}

func (o CSIPowerMaxStatusNodeStatusPtrOutput) ToCSIPowerMaxStatusNodeStatusPtrOutputWithContext(ctx context.Context) CSIPowerMaxStatusNodeStatusPtrOutput {
	return o
}

func (o CSIPowerMaxStatusNodeStatusPtrOutput) Elem() CSIPowerMaxStatusNodeStatusOutput {
	return o.ApplyT(func(v *CSIPowerMaxStatusNodeStatus) CSIPowerMaxStatusNodeStatus { return *v }).(CSIPowerMaxStatusNodeStatusOutput)
}

func (o CSIPowerMaxStatusNodeStatusPtrOutput) Available() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIPowerMaxStatusNodeStatus) []string {
		if v == nil {
			return nil
		}
		return v.Available
	}).(pulumi.StringArrayOutput)
}

func (o CSIPowerMaxStatusNodeStatusPtrOutput) Ready() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIPowerMaxStatusNodeStatus) []string {
		if v == nil {
			return nil
		}
		return v.Ready
	}).(pulumi.StringArrayOutput)
}

func (o CSIPowerMaxStatusNodeStatusPtrOutput) Starting() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIPowerMaxStatusNodeStatus) []string {
		if v == nil {
			return nil
		}
		return v.Starting
	}).(pulumi.StringArrayOutput)
}

func (o CSIPowerMaxStatusNodeStatusPtrOutput) Stopped() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIPowerMaxStatusNodeStatus) []string {
		if v == nil {
			return nil
		}
		return v.Stopped
	}).(pulumi.StringArrayOutput)
}

// CSIPowerStore is the Schema for the csipowerstores API
type CSIPowerStoreType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// CSIPowerStoreSpec defines the desired state of CSIPowerStore
	Spec *CSIPowerStoreSpec `pulumi:"spec"`
	// DriverStatus defines the observed state of CSIDriver
	Status *CSIPowerStoreStatus `pulumi:"status"`
}

// CSIPowerStoreTypeInput is an input type that accepts CSIPowerStoreTypeArgs and CSIPowerStoreTypeOutput values.
// You can construct a concrete instance of `CSIPowerStoreTypeInput` via:
//
//          CSIPowerStoreTypeArgs{...}
type CSIPowerStoreTypeInput interface {
	pulumi.Input

	ToCSIPowerStoreTypeOutput() CSIPowerStoreTypeOutput
	ToCSIPowerStoreTypeOutputWithContext(context.Context) CSIPowerStoreTypeOutput
}

// CSIPowerStore is the Schema for the csipowerstores API
type CSIPowerStoreTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// CSIPowerStoreSpec defines the desired state of CSIPowerStore
	Spec CSIPowerStoreSpecPtrInput `pulumi:"spec"`
	// DriverStatus defines the observed state of CSIDriver
	Status CSIPowerStoreStatusPtrInput `pulumi:"status"`
}

func (CSIPowerStoreTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreType)(nil)).Elem()
}

func (i CSIPowerStoreTypeArgs) ToCSIPowerStoreTypeOutput() CSIPowerStoreTypeOutput {
	return i.ToCSIPowerStoreTypeOutputWithContext(context.Background())
}

func (i CSIPowerStoreTypeArgs) ToCSIPowerStoreTypeOutputWithContext(ctx context.Context) CSIPowerStoreTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreTypeOutput)
}

// CSIPowerStore is the Schema for the csipowerstores API
type CSIPowerStoreTypeOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreType)(nil)).Elem()
}

func (o CSIPowerStoreTypeOutput) ToCSIPowerStoreTypeOutput() CSIPowerStoreTypeOutput {
	return o
}

func (o CSIPowerStoreTypeOutput) ToCSIPowerStoreTypeOutputWithContext(ctx context.Context) CSIPowerStoreTypeOutput {
	return o
}

func (o CSIPowerStoreTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o CSIPowerStoreTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o CSIPowerStoreTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// CSIPowerStoreSpec defines the desired state of CSIPowerStore
func (o CSIPowerStoreTypeOutput) Spec() CSIPowerStoreSpecPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreType) *CSIPowerStoreSpec { return v.Spec }).(CSIPowerStoreSpecPtrOutput)
}

// DriverStatus defines the observed state of CSIDriver
func (o CSIPowerStoreTypeOutput) Status() CSIPowerStoreStatusPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreType) *CSIPowerStoreStatus { return v.Status }).(CSIPowerStoreStatusPtrOutput)
}

type CSIPowerStoreMetadata struct {
}

// CSIPowerStoreMetadataInput is an input type that accepts CSIPowerStoreMetadataArgs and CSIPowerStoreMetadataOutput values.
// You can construct a concrete instance of `CSIPowerStoreMetadataInput` via:
//
//          CSIPowerStoreMetadataArgs{...}
type CSIPowerStoreMetadataInput interface {
	pulumi.Input

	ToCSIPowerStoreMetadataOutput() CSIPowerStoreMetadataOutput
	ToCSIPowerStoreMetadataOutputWithContext(context.Context) CSIPowerStoreMetadataOutput
}

type CSIPowerStoreMetadataArgs struct {
}

func (CSIPowerStoreMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreMetadata)(nil)).Elem()
}

func (i CSIPowerStoreMetadataArgs) ToCSIPowerStoreMetadataOutput() CSIPowerStoreMetadataOutput {
	return i.ToCSIPowerStoreMetadataOutputWithContext(context.Background())
}

func (i CSIPowerStoreMetadataArgs) ToCSIPowerStoreMetadataOutputWithContext(ctx context.Context) CSIPowerStoreMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreMetadataOutput)
}

type CSIPowerStoreMetadataOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreMetadata)(nil)).Elem()
}

func (o CSIPowerStoreMetadataOutput) ToCSIPowerStoreMetadataOutput() CSIPowerStoreMetadataOutput {
	return o
}

func (o CSIPowerStoreMetadataOutput) ToCSIPowerStoreMetadataOutputWithContext(ctx context.Context) CSIPowerStoreMetadataOutput {
	return o
}

// CSIPowerStoreSpec defines the desired state of CSIPowerStore
type CSIPowerStoreSpec struct {
	// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html
	Driver CSIPowerStoreSpecDriver `pulumi:"driver"`
}

// CSIPowerStoreSpecInput is an input type that accepts CSIPowerStoreSpecArgs and CSIPowerStoreSpecOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecInput` via:
//
//          CSIPowerStoreSpecArgs{...}
type CSIPowerStoreSpecInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecOutput() CSIPowerStoreSpecOutput
	ToCSIPowerStoreSpecOutputWithContext(context.Context) CSIPowerStoreSpecOutput
}

// CSIPowerStoreSpec defines the desired state of CSIPowerStore
type CSIPowerStoreSpecArgs struct {
	// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html
	Driver CSIPowerStoreSpecDriverInput `pulumi:"driver"`
}

func (CSIPowerStoreSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpec)(nil)).Elem()
}

func (i CSIPowerStoreSpecArgs) ToCSIPowerStoreSpecOutput() CSIPowerStoreSpecOutput {
	return i.ToCSIPowerStoreSpecOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecArgs) ToCSIPowerStoreSpecOutputWithContext(ctx context.Context) CSIPowerStoreSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecOutput)
}

func (i CSIPowerStoreSpecArgs) ToCSIPowerStoreSpecPtrOutput() CSIPowerStoreSpecPtrOutput {
	return i.ToCSIPowerStoreSpecPtrOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecArgs) ToCSIPowerStoreSpecPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecOutput).ToCSIPowerStoreSpecPtrOutputWithContext(ctx)
}

// CSIPowerStoreSpecPtrInput is an input type that accepts CSIPowerStoreSpecArgs, CSIPowerStoreSpecPtr and CSIPowerStoreSpecPtrOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecPtrInput` via:
//
//          CSIPowerStoreSpecArgs{...}
//
//  or:
//
//          nil
type CSIPowerStoreSpecPtrInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecPtrOutput() CSIPowerStoreSpecPtrOutput
	ToCSIPowerStoreSpecPtrOutputWithContext(context.Context) CSIPowerStoreSpecPtrOutput
}

type csipowerStoreSpecPtrType CSIPowerStoreSpecArgs

func CSIPowerStoreSpecPtr(v *CSIPowerStoreSpecArgs) CSIPowerStoreSpecPtrInput {
	return (*csipowerStoreSpecPtrType)(v)
}

func (*csipowerStoreSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpec)(nil)).Elem()
}

func (i *csipowerStoreSpecPtrType) ToCSIPowerStoreSpecPtrOutput() CSIPowerStoreSpecPtrOutput {
	return i.ToCSIPowerStoreSpecPtrOutputWithContext(context.Background())
}

func (i *csipowerStoreSpecPtrType) ToCSIPowerStoreSpecPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecPtrOutput)
}

// CSIPowerStoreSpec defines the desired state of CSIPowerStore
type CSIPowerStoreSpecOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpec)(nil)).Elem()
}

func (o CSIPowerStoreSpecOutput) ToCSIPowerStoreSpecOutput() CSIPowerStoreSpecOutput {
	return o
}

func (o CSIPowerStoreSpecOutput) ToCSIPowerStoreSpecOutputWithContext(ctx context.Context) CSIPowerStoreSpecOutput {
	return o
}

func (o CSIPowerStoreSpecOutput) ToCSIPowerStoreSpecPtrOutput() CSIPowerStoreSpecPtrOutput {
	return o.ToCSIPowerStoreSpecPtrOutputWithContext(context.Background())
}

func (o CSIPowerStoreSpecOutput) ToCSIPowerStoreSpecPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpec) *CSIPowerStoreSpec {
		return &v
	}).(CSIPowerStoreSpecPtrOutput)
}

// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html
func (o CSIPowerStoreSpecOutput) Driver() CSIPowerStoreSpecDriverOutput {
	return o.ApplyT(func(v CSIPowerStoreSpec) CSIPowerStoreSpecDriver { return v.Driver }).(CSIPowerStoreSpecDriverOutput)
}

type CSIPowerStoreSpecPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpec)(nil)).Elem()
}

func (o CSIPowerStoreSpecPtrOutput) ToCSIPowerStoreSpecPtrOutput() CSIPowerStoreSpecPtrOutput {
	return o
}

func (o CSIPowerStoreSpecPtrOutput) ToCSIPowerStoreSpecPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecPtrOutput {
	return o
}

func (o CSIPowerStoreSpecPtrOutput) Elem() CSIPowerStoreSpecOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpec) CSIPowerStoreSpec { return *v }).(CSIPowerStoreSpecOutput)
}

// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html
func (o CSIPowerStoreSpecPtrOutput) Driver() CSIPowerStoreSpecDriverPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpec) *CSIPowerStoreSpecDriver {
		if v == nil {
			return nil
		}
		return &v.Driver
	}).(CSIPowerStoreSpecDriverPtrOutput)
}

// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html
type CSIPowerStoreSpecDriver struct {
	// AuthSecret is the name of the credentials secret for the driver
	AuthSecret *string `pulumi:"authSecret"`
	// Common is the common specification for both controller and node plugins
	Common CSIPowerStoreSpecDriverCommon `pulumi:"common"`
	// ConfigVersion is the configuration version of the driver
	ConfigVersion string `pulumi:"configVersion"`
	// Controller is the specification for Controller plugin only
	Controller *CSIPowerStoreSpecDriverController `pulumi:"controller"`
	// ForceUpdate is the boolean flag used to force an update of the driver instance
	ForceUpdate *bool `pulumi:"forceUpdate"`
	// Node is the specification for Node plugin only
	Node *CSIPowerStoreSpecDriverNode `pulumi:"node"`
	// Replicas is the count of controllers for Controller plugin
	Replicas int `pulumi:"replicas"`
	// SideCars is the specification for CSI sidecar containers
	SideCars []CSIPowerStoreSpecDriverSideCars `pulumi:"sideCars"`
	// SnapshotClass is the specification for Snapshot Classes
	SnapshotClass []CSIPowerStoreSpecDriverSnapshotClass `pulumi:"snapshotClass"`
	// StorageClass is the specification for Storage Classes
	StorageClass []CSIPowerStoreSpecDriverStorageClass `pulumi:"storageClass"`
	// TLSCertSecret is the name of the TLS Cert secret
	TlsCertSecret *string `pulumi:"tlsCertSecret"`
}

// CSIPowerStoreSpecDriverInput is an input type that accepts CSIPowerStoreSpecDriverArgs and CSIPowerStoreSpecDriverOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverInput` via:
//
//          CSIPowerStoreSpecDriverArgs{...}
type CSIPowerStoreSpecDriverInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverOutput() CSIPowerStoreSpecDriverOutput
	ToCSIPowerStoreSpecDriverOutputWithContext(context.Context) CSIPowerStoreSpecDriverOutput
}

// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html
type CSIPowerStoreSpecDriverArgs struct {
	// AuthSecret is the name of the credentials secret for the driver
	AuthSecret pulumi.StringPtrInput `pulumi:"authSecret"`
	// Common is the common specification for both controller and node plugins
	Common CSIPowerStoreSpecDriverCommonInput `pulumi:"common"`
	// ConfigVersion is the configuration version of the driver
	ConfigVersion pulumi.StringInput `pulumi:"configVersion"`
	// Controller is the specification for Controller plugin only
	Controller CSIPowerStoreSpecDriverControllerPtrInput `pulumi:"controller"`
	// ForceUpdate is the boolean flag used to force an update of the driver instance
	ForceUpdate pulumi.BoolPtrInput `pulumi:"forceUpdate"`
	// Node is the specification for Node plugin only
	Node CSIPowerStoreSpecDriverNodePtrInput `pulumi:"node"`
	// Replicas is the count of controllers for Controller plugin
	Replicas pulumi.IntInput `pulumi:"replicas"`
	// SideCars is the specification for CSI sidecar containers
	SideCars CSIPowerStoreSpecDriverSideCarsArrayInput `pulumi:"sideCars"`
	// SnapshotClass is the specification for Snapshot Classes
	SnapshotClass CSIPowerStoreSpecDriverSnapshotClassArrayInput `pulumi:"snapshotClass"`
	// StorageClass is the specification for Storage Classes
	StorageClass CSIPowerStoreSpecDriverStorageClassArrayInput `pulumi:"storageClass"`
	// TLSCertSecret is the name of the TLS Cert secret
	TlsCertSecret pulumi.StringPtrInput `pulumi:"tlsCertSecret"`
}

func (CSIPowerStoreSpecDriverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriver)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverArgs) ToCSIPowerStoreSpecDriverOutput() CSIPowerStoreSpecDriverOutput {
	return i.ToCSIPowerStoreSpecDriverOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverArgs) ToCSIPowerStoreSpecDriverOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverOutput)
}

func (i CSIPowerStoreSpecDriverArgs) ToCSIPowerStoreSpecDriverPtrOutput() CSIPowerStoreSpecDriverPtrOutput {
	return i.ToCSIPowerStoreSpecDriverPtrOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverArgs) ToCSIPowerStoreSpecDriverPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverOutput).ToCSIPowerStoreSpecDriverPtrOutputWithContext(ctx)
}

// CSIPowerStoreSpecDriverPtrInput is an input type that accepts CSIPowerStoreSpecDriverArgs, CSIPowerStoreSpecDriverPtr and CSIPowerStoreSpecDriverPtrOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverPtrInput` via:
//
//          CSIPowerStoreSpecDriverArgs{...}
//
//  or:
//
//          nil
type CSIPowerStoreSpecDriverPtrInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverPtrOutput() CSIPowerStoreSpecDriverPtrOutput
	ToCSIPowerStoreSpecDriverPtrOutputWithContext(context.Context) CSIPowerStoreSpecDriverPtrOutput
}

type csipowerStoreSpecDriverPtrType CSIPowerStoreSpecDriverArgs

func CSIPowerStoreSpecDriverPtr(v *CSIPowerStoreSpecDriverArgs) CSIPowerStoreSpecDriverPtrInput {
	return (*csipowerStoreSpecDriverPtrType)(v)
}

func (*csipowerStoreSpecDriverPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriver)(nil)).Elem()
}

func (i *csipowerStoreSpecDriverPtrType) ToCSIPowerStoreSpecDriverPtrOutput() CSIPowerStoreSpecDriverPtrOutput {
	return i.ToCSIPowerStoreSpecDriverPtrOutputWithContext(context.Background())
}

func (i *csipowerStoreSpecDriverPtrType) ToCSIPowerStoreSpecDriverPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverPtrOutput)
}

// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html
type CSIPowerStoreSpecDriverOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriver)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverOutput) ToCSIPowerStoreSpecDriverOutput() CSIPowerStoreSpecDriverOutput {
	return o
}

func (o CSIPowerStoreSpecDriverOutput) ToCSIPowerStoreSpecDriverOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverOutput {
	return o
}

func (o CSIPowerStoreSpecDriverOutput) ToCSIPowerStoreSpecDriverPtrOutput() CSIPowerStoreSpecDriverPtrOutput {
	return o.ToCSIPowerStoreSpecDriverPtrOutputWithContext(context.Background())
}

func (o CSIPowerStoreSpecDriverOutput) ToCSIPowerStoreSpecDriverPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriver) *CSIPowerStoreSpecDriver {
		return &v
	}).(CSIPowerStoreSpecDriverPtrOutput)
}

// AuthSecret is the name of the credentials secret for the driver
func (o CSIPowerStoreSpecDriverOutput) AuthSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriver) *string { return v.AuthSecret }).(pulumi.StringPtrOutput)
}

// Common is the common specification for both controller and node plugins
func (o CSIPowerStoreSpecDriverOutput) Common() CSIPowerStoreSpecDriverCommonOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriver) CSIPowerStoreSpecDriverCommon { return v.Common }).(CSIPowerStoreSpecDriverCommonOutput)
}

// ConfigVersion is the configuration version of the driver
func (o CSIPowerStoreSpecDriverOutput) ConfigVersion() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriver) string { return v.ConfigVersion }).(pulumi.StringOutput)
}

// Controller is the specification for Controller plugin only
func (o CSIPowerStoreSpecDriverOutput) Controller() CSIPowerStoreSpecDriverControllerPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriver) *CSIPowerStoreSpecDriverController { return v.Controller }).(CSIPowerStoreSpecDriverControllerPtrOutput)
}

// ForceUpdate is the boolean flag used to force an update of the driver instance
func (o CSIPowerStoreSpecDriverOutput) ForceUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriver) *bool { return v.ForceUpdate }).(pulumi.BoolPtrOutput)
}

// Node is the specification for Node plugin only
func (o CSIPowerStoreSpecDriverOutput) Node() CSIPowerStoreSpecDriverNodePtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriver) *CSIPowerStoreSpecDriverNode { return v.Node }).(CSIPowerStoreSpecDriverNodePtrOutput)
}

// Replicas is the count of controllers for Controller plugin
func (o CSIPowerStoreSpecDriverOutput) Replicas() pulumi.IntOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriver) int { return v.Replicas }).(pulumi.IntOutput)
}

// SideCars is the specification for CSI sidecar containers
func (o CSIPowerStoreSpecDriverOutput) SideCars() CSIPowerStoreSpecDriverSideCarsArrayOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriver) []CSIPowerStoreSpecDriverSideCars { return v.SideCars }).(CSIPowerStoreSpecDriverSideCarsArrayOutput)
}

// SnapshotClass is the specification for Snapshot Classes
func (o CSIPowerStoreSpecDriverOutput) SnapshotClass() CSIPowerStoreSpecDriverSnapshotClassArrayOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriver) []CSIPowerStoreSpecDriverSnapshotClass { return v.SnapshotClass }).(CSIPowerStoreSpecDriverSnapshotClassArrayOutput)
}

// StorageClass is the specification for Storage Classes
func (o CSIPowerStoreSpecDriverOutput) StorageClass() CSIPowerStoreSpecDriverStorageClassArrayOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriver) []CSIPowerStoreSpecDriverStorageClass { return v.StorageClass }).(CSIPowerStoreSpecDriverStorageClassArrayOutput)
}

// TLSCertSecret is the name of the TLS Cert secret
func (o CSIPowerStoreSpecDriverOutput) TlsCertSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriver) *string { return v.TlsCertSecret }).(pulumi.StringPtrOutput)
}

type CSIPowerStoreSpecDriverPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriver)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverPtrOutput) ToCSIPowerStoreSpecDriverPtrOutput() CSIPowerStoreSpecDriverPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverPtrOutput) ToCSIPowerStoreSpecDriverPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverPtrOutput) Elem() CSIPowerStoreSpecDriverOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriver) CSIPowerStoreSpecDriver { return *v }).(CSIPowerStoreSpecDriverOutput)
}

// AuthSecret is the name of the credentials secret for the driver
func (o CSIPowerStoreSpecDriverPtrOutput) AuthSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriver) *string {
		if v == nil {
			return nil
		}
		return v.AuthSecret
	}).(pulumi.StringPtrOutput)
}

// Common is the common specification for both controller and node plugins
func (o CSIPowerStoreSpecDriverPtrOutput) Common() CSIPowerStoreSpecDriverCommonPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriver) *CSIPowerStoreSpecDriverCommon {
		if v == nil {
			return nil
		}
		return &v.Common
	}).(CSIPowerStoreSpecDriverCommonPtrOutput)
}

// ConfigVersion is the configuration version of the driver
func (o CSIPowerStoreSpecDriverPtrOutput) ConfigVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriver) *string {
		if v == nil {
			return nil
		}
		return &v.ConfigVersion
	}).(pulumi.StringPtrOutput)
}

// Controller is the specification for Controller plugin only
func (o CSIPowerStoreSpecDriverPtrOutput) Controller() CSIPowerStoreSpecDriverControllerPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriver) *CSIPowerStoreSpecDriverController {
		if v == nil {
			return nil
		}
		return v.Controller
	}).(CSIPowerStoreSpecDriverControllerPtrOutput)
}

// ForceUpdate is the boolean flag used to force an update of the driver instance
func (o CSIPowerStoreSpecDriverPtrOutput) ForceUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriver) *bool {
		if v == nil {
			return nil
		}
		return v.ForceUpdate
	}).(pulumi.BoolPtrOutput)
}

// Node is the specification for Node plugin only
func (o CSIPowerStoreSpecDriverPtrOutput) Node() CSIPowerStoreSpecDriverNodePtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriver) *CSIPowerStoreSpecDriverNode {
		if v == nil {
			return nil
		}
		return v.Node
	}).(CSIPowerStoreSpecDriverNodePtrOutput)
}

// Replicas is the count of controllers for Controller plugin
func (o CSIPowerStoreSpecDriverPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriver) *int {
		if v == nil {
			return nil
		}
		return &v.Replicas
	}).(pulumi.IntPtrOutput)
}

// SideCars is the specification for CSI sidecar containers
func (o CSIPowerStoreSpecDriverPtrOutput) SideCars() CSIPowerStoreSpecDriverSideCarsArrayOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriver) []CSIPowerStoreSpecDriverSideCars {
		if v == nil {
			return nil
		}
		return v.SideCars
	}).(CSIPowerStoreSpecDriverSideCarsArrayOutput)
}

// SnapshotClass is the specification for Snapshot Classes
func (o CSIPowerStoreSpecDriverPtrOutput) SnapshotClass() CSIPowerStoreSpecDriverSnapshotClassArrayOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriver) []CSIPowerStoreSpecDriverSnapshotClass {
		if v == nil {
			return nil
		}
		return v.SnapshotClass
	}).(CSIPowerStoreSpecDriverSnapshotClassArrayOutput)
}

// StorageClass is the specification for Storage Classes
func (o CSIPowerStoreSpecDriverPtrOutput) StorageClass() CSIPowerStoreSpecDriverStorageClassArrayOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriver) []CSIPowerStoreSpecDriverStorageClass {
		if v == nil {
			return nil
		}
		return v.StorageClass
	}).(CSIPowerStoreSpecDriverStorageClassArrayOutput)
}

// TLSCertSecret is the name of the TLS Cert secret
func (o CSIPowerStoreSpecDriverPtrOutput) TlsCertSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriver) *string {
		if v == nil {
			return nil
		}
		return v.TlsCertSecret
	}).(pulumi.StringPtrOutput)
}

// Common is the common specification for both controller and node plugins
type CSIPowerStoreSpecDriverCommon struct {
	// Args is the set of arguments for the container
	Args []string `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs []CSIPowerStoreSpecDriverCommonEnvs `pulumi:"envs"`
	// Image is the image tag for the Container
	Image *string `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name *string `pulumi:"name"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
	NodeSelector map[string]string `pulumi:"nodeSelector"`
	// Tolerations is the list of tolerations for the driver pods
	Tolerations []CSIPowerStoreSpecDriverCommonTolerations `pulumi:"tolerations"`
}

// CSIPowerStoreSpecDriverCommonInput is an input type that accepts CSIPowerStoreSpecDriverCommonArgs and CSIPowerStoreSpecDriverCommonOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverCommonInput` via:
//
//          CSIPowerStoreSpecDriverCommonArgs{...}
type CSIPowerStoreSpecDriverCommonInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverCommonOutput() CSIPowerStoreSpecDriverCommonOutput
	ToCSIPowerStoreSpecDriverCommonOutputWithContext(context.Context) CSIPowerStoreSpecDriverCommonOutput
}

// Common is the common specification for both controller and node plugins
type CSIPowerStoreSpecDriverCommonArgs struct {
	// Args is the set of arguments for the container
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs CSIPowerStoreSpecDriverCommonEnvsArrayInput `pulumi:"envs"`
	// Image is the image tag for the Container
	Image pulumi.StringPtrInput `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name pulumi.StringPtrInput `pulumi:"name"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
	NodeSelector pulumi.StringMapInput `pulumi:"nodeSelector"`
	// Tolerations is the list of tolerations for the driver pods
	Tolerations CSIPowerStoreSpecDriverCommonTolerationsArrayInput `pulumi:"tolerations"`
}

func (CSIPowerStoreSpecDriverCommonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverCommon)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverCommonArgs) ToCSIPowerStoreSpecDriverCommonOutput() CSIPowerStoreSpecDriverCommonOutput {
	return i.ToCSIPowerStoreSpecDriverCommonOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverCommonArgs) ToCSIPowerStoreSpecDriverCommonOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverCommonOutput)
}

func (i CSIPowerStoreSpecDriverCommonArgs) ToCSIPowerStoreSpecDriverCommonPtrOutput() CSIPowerStoreSpecDriverCommonPtrOutput {
	return i.ToCSIPowerStoreSpecDriverCommonPtrOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverCommonArgs) ToCSIPowerStoreSpecDriverCommonPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverCommonOutput).ToCSIPowerStoreSpecDriverCommonPtrOutputWithContext(ctx)
}

// CSIPowerStoreSpecDriverCommonPtrInput is an input type that accepts CSIPowerStoreSpecDriverCommonArgs, CSIPowerStoreSpecDriverCommonPtr and CSIPowerStoreSpecDriverCommonPtrOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverCommonPtrInput` via:
//
//          CSIPowerStoreSpecDriverCommonArgs{...}
//
//  or:
//
//          nil
type CSIPowerStoreSpecDriverCommonPtrInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverCommonPtrOutput() CSIPowerStoreSpecDriverCommonPtrOutput
	ToCSIPowerStoreSpecDriverCommonPtrOutputWithContext(context.Context) CSIPowerStoreSpecDriverCommonPtrOutput
}

type csipowerStoreSpecDriverCommonPtrType CSIPowerStoreSpecDriverCommonArgs

func CSIPowerStoreSpecDriverCommonPtr(v *CSIPowerStoreSpecDriverCommonArgs) CSIPowerStoreSpecDriverCommonPtrInput {
	return (*csipowerStoreSpecDriverCommonPtrType)(v)
}

func (*csipowerStoreSpecDriverCommonPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverCommon)(nil)).Elem()
}

func (i *csipowerStoreSpecDriverCommonPtrType) ToCSIPowerStoreSpecDriverCommonPtrOutput() CSIPowerStoreSpecDriverCommonPtrOutput {
	return i.ToCSIPowerStoreSpecDriverCommonPtrOutputWithContext(context.Background())
}

func (i *csipowerStoreSpecDriverCommonPtrType) ToCSIPowerStoreSpecDriverCommonPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverCommonPtrOutput)
}

// Common is the common specification for both controller and node plugins
type CSIPowerStoreSpecDriverCommonOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverCommonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverCommon)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverCommonOutput) ToCSIPowerStoreSpecDriverCommonOutput() CSIPowerStoreSpecDriverCommonOutput {
	return o
}

func (o CSIPowerStoreSpecDriverCommonOutput) ToCSIPowerStoreSpecDriverCommonOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonOutput {
	return o
}

func (o CSIPowerStoreSpecDriverCommonOutput) ToCSIPowerStoreSpecDriverCommonPtrOutput() CSIPowerStoreSpecDriverCommonPtrOutput {
	return o.ToCSIPowerStoreSpecDriverCommonPtrOutputWithContext(context.Background())
}

func (o CSIPowerStoreSpecDriverCommonOutput) ToCSIPowerStoreSpecDriverCommonPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverCommon) *CSIPowerStoreSpecDriverCommon {
		return &v
	}).(CSIPowerStoreSpecDriverCommonPtrOutput)
}

// Args is the set of arguments for the container
func (o CSIPowerStoreSpecDriverCommonOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverCommon) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIPowerStoreSpecDriverCommonOutput) Envs() CSIPowerStoreSpecDriverCommonEnvsArrayOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverCommon) []CSIPowerStoreSpecDriverCommonEnvs { return v.Envs }).(CSIPowerStoreSpecDriverCommonEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIPowerStoreSpecDriverCommonOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverCommon) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIPowerStoreSpecDriverCommonOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverCommon) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIPowerStoreSpecDriverCommonOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverCommon) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
func (o CSIPowerStoreSpecDriverCommonOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverCommon) map[string]string { return v.NodeSelector }).(pulumi.StringMapOutput)
}

// Tolerations is the list of tolerations for the driver pods
func (o CSIPowerStoreSpecDriverCommonOutput) Tolerations() CSIPowerStoreSpecDriverCommonTolerationsArrayOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverCommon) []CSIPowerStoreSpecDriverCommonTolerations { return v.Tolerations }).(CSIPowerStoreSpecDriverCommonTolerationsArrayOutput)
}

type CSIPowerStoreSpecDriverCommonPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverCommonPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverCommon)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverCommonPtrOutput) ToCSIPowerStoreSpecDriverCommonPtrOutput() CSIPowerStoreSpecDriverCommonPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverCommonPtrOutput) ToCSIPowerStoreSpecDriverCommonPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverCommonPtrOutput) Elem() CSIPowerStoreSpecDriverCommonOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverCommon) CSIPowerStoreSpecDriverCommon { return *v }).(CSIPowerStoreSpecDriverCommonOutput)
}

// Args is the set of arguments for the container
func (o CSIPowerStoreSpecDriverCommonPtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverCommon) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIPowerStoreSpecDriverCommonPtrOutput) Envs() CSIPowerStoreSpecDriverCommonEnvsArrayOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverCommon) []CSIPowerStoreSpecDriverCommonEnvs {
		if v == nil {
			return nil
		}
		return v.Envs
	}).(CSIPowerStoreSpecDriverCommonEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIPowerStoreSpecDriverCommonPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverCommon) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIPowerStoreSpecDriverCommonPtrOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverCommon) *string {
		if v == nil {
			return nil
		}
		return v.ImagePullPolicy
	}).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIPowerStoreSpecDriverCommonPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverCommon) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
func (o CSIPowerStoreSpecDriverCommonPtrOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverCommon) map[string]string {
		if v == nil {
			return nil
		}
		return v.NodeSelector
	}).(pulumi.StringMapOutput)
}

// Tolerations is the list of tolerations for the driver pods
func (o CSIPowerStoreSpecDriverCommonPtrOutput) Tolerations() CSIPowerStoreSpecDriverCommonTolerationsArrayOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverCommon) []CSIPowerStoreSpecDriverCommonTolerations {
		if v == nil {
			return nil
		}
		return v.Tolerations
	}).(CSIPowerStoreSpecDriverCommonTolerationsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIPowerStoreSpecDriverCommonEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *CSIPowerStoreSpecDriverCommonEnvsValueFrom `pulumi:"valueFrom"`
}

// CSIPowerStoreSpecDriverCommonEnvsInput is an input type that accepts CSIPowerStoreSpecDriverCommonEnvsArgs and CSIPowerStoreSpecDriverCommonEnvsOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverCommonEnvsInput` via:
//
//          CSIPowerStoreSpecDriverCommonEnvsArgs{...}
type CSIPowerStoreSpecDriverCommonEnvsInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverCommonEnvsOutput() CSIPowerStoreSpecDriverCommonEnvsOutput
	ToCSIPowerStoreSpecDriverCommonEnvsOutputWithContext(context.Context) CSIPowerStoreSpecDriverCommonEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type CSIPowerStoreSpecDriverCommonEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom CSIPowerStoreSpecDriverCommonEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (CSIPowerStoreSpecDriverCommonEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverCommonEnvs)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverCommonEnvsArgs) ToCSIPowerStoreSpecDriverCommonEnvsOutput() CSIPowerStoreSpecDriverCommonEnvsOutput {
	return i.ToCSIPowerStoreSpecDriverCommonEnvsOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverCommonEnvsArgs) ToCSIPowerStoreSpecDriverCommonEnvsOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverCommonEnvsOutput)
}

// CSIPowerStoreSpecDriverCommonEnvsArrayInput is an input type that accepts CSIPowerStoreSpecDriverCommonEnvsArray and CSIPowerStoreSpecDriverCommonEnvsArrayOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverCommonEnvsArrayInput` via:
//
//          CSIPowerStoreSpecDriverCommonEnvsArray{ CSIPowerStoreSpecDriverCommonEnvsArgs{...} }
type CSIPowerStoreSpecDriverCommonEnvsArrayInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverCommonEnvsArrayOutput() CSIPowerStoreSpecDriverCommonEnvsArrayOutput
	ToCSIPowerStoreSpecDriverCommonEnvsArrayOutputWithContext(context.Context) CSIPowerStoreSpecDriverCommonEnvsArrayOutput
}

type CSIPowerStoreSpecDriverCommonEnvsArray []CSIPowerStoreSpecDriverCommonEnvsInput

func (CSIPowerStoreSpecDriverCommonEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerStoreSpecDriverCommonEnvs)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverCommonEnvsArray) ToCSIPowerStoreSpecDriverCommonEnvsArrayOutput() CSIPowerStoreSpecDriverCommonEnvsArrayOutput {
	return i.ToCSIPowerStoreSpecDriverCommonEnvsArrayOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverCommonEnvsArray) ToCSIPowerStoreSpecDriverCommonEnvsArrayOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverCommonEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIPowerStoreSpecDriverCommonEnvsOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverCommonEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverCommonEnvs)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverCommonEnvsOutput) ToCSIPowerStoreSpecDriverCommonEnvsOutput() CSIPowerStoreSpecDriverCommonEnvsOutput {
	return o
}

func (o CSIPowerStoreSpecDriverCommonEnvsOutput) ToCSIPowerStoreSpecDriverCommonEnvsOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o CSIPowerStoreSpecDriverCommonEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverCommonEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o CSIPowerStoreSpecDriverCommonEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverCommonEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o CSIPowerStoreSpecDriverCommonEnvsOutput) ValueFrom() CSIPowerStoreSpecDriverCommonEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverCommonEnvs) *CSIPowerStoreSpecDriverCommonEnvsValueFrom {
		return v.ValueFrom
	}).(CSIPowerStoreSpecDriverCommonEnvsValueFromPtrOutput)
}

type CSIPowerStoreSpecDriverCommonEnvsArrayOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverCommonEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerStoreSpecDriverCommonEnvs)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverCommonEnvsArrayOutput) ToCSIPowerStoreSpecDriverCommonEnvsArrayOutput() CSIPowerStoreSpecDriverCommonEnvsArrayOutput {
	return o
}

func (o CSIPowerStoreSpecDriverCommonEnvsArrayOutput) ToCSIPowerStoreSpecDriverCommonEnvsArrayOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonEnvsArrayOutput {
	return o
}

func (o CSIPowerStoreSpecDriverCommonEnvsArrayOutput) Index(i pulumi.IntInput) CSIPowerStoreSpecDriverCommonEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIPowerStoreSpecDriverCommonEnvs {
		return vs[0].([]CSIPowerStoreSpecDriverCommonEnvs)[vs[1].(int)]
	}).(CSIPowerStoreSpecDriverCommonEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIPowerStoreSpecDriverCommonEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef *CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// CSIPowerStoreSpecDriverCommonEnvsValueFromInput is an input type that accepts CSIPowerStoreSpecDriverCommonEnvsValueFromArgs and CSIPowerStoreSpecDriverCommonEnvsValueFromOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverCommonEnvsValueFromInput` via:
//
//          CSIPowerStoreSpecDriverCommonEnvsValueFromArgs{...}
type CSIPowerStoreSpecDriverCommonEnvsValueFromInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverCommonEnvsValueFromOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromOutput
	ToCSIPowerStoreSpecDriverCommonEnvsValueFromOutputWithContext(context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIPowerStoreSpecDriverCommonEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (CSIPowerStoreSpecDriverCommonEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverCommonEnvsValueFrom)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverCommonEnvsValueFromArgs) ToCSIPowerStoreSpecDriverCommonEnvsValueFromOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromOutput {
	return i.ToCSIPowerStoreSpecDriverCommonEnvsValueFromOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverCommonEnvsValueFromArgs) ToCSIPowerStoreSpecDriverCommonEnvsValueFromOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverCommonEnvsValueFromOutput)
}

func (i CSIPowerStoreSpecDriverCommonEnvsValueFromArgs) ToCSIPowerStoreSpecDriverCommonEnvsValueFromPtrOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromPtrOutput {
	return i.ToCSIPowerStoreSpecDriverCommonEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverCommonEnvsValueFromArgs) ToCSIPowerStoreSpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverCommonEnvsValueFromOutput).ToCSIPowerStoreSpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx)
}

// CSIPowerStoreSpecDriverCommonEnvsValueFromPtrInput is an input type that accepts CSIPowerStoreSpecDriverCommonEnvsValueFromArgs, CSIPowerStoreSpecDriverCommonEnvsValueFromPtr and CSIPowerStoreSpecDriverCommonEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverCommonEnvsValueFromPtrInput` via:
//
//          CSIPowerStoreSpecDriverCommonEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type CSIPowerStoreSpecDriverCommonEnvsValueFromPtrInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverCommonEnvsValueFromPtrOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromPtrOutput
	ToCSIPowerStoreSpecDriverCommonEnvsValueFromPtrOutputWithContext(context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromPtrOutput
}

type csipowerStoreSpecDriverCommonEnvsValueFromPtrType CSIPowerStoreSpecDriverCommonEnvsValueFromArgs

func CSIPowerStoreSpecDriverCommonEnvsValueFromPtr(v *CSIPowerStoreSpecDriverCommonEnvsValueFromArgs) CSIPowerStoreSpecDriverCommonEnvsValueFromPtrInput {
	return (*csipowerStoreSpecDriverCommonEnvsValueFromPtrType)(v)
}

func (*csipowerStoreSpecDriverCommonEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverCommonEnvsValueFrom)(nil)).Elem()
}

func (i *csipowerStoreSpecDriverCommonEnvsValueFromPtrType) ToCSIPowerStoreSpecDriverCommonEnvsValueFromPtrOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromPtrOutput {
	return i.ToCSIPowerStoreSpecDriverCommonEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *csipowerStoreSpecDriverCommonEnvsValueFromPtrType) ToCSIPowerStoreSpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverCommonEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIPowerStoreSpecDriverCommonEnvsValueFromOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverCommonEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverCommonEnvsValueFrom)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverCommonEnvsValueFromOutput) ToCSIPowerStoreSpecDriverCommonEnvsValueFromOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromOutput {
	return o
}

func (o CSIPowerStoreSpecDriverCommonEnvsValueFromOutput) ToCSIPowerStoreSpecDriverCommonEnvsValueFromOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromOutput {
	return o
}

func (o CSIPowerStoreSpecDriverCommonEnvsValueFromOutput) ToCSIPowerStoreSpecDriverCommonEnvsValueFromPtrOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromPtrOutput {
	return o.ToCSIPowerStoreSpecDriverCommonEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o CSIPowerStoreSpecDriverCommonEnvsValueFromOutput) ToCSIPowerStoreSpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverCommonEnvsValueFrom) *CSIPowerStoreSpecDriverCommonEnvsValueFrom {
		return &v
	}).(CSIPowerStoreSpecDriverCommonEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o CSIPowerStoreSpecDriverCommonEnvsValueFromOutput) ConfigMapKeyRef() CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverCommonEnvsValueFrom) *CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o CSIPowerStoreSpecDriverCommonEnvsValueFromOutput) FieldRef() CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverCommonEnvsValueFrom) *CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRef {
		return v.FieldRef
	}).(CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIPowerStoreSpecDriverCommonEnvsValueFromOutput) ResourceFieldRef() CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverCommonEnvsValueFrom) *CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIPowerStoreSpecDriverCommonEnvsValueFromOutput) SecretKeyRef() CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverCommonEnvsValueFrom) *CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput)
}

type CSIPowerStoreSpecDriverCommonEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverCommonEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverCommonEnvsValueFrom)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverCommonEnvsValueFromPtrOutput) ToCSIPowerStoreSpecDriverCommonEnvsValueFromPtrOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverCommonEnvsValueFromPtrOutput) ToCSIPowerStoreSpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverCommonEnvsValueFromPtrOutput) Elem() CSIPowerStoreSpecDriverCommonEnvsValueFromOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverCommonEnvsValueFrom) CSIPowerStoreSpecDriverCommonEnvsValueFrom {
		return *v
	}).(CSIPowerStoreSpecDriverCommonEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o CSIPowerStoreSpecDriverCommonEnvsValueFromPtrOutput) ConfigMapKeyRef() CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverCommonEnvsValueFrom) *CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o CSIPowerStoreSpecDriverCommonEnvsValueFromPtrOutput) FieldRef() CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverCommonEnvsValueFrom) *CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIPowerStoreSpecDriverCommonEnvsValueFromPtrOutput) ResourceFieldRef() CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverCommonEnvsValueFrom) *CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIPowerStoreSpecDriverCommonEnvsValueFromPtrOutput) SecretKeyRef() CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverCommonEnvsValueFrom) *CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefInput is an input type that accepts CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs and CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefInput` via:
//
//          CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs{...}
type CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput
	ToCSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return i.ToCSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput)
}

func (i CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput).ToCSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs, CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtr and CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput
	ToCSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput
}

type csipowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs

func CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtr(v *CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput {
	return (*csipowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*csipowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *csipowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType) ToCSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *csipowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType) ToCSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToCSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRef) *CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRef {
		return &v
	}).(CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) Elem() CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRef) CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRef {
		return *v
	}).(CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefInput is an input type that accepts CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefArgs and CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefInput` via:
//
//          CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefArgs{...}
type CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefOutput
	ToCSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefOutputWithContext(context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRef)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefArgs) ToCSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefOutput {
	return i.ToCSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefArgs) ToCSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefOutput)
}

func (i CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefArgs) ToCSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefArgs) ToCSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefOutput).ToCSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrInput is an input type that accepts CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefArgs, CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtr and CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrInput` via:
//
//          CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrOutput
	ToCSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrOutput
}

type csipowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrType CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefArgs

func CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtr(v *CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefArgs) CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrInput {
	return (*csipowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrType)(v)
}

func (*csipowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *csipowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrType) ToCSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *csipowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrType) ToCSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefOutput) ToCSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefOutput) ToCSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefOutput) ToCSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o.ToCSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefOutput) ToCSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRef) *CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRef {
		return &v
	}).(CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrOutput) ToCSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrOutput) ToCSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrOutput) Elem() CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRef) CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRef {
		return *v
	}).(CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisor `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefInput is an input type that accepts CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefArgs and CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefInput` via:
//
//          CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefArgs{...}
type CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefOutput
	ToCSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefOutputWithContext(context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefArgs) ToCSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return i.ToCSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefArgs) ToCSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefOutput)
}

func (i CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefArgs) ToCSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefArgs) ToCSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefOutput).ToCSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrInput is an input type that accepts CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefArgs, CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtr and CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrInput` via:
//
//          CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput
	ToCSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput
}

type csipowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrType CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefArgs

func CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtr(v *CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefArgs) CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrInput {
	return (*csipowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*csipowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *csipowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrType) ToCSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *csipowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrType) ToCSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ToCSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ToCSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ToCSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToCSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ToCSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRef) *CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRef {
		return &v
	}).(CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefOutput) Divisor() CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRef) *CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisor {
		return v.Divisor
	}).(CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) ToCSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) ToCSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) Elem() CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRef) CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRef {
		return *v
	}).(CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) Divisor() CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRef) *CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisor {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

type CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisor struct {
}

// CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorInput is an input type that accepts CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs and CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorInput` via:
//
//          CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs{...}
type CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput
	ToCSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput
}

type CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs struct {
}

func (CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs) ToCSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput {
	return i.ToCSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs) ToCSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput)
}

func (i CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs) ToCSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToCSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs) ToCSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput).ToCSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx)
}

// CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrInput is an input type that accepts CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs, CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtr and CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrInput` via:
//
//          CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs{...}
//
//  or:
//
//          nil
type CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput
	ToCSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput
}

type csipowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrType CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs

func CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtr(v *CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs) CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrInput {
	return (*csipowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrType)(v)
}

func (*csipowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i *csipowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrType) ToCSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToCSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i *csipowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrType) ToCSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput) ToCSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput) ToCSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput) ToCSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ToCSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (o CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput) ToCSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisor) *CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisor {
		return &v
	}).(CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput) ToCSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput) ToCSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput) Elem() CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisor) CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisor {
		return *v
	}).(CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefInput is an input type that accepts CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefArgs and CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefInput` via:
//
//          CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefArgs{...}
type CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefOutput
	ToCSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefOutputWithContext(context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefArgs) ToCSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return i.ToCSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefArgs) ToCSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefOutput)
}

func (i CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefArgs) ToCSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefArgs) ToCSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefOutput).ToCSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrInput is an input type that accepts CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefArgs, CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtr and CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrInput` via:
//
//          CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput
	ToCSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput
}

type csipowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrType CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefArgs

func CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtr(v *CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefArgs) CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrInput {
	return (*csipowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*csipowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *csipowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrType) ToCSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *csipowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrType) ToCSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefOutput) ToCSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefOutput) ToCSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefOutput) ToCSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToCSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefOutput) ToCSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRef) *CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRef {
		return &v
	}).(CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) ToCSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) ToCSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) Elem() CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRef) CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRef {
		return *v
	}).(CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIPowerStoreSpecDriverCommonNodeSelector struct {
}

// CSIPowerStoreSpecDriverCommonNodeSelectorInput is an input type that accepts CSIPowerStoreSpecDriverCommonNodeSelectorArgs and CSIPowerStoreSpecDriverCommonNodeSelectorOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverCommonNodeSelectorInput` via:
//
//          CSIPowerStoreSpecDriverCommonNodeSelectorArgs{...}
type CSIPowerStoreSpecDriverCommonNodeSelectorInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverCommonNodeSelectorOutput() CSIPowerStoreSpecDriverCommonNodeSelectorOutput
	ToCSIPowerStoreSpecDriverCommonNodeSelectorOutputWithContext(context.Context) CSIPowerStoreSpecDriverCommonNodeSelectorOutput
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIPowerStoreSpecDriverCommonNodeSelectorArgs struct {
}

func (CSIPowerStoreSpecDriverCommonNodeSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverCommonNodeSelector)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverCommonNodeSelectorArgs) ToCSIPowerStoreSpecDriverCommonNodeSelectorOutput() CSIPowerStoreSpecDriverCommonNodeSelectorOutput {
	return i.ToCSIPowerStoreSpecDriverCommonNodeSelectorOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverCommonNodeSelectorArgs) ToCSIPowerStoreSpecDriverCommonNodeSelectorOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonNodeSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverCommonNodeSelectorOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIPowerStoreSpecDriverCommonNodeSelectorOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverCommonNodeSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverCommonNodeSelector)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverCommonNodeSelectorOutput) ToCSIPowerStoreSpecDriverCommonNodeSelectorOutput() CSIPowerStoreSpecDriverCommonNodeSelectorOutput {
	return o
}

func (o CSIPowerStoreSpecDriverCommonNodeSelectorOutput) ToCSIPowerStoreSpecDriverCommonNodeSelectorOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonNodeSelectorOutput {
	return o
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIPowerStoreSpecDriverCommonTolerations struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect *string `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key *string `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator *string `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds *int `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value *string `pulumi:"value"`
}

// CSIPowerStoreSpecDriverCommonTolerationsInput is an input type that accepts CSIPowerStoreSpecDriverCommonTolerationsArgs and CSIPowerStoreSpecDriverCommonTolerationsOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverCommonTolerationsInput` via:
//
//          CSIPowerStoreSpecDriverCommonTolerationsArgs{...}
type CSIPowerStoreSpecDriverCommonTolerationsInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverCommonTolerationsOutput() CSIPowerStoreSpecDriverCommonTolerationsOutput
	ToCSIPowerStoreSpecDriverCommonTolerationsOutputWithContext(context.Context) CSIPowerStoreSpecDriverCommonTolerationsOutput
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIPowerStoreSpecDriverCommonTolerationsArgs struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect pulumi.StringPtrInput `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds pulumi.IntPtrInput `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (CSIPowerStoreSpecDriverCommonTolerationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverCommonTolerations)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverCommonTolerationsArgs) ToCSIPowerStoreSpecDriverCommonTolerationsOutput() CSIPowerStoreSpecDriverCommonTolerationsOutput {
	return i.ToCSIPowerStoreSpecDriverCommonTolerationsOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverCommonTolerationsArgs) ToCSIPowerStoreSpecDriverCommonTolerationsOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonTolerationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverCommonTolerationsOutput)
}

// CSIPowerStoreSpecDriverCommonTolerationsArrayInput is an input type that accepts CSIPowerStoreSpecDriverCommonTolerationsArray and CSIPowerStoreSpecDriverCommonTolerationsArrayOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverCommonTolerationsArrayInput` via:
//
//          CSIPowerStoreSpecDriverCommonTolerationsArray{ CSIPowerStoreSpecDriverCommonTolerationsArgs{...} }
type CSIPowerStoreSpecDriverCommonTolerationsArrayInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverCommonTolerationsArrayOutput() CSIPowerStoreSpecDriverCommonTolerationsArrayOutput
	ToCSIPowerStoreSpecDriverCommonTolerationsArrayOutputWithContext(context.Context) CSIPowerStoreSpecDriverCommonTolerationsArrayOutput
}

type CSIPowerStoreSpecDriverCommonTolerationsArray []CSIPowerStoreSpecDriverCommonTolerationsInput

func (CSIPowerStoreSpecDriverCommonTolerationsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerStoreSpecDriverCommonTolerations)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverCommonTolerationsArray) ToCSIPowerStoreSpecDriverCommonTolerationsArrayOutput() CSIPowerStoreSpecDriverCommonTolerationsArrayOutput {
	return i.ToCSIPowerStoreSpecDriverCommonTolerationsArrayOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverCommonTolerationsArray) ToCSIPowerStoreSpecDriverCommonTolerationsArrayOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonTolerationsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverCommonTolerationsArrayOutput)
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIPowerStoreSpecDriverCommonTolerationsOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverCommonTolerationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverCommonTolerations)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverCommonTolerationsOutput) ToCSIPowerStoreSpecDriverCommonTolerationsOutput() CSIPowerStoreSpecDriverCommonTolerationsOutput {
	return o
}

func (o CSIPowerStoreSpecDriverCommonTolerationsOutput) ToCSIPowerStoreSpecDriverCommonTolerationsOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonTolerationsOutput {
	return o
}

// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
func (o CSIPowerStoreSpecDriverCommonTolerationsOutput) Effect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverCommonTolerations) *string { return v.Effect }).(pulumi.StringPtrOutput)
}

// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
func (o CSIPowerStoreSpecDriverCommonTolerationsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverCommonTolerations) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
func (o CSIPowerStoreSpecDriverCommonTolerationsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverCommonTolerations) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
func (o CSIPowerStoreSpecDriverCommonTolerationsOutput) TolerationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverCommonTolerations) *int { return v.TolerationSeconds }).(pulumi.IntPtrOutput)
}

// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
func (o CSIPowerStoreSpecDriverCommonTolerationsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverCommonTolerations) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type CSIPowerStoreSpecDriverCommonTolerationsArrayOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverCommonTolerationsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerStoreSpecDriverCommonTolerations)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverCommonTolerationsArrayOutput) ToCSIPowerStoreSpecDriverCommonTolerationsArrayOutput() CSIPowerStoreSpecDriverCommonTolerationsArrayOutput {
	return o
}

func (o CSIPowerStoreSpecDriverCommonTolerationsArrayOutput) ToCSIPowerStoreSpecDriverCommonTolerationsArrayOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverCommonTolerationsArrayOutput {
	return o
}

func (o CSIPowerStoreSpecDriverCommonTolerationsArrayOutput) Index(i pulumi.IntInput) CSIPowerStoreSpecDriverCommonTolerationsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIPowerStoreSpecDriverCommonTolerations {
		return vs[0].([]CSIPowerStoreSpecDriverCommonTolerations)[vs[1].(int)]
	}).(CSIPowerStoreSpecDriverCommonTolerationsOutput)
}

// Controller is the specification for Controller plugin only
type CSIPowerStoreSpecDriverController struct {
	// Args is the set of arguments for the container
	Args []string `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs []CSIPowerStoreSpecDriverControllerEnvs `pulumi:"envs"`
	// Image is the image tag for the Container
	Image *string `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name *string `pulumi:"name"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
	NodeSelector map[string]string `pulumi:"nodeSelector"`
	// Tolerations is the list of tolerations for the driver pods
	Tolerations []CSIPowerStoreSpecDriverControllerTolerations `pulumi:"tolerations"`
}

// CSIPowerStoreSpecDriverControllerInput is an input type that accepts CSIPowerStoreSpecDriverControllerArgs and CSIPowerStoreSpecDriverControllerOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverControllerInput` via:
//
//          CSIPowerStoreSpecDriverControllerArgs{...}
type CSIPowerStoreSpecDriverControllerInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverControllerOutput() CSIPowerStoreSpecDriverControllerOutput
	ToCSIPowerStoreSpecDriverControllerOutputWithContext(context.Context) CSIPowerStoreSpecDriverControllerOutput
}

// Controller is the specification for Controller plugin only
type CSIPowerStoreSpecDriverControllerArgs struct {
	// Args is the set of arguments for the container
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs CSIPowerStoreSpecDriverControllerEnvsArrayInput `pulumi:"envs"`
	// Image is the image tag for the Container
	Image pulumi.StringPtrInput `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name pulumi.StringPtrInput `pulumi:"name"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
	NodeSelector pulumi.StringMapInput `pulumi:"nodeSelector"`
	// Tolerations is the list of tolerations for the driver pods
	Tolerations CSIPowerStoreSpecDriverControllerTolerationsArrayInput `pulumi:"tolerations"`
}

func (CSIPowerStoreSpecDriverControllerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverController)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverControllerArgs) ToCSIPowerStoreSpecDriverControllerOutput() CSIPowerStoreSpecDriverControllerOutput {
	return i.ToCSIPowerStoreSpecDriverControllerOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverControllerArgs) ToCSIPowerStoreSpecDriverControllerOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverControllerOutput)
}

func (i CSIPowerStoreSpecDriverControllerArgs) ToCSIPowerStoreSpecDriverControllerPtrOutput() CSIPowerStoreSpecDriverControllerPtrOutput {
	return i.ToCSIPowerStoreSpecDriverControllerPtrOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverControllerArgs) ToCSIPowerStoreSpecDriverControllerPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverControllerOutput).ToCSIPowerStoreSpecDriverControllerPtrOutputWithContext(ctx)
}

// CSIPowerStoreSpecDriverControllerPtrInput is an input type that accepts CSIPowerStoreSpecDriverControllerArgs, CSIPowerStoreSpecDriverControllerPtr and CSIPowerStoreSpecDriverControllerPtrOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverControllerPtrInput` via:
//
//          CSIPowerStoreSpecDriverControllerArgs{...}
//
//  or:
//
//          nil
type CSIPowerStoreSpecDriverControllerPtrInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverControllerPtrOutput() CSIPowerStoreSpecDriverControllerPtrOutput
	ToCSIPowerStoreSpecDriverControllerPtrOutputWithContext(context.Context) CSIPowerStoreSpecDriverControllerPtrOutput
}

type csipowerStoreSpecDriverControllerPtrType CSIPowerStoreSpecDriverControllerArgs

func CSIPowerStoreSpecDriverControllerPtr(v *CSIPowerStoreSpecDriverControllerArgs) CSIPowerStoreSpecDriverControllerPtrInput {
	return (*csipowerStoreSpecDriverControllerPtrType)(v)
}

func (*csipowerStoreSpecDriverControllerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverController)(nil)).Elem()
}

func (i *csipowerStoreSpecDriverControllerPtrType) ToCSIPowerStoreSpecDriverControllerPtrOutput() CSIPowerStoreSpecDriverControllerPtrOutput {
	return i.ToCSIPowerStoreSpecDriverControllerPtrOutputWithContext(context.Background())
}

func (i *csipowerStoreSpecDriverControllerPtrType) ToCSIPowerStoreSpecDriverControllerPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverControllerPtrOutput)
}

// Controller is the specification for Controller plugin only
type CSIPowerStoreSpecDriverControllerOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverControllerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverController)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverControllerOutput) ToCSIPowerStoreSpecDriverControllerOutput() CSIPowerStoreSpecDriverControllerOutput {
	return o
}

func (o CSIPowerStoreSpecDriverControllerOutput) ToCSIPowerStoreSpecDriverControllerOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerOutput {
	return o
}

func (o CSIPowerStoreSpecDriverControllerOutput) ToCSIPowerStoreSpecDriverControllerPtrOutput() CSIPowerStoreSpecDriverControllerPtrOutput {
	return o.ToCSIPowerStoreSpecDriverControllerPtrOutputWithContext(context.Background())
}

func (o CSIPowerStoreSpecDriverControllerOutput) ToCSIPowerStoreSpecDriverControllerPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverController) *CSIPowerStoreSpecDriverController {
		return &v
	}).(CSIPowerStoreSpecDriverControllerPtrOutput)
}

// Args is the set of arguments for the container
func (o CSIPowerStoreSpecDriverControllerOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverController) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIPowerStoreSpecDriverControllerOutput) Envs() CSIPowerStoreSpecDriverControllerEnvsArrayOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverController) []CSIPowerStoreSpecDriverControllerEnvs { return v.Envs }).(CSIPowerStoreSpecDriverControllerEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIPowerStoreSpecDriverControllerOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverController) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIPowerStoreSpecDriverControllerOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverController) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIPowerStoreSpecDriverControllerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverController) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
func (o CSIPowerStoreSpecDriverControllerOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverController) map[string]string { return v.NodeSelector }).(pulumi.StringMapOutput)
}

// Tolerations is the list of tolerations for the driver pods
func (o CSIPowerStoreSpecDriverControllerOutput) Tolerations() CSIPowerStoreSpecDriverControllerTolerationsArrayOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverController) []CSIPowerStoreSpecDriverControllerTolerations {
		return v.Tolerations
	}).(CSIPowerStoreSpecDriverControllerTolerationsArrayOutput)
}

type CSIPowerStoreSpecDriverControllerPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverControllerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverController)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverControllerPtrOutput) ToCSIPowerStoreSpecDriverControllerPtrOutput() CSIPowerStoreSpecDriverControllerPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverControllerPtrOutput) ToCSIPowerStoreSpecDriverControllerPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverControllerPtrOutput) Elem() CSIPowerStoreSpecDriverControllerOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverController) CSIPowerStoreSpecDriverController { return *v }).(CSIPowerStoreSpecDriverControllerOutput)
}

// Args is the set of arguments for the container
func (o CSIPowerStoreSpecDriverControllerPtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverController) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIPowerStoreSpecDriverControllerPtrOutput) Envs() CSIPowerStoreSpecDriverControllerEnvsArrayOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverController) []CSIPowerStoreSpecDriverControllerEnvs {
		if v == nil {
			return nil
		}
		return v.Envs
	}).(CSIPowerStoreSpecDriverControllerEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIPowerStoreSpecDriverControllerPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverController) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIPowerStoreSpecDriverControllerPtrOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverController) *string {
		if v == nil {
			return nil
		}
		return v.ImagePullPolicy
	}).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIPowerStoreSpecDriverControllerPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverController) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
func (o CSIPowerStoreSpecDriverControllerPtrOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverController) map[string]string {
		if v == nil {
			return nil
		}
		return v.NodeSelector
	}).(pulumi.StringMapOutput)
}

// Tolerations is the list of tolerations for the driver pods
func (o CSIPowerStoreSpecDriverControllerPtrOutput) Tolerations() CSIPowerStoreSpecDriverControllerTolerationsArrayOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverController) []CSIPowerStoreSpecDriverControllerTolerations {
		if v == nil {
			return nil
		}
		return v.Tolerations
	}).(CSIPowerStoreSpecDriverControllerTolerationsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIPowerStoreSpecDriverControllerEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *CSIPowerStoreSpecDriverControllerEnvsValueFrom `pulumi:"valueFrom"`
}

// CSIPowerStoreSpecDriverControllerEnvsInput is an input type that accepts CSIPowerStoreSpecDriverControllerEnvsArgs and CSIPowerStoreSpecDriverControllerEnvsOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverControllerEnvsInput` via:
//
//          CSIPowerStoreSpecDriverControllerEnvsArgs{...}
type CSIPowerStoreSpecDriverControllerEnvsInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverControllerEnvsOutput() CSIPowerStoreSpecDriverControllerEnvsOutput
	ToCSIPowerStoreSpecDriverControllerEnvsOutputWithContext(context.Context) CSIPowerStoreSpecDriverControllerEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type CSIPowerStoreSpecDriverControllerEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom CSIPowerStoreSpecDriverControllerEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (CSIPowerStoreSpecDriverControllerEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverControllerEnvs)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverControllerEnvsArgs) ToCSIPowerStoreSpecDriverControllerEnvsOutput() CSIPowerStoreSpecDriverControllerEnvsOutput {
	return i.ToCSIPowerStoreSpecDriverControllerEnvsOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverControllerEnvsArgs) ToCSIPowerStoreSpecDriverControllerEnvsOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverControllerEnvsOutput)
}

// CSIPowerStoreSpecDriverControllerEnvsArrayInput is an input type that accepts CSIPowerStoreSpecDriverControllerEnvsArray and CSIPowerStoreSpecDriverControllerEnvsArrayOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverControllerEnvsArrayInput` via:
//
//          CSIPowerStoreSpecDriverControllerEnvsArray{ CSIPowerStoreSpecDriverControllerEnvsArgs{...} }
type CSIPowerStoreSpecDriverControllerEnvsArrayInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverControllerEnvsArrayOutput() CSIPowerStoreSpecDriverControllerEnvsArrayOutput
	ToCSIPowerStoreSpecDriverControllerEnvsArrayOutputWithContext(context.Context) CSIPowerStoreSpecDriverControllerEnvsArrayOutput
}

type CSIPowerStoreSpecDriverControllerEnvsArray []CSIPowerStoreSpecDriverControllerEnvsInput

func (CSIPowerStoreSpecDriverControllerEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerStoreSpecDriverControllerEnvs)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverControllerEnvsArray) ToCSIPowerStoreSpecDriverControllerEnvsArrayOutput() CSIPowerStoreSpecDriverControllerEnvsArrayOutput {
	return i.ToCSIPowerStoreSpecDriverControllerEnvsArrayOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverControllerEnvsArray) ToCSIPowerStoreSpecDriverControllerEnvsArrayOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverControllerEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIPowerStoreSpecDriverControllerEnvsOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverControllerEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverControllerEnvs)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverControllerEnvsOutput) ToCSIPowerStoreSpecDriverControllerEnvsOutput() CSIPowerStoreSpecDriverControllerEnvsOutput {
	return o
}

func (o CSIPowerStoreSpecDriverControllerEnvsOutput) ToCSIPowerStoreSpecDriverControllerEnvsOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o CSIPowerStoreSpecDriverControllerEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverControllerEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o CSIPowerStoreSpecDriverControllerEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverControllerEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o CSIPowerStoreSpecDriverControllerEnvsOutput) ValueFrom() CSIPowerStoreSpecDriverControllerEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverControllerEnvs) *CSIPowerStoreSpecDriverControllerEnvsValueFrom {
		return v.ValueFrom
	}).(CSIPowerStoreSpecDriverControllerEnvsValueFromPtrOutput)
}

type CSIPowerStoreSpecDriverControllerEnvsArrayOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverControllerEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerStoreSpecDriverControllerEnvs)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverControllerEnvsArrayOutput) ToCSIPowerStoreSpecDriverControllerEnvsArrayOutput() CSIPowerStoreSpecDriverControllerEnvsArrayOutput {
	return o
}

func (o CSIPowerStoreSpecDriverControllerEnvsArrayOutput) ToCSIPowerStoreSpecDriverControllerEnvsArrayOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerEnvsArrayOutput {
	return o
}

func (o CSIPowerStoreSpecDriverControllerEnvsArrayOutput) Index(i pulumi.IntInput) CSIPowerStoreSpecDriverControllerEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIPowerStoreSpecDriverControllerEnvs {
		return vs[0].([]CSIPowerStoreSpecDriverControllerEnvs)[vs[1].(int)]
	}).(CSIPowerStoreSpecDriverControllerEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIPowerStoreSpecDriverControllerEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef *CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// CSIPowerStoreSpecDriverControllerEnvsValueFromInput is an input type that accepts CSIPowerStoreSpecDriverControllerEnvsValueFromArgs and CSIPowerStoreSpecDriverControllerEnvsValueFromOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverControllerEnvsValueFromInput` via:
//
//          CSIPowerStoreSpecDriverControllerEnvsValueFromArgs{...}
type CSIPowerStoreSpecDriverControllerEnvsValueFromInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverControllerEnvsValueFromOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromOutput
	ToCSIPowerStoreSpecDriverControllerEnvsValueFromOutputWithContext(context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIPowerStoreSpecDriverControllerEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (CSIPowerStoreSpecDriverControllerEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverControllerEnvsValueFrom)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverControllerEnvsValueFromArgs) ToCSIPowerStoreSpecDriverControllerEnvsValueFromOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromOutput {
	return i.ToCSIPowerStoreSpecDriverControllerEnvsValueFromOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverControllerEnvsValueFromArgs) ToCSIPowerStoreSpecDriverControllerEnvsValueFromOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverControllerEnvsValueFromOutput)
}

func (i CSIPowerStoreSpecDriverControllerEnvsValueFromArgs) ToCSIPowerStoreSpecDriverControllerEnvsValueFromPtrOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromPtrOutput {
	return i.ToCSIPowerStoreSpecDriverControllerEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverControllerEnvsValueFromArgs) ToCSIPowerStoreSpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverControllerEnvsValueFromOutput).ToCSIPowerStoreSpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx)
}

// CSIPowerStoreSpecDriverControllerEnvsValueFromPtrInput is an input type that accepts CSIPowerStoreSpecDriverControllerEnvsValueFromArgs, CSIPowerStoreSpecDriverControllerEnvsValueFromPtr and CSIPowerStoreSpecDriverControllerEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverControllerEnvsValueFromPtrInput` via:
//
//          CSIPowerStoreSpecDriverControllerEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type CSIPowerStoreSpecDriverControllerEnvsValueFromPtrInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverControllerEnvsValueFromPtrOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromPtrOutput
	ToCSIPowerStoreSpecDriverControllerEnvsValueFromPtrOutputWithContext(context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromPtrOutput
}

type csipowerStoreSpecDriverControllerEnvsValueFromPtrType CSIPowerStoreSpecDriverControllerEnvsValueFromArgs

func CSIPowerStoreSpecDriverControllerEnvsValueFromPtr(v *CSIPowerStoreSpecDriverControllerEnvsValueFromArgs) CSIPowerStoreSpecDriverControllerEnvsValueFromPtrInput {
	return (*csipowerStoreSpecDriverControllerEnvsValueFromPtrType)(v)
}

func (*csipowerStoreSpecDriverControllerEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverControllerEnvsValueFrom)(nil)).Elem()
}

func (i *csipowerStoreSpecDriverControllerEnvsValueFromPtrType) ToCSIPowerStoreSpecDriverControllerEnvsValueFromPtrOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromPtrOutput {
	return i.ToCSIPowerStoreSpecDriverControllerEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *csipowerStoreSpecDriverControllerEnvsValueFromPtrType) ToCSIPowerStoreSpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverControllerEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIPowerStoreSpecDriverControllerEnvsValueFromOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverControllerEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverControllerEnvsValueFrom)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverControllerEnvsValueFromOutput) ToCSIPowerStoreSpecDriverControllerEnvsValueFromOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromOutput {
	return o
}

func (o CSIPowerStoreSpecDriverControllerEnvsValueFromOutput) ToCSIPowerStoreSpecDriverControllerEnvsValueFromOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromOutput {
	return o
}

func (o CSIPowerStoreSpecDriverControllerEnvsValueFromOutput) ToCSIPowerStoreSpecDriverControllerEnvsValueFromPtrOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromPtrOutput {
	return o.ToCSIPowerStoreSpecDriverControllerEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o CSIPowerStoreSpecDriverControllerEnvsValueFromOutput) ToCSIPowerStoreSpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverControllerEnvsValueFrom) *CSIPowerStoreSpecDriverControllerEnvsValueFrom {
		return &v
	}).(CSIPowerStoreSpecDriverControllerEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o CSIPowerStoreSpecDriverControllerEnvsValueFromOutput) ConfigMapKeyRef() CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverControllerEnvsValueFrom) *CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o CSIPowerStoreSpecDriverControllerEnvsValueFromOutput) FieldRef() CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverControllerEnvsValueFrom) *CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRef {
		return v.FieldRef
	}).(CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIPowerStoreSpecDriverControllerEnvsValueFromOutput) ResourceFieldRef() CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverControllerEnvsValueFrom) *CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIPowerStoreSpecDriverControllerEnvsValueFromOutput) SecretKeyRef() CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverControllerEnvsValueFrom) *CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput)
}

type CSIPowerStoreSpecDriverControllerEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverControllerEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverControllerEnvsValueFrom)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverControllerEnvsValueFromPtrOutput) ToCSIPowerStoreSpecDriverControllerEnvsValueFromPtrOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverControllerEnvsValueFromPtrOutput) ToCSIPowerStoreSpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverControllerEnvsValueFromPtrOutput) Elem() CSIPowerStoreSpecDriverControllerEnvsValueFromOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverControllerEnvsValueFrom) CSIPowerStoreSpecDriverControllerEnvsValueFrom {
		return *v
	}).(CSIPowerStoreSpecDriverControllerEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o CSIPowerStoreSpecDriverControllerEnvsValueFromPtrOutput) ConfigMapKeyRef() CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverControllerEnvsValueFrom) *CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o CSIPowerStoreSpecDriverControllerEnvsValueFromPtrOutput) FieldRef() CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverControllerEnvsValueFrom) *CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIPowerStoreSpecDriverControllerEnvsValueFromPtrOutput) ResourceFieldRef() CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverControllerEnvsValueFrom) *CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIPowerStoreSpecDriverControllerEnvsValueFromPtrOutput) SecretKeyRef() CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverControllerEnvsValueFrom) *CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefInput is an input type that accepts CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs and CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefInput` via:
//
//          CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs{...}
type CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput
	ToCSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return i.ToCSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput)
}

func (i CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput).ToCSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs, CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtr and CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput
	ToCSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput
}

type csipowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs

func CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtr(v *CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput {
	return (*csipowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*csipowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *csipowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType) ToCSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *csipowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType) ToCSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToCSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRef) *CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRef {
		return &v
	}).(CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) Elem() CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRef) CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRef {
		return *v
	}).(CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefInput is an input type that accepts CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefArgs and CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefInput` via:
//
//          CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefArgs{...}
type CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefOutput
	ToCSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefOutputWithContext(context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRef)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefArgs) ToCSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefOutput {
	return i.ToCSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefArgs) ToCSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefOutput)
}

func (i CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefArgs) ToCSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefArgs) ToCSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefOutput).ToCSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrInput is an input type that accepts CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefArgs, CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtr and CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrInput` via:
//
//          CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrOutput
	ToCSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrOutput
}

type csipowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrType CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefArgs

func CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtr(v *CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefArgs) CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrInput {
	return (*csipowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrType)(v)
}

func (*csipowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *csipowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrType) ToCSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *csipowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrType) ToCSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefOutput) ToCSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefOutput) ToCSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefOutput) ToCSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o.ToCSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefOutput) ToCSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRef) *CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRef {
		return &v
	}).(CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrOutput) ToCSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrOutput) ToCSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrOutput) Elem() CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRef) CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRef {
		return *v
	}).(CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisor `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefInput is an input type that accepts CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefArgs and CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefInput` via:
//
//          CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefArgs{...}
type CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefOutput
	ToCSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefOutputWithContext(context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefArgs) ToCSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return i.ToCSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefArgs) ToCSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefOutput)
}

func (i CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefArgs) ToCSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefArgs) ToCSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefOutput).ToCSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrInput is an input type that accepts CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefArgs, CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtr and CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrInput` via:
//
//          CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput
	ToCSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput
}

type csipowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrType CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefArgs

func CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtr(v *CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefArgs) CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrInput {
	return (*csipowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*csipowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *csipowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrType) ToCSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *csipowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrType) ToCSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ToCSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ToCSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ToCSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToCSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ToCSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRef) *CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRef {
		return &v
	}).(CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefOutput) Divisor() CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRef) *CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisor {
		return v.Divisor
	}).(CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) ToCSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) ToCSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) Elem() CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRef) CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRef {
		return *v
	}).(CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) Divisor() CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRef) *CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisor {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

type CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisor struct {
}

// CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorInput is an input type that accepts CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs and CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorInput` via:
//
//          CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs{...}
type CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput
	ToCSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput
}

type CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs struct {
}

func (CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs) ToCSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput {
	return i.ToCSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs) ToCSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput)
}

func (i CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs) ToCSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToCSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs) ToCSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput).ToCSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx)
}

// CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrInput is an input type that accepts CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs, CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtr and CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrInput` via:
//
//          CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs{...}
//
//  or:
//
//          nil
type CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput
	ToCSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput
}

type csipowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrType CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs

func CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtr(v *CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs) CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrInput {
	return (*csipowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrType)(v)
}

func (*csipowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i *csipowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrType) ToCSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToCSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i *csipowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrType) ToCSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput) ToCSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput) ToCSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput) ToCSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ToCSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (o CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput) ToCSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisor) *CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisor {
		return &v
	}).(CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput) ToCSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput) ToCSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput) Elem() CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisor) CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisor {
		return *v
	}).(CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefInput is an input type that accepts CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefArgs and CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefInput` via:
//
//          CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefArgs{...}
type CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefOutput
	ToCSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefOutputWithContext(context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefArgs) ToCSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return i.ToCSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefArgs) ToCSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefOutput)
}

func (i CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefArgs) ToCSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefArgs) ToCSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefOutput).ToCSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrInput is an input type that accepts CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefArgs, CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtr and CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrInput` via:
//
//          CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput
	ToCSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput
}

type csipowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrType CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefArgs

func CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtr(v *CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefArgs) CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrInput {
	return (*csipowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*csipowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *csipowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrType) ToCSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *csipowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrType) ToCSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefOutput) ToCSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefOutput) ToCSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefOutput) ToCSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToCSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefOutput) ToCSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRef) *CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRef {
		return &v
	}).(CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) ToCSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) ToCSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) Elem() CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRef) CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRef {
		return *v
	}).(CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIPowerStoreSpecDriverControllerNodeSelector struct {
}

// CSIPowerStoreSpecDriverControllerNodeSelectorInput is an input type that accepts CSIPowerStoreSpecDriverControllerNodeSelectorArgs and CSIPowerStoreSpecDriverControllerNodeSelectorOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverControllerNodeSelectorInput` via:
//
//          CSIPowerStoreSpecDriverControllerNodeSelectorArgs{...}
type CSIPowerStoreSpecDriverControllerNodeSelectorInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverControllerNodeSelectorOutput() CSIPowerStoreSpecDriverControllerNodeSelectorOutput
	ToCSIPowerStoreSpecDriverControllerNodeSelectorOutputWithContext(context.Context) CSIPowerStoreSpecDriverControllerNodeSelectorOutput
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIPowerStoreSpecDriverControllerNodeSelectorArgs struct {
}

func (CSIPowerStoreSpecDriverControllerNodeSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverControllerNodeSelector)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverControllerNodeSelectorArgs) ToCSIPowerStoreSpecDriverControllerNodeSelectorOutput() CSIPowerStoreSpecDriverControllerNodeSelectorOutput {
	return i.ToCSIPowerStoreSpecDriverControllerNodeSelectorOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverControllerNodeSelectorArgs) ToCSIPowerStoreSpecDriverControllerNodeSelectorOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerNodeSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverControllerNodeSelectorOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIPowerStoreSpecDriverControllerNodeSelectorOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverControllerNodeSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverControllerNodeSelector)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverControllerNodeSelectorOutput) ToCSIPowerStoreSpecDriverControllerNodeSelectorOutput() CSIPowerStoreSpecDriverControllerNodeSelectorOutput {
	return o
}

func (o CSIPowerStoreSpecDriverControllerNodeSelectorOutput) ToCSIPowerStoreSpecDriverControllerNodeSelectorOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerNodeSelectorOutput {
	return o
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIPowerStoreSpecDriverControllerTolerations struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect *string `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key *string `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator *string `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds *int `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value *string `pulumi:"value"`
}

// CSIPowerStoreSpecDriverControllerTolerationsInput is an input type that accepts CSIPowerStoreSpecDriverControllerTolerationsArgs and CSIPowerStoreSpecDriverControllerTolerationsOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverControllerTolerationsInput` via:
//
//          CSIPowerStoreSpecDriverControllerTolerationsArgs{...}
type CSIPowerStoreSpecDriverControllerTolerationsInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverControllerTolerationsOutput() CSIPowerStoreSpecDriverControllerTolerationsOutput
	ToCSIPowerStoreSpecDriverControllerTolerationsOutputWithContext(context.Context) CSIPowerStoreSpecDriverControllerTolerationsOutput
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIPowerStoreSpecDriverControllerTolerationsArgs struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect pulumi.StringPtrInput `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds pulumi.IntPtrInput `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (CSIPowerStoreSpecDriverControllerTolerationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverControllerTolerations)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverControllerTolerationsArgs) ToCSIPowerStoreSpecDriverControllerTolerationsOutput() CSIPowerStoreSpecDriverControllerTolerationsOutput {
	return i.ToCSIPowerStoreSpecDriverControllerTolerationsOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverControllerTolerationsArgs) ToCSIPowerStoreSpecDriverControllerTolerationsOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerTolerationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverControllerTolerationsOutput)
}

// CSIPowerStoreSpecDriverControllerTolerationsArrayInput is an input type that accepts CSIPowerStoreSpecDriverControllerTolerationsArray and CSIPowerStoreSpecDriverControllerTolerationsArrayOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverControllerTolerationsArrayInput` via:
//
//          CSIPowerStoreSpecDriverControllerTolerationsArray{ CSIPowerStoreSpecDriverControllerTolerationsArgs{...} }
type CSIPowerStoreSpecDriverControllerTolerationsArrayInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverControllerTolerationsArrayOutput() CSIPowerStoreSpecDriverControllerTolerationsArrayOutput
	ToCSIPowerStoreSpecDriverControllerTolerationsArrayOutputWithContext(context.Context) CSIPowerStoreSpecDriverControllerTolerationsArrayOutput
}

type CSIPowerStoreSpecDriverControllerTolerationsArray []CSIPowerStoreSpecDriverControllerTolerationsInput

func (CSIPowerStoreSpecDriverControllerTolerationsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerStoreSpecDriverControllerTolerations)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverControllerTolerationsArray) ToCSIPowerStoreSpecDriverControllerTolerationsArrayOutput() CSIPowerStoreSpecDriverControllerTolerationsArrayOutput {
	return i.ToCSIPowerStoreSpecDriverControllerTolerationsArrayOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverControllerTolerationsArray) ToCSIPowerStoreSpecDriverControllerTolerationsArrayOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerTolerationsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverControllerTolerationsArrayOutput)
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIPowerStoreSpecDriverControllerTolerationsOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverControllerTolerationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverControllerTolerations)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverControllerTolerationsOutput) ToCSIPowerStoreSpecDriverControllerTolerationsOutput() CSIPowerStoreSpecDriverControllerTolerationsOutput {
	return o
}

func (o CSIPowerStoreSpecDriverControllerTolerationsOutput) ToCSIPowerStoreSpecDriverControllerTolerationsOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerTolerationsOutput {
	return o
}

// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
func (o CSIPowerStoreSpecDriverControllerTolerationsOutput) Effect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverControllerTolerations) *string { return v.Effect }).(pulumi.StringPtrOutput)
}

// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
func (o CSIPowerStoreSpecDriverControllerTolerationsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverControllerTolerations) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
func (o CSIPowerStoreSpecDriverControllerTolerationsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverControllerTolerations) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
func (o CSIPowerStoreSpecDriverControllerTolerationsOutput) TolerationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverControllerTolerations) *int { return v.TolerationSeconds }).(pulumi.IntPtrOutput)
}

// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
func (o CSIPowerStoreSpecDriverControllerTolerationsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverControllerTolerations) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type CSIPowerStoreSpecDriverControllerTolerationsArrayOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverControllerTolerationsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerStoreSpecDriverControllerTolerations)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverControllerTolerationsArrayOutput) ToCSIPowerStoreSpecDriverControllerTolerationsArrayOutput() CSIPowerStoreSpecDriverControllerTolerationsArrayOutput {
	return o
}

func (o CSIPowerStoreSpecDriverControllerTolerationsArrayOutput) ToCSIPowerStoreSpecDriverControllerTolerationsArrayOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverControllerTolerationsArrayOutput {
	return o
}

func (o CSIPowerStoreSpecDriverControllerTolerationsArrayOutput) Index(i pulumi.IntInput) CSIPowerStoreSpecDriverControllerTolerationsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIPowerStoreSpecDriverControllerTolerations {
		return vs[0].([]CSIPowerStoreSpecDriverControllerTolerations)[vs[1].(int)]
	}).(CSIPowerStoreSpecDriverControllerTolerationsOutput)
}

// Node is the specification for Node plugin only
type CSIPowerStoreSpecDriverNode struct {
	// Args is the set of arguments for the container
	Args []string `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs []CSIPowerStoreSpecDriverNodeEnvs `pulumi:"envs"`
	// Image is the image tag for the Container
	Image *string `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name *string `pulumi:"name"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
	NodeSelector map[string]string `pulumi:"nodeSelector"`
	// Tolerations is the list of tolerations for the driver pods
	Tolerations []CSIPowerStoreSpecDriverNodeTolerations `pulumi:"tolerations"`
}

// CSIPowerStoreSpecDriverNodeInput is an input type that accepts CSIPowerStoreSpecDriverNodeArgs and CSIPowerStoreSpecDriverNodeOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverNodeInput` via:
//
//          CSIPowerStoreSpecDriverNodeArgs{...}
type CSIPowerStoreSpecDriverNodeInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverNodeOutput() CSIPowerStoreSpecDriverNodeOutput
	ToCSIPowerStoreSpecDriverNodeOutputWithContext(context.Context) CSIPowerStoreSpecDriverNodeOutput
}

// Node is the specification for Node plugin only
type CSIPowerStoreSpecDriverNodeArgs struct {
	// Args is the set of arguments for the container
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs CSIPowerStoreSpecDriverNodeEnvsArrayInput `pulumi:"envs"`
	// Image is the image tag for the Container
	Image pulumi.StringPtrInput `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name pulumi.StringPtrInput `pulumi:"name"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
	NodeSelector pulumi.StringMapInput `pulumi:"nodeSelector"`
	// Tolerations is the list of tolerations for the driver pods
	Tolerations CSIPowerStoreSpecDriverNodeTolerationsArrayInput `pulumi:"tolerations"`
}

func (CSIPowerStoreSpecDriverNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverNode)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverNodeArgs) ToCSIPowerStoreSpecDriverNodeOutput() CSIPowerStoreSpecDriverNodeOutput {
	return i.ToCSIPowerStoreSpecDriverNodeOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverNodeArgs) ToCSIPowerStoreSpecDriverNodeOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverNodeOutput)
}

func (i CSIPowerStoreSpecDriverNodeArgs) ToCSIPowerStoreSpecDriverNodePtrOutput() CSIPowerStoreSpecDriverNodePtrOutput {
	return i.ToCSIPowerStoreSpecDriverNodePtrOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverNodeArgs) ToCSIPowerStoreSpecDriverNodePtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverNodeOutput).ToCSIPowerStoreSpecDriverNodePtrOutputWithContext(ctx)
}

// CSIPowerStoreSpecDriverNodePtrInput is an input type that accepts CSIPowerStoreSpecDriverNodeArgs, CSIPowerStoreSpecDriverNodePtr and CSIPowerStoreSpecDriverNodePtrOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverNodePtrInput` via:
//
//          CSIPowerStoreSpecDriverNodeArgs{...}
//
//  or:
//
//          nil
type CSIPowerStoreSpecDriverNodePtrInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverNodePtrOutput() CSIPowerStoreSpecDriverNodePtrOutput
	ToCSIPowerStoreSpecDriverNodePtrOutputWithContext(context.Context) CSIPowerStoreSpecDriverNodePtrOutput
}

type csipowerStoreSpecDriverNodePtrType CSIPowerStoreSpecDriverNodeArgs

func CSIPowerStoreSpecDriverNodePtr(v *CSIPowerStoreSpecDriverNodeArgs) CSIPowerStoreSpecDriverNodePtrInput {
	return (*csipowerStoreSpecDriverNodePtrType)(v)
}

func (*csipowerStoreSpecDriverNodePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverNode)(nil)).Elem()
}

func (i *csipowerStoreSpecDriverNodePtrType) ToCSIPowerStoreSpecDriverNodePtrOutput() CSIPowerStoreSpecDriverNodePtrOutput {
	return i.ToCSIPowerStoreSpecDriverNodePtrOutputWithContext(context.Background())
}

func (i *csipowerStoreSpecDriverNodePtrType) ToCSIPowerStoreSpecDriverNodePtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverNodePtrOutput)
}

// Node is the specification for Node plugin only
type CSIPowerStoreSpecDriverNodeOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverNode)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverNodeOutput) ToCSIPowerStoreSpecDriverNodeOutput() CSIPowerStoreSpecDriverNodeOutput {
	return o
}

func (o CSIPowerStoreSpecDriverNodeOutput) ToCSIPowerStoreSpecDriverNodeOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeOutput {
	return o
}

func (o CSIPowerStoreSpecDriverNodeOutput) ToCSIPowerStoreSpecDriverNodePtrOutput() CSIPowerStoreSpecDriverNodePtrOutput {
	return o.ToCSIPowerStoreSpecDriverNodePtrOutputWithContext(context.Background())
}

func (o CSIPowerStoreSpecDriverNodeOutput) ToCSIPowerStoreSpecDriverNodePtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodePtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverNode) *CSIPowerStoreSpecDriverNode {
		return &v
	}).(CSIPowerStoreSpecDriverNodePtrOutput)
}

// Args is the set of arguments for the container
func (o CSIPowerStoreSpecDriverNodeOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverNode) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIPowerStoreSpecDriverNodeOutput) Envs() CSIPowerStoreSpecDriverNodeEnvsArrayOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverNode) []CSIPowerStoreSpecDriverNodeEnvs { return v.Envs }).(CSIPowerStoreSpecDriverNodeEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIPowerStoreSpecDriverNodeOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverNode) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIPowerStoreSpecDriverNodeOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverNode) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIPowerStoreSpecDriverNodeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverNode) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
func (o CSIPowerStoreSpecDriverNodeOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverNode) map[string]string { return v.NodeSelector }).(pulumi.StringMapOutput)
}

// Tolerations is the list of tolerations for the driver pods
func (o CSIPowerStoreSpecDriverNodeOutput) Tolerations() CSIPowerStoreSpecDriverNodeTolerationsArrayOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverNode) []CSIPowerStoreSpecDriverNodeTolerations { return v.Tolerations }).(CSIPowerStoreSpecDriverNodeTolerationsArrayOutput)
}

type CSIPowerStoreSpecDriverNodePtrOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverNodePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverNode)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverNodePtrOutput) ToCSIPowerStoreSpecDriverNodePtrOutput() CSIPowerStoreSpecDriverNodePtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverNodePtrOutput) ToCSIPowerStoreSpecDriverNodePtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodePtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverNodePtrOutput) Elem() CSIPowerStoreSpecDriverNodeOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverNode) CSIPowerStoreSpecDriverNode { return *v }).(CSIPowerStoreSpecDriverNodeOutput)
}

// Args is the set of arguments for the container
func (o CSIPowerStoreSpecDriverNodePtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverNode) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIPowerStoreSpecDriverNodePtrOutput) Envs() CSIPowerStoreSpecDriverNodeEnvsArrayOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverNode) []CSIPowerStoreSpecDriverNodeEnvs {
		if v == nil {
			return nil
		}
		return v.Envs
	}).(CSIPowerStoreSpecDriverNodeEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIPowerStoreSpecDriverNodePtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverNode) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIPowerStoreSpecDriverNodePtrOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverNode) *string {
		if v == nil {
			return nil
		}
		return v.ImagePullPolicy
	}).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIPowerStoreSpecDriverNodePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverNode) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
func (o CSIPowerStoreSpecDriverNodePtrOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverNode) map[string]string {
		if v == nil {
			return nil
		}
		return v.NodeSelector
	}).(pulumi.StringMapOutput)
}

// Tolerations is the list of tolerations for the driver pods
func (o CSIPowerStoreSpecDriverNodePtrOutput) Tolerations() CSIPowerStoreSpecDriverNodeTolerationsArrayOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverNode) []CSIPowerStoreSpecDriverNodeTolerations {
		if v == nil {
			return nil
		}
		return v.Tolerations
	}).(CSIPowerStoreSpecDriverNodeTolerationsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIPowerStoreSpecDriverNodeEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *CSIPowerStoreSpecDriverNodeEnvsValueFrom `pulumi:"valueFrom"`
}

// CSIPowerStoreSpecDriverNodeEnvsInput is an input type that accepts CSIPowerStoreSpecDriverNodeEnvsArgs and CSIPowerStoreSpecDriverNodeEnvsOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverNodeEnvsInput` via:
//
//          CSIPowerStoreSpecDriverNodeEnvsArgs{...}
type CSIPowerStoreSpecDriverNodeEnvsInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverNodeEnvsOutput() CSIPowerStoreSpecDriverNodeEnvsOutput
	ToCSIPowerStoreSpecDriverNodeEnvsOutputWithContext(context.Context) CSIPowerStoreSpecDriverNodeEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type CSIPowerStoreSpecDriverNodeEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom CSIPowerStoreSpecDriverNodeEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (CSIPowerStoreSpecDriverNodeEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverNodeEnvs)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverNodeEnvsArgs) ToCSIPowerStoreSpecDriverNodeEnvsOutput() CSIPowerStoreSpecDriverNodeEnvsOutput {
	return i.ToCSIPowerStoreSpecDriverNodeEnvsOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverNodeEnvsArgs) ToCSIPowerStoreSpecDriverNodeEnvsOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverNodeEnvsOutput)
}

// CSIPowerStoreSpecDriverNodeEnvsArrayInput is an input type that accepts CSIPowerStoreSpecDriverNodeEnvsArray and CSIPowerStoreSpecDriverNodeEnvsArrayOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverNodeEnvsArrayInput` via:
//
//          CSIPowerStoreSpecDriverNodeEnvsArray{ CSIPowerStoreSpecDriverNodeEnvsArgs{...} }
type CSIPowerStoreSpecDriverNodeEnvsArrayInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverNodeEnvsArrayOutput() CSIPowerStoreSpecDriverNodeEnvsArrayOutput
	ToCSIPowerStoreSpecDriverNodeEnvsArrayOutputWithContext(context.Context) CSIPowerStoreSpecDriverNodeEnvsArrayOutput
}

type CSIPowerStoreSpecDriverNodeEnvsArray []CSIPowerStoreSpecDriverNodeEnvsInput

func (CSIPowerStoreSpecDriverNodeEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerStoreSpecDriverNodeEnvs)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverNodeEnvsArray) ToCSIPowerStoreSpecDriverNodeEnvsArrayOutput() CSIPowerStoreSpecDriverNodeEnvsArrayOutput {
	return i.ToCSIPowerStoreSpecDriverNodeEnvsArrayOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverNodeEnvsArray) ToCSIPowerStoreSpecDriverNodeEnvsArrayOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverNodeEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIPowerStoreSpecDriverNodeEnvsOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverNodeEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverNodeEnvs)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverNodeEnvsOutput) ToCSIPowerStoreSpecDriverNodeEnvsOutput() CSIPowerStoreSpecDriverNodeEnvsOutput {
	return o
}

func (o CSIPowerStoreSpecDriverNodeEnvsOutput) ToCSIPowerStoreSpecDriverNodeEnvsOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o CSIPowerStoreSpecDriverNodeEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverNodeEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o CSIPowerStoreSpecDriverNodeEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverNodeEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o CSIPowerStoreSpecDriverNodeEnvsOutput) ValueFrom() CSIPowerStoreSpecDriverNodeEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverNodeEnvs) *CSIPowerStoreSpecDriverNodeEnvsValueFrom { return v.ValueFrom }).(CSIPowerStoreSpecDriverNodeEnvsValueFromPtrOutput)
}

type CSIPowerStoreSpecDriverNodeEnvsArrayOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverNodeEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerStoreSpecDriverNodeEnvs)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverNodeEnvsArrayOutput) ToCSIPowerStoreSpecDriverNodeEnvsArrayOutput() CSIPowerStoreSpecDriverNodeEnvsArrayOutput {
	return o
}

func (o CSIPowerStoreSpecDriverNodeEnvsArrayOutput) ToCSIPowerStoreSpecDriverNodeEnvsArrayOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeEnvsArrayOutput {
	return o
}

func (o CSIPowerStoreSpecDriverNodeEnvsArrayOutput) Index(i pulumi.IntInput) CSIPowerStoreSpecDriverNodeEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIPowerStoreSpecDriverNodeEnvs {
		return vs[0].([]CSIPowerStoreSpecDriverNodeEnvs)[vs[1].(int)]
	}).(CSIPowerStoreSpecDriverNodeEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIPowerStoreSpecDriverNodeEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef *CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// CSIPowerStoreSpecDriverNodeEnvsValueFromInput is an input type that accepts CSIPowerStoreSpecDriverNodeEnvsValueFromArgs and CSIPowerStoreSpecDriverNodeEnvsValueFromOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverNodeEnvsValueFromInput` via:
//
//          CSIPowerStoreSpecDriverNodeEnvsValueFromArgs{...}
type CSIPowerStoreSpecDriverNodeEnvsValueFromInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverNodeEnvsValueFromOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromOutput
	ToCSIPowerStoreSpecDriverNodeEnvsValueFromOutputWithContext(context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIPowerStoreSpecDriverNodeEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (CSIPowerStoreSpecDriverNodeEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverNodeEnvsValueFrom)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverNodeEnvsValueFromArgs) ToCSIPowerStoreSpecDriverNodeEnvsValueFromOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromOutput {
	return i.ToCSIPowerStoreSpecDriverNodeEnvsValueFromOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverNodeEnvsValueFromArgs) ToCSIPowerStoreSpecDriverNodeEnvsValueFromOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverNodeEnvsValueFromOutput)
}

func (i CSIPowerStoreSpecDriverNodeEnvsValueFromArgs) ToCSIPowerStoreSpecDriverNodeEnvsValueFromPtrOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromPtrOutput {
	return i.ToCSIPowerStoreSpecDriverNodeEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverNodeEnvsValueFromArgs) ToCSIPowerStoreSpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverNodeEnvsValueFromOutput).ToCSIPowerStoreSpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx)
}

// CSIPowerStoreSpecDriverNodeEnvsValueFromPtrInput is an input type that accepts CSIPowerStoreSpecDriverNodeEnvsValueFromArgs, CSIPowerStoreSpecDriverNodeEnvsValueFromPtr and CSIPowerStoreSpecDriverNodeEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverNodeEnvsValueFromPtrInput` via:
//
//          CSIPowerStoreSpecDriverNodeEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type CSIPowerStoreSpecDriverNodeEnvsValueFromPtrInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverNodeEnvsValueFromPtrOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromPtrOutput
	ToCSIPowerStoreSpecDriverNodeEnvsValueFromPtrOutputWithContext(context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromPtrOutput
}

type csipowerStoreSpecDriverNodeEnvsValueFromPtrType CSIPowerStoreSpecDriverNodeEnvsValueFromArgs

func CSIPowerStoreSpecDriverNodeEnvsValueFromPtr(v *CSIPowerStoreSpecDriverNodeEnvsValueFromArgs) CSIPowerStoreSpecDriverNodeEnvsValueFromPtrInput {
	return (*csipowerStoreSpecDriverNodeEnvsValueFromPtrType)(v)
}

func (*csipowerStoreSpecDriverNodeEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverNodeEnvsValueFrom)(nil)).Elem()
}

func (i *csipowerStoreSpecDriverNodeEnvsValueFromPtrType) ToCSIPowerStoreSpecDriverNodeEnvsValueFromPtrOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromPtrOutput {
	return i.ToCSIPowerStoreSpecDriverNodeEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *csipowerStoreSpecDriverNodeEnvsValueFromPtrType) ToCSIPowerStoreSpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverNodeEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIPowerStoreSpecDriverNodeEnvsValueFromOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverNodeEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverNodeEnvsValueFrom)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverNodeEnvsValueFromOutput) ToCSIPowerStoreSpecDriverNodeEnvsValueFromOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromOutput {
	return o
}

func (o CSIPowerStoreSpecDriverNodeEnvsValueFromOutput) ToCSIPowerStoreSpecDriverNodeEnvsValueFromOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromOutput {
	return o
}

func (o CSIPowerStoreSpecDriverNodeEnvsValueFromOutput) ToCSIPowerStoreSpecDriverNodeEnvsValueFromPtrOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromPtrOutput {
	return o.ToCSIPowerStoreSpecDriverNodeEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o CSIPowerStoreSpecDriverNodeEnvsValueFromOutput) ToCSIPowerStoreSpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverNodeEnvsValueFrom) *CSIPowerStoreSpecDriverNodeEnvsValueFrom {
		return &v
	}).(CSIPowerStoreSpecDriverNodeEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o CSIPowerStoreSpecDriverNodeEnvsValueFromOutput) ConfigMapKeyRef() CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverNodeEnvsValueFrom) *CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o CSIPowerStoreSpecDriverNodeEnvsValueFromOutput) FieldRef() CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverNodeEnvsValueFrom) *CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRef {
		return v.FieldRef
	}).(CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIPowerStoreSpecDriverNodeEnvsValueFromOutput) ResourceFieldRef() CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverNodeEnvsValueFrom) *CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIPowerStoreSpecDriverNodeEnvsValueFromOutput) SecretKeyRef() CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverNodeEnvsValueFrom) *CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput)
}

type CSIPowerStoreSpecDriverNodeEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverNodeEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverNodeEnvsValueFrom)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverNodeEnvsValueFromPtrOutput) ToCSIPowerStoreSpecDriverNodeEnvsValueFromPtrOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverNodeEnvsValueFromPtrOutput) ToCSIPowerStoreSpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverNodeEnvsValueFromPtrOutput) Elem() CSIPowerStoreSpecDriverNodeEnvsValueFromOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverNodeEnvsValueFrom) CSIPowerStoreSpecDriverNodeEnvsValueFrom { return *v }).(CSIPowerStoreSpecDriverNodeEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o CSIPowerStoreSpecDriverNodeEnvsValueFromPtrOutput) ConfigMapKeyRef() CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverNodeEnvsValueFrom) *CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o CSIPowerStoreSpecDriverNodeEnvsValueFromPtrOutput) FieldRef() CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverNodeEnvsValueFrom) *CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIPowerStoreSpecDriverNodeEnvsValueFromPtrOutput) ResourceFieldRef() CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverNodeEnvsValueFrom) *CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIPowerStoreSpecDriverNodeEnvsValueFromPtrOutput) SecretKeyRef() CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverNodeEnvsValueFrom) *CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefInput is an input type that accepts CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs and CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefInput` via:
//
//          CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs{...}
type CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput
	ToCSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return i.ToCSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput)
}

func (i CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput).ToCSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs, CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtr and CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput
	ToCSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput
}

type csipowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs

func CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtr(v *CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput {
	return (*csipowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*csipowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *csipowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType) ToCSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *csipowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType) ToCSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToCSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRef) *CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRef {
		return &v
	}).(CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) Elem() CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRef) CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRef {
		return *v
	}).(CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefInput is an input type that accepts CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefArgs and CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefInput` via:
//
//          CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefArgs{...}
type CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefOutput
	ToCSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefOutputWithContext(context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRef)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefArgs) ToCSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefOutput {
	return i.ToCSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefArgs) ToCSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefOutput)
}

func (i CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefArgs) ToCSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefArgs) ToCSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefOutput).ToCSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrInput is an input type that accepts CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefArgs, CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtr and CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrInput` via:
//
//          CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrOutput
	ToCSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrOutput
}

type csipowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrType CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefArgs

func CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtr(v *CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefArgs) CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrInput {
	return (*csipowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrType)(v)
}

func (*csipowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *csipowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrType) ToCSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *csipowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrType) ToCSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefOutput) ToCSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefOutput) ToCSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefOutput) ToCSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o.ToCSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefOutput) ToCSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRef) *CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRef {
		return &v
	}).(CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrOutput) ToCSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrOutput) ToCSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrOutput) Elem() CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRef) CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRef {
		return *v
	}).(CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisor `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefInput is an input type that accepts CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefArgs and CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefInput` via:
//
//          CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefArgs{...}
type CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefOutput
	ToCSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefOutputWithContext(context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefArgs) ToCSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return i.ToCSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefArgs) ToCSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefOutput)
}

func (i CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefArgs) ToCSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefArgs) ToCSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefOutput).ToCSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrInput is an input type that accepts CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefArgs, CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtr and CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrInput` via:
//
//          CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput
	ToCSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput
}

type csipowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrType CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefArgs

func CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtr(v *CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefArgs) CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrInput {
	return (*csipowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*csipowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *csipowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrType) ToCSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *csipowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrType) ToCSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ToCSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ToCSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ToCSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToCSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ToCSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRef) *CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRef {
		return &v
	}).(CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefOutput) Divisor() CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRef) *CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisor {
		return v.Divisor
	}).(CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) ToCSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) ToCSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) Elem() CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRef) CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRef {
		return *v
	}).(CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) Divisor() CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRef) *CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisor {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

type CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisor struct {
}

// CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorInput is an input type that accepts CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs and CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorInput` via:
//
//          CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs{...}
type CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput
	ToCSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput
}

type CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs struct {
}

func (CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs) ToCSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput {
	return i.ToCSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs) ToCSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput)
}

func (i CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs) ToCSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToCSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs) ToCSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput).ToCSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx)
}

// CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrInput is an input type that accepts CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs, CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtr and CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrInput` via:
//
//          CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs{...}
//
//  or:
//
//          nil
type CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput
	ToCSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput
}

type csipowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrType CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs

func CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtr(v *CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs) CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrInput {
	return (*csipowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrType)(v)
}

func (*csipowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i *csipowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrType) ToCSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToCSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i *csipowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrType) ToCSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput) ToCSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput) ToCSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput) ToCSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ToCSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (o CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput) ToCSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisor) *CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisor {
		return &v
	}).(CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput) ToCSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput) ToCSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput) Elem() CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisor) CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisor {
		return *v
	}).(CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefInput is an input type that accepts CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefArgs and CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefInput` via:
//
//          CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefArgs{...}
type CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefOutput
	ToCSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefOutputWithContext(context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefArgs) ToCSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return i.ToCSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefArgs) ToCSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefOutput)
}

func (i CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefArgs) ToCSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefArgs) ToCSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefOutput).ToCSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrInput is an input type that accepts CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefArgs, CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtr and CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrInput` via:
//
//          CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput
	ToCSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput
}

type csipowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrType CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefArgs

func CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtr(v *CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefArgs) CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrInput {
	return (*csipowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*csipowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *csipowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrType) ToCSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *csipowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrType) ToCSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefOutput) ToCSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefOutput) ToCSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefOutput) ToCSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToCSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefOutput) ToCSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRef) *CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRef {
		return &v
	}).(CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) ToCSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) ToCSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) Elem() CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRef) CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRef {
		return *v
	}).(CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIPowerStoreSpecDriverNodeNodeSelector struct {
}

// CSIPowerStoreSpecDriverNodeNodeSelectorInput is an input type that accepts CSIPowerStoreSpecDriverNodeNodeSelectorArgs and CSIPowerStoreSpecDriverNodeNodeSelectorOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverNodeNodeSelectorInput` via:
//
//          CSIPowerStoreSpecDriverNodeNodeSelectorArgs{...}
type CSIPowerStoreSpecDriverNodeNodeSelectorInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverNodeNodeSelectorOutput() CSIPowerStoreSpecDriverNodeNodeSelectorOutput
	ToCSIPowerStoreSpecDriverNodeNodeSelectorOutputWithContext(context.Context) CSIPowerStoreSpecDriverNodeNodeSelectorOutput
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIPowerStoreSpecDriverNodeNodeSelectorArgs struct {
}

func (CSIPowerStoreSpecDriverNodeNodeSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverNodeNodeSelector)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverNodeNodeSelectorArgs) ToCSIPowerStoreSpecDriverNodeNodeSelectorOutput() CSIPowerStoreSpecDriverNodeNodeSelectorOutput {
	return i.ToCSIPowerStoreSpecDriverNodeNodeSelectorOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverNodeNodeSelectorArgs) ToCSIPowerStoreSpecDriverNodeNodeSelectorOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeNodeSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverNodeNodeSelectorOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIPowerStoreSpecDriverNodeNodeSelectorOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverNodeNodeSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverNodeNodeSelector)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverNodeNodeSelectorOutput) ToCSIPowerStoreSpecDriverNodeNodeSelectorOutput() CSIPowerStoreSpecDriverNodeNodeSelectorOutput {
	return o
}

func (o CSIPowerStoreSpecDriverNodeNodeSelectorOutput) ToCSIPowerStoreSpecDriverNodeNodeSelectorOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeNodeSelectorOutput {
	return o
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIPowerStoreSpecDriverNodeTolerations struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect *string `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key *string `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator *string `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds *int `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value *string `pulumi:"value"`
}

// CSIPowerStoreSpecDriverNodeTolerationsInput is an input type that accepts CSIPowerStoreSpecDriverNodeTolerationsArgs and CSIPowerStoreSpecDriverNodeTolerationsOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverNodeTolerationsInput` via:
//
//          CSIPowerStoreSpecDriverNodeTolerationsArgs{...}
type CSIPowerStoreSpecDriverNodeTolerationsInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverNodeTolerationsOutput() CSIPowerStoreSpecDriverNodeTolerationsOutput
	ToCSIPowerStoreSpecDriverNodeTolerationsOutputWithContext(context.Context) CSIPowerStoreSpecDriverNodeTolerationsOutput
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIPowerStoreSpecDriverNodeTolerationsArgs struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect pulumi.StringPtrInput `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds pulumi.IntPtrInput `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (CSIPowerStoreSpecDriverNodeTolerationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverNodeTolerations)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverNodeTolerationsArgs) ToCSIPowerStoreSpecDriverNodeTolerationsOutput() CSIPowerStoreSpecDriverNodeTolerationsOutput {
	return i.ToCSIPowerStoreSpecDriverNodeTolerationsOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverNodeTolerationsArgs) ToCSIPowerStoreSpecDriverNodeTolerationsOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeTolerationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverNodeTolerationsOutput)
}

// CSIPowerStoreSpecDriverNodeTolerationsArrayInput is an input type that accepts CSIPowerStoreSpecDriverNodeTolerationsArray and CSIPowerStoreSpecDriverNodeTolerationsArrayOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverNodeTolerationsArrayInput` via:
//
//          CSIPowerStoreSpecDriverNodeTolerationsArray{ CSIPowerStoreSpecDriverNodeTolerationsArgs{...} }
type CSIPowerStoreSpecDriverNodeTolerationsArrayInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverNodeTolerationsArrayOutput() CSIPowerStoreSpecDriverNodeTolerationsArrayOutput
	ToCSIPowerStoreSpecDriverNodeTolerationsArrayOutputWithContext(context.Context) CSIPowerStoreSpecDriverNodeTolerationsArrayOutput
}

type CSIPowerStoreSpecDriverNodeTolerationsArray []CSIPowerStoreSpecDriverNodeTolerationsInput

func (CSIPowerStoreSpecDriverNodeTolerationsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerStoreSpecDriverNodeTolerations)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverNodeTolerationsArray) ToCSIPowerStoreSpecDriverNodeTolerationsArrayOutput() CSIPowerStoreSpecDriverNodeTolerationsArrayOutput {
	return i.ToCSIPowerStoreSpecDriverNodeTolerationsArrayOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverNodeTolerationsArray) ToCSIPowerStoreSpecDriverNodeTolerationsArrayOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeTolerationsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverNodeTolerationsArrayOutput)
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIPowerStoreSpecDriverNodeTolerationsOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverNodeTolerationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverNodeTolerations)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverNodeTolerationsOutput) ToCSIPowerStoreSpecDriverNodeTolerationsOutput() CSIPowerStoreSpecDriverNodeTolerationsOutput {
	return o
}

func (o CSIPowerStoreSpecDriverNodeTolerationsOutput) ToCSIPowerStoreSpecDriverNodeTolerationsOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeTolerationsOutput {
	return o
}

// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
func (o CSIPowerStoreSpecDriverNodeTolerationsOutput) Effect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverNodeTolerations) *string { return v.Effect }).(pulumi.StringPtrOutput)
}

// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
func (o CSIPowerStoreSpecDriverNodeTolerationsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverNodeTolerations) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
func (o CSIPowerStoreSpecDriverNodeTolerationsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverNodeTolerations) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
func (o CSIPowerStoreSpecDriverNodeTolerationsOutput) TolerationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverNodeTolerations) *int { return v.TolerationSeconds }).(pulumi.IntPtrOutput)
}

// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
func (o CSIPowerStoreSpecDriverNodeTolerationsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverNodeTolerations) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type CSIPowerStoreSpecDriverNodeTolerationsArrayOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverNodeTolerationsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerStoreSpecDriverNodeTolerations)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverNodeTolerationsArrayOutput) ToCSIPowerStoreSpecDriverNodeTolerationsArrayOutput() CSIPowerStoreSpecDriverNodeTolerationsArrayOutput {
	return o
}

func (o CSIPowerStoreSpecDriverNodeTolerationsArrayOutput) ToCSIPowerStoreSpecDriverNodeTolerationsArrayOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverNodeTolerationsArrayOutput {
	return o
}

func (o CSIPowerStoreSpecDriverNodeTolerationsArrayOutput) Index(i pulumi.IntInput) CSIPowerStoreSpecDriverNodeTolerationsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIPowerStoreSpecDriverNodeTolerations {
		return vs[0].([]CSIPowerStoreSpecDriverNodeTolerations)[vs[1].(int)]
	}).(CSIPowerStoreSpecDriverNodeTolerationsOutput)
}

// ContainerTemplate - Structure representing a container
type CSIPowerStoreSpecDriverSideCars struct {
	// Args is the set of arguments for the container
	Args []string `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs []CSIPowerStoreSpecDriverSideCarsEnvs `pulumi:"envs"`
	// Image is the image tag for the Container
	Image *string `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name *string `pulumi:"name"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
	NodeSelector map[string]string `pulumi:"nodeSelector"`
	// Tolerations is the list of tolerations for the driver pods
	Tolerations []CSIPowerStoreSpecDriverSideCarsTolerations `pulumi:"tolerations"`
}

// CSIPowerStoreSpecDriverSideCarsInput is an input type that accepts CSIPowerStoreSpecDriverSideCarsArgs and CSIPowerStoreSpecDriverSideCarsOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverSideCarsInput` via:
//
//          CSIPowerStoreSpecDriverSideCarsArgs{...}
type CSIPowerStoreSpecDriverSideCarsInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverSideCarsOutput() CSIPowerStoreSpecDriverSideCarsOutput
	ToCSIPowerStoreSpecDriverSideCarsOutputWithContext(context.Context) CSIPowerStoreSpecDriverSideCarsOutput
}

// ContainerTemplate - Structure representing a container
type CSIPowerStoreSpecDriverSideCarsArgs struct {
	// Args is the set of arguments for the container
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs CSIPowerStoreSpecDriverSideCarsEnvsArrayInput `pulumi:"envs"`
	// Image is the image tag for the Container
	Image pulumi.StringPtrInput `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name pulumi.StringPtrInput `pulumi:"name"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
	NodeSelector pulumi.StringMapInput `pulumi:"nodeSelector"`
	// Tolerations is the list of tolerations for the driver pods
	Tolerations CSIPowerStoreSpecDriverSideCarsTolerationsArrayInput `pulumi:"tolerations"`
}

func (CSIPowerStoreSpecDriverSideCarsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverSideCars)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverSideCarsArgs) ToCSIPowerStoreSpecDriverSideCarsOutput() CSIPowerStoreSpecDriverSideCarsOutput {
	return i.ToCSIPowerStoreSpecDriverSideCarsOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverSideCarsArgs) ToCSIPowerStoreSpecDriverSideCarsOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverSideCarsOutput)
}

// CSIPowerStoreSpecDriverSideCarsArrayInput is an input type that accepts CSIPowerStoreSpecDriverSideCarsArray and CSIPowerStoreSpecDriverSideCarsArrayOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverSideCarsArrayInput` via:
//
//          CSIPowerStoreSpecDriverSideCarsArray{ CSIPowerStoreSpecDriverSideCarsArgs{...} }
type CSIPowerStoreSpecDriverSideCarsArrayInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverSideCarsArrayOutput() CSIPowerStoreSpecDriverSideCarsArrayOutput
	ToCSIPowerStoreSpecDriverSideCarsArrayOutputWithContext(context.Context) CSIPowerStoreSpecDriverSideCarsArrayOutput
}

type CSIPowerStoreSpecDriverSideCarsArray []CSIPowerStoreSpecDriverSideCarsInput

func (CSIPowerStoreSpecDriverSideCarsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerStoreSpecDriverSideCars)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverSideCarsArray) ToCSIPowerStoreSpecDriverSideCarsArrayOutput() CSIPowerStoreSpecDriverSideCarsArrayOutput {
	return i.ToCSIPowerStoreSpecDriverSideCarsArrayOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverSideCarsArray) ToCSIPowerStoreSpecDriverSideCarsArrayOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverSideCarsArrayOutput)
}

// ContainerTemplate - Structure representing a container
type CSIPowerStoreSpecDriverSideCarsOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverSideCarsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverSideCars)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverSideCarsOutput) ToCSIPowerStoreSpecDriverSideCarsOutput() CSIPowerStoreSpecDriverSideCarsOutput {
	return o
}

func (o CSIPowerStoreSpecDriverSideCarsOutput) ToCSIPowerStoreSpecDriverSideCarsOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsOutput {
	return o
}

// Args is the set of arguments for the container
func (o CSIPowerStoreSpecDriverSideCarsOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverSideCars) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIPowerStoreSpecDriverSideCarsOutput) Envs() CSIPowerStoreSpecDriverSideCarsEnvsArrayOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverSideCars) []CSIPowerStoreSpecDriverSideCarsEnvs { return v.Envs }).(CSIPowerStoreSpecDriverSideCarsEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIPowerStoreSpecDriverSideCarsOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverSideCars) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIPowerStoreSpecDriverSideCarsOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverSideCars) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIPowerStoreSpecDriverSideCarsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverSideCars) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
func (o CSIPowerStoreSpecDriverSideCarsOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverSideCars) map[string]string { return v.NodeSelector }).(pulumi.StringMapOutput)
}

// Tolerations is the list of tolerations for the driver pods
func (o CSIPowerStoreSpecDriverSideCarsOutput) Tolerations() CSIPowerStoreSpecDriverSideCarsTolerationsArrayOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverSideCars) []CSIPowerStoreSpecDriverSideCarsTolerations {
		return v.Tolerations
	}).(CSIPowerStoreSpecDriverSideCarsTolerationsArrayOutput)
}

type CSIPowerStoreSpecDriverSideCarsArrayOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverSideCarsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerStoreSpecDriverSideCars)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverSideCarsArrayOutput) ToCSIPowerStoreSpecDriverSideCarsArrayOutput() CSIPowerStoreSpecDriverSideCarsArrayOutput {
	return o
}

func (o CSIPowerStoreSpecDriverSideCarsArrayOutput) ToCSIPowerStoreSpecDriverSideCarsArrayOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsArrayOutput {
	return o
}

func (o CSIPowerStoreSpecDriverSideCarsArrayOutput) Index(i pulumi.IntInput) CSIPowerStoreSpecDriverSideCarsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIPowerStoreSpecDriverSideCars {
		return vs[0].([]CSIPowerStoreSpecDriverSideCars)[vs[1].(int)]
	}).(CSIPowerStoreSpecDriverSideCarsOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIPowerStoreSpecDriverSideCarsEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *CSIPowerStoreSpecDriverSideCarsEnvsValueFrom `pulumi:"valueFrom"`
}

// CSIPowerStoreSpecDriverSideCarsEnvsInput is an input type that accepts CSIPowerStoreSpecDriverSideCarsEnvsArgs and CSIPowerStoreSpecDriverSideCarsEnvsOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverSideCarsEnvsInput` via:
//
//          CSIPowerStoreSpecDriverSideCarsEnvsArgs{...}
type CSIPowerStoreSpecDriverSideCarsEnvsInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverSideCarsEnvsOutput() CSIPowerStoreSpecDriverSideCarsEnvsOutput
	ToCSIPowerStoreSpecDriverSideCarsEnvsOutputWithContext(context.Context) CSIPowerStoreSpecDriverSideCarsEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type CSIPowerStoreSpecDriverSideCarsEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom CSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (CSIPowerStoreSpecDriverSideCarsEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverSideCarsEnvs)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverSideCarsEnvsArgs) ToCSIPowerStoreSpecDriverSideCarsEnvsOutput() CSIPowerStoreSpecDriverSideCarsEnvsOutput {
	return i.ToCSIPowerStoreSpecDriverSideCarsEnvsOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverSideCarsEnvsArgs) ToCSIPowerStoreSpecDriverSideCarsEnvsOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverSideCarsEnvsOutput)
}

// CSIPowerStoreSpecDriverSideCarsEnvsArrayInput is an input type that accepts CSIPowerStoreSpecDriverSideCarsEnvsArray and CSIPowerStoreSpecDriverSideCarsEnvsArrayOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverSideCarsEnvsArrayInput` via:
//
//          CSIPowerStoreSpecDriverSideCarsEnvsArray{ CSIPowerStoreSpecDriverSideCarsEnvsArgs{...} }
type CSIPowerStoreSpecDriverSideCarsEnvsArrayInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverSideCarsEnvsArrayOutput() CSIPowerStoreSpecDriverSideCarsEnvsArrayOutput
	ToCSIPowerStoreSpecDriverSideCarsEnvsArrayOutputWithContext(context.Context) CSIPowerStoreSpecDriverSideCarsEnvsArrayOutput
}

type CSIPowerStoreSpecDriverSideCarsEnvsArray []CSIPowerStoreSpecDriverSideCarsEnvsInput

func (CSIPowerStoreSpecDriverSideCarsEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerStoreSpecDriverSideCarsEnvs)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverSideCarsEnvsArray) ToCSIPowerStoreSpecDriverSideCarsEnvsArrayOutput() CSIPowerStoreSpecDriverSideCarsEnvsArrayOutput {
	return i.ToCSIPowerStoreSpecDriverSideCarsEnvsArrayOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverSideCarsEnvsArray) ToCSIPowerStoreSpecDriverSideCarsEnvsArrayOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverSideCarsEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIPowerStoreSpecDriverSideCarsEnvsOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverSideCarsEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverSideCarsEnvs)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsOutput) ToCSIPowerStoreSpecDriverSideCarsEnvsOutput() CSIPowerStoreSpecDriverSideCarsEnvsOutput {
	return o
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsOutput) ToCSIPowerStoreSpecDriverSideCarsEnvsOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o CSIPowerStoreSpecDriverSideCarsEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverSideCarsEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o CSIPowerStoreSpecDriverSideCarsEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverSideCarsEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o CSIPowerStoreSpecDriverSideCarsEnvsOutput) ValueFrom() CSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverSideCarsEnvs) *CSIPowerStoreSpecDriverSideCarsEnvsValueFrom {
		return v.ValueFrom
	}).(CSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrOutput)
}

type CSIPowerStoreSpecDriverSideCarsEnvsArrayOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverSideCarsEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerStoreSpecDriverSideCarsEnvs)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsArrayOutput) ToCSIPowerStoreSpecDriverSideCarsEnvsArrayOutput() CSIPowerStoreSpecDriverSideCarsEnvsArrayOutput {
	return o
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsArrayOutput) ToCSIPowerStoreSpecDriverSideCarsEnvsArrayOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsEnvsArrayOutput {
	return o
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsArrayOutput) Index(i pulumi.IntInput) CSIPowerStoreSpecDriverSideCarsEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIPowerStoreSpecDriverSideCarsEnvs {
		return vs[0].([]CSIPowerStoreSpecDriverSideCarsEnvs)[vs[1].(int)]
	}).(CSIPowerStoreSpecDriverSideCarsEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIPowerStoreSpecDriverSideCarsEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef *CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// CSIPowerStoreSpecDriverSideCarsEnvsValueFromInput is an input type that accepts CSIPowerStoreSpecDriverSideCarsEnvsValueFromArgs and CSIPowerStoreSpecDriverSideCarsEnvsValueFromOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverSideCarsEnvsValueFromInput` via:
//
//          CSIPowerStoreSpecDriverSideCarsEnvsValueFromArgs{...}
type CSIPowerStoreSpecDriverSideCarsEnvsValueFromInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromOutput
	ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromOutputWithContext(context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIPowerStoreSpecDriverSideCarsEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (CSIPowerStoreSpecDriverSideCarsEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverSideCarsEnvsValueFrom)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverSideCarsEnvsValueFromArgs) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromOutput {
	return i.ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverSideCarsEnvsValueFromArgs) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverSideCarsEnvsValueFromOutput)
}

func (i CSIPowerStoreSpecDriverSideCarsEnvsValueFromArgs) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrOutput {
	return i.ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverSideCarsEnvsValueFromArgs) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverSideCarsEnvsValueFromOutput).ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx)
}

// CSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrInput is an input type that accepts CSIPowerStoreSpecDriverSideCarsEnvsValueFromArgs, CSIPowerStoreSpecDriverSideCarsEnvsValueFromPtr and CSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrInput` via:
//
//          CSIPowerStoreSpecDriverSideCarsEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type CSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrOutput
	ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrOutput
}

type csipowerStoreSpecDriverSideCarsEnvsValueFromPtrType CSIPowerStoreSpecDriverSideCarsEnvsValueFromArgs

func CSIPowerStoreSpecDriverSideCarsEnvsValueFromPtr(v *CSIPowerStoreSpecDriverSideCarsEnvsValueFromArgs) CSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrInput {
	return (*csipowerStoreSpecDriverSideCarsEnvsValueFromPtrType)(v)
}

func (*csipowerStoreSpecDriverSideCarsEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverSideCarsEnvsValueFrom)(nil)).Elem()
}

func (i *csipowerStoreSpecDriverSideCarsEnvsValueFromPtrType) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrOutput {
	return i.ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *csipowerStoreSpecDriverSideCarsEnvsValueFromPtrType) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIPowerStoreSpecDriverSideCarsEnvsValueFromOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverSideCarsEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverSideCarsEnvsValueFrom)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromOutput) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromOutput {
	return o
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromOutput) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromOutput {
	return o
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromOutput) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrOutput {
	return o.ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromOutput) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverSideCarsEnvsValueFrom) *CSIPowerStoreSpecDriverSideCarsEnvsValueFrom {
		return &v
	}).(CSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromOutput) ConfigMapKeyRef() CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverSideCarsEnvsValueFrom) *CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromOutput) FieldRef() CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverSideCarsEnvsValueFrom) *CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRef {
		return v.FieldRef
	}).(CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromOutput) ResourceFieldRef() CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverSideCarsEnvsValueFrom) *CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromOutput) SecretKeyRef() CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverSideCarsEnvsValueFrom) *CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput)
}

type CSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverSideCarsEnvsValueFrom)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrOutput) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrOutput) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrOutput) Elem() CSIPowerStoreSpecDriverSideCarsEnvsValueFromOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverSideCarsEnvsValueFrom) CSIPowerStoreSpecDriverSideCarsEnvsValueFrom {
		return *v
	}).(CSIPowerStoreSpecDriverSideCarsEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrOutput) ConfigMapKeyRef() CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverSideCarsEnvsValueFrom) *CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrOutput) FieldRef() CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverSideCarsEnvsValueFrom) *CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrOutput) ResourceFieldRef() CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverSideCarsEnvsValueFrom) *CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrOutput) SecretKeyRef() CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverSideCarsEnvsValueFrom) *CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefInput is an input type that accepts CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs and CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefInput` via:
//
//          CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs{...}
type CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput
	ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return i.ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput)
}

func (i CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput).ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs, CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtr and CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput
	ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput
}

type csipowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs

func CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtr(v *CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput {
	return (*csipowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*csipowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *csipowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *csipowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
		return &v
	}).(CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) Elem() CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
		return *v
	}).(CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefInput is an input type that accepts CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefArgs and CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefInput` via:
//
//          CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefArgs{...}
type CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefOutput
	ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefOutputWithContext(context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRef)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefArgs) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return i.ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefArgs) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefOutput)
}

func (i CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefArgs) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefArgs) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefOutput).ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrInput is an input type that accepts CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefArgs, CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtr and CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrInput` via:
//
//          CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput
	ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput
}

type csipowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrType CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefArgs

func CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtr(v *CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefArgs) CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrInput {
	return (*csipowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrType)(v)
}

func (*csipowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *csipowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrType) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *csipowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrType) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefOutput) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefOutput) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefOutput) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o.ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefOutput) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRef) *CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRef {
		return &v
	}).(CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) Elem() CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRef) CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRef {
		return *v
	}).(CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefInput is an input type that accepts CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs and CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefInput` via:
//
//          CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs{...}
type CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput
	ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefOutputWithContext(context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return i.ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput)
}

func (i CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput).ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput is an input type that accepts CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs, CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtr and CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput` via:
//
//          CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput
	ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput
}

type csipowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs

func CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtr(v *CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput {
	return (*csipowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*csipowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *csipowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *csipowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRef) *CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRef {
		return &v
	}).(CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) Divisor() CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRef) *CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor {
		return v.Divisor
	}).(CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) Elem() CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRef) CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRef {
		return *v
	}).(CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) Divisor() CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRef) *CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

type CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor struct {
}

// CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorInput is an input type that accepts CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs and CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorInput` via:
//
//          CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs{...}
type CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput
	ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput
}

type CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs struct {
}

func (CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput {
	return i.ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput)
}

func (i CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput).ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx)
}

// CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrInput is an input type that accepts CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs, CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtr and CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrInput` via:
//
//          CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs{...}
//
//  or:
//
//          nil
type CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput
	ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput
}

type csipowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrType CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs

func CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtr(v *CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs) CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrInput {
	return (*csipowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrType)(v)
}

func (*csipowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i *csipowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrType) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i *csipowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrType) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor) *CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor {
		return &v
	}).(CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput) Elem() CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor) CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor {
		return *v
	}).(CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefInput is an input type that accepts CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs and CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefInput` via:
//
//          CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs{...}
type CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput
	ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefOutputWithContext(context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return i.ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput)
}

func (i CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput).ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput is an input type that accepts CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs, CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtr and CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput` via:
//
//          CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput
	ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput
}

type csipowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs

func CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtr(v *CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput {
	return (*csipowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*csipowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *csipowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *csipowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRef) *CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRef {
		return &v
	}).(CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) ToCSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) Elem() CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRef) CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRef {
		return *v
	}).(CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIPowerStoreSpecDriverSideCarsNodeSelector struct {
}

// CSIPowerStoreSpecDriverSideCarsNodeSelectorInput is an input type that accepts CSIPowerStoreSpecDriverSideCarsNodeSelectorArgs and CSIPowerStoreSpecDriverSideCarsNodeSelectorOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverSideCarsNodeSelectorInput` via:
//
//          CSIPowerStoreSpecDriverSideCarsNodeSelectorArgs{...}
type CSIPowerStoreSpecDriverSideCarsNodeSelectorInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverSideCarsNodeSelectorOutput() CSIPowerStoreSpecDriverSideCarsNodeSelectorOutput
	ToCSIPowerStoreSpecDriverSideCarsNodeSelectorOutputWithContext(context.Context) CSIPowerStoreSpecDriverSideCarsNodeSelectorOutput
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIPowerStoreSpecDriverSideCarsNodeSelectorArgs struct {
}

func (CSIPowerStoreSpecDriverSideCarsNodeSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverSideCarsNodeSelector)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverSideCarsNodeSelectorArgs) ToCSIPowerStoreSpecDriverSideCarsNodeSelectorOutput() CSIPowerStoreSpecDriverSideCarsNodeSelectorOutput {
	return i.ToCSIPowerStoreSpecDriverSideCarsNodeSelectorOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverSideCarsNodeSelectorArgs) ToCSIPowerStoreSpecDriverSideCarsNodeSelectorOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsNodeSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverSideCarsNodeSelectorOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIPowerStoreSpecDriverSideCarsNodeSelectorOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverSideCarsNodeSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverSideCarsNodeSelector)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverSideCarsNodeSelectorOutput) ToCSIPowerStoreSpecDriverSideCarsNodeSelectorOutput() CSIPowerStoreSpecDriverSideCarsNodeSelectorOutput {
	return o
}

func (o CSIPowerStoreSpecDriverSideCarsNodeSelectorOutput) ToCSIPowerStoreSpecDriverSideCarsNodeSelectorOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsNodeSelectorOutput {
	return o
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIPowerStoreSpecDriverSideCarsTolerations struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect *string `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key *string `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator *string `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds *int `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value *string `pulumi:"value"`
}

// CSIPowerStoreSpecDriverSideCarsTolerationsInput is an input type that accepts CSIPowerStoreSpecDriverSideCarsTolerationsArgs and CSIPowerStoreSpecDriverSideCarsTolerationsOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverSideCarsTolerationsInput` via:
//
//          CSIPowerStoreSpecDriverSideCarsTolerationsArgs{...}
type CSIPowerStoreSpecDriverSideCarsTolerationsInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverSideCarsTolerationsOutput() CSIPowerStoreSpecDriverSideCarsTolerationsOutput
	ToCSIPowerStoreSpecDriverSideCarsTolerationsOutputWithContext(context.Context) CSIPowerStoreSpecDriverSideCarsTolerationsOutput
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIPowerStoreSpecDriverSideCarsTolerationsArgs struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect pulumi.StringPtrInput `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds pulumi.IntPtrInput `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (CSIPowerStoreSpecDriverSideCarsTolerationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverSideCarsTolerations)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverSideCarsTolerationsArgs) ToCSIPowerStoreSpecDriverSideCarsTolerationsOutput() CSIPowerStoreSpecDriverSideCarsTolerationsOutput {
	return i.ToCSIPowerStoreSpecDriverSideCarsTolerationsOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverSideCarsTolerationsArgs) ToCSIPowerStoreSpecDriverSideCarsTolerationsOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsTolerationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverSideCarsTolerationsOutput)
}

// CSIPowerStoreSpecDriverSideCarsTolerationsArrayInput is an input type that accepts CSIPowerStoreSpecDriverSideCarsTolerationsArray and CSIPowerStoreSpecDriverSideCarsTolerationsArrayOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverSideCarsTolerationsArrayInput` via:
//
//          CSIPowerStoreSpecDriverSideCarsTolerationsArray{ CSIPowerStoreSpecDriverSideCarsTolerationsArgs{...} }
type CSIPowerStoreSpecDriverSideCarsTolerationsArrayInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverSideCarsTolerationsArrayOutput() CSIPowerStoreSpecDriverSideCarsTolerationsArrayOutput
	ToCSIPowerStoreSpecDriverSideCarsTolerationsArrayOutputWithContext(context.Context) CSIPowerStoreSpecDriverSideCarsTolerationsArrayOutput
}

type CSIPowerStoreSpecDriverSideCarsTolerationsArray []CSIPowerStoreSpecDriverSideCarsTolerationsInput

func (CSIPowerStoreSpecDriverSideCarsTolerationsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerStoreSpecDriverSideCarsTolerations)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverSideCarsTolerationsArray) ToCSIPowerStoreSpecDriverSideCarsTolerationsArrayOutput() CSIPowerStoreSpecDriverSideCarsTolerationsArrayOutput {
	return i.ToCSIPowerStoreSpecDriverSideCarsTolerationsArrayOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverSideCarsTolerationsArray) ToCSIPowerStoreSpecDriverSideCarsTolerationsArrayOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsTolerationsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverSideCarsTolerationsArrayOutput)
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIPowerStoreSpecDriverSideCarsTolerationsOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverSideCarsTolerationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverSideCarsTolerations)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverSideCarsTolerationsOutput) ToCSIPowerStoreSpecDriverSideCarsTolerationsOutput() CSIPowerStoreSpecDriverSideCarsTolerationsOutput {
	return o
}

func (o CSIPowerStoreSpecDriverSideCarsTolerationsOutput) ToCSIPowerStoreSpecDriverSideCarsTolerationsOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsTolerationsOutput {
	return o
}

// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
func (o CSIPowerStoreSpecDriverSideCarsTolerationsOutput) Effect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverSideCarsTolerations) *string { return v.Effect }).(pulumi.StringPtrOutput)
}

// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
func (o CSIPowerStoreSpecDriverSideCarsTolerationsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverSideCarsTolerations) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
func (o CSIPowerStoreSpecDriverSideCarsTolerationsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverSideCarsTolerations) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
func (o CSIPowerStoreSpecDriverSideCarsTolerationsOutput) TolerationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverSideCarsTolerations) *int { return v.TolerationSeconds }).(pulumi.IntPtrOutput)
}

// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
func (o CSIPowerStoreSpecDriverSideCarsTolerationsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverSideCarsTolerations) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type CSIPowerStoreSpecDriverSideCarsTolerationsArrayOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverSideCarsTolerationsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerStoreSpecDriverSideCarsTolerations)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverSideCarsTolerationsArrayOutput) ToCSIPowerStoreSpecDriverSideCarsTolerationsArrayOutput() CSIPowerStoreSpecDriverSideCarsTolerationsArrayOutput {
	return o
}

func (o CSIPowerStoreSpecDriverSideCarsTolerationsArrayOutput) ToCSIPowerStoreSpecDriverSideCarsTolerationsArrayOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSideCarsTolerationsArrayOutput {
	return o
}

func (o CSIPowerStoreSpecDriverSideCarsTolerationsArrayOutput) Index(i pulumi.IntInput) CSIPowerStoreSpecDriverSideCarsTolerationsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIPowerStoreSpecDriverSideCarsTolerations {
		return vs[0].([]CSIPowerStoreSpecDriverSideCarsTolerations)[vs[1].(int)]
	}).(CSIPowerStoreSpecDriverSideCarsTolerationsOutput)
}

// SnapshotClass represents a VolumeSnapshotClass
type CSIPowerStoreSpecDriverSnapshotClass struct {
	// Name is the name of the Snapshot Class
	Name string `pulumi:"name"`
	// Parameters is a map of driver specific parameters for snapshot class
	Parameters map[string]string `pulumi:"parameters"`
}

// CSIPowerStoreSpecDriverSnapshotClassInput is an input type that accepts CSIPowerStoreSpecDriverSnapshotClassArgs and CSIPowerStoreSpecDriverSnapshotClassOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverSnapshotClassInput` via:
//
//          CSIPowerStoreSpecDriverSnapshotClassArgs{...}
type CSIPowerStoreSpecDriverSnapshotClassInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverSnapshotClassOutput() CSIPowerStoreSpecDriverSnapshotClassOutput
	ToCSIPowerStoreSpecDriverSnapshotClassOutputWithContext(context.Context) CSIPowerStoreSpecDriverSnapshotClassOutput
}

// SnapshotClass represents a VolumeSnapshotClass
type CSIPowerStoreSpecDriverSnapshotClassArgs struct {
	// Name is the name of the Snapshot Class
	Name pulumi.StringInput `pulumi:"name"`
	// Parameters is a map of driver specific parameters for snapshot class
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
}

func (CSIPowerStoreSpecDriverSnapshotClassArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverSnapshotClass)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverSnapshotClassArgs) ToCSIPowerStoreSpecDriverSnapshotClassOutput() CSIPowerStoreSpecDriverSnapshotClassOutput {
	return i.ToCSIPowerStoreSpecDriverSnapshotClassOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverSnapshotClassArgs) ToCSIPowerStoreSpecDriverSnapshotClassOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSnapshotClassOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverSnapshotClassOutput)
}

// CSIPowerStoreSpecDriverSnapshotClassArrayInput is an input type that accepts CSIPowerStoreSpecDriverSnapshotClassArray and CSIPowerStoreSpecDriverSnapshotClassArrayOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverSnapshotClassArrayInput` via:
//
//          CSIPowerStoreSpecDriverSnapshotClassArray{ CSIPowerStoreSpecDriverSnapshotClassArgs{...} }
type CSIPowerStoreSpecDriverSnapshotClassArrayInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverSnapshotClassArrayOutput() CSIPowerStoreSpecDriverSnapshotClassArrayOutput
	ToCSIPowerStoreSpecDriverSnapshotClassArrayOutputWithContext(context.Context) CSIPowerStoreSpecDriverSnapshotClassArrayOutput
}

type CSIPowerStoreSpecDriverSnapshotClassArray []CSIPowerStoreSpecDriverSnapshotClassInput

func (CSIPowerStoreSpecDriverSnapshotClassArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerStoreSpecDriverSnapshotClass)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverSnapshotClassArray) ToCSIPowerStoreSpecDriverSnapshotClassArrayOutput() CSIPowerStoreSpecDriverSnapshotClassArrayOutput {
	return i.ToCSIPowerStoreSpecDriverSnapshotClassArrayOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverSnapshotClassArray) ToCSIPowerStoreSpecDriverSnapshotClassArrayOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSnapshotClassArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverSnapshotClassArrayOutput)
}

// SnapshotClass represents a VolumeSnapshotClass
type CSIPowerStoreSpecDriverSnapshotClassOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverSnapshotClassOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverSnapshotClass)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverSnapshotClassOutput) ToCSIPowerStoreSpecDriverSnapshotClassOutput() CSIPowerStoreSpecDriverSnapshotClassOutput {
	return o
}

func (o CSIPowerStoreSpecDriverSnapshotClassOutput) ToCSIPowerStoreSpecDriverSnapshotClassOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSnapshotClassOutput {
	return o
}

// Name is the name of the Snapshot Class
func (o CSIPowerStoreSpecDriverSnapshotClassOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverSnapshotClass) string { return v.Name }).(pulumi.StringOutput)
}

// Parameters is a map of driver specific parameters for snapshot class
func (o CSIPowerStoreSpecDriverSnapshotClassOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverSnapshotClass) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

type CSIPowerStoreSpecDriverSnapshotClassArrayOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverSnapshotClassArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerStoreSpecDriverSnapshotClass)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverSnapshotClassArrayOutput) ToCSIPowerStoreSpecDriverSnapshotClassArrayOutput() CSIPowerStoreSpecDriverSnapshotClassArrayOutput {
	return o
}

func (o CSIPowerStoreSpecDriverSnapshotClassArrayOutput) ToCSIPowerStoreSpecDriverSnapshotClassArrayOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSnapshotClassArrayOutput {
	return o
}

func (o CSIPowerStoreSpecDriverSnapshotClassArrayOutput) Index(i pulumi.IntInput) CSIPowerStoreSpecDriverSnapshotClassOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIPowerStoreSpecDriverSnapshotClass {
		return vs[0].([]CSIPowerStoreSpecDriverSnapshotClass)[vs[1].(int)]
	}).(CSIPowerStoreSpecDriverSnapshotClassOutput)
}

// Parameters is a map of driver specific parameters for snapshot class
type CSIPowerStoreSpecDriverSnapshotClassParameters struct {
}

// CSIPowerStoreSpecDriverSnapshotClassParametersInput is an input type that accepts CSIPowerStoreSpecDriverSnapshotClassParametersArgs and CSIPowerStoreSpecDriverSnapshotClassParametersOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverSnapshotClassParametersInput` via:
//
//          CSIPowerStoreSpecDriverSnapshotClassParametersArgs{...}
type CSIPowerStoreSpecDriverSnapshotClassParametersInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverSnapshotClassParametersOutput() CSIPowerStoreSpecDriverSnapshotClassParametersOutput
	ToCSIPowerStoreSpecDriverSnapshotClassParametersOutputWithContext(context.Context) CSIPowerStoreSpecDriverSnapshotClassParametersOutput
}

// Parameters is a map of driver specific parameters for snapshot class
type CSIPowerStoreSpecDriverSnapshotClassParametersArgs struct {
}

func (CSIPowerStoreSpecDriverSnapshotClassParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverSnapshotClassParameters)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverSnapshotClassParametersArgs) ToCSIPowerStoreSpecDriverSnapshotClassParametersOutput() CSIPowerStoreSpecDriverSnapshotClassParametersOutput {
	return i.ToCSIPowerStoreSpecDriverSnapshotClassParametersOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverSnapshotClassParametersArgs) ToCSIPowerStoreSpecDriverSnapshotClassParametersOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSnapshotClassParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverSnapshotClassParametersOutput)
}

// Parameters is a map of driver specific parameters for snapshot class
type CSIPowerStoreSpecDriverSnapshotClassParametersOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverSnapshotClassParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverSnapshotClassParameters)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverSnapshotClassParametersOutput) ToCSIPowerStoreSpecDriverSnapshotClassParametersOutput() CSIPowerStoreSpecDriverSnapshotClassParametersOutput {
	return o
}

func (o CSIPowerStoreSpecDriverSnapshotClassParametersOutput) ToCSIPowerStoreSpecDriverSnapshotClassParametersOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverSnapshotClassParametersOutput {
	return o
}

// StorageClass represents a kubernetes storage class
type CSIPowerStoreSpecDriverStorageClass struct {
	// AllowVolumeExpansion is a boolean flag which indicates if volumes can be expanded
	AllowVolumeExpansion *bool `pulumi:"allowVolumeExpansion"`
	// Restrict the node topologies where volumes can be dynamically provisioned.
	AllowedTopologies []CSIPowerStoreSpecDriverStorageClassAllowedTopologies `pulumi:"allowedTopologies"`
	// DefaultSc is a boolean flag to indicate if the storage class is going to be marked as default
	Default *bool `pulumi:"default"`
	// Name is the name of the StorageClass
	Name string `pulumi:"name"`
	// Parameters is a map of driver specific storage class
	Parameters map[string]string `pulumi:"parameters"`
	// ReclaimPolicy is the reclaim policy for the storage class
	ReclaimPolicy *string `pulumi:"reclaimPolicy"`
}

// CSIPowerStoreSpecDriverStorageClassInput is an input type that accepts CSIPowerStoreSpecDriverStorageClassArgs and CSIPowerStoreSpecDriverStorageClassOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverStorageClassInput` via:
//
//          CSIPowerStoreSpecDriverStorageClassArgs{...}
type CSIPowerStoreSpecDriverStorageClassInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverStorageClassOutput() CSIPowerStoreSpecDriverStorageClassOutput
	ToCSIPowerStoreSpecDriverStorageClassOutputWithContext(context.Context) CSIPowerStoreSpecDriverStorageClassOutput
}

// StorageClass represents a kubernetes storage class
type CSIPowerStoreSpecDriverStorageClassArgs struct {
	// AllowVolumeExpansion is a boolean flag which indicates if volumes can be expanded
	AllowVolumeExpansion pulumi.BoolPtrInput `pulumi:"allowVolumeExpansion"`
	// Restrict the node topologies where volumes can be dynamically provisioned.
	AllowedTopologies CSIPowerStoreSpecDriverStorageClassAllowedTopologiesArrayInput `pulumi:"allowedTopologies"`
	// DefaultSc is a boolean flag to indicate if the storage class is going to be marked as default
	Default pulumi.BoolPtrInput `pulumi:"default"`
	// Name is the name of the StorageClass
	Name pulumi.StringInput `pulumi:"name"`
	// Parameters is a map of driver specific storage class
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
	// ReclaimPolicy is the reclaim policy for the storage class
	ReclaimPolicy pulumi.StringPtrInput `pulumi:"reclaimPolicy"`
}

func (CSIPowerStoreSpecDriverStorageClassArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverStorageClass)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverStorageClassArgs) ToCSIPowerStoreSpecDriverStorageClassOutput() CSIPowerStoreSpecDriverStorageClassOutput {
	return i.ToCSIPowerStoreSpecDriverStorageClassOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverStorageClassArgs) ToCSIPowerStoreSpecDriverStorageClassOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverStorageClassOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverStorageClassOutput)
}

// CSIPowerStoreSpecDriverStorageClassArrayInput is an input type that accepts CSIPowerStoreSpecDriverStorageClassArray and CSIPowerStoreSpecDriverStorageClassArrayOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverStorageClassArrayInput` via:
//
//          CSIPowerStoreSpecDriverStorageClassArray{ CSIPowerStoreSpecDriverStorageClassArgs{...} }
type CSIPowerStoreSpecDriverStorageClassArrayInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverStorageClassArrayOutput() CSIPowerStoreSpecDriverStorageClassArrayOutput
	ToCSIPowerStoreSpecDriverStorageClassArrayOutputWithContext(context.Context) CSIPowerStoreSpecDriverStorageClassArrayOutput
}

type CSIPowerStoreSpecDriverStorageClassArray []CSIPowerStoreSpecDriverStorageClassInput

func (CSIPowerStoreSpecDriverStorageClassArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerStoreSpecDriverStorageClass)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverStorageClassArray) ToCSIPowerStoreSpecDriverStorageClassArrayOutput() CSIPowerStoreSpecDriverStorageClassArrayOutput {
	return i.ToCSIPowerStoreSpecDriverStorageClassArrayOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverStorageClassArray) ToCSIPowerStoreSpecDriverStorageClassArrayOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverStorageClassArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverStorageClassArrayOutput)
}

// StorageClass represents a kubernetes storage class
type CSIPowerStoreSpecDriverStorageClassOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverStorageClassOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverStorageClass)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverStorageClassOutput) ToCSIPowerStoreSpecDriverStorageClassOutput() CSIPowerStoreSpecDriverStorageClassOutput {
	return o
}

func (o CSIPowerStoreSpecDriverStorageClassOutput) ToCSIPowerStoreSpecDriverStorageClassOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverStorageClassOutput {
	return o
}

// AllowVolumeExpansion is a boolean flag which indicates if volumes can be expanded
func (o CSIPowerStoreSpecDriverStorageClassOutput) AllowVolumeExpansion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverStorageClass) *bool { return v.AllowVolumeExpansion }).(pulumi.BoolPtrOutput)
}

// Restrict the node topologies where volumes can be dynamically provisioned.
func (o CSIPowerStoreSpecDriverStorageClassOutput) AllowedTopologies() CSIPowerStoreSpecDriverStorageClassAllowedTopologiesArrayOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverStorageClass) []CSIPowerStoreSpecDriverStorageClassAllowedTopologies {
		return v.AllowedTopologies
	}).(CSIPowerStoreSpecDriverStorageClassAllowedTopologiesArrayOutput)
}

// DefaultSc is a boolean flag to indicate if the storage class is going to be marked as default
func (o CSIPowerStoreSpecDriverStorageClassOutput) Default() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverStorageClass) *bool { return v.Default }).(pulumi.BoolPtrOutput)
}

// Name is the name of the StorageClass
func (o CSIPowerStoreSpecDriverStorageClassOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverStorageClass) string { return v.Name }).(pulumi.StringOutput)
}

// Parameters is a map of driver specific storage class
func (o CSIPowerStoreSpecDriverStorageClassOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverStorageClass) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

// ReclaimPolicy is the reclaim policy for the storage class
func (o CSIPowerStoreSpecDriverStorageClassOutput) ReclaimPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverStorageClass) *string { return v.ReclaimPolicy }).(pulumi.StringPtrOutput)
}

type CSIPowerStoreSpecDriverStorageClassArrayOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverStorageClassArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerStoreSpecDriverStorageClass)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverStorageClassArrayOutput) ToCSIPowerStoreSpecDriverStorageClassArrayOutput() CSIPowerStoreSpecDriverStorageClassArrayOutput {
	return o
}

func (o CSIPowerStoreSpecDriverStorageClassArrayOutput) ToCSIPowerStoreSpecDriverStorageClassArrayOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverStorageClassArrayOutput {
	return o
}

func (o CSIPowerStoreSpecDriverStorageClassArrayOutput) Index(i pulumi.IntInput) CSIPowerStoreSpecDriverStorageClassOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIPowerStoreSpecDriverStorageClass {
		return vs[0].([]CSIPowerStoreSpecDriverStorageClass)[vs[1].(int)]
	}).(CSIPowerStoreSpecDriverStorageClassOutput)
}

// A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.
type CSIPowerStoreSpecDriverStorageClassAllowedTopologies struct {
	// A list of topology selector requirements by labels.
	MatchLabelExpressions []CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions `pulumi:"matchLabelExpressions"`
}

// CSIPowerStoreSpecDriverStorageClassAllowedTopologiesInput is an input type that accepts CSIPowerStoreSpecDriverStorageClassAllowedTopologiesArgs and CSIPowerStoreSpecDriverStorageClassAllowedTopologiesOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverStorageClassAllowedTopologiesInput` via:
//
//          CSIPowerStoreSpecDriverStorageClassAllowedTopologiesArgs{...}
type CSIPowerStoreSpecDriverStorageClassAllowedTopologiesInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverStorageClassAllowedTopologiesOutput() CSIPowerStoreSpecDriverStorageClassAllowedTopologiesOutput
	ToCSIPowerStoreSpecDriverStorageClassAllowedTopologiesOutputWithContext(context.Context) CSIPowerStoreSpecDriverStorageClassAllowedTopologiesOutput
}

// A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.
type CSIPowerStoreSpecDriverStorageClassAllowedTopologiesArgs struct {
	// A list of topology selector requirements by labels.
	MatchLabelExpressions CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayInput `pulumi:"matchLabelExpressions"`
}

func (CSIPowerStoreSpecDriverStorageClassAllowedTopologiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverStorageClassAllowedTopologies)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverStorageClassAllowedTopologiesArgs) ToCSIPowerStoreSpecDriverStorageClassAllowedTopologiesOutput() CSIPowerStoreSpecDriverStorageClassAllowedTopologiesOutput {
	return i.ToCSIPowerStoreSpecDriverStorageClassAllowedTopologiesOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverStorageClassAllowedTopologiesArgs) ToCSIPowerStoreSpecDriverStorageClassAllowedTopologiesOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverStorageClassAllowedTopologiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverStorageClassAllowedTopologiesOutput)
}

// CSIPowerStoreSpecDriverStorageClassAllowedTopologiesArrayInput is an input type that accepts CSIPowerStoreSpecDriverStorageClassAllowedTopologiesArray and CSIPowerStoreSpecDriverStorageClassAllowedTopologiesArrayOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverStorageClassAllowedTopologiesArrayInput` via:
//
//          CSIPowerStoreSpecDriverStorageClassAllowedTopologiesArray{ CSIPowerStoreSpecDriverStorageClassAllowedTopologiesArgs{...} }
type CSIPowerStoreSpecDriverStorageClassAllowedTopologiesArrayInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverStorageClassAllowedTopologiesArrayOutput() CSIPowerStoreSpecDriverStorageClassAllowedTopologiesArrayOutput
	ToCSIPowerStoreSpecDriverStorageClassAllowedTopologiesArrayOutputWithContext(context.Context) CSIPowerStoreSpecDriverStorageClassAllowedTopologiesArrayOutput
}

type CSIPowerStoreSpecDriverStorageClassAllowedTopologiesArray []CSIPowerStoreSpecDriverStorageClassAllowedTopologiesInput

func (CSIPowerStoreSpecDriverStorageClassAllowedTopologiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerStoreSpecDriverStorageClassAllowedTopologies)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverStorageClassAllowedTopologiesArray) ToCSIPowerStoreSpecDriverStorageClassAllowedTopologiesArrayOutput() CSIPowerStoreSpecDriverStorageClassAllowedTopologiesArrayOutput {
	return i.ToCSIPowerStoreSpecDriverStorageClassAllowedTopologiesArrayOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverStorageClassAllowedTopologiesArray) ToCSIPowerStoreSpecDriverStorageClassAllowedTopologiesArrayOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverStorageClassAllowedTopologiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverStorageClassAllowedTopologiesArrayOutput)
}

// A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.
type CSIPowerStoreSpecDriverStorageClassAllowedTopologiesOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverStorageClassAllowedTopologiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverStorageClassAllowedTopologies)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverStorageClassAllowedTopologiesOutput) ToCSIPowerStoreSpecDriverStorageClassAllowedTopologiesOutput() CSIPowerStoreSpecDriverStorageClassAllowedTopologiesOutput {
	return o
}

func (o CSIPowerStoreSpecDriverStorageClassAllowedTopologiesOutput) ToCSIPowerStoreSpecDriverStorageClassAllowedTopologiesOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverStorageClassAllowedTopologiesOutput {
	return o
}

// A list of topology selector requirements by labels.
func (o CSIPowerStoreSpecDriverStorageClassAllowedTopologiesOutput) MatchLabelExpressions() CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverStorageClassAllowedTopologies) []CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions {
		return v.MatchLabelExpressions
	}).(CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput)
}

type CSIPowerStoreSpecDriverStorageClassAllowedTopologiesArrayOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverStorageClassAllowedTopologiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerStoreSpecDriverStorageClassAllowedTopologies)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverStorageClassAllowedTopologiesArrayOutput) ToCSIPowerStoreSpecDriverStorageClassAllowedTopologiesArrayOutput() CSIPowerStoreSpecDriverStorageClassAllowedTopologiesArrayOutput {
	return o
}

func (o CSIPowerStoreSpecDriverStorageClassAllowedTopologiesArrayOutput) ToCSIPowerStoreSpecDriverStorageClassAllowedTopologiesArrayOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverStorageClassAllowedTopologiesArrayOutput {
	return o
}

func (o CSIPowerStoreSpecDriverStorageClassAllowedTopologiesArrayOutput) Index(i pulumi.IntInput) CSIPowerStoreSpecDriverStorageClassAllowedTopologiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIPowerStoreSpecDriverStorageClassAllowedTopologies {
		return vs[0].([]CSIPowerStoreSpecDriverStorageClassAllowedTopologies)[vs[1].(int)]
	}).(CSIPowerStoreSpecDriverStorageClassAllowedTopologiesOutput)
}

// A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.
type CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions struct {
	// The label key that the selector applies to.
	Key string `pulumi:"key"`
	// An array of string values. One value must match the label to be selected. Each entry in Values is ORed.
	Values []string `pulumi:"values"`
}

// CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsInput is an input type that accepts CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArgs and CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsInput` via:
//
//          CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArgs{...}
type CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput() CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput
	ToCSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutputWithContext(context.Context) CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput
}

// A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.
type CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArgs struct {
	// The label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// An array of string values. One value must match the label to be selected. Each entry in Values is ORed.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArgs) ToCSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput() CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput {
	return i.ToCSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArgs) ToCSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput)
}

// CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayInput is an input type that accepts CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArray and CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayInput` via:
//
//          CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArray{ CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArgs{...} }
type CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput() CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput
	ToCSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutputWithContext(context.Context) CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput
}

type CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArray []CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsInput

func (CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArray) ToCSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput() CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput {
	return i.ToCSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArray) ToCSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput)
}

// A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.
type CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput) ToCSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput() CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput {
	return o
}

func (o CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput) ToCSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput {
	return o
}

// The label key that the selector applies to.
func (o CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions) string { return v.Key }).(pulumi.StringOutput)
}

// An array of string values. One value must match the label to be selected. Each entry in Values is ORed.
func (o CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput) ToCSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput() CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput {
	return o
}

func (o CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput) ToCSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput {
	return o
}

func (o CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput) Index(i pulumi.IntInput) CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions {
		return vs[0].([]CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions)[vs[1].(int)]
	}).(CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput)
}

// Parameters is a map of driver specific storage class
type CSIPowerStoreSpecDriverStorageClassParameters struct {
}

// CSIPowerStoreSpecDriverStorageClassParametersInput is an input type that accepts CSIPowerStoreSpecDriverStorageClassParametersArgs and CSIPowerStoreSpecDriverStorageClassParametersOutput values.
// You can construct a concrete instance of `CSIPowerStoreSpecDriverStorageClassParametersInput` via:
//
//          CSIPowerStoreSpecDriverStorageClassParametersArgs{...}
type CSIPowerStoreSpecDriverStorageClassParametersInput interface {
	pulumi.Input

	ToCSIPowerStoreSpecDriverStorageClassParametersOutput() CSIPowerStoreSpecDriverStorageClassParametersOutput
	ToCSIPowerStoreSpecDriverStorageClassParametersOutputWithContext(context.Context) CSIPowerStoreSpecDriverStorageClassParametersOutput
}

// Parameters is a map of driver specific storage class
type CSIPowerStoreSpecDriverStorageClassParametersArgs struct {
}

func (CSIPowerStoreSpecDriverStorageClassParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverStorageClassParameters)(nil)).Elem()
}

func (i CSIPowerStoreSpecDriverStorageClassParametersArgs) ToCSIPowerStoreSpecDriverStorageClassParametersOutput() CSIPowerStoreSpecDriverStorageClassParametersOutput {
	return i.ToCSIPowerStoreSpecDriverStorageClassParametersOutputWithContext(context.Background())
}

func (i CSIPowerStoreSpecDriverStorageClassParametersArgs) ToCSIPowerStoreSpecDriverStorageClassParametersOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverStorageClassParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreSpecDriverStorageClassParametersOutput)
}

// Parameters is a map of driver specific storage class
type CSIPowerStoreSpecDriverStorageClassParametersOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreSpecDriverStorageClassParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreSpecDriverStorageClassParameters)(nil)).Elem()
}

func (o CSIPowerStoreSpecDriverStorageClassParametersOutput) ToCSIPowerStoreSpecDriverStorageClassParametersOutput() CSIPowerStoreSpecDriverStorageClassParametersOutput {
	return o
}

func (o CSIPowerStoreSpecDriverStorageClassParametersOutput) ToCSIPowerStoreSpecDriverStorageClassParametersOutputWithContext(ctx context.Context) CSIPowerStoreSpecDriverStorageClassParametersOutput {
	return o
}

// DriverStatus defines the observed state of CSIDriver
type CSIPowerStoreStatus struct {
	// ControllerStatus is the status of Controller pods
	ControllerStatus *CSIPowerStoreStatusControllerStatus `pulumi:"controllerStatus"`
	// DriverHash is a hash of the driver specification
	DriverHash *int `pulumi:"driverHash"`
	// LastUpdate is the last updated state of the driver
	LastUpdate *CSIPowerStoreStatusLastUpdate `pulumi:"lastUpdate"`
	// NodeStatus is the status of Controller pods
	NodeStatus *CSIPowerStoreStatusNodeStatus `pulumi:"nodeStatus"`
	// State is the state of the driver installation
	State *string `pulumi:"state"`
}

// CSIPowerStoreStatusInput is an input type that accepts CSIPowerStoreStatusArgs and CSIPowerStoreStatusOutput values.
// You can construct a concrete instance of `CSIPowerStoreStatusInput` via:
//
//          CSIPowerStoreStatusArgs{...}
type CSIPowerStoreStatusInput interface {
	pulumi.Input

	ToCSIPowerStoreStatusOutput() CSIPowerStoreStatusOutput
	ToCSIPowerStoreStatusOutputWithContext(context.Context) CSIPowerStoreStatusOutput
}

// DriverStatus defines the observed state of CSIDriver
type CSIPowerStoreStatusArgs struct {
	// ControllerStatus is the status of Controller pods
	ControllerStatus CSIPowerStoreStatusControllerStatusPtrInput `pulumi:"controllerStatus"`
	// DriverHash is a hash of the driver specification
	DriverHash pulumi.IntPtrInput `pulumi:"driverHash"`
	// LastUpdate is the last updated state of the driver
	LastUpdate CSIPowerStoreStatusLastUpdatePtrInput `pulumi:"lastUpdate"`
	// NodeStatus is the status of Controller pods
	NodeStatus CSIPowerStoreStatusNodeStatusPtrInput `pulumi:"nodeStatus"`
	// State is the state of the driver installation
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (CSIPowerStoreStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreStatus)(nil)).Elem()
}

func (i CSIPowerStoreStatusArgs) ToCSIPowerStoreStatusOutput() CSIPowerStoreStatusOutput {
	return i.ToCSIPowerStoreStatusOutputWithContext(context.Background())
}

func (i CSIPowerStoreStatusArgs) ToCSIPowerStoreStatusOutputWithContext(ctx context.Context) CSIPowerStoreStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreStatusOutput)
}

func (i CSIPowerStoreStatusArgs) ToCSIPowerStoreStatusPtrOutput() CSIPowerStoreStatusPtrOutput {
	return i.ToCSIPowerStoreStatusPtrOutputWithContext(context.Background())
}

func (i CSIPowerStoreStatusArgs) ToCSIPowerStoreStatusPtrOutputWithContext(ctx context.Context) CSIPowerStoreStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreStatusOutput).ToCSIPowerStoreStatusPtrOutputWithContext(ctx)
}

// CSIPowerStoreStatusPtrInput is an input type that accepts CSIPowerStoreStatusArgs, CSIPowerStoreStatusPtr and CSIPowerStoreStatusPtrOutput values.
// You can construct a concrete instance of `CSIPowerStoreStatusPtrInput` via:
//
//          CSIPowerStoreStatusArgs{...}
//
//  or:
//
//          nil
type CSIPowerStoreStatusPtrInput interface {
	pulumi.Input

	ToCSIPowerStoreStatusPtrOutput() CSIPowerStoreStatusPtrOutput
	ToCSIPowerStoreStatusPtrOutputWithContext(context.Context) CSIPowerStoreStatusPtrOutput
}

type csipowerStoreStatusPtrType CSIPowerStoreStatusArgs

func CSIPowerStoreStatusPtr(v *CSIPowerStoreStatusArgs) CSIPowerStoreStatusPtrInput {
	return (*csipowerStoreStatusPtrType)(v)
}

func (*csipowerStoreStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreStatus)(nil)).Elem()
}

func (i *csipowerStoreStatusPtrType) ToCSIPowerStoreStatusPtrOutput() CSIPowerStoreStatusPtrOutput {
	return i.ToCSIPowerStoreStatusPtrOutputWithContext(context.Background())
}

func (i *csipowerStoreStatusPtrType) ToCSIPowerStoreStatusPtrOutputWithContext(ctx context.Context) CSIPowerStoreStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreStatusPtrOutput)
}

// DriverStatus defines the observed state of CSIDriver
type CSIPowerStoreStatusOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreStatus)(nil)).Elem()
}

func (o CSIPowerStoreStatusOutput) ToCSIPowerStoreStatusOutput() CSIPowerStoreStatusOutput {
	return o
}

func (o CSIPowerStoreStatusOutput) ToCSIPowerStoreStatusOutputWithContext(ctx context.Context) CSIPowerStoreStatusOutput {
	return o
}

func (o CSIPowerStoreStatusOutput) ToCSIPowerStoreStatusPtrOutput() CSIPowerStoreStatusPtrOutput {
	return o.ToCSIPowerStoreStatusPtrOutputWithContext(context.Background())
}

func (o CSIPowerStoreStatusOutput) ToCSIPowerStoreStatusPtrOutputWithContext(ctx context.Context) CSIPowerStoreStatusPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreStatus) *CSIPowerStoreStatus {
		return &v
	}).(CSIPowerStoreStatusPtrOutput)
}

// ControllerStatus is the status of Controller pods
func (o CSIPowerStoreStatusOutput) ControllerStatus() CSIPowerStoreStatusControllerStatusPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreStatus) *CSIPowerStoreStatusControllerStatus { return v.ControllerStatus }).(CSIPowerStoreStatusControllerStatusPtrOutput)
}

// DriverHash is a hash of the driver specification
func (o CSIPowerStoreStatusOutput) DriverHash() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreStatus) *int { return v.DriverHash }).(pulumi.IntPtrOutput)
}

// LastUpdate is the last updated state of the driver
func (o CSIPowerStoreStatusOutput) LastUpdate() CSIPowerStoreStatusLastUpdatePtrOutput {
	return o.ApplyT(func(v CSIPowerStoreStatus) *CSIPowerStoreStatusLastUpdate { return v.LastUpdate }).(CSIPowerStoreStatusLastUpdatePtrOutput)
}

// NodeStatus is the status of Controller pods
func (o CSIPowerStoreStatusOutput) NodeStatus() CSIPowerStoreStatusNodeStatusPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreStatus) *CSIPowerStoreStatusNodeStatus { return v.NodeStatus }).(CSIPowerStoreStatusNodeStatusPtrOutput)
}

// State is the state of the driver installation
func (o CSIPowerStoreStatusOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreStatus) *string { return v.State }).(pulumi.StringPtrOutput)
}

type CSIPowerStoreStatusPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreStatus)(nil)).Elem()
}

func (o CSIPowerStoreStatusPtrOutput) ToCSIPowerStoreStatusPtrOutput() CSIPowerStoreStatusPtrOutput {
	return o
}

func (o CSIPowerStoreStatusPtrOutput) ToCSIPowerStoreStatusPtrOutputWithContext(ctx context.Context) CSIPowerStoreStatusPtrOutput {
	return o
}

func (o CSIPowerStoreStatusPtrOutput) Elem() CSIPowerStoreStatusOutput {
	return o.ApplyT(func(v *CSIPowerStoreStatus) CSIPowerStoreStatus { return *v }).(CSIPowerStoreStatusOutput)
}

// ControllerStatus is the status of Controller pods
func (o CSIPowerStoreStatusPtrOutput) ControllerStatus() CSIPowerStoreStatusControllerStatusPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreStatus) *CSIPowerStoreStatusControllerStatus {
		if v == nil {
			return nil
		}
		return v.ControllerStatus
	}).(CSIPowerStoreStatusControllerStatusPtrOutput)
}

// DriverHash is a hash of the driver specification
func (o CSIPowerStoreStatusPtrOutput) DriverHash() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreStatus) *int {
		if v == nil {
			return nil
		}
		return v.DriverHash
	}).(pulumi.IntPtrOutput)
}

// LastUpdate is the last updated state of the driver
func (o CSIPowerStoreStatusPtrOutput) LastUpdate() CSIPowerStoreStatusLastUpdatePtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreStatus) *CSIPowerStoreStatusLastUpdate {
		if v == nil {
			return nil
		}
		return v.LastUpdate
	}).(CSIPowerStoreStatusLastUpdatePtrOutput)
}

// NodeStatus is the status of Controller pods
func (o CSIPowerStoreStatusPtrOutput) NodeStatus() CSIPowerStoreStatusNodeStatusPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreStatus) *CSIPowerStoreStatusNodeStatus {
		if v == nil {
			return nil
		}
		return v.NodeStatus
	}).(CSIPowerStoreStatusNodeStatusPtrOutput)
}

// State is the state of the driver installation
func (o CSIPowerStoreStatusPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreStatus) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// ControllerStatus is the status of Controller pods
type CSIPowerStoreStatusControllerStatus struct {
	Available []string `pulumi:"available"`
	Ready     []string `pulumi:"ready"`
	Starting  []string `pulumi:"starting"`
	Stopped   []string `pulumi:"stopped"`
}

// CSIPowerStoreStatusControllerStatusInput is an input type that accepts CSIPowerStoreStatusControllerStatusArgs and CSIPowerStoreStatusControllerStatusOutput values.
// You can construct a concrete instance of `CSIPowerStoreStatusControllerStatusInput` via:
//
//          CSIPowerStoreStatusControllerStatusArgs{...}
type CSIPowerStoreStatusControllerStatusInput interface {
	pulumi.Input

	ToCSIPowerStoreStatusControllerStatusOutput() CSIPowerStoreStatusControllerStatusOutput
	ToCSIPowerStoreStatusControllerStatusOutputWithContext(context.Context) CSIPowerStoreStatusControllerStatusOutput
}

// ControllerStatus is the status of Controller pods
type CSIPowerStoreStatusControllerStatusArgs struct {
	Available pulumi.StringArrayInput `pulumi:"available"`
	Ready     pulumi.StringArrayInput `pulumi:"ready"`
	Starting  pulumi.StringArrayInput `pulumi:"starting"`
	Stopped   pulumi.StringArrayInput `pulumi:"stopped"`
}

func (CSIPowerStoreStatusControllerStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreStatusControllerStatus)(nil)).Elem()
}

func (i CSIPowerStoreStatusControllerStatusArgs) ToCSIPowerStoreStatusControllerStatusOutput() CSIPowerStoreStatusControllerStatusOutput {
	return i.ToCSIPowerStoreStatusControllerStatusOutputWithContext(context.Background())
}

func (i CSIPowerStoreStatusControllerStatusArgs) ToCSIPowerStoreStatusControllerStatusOutputWithContext(ctx context.Context) CSIPowerStoreStatusControllerStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreStatusControllerStatusOutput)
}

func (i CSIPowerStoreStatusControllerStatusArgs) ToCSIPowerStoreStatusControllerStatusPtrOutput() CSIPowerStoreStatusControllerStatusPtrOutput {
	return i.ToCSIPowerStoreStatusControllerStatusPtrOutputWithContext(context.Background())
}

func (i CSIPowerStoreStatusControllerStatusArgs) ToCSIPowerStoreStatusControllerStatusPtrOutputWithContext(ctx context.Context) CSIPowerStoreStatusControllerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreStatusControllerStatusOutput).ToCSIPowerStoreStatusControllerStatusPtrOutputWithContext(ctx)
}

// CSIPowerStoreStatusControllerStatusPtrInput is an input type that accepts CSIPowerStoreStatusControllerStatusArgs, CSIPowerStoreStatusControllerStatusPtr and CSIPowerStoreStatusControllerStatusPtrOutput values.
// You can construct a concrete instance of `CSIPowerStoreStatusControllerStatusPtrInput` via:
//
//          CSIPowerStoreStatusControllerStatusArgs{...}
//
//  or:
//
//          nil
type CSIPowerStoreStatusControllerStatusPtrInput interface {
	pulumi.Input

	ToCSIPowerStoreStatusControllerStatusPtrOutput() CSIPowerStoreStatusControllerStatusPtrOutput
	ToCSIPowerStoreStatusControllerStatusPtrOutputWithContext(context.Context) CSIPowerStoreStatusControllerStatusPtrOutput
}

type csipowerStoreStatusControllerStatusPtrType CSIPowerStoreStatusControllerStatusArgs

func CSIPowerStoreStatusControllerStatusPtr(v *CSIPowerStoreStatusControllerStatusArgs) CSIPowerStoreStatusControllerStatusPtrInput {
	return (*csipowerStoreStatusControllerStatusPtrType)(v)
}

func (*csipowerStoreStatusControllerStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreStatusControllerStatus)(nil)).Elem()
}

func (i *csipowerStoreStatusControllerStatusPtrType) ToCSIPowerStoreStatusControllerStatusPtrOutput() CSIPowerStoreStatusControllerStatusPtrOutput {
	return i.ToCSIPowerStoreStatusControllerStatusPtrOutputWithContext(context.Background())
}

func (i *csipowerStoreStatusControllerStatusPtrType) ToCSIPowerStoreStatusControllerStatusPtrOutputWithContext(ctx context.Context) CSIPowerStoreStatusControllerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreStatusControllerStatusPtrOutput)
}

// ControllerStatus is the status of Controller pods
type CSIPowerStoreStatusControllerStatusOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreStatusControllerStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreStatusControllerStatus)(nil)).Elem()
}

func (o CSIPowerStoreStatusControllerStatusOutput) ToCSIPowerStoreStatusControllerStatusOutput() CSIPowerStoreStatusControllerStatusOutput {
	return o
}

func (o CSIPowerStoreStatusControllerStatusOutput) ToCSIPowerStoreStatusControllerStatusOutputWithContext(ctx context.Context) CSIPowerStoreStatusControllerStatusOutput {
	return o
}

func (o CSIPowerStoreStatusControllerStatusOutput) ToCSIPowerStoreStatusControllerStatusPtrOutput() CSIPowerStoreStatusControllerStatusPtrOutput {
	return o.ToCSIPowerStoreStatusControllerStatusPtrOutputWithContext(context.Background())
}

func (o CSIPowerStoreStatusControllerStatusOutput) ToCSIPowerStoreStatusControllerStatusPtrOutputWithContext(ctx context.Context) CSIPowerStoreStatusControllerStatusPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreStatusControllerStatus) *CSIPowerStoreStatusControllerStatus {
		return &v
	}).(CSIPowerStoreStatusControllerStatusPtrOutput)
}
func (o CSIPowerStoreStatusControllerStatusOutput) Available() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIPowerStoreStatusControllerStatus) []string { return v.Available }).(pulumi.StringArrayOutput)
}

func (o CSIPowerStoreStatusControllerStatusOutput) Ready() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIPowerStoreStatusControllerStatus) []string { return v.Ready }).(pulumi.StringArrayOutput)
}

func (o CSIPowerStoreStatusControllerStatusOutput) Starting() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIPowerStoreStatusControllerStatus) []string { return v.Starting }).(pulumi.StringArrayOutput)
}

func (o CSIPowerStoreStatusControllerStatusOutput) Stopped() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIPowerStoreStatusControllerStatus) []string { return v.Stopped }).(pulumi.StringArrayOutput)
}

type CSIPowerStoreStatusControllerStatusPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreStatusControllerStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreStatusControllerStatus)(nil)).Elem()
}

func (o CSIPowerStoreStatusControllerStatusPtrOutput) ToCSIPowerStoreStatusControllerStatusPtrOutput() CSIPowerStoreStatusControllerStatusPtrOutput {
	return o
}

func (o CSIPowerStoreStatusControllerStatusPtrOutput) ToCSIPowerStoreStatusControllerStatusPtrOutputWithContext(ctx context.Context) CSIPowerStoreStatusControllerStatusPtrOutput {
	return o
}

func (o CSIPowerStoreStatusControllerStatusPtrOutput) Elem() CSIPowerStoreStatusControllerStatusOutput {
	return o.ApplyT(func(v *CSIPowerStoreStatusControllerStatus) CSIPowerStoreStatusControllerStatus { return *v }).(CSIPowerStoreStatusControllerStatusOutput)
}

func (o CSIPowerStoreStatusControllerStatusPtrOutput) Available() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIPowerStoreStatusControllerStatus) []string {
		if v == nil {
			return nil
		}
		return v.Available
	}).(pulumi.StringArrayOutput)
}

func (o CSIPowerStoreStatusControllerStatusPtrOutput) Ready() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIPowerStoreStatusControllerStatus) []string {
		if v == nil {
			return nil
		}
		return v.Ready
	}).(pulumi.StringArrayOutput)
}

func (o CSIPowerStoreStatusControllerStatusPtrOutput) Starting() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIPowerStoreStatusControllerStatus) []string {
		if v == nil {
			return nil
		}
		return v.Starting
	}).(pulumi.StringArrayOutput)
}

func (o CSIPowerStoreStatusControllerStatusPtrOutput) Stopped() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIPowerStoreStatusControllerStatus) []string {
		if v == nil {
			return nil
		}
		return v.Stopped
	}).(pulumi.StringArrayOutput)
}

// LastUpdate is the last updated state of the driver
type CSIPowerStoreStatusLastUpdate struct {
	// Condition is the last known condition of the Custom Resource
	Condition *string `pulumi:"condition"`
	// ErrorMessage is the last error message associated with the condition
	ErrorMessage *string `pulumi:"errorMessage"`
	// Time is the time stamp for the last condition update
	Time *string `pulumi:"time"`
}

// CSIPowerStoreStatusLastUpdateInput is an input type that accepts CSIPowerStoreStatusLastUpdateArgs and CSIPowerStoreStatusLastUpdateOutput values.
// You can construct a concrete instance of `CSIPowerStoreStatusLastUpdateInput` via:
//
//          CSIPowerStoreStatusLastUpdateArgs{...}
type CSIPowerStoreStatusLastUpdateInput interface {
	pulumi.Input

	ToCSIPowerStoreStatusLastUpdateOutput() CSIPowerStoreStatusLastUpdateOutput
	ToCSIPowerStoreStatusLastUpdateOutputWithContext(context.Context) CSIPowerStoreStatusLastUpdateOutput
}

// LastUpdate is the last updated state of the driver
type CSIPowerStoreStatusLastUpdateArgs struct {
	// Condition is the last known condition of the Custom Resource
	Condition pulumi.StringPtrInput `pulumi:"condition"`
	// ErrorMessage is the last error message associated with the condition
	ErrorMessage pulumi.StringPtrInput `pulumi:"errorMessage"`
	// Time is the time stamp for the last condition update
	Time pulumi.StringPtrInput `pulumi:"time"`
}

func (CSIPowerStoreStatusLastUpdateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreStatusLastUpdate)(nil)).Elem()
}

func (i CSIPowerStoreStatusLastUpdateArgs) ToCSIPowerStoreStatusLastUpdateOutput() CSIPowerStoreStatusLastUpdateOutput {
	return i.ToCSIPowerStoreStatusLastUpdateOutputWithContext(context.Background())
}

func (i CSIPowerStoreStatusLastUpdateArgs) ToCSIPowerStoreStatusLastUpdateOutputWithContext(ctx context.Context) CSIPowerStoreStatusLastUpdateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreStatusLastUpdateOutput)
}

func (i CSIPowerStoreStatusLastUpdateArgs) ToCSIPowerStoreStatusLastUpdatePtrOutput() CSIPowerStoreStatusLastUpdatePtrOutput {
	return i.ToCSIPowerStoreStatusLastUpdatePtrOutputWithContext(context.Background())
}

func (i CSIPowerStoreStatusLastUpdateArgs) ToCSIPowerStoreStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIPowerStoreStatusLastUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreStatusLastUpdateOutput).ToCSIPowerStoreStatusLastUpdatePtrOutputWithContext(ctx)
}

// CSIPowerStoreStatusLastUpdatePtrInput is an input type that accepts CSIPowerStoreStatusLastUpdateArgs, CSIPowerStoreStatusLastUpdatePtr and CSIPowerStoreStatusLastUpdatePtrOutput values.
// You can construct a concrete instance of `CSIPowerStoreStatusLastUpdatePtrInput` via:
//
//          CSIPowerStoreStatusLastUpdateArgs{...}
//
//  or:
//
//          nil
type CSIPowerStoreStatusLastUpdatePtrInput interface {
	pulumi.Input

	ToCSIPowerStoreStatusLastUpdatePtrOutput() CSIPowerStoreStatusLastUpdatePtrOutput
	ToCSIPowerStoreStatusLastUpdatePtrOutputWithContext(context.Context) CSIPowerStoreStatusLastUpdatePtrOutput
}

type csipowerStoreStatusLastUpdatePtrType CSIPowerStoreStatusLastUpdateArgs

func CSIPowerStoreStatusLastUpdatePtr(v *CSIPowerStoreStatusLastUpdateArgs) CSIPowerStoreStatusLastUpdatePtrInput {
	return (*csipowerStoreStatusLastUpdatePtrType)(v)
}

func (*csipowerStoreStatusLastUpdatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreStatusLastUpdate)(nil)).Elem()
}

func (i *csipowerStoreStatusLastUpdatePtrType) ToCSIPowerStoreStatusLastUpdatePtrOutput() CSIPowerStoreStatusLastUpdatePtrOutput {
	return i.ToCSIPowerStoreStatusLastUpdatePtrOutputWithContext(context.Background())
}

func (i *csipowerStoreStatusLastUpdatePtrType) ToCSIPowerStoreStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIPowerStoreStatusLastUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreStatusLastUpdatePtrOutput)
}

// LastUpdate is the last updated state of the driver
type CSIPowerStoreStatusLastUpdateOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreStatusLastUpdateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreStatusLastUpdate)(nil)).Elem()
}

func (o CSIPowerStoreStatusLastUpdateOutput) ToCSIPowerStoreStatusLastUpdateOutput() CSIPowerStoreStatusLastUpdateOutput {
	return o
}

func (o CSIPowerStoreStatusLastUpdateOutput) ToCSIPowerStoreStatusLastUpdateOutputWithContext(ctx context.Context) CSIPowerStoreStatusLastUpdateOutput {
	return o
}

func (o CSIPowerStoreStatusLastUpdateOutput) ToCSIPowerStoreStatusLastUpdatePtrOutput() CSIPowerStoreStatusLastUpdatePtrOutput {
	return o.ToCSIPowerStoreStatusLastUpdatePtrOutputWithContext(context.Background())
}

func (o CSIPowerStoreStatusLastUpdateOutput) ToCSIPowerStoreStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIPowerStoreStatusLastUpdatePtrOutput {
	return o.ApplyT(func(v CSIPowerStoreStatusLastUpdate) *CSIPowerStoreStatusLastUpdate {
		return &v
	}).(CSIPowerStoreStatusLastUpdatePtrOutput)
}

// Condition is the last known condition of the Custom Resource
func (o CSIPowerStoreStatusLastUpdateOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreStatusLastUpdate) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

// ErrorMessage is the last error message associated with the condition
func (o CSIPowerStoreStatusLastUpdateOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreStatusLastUpdate) *string { return v.ErrorMessage }).(pulumi.StringPtrOutput)
}

// Time is the time stamp for the last condition update
func (o CSIPowerStoreStatusLastUpdateOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreStatusLastUpdate) *string { return v.Time }).(pulumi.StringPtrOutput)
}

type CSIPowerStoreStatusLastUpdatePtrOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreStatusLastUpdatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreStatusLastUpdate)(nil)).Elem()
}

func (o CSIPowerStoreStatusLastUpdatePtrOutput) ToCSIPowerStoreStatusLastUpdatePtrOutput() CSIPowerStoreStatusLastUpdatePtrOutput {
	return o
}

func (o CSIPowerStoreStatusLastUpdatePtrOutput) ToCSIPowerStoreStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIPowerStoreStatusLastUpdatePtrOutput {
	return o
}

func (o CSIPowerStoreStatusLastUpdatePtrOutput) Elem() CSIPowerStoreStatusLastUpdateOutput {
	return o.ApplyT(func(v *CSIPowerStoreStatusLastUpdate) CSIPowerStoreStatusLastUpdate { return *v }).(CSIPowerStoreStatusLastUpdateOutput)
}

// Condition is the last known condition of the Custom Resource
func (o CSIPowerStoreStatusLastUpdatePtrOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreStatusLastUpdate) *string {
		if v == nil {
			return nil
		}
		return v.Condition
	}).(pulumi.StringPtrOutput)
}

// ErrorMessage is the last error message associated with the condition
func (o CSIPowerStoreStatusLastUpdatePtrOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreStatusLastUpdate) *string {
		if v == nil {
			return nil
		}
		return v.ErrorMessage
	}).(pulumi.StringPtrOutput)
}

// Time is the time stamp for the last condition update
func (o CSIPowerStoreStatusLastUpdatePtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIPowerStoreStatusLastUpdate) *string {
		if v == nil {
			return nil
		}
		return v.Time
	}).(pulumi.StringPtrOutput)
}

// NodeStatus is the status of Controller pods
type CSIPowerStoreStatusNodeStatus struct {
	Available []string `pulumi:"available"`
	Ready     []string `pulumi:"ready"`
	Starting  []string `pulumi:"starting"`
	Stopped   []string `pulumi:"stopped"`
}

// CSIPowerStoreStatusNodeStatusInput is an input type that accepts CSIPowerStoreStatusNodeStatusArgs and CSIPowerStoreStatusNodeStatusOutput values.
// You can construct a concrete instance of `CSIPowerStoreStatusNodeStatusInput` via:
//
//          CSIPowerStoreStatusNodeStatusArgs{...}
type CSIPowerStoreStatusNodeStatusInput interface {
	pulumi.Input

	ToCSIPowerStoreStatusNodeStatusOutput() CSIPowerStoreStatusNodeStatusOutput
	ToCSIPowerStoreStatusNodeStatusOutputWithContext(context.Context) CSIPowerStoreStatusNodeStatusOutput
}

// NodeStatus is the status of Controller pods
type CSIPowerStoreStatusNodeStatusArgs struct {
	Available pulumi.StringArrayInput `pulumi:"available"`
	Ready     pulumi.StringArrayInput `pulumi:"ready"`
	Starting  pulumi.StringArrayInput `pulumi:"starting"`
	Stopped   pulumi.StringArrayInput `pulumi:"stopped"`
}

func (CSIPowerStoreStatusNodeStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreStatusNodeStatus)(nil)).Elem()
}

func (i CSIPowerStoreStatusNodeStatusArgs) ToCSIPowerStoreStatusNodeStatusOutput() CSIPowerStoreStatusNodeStatusOutput {
	return i.ToCSIPowerStoreStatusNodeStatusOutputWithContext(context.Background())
}

func (i CSIPowerStoreStatusNodeStatusArgs) ToCSIPowerStoreStatusNodeStatusOutputWithContext(ctx context.Context) CSIPowerStoreStatusNodeStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreStatusNodeStatusOutput)
}

func (i CSIPowerStoreStatusNodeStatusArgs) ToCSIPowerStoreStatusNodeStatusPtrOutput() CSIPowerStoreStatusNodeStatusPtrOutput {
	return i.ToCSIPowerStoreStatusNodeStatusPtrOutputWithContext(context.Background())
}

func (i CSIPowerStoreStatusNodeStatusArgs) ToCSIPowerStoreStatusNodeStatusPtrOutputWithContext(ctx context.Context) CSIPowerStoreStatusNodeStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreStatusNodeStatusOutput).ToCSIPowerStoreStatusNodeStatusPtrOutputWithContext(ctx)
}

// CSIPowerStoreStatusNodeStatusPtrInput is an input type that accepts CSIPowerStoreStatusNodeStatusArgs, CSIPowerStoreStatusNodeStatusPtr and CSIPowerStoreStatusNodeStatusPtrOutput values.
// You can construct a concrete instance of `CSIPowerStoreStatusNodeStatusPtrInput` via:
//
//          CSIPowerStoreStatusNodeStatusArgs{...}
//
//  or:
//
//          nil
type CSIPowerStoreStatusNodeStatusPtrInput interface {
	pulumi.Input

	ToCSIPowerStoreStatusNodeStatusPtrOutput() CSIPowerStoreStatusNodeStatusPtrOutput
	ToCSIPowerStoreStatusNodeStatusPtrOutputWithContext(context.Context) CSIPowerStoreStatusNodeStatusPtrOutput
}

type csipowerStoreStatusNodeStatusPtrType CSIPowerStoreStatusNodeStatusArgs

func CSIPowerStoreStatusNodeStatusPtr(v *CSIPowerStoreStatusNodeStatusArgs) CSIPowerStoreStatusNodeStatusPtrInput {
	return (*csipowerStoreStatusNodeStatusPtrType)(v)
}

func (*csipowerStoreStatusNodeStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreStatusNodeStatus)(nil)).Elem()
}

func (i *csipowerStoreStatusNodeStatusPtrType) ToCSIPowerStoreStatusNodeStatusPtrOutput() CSIPowerStoreStatusNodeStatusPtrOutput {
	return i.ToCSIPowerStoreStatusNodeStatusPtrOutputWithContext(context.Background())
}

func (i *csipowerStoreStatusNodeStatusPtrType) ToCSIPowerStoreStatusNodeStatusPtrOutputWithContext(ctx context.Context) CSIPowerStoreStatusNodeStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIPowerStoreStatusNodeStatusPtrOutput)
}

// NodeStatus is the status of Controller pods
type CSIPowerStoreStatusNodeStatusOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreStatusNodeStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIPowerStoreStatusNodeStatus)(nil)).Elem()
}

func (o CSIPowerStoreStatusNodeStatusOutput) ToCSIPowerStoreStatusNodeStatusOutput() CSIPowerStoreStatusNodeStatusOutput {
	return o
}

func (o CSIPowerStoreStatusNodeStatusOutput) ToCSIPowerStoreStatusNodeStatusOutputWithContext(ctx context.Context) CSIPowerStoreStatusNodeStatusOutput {
	return o
}

func (o CSIPowerStoreStatusNodeStatusOutput) ToCSIPowerStoreStatusNodeStatusPtrOutput() CSIPowerStoreStatusNodeStatusPtrOutput {
	return o.ToCSIPowerStoreStatusNodeStatusPtrOutputWithContext(context.Background())
}

func (o CSIPowerStoreStatusNodeStatusOutput) ToCSIPowerStoreStatusNodeStatusPtrOutputWithContext(ctx context.Context) CSIPowerStoreStatusNodeStatusPtrOutput {
	return o.ApplyT(func(v CSIPowerStoreStatusNodeStatus) *CSIPowerStoreStatusNodeStatus {
		return &v
	}).(CSIPowerStoreStatusNodeStatusPtrOutput)
}
func (o CSIPowerStoreStatusNodeStatusOutput) Available() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIPowerStoreStatusNodeStatus) []string { return v.Available }).(pulumi.StringArrayOutput)
}

func (o CSIPowerStoreStatusNodeStatusOutput) Ready() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIPowerStoreStatusNodeStatus) []string { return v.Ready }).(pulumi.StringArrayOutput)
}

func (o CSIPowerStoreStatusNodeStatusOutput) Starting() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIPowerStoreStatusNodeStatus) []string { return v.Starting }).(pulumi.StringArrayOutput)
}

func (o CSIPowerStoreStatusNodeStatusOutput) Stopped() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIPowerStoreStatusNodeStatus) []string { return v.Stopped }).(pulumi.StringArrayOutput)
}

type CSIPowerStoreStatusNodeStatusPtrOutput struct{ *pulumi.OutputState }

func (CSIPowerStoreStatusNodeStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIPowerStoreStatusNodeStatus)(nil)).Elem()
}

func (o CSIPowerStoreStatusNodeStatusPtrOutput) ToCSIPowerStoreStatusNodeStatusPtrOutput() CSIPowerStoreStatusNodeStatusPtrOutput {
	return o
}

func (o CSIPowerStoreStatusNodeStatusPtrOutput) ToCSIPowerStoreStatusNodeStatusPtrOutputWithContext(ctx context.Context) CSIPowerStoreStatusNodeStatusPtrOutput {
	return o
}

func (o CSIPowerStoreStatusNodeStatusPtrOutput) Elem() CSIPowerStoreStatusNodeStatusOutput {
	return o.ApplyT(func(v *CSIPowerStoreStatusNodeStatus) CSIPowerStoreStatusNodeStatus { return *v }).(CSIPowerStoreStatusNodeStatusOutput)
}

func (o CSIPowerStoreStatusNodeStatusPtrOutput) Available() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIPowerStoreStatusNodeStatus) []string {
		if v == nil {
			return nil
		}
		return v.Available
	}).(pulumi.StringArrayOutput)
}

func (o CSIPowerStoreStatusNodeStatusPtrOutput) Ready() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIPowerStoreStatusNodeStatus) []string {
		if v == nil {
			return nil
		}
		return v.Ready
	}).(pulumi.StringArrayOutput)
}

func (o CSIPowerStoreStatusNodeStatusPtrOutput) Starting() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIPowerStoreStatusNodeStatus) []string {
		if v == nil {
			return nil
		}
		return v.Starting
	}).(pulumi.StringArrayOutput)
}

func (o CSIPowerStoreStatusNodeStatusPtrOutput) Stopped() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIPowerStoreStatusNodeStatus) []string {
		if v == nil {
			return nil
		}
		return v.Stopped
	}).(pulumi.StringArrayOutput)
}

// CSIUnity is the Schema for the csiunities API
type CSIUnityType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// CSIUnitySpec defines the desired state of CSIUnity
	Spec *CSIUnitySpec `pulumi:"spec"`
	// DriverStatus defines the observed state of CSIDriver
	Status *CSIUnityStatus `pulumi:"status"`
}

// CSIUnityTypeInput is an input type that accepts CSIUnityTypeArgs and CSIUnityTypeOutput values.
// You can construct a concrete instance of `CSIUnityTypeInput` via:
//
//          CSIUnityTypeArgs{...}
type CSIUnityTypeInput interface {
	pulumi.Input

	ToCSIUnityTypeOutput() CSIUnityTypeOutput
	ToCSIUnityTypeOutputWithContext(context.Context) CSIUnityTypeOutput
}

// CSIUnity is the Schema for the csiunities API
type CSIUnityTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// CSIUnitySpec defines the desired state of CSIUnity
	Spec CSIUnitySpecPtrInput `pulumi:"spec"`
	// DriverStatus defines the observed state of CSIDriver
	Status CSIUnityStatusPtrInput `pulumi:"status"`
}

func (CSIUnityTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnityType)(nil)).Elem()
}

func (i CSIUnityTypeArgs) ToCSIUnityTypeOutput() CSIUnityTypeOutput {
	return i.ToCSIUnityTypeOutputWithContext(context.Background())
}

func (i CSIUnityTypeArgs) ToCSIUnityTypeOutputWithContext(ctx context.Context) CSIUnityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnityTypeOutput)
}

// CSIUnity is the Schema for the csiunities API
type CSIUnityTypeOutput struct{ *pulumi.OutputState }

func (CSIUnityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnityType)(nil)).Elem()
}

func (o CSIUnityTypeOutput) ToCSIUnityTypeOutput() CSIUnityTypeOutput {
	return o
}

func (o CSIUnityTypeOutput) ToCSIUnityTypeOutputWithContext(ctx context.Context) CSIUnityTypeOutput {
	return o
}

func (o CSIUnityTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnityType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o CSIUnityTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnityType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o CSIUnityTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v CSIUnityType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// CSIUnitySpec defines the desired state of CSIUnity
func (o CSIUnityTypeOutput) Spec() CSIUnitySpecPtrOutput {
	return o.ApplyT(func(v CSIUnityType) *CSIUnitySpec { return v.Spec }).(CSIUnitySpecPtrOutput)
}

// DriverStatus defines the observed state of CSIDriver
func (o CSIUnityTypeOutput) Status() CSIUnityStatusPtrOutput {
	return o.ApplyT(func(v CSIUnityType) *CSIUnityStatus { return v.Status }).(CSIUnityStatusPtrOutput)
}

type CSIUnityMetadata struct {
}

// CSIUnityMetadataInput is an input type that accepts CSIUnityMetadataArgs and CSIUnityMetadataOutput values.
// You can construct a concrete instance of `CSIUnityMetadataInput` via:
//
//          CSIUnityMetadataArgs{...}
type CSIUnityMetadataInput interface {
	pulumi.Input

	ToCSIUnityMetadataOutput() CSIUnityMetadataOutput
	ToCSIUnityMetadataOutputWithContext(context.Context) CSIUnityMetadataOutput
}

type CSIUnityMetadataArgs struct {
}

func (CSIUnityMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnityMetadata)(nil)).Elem()
}

func (i CSIUnityMetadataArgs) ToCSIUnityMetadataOutput() CSIUnityMetadataOutput {
	return i.ToCSIUnityMetadataOutputWithContext(context.Background())
}

func (i CSIUnityMetadataArgs) ToCSIUnityMetadataOutputWithContext(ctx context.Context) CSIUnityMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnityMetadataOutput)
}

type CSIUnityMetadataOutput struct{ *pulumi.OutputState }

func (CSIUnityMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnityMetadata)(nil)).Elem()
}

func (o CSIUnityMetadataOutput) ToCSIUnityMetadataOutput() CSIUnityMetadataOutput {
	return o
}

func (o CSIUnityMetadataOutput) ToCSIUnityMetadataOutputWithContext(ctx context.Context) CSIUnityMetadataOutput {
	return o
}

// CSIUnitySpec defines the desired state of CSIUnity
type CSIUnitySpec struct {
	// Driver is the specification for the CSI Unity Driver
	Driver CSIUnitySpecDriver `pulumi:"driver"`
}

// CSIUnitySpecInput is an input type that accepts CSIUnitySpecArgs and CSIUnitySpecOutput values.
// You can construct a concrete instance of `CSIUnitySpecInput` via:
//
//          CSIUnitySpecArgs{...}
type CSIUnitySpecInput interface {
	pulumi.Input

	ToCSIUnitySpecOutput() CSIUnitySpecOutput
	ToCSIUnitySpecOutputWithContext(context.Context) CSIUnitySpecOutput
}

// CSIUnitySpec defines the desired state of CSIUnity
type CSIUnitySpecArgs struct {
	// Driver is the specification for the CSI Unity Driver
	Driver CSIUnitySpecDriverInput `pulumi:"driver"`
}

func (CSIUnitySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpec)(nil)).Elem()
}

func (i CSIUnitySpecArgs) ToCSIUnitySpecOutput() CSIUnitySpecOutput {
	return i.ToCSIUnitySpecOutputWithContext(context.Background())
}

func (i CSIUnitySpecArgs) ToCSIUnitySpecOutputWithContext(ctx context.Context) CSIUnitySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecOutput)
}

func (i CSIUnitySpecArgs) ToCSIUnitySpecPtrOutput() CSIUnitySpecPtrOutput {
	return i.ToCSIUnitySpecPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecArgs) ToCSIUnitySpecPtrOutputWithContext(ctx context.Context) CSIUnitySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecOutput).ToCSIUnitySpecPtrOutputWithContext(ctx)
}

// CSIUnitySpecPtrInput is an input type that accepts CSIUnitySpecArgs, CSIUnitySpecPtr and CSIUnitySpecPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecPtrInput` via:
//
//          CSIUnitySpecArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecPtrOutput() CSIUnitySpecPtrOutput
	ToCSIUnitySpecPtrOutputWithContext(context.Context) CSIUnitySpecPtrOutput
}

type csiunitySpecPtrType CSIUnitySpecArgs

func CSIUnitySpecPtr(v *CSIUnitySpecArgs) CSIUnitySpecPtrInput {
	return (*csiunitySpecPtrType)(v)
}

func (*csiunitySpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpec)(nil)).Elem()
}

func (i *csiunitySpecPtrType) ToCSIUnitySpecPtrOutput() CSIUnitySpecPtrOutput {
	return i.ToCSIUnitySpecPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecPtrType) ToCSIUnitySpecPtrOutputWithContext(ctx context.Context) CSIUnitySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecPtrOutput)
}

// CSIUnitySpec defines the desired state of CSIUnity
type CSIUnitySpecOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpec)(nil)).Elem()
}

func (o CSIUnitySpecOutput) ToCSIUnitySpecOutput() CSIUnitySpecOutput {
	return o
}

func (o CSIUnitySpecOutput) ToCSIUnitySpecOutputWithContext(ctx context.Context) CSIUnitySpecOutput {
	return o
}

func (o CSIUnitySpecOutput) ToCSIUnitySpecPtrOutput() CSIUnitySpecPtrOutput {
	return o.ToCSIUnitySpecPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecOutput) ToCSIUnitySpecPtrOutputWithContext(ctx context.Context) CSIUnitySpecPtrOutput {
	return o.ApplyT(func(v CSIUnitySpec) *CSIUnitySpec {
		return &v
	}).(CSIUnitySpecPtrOutput)
}

// Driver is the specification for the CSI Unity Driver
func (o CSIUnitySpecOutput) Driver() CSIUnitySpecDriverOutput {
	return o.ApplyT(func(v CSIUnitySpec) CSIUnitySpecDriver { return v.Driver }).(CSIUnitySpecDriverOutput)
}

type CSIUnitySpecPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpec)(nil)).Elem()
}

func (o CSIUnitySpecPtrOutput) ToCSIUnitySpecPtrOutput() CSIUnitySpecPtrOutput {
	return o
}

func (o CSIUnitySpecPtrOutput) ToCSIUnitySpecPtrOutputWithContext(ctx context.Context) CSIUnitySpecPtrOutput {
	return o
}

func (o CSIUnitySpecPtrOutput) Elem() CSIUnitySpecOutput {
	return o.ApplyT(func(v *CSIUnitySpec) CSIUnitySpec { return *v }).(CSIUnitySpecOutput)
}

// Driver is the specification for the CSI Unity Driver
func (o CSIUnitySpecPtrOutput) Driver() CSIUnitySpecDriverPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpec) *CSIUnitySpecDriver {
		if v == nil {
			return nil
		}
		return &v.Driver
	}).(CSIUnitySpecDriverPtrOutput)
}

// Driver is the specification for the CSI Unity Driver
type CSIUnitySpecDriver struct {
	// AuthSecret is the name of the credentials secret for the driver
	AuthSecret *string `pulumi:"authSecret"`
	// Common is the common specification for both controller and node plugins
	Common CSIUnitySpecDriverCommon `pulumi:"common"`
	// ConfigVersion is the configuration version of the driver
	ConfigVersion string `pulumi:"configVersion"`
	// Controller is the specification for Controller plugin only
	Controller *CSIUnitySpecDriverController `pulumi:"controller"`
	// ForceUpdate is the boolean flag used to force an update of the driver instance
	ForceUpdate *bool `pulumi:"forceUpdate"`
	// Node is the specification for Node plugin only
	Node *CSIUnitySpecDriverNode `pulumi:"node"`
	// Replicas is the count of controllers for Controller plugin
	Replicas int `pulumi:"replicas"`
	// SideCars is the specification for CSI sidecar containers
	SideCars []CSIUnitySpecDriverSideCars `pulumi:"sideCars"`
	// SnapshotClass is the specification for Snapshot Classes
	SnapshotClass []CSIUnitySpecDriverSnapshotClass `pulumi:"snapshotClass"`
	// StorageClass is the specification for Storage Classes
	StorageClass []CSIUnitySpecDriverStorageClass `pulumi:"storageClass"`
	// TLSCertSecret is the name of the TLS Cert secret
	TlsCertSecret *string `pulumi:"tlsCertSecret"`
}

// CSIUnitySpecDriverInput is an input type that accepts CSIUnitySpecDriverArgs and CSIUnitySpecDriverOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverInput` via:
//
//          CSIUnitySpecDriverArgs{...}
type CSIUnitySpecDriverInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverOutput() CSIUnitySpecDriverOutput
	ToCSIUnitySpecDriverOutputWithContext(context.Context) CSIUnitySpecDriverOutput
}

// Driver is the specification for the CSI Unity Driver
type CSIUnitySpecDriverArgs struct {
	// AuthSecret is the name of the credentials secret for the driver
	AuthSecret pulumi.StringPtrInput `pulumi:"authSecret"`
	// Common is the common specification for both controller and node plugins
	Common CSIUnitySpecDriverCommonInput `pulumi:"common"`
	// ConfigVersion is the configuration version of the driver
	ConfigVersion pulumi.StringInput `pulumi:"configVersion"`
	// Controller is the specification for Controller plugin only
	Controller CSIUnitySpecDriverControllerPtrInput `pulumi:"controller"`
	// ForceUpdate is the boolean flag used to force an update of the driver instance
	ForceUpdate pulumi.BoolPtrInput `pulumi:"forceUpdate"`
	// Node is the specification for Node plugin only
	Node CSIUnitySpecDriverNodePtrInput `pulumi:"node"`
	// Replicas is the count of controllers for Controller plugin
	Replicas pulumi.IntInput `pulumi:"replicas"`
	// SideCars is the specification for CSI sidecar containers
	SideCars CSIUnitySpecDriverSideCarsArrayInput `pulumi:"sideCars"`
	// SnapshotClass is the specification for Snapshot Classes
	SnapshotClass CSIUnitySpecDriverSnapshotClassArrayInput `pulumi:"snapshotClass"`
	// StorageClass is the specification for Storage Classes
	StorageClass CSIUnitySpecDriverStorageClassArrayInput `pulumi:"storageClass"`
	// TLSCertSecret is the name of the TLS Cert secret
	TlsCertSecret pulumi.StringPtrInput `pulumi:"tlsCertSecret"`
}

func (CSIUnitySpecDriverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriver)(nil)).Elem()
}

func (i CSIUnitySpecDriverArgs) ToCSIUnitySpecDriverOutput() CSIUnitySpecDriverOutput {
	return i.ToCSIUnitySpecDriverOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverArgs) ToCSIUnitySpecDriverOutputWithContext(ctx context.Context) CSIUnitySpecDriverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverOutput)
}

func (i CSIUnitySpecDriverArgs) ToCSIUnitySpecDriverPtrOutput() CSIUnitySpecDriverPtrOutput {
	return i.ToCSIUnitySpecDriverPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverArgs) ToCSIUnitySpecDriverPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverOutput).ToCSIUnitySpecDriverPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverPtrInput is an input type that accepts CSIUnitySpecDriverArgs, CSIUnitySpecDriverPtr and CSIUnitySpecDriverPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverPtrInput` via:
//
//          CSIUnitySpecDriverArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverPtrOutput() CSIUnitySpecDriverPtrOutput
	ToCSIUnitySpecDriverPtrOutputWithContext(context.Context) CSIUnitySpecDriverPtrOutput
}

type csiunitySpecDriverPtrType CSIUnitySpecDriverArgs

func CSIUnitySpecDriverPtr(v *CSIUnitySpecDriverArgs) CSIUnitySpecDriverPtrInput {
	return (*csiunitySpecDriverPtrType)(v)
}

func (*csiunitySpecDriverPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriver)(nil)).Elem()
}

func (i *csiunitySpecDriverPtrType) ToCSIUnitySpecDriverPtrOutput() CSIUnitySpecDriverPtrOutput {
	return i.ToCSIUnitySpecDriverPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverPtrType) ToCSIUnitySpecDriverPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverPtrOutput)
}

// Driver is the specification for the CSI Unity Driver
type CSIUnitySpecDriverOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriver)(nil)).Elem()
}

func (o CSIUnitySpecDriverOutput) ToCSIUnitySpecDriverOutput() CSIUnitySpecDriverOutput {
	return o
}

func (o CSIUnitySpecDriverOutput) ToCSIUnitySpecDriverOutputWithContext(ctx context.Context) CSIUnitySpecDriverOutput {
	return o
}

func (o CSIUnitySpecDriverOutput) ToCSIUnitySpecDriverPtrOutput() CSIUnitySpecDriverPtrOutput {
	return o.ToCSIUnitySpecDriverPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverOutput) ToCSIUnitySpecDriverPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriver) *CSIUnitySpecDriver {
		return &v
	}).(CSIUnitySpecDriverPtrOutput)
}

// AuthSecret is the name of the credentials secret for the driver
func (o CSIUnitySpecDriverOutput) AuthSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriver) *string { return v.AuthSecret }).(pulumi.StringPtrOutput)
}

// Common is the common specification for both controller and node plugins
func (o CSIUnitySpecDriverOutput) Common() CSIUnitySpecDriverCommonOutput {
	return o.ApplyT(func(v CSIUnitySpecDriver) CSIUnitySpecDriverCommon { return v.Common }).(CSIUnitySpecDriverCommonOutput)
}

// ConfigVersion is the configuration version of the driver
func (o CSIUnitySpecDriverOutput) ConfigVersion() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriver) string { return v.ConfigVersion }).(pulumi.StringOutput)
}

// Controller is the specification for Controller plugin only
func (o CSIUnitySpecDriverOutput) Controller() CSIUnitySpecDriverControllerPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriver) *CSIUnitySpecDriverController { return v.Controller }).(CSIUnitySpecDriverControllerPtrOutput)
}

// ForceUpdate is the boolean flag used to force an update of the driver instance
func (o CSIUnitySpecDriverOutput) ForceUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriver) *bool { return v.ForceUpdate }).(pulumi.BoolPtrOutput)
}

// Node is the specification for Node plugin only
func (o CSIUnitySpecDriverOutput) Node() CSIUnitySpecDriverNodePtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriver) *CSIUnitySpecDriverNode { return v.Node }).(CSIUnitySpecDriverNodePtrOutput)
}

// Replicas is the count of controllers for Controller plugin
func (o CSIUnitySpecDriverOutput) Replicas() pulumi.IntOutput {
	return o.ApplyT(func(v CSIUnitySpecDriver) int { return v.Replicas }).(pulumi.IntOutput)
}

// SideCars is the specification for CSI sidecar containers
func (o CSIUnitySpecDriverOutput) SideCars() CSIUnitySpecDriverSideCarsArrayOutput {
	return o.ApplyT(func(v CSIUnitySpecDriver) []CSIUnitySpecDriverSideCars { return v.SideCars }).(CSIUnitySpecDriverSideCarsArrayOutput)
}

// SnapshotClass is the specification for Snapshot Classes
func (o CSIUnitySpecDriverOutput) SnapshotClass() CSIUnitySpecDriverSnapshotClassArrayOutput {
	return o.ApplyT(func(v CSIUnitySpecDriver) []CSIUnitySpecDriverSnapshotClass { return v.SnapshotClass }).(CSIUnitySpecDriverSnapshotClassArrayOutput)
}

// StorageClass is the specification for Storage Classes
func (o CSIUnitySpecDriverOutput) StorageClass() CSIUnitySpecDriverStorageClassArrayOutput {
	return o.ApplyT(func(v CSIUnitySpecDriver) []CSIUnitySpecDriverStorageClass { return v.StorageClass }).(CSIUnitySpecDriverStorageClassArrayOutput)
}

// TLSCertSecret is the name of the TLS Cert secret
func (o CSIUnitySpecDriverOutput) TlsCertSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriver) *string { return v.TlsCertSecret }).(pulumi.StringPtrOutput)
}

type CSIUnitySpecDriverPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriver)(nil)).Elem()
}

func (o CSIUnitySpecDriverPtrOutput) ToCSIUnitySpecDriverPtrOutput() CSIUnitySpecDriverPtrOutput {
	return o
}

func (o CSIUnitySpecDriverPtrOutput) ToCSIUnitySpecDriverPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverPtrOutput {
	return o
}

func (o CSIUnitySpecDriverPtrOutput) Elem() CSIUnitySpecDriverOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriver) CSIUnitySpecDriver { return *v }).(CSIUnitySpecDriverOutput)
}

// AuthSecret is the name of the credentials secret for the driver
func (o CSIUnitySpecDriverPtrOutput) AuthSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriver) *string {
		if v == nil {
			return nil
		}
		return v.AuthSecret
	}).(pulumi.StringPtrOutput)
}

// Common is the common specification for both controller and node plugins
func (o CSIUnitySpecDriverPtrOutput) Common() CSIUnitySpecDriverCommonPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriver) *CSIUnitySpecDriverCommon {
		if v == nil {
			return nil
		}
		return &v.Common
	}).(CSIUnitySpecDriverCommonPtrOutput)
}

// ConfigVersion is the configuration version of the driver
func (o CSIUnitySpecDriverPtrOutput) ConfigVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriver) *string {
		if v == nil {
			return nil
		}
		return &v.ConfigVersion
	}).(pulumi.StringPtrOutput)
}

// Controller is the specification for Controller plugin only
func (o CSIUnitySpecDriverPtrOutput) Controller() CSIUnitySpecDriverControllerPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriver) *CSIUnitySpecDriverController {
		if v == nil {
			return nil
		}
		return v.Controller
	}).(CSIUnitySpecDriverControllerPtrOutput)
}

// ForceUpdate is the boolean flag used to force an update of the driver instance
func (o CSIUnitySpecDriverPtrOutput) ForceUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriver) *bool {
		if v == nil {
			return nil
		}
		return v.ForceUpdate
	}).(pulumi.BoolPtrOutput)
}

// Node is the specification for Node plugin only
func (o CSIUnitySpecDriverPtrOutput) Node() CSIUnitySpecDriverNodePtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriver) *CSIUnitySpecDriverNode {
		if v == nil {
			return nil
		}
		return v.Node
	}).(CSIUnitySpecDriverNodePtrOutput)
}

// Replicas is the count of controllers for Controller plugin
func (o CSIUnitySpecDriverPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriver) *int {
		if v == nil {
			return nil
		}
		return &v.Replicas
	}).(pulumi.IntPtrOutput)
}

// SideCars is the specification for CSI sidecar containers
func (o CSIUnitySpecDriverPtrOutput) SideCars() CSIUnitySpecDriverSideCarsArrayOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriver) []CSIUnitySpecDriverSideCars {
		if v == nil {
			return nil
		}
		return v.SideCars
	}).(CSIUnitySpecDriverSideCarsArrayOutput)
}

// SnapshotClass is the specification for Snapshot Classes
func (o CSIUnitySpecDriverPtrOutput) SnapshotClass() CSIUnitySpecDriverSnapshotClassArrayOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriver) []CSIUnitySpecDriverSnapshotClass {
		if v == nil {
			return nil
		}
		return v.SnapshotClass
	}).(CSIUnitySpecDriverSnapshotClassArrayOutput)
}

// StorageClass is the specification for Storage Classes
func (o CSIUnitySpecDriverPtrOutput) StorageClass() CSIUnitySpecDriverStorageClassArrayOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriver) []CSIUnitySpecDriverStorageClass {
		if v == nil {
			return nil
		}
		return v.StorageClass
	}).(CSIUnitySpecDriverStorageClassArrayOutput)
}

// TLSCertSecret is the name of the TLS Cert secret
func (o CSIUnitySpecDriverPtrOutput) TlsCertSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriver) *string {
		if v == nil {
			return nil
		}
		return v.TlsCertSecret
	}).(pulumi.StringPtrOutput)
}

// Common is the common specification for both controller and node plugins
type CSIUnitySpecDriverCommon struct {
	// Args is the set of arguments for the container
	Args []string `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs []CSIUnitySpecDriverCommonEnvs `pulumi:"envs"`
	// Image is the image tag for the Container
	Image *string `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name *string `pulumi:"name"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
	NodeSelector map[string]string `pulumi:"nodeSelector"`
	// Tolerations is the list of tolerations for the driver pods
	Tolerations []CSIUnitySpecDriverCommonTolerations `pulumi:"tolerations"`
}

// CSIUnitySpecDriverCommonInput is an input type that accepts CSIUnitySpecDriverCommonArgs and CSIUnitySpecDriverCommonOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverCommonInput` via:
//
//          CSIUnitySpecDriverCommonArgs{...}
type CSIUnitySpecDriverCommonInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverCommonOutput() CSIUnitySpecDriverCommonOutput
	ToCSIUnitySpecDriverCommonOutputWithContext(context.Context) CSIUnitySpecDriverCommonOutput
}

// Common is the common specification for both controller and node plugins
type CSIUnitySpecDriverCommonArgs struct {
	// Args is the set of arguments for the container
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs CSIUnitySpecDriverCommonEnvsArrayInput `pulumi:"envs"`
	// Image is the image tag for the Container
	Image pulumi.StringPtrInput `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name pulumi.StringPtrInput `pulumi:"name"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
	NodeSelector pulumi.StringMapInput `pulumi:"nodeSelector"`
	// Tolerations is the list of tolerations for the driver pods
	Tolerations CSIUnitySpecDriverCommonTolerationsArrayInput `pulumi:"tolerations"`
}

func (CSIUnitySpecDriverCommonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverCommon)(nil)).Elem()
}

func (i CSIUnitySpecDriverCommonArgs) ToCSIUnitySpecDriverCommonOutput() CSIUnitySpecDriverCommonOutput {
	return i.ToCSIUnitySpecDriverCommonOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverCommonArgs) ToCSIUnitySpecDriverCommonOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonOutput)
}

func (i CSIUnitySpecDriverCommonArgs) ToCSIUnitySpecDriverCommonPtrOutput() CSIUnitySpecDriverCommonPtrOutput {
	return i.ToCSIUnitySpecDriverCommonPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverCommonArgs) ToCSIUnitySpecDriverCommonPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonOutput).ToCSIUnitySpecDriverCommonPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverCommonPtrInput is an input type that accepts CSIUnitySpecDriverCommonArgs, CSIUnitySpecDriverCommonPtr and CSIUnitySpecDriverCommonPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverCommonPtrInput` via:
//
//          CSIUnitySpecDriverCommonArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverCommonPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverCommonPtrOutput() CSIUnitySpecDriverCommonPtrOutput
	ToCSIUnitySpecDriverCommonPtrOutputWithContext(context.Context) CSIUnitySpecDriverCommonPtrOutput
}

type csiunitySpecDriverCommonPtrType CSIUnitySpecDriverCommonArgs

func CSIUnitySpecDriverCommonPtr(v *CSIUnitySpecDriverCommonArgs) CSIUnitySpecDriverCommonPtrInput {
	return (*csiunitySpecDriverCommonPtrType)(v)
}

func (*csiunitySpecDriverCommonPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverCommon)(nil)).Elem()
}

func (i *csiunitySpecDriverCommonPtrType) ToCSIUnitySpecDriverCommonPtrOutput() CSIUnitySpecDriverCommonPtrOutput {
	return i.ToCSIUnitySpecDriverCommonPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverCommonPtrType) ToCSIUnitySpecDriverCommonPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonPtrOutput)
}

// Common is the common specification for both controller and node plugins
type CSIUnitySpecDriverCommonOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverCommonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverCommon)(nil)).Elem()
}

func (o CSIUnitySpecDriverCommonOutput) ToCSIUnitySpecDriverCommonOutput() CSIUnitySpecDriverCommonOutput {
	return o
}

func (o CSIUnitySpecDriverCommonOutput) ToCSIUnitySpecDriverCommonOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonOutput {
	return o
}

func (o CSIUnitySpecDriverCommonOutput) ToCSIUnitySpecDriverCommonPtrOutput() CSIUnitySpecDriverCommonPtrOutput {
	return o.ToCSIUnitySpecDriverCommonPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverCommonOutput) ToCSIUnitySpecDriverCommonPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommon) *CSIUnitySpecDriverCommon {
		return &v
	}).(CSIUnitySpecDriverCommonPtrOutput)
}

// Args is the set of arguments for the container
func (o CSIUnitySpecDriverCommonOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommon) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIUnitySpecDriverCommonOutput) Envs() CSIUnitySpecDriverCommonEnvsArrayOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommon) []CSIUnitySpecDriverCommonEnvs { return v.Envs }).(CSIUnitySpecDriverCommonEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIUnitySpecDriverCommonOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommon) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIUnitySpecDriverCommonOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommon) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIUnitySpecDriverCommonOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommon) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
func (o CSIUnitySpecDriverCommonOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommon) map[string]string { return v.NodeSelector }).(pulumi.StringMapOutput)
}

// Tolerations is the list of tolerations for the driver pods
func (o CSIUnitySpecDriverCommonOutput) Tolerations() CSIUnitySpecDriverCommonTolerationsArrayOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommon) []CSIUnitySpecDriverCommonTolerations { return v.Tolerations }).(CSIUnitySpecDriverCommonTolerationsArrayOutput)
}

type CSIUnitySpecDriverCommonPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverCommonPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverCommon)(nil)).Elem()
}

func (o CSIUnitySpecDriverCommonPtrOutput) ToCSIUnitySpecDriverCommonPtrOutput() CSIUnitySpecDriverCommonPtrOutput {
	return o
}

func (o CSIUnitySpecDriverCommonPtrOutput) ToCSIUnitySpecDriverCommonPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonPtrOutput {
	return o
}

func (o CSIUnitySpecDriverCommonPtrOutput) Elem() CSIUnitySpecDriverCommonOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommon) CSIUnitySpecDriverCommon { return *v }).(CSIUnitySpecDriverCommonOutput)
}

// Args is the set of arguments for the container
func (o CSIUnitySpecDriverCommonPtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommon) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIUnitySpecDriverCommonPtrOutput) Envs() CSIUnitySpecDriverCommonEnvsArrayOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommon) []CSIUnitySpecDriverCommonEnvs {
		if v == nil {
			return nil
		}
		return v.Envs
	}).(CSIUnitySpecDriverCommonEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIUnitySpecDriverCommonPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommon) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIUnitySpecDriverCommonPtrOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommon) *string {
		if v == nil {
			return nil
		}
		return v.ImagePullPolicy
	}).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIUnitySpecDriverCommonPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommon) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
func (o CSIUnitySpecDriverCommonPtrOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommon) map[string]string {
		if v == nil {
			return nil
		}
		return v.NodeSelector
	}).(pulumi.StringMapOutput)
}

// Tolerations is the list of tolerations for the driver pods
func (o CSIUnitySpecDriverCommonPtrOutput) Tolerations() CSIUnitySpecDriverCommonTolerationsArrayOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommon) []CSIUnitySpecDriverCommonTolerations {
		if v == nil {
			return nil
		}
		return v.Tolerations
	}).(CSIUnitySpecDriverCommonTolerationsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIUnitySpecDriverCommonEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *CSIUnitySpecDriverCommonEnvsValueFrom `pulumi:"valueFrom"`
}

// CSIUnitySpecDriverCommonEnvsInput is an input type that accepts CSIUnitySpecDriverCommonEnvsArgs and CSIUnitySpecDriverCommonEnvsOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverCommonEnvsInput` via:
//
//          CSIUnitySpecDriverCommonEnvsArgs{...}
type CSIUnitySpecDriverCommonEnvsInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverCommonEnvsOutput() CSIUnitySpecDriverCommonEnvsOutput
	ToCSIUnitySpecDriverCommonEnvsOutputWithContext(context.Context) CSIUnitySpecDriverCommonEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type CSIUnitySpecDriverCommonEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom CSIUnitySpecDriverCommonEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (CSIUnitySpecDriverCommonEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverCommonEnvs)(nil)).Elem()
}

func (i CSIUnitySpecDriverCommonEnvsArgs) ToCSIUnitySpecDriverCommonEnvsOutput() CSIUnitySpecDriverCommonEnvsOutput {
	return i.ToCSIUnitySpecDriverCommonEnvsOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverCommonEnvsArgs) ToCSIUnitySpecDriverCommonEnvsOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonEnvsOutput)
}

// CSIUnitySpecDriverCommonEnvsArrayInput is an input type that accepts CSIUnitySpecDriverCommonEnvsArray and CSIUnitySpecDriverCommonEnvsArrayOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverCommonEnvsArrayInput` via:
//
//          CSIUnitySpecDriverCommonEnvsArray{ CSIUnitySpecDriverCommonEnvsArgs{...} }
type CSIUnitySpecDriverCommonEnvsArrayInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverCommonEnvsArrayOutput() CSIUnitySpecDriverCommonEnvsArrayOutput
	ToCSIUnitySpecDriverCommonEnvsArrayOutputWithContext(context.Context) CSIUnitySpecDriverCommonEnvsArrayOutput
}

type CSIUnitySpecDriverCommonEnvsArray []CSIUnitySpecDriverCommonEnvsInput

func (CSIUnitySpecDriverCommonEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIUnitySpecDriverCommonEnvs)(nil)).Elem()
}

func (i CSIUnitySpecDriverCommonEnvsArray) ToCSIUnitySpecDriverCommonEnvsArrayOutput() CSIUnitySpecDriverCommonEnvsArrayOutput {
	return i.ToCSIUnitySpecDriverCommonEnvsArrayOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverCommonEnvsArray) ToCSIUnitySpecDriverCommonEnvsArrayOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIUnitySpecDriverCommonEnvsOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverCommonEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverCommonEnvs)(nil)).Elem()
}

func (o CSIUnitySpecDriverCommonEnvsOutput) ToCSIUnitySpecDriverCommonEnvsOutput() CSIUnitySpecDriverCommonEnvsOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsOutput) ToCSIUnitySpecDriverCommonEnvsOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o CSIUnitySpecDriverCommonEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o CSIUnitySpecDriverCommonEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o CSIUnitySpecDriverCommonEnvsOutput) ValueFrom() CSIUnitySpecDriverCommonEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvs) *CSIUnitySpecDriverCommonEnvsValueFrom { return v.ValueFrom }).(CSIUnitySpecDriverCommonEnvsValueFromPtrOutput)
}

type CSIUnitySpecDriverCommonEnvsArrayOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverCommonEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIUnitySpecDriverCommonEnvs)(nil)).Elem()
}

func (o CSIUnitySpecDriverCommonEnvsArrayOutput) ToCSIUnitySpecDriverCommonEnvsArrayOutput() CSIUnitySpecDriverCommonEnvsArrayOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsArrayOutput) ToCSIUnitySpecDriverCommonEnvsArrayOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsArrayOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsArrayOutput) Index(i pulumi.IntInput) CSIUnitySpecDriverCommonEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIUnitySpecDriverCommonEnvs {
		return vs[0].([]CSIUnitySpecDriverCommonEnvs)[vs[1].(int)]
	}).(CSIUnitySpecDriverCommonEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIUnitySpecDriverCommonEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef *CSIUnitySpecDriverCommonEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// CSIUnitySpecDriverCommonEnvsValueFromInput is an input type that accepts CSIUnitySpecDriverCommonEnvsValueFromArgs and CSIUnitySpecDriverCommonEnvsValueFromOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverCommonEnvsValueFromInput` via:
//
//          CSIUnitySpecDriverCommonEnvsValueFromArgs{...}
type CSIUnitySpecDriverCommonEnvsValueFromInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverCommonEnvsValueFromOutput() CSIUnitySpecDriverCommonEnvsValueFromOutput
	ToCSIUnitySpecDriverCommonEnvsValueFromOutputWithContext(context.Context) CSIUnitySpecDriverCommonEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIUnitySpecDriverCommonEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (CSIUnitySpecDriverCommonEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverCommonEnvsValueFrom)(nil)).Elem()
}

func (i CSIUnitySpecDriverCommonEnvsValueFromArgs) ToCSIUnitySpecDriverCommonEnvsValueFromOutput() CSIUnitySpecDriverCommonEnvsValueFromOutput {
	return i.ToCSIUnitySpecDriverCommonEnvsValueFromOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverCommonEnvsValueFromArgs) ToCSIUnitySpecDriverCommonEnvsValueFromOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonEnvsValueFromOutput)
}

func (i CSIUnitySpecDriverCommonEnvsValueFromArgs) ToCSIUnitySpecDriverCommonEnvsValueFromPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromPtrOutput {
	return i.ToCSIUnitySpecDriverCommonEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverCommonEnvsValueFromArgs) ToCSIUnitySpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonEnvsValueFromOutput).ToCSIUnitySpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverCommonEnvsValueFromPtrInput is an input type that accepts CSIUnitySpecDriverCommonEnvsValueFromArgs, CSIUnitySpecDriverCommonEnvsValueFromPtr and CSIUnitySpecDriverCommonEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverCommonEnvsValueFromPtrInput` via:
//
//          CSIUnitySpecDriverCommonEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverCommonEnvsValueFromPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverCommonEnvsValueFromPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromPtrOutput
	ToCSIUnitySpecDriverCommonEnvsValueFromPtrOutputWithContext(context.Context) CSIUnitySpecDriverCommonEnvsValueFromPtrOutput
}

type csiunitySpecDriverCommonEnvsValueFromPtrType CSIUnitySpecDriverCommonEnvsValueFromArgs

func CSIUnitySpecDriverCommonEnvsValueFromPtr(v *CSIUnitySpecDriverCommonEnvsValueFromArgs) CSIUnitySpecDriverCommonEnvsValueFromPtrInput {
	return (*csiunitySpecDriverCommonEnvsValueFromPtrType)(v)
}

func (*csiunitySpecDriverCommonEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverCommonEnvsValueFrom)(nil)).Elem()
}

func (i *csiunitySpecDriverCommonEnvsValueFromPtrType) ToCSIUnitySpecDriverCommonEnvsValueFromPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromPtrOutput {
	return i.ToCSIUnitySpecDriverCommonEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverCommonEnvsValueFromPtrType) ToCSIUnitySpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIUnitySpecDriverCommonEnvsValueFromOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverCommonEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverCommonEnvsValueFrom)(nil)).Elem()
}

func (o CSIUnitySpecDriverCommonEnvsValueFromOutput) ToCSIUnitySpecDriverCommonEnvsValueFromOutput() CSIUnitySpecDriverCommonEnvsValueFromOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromOutput) ToCSIUnitySpecDriverCommonEnvsValueFromOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromOutput) ToCSIUnitySpecDriverCommonEnvsValueFromPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromPtrOutput {
	return o.ToCSIUnitySpecDriverCommonEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverCommonEnvsValueFromOutput) ToCSIUnitySpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvsValueFrom) *CSIUnitySpecDriverCommonEnvsValueFrom {
		return &v
	}).(CSIUnitySpecDriverCommonEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o CSIUnitySpecDriverCommonEnvsValueFromOutput) ConfigMapKeyRef() CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvsValueFrom) *CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o CSIUnitySpecDriverCommonEnvsValueFromOutput) FieldRef() CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvsValueFrom) *CSIUnitySpecDriverCommonEnvsValueFromFieldRef {
		return v.FieldRef
	}).(CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIUnitySpecDriverCommonEnvsValueFromOutput) ResourceFieldRef() CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvsValueFrom) *CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIUnitySpecDriverCommonEnvsValueFromOutput) SecretKeyRef() CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvsValueFrom) *CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput)
}

type CSIUnitySpecDriverCommonEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverCommonEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverCommonEnvsValueFrom)(nil)).Elem()
}

func (o CSIUnitySpecDriverCommonEnvsValueFromPtrOutput) ToCSIUnitySpecDriverCommonEnvsValueFromPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromPtrOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromPtrOutput) ToCSIUnitySpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromPtrOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromPtrOutput) Elem() CSIUnitySpecDriverCommonEnvsValueFromOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommonEnvsValueFrom) CSIUnitySpecDriverCommonEnvsValueFrom { return *v }).(CSIUnitySpecDriverCommonEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o CSIUnitySpecDriverCommonEnvsValueFromPtrOutput) ConfigMapKeyRef() CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommonEnvsValueFrom) *CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o CSIUnitySpecDriverCommonEnvsValueFromPtrOutput) FieldRef() CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommonEnvsValueFrom) *CSIUnitySpecDriverCommonEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIUnitySpecDriverCommonEnvsValueFromPtrOutput) ResourceFieldRef() CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommonEnvsValueFrom) *CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIUnitySpecDriverCommonEnvsValueFromPtrOutput) SecretKeyRef() CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommonEnvsValueFrom) *CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefInput is an input type that accepts CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefArgs and CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefInput` via:
//
//          CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefArgs{...}
type CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput() CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput
	ToCSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ToCSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput() CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return i.ToCSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ToCSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput)
}

func (i CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ToCSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ToCSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput).ToCSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefArgs, CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtr and CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput
	ToCSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput
}

type csiunitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefArgs

func CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtr(v *CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput {
	return (*csiunitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*csiunitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *csiunitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType) ToCSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType) ToCSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ToCSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput() CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ToCSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ToCSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToCSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ToCSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRef) *CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRef {
		return &v
	}).(CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) Elem() CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRef) CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRef {
		return *v
	}).(CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIUnitySpecDriverCommonEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// CSIUnitySpecDriverCommonEnvsValueFromFieldRefInput is an input type that accepts CSIUnitySpecDriverCommonEnvsValueFromFieldRefArgs and CSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverCommonEnvsValueFromFieldRefInput` via:
//
//          CSIUnitySpecDriverCommonEnvsValueFromFieldRefArgs{...}
type CSIUnitySpecDriverCommonEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput() CSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput
	ToCSIUnitySpecDriverCommonEnvsValueFromFieldRefOutputWithContext(context.Context) CSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIUnitySpecDriverCommonEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (CSIUnitySpecDriverCommonEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverCommonEnvsValueFromFieldRef)(nil)).Elem()
}

func (i CSIUnitySpecDriverCommonEnvsValueFromFieldRefArgs) ToCSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput() CSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput {
	return i.ToCSIUnitySpecDriverCommonEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverCommonEnvsValueFromFieldRefArgs) ToCSIUnitySpecDriverCommonEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput)
}

func (i CSIUnitySpecDriverCommonEnvsValueFromFieldRefArgs) ToCSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverCommonEnvsValueFromFieldRefArgs) ToCSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput).ToCSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrInput is an input type that accepts CSIUnitySpecDriverCommonEnvsValueFromFieldRefArgs, CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtr and CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrInput` via:
//
//          CSIUnitySpecDriverCommonEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput
	ToCSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(context.Context) CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput
}

type csiunitySpecDriverCommonEnvsValueFromFieldRefPtrType CSIUnitySpecDriverCommonEnvsValueFromFieldRefArgs

func CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtr(v *CSIUnitySpecDriverCommonEnvsValueFromFieldRefArgs) CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrInput {
	return (*csiunitySpecDriverCommonEnvsValueFromFieldRefPtrType)(v)
}

func (*csiunitySpecDriverCommonEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverCommonEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *csiunitySpecDriverCommonEnvsValueFromFieldRefPtrType) ToCSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverCommonEnvsValueFromFieldRefPtrType) ToCSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverCommonEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput) ToCSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput() CSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput) ToCSIUnitySpecDriverCommonEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput) ToCSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o.ToCSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput) ToCSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvsValueFromFieldRef) *CSIUnitySpecDriverCommonEnvsValueFromFieldRef {
		return &v
	}).(CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverCommonEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput) ToCSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput) ToCSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput) Elem() CSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommonEnvsValueFromFieldRef) CSIUnitySpecDriverCommonEnvsValueFromFieldRef {
		return *v
	}).(CSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommonEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommonEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisor `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefInput is an input type that accepts CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefArgs and CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefInput` via:
//
//          CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefArgs{...}
type CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput() CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput
	ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutputWithContext(context.Context) CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefArgs) ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput() CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return i.ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefArgs) ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput)
}

func (i CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefArgs) ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefArgs) ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput).ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrInput is an input type that accepts CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefArgs, CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtr and CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrInput` via:
//
//          CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput
	ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput
}

type csiunitySpecDriverCommonEnvsValueFromResourceFieldRefPtrType CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefArgs

func CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtr(v *CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefArgs) CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrInput {
	return (*csiunitySpecDriverCommonEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*csiunitySpecDriverCommonEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *csiunitySpecDriverCommonEnvsValueFromResourceFieldRefPtrType) ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverCommonEnvsValueFromResourceFieldRefPtrType) ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput) ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput() CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput) ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput) ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput) ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRef) *CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRef {
		return &v
	}).(CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput) Divisor() CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRef) *CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisor {
		return v.Divisor
	}).(CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) Elem() CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRef) CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRef {
		return *v
	}).(CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) Divisor() CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRef) *CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisor {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

type CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisor struct {
}

// CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorInput is an input type that accepts CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs and CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorInput` via:
//
//          CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs{...}
type CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput() CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput
	ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Context) CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput
}

type CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs struct {
}

func (CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs) ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput() CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput {
	return i.ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs) ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput)
}

func (i CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs) ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs) ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput).ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrInput is an input type that accepts CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs, CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtr and CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrInput` via:
//
//          CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput
	ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Context) CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput
}

type csiunitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrType CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs

func CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtr(v *CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs) CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrInput {
	return (*csiunitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrType)(v)
}

func (*csiunitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i *csiunitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrType) ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrType) ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput) ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput() CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput) ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput) ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput) ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisor) *CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisor {
		return &v
	}).(CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput) ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput) ToCSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput) Elem() CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisor) CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisor {
		return *v
	}).(CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefInput is an input type that accepts CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefArgs and CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefInput` via:
//
//          CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefArgs{...}
type CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput() CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput
	ToCSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutputWithContext(context.Context) CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefArgs) ToCSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput() CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return i.ToCSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefArgs) ToCSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput)
}

func (i CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefArgs) ToCSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefArgs) ToCSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput).ToCSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrInput is an input type that accepts CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefArgs, CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtr and CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrInput` via:
//
//          CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput
	ToCSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput
}

type csiunitySpecDriverCommonEnvsValueFromSecretKeyRefPtrType CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefArgs

func CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtr(v *CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefArgs) CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrInput {
	return (*csiunitySpecDriverCommonEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*csiunitySpecDriverCommonEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *csiunitySpecDriverCommonEnvsValueFromSecretKeyRefPtrType) ToCSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverCommonEnvsValueFromSecretKeyRefPtrType) ToCSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput) ToCSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput() CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput) ToCSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput) ToCSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToCSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput) ToCSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRef) *CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRef {
		return &v
	}).(CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) ToCSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) ToCSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) Elem() CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRef) CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRef {
		return *v
	}).(CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIUnitySpecDriverCommonNodeSelector struct {
}

// CSIUnitySpecDriverCommonNodeSelectorInput is an input type that accepts CSIUnitySpecDriverCommonNodeSelectorArgs and CSIUnitySpecDriverCommonNodeSelectorOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverCommonNodeSelectorInput` via:
//
//          CSIUnitySpecDriverCommonNodeSelectorArgs{...}
type CSIUnitySpecDriverCommonNodeSelectorInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverCommonNodeSelectorOutput() CSIUnitySpecDriverCommonNodeSelectorOutput
	ToCSIUnitySpecDriverCommonNodeSelectorOutputWithContext(context.Context) CSIUnitySpecDriverCommonNodeSelectorOutput
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIUnitySpecDriverCommonNodeSelectorArgs struct {
}

func (CSIUnitySpecDriverCommonNodeSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverCommonNodeSelector)(nil)).Elem()
}

func (i CSIUnitySpecDriverCommonNodeSelectorArgs) ToCSIUnitySpecDriverCommonNodeSelectorOutput() CSIUnitySpecDriverCommonNodeSelectorOutput {
	return i.ToCSIUnitySpecDriverCommonNodeSelectorOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverCommonNodeSelectorArgs) ToCSIUnitySpecDriverCommonNodeSelectorOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonNodeSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonNodeSelectorOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIUnitySpecDriverCommonNodeSelectorOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverCommonNodeSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverCommonNodeSelector)(nil)).Elem()
}

func (o CSIUnitySpecDriverCommonNodeSelectorOutput) ToCSIUnitySpecDriverCommonNodeSelectorOutput() CSIUnitySpecDriverCommonNodeSelectorOutput {
	return o
}

func (o CSIUnitySpecDriverCommonNodeSelectorOutput) ToCSIUnitySpecDriverCommonNodeSelectorOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonNodeSelectorOutput {
	return o
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIUnitySpecDriverCommonTolerations struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect *string `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key *string `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator *string `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds *int `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value *string `pulumi:"value"`
}

// CSIUnitySpecDriverCommonTolerationsInput is an input type that accepts CSIUnitySpecDriverCommonTolerationsArgs and CSIUnitySpecDriverCommonTolerationsOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverCommonTolerationsInput` via:
//
//          CSIUnitySpecDriverCommonTolerationsArgs{...}
type CSIUnitySpecDriverCommonTolerationsInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverCommonTolerationsOutput() CSIUnitySpecDriverCommonTolerationsOutput
	ToCSIUnitySpecDriverCommonTolerationsOutputWithContext(context.Context) CSIUnitySpecDriverCommonTolerationsOutput
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIUnitySpecDriverCommonTolerationsArgs struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect pulumi.StringPtrInput `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds pulumi.IntPtrInput `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (CSIUnitySpecDriverCommonTolerationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverCommonTolerations)(nil)).Elem()
}

func (i CSIUnitySpecDriverCommonTolerationsArgs) ToCSIUnitySpecDriverCommonTolerationsOutput() CSIUnitySpecDriverCommonTolerationsOutput {
	return i.ToCSIUnitySpecDriverCommonTolerationsOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverCommonTolerationsArgs) ToCSIUnitySpecDriverCommonTolerationsOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonTolerationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonTolerationsOutput)
}

// CSIUnitySpecDriverCommonTolerationsArrayInput is an input type that accepts CSIUnitySpecDriverCommonTolerationsArray and CSIUnitySpecDriverCommonTolerationsArrayOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverCommonTolerationsArrayInput` via:
//
//          CSIUnitySpecDriverCommonTolerationsArray{ CSIUnitySpecDriverCommonTolerationsArgs{...} }
type CSIUnitySpecDriverCommonTolerationsArrayInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverCommonTolerationsArrayOutput() CSIUnitySpecDriverCommonTolerationsArrayOutput
	ToCSIUnitySpecDriverCommonTolerationsArrayOutputWithContext(context.Context) CSIUnitySpecDriverCommonTolerationsArrayOutput
}

type CSIUnitySpecDriverCommonTolerationsArray []CSIUnitySpecDriverCommonTolerationsInput

func (CSIUnitySpecDriverCommonTolerationsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIUnitySpecDriverCommonTolerations)(nil)).Elem()
}

func (i CSIUnitySpecDriverCommonTolerationsArray) ToCSIUnitySpecDriverCommonTolerationsArrayOutput() CSIUnitySpecDriverCommonTolerationsArrayOutput {
	return i.ToCSIUnitySpecDriverCommonTolerationsArrayOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverCommonTolerationsArray) ToCSIUnitySpecDriverCommonTolerationsArrayOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonTolerationsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverCommonTolerationsArrayOutput)
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIUnitySpecDriverCommonTolerationsOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverCommonTolerationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverCommonTolerations)(nil)).Elem()
}

func (o CSIUnitySpecDriverCommonTolerationsOutput) ToCSIUnitySpecDriverCommonTolerationsOutput() CSIUnitySpecDriverCommonTolerationsOutput {
	return o
}

func (o CSIUnitySpecDriverCommonTolerationsOutput) ToCSIUnitySpecDriverCommonTolerationsOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonTolerationsOutput {
	return o
}

// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
func (o CSIUnitySpecDriverCommonTolerationsOutput) Effect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonTolerations) *string { return v.Effect }).(pulumi.StringPtrOutput)
}

// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
func (o CSIUnitySpecDriverCommonTolerationsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonTolerations) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
func (o CSIUnitySpecDriverCommonTolerationsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonTolerations) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
func (o CSIUnitySpecDriverCommonTolerationsOutput) TolerationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonTolerations) *int { return v.TolerationSeconds }).(pulumi.IntPtrOutput)
}

// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
func (o CSIUnitySpecDriverCommonTolerationsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverCommonTolerations) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type CSIUnitySpecDriverCommonTolerationsArrayOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverCommonTolerationsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIUnitySpecDriverCommonTolerations)(nil)).Elem()
}

func (o CSIUnitySpecDriverCommonTolerationsArrayOutput) ToCSIUnitySpecDriverCommonTolerationsArrayOutput() CSIUnitySpecDriverCommonTolerationsArrayOutput {
	return o
}

func (o CSIUnitySpecDriverCommonTolerationsArrayOutput) ToCSIUnitySpecDriverCommonTolerationsArrayOutputWithContext(ctx context.Context) CSIUnitySpecDriverCommonTolerationsArrayOutput {
	return o
}

func (o CSIUnitySpecDriverCommonTolerationsArrayOutput) Index(i pulumi.IntInput) CSIUnitySpecDriverCommonTolerationsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIUnitySpecDriverCommonTolerations {
		return vs[0].([]CSIUnitySpecDriverCommonTolerations)[vs[1].(int)]
	}).(CSIUnitySpecDriverCommonTolerationsOutput)
}

// Controller is the specification for Controller plugin only
type CSIUnitySpecDriverController struct {
	// Args is the set of arguments for the container
	Args []string `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs []CSIUnitySpecDriverControllerEnvs `pulumi:"envs"`
	// Image is the image tag for the Container
	Image *string `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name *string `pulumi:"name"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
	NodeSelector map[string]string `pulumi:"nodeSelector"`
	// Tolerations is the list of tolerations for the driver pods
	Tolerations []CSIUnitySpecDriverControllerTolerations `pulumi:"tolerations"`
}

// CSIUnitySpecDriverControllerInput is an input type that accepts CSIUnitySpecDriverControllerArgs and CSIUnitySpecDriverControllerOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverControllerInput` via:
//
//          CSIUnitySpecDriverControllerArgs{...}
type CSIUnitySpecDriverControllerInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverControllerOutput() CSIUnitySpecDriverControllerOutput
	ToCSIUnitySpecDriverControllerOutputWithContext(context.Context) CSIUnitySpecDriverControllerOutput
}

// Controller is the specification for Controller plugin only
type CSIUnitySpecDriverControllerArgs struct {
	// Args is the set of arguments for the container
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs CSIUnitySpecDriverControllerEnvsArrayInput `pulumi:"envs"`
	// Image is the image tag for the Container
	Image pulumi.StringPtrInput `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name pulumi.StringPtrInput `pulumi:"name"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
	NodeSelector pulumi.StringMapInput `pulumi:"nodeSelector"`
	// Tolerations is the list of tolerations for the driver pods
	Tolerations CSIUnitySpecDriverControllerTolerationsArrayInput `pulumi:"tolerations"`
}

func (CSIUnitySpecDriverControllerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverController)(nil)).Elem()
}

func (i CSIUnitySpecDriverControllerArgs) ToCSIUnitySpecDriverControllerOutput() CSIUnitySpecDriverControllerOutput {
	return i.ToCSIUnitySpecDriverControllerOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverControllerArgs) ToCSIUnitySpecDriverControllerOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerOutput)
}

func (i CSIUnitySpecDriverControllerArgs) ToCSIUnitySpecDriverControllerPtrOutput() CSIUnitySpecDriverControllerPtrOutput {
	return i.ToCSIUnitySpecDriverControllerPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverControllerArgs) ToCSIUnitySpecDriverControllerPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerOutput).ToCSIUnitySpecDriverControllerPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverControllerPtrInput is an input type that accepts CSIUnitySpecDriverControllerArgs, CSIUnitySpecDriverControllerPtr and CSIUnitySpecDriverControllerPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverControllerPtrInput` via:
//
//          CSIUnitySpecDriverControllerArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverControllerPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverControllerPtrOutput() CSIUnitySpecDriverControllerPtrOutput
	ToCSIUnitySpecDriverControllerPtrOutputWithContext(context.Context) CSIUnitySpecDriverControllerPtrOutput
}

type csiunitySpecDriverControllerPtrType CSIUnitySpecDriverControllerArgs

func CSIUnitySpecDriverControllerPtr(v *CSIUnitySpecDriverControllerArgs) CSIUnitySpecDriverControllerPtrInput {
	return (*csiunitySpecDriverControllerPtrType)(v)
}

func (*csiunitySpecDriverControllerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverController)(nil)).Elem()
}

func (i *csiunitySpecDriverControllerPtrType) ToCSIUnitySpecDriverControllerPtrOutput() CSIUnitySpecDriverControllerPtrOutput {
	return i.ToCSIUnitySpecDriverControllerPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverControllerPtrType) ToCSIUnitySpecDriverControllerPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerPtrOutput)
}

// Controller is the specification for Controller plugin only
type CSIUnitySpecDriverControllerOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverControllerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverController)(nil)).Elem()
}

func (o CSIUnitySpecDriverControllerOutput) ToCSIUnitySpecDriverControllerOutput() CSIUnitySpecDriverControllerOutput {
	return o
}

func (o CSIUnitySpecDriverControllerOutput) ToCSIUnitySpecDriverControllerOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerOutput {
	return o
}

func (o CSIUnitySpecDriverControllerOutput) ToCSIUnitySpecDriverControllerPtrOutput() CSIUnitySpecDriverControllerPtrOutput {
	return o.ToCSIUnitySpecDriverControllerPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverControllerOutput) ToCSIUnitySpecDriverControllerPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverController) *CSIUnitySpecDriverController {
		return &v
	}).(CSIUnitySpecDriverControllerPtrOutput)
}

// Args is the set of arguments for the container
func (o CSIUnitySpecDriverControllerOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverController) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIUnitySpecDriverControllerOutput) Envs() CSIUnitySpecDriverControllerEnvsArrayOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverController) []CSIUnitySpecDriverControllerEnvs { return v.Envs }).(CSIUnitySpecDriverControllerEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIUnitySpecDriverControllerOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverController) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIUnitySpecDriverControllerOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverController) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIUnitySpecDriverControllerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverController) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
func (o CSIUnitySpecDriverControllerOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverController) map[string]string { return v.NodeSelector }).(pulumi.StringMapOutput)
}

// Tolerations is the list of tolerations for the driver pods
func (o CSIUnitySpecDriverControllerOutput) Tolerations() CSIUnitySpecDriverControllerTolerationsArrayOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverController) []CSIUnitySpecDriverControllerTolerations { return v.Tolerations }).(CSIUnitySpecDriverControllerTolerationsArrayOutput)
}

type CSIUnitySpecDriverControllerPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverControllerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverController)(nil)).Elem()
}

func (o CSIUnitySpecDriverControllerPtrOutput) ToCSIUnitySpecDriverControllerPtrOutput() CSIUnitySpecDriverControllerPtrOutput {
	return o
}

func (o CSIUnitySpecDriverControllerPtrOutput) ToCSIUnitySpecDriverControllerPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerPtrOutput {
	return o
}

func (o CSIUnitySpecDriverControllerPtrOutput) Elem() CSIUnitySpecDriverControllerOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverController) CSIUnitySpecDriverController { return *v }).(CSIUnitySpecDriverControllerOutput)
}

// Args is the set of arguments for the container
func (o CSIUnitySpecDriverControllerPtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverController) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIUnitySpecDriverControllerPtrOutput) Envs() CSIUnitySpecDriverControllerEnvsArrayOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverController) []CSIUnitySpecDriverControllerEnvs {
		if v == nil {
			return nil
		}
		return v.Envs
	}).(CSIUnitySpecDriverControllerEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIUnitySpecDriverControllerPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverController) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIUnitySpecDriverControllerPtrOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverController) *string {
		if v == nil {
			return nil
		}
		return v.ImagePullPolicy
	}).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIUnitySpecDriverControllerPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverController) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
func (o CSIUnitySpecDriverControllerPtrOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverController) map[string]string {
		if v == nil {
			return nil
		}
		return v.NodeSelector
	}).(pulumi.StringMapOutput)
}

// Tolerations is the list of tolerations for the driver pods
func (o CSIUnitySpecDriverControllerPtrOutput) Tolerations() CSIUnitySpecDriverControllerTolerationsArrayOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverController) []CSIUnitySpecDriverControllerTolerations {
		if v == nil {
			return nil
		}
		return v.Tolerations
	}).(CSIUnitySpecDriverControllerTolerationsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIUnitySpecDriverControllerEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *CSIUnitySpecDriverControllerEnvsValueFrom `pulumi:"valueFrom"`
}

// CSIUnitySpecDriverControllerEnvsInput is an input type that accepts CSIUnitySpecDriverControllerEnvsArgs and CSIUnitySpecDriverControllerEnvsOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverControllerEnvsInput` via:
//
//          CSIUnitySpecDriverControllerEnvsArgs{...}
type CSIUnitySpecDriverControllerEnvsInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverControllerEnvsOutput() CSIUnitySpecDriverControllerEnvsOutput
	ToCSIUnitySpecDriverControllerEnvsOutputWithContext(context.Context) CSIUnitySpecDriverControllerEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type CSIUnitySpecDriverControllerEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom CSIUnitySpecDriverControllerEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (CSIUnitySpecDriverControllerEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverControllerEnvs)(nil)).Elem()
}

func (i CSIUnitySpecDriverControllerEnvsArgs) ToCSIUnitySpecDriverControllerEnvsOutput() CSIUnitySpecDriverControllerEnvsOutput {
	return i.ToCSIUnitySpecDriverControllerEnvsOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverControllerEnvsArgs) ToCSIUnitySpecDriverControllerEnvsOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerEnvsOutput)
}

// CSIUnitySpecDriverControllerEnvsArrayInput is an input type that accepts CSIUnitySpecDriverControllerEnvsArray and CSIUnitySpecDriverControllerEnvsArrayOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverControllerEnvsArrayInput` via:
//
//          CSIUnitySpecDriverControllerEnvsArray{ CSIUnitySpecDriverControllerEnvsArgs{...} }
type CSIUnitySpecDriverControllerEnvsArrayInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverControllerEnvsArrayOutput() CSIUnitySpecDriverControllerEnvsArrayOutput
	ToCSIUnitySpecDriverControllerEnvsArrayOutputWithContext(context.Context) CSIUnitySpecDriverControllerEnvsArrayOutput
}

type CSIUnitySpecDriverControllerEnvsArray []CSIUnitySpecDriverControllerEnvsInput

func (CSIUnitySpecDriverControllerEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIUnitySpecDriverControllerEnvs)(nil)).Elem()
}

func (i CSIUnitySpecDriverControllerEnvsArray) ToCSIUnitySpecDriverControllerEnvsArrayOutput() CSIUnitySpecDriverControllerEnvsArrayOutput {
	return i.ToCSIUnitySpecDriverControllerEnvsArrayOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverControllerEnvsArray) ToCSIUnitySpecDriverControllerEnvsArrayOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIUnitySpecDriverControllerEnvsOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverControllerEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverControllerEnvs)(nil)).Elem()
}

func (o CSIUnitySpecDriverControllerEnvsOutput) ToCSIUnitySpecDriverControllerEnvsOutput() CSIUnitySpecDriverControllerEnvsOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsOutput) ToCSIUnitySpecDriverControllerEnvsOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o CSIUnitySpecDriverControllerEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o CSIUnitySpecDriverControllerEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o CSIUnitySpecDriverControllerEnvsOutput) ValueFrom() CSIUnitySpecDriverControllerEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvs) *CSIUnitySpecDriverControllerEnvsValueFrom {
		return v.ValueFrom
	}).(CSIUnitySpecDriverControllerEnvsValueFromPtrOutput)
}

type CSIUnitySpecDriverControllerEnvsArrayOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverControllerEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIUnitySpecDriverControllerEnvs)(nil)).Elem()
}

func (o CSIUnitySpecDriverControllerEnvsArrayOutput) ToCSIUnitySpecDriverControllerEnvsArrayOutput() CSIUnitySpecDriverControllerEnvsArrayOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsArrayOutput) ToCSIUnitySpecDriverControllerEnvsArrayOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsArrayOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsArrayOutput) Index(i pulumi.IntInput) CSIUnitySpecDriverControllerEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIUnitySpecDriverControllerEnvs {
		return vs[0].([]CSIUnitySpecDriverControllerEnvs)[vs[1].(int)]
	}).(CSIUnitySpecDriverControllerEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIUnitySpecDriverControllerEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef *CSIUnitySpecDriverControllerEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// CSIUnitySpecDriverControllerEnvsValueFromInput is an input type that accepts CSIUnitySpecDriverControllerEnvsValueFromArgs and CSIUnitySpecDriverControllerEnvsValueFromOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverControllerEnvsValueFromInput` via:
//
//          CSIUnitySpecDriverControllerEnvsValueFromArgs{...}
type CSIUnitySpecDriverControllerEnvsValueFromInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverControllerEnvsValueFromOutput() CSIUnitySpecDriverControllerEnvsValueFromOutput
	ToCSIUnitySpecDriverControllerEnvsValueFromOutputWithContext(context.Context) CSIUnitySpecDriverControllerEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIUnitySpecDriverControllerEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (CSIUnitySpecDriverControllerEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverControllerEnvsValueFrom)(nil)).Elem()
}

func (i CSIUnitySpecDriverControllerEnvsValueFromArgs) ToCSIUnitySpecDriverControllerEnvsValueFromOutput() CSIUnitySpecDriverControllerEnvsValueFromOutput {
	return i.ToCSIUnitySpecDriverControllerEnvsValueFromOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverControllerEnvsValueFromArgs) ToCSIUnitySpecDriverControllerEnvsValueFromOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerEnvsValueFromOutput)
}

func (i CSIUnitySpecDriverControllerEnvsValueFromArgs) ToCSIUnitySpecDriverControllerEnvsValueFromPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromPtrOutput {
	return i.ToCSIUnitySpecDriverControllerEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverControllerEnvsValueFromArgs) ToCSIUnitySpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerEnvsValueFromOutput).ToCSIUnitySpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverControllerEnvsValueFromPtrInput is an input type that accepts CSIUnitySpecDriverControllerEnvsValueFromArgs, CSIUnitySpecDriverControllerEnvsValueFromPtr and CSIUnitySpecDriverControllerEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverControllerEnvsValueFromPtrInput` via:
//
//          CSIUnitySpecDriverControllerEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverControllerEnvsValueFromPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverControllerEnvsValueFromPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromPtrOutput
	ToCSIUnitySpecDriverControllerEnvsValueFromPtrOutputWithContext(context.Context) CSIUnitySpecDriverControllerEnvsValueFromPtrOutput
}

type csiunitySpecDriverControllerEnvsValueFromPtrType CSIUnitySpecDriverControllerEnvsValueFromArgs

func CSIUnitySpecDriverControllerEnvsValueFromPtr(v *CSIUnitySpecDriverControllerEnvsValueFromArgs) CSIUnitySpecDriverControllerEnvsValueFromPtrInput {
	return (*csiunitySpecDriverControllerEnvsValueFromPtrType)(v)
}

func (*csiunitySpecDriverControllerEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverControllerEnvsValueFrom)(nil)).Elem()
}

func (i *csiunitySpecDriverControllerEnvsValueFromPtrType) ToCSIUnitySpecDriverControllerEnvsValueFromPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromPtrOutput {
	return i.ToCSIUnitySpecDriverControllerEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverControllerEnvsValueFromPtrType) ToCSIUnitySpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIUnitySpecDriverControllerEnvsValueFromOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverControllerEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverControllerEnvsValueFrom)(nil)).Elem()
}

func (o CSIUnitySpecDriverControllerEnvsValueFromOutput) ToCSIUnitySpecDriverControllerEnvsValueFromOutput() CSIUnitySpecDriverControllerEnvsValueFromOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromOutput) ToCSIUnitySpecDriverControllerEnvsValueFromOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromOutput) ToCSIUnitySpecDriverControllerEnvsValueFromPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromPtrOutput {
	return o.ToCSIUnitySpecDriverControllerEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverControllerEnvsValueFromOutput) ToCSIUnitySpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvsValueFrom) *CSIUnitySpecDriverControllerEnvsValueFrom {
		return &v
	}).(CSIUnitySpecDriverControllerEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o CSIUnitySpecDriverControllerEnvsValueFromOutput) ConfigMapKeyRef() CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvsValueFrom) *CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o CSIUnitySpecDriverControllerEnvsValueFromOutput) FieldRef() CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvsValueFrom) *CSIUnitySpecDriverControllerEnvsValueFromFieldRef {
		return v.FieldRef
	}).(CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIUnitySpecDriverControllerEnvsValueFromOutput) ResourceFieldRef() CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvsValueFrom) *CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIUnitySpecDriverControllerEnvsValueFromOutput) SecretKeyRef() CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvsValueFrom) *CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput)
}

type CSIUnitySpecDriverControllerEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverControllerEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverControllerEnvsValueFrom)(nil)).Elem()
}

func (o CSIUnitySpecDriverControllerEnvsValueFromPtrOutput) ToCSIUnitySpecDriverControllerEnvsValueFromPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromPtrOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromPtrOutput) ToCSIUnitySpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromPtrOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromPtrOutput) Elem() CSIUnitySpecDriverControllerEnvsValueFromOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverControllerEnvsValueFrom) CSIUnitySpecDriverControllerEnvsValueFrom {
		return *v
	}).(CSIUnitySpecDriverControllerEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o CSIUnitySpecDriverControllerEnvsValueFromPtrOutput) ConfigMapKeyRef() CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverControllerEnvsValueFrom) *CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o CSIUnitySpecDriverControllerEnvsValueFromPtrOutput) FieldRef() CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverControllerEnvsValueFrom) *CSIUnitySpecDriverControllerEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIUnitySpecDriverControllerEnvsValueFromPtrOutput) ResourceFieldRef() CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverControllerEnvsValueFrom) *CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIUnitySpecDriverControllerEnvsValueFromPtrOutput) SecretKeyRef() CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverControllerEnvsValueFrom) *CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefInput is an input type that accepts CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefArgs and CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefInput` via:
//
//          CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefArgs{...}
type CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput() CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput
	ToCSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ToCSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput() CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return i.ToCSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ToCSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput)
}

func (i CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ToCSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ToCSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput).ToCSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefArgs, CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtr and CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput
	ToCSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput
}

type csiunitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefArgs

func CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtr(v *CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput {
	return (*csiunitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*csiunitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *csiunitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType) ToCSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType) ToCSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ToCSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput() CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ToCSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ToCSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToCSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ToCSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRef) *CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRef {
		return &v
	}).(CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) Elem() CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRef) CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRef {
		return *v
	}).(CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIUnitySpecDriverControllerEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// CSIUnitySpecDriverControllerEnvsValueFromFieldRefInput is an input type that accepts CSIUnitySpecDriverControllerEnvsValueFromFieldRefArgs and CSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverControllerEnvsValueFromFieldRefInput` via:
//
//          CSIUnitySpecDriverControllerEnvsValueFromFieldRefArgs{...}
type CSIUnitySpecDriverControllerEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput() CSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput
	ToCSIUnitySpecDriverControllerEnvsValueFromFieldRefOutputWithContext(context.Context) CSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIUnitySpecDriverControllerEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (CSIUnitySpecDriverControllerEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverControllerEnvsValueFromFieldRef)(nil)).Elem()
}

func (i CSIUnitySpecDriverControllerEnvsValueFromFieldRefArgs) ToCSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput() CSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput {
	return i.ToCSIUnitySpecDriverControllerEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverControllerEnvsValueFromFieldRefArgs) ToCSIUnitySpecDriverControllerEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput)
}

func (i CSIUnitySpecDriverControllerEnvsValueFromFieldRefArgs) ToCSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverControllerEnvsValueFromFieldRefArgs) ToCSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput).ToCSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrInput is an input type that accepts CSIUnitySpecDriverControllerEnvsValueFromFieldRefArgs, CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtr and CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrInput` via:
//
//          CSIUnitySpecDriverControllerEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput
	ToCSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(context.Context) CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput
}

type csiunitySpecDriverControllerEnvsValueFromFieldRefPtrType CSIUnitySpecDriverControllerEnvsValueFromFieldRefArgs

func CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtr(v *CSIUnitySpecDriverControllerEnvsValueFromFieldRefArgs) CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrInput {
	return (*csiunitySpecDriverControllerEnvsValueFromFieldRefPtrType)(v)
}

func (*csiunitySpecDriverControllerEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverControllerEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *csiunitySpecDriverControllerEnvsValueFromFieldRefPtrType) ToCSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverControllerEnvsValueFromFieldRefPtrType) ToCSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverControllerEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput) ToCSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput() CSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput) ToCSIUnitySpecDriverControllerEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput) ToCSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o.ToCSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput) ToCSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvsValueFromFieldRef) *CSIUnitySpecDriverControllerEnvsValueFromFieldRef {
		return &v
	}).(CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverControllerEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput) ToCSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput) ToCSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput) Elem() CSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverControllerEnvsValueFromFieldRef) CSIUnitySpecDriverControllerEnvsValueFromFieldRef {
		return *v
	}).(CSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverControllerEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverControllerEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisor `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefInput is an input type that accepts CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefArgs and CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefInput` via:
//
//          CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefArgs{...}
type CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput() CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput
	ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutputWithContext(context.Context) CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefArgs) ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput() CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return i.ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefArgs) ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput)
}

func (i CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefArgs) ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefArgs) ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput).ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrInput is an input type that accepts CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefArgs, CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtr and CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrInput` via:
//
//          CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput
	ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput
}

type csiunitySpecDriverControllerEnvsValueFromResourceFieldRefPtrType CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefArgs

func CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtr(v *CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefArgs) CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrInput {
	return (*csiunitySpecDriverControllerEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*csiunitySpecDriverControllerEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *csiunitySpecDriverControllerEnvsValueFromResourceFieldRefPtrType) ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverControllerEnvsValueFromResourceFieldRefPtrType) ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput) ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput() CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput) ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput) ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput) ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRef) *CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRef {
		return &v
	}).(CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput) Divisor() CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRef) *CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisor {
		return v.Divisor
	}).(CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) Elem() CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRef) CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRef {
		return *v
	}).(CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) Divisor() CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRef) *CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisor {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

type CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisor struct {
}

// CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorInput is an input type that accepts CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs and CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorInput` via:
//
//          CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs{...}
type CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput() CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput
	ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Context) CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput
}

type CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs struct {
}

func (CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs) ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput() CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput {
	return i.ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs) ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput)
}

func (i CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs) ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs) ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput).ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrInput is an input type that accepts CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs, CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtr and CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrInput` via:
//
//          CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput
	ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Context) CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput
}

type csiunitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrType CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs

func CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtr(v *CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs) CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrInput {
	return (*csiunitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrType)(v)
}

func (*csiunitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i *csiunitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrType) ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrType) ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput) ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput() CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput) ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput) ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput) ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisor) *CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisor {
		return &v
	}).(CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput) ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput) ToCSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput) Elem() CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisor) CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisor {
		return *v
	}).(CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefInput is an input type that accepts CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefArgs and CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefInput` via:
//
//          CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefArgs{...}
type CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput() CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput
	ToCSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutputWithContext(context.Context) CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefArgs) ToCSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput() CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return i.ToCSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefArgs) ToCSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput)
}

func (i CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefArgs) ToCSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefArgs) ToCSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput).ToCSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrInput is an input type that accepts CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefArgs, CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtr and CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrInput` via:
//
//          CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput
	ToCSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput
}

type csiunitySpecDriverControllerEnvsValueFromSecretKeyRefPtrType CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefArgs

func CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtr(v *CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefArgs) CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrInput {
	return (*csiunitySpecDriverControllerEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*csiunitySpecDriverControllerEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *csiunitySpecDriverControllerEnvsValueFromSecretKeyRefPtrType) ToCSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverControllerEnvsValueFromSecretKeyRefPtrType) ToCSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput) ToCSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput() CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput) ToCSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput) ToCSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToCSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput) ToCSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRef) *CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRef {
		return &v
	}).(CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) ToCSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) ToCSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) Elem() CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRef) CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRef {
		return *v
	}).(CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIUnitySpecDriverControllerNodeSelector struct {
}

// CSIUnitySpecDriverControllerNodeSelectorInput is an input type that accepts CSIUnitySpecDriverControllerNodeSelectorArgs and CSIUnitySpecDriverControllerNodeSelectorOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverControllerNodeSelectorInput` via:
//
//          CSIUnitySpecDriverControllerNodeSelectorArgs{...}
type CSIUnitySpecDriverControllerNodeSelectorInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverControllerNodeSelectorOutput() CSIUnitySpecDriverControllerNodeSelectorOutput
	ToCSIUnitySpecDriverControllerNodeSelectorOutputWithContext(context.Context) CSIUnitySpecDriverControllerNodeSelectorOutput
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIUnitySpecDriverControllerNodeSelectorArgs struct {
}

func (CSIUnitySpecDriverControllerNodeSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverControllerNodeSelector)(nil)).Elem()
}

func (i CSIUnitySpecDriverControllerNodeSelectorArgs) ToCSIUnitySpecDriverControllerNodeSelectorOutput() CSIUnitySpecDriverControllerNodeSelectorOutput {
	return i.ToCSIUnitySpecDriverControllerNodeSelectorOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverControllerNodeSelectorArgs) ToCSIUnitySpecDriverControllerNodeSelectorOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerNodeSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerNodeSelectorOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIUnitySpecDriverControllerNodeSelectorOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverControllerNodeSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverControllerNodeSelector)(nil)).Elem()
}

func (o CSIUnitySpecDriverControllerNodeSelectorOutput) ToCSIUnitySpecDriverControllerNodeSelectorOutput() CSIUnitySpecDriverControllerNodeSelectorOutput {
	return o
}

func (o CSIUnitySpecDriverControllerNodeSelectorOutput) ToCSIUnitySpecDriverControllerNodeSelectorOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerNodeSelectorOutput {
	return o
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIUnitySpecDriverControllerTolerations struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect *string `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key *string `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator *string `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds *int `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value *string `pulumi:"value"`
}

// CSIUnitySpecDriverControllerTolerationsInput is an input type that accepts CSIUnitySpecDriverControllerTolerationsArgs and CSIUnitySpecDriverControllerTolerationsOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverControllerTolerationsInput` via:
//
//          CSIUnitySpecDriverControllerTolerationsArgs{...}
type CSIUnitySpecDriverControllerTolerationsInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverControllerTolerationsOutput() CSIUnitySpecDriverControllerTolerationsOutput
	ToCSIUnitySpecDriverControllerTolerationsOutputWithContext(context.Context) CSIUnitySpecDriverControllerTolerationsOutput
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIUnitySpecDriverControllerTolerationsArgs struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect pulumi.StringPtrInput `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds pulumi.IntPtrInput `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (CSIUnitySpecDriverControllerTolerationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverControllerTolerations)(nil)).Elem()
}

func (i CSIUnitySpecDriverControllerTolerationsArgs) ToCSIUnitySpecDriverControllerTolerationsOutput() CSIUnitySpecDriverControllerTolerationsOutput {
	return i.ToCSIUnitySpecDriverControllerTolerationsOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverControllerTolerationsArgs) ToCSIUnitySpecDriverControllerTolerationsOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerTolerationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerTolerationsOutput)
}

// CSIUnitySpecDriverControllerTolerationsArrayInput is an input type that accepts CSIUnitySpecDriverControllerTolerationsArray and CSIUnitySpecDriverControllerTolerationsArrayOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverControllerTolerationsArrayInput` via:
//
//          CSIUnitySpecDriverControllerTolerationsArray{ CSIUnitySpecDriverControllerTolerationsArgs{...} }
type CSIUnitySpecDriverControllerTolerationsArrayInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverControllerTolerationsArrayOutput() CSIUnitySpecDriverControllerTolerationsArrayOutput
	ToCSIUnitySpecDriverControllerTolerationsArrayOutputWithContext(context.Context) CSIUnitySpecDriverControllerTolerationsArrayOutput
}

type CSIUnitySpecDriverControllerTolerationsArray []CSIUnitySpecDriverControllerTolerationsInput

func (CSIUnitySpecDriverControllerTolerationsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIUnitySpecDriverControllerTolerations)(nil)).Elem()
}

func (i CSIUnitySpecDriverControllerTolerationsArray) ToCSIUnitySpecDriverControllerTolerationsArrayOutput() CSIUnitySpecDriverControllerTolerationsArrayOutput {
	return i.ToCSIUnitySpecDriverControllerTolerationsArrayOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverControllerTolerationsArray) ToCSIUnitySpecDriverControllerTolerationsArrayOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerTolerationsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverControllerTolerationsArrayOutput)
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIUnitySpecDriverControllerTolerationsOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverControllerTolerationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverControllerTolerations)(nil)).Elem()
}

func (o CSIUnitySpecDriverControllerTolerationsOutput) ToCSIUnitySpecDriverControllerTolerationsOutput() CSIUnitySpecDriverControllerTolerationsOutput {
	return o
}

func (o CSIUnitySpecDriverControllerTolerationsOutput) ToCSIUnitySpecDriverControllerTolerationsOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerTolerationsOutput {
	return o
}

// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
func (o CSIUnitySpecDriverControllerTolerationsOutput) Effect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerTolerations) *string { return v.Effect }).(pulumi.StringPtrOutput)
}

// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
func (o CSIUnitySpecDriverControllerTolerationsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerTolerations) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
func (o CSIUnitySpecDriverControllerTolerationsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerTolerations) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
func (o CSIUnitySpecDriverControllerTolerationsOutput) TolerationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerTolerations) *int { return v.TolerationSeconds }).(pulumi.IntPtrOutput)
}

// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
func (o CSIUnitySpecDriverControllerTolerationsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverControllerTolerations) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type CSIUnitySpecDriverControllerTolerationsArrayOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverControllerTolerationsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIUnitySpecDriverControllerTolerations)(nil)).Elem()
}

func (o CSIUnitySpecDriverControllerTolerationsArrayOutput) ToCSIUnitySpecDriverControllerTolerationsArrayOutput() CSIUnitySpecDriverControllerTolerationsArrayOutput {
	return o
}

func (o CSIUnitySpecDriverControllerTolerationsArrayOutput) ToCSIUnitySpecDriverControllerTolerationsArrayOutputWithContext(ctx context.Context) CSIUnitySpecDriverControllerTolerationsArrayOutput {
	return o
}

func (o CSIUnitySpecDriverControllerTolerationsArrayOutput) Index(i pulumi.IntInput) CSIUnitySpecDriverControllerTolerationsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIUnitySpecDriverControllerTolerations {
		return vs[0].([]CSIUnitySpecDriverControllerTolerations)[vs[1].(int)]
	}).(CSIUnitySpecDriverControllerTolerationsOutput)
}

// Node is the specification for Node plugin only
type CSIUnitySpecDriverNode struct {
	// Args is the set of arguments for the container
	Args []string `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs []CSIUnitySpecDriverNodeEnvs `pulumi:"envs"`
	// Image is the image tag for the Container
	Image *string `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name *string `pulumi:"name"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
	NodeSelector map[string]string `pulumi:"nodeSelector"`
	// Tolerations is the list of tolerations for the driver pods
	Tolerations []CSIUnitySpecDriverNodeTolerations `pulumi:"tolerations"`
}

// CSIUnitySpecDriverNodeInput is an input type that accepts CSIUnitySpecDriverNodeArgs and CSIUnitySpecDriverNodeOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverNodeInput` via:
//
//          CSIUnitySpecDriverNodeArgs{...}
type CSIUnitySpecDriverNodeInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverNodeOutput() CSIUnitySpecDriverNodeOutput
	ToCSIUnitySpecDriverNodeOutputWithContext(context.Context) CSIUnitySpecDriverNodeOutput
}

// Node is the specification for Node plugin only
type CSIUnitySpecDriverNodeArgs struct {
	// Args is the set of arguments for the container
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs CSIUnitySpecDriverNodeEnvsArrayInput `pulumi:"envs"`
	// Image is the image tag for the Container
	Image pulumi.StringPtrInput `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name pulumi.StringPtrInput `pulumi:"name"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
	NodeSelector pulumi.StringMapInput `pulumi:"nodeSelector"`
	// Tolerations is the list of tolerations for the driver pods
	Tolerations CSIUnitySpecDriverNodeTolerationsArrayInput `pulumi:"tolerations"`
}

func (CSIUnitySpecDriverNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverNode)(nil)).Elem()
}

func (i CSIUnitySpecDriverNodeArgs) ToCSIUnitySpecDriverNodeOutput() CSIUnitySpecDriverNodeOutput {
	return i.ToCSIUnitySpecDriverNodeOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverNodeArgs) ToCSIUnitySpecDriverNodeOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeOutput)
}

func (i CSIUnitySpecDriverNodeArgs) ToCSIUnitySpecDriverNodePtrOutput() CSIUnitySpecDriverNodePtrOutput {
	return i.ToCSIUnitySpecDriverNodePtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverNodeArgs) ToCSIUnitySpecDriverNodePtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeOutput).ToCSIUnitySpecDriverNodePtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverNodePtrInput is an input type that accepts CSIUnitySpecDriverNodeArgs, CSIUnitySpecDriverNodePtr and CSIUnitySpecDriverNodePtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverNodePtrInput` via:
//
//          CSIUnitySpecDriverNodeArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverNodePtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverNodePtrOutput() CSIUnitySpecDriverNodePtrOutput
	ToCSIUnitySpecDriverNodePtrOutputWithContext(context.Context) CSIUnitySpecDriverNodePtrOutput
}

type csiunitySpecDriverNodePtrType CSIUnitySpecDriverNodeArgs

func CSIUnitySpecDriverNodePtr(v *CSIUnitySpecDriverNodeArgs) CSIUnitySpecDriverNodePtrInput {
	return (*csiunitySpecDriverNodePtrType)(v)
}

func (*csiunitySpecDriverNodePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverNode)(nil)).Elem()
}

func (i *csiunitySpecDriverNodePtrType) ToCSIUnitySpecDriverNodePtrOutput() CSIUnitySpecDriverNodePtrOutput {
	return i.ToCSIUnitySpecDriverNodePtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverNodePtrType) ToCSIUnitySpecDriverNodePtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodePtrOutput)
}

// Node is the specification for Node plugin only
type CSIUnitySpecDriverNodeOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverNode)(nil)).Elem()
}

func (o CSIUnitySpecDriverNodeOutput) ToCSIUnitySpecDriverNodeOutput() CSIUnitySpecDriverNodeOutput {
	return o
}

func (o CSIUnitySpecDriverNodeOutput) ToCSIUnitySpecDriverNodeOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeOutput {
	return o
}

func (o CSIUnitySpecDriverNodeOutput) ToCSIUnitySpecDriverNodePtrOutput() CSIUnitySpecDriverNodePtrOutput {
	return o.ToCSIUnitySpecDriverNodePtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverNodeOutput) ToCSIUnitySpecDriverNodePtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodePtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNode) *CSIUnitySpecDriverNode {
		return &v
	}).(CSIUnitySpecDriverNodePtrOutput)
}

// Args is the set of arguments for the container
func (o CSIUnitySpecDriverNodeOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNode) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIUnitySpecDriverNodeOutput) Envs() CSIUnitySpecDriverNodeEnvsArrayOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNode) []CSIUnitySpecDriverNodeEnvs { return v.Envs }).(CSIUnitySpecDriverNodeEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIUnitySpecDriverNodeOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNode) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIUnitySpecDriverNodeOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNode) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIUnitySpecDriverNodeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNode) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
func (o CSIUnitySpecDriverNodeOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNode) map[string]string { return v.NodeSelector }).(pulumi.StringMapOutput)
}

// Tolerations is the list of tolerations for the driver pods
func (o CSIUnitySpecDriverNodeOutput) Tolerations() CSIUnitySpecDriverNodeTolerationsArrayOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNode) []CSIUnitySpecDriverNodeTolerations { return v.Tolerations }).(CSIUnitySpecDriverNodeTolerationsArrayOutput)
}

type CSIUnitySpecDriverNodePtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverNodePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverNode)(nil)).Elem()
}

func (o CSIUnitySpecDriverNodePtrOutput) ToCSIUnitySpecDriverNodePtrOutput() CSIUnitySpecDriverNodePtrOutput {
	return o
}

func (o CSIUnitySpecDriverNodePtrOutput) ToCSIUnitySpecDriverNodePtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodePtrOutput {
	return o
}

func (o CSIUnitySpecDriverNodePtrOutput) Elem() CSIUnitySpecDriverNodeOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNode) CSIUnitySpecDriverNode { return *v }).(CSIUnitySpecDriverNodeOutput)
}

// Args is the set of arguments for the container
func (o CSIUnitySpecDriverNodePtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNode) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIUnitySpecDriverNodePtrOutput) Envs() CSIUnitySpecDriverNodeEnvsArrayOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNode) []CSIUnitySpecDriverNodeEnvs {
		if v == nil {
			return nil
		}
		return v.Envs
	}).(CSIUnitySpecDriverNodeEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIUnitySpecDriverNodePtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNode) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIUnitySpecDriverNodePtrOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNode) *string {
		if v == nil {
			return nil
		}
		return v.ImagePullPolicy
	}).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIUnitySpecDriverNodePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNode) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
func (o CSIUnitySpecDriverNodePtrOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNode) map[string]string {
		if v == nil {
			return nil
		}
		return v.NodeSelector
	}).(pulumi.StringMapOutput)
}

// Tolerations is the list of tolerations for the driver pods
func (o CSIUnitySpecDriverNodePtrOutput) Tolerations() CSIUnitySpecDriverNodeTolerationsArrayOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNode) []CSIUnitySpecDriverNodeTolerations {
		if v == nil {
			return nil
		}
		return v.Tolerations
	}).(CSIUnitySpecDriverNodeTolerationsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIUnitySpecDriverNodeEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *CSIUnitySpecDriverNodeEnvsValueFrom `pulumi:"valueFrom"`
}

// CSIUnitySpecDriverNodeEnvsInput is an input type that accepts CSIUnitySpecDriverNodeEnvsArgs and CSIUnitySpecDriverNodeEnvsOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverNodeEnvsInput` via:
//
//          CSIUnitySpecDriverNodeEnvsArgs{...}
type CSIUnitySpecDriverNodeEnvsInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverNodeEnvsOutput() CSIUnitySpecDriverNodeEnvsOutput
	ToCSIUnitySpecDriverNodeEnvsOutputWithContext(context.Context) CSIUnitySpecDriverNodeEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type CSIUnitySpecDriverNodeEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom CSIUnitySpecDriverNodeEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (CSIUnitySpecDriverNodeEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverNodeEnvs)(nil)).Elem()
}

func (i CSIUnitySpecDriverNodeEnvsArgs) ToCSIUnitySpecDriverNodeEnvsOutput() CSIUnitySpecDriverNodeEnvsOutput {
	return i.ToCSIUnitySpecDriverNodeEnvsOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverNodeEnvsArgs) ToCSIUnitySpecDriverNodeEnvsOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeEnvsOutput)
}

// CSIUnitySpecDriverNodeEnvsArrayInput is an input type that accepts CSIUnitySpecDriverNodeEnvsArray and CSIUnitySpecDriverNodeEnvsArrayOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverNodeEnvsArrayInput` via:
//
//          CSIUnitySpecDriverNodeEnvsArray{ CSIUnitySpecDriverNodeEnvsArgs{...} }
type CSIUnitySpecDriverNodeEnvsArrayInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverNodeEnvsArrayOutput() CSIUnitySpecDriverNodeEnvsArrayOutput
	ToCSIUnitySpecDriverNodeEnvsArrayOutputWithContext(context.Context) CSIUnitySpecDriverNodeEnvsArrayOutput
}

type CSIUnitySpecDriverNodeEnvsArray []CSIUnitySpecDriverNodeEnvsInput

func (CSIUnitySpecDriverNodeEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIUnitySpecDriverNodeEnvs)(nil)).Elem()
}

func (i CSIUnitySpecDriverNodeEnvsArray) ToCSIUnitySpecDriverNodeEnvsArrayOutput() CSIUnitySpecDriverNodeEnvsArrayOutput {
	return i.ToCSIUnitySpecDriverNodeEnvsArrayOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverNodeEnvsArray) ToCSIUnitySpecDriverNodeEnvsArrayOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIUnitySpecDriverNodeEnvsOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverNodeEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverNodeEnvs)(nil)).Elem()
}

func (o CSIUnitySpecDriverNodeEnvsOutput) ToCSIUnitySpecDriverNodeEnvsOutput() CSIUnitySpecDriverNodeEnvsOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsOutput) ToCSIUnitySpecDriverNodeEnvsOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o CSIUnitySpecDriverNodeEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o CSIUnitySpecDriverNodeEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o CSIUnitySpecDriverNodeEnvsOutput) ValueFrom() CSIUnitySpecDriverNodeEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvs) *CSIUnitySpecDriverNodeEnvsValueFrom { return v.ValueFrom }).(CSIUnitySpecDriverNodeEnvsValueFromPtrOutput)
}

type CSIUnitySpecDriverNodeEnvsArrayOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverNodeEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIUnitySpecDriverNodeEnvs)(nil)).Elem()
}

func (o CSIUnitySpecDriverNodeEnvsArrayOutput) ToCSIUnitySpecDriverNodeEnvsArrayOutput() CSIUnitySpecDriverNodeEnvsArrayOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsArrayOutput) ToCSIUnitySpecDriverNodeEnvsArrayOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsArrayOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsArrayOutput) Index(i pulumi.IntInput) CSIUnitySpecDriverNodeEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIUnitySpecDriverNodeEnvs {
		return vs[0].([]CSIUnitySpecDriverNodeEnvs)[vs[1].(int)]
	}).(CSIUnitySpecDriverNodeEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIUnitySpecDriverNodeEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef *CSIUnitySpecDriverNodeEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// CSIUnitySpecDriverNodeEnvsValueFromInput is an input type that accepts CSIUnitySpecDriverNodeEnvsValueFromArgs and CSIUnitySpecDriverNodeEnvsValueFromOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverNodeEnvsValueFromInput` via:
//
//          CSIUnitySpecDriverNodeEnvsValueFromArgs{...}
type CSIUnitySpecDriverNodeEnvsValueFromInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverNodeEnvsValueFromOutput() CSIUnitySpecDriverNodeEnvsValueFromOutput
	ToCSIUnitySpecDriverNodeEnvsValueFromOutputWithContext(context.Context) CSIUnitySpecDriverNodeEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIUnitySpecDriverNodeEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (CSIUnitySpecDriverNodeEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverNodeEnvsValueFrom)(nil)).Elem()
}

func (i CSIUnitySpecDriverNodeEnvsValueFromArgs) ToCSIUnitySpecDriverNodeEnvsValueFromOutput() CSIUnitySpecDriverNodeEnvsValueFromOutput {
	return i.ToCSIUnitySpecDriverNodeEnvsValueFromOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverNodeEnvsValueFromArgs) ToCSIUnitySpecDriverNodeEnvsValueFromOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeEnvsValueFromOutput)
}

func (i CSIUnitySpecDriverNodeEnvsValueFromArgs) ToCSIUnitySpecDriverNodeEnvsValueFromPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromPtrOutput {
	return i.ToCSIUnitySpecDriverNodeEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverNodeEnvsValueFromArgs) ToCSIUnitySpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeEnvsValueFromOutput).ToCSIUnitySpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverNodeEnvsValueFromPtrInput is an input type that accepts CSIUnitySpecDriverNodeEnvsValueFromArgs, CSIUnitySpecDriverNodeEnvsValueFromPtr and CSIUnitySpecDriverNodeEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverNodeEnvsValueFromPtrInput` via:
//
//          CSIUnitySpecDriverNodeEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverNodeEnvsValueFromPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverNodeEnvsValueFromPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromPtrOutput
	ToCSIUnitySpecDriverNodeEnvsValueFromPtrOutputWithContext(context.Context) CSIUnitySpecDriverNodeEnvsValueFromPtrOutput
}

type csiunitySpecDriverNodeEnvsValueFromPtrType CSIUnitySpecDriverNodeEnvsValueFromArgs

func CSIUnitySpecDriverNodeEnvsValueFromPtr(v *CSIUnitySpecDriverNodeEnvsValueFromArgs) CSIUnitySpecDriverNodeEnvsValueFromPtrInput {
	return (*csiunitySpecDriverNodeEnvsValueFromPtrType)(v)
}

func (*csiunitySpecDriverNodeEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverNodeEnvsValueFrom)(nil)).Elem()
}

func (i *csiunitySpecDriverNodeEnvsValueFromPtrType) ToCSIUnitySpecDriverNodeEnvsValueFromPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromPtrOutput {
	return i.ToCSIUnitySpecDriverNodeEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverNodeEnvsValueFromPtrType) ToCSIUnitySpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIUnitySpecDriverNodeEnvsValueFromOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverNodeEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverNodeEnvsValueFrom)(nil)).Elem()
}

func (o CSIUnitySpecDriverNodeEnvsValueFromOutput) ToCSIUnitySpecDriverNodeEnvsValueFromOutput() CSIUnitySpecDriverNodeEnvsValueFromOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromOutput) ToCSIUnitySpecDriverNodeEnvsValueFromOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromOutput) ToCSIUnitySpecDriverNodeEnvsValueFromPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromPtrOutput {
	return o.ToCSIUnitySpecDriverNodeEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverNodeEnvsValueFromOutput) ToCSIUnitySpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvsValueFrom) *CSIUnitySpecDriverNodeEnvsValueFrom {
		return &v
	}).(CSIUnitySpecDriverNodeEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o CSIUnitySpecDriverNodeEnvsValueFromOutput) ConfigMapKeyRef() CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvsValueFrom) *CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o CSIUnitySpecDriverNodeEnvsValueFromOutput) FieldRef() CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvsValueFrom) *CSIUnitySpecDriverNodeEnvsValueFromFieldRef {
		return v.FieldRef
	}).(CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIUnitySpecDriverNodeEnvsValueFromOutput) ResourceFieldRef() CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvsValueFrom) *CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIUnitySpecDriverNodeEnvsValueFromOutput) SecretKeyRef() CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvsValueFrom) *CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput)
}

type CSIUnitySpecDriverNodeEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverNodeEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverNodeEnvsValueFrom)(nil)).Elem()
}

func (o CSIUnitySpecDriverNodeEnvsValueFromPtrOutput) ToCSIUnitySpecDriverNodeEnvsValueFromPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromPtrOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromPtrOutput) ToCSIUnitySpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromPtrOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromPtrOutput) Elem() CSIUnitySpecDriverNodeEnvsValueFromOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNodeEnvsValueFrom) CSIUnitySpecDriverNodeEnvsValueFrom { return *v }).(CSIUnitySpecDriverNodeEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o CSIUnitySpecDriverNodeEnvsValueFromPtrOutput) ConfigMapKeyRef() CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNodeEnvsValueFrom) *CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o CSIUnitySpecDriverNodeEnvsValueFromPtrOutput) FieldRef() CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNodeEnvsValueFrom) *CSIUnitySpecDriverNodeEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIUnitySpecDriverNodeEnvsValueFromPtrOutput) ResourceFieldRef() CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNodeEnvsValueFrom) *CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIUnitySpecDriverNodeEnvsValueFromPtrOutput) SecretKeyRef() CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNodeEnvsValueFrom) *CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefInput is an input type that accepts CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefArgs and CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefInput` via:
//
//          CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefArgs{...}
type CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput() CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput
	ToCSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ToCSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput() CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return i.ToCSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ToCSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput)
}

func (i CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ToCSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ToCSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput).ToCSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefArgs, CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtr and CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput
	ToCSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput
}

type csiunitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefArgs

func CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtr(v *CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput {
	return (*csiunitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*csiunitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *csiunitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType) ToCSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType) ToCSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ToCSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput() CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ToCSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ToCSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToCSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ToCSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRef) *CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRef {
		return &v
	}).(CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) Elem() CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRef) CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRef {
		return *v
	}).(CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIUnitySpecDriverNodeEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// CSIUnitySpecDriverNodeEnvsValueFromFieldRefInput is an input type that accepts CSIUnitySpecDriverNodeEnvsValueFromFieldRefArgs and CSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverNodeEnvsValueFromFieldRefInput` via:
//
//          CSIUnitySpecDriverNodeEnvsValueFromFieldRefArgs{...}
type CSIUnitySpecDriverNodeEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput() CSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput
	ToCSIUnitySpecDriverNodeEnvsValueFromFieldRefOutputWithContext(context.Context) CSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIUnitySpecDriverNodeEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (CSIUnitySpecDriverNodeEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverNodeEnvsValueFromFieldRef)(nil)).Elem()
}

func (i CSIUnitySpecDriverNodeEnvsValueFromFieldRefArgs) ToCSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput() CSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput {
	return i.ToCSIUnitySpecDriverNodeEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverNodeEnvsValueFromFieldRefArgs) ToCSIUnitySpecDriverNodeEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput)
}

func (i CSIUnitySpecDriverNodeEnvsValueFromFieldRefArgs) ToCSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverNodeEnvsValueFromFieldRefArgs) ToCSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput).ToCSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrInput is an input type that accepts CSIUnitySpecDriverNodeEnvsValueFromFieldRefArgs, CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtr and CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrInput` via:
//
//          CSIUnitySpecDriverNodeEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput
	ToCSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(context.Context) CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput
}

type csiunitySpecDriverNodeEnvsValueFromFieldRefPtrType CSIUnitySpecDriverNodeEnvsValueFromFieldRefArgs

func CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtr(v *CSIUnitySpecDriverNodeEnvsValueFromFieldRefArgs) CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrInput {
	return (*csiunitySpecDriverNodeEnvsValueFromFieldRefPtrType)(v)
}

func (*csiunitySpecDriverNodeEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverNodeEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *csiunitySpecDriverNodeEnvsValueFromFieldRefPtrType) ToCSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverNodeEnvsValueFromFieldRefPtrType) ToCSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverNodeEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput) ToCSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput() CSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput) ToCSIUnitySpecDriverNodeEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput) ToCSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o.ToCSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput) ToCSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvsValueFromFieldRef) *CSIUnitySpecDriverNodeEnvsValueFromFieldRef {
		return &v
	}).(CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverNodeEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput) ToCSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput) ToCSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput) Elem() CSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNodeEnvsValueFromFieldRef) CSIUnitySpecDriverNodeEnvsValueFromFieldRef {
		return *v
	}).(CSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNodeEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNodeEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisor `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefInput is an input type that accepts CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefArgs and CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefInput` via:
//
//          CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefArgs{...}
type CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput() CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput
	ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutputWithContext(context.Context) CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefArgs) ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput() CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return i.ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefArgs) ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput)
}

func (i CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefArgs) ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefArgs) ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput).ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrInput is an input type that accepts CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefArgs, CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtr and CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrInput` via:
//
//          CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput
	ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput
}

type csiunitySpecDriverNodeEnvsValueFromResourceFieldRefPtrType CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefArgs

func CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtr(v *CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefArgs) CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrInput {
	return (*csiunitySpecDriverNodeEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*csiunitySpecDriverNodeEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *csiunitySpecDriverNodeEnvsValueFromResourceFieldRefPtrType) ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverNodeEnvsValueFromResourceFieldRefPtrType) ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput) ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput() CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput) ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput) ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput) ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRef) *CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRef {
		return &v
	}).(CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput) Divisor() CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRef) *CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisor {
		return v.Divisor
	}).(CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) Elem() CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRef) CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRef {
		return *v
	}).(CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) Divisor() CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRef) *CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisor {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

type CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisor struct {
}

// CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorInput is an input type that accepts CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs and CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorInput` via:
//
//          CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs{...}
type CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput() CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput
	ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Context) CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput
}

type CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs struct {
}

func (CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs) ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput() CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput {
	return i.ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs) ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput)
}

func (i CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs) ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs) ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput).ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrInput is an input type that accepts CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs, CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtr and CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrInput` via:
//
//          CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput
	ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Context) CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput
}

type csiunitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrType CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs

func CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtr(v *CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs) CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrInput {
	return (*csiunitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrType)(v)
}

func (*csiunitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i *csiunitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrType) ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrType) ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput) ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput() CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput) ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput) ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput) ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisor) *CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisor {
		return &v
	}).(CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput) ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput) ToCSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput) Elem() CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisor) CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisor {
		return *v
	}).(CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefInput is an input type that accepts CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefArgs and CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefInput` via:
//
//          CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefArgs{...}
type CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput() CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput
	ToCSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutputWithContext(context.Context) CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefArgs) ToCSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput() CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return i.ToCSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefArgs) ToCSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput)
}

func (i CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefArgs) ToCSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefArgs) ToCSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput).ToCSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrInput is an input type that accepts CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefArgs, CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtr and CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrInput` via:
//
//          CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput
	ToCSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput
}

type csiunitySpecDriverNodeEnvsValueFromSecretKeyRefPtrType CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefArgs

func CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtr(v *CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefArgs) CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrInput {
	return (*csiunitySpecDriverNodeEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*csiunitySpecDriverNodeEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *csiunitySpecDriverNodeEnvsValueFromSecretKeyRefPtrType) ToCSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverNodeEnvsValueFromSecretKeyRefPtrType) ToCSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput) ToCSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput() CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput) ToCSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput) ToCSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToCSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput) ToCSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRef) *CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRef {
		return &v
	}).(CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) ToCSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) ToCSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) Elem() CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRef) CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRef {
		return *v
	}).(CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIUnitySpecDriverNodeNodeSelector struct {
}

// CSIUnitySpecDriverNodeNodeSelectorInput is an input type that accepts CSIUnitySpecDriverNodeNodeSelectorArgs and CSIUnitySpecDriverNodeNodeSelectorOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverNodeNodeSelectorInput` via:
//
//          CSIUnitySpecDriverNodeNodeSelectorArgs{...}
type CSIUnitySpecDriverNodeNodeSelectorInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverNodeNodeSelectorOutput() CSIUnitySpecDriverNodeNodeSelectorOutput
	ToCSIUnitySpecDriverNodeNodeSelectorOutputWithContext(context.Context) CSIUnitySpecDriverNodeNodeSelectorOutput
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIUnitySpecDriverNodeNodeSelectorArgs struct {
}

func (CSIUnitySpecDriverNodeNodeSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverNodeNodeSelector)(nil)).Elem()
}

func (i CSIUnitySpecDriverNodeNodeSelectorArgs) ToCSIUnitySpecDriverNodeNodeSelectorOutput() CSIUnitySpecDriverNodeNodeSelectorOutput {
	return i.ToCSIUnitySpecDriverNodeNodeSelectorOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverNodeNodeSelectorArgs) ToCSIUnitySpecDriverNodeNodeSelectorOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeNodeSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeNodeSelectorOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIUnitySpecDriverNodeNodeSelectorOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverNodeNodeSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverNodeNodeSelector)(nil)).Elem()
}

func (o CSIUnitySpecDriverNodeNodeSelectorOutput) ToCSIUnitySpecDriverNodeNodeSelectorOutput() CSIUnitySpecDriverNodeNodeSelectorOutput {
	return o
}

func (o CSIUnitySpecDriverNodeNodeSelectorOutput) ToCSIUnitySpecDriverNodeNodeSelectorOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeNodeSelectorOutput {
	return o
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIUnitySpecDriverNodeTolerations struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect *string `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key *string `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator *string `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds *int `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value *string `pulumi:"value"`
}

// CSIUnitySpecDriverNodeTolerationsInput is an input type that accepts CSIUnitySpecDriverNodeTolerationsArgs and CSIUnitySpecDriverNodeTolerationsOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverNodeTolerationsInput` via:
//
//          CSIUnitySpecDriverNodeTolerationsArgs{...}
type CSIUnitySpecDriverNodeTolerationsInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverNodeTolerationsOutput() CSIUnitySpecDriverNodeTolerationsOutput
	ToCSIUnitySpecDriverNodeTolerationsOutputWithContext(context.Context) CSIUnitySpecDriverNodeTolerationsOutput
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIUnitySpecDriverNodeTolerationsArgs struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect pulumi.StringPtrInput `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds pulumi.IntPtrInput `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (CSIUnitySpecDriverNodeTolerationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverNodeTolerations)(nil)).Elem()
}

func (i CSIUnitySpecDriverNodeTolerationsArgs) ToCSIUnitySpecDriverNodeTolerationsOutput() CSIUnitySpecDriverNodeTolerationsOutput {
	return i.ToCSIUnitySpecDriverNodeTolerationsOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverNodeTolerationsArgs) ToCSIUnitySpecDriverNodeTolerationsOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeTolerationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeTolerationsOutput)
}

// CSIUnitySpecDriverNodeTolerationsArrayInput is an input type that accepts CSIUnitySpecDriverNodeTolerationsArray and CSIUnitySpecDriverNodeTolerationsArrayOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverNodeTolerationsArrayInput` via:
//
//          CSIUnitySpecDriverNodeTolerationsArray{ CSIUnitySpecDriverNodeTolerationsArgs{...} }
type CSIUnitySpecDriverNodeTolerationsArrayInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverNodeTolerationsArrayOutput() CSIUnitySpecDriverNodeTolerationsArrayOutput
	ToCSIUnitySpecDriverNodeTolerationsArrayOutputWithContext(context.Context) CSIUnitySpecDriverNodeTolerationsArrayOutput
}

type CSIUnitySpecDriverNodeTolerationsArray []CSIUnitySpecDriverNodeTolerationsInput

func (CSIUnitySpecDriverNodeTolerationsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIUnitySpecDriverNodeTolerations)(nil)).Elem()
}

func (i CSIUnitySpecDriverNodeTolerationsArray) ToCSIUnitySpecDriverNodeTolerationsArrayOutput() CSIUnitySpecDriverNodeTolerationsArrayOutput {
	return i.ToCSIUnitySpecDriverNodeTolerationsArrayOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverNodeTolerationsArray) ToCSIUnitySpecDriverNodeTolerationsArrayOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeTolerationsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverNodeTolerationsArrayOutput)
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIUnitySpecDriverNodeTolerationsOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverNodeTolerationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverNodeTolerations)(nil)).Elem()
}

func (o CSIUnitySpecDriverNodeTolerationsOutput) ToCSIUnitySpecDriverNodeTolerationsOutput() CSIUnitySpecDriverNodeTolerationsOutput {
	return o
}

func (o CSIUnitySpecDriverNodeTolerationsOutput) ToCSIUnitySpecDriverNodeTolerationsOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeTolerationsOutput {
	return o
}

// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
func (o CSIUnitySpecDriverNodeTolerationsOutput) Effect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeTolerations) *string { return v.Effect }).(pulumi.StringPtrOutput)
}

// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
func (o CSIUnitySpecDriverNodeTolerationsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeTolerations) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
func (o CSIUnitySpecDriverNodeTolerationsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeTolerations) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
func (o CSIUnitySpecDriverNodeTolerationsOutput) TolerationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeTolerations) *int { return v.TolerationSeconds }).(pulumi.IntPtrOutput)
}

// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
func (o CSIUnitySpecDriverNodeTolerationsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverNodeTolerations) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type CSIUnitySpecDriverNodeTolerationsArrayOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverNodeTolerationsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIUnitySpecDriverNodeTolerations)(nil)).Elem()
}

func (o CSIUnitySpecDriverNodeTolerationsArrayOutput) ToCSIUnitySpecDriverNodeTolerationsArrayOutput() CSIUnitySpecDriverNodeTolerationsArrayOutput {
	return o
}

func (o CSIUnitySpecDriverNodeTolerationsArrayOutput) ToCSIUnitySpecDriverNodeTolerationsArrayOutputWithContext(ctx context.Context) CSIUnitySpecDriverNodeTolerationsArrayOutput {
	return o
}

func (o CSIUnitySpecDriverNodeTolerationsArrayOutput) Index(i pulumi.IntInput) CSIUnitySpecDriverNodeTolerationsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIUnitySpecDriverNodeTolerations {
		return vs[0].([]CSIUnitySpecDriverNodeTolerations)[vs[1].(int)]
	}).(CSIUnitySpecDriverNodeTolerationsOutput)
}

// ContainerTemplate - Structure representing a container
type CSIUnitySpecDriverSideCars struct {
	// Args is the set of arguments for the container
	Args []string `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs []CSIUnitySpecDriverSideCarsEnvs `pulumi:"envs"`
	// Image is the image tag for the Container
	Image *string `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name *string `pulumi:"name"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
	NodeSelector map[string]string `pulumi:"nodeSelector"`
	// Tolerations is the list of tolerations for the driver pods
	Tolerations []CSIUnitySpecDriverSideCarsTolerations `pulumi:"tolerations"`
}

// CSIUnitySpecDriverSideCarsInput is an input type that accepts CSIUnitySpecDriverSideCarsArgs and CSIUnitySpecDriverSideCarsOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverSideCarsInput` via:
//
//          CSIUnitySpecDriverSideCarsArgs{...}
type CSIUnitySpecDriverSideCarsInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverSideCarsOutput() CSIUnitySpecDriverSideCarsOutput
	ToCSIUnitySpecDriverSideCarsOutputWithContext(context.Context) CSIUnitySpecDriverSideCarsOutput
}

// ContainerTemplate - Structure representing a container
type CSIUnitySpecDriverSideCarsArgs struct {
	// Args is the set of arguments for the container
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs CSIUnitySpecDriverSideCarsEnvsArrayInput `pulumi:"envs"`
	// Image is the image tag for the Container
	Image pulumi.StringPtrInput `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name pulumi.StringPtrInput `pulumi:"name"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
	NodeSelector pulumi.StringMapInput `pulumi:"nodeSelector"`
	// Tolerations is the list of tolerations for the driver pods
	Tolerations CSIUnitySpecDriverSideCarsTolerationsArrayInput `pulumi:"tolerations"`
}

func (CSIUnitySpecDriverSideCarsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverSideCars)(nil)).Elem()
}

func (i CSIUnitySpecDriverSideCarsArgs) ToCSIUnitySpecDriverSideCarsOutput() CSIUnitySpecDriverSideCarsOutput {
	return i.ToCSIUnitySpecDriverSideCarsOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverSideCarsArgs) ToCSIUnitySpecDriverSideCarsOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsOutput)
}

// CSIUnitySpecDriverSideCarsArrayInput is an input type that accepts CSIUnitySpecDriverSideCarsArray and CSIUnitySpecDriverSideCarsArrayOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverSideCarsArrayInput` via:
//
//          CSIUnitySpecDriverSideCarsArray{ CSIUnitySpecDriverSideCarsArgs{...} }
type CSIUnitySpecDriverSideCarsArrayInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverSideCarsArrayOutput() CSIUnitySpecDriverSideCarsArrayOutput
	ToCSIUnitySpecDriverSideCarsArrayOutputWithContext(context.Context) CSIUnitySpecDriverSideCarsArrayOutput
}

type CSIUnitySpecDriverSideCarsArray []CSIUnitySpecDriverSideCarsInput

func (CSIUnitySpecDriverSideCarsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIUnitySpecDriverSideCars)(nil)).Elem()
}

func (i CSIUnitySpecDriverSideCarsArray) ToCSIUnitySpecDriverSideCarsArrayOutput() CSIUnitySpecDriverSideCarsArrayOutput {
	return i.ToCSIUnitySpecDriverSideCarsArrayOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverSideCarsArray) ToCSIUnitySpecDriverSideCarsArrayOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsArrayOutput)
}

// ContainerTemplate - Structure representing a container
type CSIUnitySpecDriverSideCarsOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverSideCarsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverSideCars)(nil)).Elem()
}

func (o CSIUnitySpecDriverSideCarsOutput) ToCSIUnitySpecDriverSideCarsOutput() CSIUnitySpecDriverSideCarsOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsOutput) ToCSIUnitySpecDriverSideCarsOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsOutput {
	return o
}

// Args is the set of arguments for the container
func (o CSIUnitySpecDriverSideCarsOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCars) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIUnitySpecDriverSideCarsOutput) Envs() CSIUnitySpecDriverSideCarsEnvsArrayOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCars) []CSIUnitySpecDriverSideCarsEnvs { return v.Envs }).(CSIUnitySpecDriverSideCarsEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIUnitySpecDriverSideCarsOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCars) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIUnitySpecDriverSideCarsOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCars) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIUnitySpecDriverSideCarsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCars) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
func (o CSIUnitySpecDriverSideCarsOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCars) map[string]string { return v.NodeSelector }).(pulumi.StringMapOutput)
}

// Tolerations is the list of tolerations for the driver pods
func (o CSIUnitySpecDriverSideCarsOutput) Tolerations() CSIUnitySpecDriverSideCarsTolerationsArrayOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCars) []CSIUnitySpecDriverSideCarsTolerations { return v.Tolerations }).(CSIUnitySpecDriverSideCarsTolerationsArrayOutput)
}

type CSIUnitySpecDriverSideCarsArrayOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverSideCarsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIUnitySpecDriverSideCars)(nil)).Elem()
}

func (o CSIUnitySpecDriverSideCarsArrayOutput) ToCSIUnitySpecDriverSideCarsArrayOutput() CSIUnitySpecDriverSideCarsArrayOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsArrayOutput) ToCSIUnitySpecDriverSideCarsArrayOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsArrayOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsArrayOutput) Index(i pulumi.IntInput) CSIUnitySpecDriverSideCarsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIUnitySpecDriverSideCars {
		return vs[0].([]CSIUnitySpecDriverSideCars)[vs[1].(int)]
	}).(CSIUnitySpecDriverSideCarsOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIUnitySpecDriverSideCarsEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *CSIUnitySpecDriverSideCarsEnvsValueFrom `pulumi:"valueFrom"`
}

// CSIUnitySpecDriverSideCarsEnvsInput is an input type that accepts CSIUnitySpecDriverSideCarsEnvsArgs and CSIUnitySpecDriverSideCarsEnvsOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverSideCarsEnvsInput` via:
//
//          CSIUnitySpecDriverSideCarsEnvsArgs{...}
type CSIUnitySpecDriverSideCarsEnvsInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverSideCarsEnvsOutput() CSIUnitySpecDriverSideCarsEnvsOutput
	ToCSIUnitySpecDriverSideCarsEnvsOutputWithContext(context.Context) CSIUnitySpecDriverSideCarsEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type CSIUnitySpecDriverSideCarsEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom CSIUnitySpecDriverSideCarsEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (CSIUnitySpecDriverSideCarsEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverSideCarsEnvs)(nil)).Elem()
}

func (i CSIUnitySpecDriverSideCarsEnvsArgs) ToCSIUnitySpecDriverSideCarsEnvsOutput() CSIUnitySpecDriverSideCarsEnvsOutput {
	return i.ToCSIUnitySpecDriverSideCarsEnvsOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverSideCarsEnvsArgs) ToCSIUnitySpecDriverSideCarsEnvsOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsEnvsOutput)
}

// CSIUnitySpecDriverSideCarsEnvsArrayInput is an input type that accepts CSIUnitySpecDriverSideCarsEnvsArray and CSIUnitySpecDriverSideCarsEnvsArrayOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverSideCarsEnvsArrayInput` via:
//
//          CSIUnitySpecDriverSideCarsEnvsArray{ CSIUnitySpecDriverSideCarsEnvsArgs{...} }
type CSIUnitySpecDriverSideCarsEnvsArrayInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverSideCarsEnvsArrayOutput() CSIUnitySpecDriverSideCarsEnvsArrayOutput
	ToCSIUnitySpecDriverSideCarsEnvsArrayOutputWithContext(context.Context) CSIUnitySpecDriverSideCarsEnvsArrayOutput
}

type CSIUnitySpecDriverSideCarsEnvsArray []CSIUnitySpecDriverSideCarsEnvsInput

func (CSIUnitySpecDriverSideCarsEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIUnitySpecDriverSideCarsEnvs)(nil)).Elem()
}

func (i CSIUnitySpecDriverSideCarsEnvsArray) ToCSIUnitySpecDriverSideCarsEnvsArrayOutput() CSIUnitySpecDriverSideCarsEnvsArrayOutput {
	return i.ToCSIUnitySpecDriverSideCarsEnvsArrayOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverSideCarsEnvsArray) ToCSIUnitySpecDriverSideCarsEnvsArrayOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIUnitySpecDriverSideCarsEnvsOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverSideCarsEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverSideCarsEnvs)(nil)).Elem()
}

func (o CSIUnitySpecDriverSideCarsEnvsOutput) ToCSIUnitySpecDriverSideCarsEnvsOutput() CSIUnitySpecDriverSideCarsEnvsOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsOutput) ToCSIUnitySpecDriverSideCarsEnvsOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o CSIUnitySpecDriverSideCarsEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o CSIUnitySpecDriverSideCarsEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o CSIUnitySpecDriverSideCarsEnvsOutput) ValueFrom() CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvs) *CSIUnitySpecDriverSideCarsEnvsValueFrom { return v.ValueFrom }).(CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput)
}

type CSIUnitySpecDriverSideCarsEnvsArrayOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverSideCarsEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIUnitySpecDriverSideCarsEnvs)(nil)).Elem()
}

func (o CSIUnitySpecDriverSideCarsEnvsArrayOutput) ToCSIUnitySpecDriverSideCarsEnvsArrayOutput() CSIUnitySpecDriverSideCarsEnvsArrayOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsArrayOutput) ToCSIUnitySpecDriverSideCarsEnvsArrayOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsArrayOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsArrayOutput) Index(i pulumi.IntInput) CSIUnitySpecDriverSideCarsEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIUnitySpecDriverSideCarsEnvs {
		return vs[0].([]CSIUnitySpecDriverSideCarsEnvs)[vs[1].(int)]
	}).(CSIUnitySpecDriverSideCarsEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIUnitySpecDriverSideCarsEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef *CSIUnitySpecDriverSideCarsEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// CSIUnitySpecDriverSideCarsEnvsValueFromInput is an input type that accepts CSIUnitySpecDriverSideCarsEnvsValueFromArgs and CSIUnitySpecDriverSideCarsEnvsValueFromOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverSideCarsEnvsValueFromInput` via:
//
//          CSIUnitySpecDriverSideCarsEnvsValueFromArgs{...}
type CSIUnitySpecDriverSideCarsEnvsValueFromInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverSideCarsEnvsValueFromOutput() CSIUnitySpecDriverSideCarsEnvsValueFromOutput
	ToCSIUnitySpecDriverSideCarsEnvsValueFromOutputWithContext(context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIUnitySpecDriverSideCarsEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (CSIUnitySpecDriverSideCarsEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverSideCarsEnvsValueFrom)(nil)).Elem()
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromOutput() CSIUnitySpecDriverSideCarsEnvsValueFromOutput {
	return i.ToCSIUnitySpecDriverSideCarsEnvsValueFromOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsEnvsValueFromOutput)
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput {
	return i.ToCSIUnitySpecDriverSideCarsEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsEnvsValueFromOutput).ToCSIUnitySpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverSideCarsEnvsValueFromPtrInput is an input type that accepts CSIUnitySpecDriverSideCarsEnvsValueFromArgs, CSIUnitySpecDriverSideCarsEnvsValueFromPtr and CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverSideCarsEnvsValueFromPtrInput` via:
//
//          CSIUnitySpecDriverSideCarsEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverSideCarsEnvsValueFromPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput
	ToCSIUnitySpecDriverSideCarsEnvsValueFromPtrOutputWithContext(context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput
}

type csiunitySpecDriverSideCarsEnvsValueFromPtrType CSIUnitySpecDriverSideCarsEnvsValueFromArgs

func CSIUnitySpecDriverSideCarsEnvsValueFromPtr(v *CSIUnitySpecDriverSideCarsEnvsValueFromArgs) CSIUnitySpecDriverSideCarsEnvsValueFromPtrInput {
	return (*csiunitySpecDriverSideCarsEnvsValueFromPtrType)(v)
}

func (*csiunitySpecDriverSideCarsEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverSideCarsEnvsValueFrom)(nil)).Elem()
}

func (i *csiunitySpecDriverSideCarsEnvsValueFromPtrType) ToCSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput {
	return i.ToCSIUnitySpecDriverSideCarsEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverSideCarsEnvsValueFromPtrType) ToCSIUnitySpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIUnitySpecDriverSideCarsEnvsValueFromOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverSideCarsEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverSideCarsEnvsValueFrom)(nil)).Elem()
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromOutput() CSIUnitySpecDriverSideCarsEnvsValueFromOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput {
	return o.ToCSIUnitySpecDriverSideCarsEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvsValueFrom) *CSIUnitySpecDriverSideCarsEnvsValueFrom {
		return &v
	}).(CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o CSIUnitySpecDriverSideCarsEnvsValueFromOutput) ConfigMapKeyRef() CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvsValueFrom) *CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o CSIUnitySpecDriverSideCarsEnvsValueFromOutput) FieldRef() CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvsValueFrom) *CSIUnitySpecDriverSideCarsEnvsValueFromFieldRef {
		return v.FieldRef
	}).(CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIUnitySpecDriverSideCarsEnvsValueFromOutput) ResourceFieldRef() CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvsValueFrom) *CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIUnitySpecDriverSideCarsEnvsValueFromOutput) SecretKeyRef() CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvsValueFrom) *CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput)
}

type CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverSideCarsEnvsValueFrom)(nil)).Elem()
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput) Elem() CSIUnitySpecDriverSideCarsEnvsValueFromOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverSideCarsEnvsValueFrom) CSIUnitySpecDriverSideCarsEnvsValueFrom { return *v }).(CSIUnitySpecDriverSideCarsEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput) ConfigMapKeyRef() CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverSideCarsEnvsValueFrom) *CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput) FieldRef() CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverSideCarsEnvsValueFrom) *CSIUnitySpecDriverSideCarsEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput) ResourceFieldRef() CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverSideCarsEnvsValueFrom) *CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput) SecretKeyRef() CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverSideCarsEnvsValueFrom) *CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefInput is an input type that accepts CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs and CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefInput` via:
//
//          CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs{...}
type CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput() CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput
	ToCSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput() CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return i.ToCSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput)
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput).ToCSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs, CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtr and CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput
	ToCSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput
}

type csiunitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs

func CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtr(v *CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput {
	return (*csiunitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*csiunitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *csiunitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType) ToCSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType) ToCSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput() CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToCSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
		return &v
	}).(CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) Elem() CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRef) CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
		return *v
	}).(CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIUnitySpecDriverSideCarsEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefInput is an input type that accepts CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefArgs and CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefInput` via:
//
//          CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefArgs{...}
type CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput() CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput
	ToCSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutputWithContext(context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverSideCarsEnvsValueFromFieldRef)(nil)).Elem()
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput() CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return i.ToCSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput)
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput).ToCSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrInput is an input type that accepts CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefArgs, CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtr and CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrInput` via:
//
//          CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput
	ToCSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput
}

type csiunitySpecDriverSideCarsEnvsValueFromFieldRefPtrType CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefArgs

func CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtr(v *CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefArgs) CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrInput {
	return (*csiunitySpecDriverSideCarsEnvsValueFromFieldRefPtrType)(v)
}

func (*csiunitySpecDriverSideCarsEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverSideCarsEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *csiunitySpecDriverSideCarsEnvsValueFromFieldRefPtrType) ToCSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverSideCarsEnvsValueFromFieldRefPtrType) ToCSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverSideCarsEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput() CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o.ToCSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvsValueFromFieldRef) *CSIUnitySpecDriverSideCarsEnvsValueFromFieldRef {
		return &v
	}).(CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverSideCarsEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) Elem() CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverSideCarsEnvsValueFromFieldRef) CSIUnitySpecDriverSideCarsEnvsValueFromFieldRef {
		return *v
	}).(CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverSideCarsEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverSideCarsEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefInput is an input type that accepts CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefArgs and CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefInput` via:
//
//          CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefArgs{...}
type CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput() CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput
	ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutputWithContext(context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput() CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return i.ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput)
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput).ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput is an input type that accepts CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefArgs, CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtr and CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput` via:
//
//          CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput
	ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput
}

type csiunitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefArgs

func CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtr(v *CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput {
	return (*csiunitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*csiunitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *csiunitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType) ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType) ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput() CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRef) *CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRef {
		return &v
	}).(CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) Divisor() CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRef) *CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor {
		return v.Divisor
	}).(CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) Elem() CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRef) CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRef {
		return *v
	}).(CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) Divisor() CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRef) *CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

type CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor struct {
}

// CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorInput is an input type that accepts CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs and CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorInput` via:
//
//          CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs{...}
type CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput() CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput
	ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput
}

type CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs struct {
}

func (CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput() CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput {
	return i.ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput)
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput).ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrInput is an input type that accepts CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs, CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtr and CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrInput` via:
//
//          CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput
	ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput
}

type csiunitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrType CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs

func CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtr(v *CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs) CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrInput {
	return (*csiunitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrType)(v)
}

func (*csiunitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i *csiunitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrType) ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrType) ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput() CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor) *CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor {
		return &v
	}).(CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput) Elem() CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor) CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor {
		return *v
	}).(CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefInput is an input type that accepts CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefArgs and CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefInput` via:
//
//          CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefArgs{...}
type CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput() CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput
	ToCSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutputWithContext(context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput() CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return i.ToCSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput)
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ToCSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput).ToCSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput is an input type that accepts CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefArgs, CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtr and CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput` via:
//
//          CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput
	ToCSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput
}

type csiunitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefArgs

func CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtr(v *CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput {
	return (*csiunitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*csiunitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *csiunitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType) ToCSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *csiunitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType) ToCSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput() CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToCSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRef) *CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRef {
		return &v
	}).(CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) ToCSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) Elem() CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRef) CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRef {
		return *v
	}).(CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIUnitySpecDriverSideCarsNodeSelector struct {
}

// CSIUnitySpecDriverSideCarsNodeSelectorInput is an input type that accepts CSIUnitySpecDriverSideCarsNodeSelectorArgs and CSIUnitySpecDriverSideCarsNodeSelectorOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverSideCarsNodeSelectorInput` via:
//
//          CSIUnitySpecDriverSideCarsNodeSelectorArgs{...}
type CSIUnitySpecDriverSideCarsNodeSelectorInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverSideCarsNodeSelectorOutput() CSIUnitySpecDriverSideCarsNodeSelectorOutput
	ToCSIUnitySpecDriverSideCarsNodeSelectorOutputWithContext(context.Context) CSIUnitySpecDriverSideCarsNodeSelectorOutput
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIUnitySpecDriverSideCarsNodeSelectorArgs struct {
}

func (CSIUnitySpecDriverSideCarsNodeSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverSideCarsNodeSelector)(nil)).Elem()
}

func (i CSIUnitySpecDriverSideCarsNodeSelectorArgs) ToCSIUnitySpecDriverSideCarsNodeSelectorOutput() CSIUnitySpecDriverSideCarsNodeSelectorOutput {
	return i.ToCSIUnitySpecDriverSideCarsNodeSelectorOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverSideCarsNodeSelectorArgs) ToCSIUnitySpecDriverSideCarsNodeSelectorOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsNodeSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsNodeSelectorOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIUnitySpecDriverSideCarsNodeSelectorOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverSideCarsNodeSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverSideCarsNodeSelector)(nil)).Elem()
}

func (o CSIUnitySpecDriverSideCarsNodeSelectorOutput) ToCSIUnitySpecDriverSideCarsNodeSelectorOutput() CSIUnitySpecDriverSideCarsNodeSelectorOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsNodeSelectorOutput) ToCSIUnitySpecDriverSideCarsNodeSelectorOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsNodeSelectorOutput {
	return o
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIUnitySpecDriverSideCarsTolerations struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect *string `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key *string `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator *string `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds *int `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value *string `pulumi:"value"`
}

// CSIUnitySpecDriverSideCarsTolerationsInput is an input type that accepts CSIUnitySpecDriverSideCarsTolerationsArgs and CSIUnitySpecDriverSideCarsTolerationsOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverSideCarsTolerationsInput` via:
//
//          CSIUnitySpecDriverSideCarsTolerationsArgs{...}
type CSIUnitySpecDriverSideCarsTolerationsInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverSideCarsTolerationsOutput() CSIUnitySpecDriverSideCarsTolerationsOutput
	ToCSIUnitySpecDriverSideCarsTolerationsOutputWithContext(context.Context) CSIUnitySpecDriverSideCarsTolerationsOutput
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIUnitySpecDriverSideCarsTolerationsArgs struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect pulumi.StringPtrInput `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds pulumi.IntPtrInput `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (CSIUnitySpecDriverSideCarsTolerationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverSideCarsTolerations)(nil)).Elem()
}

func (i CSIUnitySpecDriverSideCarsTolerationsArgs) ToCSIUnitySpecDriverSideCarsTolerationsOutput() CSIUnitySpecDriverSideCarsTolerationsOutput {
	return i.ToCSIUnitySpecDriverSideCarsTolerationsOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverSideCarsTolerationsArgs) ToCSIUnitySpecDriverSideCarsTolerationsOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsTolerationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsTolerationsOutput)
}

// CSIUnitySpecDriverSideCarsTolerationsArrayInput is an input type that accepts CSIUnitySpecDriverSideCarsTolerationsArray and CSIUnitySpecDriverSideCarsTolerationsArrayOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverSideCarsTolerationsArrayInput` via:
//
//          CSIUnitySpecDriverSideCarsTolerationsArray{ CSIUnitySpecDriverSideCarsTolerationsArgs{...} }
type CSIUnitySpecDriverSideCarsTolerationsArrayInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverSideCarsTolerationsArrayOutput() CSIUnitySpecDriverSideCarsTolerationsArrayOutput
	ToCSIUnitySpecDriverSideCarsTolerationsArrayOutputWithContext(context.Context) CSIUnitySpecDriverSideCarsTolerationsArrayOutput
}

type CSIUnitySpecDriverSideCarsTolerationsArray []CSIUnitySpecDriverSideCarsTolerationsInput

func (CSIUnitySpecDriverSideCarsTolerationsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIUnitySpecDriverSideCarsTolerations)(nil)).Elem()
}

func (i CSIUnitySpecDriverSideCarsTolerationsArray) ToCSIUnitySpecDriverSideCarsTolerationsArrayOutput() CSIUnitySpecDriverSideCarsTolerationsArrayOutput {
	return i.ToCSIUnitySpecDriverSideCarsTolerationsArrayOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverSideCarsTolerationsArray) ToCSIUnitySpecDriverSideCarsTolerationsArrayOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsTolerationsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSideCarsTolerationsArrayOutput)
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIUnitySpecDriverSideCarsTolerationsOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverSideCarsTolerationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverSideCarsTolerations)(nil)).Elem()
}

func (o CSIUnitySpecDriverSideCarsTolerationsOutput) ToCSIUnitySpecDriverSideCarsTolerationsOutput() CSIUnitySpecDriverSideCarsTolerationsOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsTolerationsOutput) ToCSIUnitySpecDriverSideCarsTolerationsOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsTolerationsOutput {
	return o
}

// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
func (o CSIUnitySpecDriverSideCarsTolerationsOutput) Effect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsTolerations) *string { return v.Effect }).(pulumi.StringPtrOutput)
}

// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
func (o CSIUnitySpecDriverSideCarsTolerationsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsTolerations) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
func (o CSIUnitySpecDriverSideCarsTolerationsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsTolerations) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
func (o CSIUnitySpecDriverSideCarsTolerationsOutput) TolerationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsTolerations) *int { return v.TolerationSeconds }).(pulumi.IntPtrOutput)
}

// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
func (o CSIUnitySpecDriverSideCarsTolerationsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSideCarsTolerations) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type CSIUnitySpecDriverSideCarsTolerationsArrayOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverSideCarsTolerationsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIUnitySpecDriverSideCarsTolerations)(nil)).Elem()
}

func (o CSIUnitySpecDriverSideCarsTolerationsArrayOutput) ToCSIUnitySpecDriverSideCarsTolerationsArrayOutput() CSIUnitySpecDriverSideCarsTolerationsArrayOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsTolerationsArrayOutput) ToCSIUnitySpecDriverSideCarsTolerationsArrayOutputWithContext(ctx context.Context) CSIUnitySpecDriverSideCarsTolerationsArrayOutput {
	return o
}

func (o CSIUnitySpecDriverSideCarsTolerationsArrayOutput) Index(i pulumi.IntInput) CSIUnitySpecDriverSideCarsTolerationsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIUnitySpecDriverSideCarsTolerations {
		return vs[0].([]CSIUnitySpecDriverSideCarsTolerations)[vs[1].(int)]
	}).(CSIUnitySpecDriverSideCarsTolerationsOutput)
}

// SnapshotClass represents a VolumeSnapshotClass
type CSIUnitySpecDriverSnapshotClass struct {
	// Name is the name of the Snapshot Class
	Name string `pulumi:"name"`
	// Parameters is a map of driver specific parameters for snapshot class
	Parameters map[string]string `pulumi:"parameters"`
}

// CSIUnitySpecDriverSnapshotClassInput is an input type that accepts CSIUnitySpecDriverSnapshotClassArgs and CSIUnitySpecDriverSnapshotClassOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverSnapshotClassInput` via:
//
//          CSIUnitySpecDriverSnapshotClassArgs{...}
type CSIUnitySpecDriverSnapshotClassInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverSnapshotClassOutput() CSIUnitySpecDriverSnapshotClassOutput
	ToCSIUnitySpecDriverSnapshotClassOutputWithContext(context.Context) CSIUnitySpecDriverSnapshotClassOutput
}

// SnapshotClass represents a VolumeSnapshotClass
type CSIUnitySpecDriverSnapshotClassArgs struct {
	// Name is the name of the Snapshot Class
	Name pulumi.StringInput `pulumi:"name"`
	// Parameters is a map of driver specific parameters for snapshot class
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
}

func (CSIUnitySpecDriverSnapshotClassArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverSnapshotClass)(nil)).Elem()
}

func (i CSIUnitySpecDriverSnapshotClassArgs) ToCSIUnitySpecDriverSnapshotClassOutput() CSIUnitySpecDriverSnapshotClassOutput {
	return i.ToCSIUnitySpecDriverSnapshotClassOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverSnapshotClassArgs) ToCSIUnitySpecDriverSnapshotClassOutputWithContext(ctx context.Context) CSIUnitySpecDriverSnapshotClassOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSnapshotClassOutput)
}

// CSIUnitySpecDriverSnapshotClassArrayInput is an input type that accepts CSIUnitySpecDriverSnapshotClassArray and CSIUnitySpecDriverSnapshotClassArrayOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverSnapshotClassArrayInput` via:
//
//          CSIUnitySpecDriverSnapshotClassArray{ CSIUnitySpecDriverSnapshotClassArgs{...} }
type CSIUnitySpecDriverSnapshotClassArrayInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverSnapshotClassArrayOutput() CSIUnitySpecDriverSnapshotClassArrayOutput
	ToCSIUnitySpecDriverSnapshotClassArrayOutputWithContext(context.Context) CSIUnitySpecDriverSnapshotClassArrayOutput
}

type CSIUnitySpecDriverSnapshotClassArray []CSIUnitySpecDriverSnapshotClassInput

func (CSIUnitySpecDriverSnapshotClassArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIUnitySpecDriverSnapshotClass)(nil)).Elem()
}

func (i CSIUnitySpecDriverSnapshotClassArray) ToCSIUnitySpecDriverSnapshotClassArrayOutput() CSIUnitySpecDriverSnapshotClassArrayOutput {
	return i.ToCSIUnitySpecDriverSnapshotClassArrayOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverSnapshotClassArray) ToCSIUnitySpecDriverSnapshotClassArrayOutputWithContext(ctx context.Context) CSIUnitySpecDriverSnapshotClassArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSnapshotClassArrayOutput)
}

// SnapshotClass represents a VolumeSnapshotClass
type CSIUnitySpecDriverSnapshotClassOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverSnapshotClassOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverSnapshotClass)(nil)).Elem()
}

func (o CSIUnitySpecDriverSnapshotClassOutput) ToCSIUnitySpecDriverSnapshotClassOutput() CSIUnitySpecDriverSnapshotClassOutput {
	return o
}

func (o CSIUnitySpecDriverSnapshotClassOutput) ToCSIUnitySpecDriverSnapshotClassOutputWithContext(ctx context.Context) CSIUnitySpecDriverSnapshotClassOutput {
	return o
}

// Name is the name of the Snapshot Class
func (o CSIUnitySpecDriverSnapshotClassOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSnapshotClass) string { return v.Name }).(pulumi.StringOutput)
}

// Parameters is a map of driver specific parameters for snapshot class
func (o CSIUnitySpecDriverSnapshotClassOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverSnapshotClass) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

type CSIUnitySpecDriverSnapshotClassArrayOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverSnapshotClassArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIUnitySpecDriverSnapshotClass)(nil)).Elem()
}

func (o CSIUnitySpecDriverSnapshotClassArrayOutput) ToCSIUnitySpecDriverSnapshotClassArrayOutput() CSIUnitySpecDriverSnapshotClassArrayOutput {
	return o
}

func (o CSIUnitySpecDriverSnapshotClassArrayOutput) ToCSIUnitySpecDriverSnapshotClassArrayOutputWithContext(ctx context.Context) CSIUnitySpecDriverSnapshotClassArrayOutput {
	return o
}

func (o CSIUnitySpecDriverSnapshotClassArrayOutput) Index(i pulumi.IntInput) CSIUnitySpecDriverSnapshotClassOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIUnitySpecDriverSnapshotClass {
		return vs[0].([]CSIUnitySpecDriverSnapshotClass)[vs[1].(int)]
	}).(CSIUnitySpecDriverSnapshotClassOutput)
}

// Parameters is a map of driver specific parameters for snapshot class
type CSIUnitySpecDriverSnapshotClassParameters struct {
}

// CSIUnitySpecDriverSnapshotClassParametersInput is an input type that accepts CSIUnitySpecDriverSnapshotClassParametersArgs and CSIUnitySpecDriverSnapshotClassParametersOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverSnapshotClassParametersInput` via:
//
//          CSIUnitySpecDriverSnapshotClassParametersArgs{...}
type CSIUnitySpecDriverSnapshotClassParametersInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverSnapshotClassParametersOutput() CSIUnitySpecDriverSnapshotClassParametersOutput
	ToCSIUnitySpecDriverSnapshotClassParametersOutputWithContext(context.Context) CSIUnitySpecDriverSnapshotClassParametersOutput
}

// Parameters is a map of driver specific parameters for snapshot class
type CSIUnitySpecDriverSnapshotClassParametersArgs struct {
}

func (CSIUnitySpecDriverSnapshotClassParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverSnapshotClassParameters)(nil)).Elem()
}

func (i CSIUnitySpecDriverSnapshotClassParametersArgs) ToCSIUnitySpecDriverSnapshotClassParametersOutput() CSIUnitySpecDriverSnapshotClassParametersOutput {
	return i.ToCSIUnitySpecDriverSnapshotClassParametersOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverSnapshotClassParametersArgs) ToCSIUnitySpecDriverSnapshotClassParametersOutputWithContext(ctx context.Context) CSIUnitySpecDriverSnapshotClassParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverSnapshotClassParametersOutput)
}

// Parameters is a map of driver specific parameters for snapshot class
type CSIUnitySpecDriverSnapshotClassParametersOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverSnapshotClassParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverSnapshotClassParameters)(nil)).Elem()
}

func (o CSIUnitySpecDriverSnapshotClassParametersOutput) ToCSIUnitySpecDriverSnapshotClassParametersOutput() CSIUnitySpecDriverSnapshotClassParametersOutput {
	return o
}

func (o CSIUnitySpecDriverSnapshotClassParametersOutput) ToCSIUnitySpecDriverSnapshotClassParametersOutputWithContext(ctx context.Context) CSIUnitySpecDriverSnapshotClassParametersOutput {
	return o
}

// StorageClass represents a kubernetes storage class
type CSIUnitySpecDriverStorageClass struct {
	// AllowVolumeExpansion is a boolean flag which indicates if volumes can be expanded
	AllowVolumeExpansion *bool `pulumi:"allowVolumeExpansion"`
	// Restrict the node topologies where volumes can be dynamically provisioned.
	AllowedTopologies []CSIUnitySpecDriverStorageClassAllowedTopologies `pulumi:"allowedTopologies"`
	// DefaultSc is a boolean flag to indicate if the storage class is going to be marked as default
	Default *bool `pulumi:"default"`
	// Name is the name of the StorageClass
	Name string `pulumi:"name"`
	// Parameters is a map of driver specific storage class
	Parameters map[string]string `pulumi:"parameters"`
	// ReclaimPolicy is the reclaim policy for the storage class
	ReclaimPolicy *string `pulumi:"reclaimPolicy"`
}

// CSIUnitySpecDriverStorageClassInput is an input type that accepts CSIUnitySpecDriverStorageClassArgs and CSIUnitySpecDriverStorageClassOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverStorageClassInput` via:
//
//          CSIUnitySpecDriverStorageClassArgs{...}
type CSIUnitySpecDriverStorageClassInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverStorageClassOutput() CSIUnitySpecDriverStorageClassOutput
	ToCSIUnitySpecDriverStorageClassOutputWithContext(context.Context) CSIUnitySpecDriverStorageClassOutput
}

// StorageClass represents a kubernetes storage class
type CSIUnitySpecDriverStorageClassArgs struct {
	// AllowVolumeExpansion is a boolean flag which indicates if volumes can be expanded
	AllowVolumeExpansion pulumi.BoolPtrInput `pulumi:"allowVolumeExpansion"`
	// Restrict the node topologies where volumes can be dynamically provisioned.
	AllowedTopologies CSIUnitySpecDriverStorageClassAllowedTopologiesArrayInput `pulumi:"allowedTopologies"`
	// DefaultSc is a boolean flag to indicate if the storage class is going to be marked as default
	Default pulumi.BoolPtrInput `pulumi:"default"`
	// Name is the name of the StorageClass
	Name pulumi.StringInput `pulumi:"name"`
	// Parameters is a map of driver specific storage class
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
	// ReclaimPolicy is the reclaim policy for the storage class
	ReclaimPolicy pulumi.StringPtrInput `pulumi:"reclaimPolicy"`
}

func (CSIUnitySpecDriverStorageClassArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverStorageClass)(nil)).Elem()
}

func (i CSIUnitySpecDriverStorageClassArgs) ToCSIUnitySpecDriverStorageClassOutput() CSIUnitySpecDriverStorageClassOutput {
	return i.ToCSIUnitySpecDriverStorageClassOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverStorageClassArgs) ToCSIUnitySpecDriverStorageClassOutputWithContext(ctx context.Context) CSIUnitySpecDriverStorageClassOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverStorageClassOutput)
}

// CSIUnitySpecDriverStorageClassArrayInput is an input type that accepts CSIUnitySpecDriverStorageClassArray and CSIUnitySpecDriverStorageClassArrayOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverStorageClassArrayInput` via:
//
//          CSIUnitySpecDriverStorageClassArray{ CSIUnitySpecDriverStorageClassArgs{...} }
type CSIUnitySpecDriverStorageClassArrayInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverStorageClassArrayOutput() CSIUnitySpecDriverStorageClassArrayOutput
	ToCSIUnitySpecDriverStorageClassArrayOutputWithContext(context.Context) CSIUnitySpecDriverStorageClassArrayOutput
}

type CSIUnitySpecDriverStorageClassArray []CSIUnitySpecDriverStorageClassInput

func (CSIUnitySpecDriverStorageClassArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIUnitySpecDriverStorageClass)(nil)).Elem()
}

func (i CSIUnitySpecDriverStorageClassArray) ToCSIUnitySpecDriverStorageClassArrayOutput() CSIUnitySpecDriverStorageClassArrayOutput {
	return i.ToCSIUnitySpecDriverStorageClassArrayOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverStorageClassArray) ToCSIUnitySpecDriverStorageClassArrayOutputWithContext(ctx context.Context) CSIUnitySpecDriverStorageClassArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverStorageClassArrayOutput)
}

// StorageClass represents a kubernetes storage class
type CSIUnitySpecDriverStorageClassOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverStorageClassOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverStorageClass)(nil)).Elem()
}

func (o CSIUnitySpecDriverStorageClassOutput) ToCSIUnitySpecDriverStorageClassOutput() CSIUnitySpecDriverStorageClassOutput {
	return o
}

func (o CSIUnitySpecDriverStorageClassOutput) ToCSIUnitySpecDriverStorageClassOutputWithContext(ctx context.Context) CSIUnitySpecDriverStorageClassOutput {
	return o
}

// AllowVolumeExpansion is a boolean flag which indicates if volumes can be expanded
func (o CSIUnitySpecDriverStorageClassOutput) AllowVolumeExpansion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverStorageClass) *bool { return v.AllowVolumeExpansion }).(pulumi.BoolPtrOutput)
}

// Restrict the node topologies where volumes can be dynamically provisioned.
func (o CSIUnitySpecDriverStorageClassOutput) AllowedTopologies() CSIUnitySpecDriverStorageClassAllowedTopologiesArrayOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverStorageClass) []CSIUnitySpecDriverStorageClassAllowedTopologies {
		return v.AllowedTopologies
	}).(CSIUnitySpecDriverStorageClassAllowedTopologiesArrayOutput)
}

// DefaultSc is a boolean flag to indicate if the storage class is going to be marked as default
func (o CSIUnitySpecDriverStorageClassOutput) Default() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverStorageClass) *bool { return v.Default }).(pulumi.BoolPtrOutput)
}

// Name is the name of the StorageClass
func (o CSIUnitySpecDriverStorageClassOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverStorageClass) string { return v.Name }).(pulumi.StringOutput)
}

// Parameters is a map of driver specific storage class
func (o CSIUnitySpecDriverStorageClassOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverStorageClass) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

// ReclaimPolicy is the reclaim policy for the storage class
func (o CSIUnitySpecDriverStorageClassOutput) ReclaimPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverStorageClass) *string { return v.ReclaimPolicy }).(pulumi.StringPtrOutput)
}

type CSIUnitySpecDriverStorageClassArrayOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverStorageClassArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIUnitySpecDriverStorageClass)(nil)).Elem()
}

func (o CSIUnitySpecDriverStorageClassArrayOutput) ToCSIUnitySpecDriverStorageClassArrayOutput() CSIUnitySpecDriverStorageClassArrayOutput {
	return o
}

func (o CSIUnitySpecDriverStorageClassArrayOutput) ToCSIUnitySpecDriverStorageClassArrayOutputWithContext(ctx context.Context) CSIUnitySpecDriverStorageClassArrayOutput {
	return o
}

func (o CSIUnitySpecDriverStorageClassArrayOutput) Index(i pulumi.IntInput) CSIUnitySpecDriverStorageClassOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIUnitySpecDriverStorageClass {
		return vs[0].([]CSIUnitySpecDriverStorageClass)[vs[1].(int)]
	}).(CSIUnitySpecDriverStorageClassOutput)
}

// A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.
type CSIUnitySpecDriverStorageClassAllowedTopologies struct {
	// A list of topology selector requirements by labels.
	MatchLabelExpressions []CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressions `pulumi:"matchLabelExpressions"`
}

// CSIUnitySpecDriverStorageClassAllowedTopologiesInput is an input type that accepts CSIUnitySpecDriverStorageClassAllowedTopologiesArgs and CSIUnitySpecDriverStorageClassAllowedTopologiesOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverStorageClassAllowedTopologiesInput` via:
//
//          CSIUnitySpecDriverStorageClassAllowedTopologiesArgs{...}
type CSIUnitySpecDriverStorageClassAllowedTopologiesInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverStorageClassAllowedTopologiesOutput() CSIUnitySpecDriverStorageClassAllowedTopologiesOutput
	ToCSIUnitySpecDriverStorageClassAllowedTopologiesOutputWithContext(context.Context) CSIUnitySpecDriverStorageClassAllowedTopologiesOutput
}

// A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.
type CSIUnitySpecDriverStorageClassAllowedTopologiesArgs struct {
	// A list of topology selector requirements by labels.
	MatchLabelExpressions CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayInput `pulumi:"matchLabelExpressions"`
}

func (CSIUnitySpecDriverStorageClassAllowedTopologiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverStorageClassAllowedTopologies)(nil)).Elem()
}

func (i CSIUnitySpecDriverStorageClassAllowedTopologiesArgs) ToCSIUnitySpecDriverStorageClassAllowedTopologiesOutput() CSIUnitySpecDriverStorageClassAllowedTopologiesOutput {
	return i.ToCSIUnitySpecDriverStorageClassAllowedTopologiesOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverStorageClassAllowedTopologiesArgs) ToCSIUnitySpecDriverStorageClassAllowedTopologiesOutputWithContext(ctx context.Context) CSIUnitySpecDriverStorageClassAllowedTopologiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverStorageClassAllowedTopologiesOutput)
}

// CSIUnitySpecDriverStorageClassAllowedTopologiesArrayInput is an input type that accepts CSIUnitySpecDriverStorageClassAllowedTopologiesArray and CSIUnitySpecDriverStorageClassAllowedTopologiesArrayOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverStorageClassAllowedTopologiesArrayInput` via:
//
//          CSIUnitySpecDriverStorageClassAllowedTopologiesArray{ CSIUnitySpecDriverStorageClassAllowedTopologiesArgs{...} }
type CSIUnitySpecDriverStorageClassAllowedTopologiesArrayInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverStorageClassAllowedTopologiesArrayOutput() CSIUnitySpecDriverStorageClassAllowedTopologiesArrayOutput
	ToCSIUnitySpecDriverStorageClassAllowedTopologiesArrayOutputWithContext(context.Context) CSIUnitySpecDriverStorageClassAllowedTopologiesArrayOutput
}

type CSIUnitySpecDriverStorageClassAllowedTopologiesArray []CSIUnitySpecDriverStorageClassAllowedTopologiesInput

func (CSIUnitySpecDriverStorageClassAllowedTopologiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIUnitySpecDriverStorageClassAllowedTopologies)(nil)).Elem()
}

func (i CSIUnitySpecDriverStorageClassAllowedTopologiesArray) ToCSIUnitySpecDriverStorageClassAllowedTopologiesArrayOutput() CSIUnitySpecDriverStorageClassAllowedTopologiesArrayOutput {
	return i.ToCSIUnitySpecDriverStorageClassAllowedTopologiesArrayOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverStorageClassAllowedTopologiesArray) ToCSIUnitySpecDriverStorageClassAllowedTopologiesArrayOutputWithContext(ctx context.Context) CSIUnitySpecDriverStorageClassAllowedTopologiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverStorageClassAllowedTopologiesArrayOutput)
}

// A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.
type CSIUnitySpecDriverStorageClassAllowedTopologiesOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverStorageClassAllowedTopologiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverStorageClassAllowedTopologies)(nil)).Elem()
}

func (o CSIUnitySpecDriverStorageClassAllowedTopologiesOutput) ToCSIUnitySpecDriverStorageClassAllowedTopologiesOutput() CSIUnitySpecDriverStorageClassAllowedTopologiesOutput {
	return o
}

func (o CSIUnitySpecDriverStorageClassAllowedTopologiesOutput) ToCSIUnitySpecDriverStorageClassAllowedTopologiesOutputWithContext(ctx context.Context) CSIUnitySpecDriverStorageClassAllowedTopologiesOutput {
	return o
}

// A list of topology selector requirements by labels.
func (o CSIUnitySpecDriverStorageClassAllowedTopologiesOutput) MatchLabelExpressions() CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverStorageClassAllowedTopologies) []CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressions {
		return v.MatchLabelExpressions
	}).(CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput)
}

type CSIUnitySpecDriverStorageClassAllowedTopologiesArrayOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverStorageClassAllowedTopologiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIUnitySpecDriverStorageClassAllowedTopologies)(nil)).Elem()
}

func (o CSIUnitySpecDriverStorageClassAllowedTopologiesArrayOutput) ToCSIUnitySpecDriverStorageClassAllowedTopologiesArrayOutput() CSIUnitySpecDriverStorageClassAllowedTopologiesArrayOutput {
	return o
}

func (o CSIUnitySpecDriverStorageClassAllowedTopologiesArrayOutput) ToCSIUnitySpecDriverStorageClassAllowedTopologiesArrayOutputWithContext(ctx context.Context) CSIUnitySpecDriverStorageClassAllowedTopologiesArrayOutput {
	return o
}

func (o CSIUnitySpecDriverStorageClassAllowedTopologiesArrayOutput) Index(i pulumi.IntInput) CSIUnitySpecDriverStorageClassAllowedTopologiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIUnitySpecDriverStorageClassAllowedTopologies {
		return vs[0].([]CSIUnitySpecDriverStorageClassAllowedTopologies)[vs[1].(int)]
	}).(CSIUnitySpecDriverStorageClassAllowedTopologiesOutput)
}

// A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.
type CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressions struct {
	// The label key that the selector applies to.
	Key string `pulumi:"key"`
	// An array of string values. One value must match the label to be selected. Each entry in Values is ORed.
	Values []string `pulumi:"values"`
}

// CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsInput is an input type that accepts CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArgs and CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsInput` via:
//
//          CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArgs{...}
type CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput() CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput
	ToCSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutputWithContext(context.Context) CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput
}

// A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.
type CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArgs struct {
	// The label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// An array of string values. One value must match the label to be selected. Each entry in Values is ORed.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressions)(nil)).Elem()
}

func (i CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArgs) ToCSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput() CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput {
	return i.ToCSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArgs) ToCSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutputWithContext(ctx context.Context) CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput)
}

// CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayInput is an input type that accepts CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArray and CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayInput` via:
//
//          CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArray{ CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArgs{...} }
type CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput() CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput
	ToCSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutputWithContext(context.Context) CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput
}

type CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArray []CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsInput

func (CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressions)(nil)).Elem()
}

func (i CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArray) ToCSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput() CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput {
	return i.ToCSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArray) ToCSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutputWithContext(ctx context.Context) CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput)
}

// A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.
type CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressions)(nil)).Elem()
}

func (o CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput) ToCSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput() CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput {
	return o
}

func (o CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput) ToCSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutputWithContext(ctx context.Context) CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput {
	return o
}

// The label key that the selector applies to.
func (o CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressions) string { return v.Key }).(pulumi.StringOutput)
}

// An array of string values. One value must match the label to be selected. Each entry in Values is ORed.
func (o CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressions) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressions)(nil)).Elem()
}

func (o CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput) ToCSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput() CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput {
	return o
}

func (o CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput) ToCSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutputWithContext(ctx context.Context) CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput {
	return o
}

func (o CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput) Index(i pulumi.IntInput) CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressions {
		return vs[0].([]CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressions)[vs[1].(int)]
	}).(CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput)
}

// Parameters is a map of driver specific storage class
type CSIUnitySpecDriverStorageClassParameters struct {
}

// CSIUnitySpecDriverStorageClassParametersInput is an input type that accepts CSIUnitySpecDriverStorageClassParametersArgs and CSIUnitySpecDriverStorageClassParametersOutput values.
// You can construct a concrete instance of `CSIUnitySpecDriverStorageClassParametersInput` via:
//
//          CSIUnitySpecDriverStorageClassParametersArgs{...}
type CSIUnitySpecDriverStorageClassParametersInput interface {
	pulumi.Input

	ToCSIUnitySpecDriverStorageClassParametersOutput() CSIUnitySpecDriverStorageClassParametersOutput
	ToCSIUnitySpecDriverStorageClassParametersOutputWithContext(context.Context) CSIUnitySpecDriverStorageClassParametersOutput
}

// Parameters is a map of driver specific storage class
type CSIUnitySpecDriverStorageClassParametersArgs struct {
}

func (CSIUnitySpecDriverStorageClassParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverStorageClassParameters)(nil)).Elem()
}

func (i CSIUnitySpecDriverStorageClassParametersArgs) ToCSIUnitySpecDriverStorageClassParametersOutput() CSIUnitySpecDriverStorageClassParametersOutput {
	return i.ToCSIUnitySpecDriverStorageClassParametersOutputWithContext(context.Background())
}

func (i CSIUnitySpecDriverStorageClassParametersArgs) ToCSIUnitySpecDriverStorageClassParametersOutputWithContext(ctx context.Context) CSIUnitySpecDriverStorageClassParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnitySpecDriverStorageClassParametersOutput)
}

// Parameters is a map of driver specific storage class
type CSIUnitySpecDriverStorageClassParametersOutput struct{ *pulumi.OutputState }

func (CSIUnitySpecDriverStorageClassParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnitySpecDriverStorageClassParameters)(nil)).Elem()
}

func (o CSIUnitySpecDriverStorageClassParametersOutput) ToCSIUnitySpecDriverStorageClassParametersOutput() CSIUnitySpecDriverStorageClassParametersOutput {
	return o
}

func (o CSIUnitySpecDriverStorageClassParametersOutput) ToCSIUnitySpecDriverStorageClassParametersOutputWithContext(ctx context.Context) CSIUnitySpecDriverStorageClassParametersOutput {
	return o
}

// DriverStatus defines the observed state of CSIDriver
type CSIUnityStatus struct {
	// ControllerStatus is the status of Controller pods
	ControllerStatus *CSIUnityStatusControllerStatus `pulumi:"controllerStatus"`
	// DriverHash is a hash of the driver specification
	DriverHash *int `pulumi:"driverHash"`
	// LastUpdate is the last updated state of the driver
	LastUpdate *CSIUnityStatusLastUpdate `pulumi:"lastUpdate"`
	// NodeStatus is the status of Controller pods
	NodeStatus *CSIUnityStatusNodeStatus `pulumi:"nodeStatus"`
	// State is the state of the driver installation
	State *string `pulumi:"state"`
}

// CSIUnityStatusInput is an input type that accepts CSIUnityStatusArgs and CSIUnityStatusOutput values.
// You can construct a concrete instance of `CSIUnityStatusInput` via:
//
//          CSIUnityStatusArgs{...}
type CSIUnityStatusInput interface {
	pulumi.Input

	ToCSIUnityStatusOutput() CSIUnityStatusOutput
	ToCSIUnityStatusOutputWithContext(context.Context) CSIUnityStatusOutput
}

// DriverStatus defines the observed state of CSIDriver
type CSIUnityStatusArgs struct {
	// ControllerStatus is the status of Controller pods
	ControllerStatus CSIUnityStatusControllerStatusPtrInput `pulumi:"controllerStatus"`
	// DriverHash is a hash of the driver specification
	DriverHash pulumi.IntPtrInput `pulumi:"driverHash"`
	// LastUpdate is the last updated state of the driver
	LastUpdate CSIUnityStatusLastUpdatePtrInput `pulumi:"lastUpdate"`
	// NodeStatus is the status of Controller pods
	NodeStatus CSIUnityStatusNodeStatusPtrInput `pulumi:"nodeStatus"`
	// State is the state of the driver installation
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (CSIUnityStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnityStatus)(nil)).Elem()
}

func (i CSIUnityStatusArgs) ToCSIUnityStatusOutput() CSIUnityStatusOutput {
	return i.ToCSIUnityStatusOutputWithContext(context.Background())
}

func (i CSIUnityStatusArgs) ToCSIUnityStatusOutputWithContext(ctx context.Context) CSIUnityStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnityStatusOutput)
}

func (i CSIUnityStatusArgs) ToCSIUnityStatusPtrOutput() CSIUnityStatusPtrOutput {
	return i.ToCSIUnityStatusPtrOutputWithContext(context.Background())
}

func (i CSIUnityStatusArgs) ToCSIUnityStatusPtrOutputWithContext(ctx context.Context) CSIUnityStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnityStatusOutput).ToCSIUnityStatusPtrOutputWithContext(ctx)
}

// CSIUnityStatusPtrInput is an input type that accepts CSIUnityStatusArgs, CSIUnityStatusPtr and CSIUnityStatusPtrOutput values.
// You can construct a concrete instance of `CSIUnityStatusPtrInput` via:
//
//          CSIUnityStatusArgs{...}
//
//  or:
//
//          nil
type CSIUnityStatusPtrInput interface {
	pulumi.Input

	ToCSIUnityStatusPtrOutput() CSIUnityStatusPtrOutput
	ToCSIUnityStatusPtrOutputWithContext(context.Context) CSIUnityStatusPtrOutput
}

type csiunityStatusPtrType CSIUnityStatusArgs

func CSIUnityStatusPtr(v *CSIUnityStatusArgs) CSIUnityStatusPtrInput {
	return (*csiunityStatusPtrType)(v)
}

func (*csiunityStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnityStatus)(nil)).Elem()
}

func (i *csiunityStatusPtrType) ToCSIUnityStatusPtrOutput() CSIUnityStatusPtrOutput {
	return i.ToCSIUnityStatusPtrOutputWithContext(context.Background())
}

func (i *csiunityStatusPtrType) ToCSIUnityStatusPtrOutputWithContext(ctx context.Context) CSIUnityStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnityStatusPtrOutput)
}

// DriverStatus defines the observed state of CSIDriver
type CSIUnityStatusOutput struct{ *pulumi.OutputState }

func (CSIUnityStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnityStatus)(nil)).Elem()
}

func (o CSIUnityStatusOutput) ToCSIUnityStatusOutput() CSIUnityStatusOutput {
	return o
}

func (o CSIUnityStatusOutput) ToCSIUnityStatusOutputWithContext(ctx context.Context) CSIUnityStatusOutput {
	return o
}

func (o CSIUnityStatusOutput) ToCSIUnityStatusPtrOutput() CSIUnityStatusPtrOutput {
	return o.ToCSIUnityStatusPtrOutputWithContext(context.Background())
}

func (o CSIUnityStatusOutput) ToCSIUnityStatusPtrOutputWithContext(ctx context.Context) CSIUnityStatusPtrOutput {
	return o.ApplyT(func(v CSIUnityStatus) *CSIUnityStatus {
		return &v
	}).(CSIUnityStatusPtrOutput)
}

// ControllerStatus is the status of Controller pods
func (o CSIUnityStatusOutput) ControllerStatus() CSIUnityStatusControllerStatusPtrOutput {
	return o.ApplyT(func(v CSIUnityStatus) *CSIUnityStatusControllerStatus { return v.ControllerStatus }).(CSIUnityStatusControllerStatusPtrOutput)
}

// DriverHash is a hash of the driver specification
func (o CSIUnityStatusOutput) DriverHash() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIUnityStatus) *int { return v.DriverHash }).(pulumi.IntPtrOutput)
}

// LastUpdate is the last updated state of the driver
func (o CSIUnityStatusOutput) LastUpdate() CSIUnityStatusLastUpdatePtrOutput {
	return o.ApplyT(func(v CSIUnityStatus) *CSIUnityStatusLastUpdate { return v.LastUpdate }).(CSIUnityStatusLastUpdatePtrOutput)
}

// NodeStatus is the status of Controller pods
func (o CSIUnityStatusOutput) NodeStatus() CSIUnityStatusNodeStatusPtrOutput {
	return o.ApplyT(func(v CSIUnityStatus) *CSIUnityStatusNodeStatus { return v.NodeStatus }).(CSIUnityStatusNodeStatusPtrOutput)
}

// State is the state of the driver installation
func (o CSIUnityStatusOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnityStatus) *string { return v.State }).(pulumi.StringPtrOutput)
}

type CSIUnityStatusPtrOutput struct{ *pulumi.OutputState }

func (CSIUnityStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnityStatus)(nil)).Elem()
}

func (o CSIUnityStatusPtrOutput) ToCSIUnityStatusPtrOutput() CSIUnityStatusPtrOutput {
	return o
}

func (o CSIUnityStatusPtrOutput) ToCSIUnityStatusPtrOutputWithContext(ctx context.Context) CSIUnityStatusPtrOutput {
	return o
}

func (o CSIUnityStatusPtrOutput) Elem() CSIUnityStatusOutput {
	return o.ApplyT(func(v *CSIUnityStatus) CSIUnityStatus { return *v }).(CSIUnityStatusOutput)
}

// ControllerStatus is the status of Controller pods
func (o CSIUnityStatusPtrOutput) ControllerStatus() CSIUnityStatusControllerStatusPtrOutput {
	return o.ApplyT(func(v *CSIUnityStatus) *CSIUnityStatusControllerStatus {
		if v == nil {
			return nil
		}
		return v.ControllerStatus
	}).(CSIUnityStatusControllerStatusPtrOutput)
}

// DriverHash is a hash of the driver specification
func (o CSIUnityStatusPtrOutput) DriverHash() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CSIUnityStatus) *int {
		if v == nil {
			return nil
		}
		return v.DriverHash
	}).(pulumi.IntPtrOutput)
}

// LastUpdate is the last updated state of the driver
func (o CSIUnityStatusPtrOutput) LastUpdate() CSIUnityStatusLastUpdatePtrOutput {
	return o.ApplyT(func(v *CSIUnityStatus) *CSIUnityStatusLastUpdate {
		if v == nil {
			return nil
		}
		return v.LastUpdate
	}).(CSIUnityStatusLastUpdatePtrOutput)
}

// NodeStatus is the status of Controller pods
func (o CSIUnityStatusPtrOutput) NodeStatus() CSIUnityStatusNodeStatusPtrOutput {
	return o.ApplyT(func(v *CSIUnityStatus) *CSIUnityStatusNodeStatus {
		if v == nil {
			return nil
		}
		return v.NodeStatus
	}).(CSIUnityStatusNodeStatusPtrOutput)
}

// State is the state of the driver installation
func (o CSIUnityStatusPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnityStatus) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// ControllerStatus is the status of Controller pods
type CSIUnityStatusControllerStatus struct {
	Available []string `pulumi:"available"`
	Ready     []string `pulumi:"ready"`
	Starting  []string `pulumi:"starting"`
	Stopped   []string `pulumi:"stopped"`
}

// CSIUnityStatusControllerStatusInput is an input type that accepts CSIUnityStatusControllerStatusArgs and CSIUnityStatusControllerStatusOutput values.
// You can construct a concrete instance of `CSIUnityStatusControllerStatusInput` via:
//
//          CSIUnityStatusControllerStatusArgs{...}
type CSIUnityStatusControllerStatusInput interface {
	pulumi.Input

	ToCSIUnityStatusControllerStatusOutput() CSIUnityStatusControllerStatusOutput
	ToCSIUnityStatusControllerStatusOutputWithContext(context.Context) CSIUnityStatusControllerStatusOutput
}

// ControllerStatus is the status of Controller pods
type CSIUnityStatusControllerStatusArgs struct {
	Available pulumi.StringArrayInput `pulumi:"available"`
	Ready     pulumi.StringArrayInput `pulumi:"ready"`
	Starting  pulumi.StringArrayInput `pulumi:"starting"`
	Stopped   pulumi.StringArrayInput `pulumi:"stopped"`
}

func (CSIUnityStatusControllerStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnityStatusControllerStatus)(nil)).Elem()
}

func (i CSIUnityStatusControllerStatusArgs) ToCSIUnityStatusControllerStatusOutput() CSIUnityStatusControllerStatusOutput {
	return i.ToCSIUnityStatusControllerStatusOutputWithContext(context.Background())
}

func (i CSIUnityStatusControllerStatusArgs) ToCSIUnityStatusControllerStatusOutputWithContext(ctx context.Context) CSIUnityStatusControllerStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnityStatusControllerStatusOutput)
}

func (i CSIUnityStatusControllerStatusArgs) ToCSIUnityStatusControllerStatusPtrOutput() CSIUnityStatusControllerStatusPtrOutput {
	return i.ToCSIUnityStatusControllerStatusPtrOutputWithContext(context.Background())
}

func (i CSIUnityStatusControllerStatusArgs) ToCSIUnityStatusControllerStatusPtrOutputWithContext(ctx context.Context) CSIUnityStatusControllerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnityStatusControllerStatusOutput).ToCSIUnityStatusControllerStatusPtrOutputWithContext(ctx)
}

// CSIUnityStatusControllerStatusPtrInput is an input type that accepts CSIUnityStatusControllerStatusArgs, CSIUnityStatusControllerStatusPtr and CSIUnityStatusControllerStatusPtrOutput values.
// You can construct a concrete instance of `CSIUnityStatusControllerStatusPtrInput` via:
//
//          CSIUnityStatusControllerStatusArgs{...}
//
//  or:
//
//          nil
type CSIUnityStatusControllerStatusPtrInput interface {
	pulumi.Input

	ToCSIUnityStatusControllerStatusPtrOutput() CSIUnityStatusControllerStatusPtrOutput
	ToCSIUnityStatusControllerStatusPtrOutputWithContext(context.Context) CSIUnityStatusControllerStatusPtrOutput
}

type csiunityStatusControllerStatusPtrType CSIUnityStatusControllerStatusArgs

func CSIUnityStatusControllerStatusPtr(v *CSIUnityStatusControllerStatusArgs) CSIUnityStatusControllerStatusPtrInput {
	return (*csiunityStatusControllerStatusPtrType)(v)
}

func (*csiunityStatusControllerStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnityStatusControllerStatus)(nil)).Elem()
}

func (i *csiunityStatusControllerStatusPtrType) ToCSIUnityStatusControllerStatusPtrOutput() CSIUnityStatusControllerStatusPtrOutput {
	return i.ToCSIUnityStatusControllerStatusPtrOutputWithContext(context.Background())
}

func (i *csiunityStatusControllerStatusPtrType) ToCSIUnityStatusControllerStatusPtrOutputWithContext(ctx context.Context) CSIUnityStatusControllerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnityStatusControllerStatusPtrOutput)
}

// ControllerStatus is the status of Controller pods
type CSIUnityStatusControllerStatusOutput struct{ *pulumi.OutputState }

func (CSIUnityStatusControllerStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnityStatusControllerStatus)(nil)).Elem()
}

func (o CSIUnityStatusControllerStatusOutput) ToCSIUnityStatusControllerStatusOutput() CSIUnityStatusControllerStatusOutput {
	return o
}

func (o CSIUnityStatusControllerStatusOutput) ToCSIUnityStatusControllerStatusOutputWithContext(ctx context.Context) CSIUnityStatusControllerStatusOutput {
	return o
}

func (o CSIUnityStatusControllerStatusOutput) ToCSIUnityStatusControllerStatusPtrOutput() CSIUnityStatusControllerStatusPtrOutput {
	return o.ToCSIUnityStatusControllerStatusPtrOutputWithContext(context.Background())
}

func (o CSIUnityStatusControllerStatusOutput) ToCSIUnityStatusControllerStatusPtrOutputWithContext(ctx context.Context) CSIUnityStatusControllerStatusPtrOutput {
	return o.ApplyT(func(v CSIUnityStatusControllerStatus) *CSIUnityStatusControllerStatus {
		return &v
	}).(CSIUnityStatusControllerStatusPtrOutput)
}
func (o CSIUnityStatusControllerStatusOutput) Available() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIUnityStatusControllerStatus) []string { return v.Available }).(pulumi.StringArrayOutput)
}

func (o CSIUnityStatusControllerStatusOutput) Ready() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIUnityStatusControllerStatus) []string { return v.Ready }).(pulumi.StringArrayOutput)
}

func (o CSIUnityStatusControllerStatusOutput) Starting() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIUnityStatusControllerStatus) []string { return v.Starting }).(pulumi.StringArrayOutput)
}

func (o CSIUnityStatusControllerStatusOutput) Stopped() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIUnityStatusControllerStatus) []string { return v.Stopped }).(pulumi.StringArrayOutput)
}

type CSIUnityStatusControllerStatusPtrOutput struct{ *pulumi.OutputState }

func (CSIUnityStatusControllerStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnityStatusControllerStatus)(nil)).Elem()
}

func (o CSIUnityStatusControllerStatusPtrOutput) ToCSIUnityStatusControllerStatusPtrOutput() CSIUnityStatusControllerStatusPtrOutput {
	return o
}

func (o CSIUnityStatusControllerStatusPtrOutput) ToCSIUnityStatusControllerStatusPtrOutputWithContext(ctx context.Context) CSIUnityStatusControllerStatusPtrOutput {
	return o
}

func (o CSIUnityStatusControllerStatusPtrOutput) Elem() CSIUnityStatusControllerStatusOutput {
	return o.ApplyT(func(v *CSIUnityStatusControllerStatus) CSIUnityStatusControllerStatus { return *v }).(CSIUnityStatusControllerStatusOutput)
}

func (o CSIUnityStatusControllerStatusPtrOutput) Available() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIUnityStatusControllerStatus) []string {
		if v == nil {
			return nil
		}
		return v.Available
	}).(pulumi.StringArrayOutput)
}

func (o CSIUnityStatusControllerStatusPtrOutput) Ready() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIUnityStatusControllerStatus) []string {
		if v == nil {
			return nil
		}
		return v.Ready
	}).(pulumi.StringArrayOutput)
}

func (o CSIUnityStatusControllerStatusPtrOutput) Starting() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIUnityStatusControllerStatus) []string {
		if v == nil {
			return nil
		}
		return v.Starting
	}).(pulumi.StringArrayOutput)
}

func (o CSIUnityStatusControllerStatusPtrOutput) Stopped() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIUnityStatusControllerStatus) []string {
		if v == nil {
			return nil
		}
		return v.Stopped
	}).(pulumi.StringArrayOutput)
}

// LastUpdate is the last updated state of the driver
type CSIUnityStatusLastUpdate struct {
	// Condition is the last known condition of the Custom Resource
	Condition *string `pulumi:"condition"`
	// ErrorMessage is the last error message associated with the condition
	ErrorMessage *string `pulumi:"errorMessage"`
	// Time is the time stamp for the last condition update
	Time *string `pulumi:"time"`
}

// CSIUnityStatusLastUpdateInput is an input type that accepts CSIUnityStatusLastUpdateArgs and CSIUnityStatusLastUpdateOutput values.
// You can construct a concrete instance of `CSIUnityStatusLastUpdateInput` via:
//
//          CSIUnityStatusLastUpdateArgs{...}
type CSIUnityStatusLastUpdateInput interface {
	pulumi.Input

	ToCSIUnityStatusLastUpdateOutput() CSIUnityStatusLastUpdateOutput
	ToCSIUnityStatusLastUpdateOutputWithContext(context.Context) CSIUnityStatusLastUpdateOutput
}

// LastUpdate is the last updated state of the driver
type CSIUnityStatusLastUpdateArgs struct {
	// Condition is the last known condition of the Custom Resource
	Condition pulumi.StringPtrInput `pulumi:"condition"`
	// ErrorMessage is the last error message associated with the condition
	ErrorMessage pulumi.StringPtrInput `pulumi:"errorMessage"`
	// Time is the time stamp for the last condition update
	Time pulumi.StringPtrInput `pulumi:"time"`
}

func (CSIUnityStatusLastUpdateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnityStatusLastUpdate)(nil)).Elem()
}

func (i CSIUnityStatusLastUpdateArgs) ToCSIUnityStatusLastUpdateOutput() CSIUnityStatusLastUpdateOutput {
	return i.ToCSIUnityStatusLastUpdateOutputWithContext(context.Background())
}

func (i CSIUnityStatusLastUpdateArgs) ToCSIUnityStatusLastUpdateOutputWithContext(ctx context.Context) CSIUnityStatusLastUpdateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnityStatusLastUpdateOutput)
}

func (i CSIUnityStatusLastUpdateArgs) ToCSIUnityStatusLastUpdatePtrOutput() CSIUnityStatusLastUpdatePtrOutput {
	return i.ToCSIUnityStatusLastUpdatePtrOutputWithContext(context.Background())
}

func (i CSIUnityStatusLastUpdateArgs) ToCSIUnityStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIUnityStatusLastUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnityStatusLastUpdateOutput).ToCSIUnityStatusLastUpdatePtrOutputWithContext(ctx)
}

// CSIUnityStatusLastUpdatePtrInput is an input type that accepts CSIUnityStatusLastUpdateArgs, CSIUnityStatusLastUpdatePtr and CSIUnityStatusLastUpdatePtrOutput values.
// You can construct a concrete instance of `CSIUnityStatusLastUpdatePtrInput` via:
//
//          CSIUnityStatusLastUpdateArgs{...}
//
//  or:
//
//          nil
type CSIUnityStatusLastUpdatePtrInput interface {
	pulumi.Input

	ToCSIUnityStatusLastUpdatePtrOutput() CSIUnityStatusLastUpdatePtrOutput
	ToCSIUnityStatusLastUpdatePtrOutputWithContext(context.Context) CSIUnityStatusLastUpdatePtrOutput
}

type csiunityStatusLastUpdatePtrType CSIUnityStatusLastUpdateArgs

func CSIUnityStatusLastUpdatePtr(v *CSIUnityStatusLastUpdateArgs) CSIUnityStatusLastUpdatePtrInput {
	return (*csiunityStatusLastUpdatePtrType)(v)
}

func (*csiunityStatusLastUpdatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnityStatusLastUpdate)(nil)).Elem()
}

func (i *csiunityStatusLastUpdatePtrType) ToCSIUnityStatusLastUpdatePtrOutput() CSIUnityStatusLastUpdatePtrOutput {
	return i.ToCSIUnityStatusLastUpdatePtrOutputWithContext(context.Background())
}

func (i *csiunityStatusLastUpdatePtrType) ToCSIUnityStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIUnityStatusLastUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnityStatusLastUpdatePtrOutput)
}

// LastUpdate is the last updated state of the driver
type CSIUnityStatusLastUpdateOutput struct{ *pulumi.OutputState }

func (CSIUnityStatusLastUpdateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnityStatusLastUpdate)(nil)).Elem()
}

func (o CSIUnityStatusLastUpdateOutput) ToCSIUnityStatusLastUpdateOutput() CSIUnityStatusLastUpdateOutput {
	return o
}

func (o CSIUnityStatusLastUpdateOutput) ToCSIUnityStatusLastUpdateOutputWithContext(ctx context.Context) CSIUnityStatusLastUpdateOutput {
	return o
}

func (o CSIUnityStatusLastUpdateOutput) ToCSIUnityStatusLastUpdatePtrOutput() CSIUnityStatusLastUpdatePtrOutput {
	return o.ToCSIUnityStatusLastUpdatePtrOutputWithContext(context.Background())
}

func (o CSIUnityStatusLastUpdateOutput) ToCSIUnityStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIUnityStatusLastUpdatePtrOutput {
	return o.ApplyT(func(v CSIUnityStatusLastUpdate) *CSIUnityStatusLastUpdate {
		return &v
	}).(CSIUnityStatusLastUpdatePtrOutput)
}

// Condition is the last known condition of the Custom Resource
func (o CSIUnityStatusLastUpdateOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnityStatusLastUpdate) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

// ErrorMessage is the last error message associated with the condition
func (o CSIUnityStatusLastUpdateOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnityStatusLastUpdate) *string { return v.ErrorMessage }).(pulumi.StringPtrOutput)
}

// Time is the time stamp for the last condition update
func (o CSIUnityStatusLastUpdateOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIUnityStatusLastUpdate) *string { return v.Time }).(pulumi.StringPtrOutput)
}

type CSIUnityStatusLastUpdatePtrOutput struct{ *pulumi.OutputState }

func (CSIUnityStatusLastUpdatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnityStatusLastUpdate)(nil)).Elem()
}

func (o CSIUnityStatusLastUpdatePtrOutput) ToCSIUnityStatusLastUpdatePtrOutput() CSIUnityStatusLastUpdatePtrOutput {
	return o
}

func (o CSIUnityStatusLastUpdatePtrOutput) ToCSIUnityStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIUnityStatusLastUpdatePtrOutput {
	return o
}

func (o CSIUnityStatusLastUpdatePtrOutput) Elem() CSIUnityStatusLastUpdateOutput {
	return o.ApplyT(func(v *CSIUnityStatusLastUpdate) CSIUnityStatusLastUpdate { return *v }).(CSIUnityStatusLastUpdateOutput)
}

// Condition is the last known condition of the Custom Resource
func (o CSIUnityStatusLastUpdatePtrOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnityStatusLastUpdate) *string {
		if v == nil {
			return nil
		}
		return v.Condition
	}).(pulumi.StringPtrOutput)
}

// ErrorMessage is the last error message associated with the condition
func (o CSIUnityStatusLastUpdatePtrOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnityStatusLastUpdate) *string {
		if v == nil {
			return nil
		}
		return v.ErrorMessage
	}).(pulumi.StringPtrOutput)
}

// Time is the time stamp for the last condition update
func (o CSIUnityStatusLastUpdatePtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIUnityStatusLastUpdate) *string {
		if v == nil {
			return nil
		}
		return v.Time
	}).(pulumi.StringPtrOutput)
}

// NodeStatus is the status of Controller pods
type CSIUnityStatusNodeStatus struct {
	Available []string `pulumi:"available"`
	Ready     []string `pulumi:"ready"`
	Starting  []string `pulumi:"starting"`
	Stopped   []string `pulumi:"stopped"`
}

// CSIUnityStatusNodeStatusInput is an input type that accepts CSIUnityStatusNodeStatusArgs and CSIUnityStatusNodeStatusOutput values.
// You can construct a concrete instance of `CSIUnityStatusNodeStatusInput` via:
//
//          CSIUnityStatusNodeStatusArgs{...}
type CSIUnityStatusNodeStatusInput interface {
	pulumi.Input

	ToCSIUnityStatusNodeStatusOutput() CSIUnityStatusNodeStatusOutput
	ToCSIUnityStatusNodeStatusOutputWithContext(context.Context) CSIUnityStatusNodeStatusOutput
}

// NodeStatus is the status of Controller pods
type CSIUnityStatusNodeStatusArgs struct {
	Available pulumi.StringArrayInput `pulumi:"available"`
	Ready     pulumi.StringArrayInput `pulumi:"ready"`
	Starting  pulumi.StringArrayInput `pulumi:"starting"`
	Stopped   pulumi.StringArrayInput `pulumi:"stopped"`
}

func (CSIUnityStatusNodeStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnityStatusNodeStatus)(nil)).Elem()
}

func (i CSIUnityStatusNodeStatusArgs) ToCSIUnityStatusNodeStatusOutput() CSIUnityStatusNodeStatusOutput {
	return i.ToCSIUnityStatusNodeStatusOutputWithContext(context.Background())
}

func (i CSIUnityStatusNodeStatusArgs) ToCSIUnityStatusNodeStatusOutputWithContext(ctx context.Context) CSIUnityStatusNodeStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnityStatusNodeStatusOutput)
}

func (i CSIUnityStatusNodeStatusArgs) ToCSIUnityStatusNodeStatusPtrOutput() CSIUnityStatusNodeStatusPtrOutput {
	return i.ToCSIUnityStatusNodeStatusPtrOutputWithContext(context.Background())
}

func (i CSIUnityStatusNodeStatusArgs) ToCSIUnityStatusNodeStatusPtrOutputWithContext(ctx context.Context) CSIUnityStatusNodeStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnityStatusNodeStatusOutput).ToCSIUnityStatusNodeStatusPtrOutputWithContext(ctx)
}

// CSIUnityStatusNodeStatusPtrInput is an input type that accepts CSIUnityStatusNodeStatusArgs, CSIUnityStatusNodeStatusPtr and CSIUnityStatusNodeStatusPtrOutput values.
// You can construct a concrete instance of `CSIUnityStatusNodeStatusPtrInput` via:
//
//          CSIUnityStatusNodeStatusArgs{...}
//
//  or:
//
//          nil
type CSIUnityStatusNodeStatusPtrInput interface {
	pulumi.Input

	ToCSIUnityStatusNodeStatusPtrOutput() CSIUnityStatusNodeStatusPtrOutput
	ToCSIUnityStatusNodeStatusPtrOutputWithContext(context.Context) CSIUnityStatusNodeStatusPtrOutput
}

type csiunityStatusNodeStatusPtrType CSIUnityStatusNodeStatusArgs

func CSIUnityStatusNodeStatusPtr(v *CSIUnityStatusNodeStatusArgs) CSIUnityStatusNodeStatusPtrInput {
	return (*csiunityStatusNodeStatusPtrType)(v)
}

func (*csiunityStatusNodeStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnityStatusNodeStatus)(nil)).Elem()
}

func (i *csiunityStatusNodeStatusPtrType) ToCSIUnityStatusNodeStatusPtrOutput() CSIUnityStatusNodeStatusPtrOutput {
	return i.ToCSIUnityStatusNodeStatusPtrOutputWithContext(context.Background())
}

func (i *csiunityStatusNodeStatusPtrType) ToCSIUnityStatusNodeStatusPtrOutputWithContext(ctx context.Context) CSIUnityStatusNodeStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIUnityStatusNodeStatusPtrOutput)
}

// NodeStatus is the status of Controller pods
type CSIUnityStatusNodeStatusOutput struct{ *pulumi.OutputState }

func (CSIUnityStatusNodeStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIUnityStatusNodeStatus)(nil)).Elem()
}

func (o CSIUnityStatusNodeStatusOutput) ToCSIUnityStatusNodeStatusOutput() CSIUnityStatusNodeStatusOutput {
	return o
}

func (o CSIUnityStatusNodeStatusOutput) ToCSIUnityStatusNodeStatusOutputWithContext(ctx context.Context) CSIUnityStatusNodeStatusOutput {
	return o
}

func (o CSIUnityStatusNodeStatusOutput) ToCSIUnityStatusNodeStatusPtrOutput() CSIUnityStatusNodeStatusPtrOutput {
	return o.ToCSIUnityStatusNodeStatusPtrOutputWithContext(context.Background())
}

func (o CSIUnityStatusNodeStatusOutput) ToCSIUnityStatusNodeStatusPtrOutputWithContext(ctx context.Context) CSIUnityStatusNodeStatusPtrOutput {
	return o.ApplyT(func(v CSIUnityStatusNodeStatus) *CSIUnityStatusNodeStatus {
		return &v
	}).(CSIUnityStatusNodeStatusPtrOutput)
}
func (o CSIUnityStatusNodeStatusOutput) Available() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIUnityStatusNodeStatus) []string { return v.Available }).(pulumi.StringArrayOutput)
}

func (o CSIUnityStatusNodeStatusOutput) Ready() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIUnityStatusNodeStatus) []string { return v.Ready }).(pulumi.StringArrayOutput)
}

func (o CSIUnityStatusNodeStatusOutput) Starting() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIUnityStatusNodeStatus) []string { return v.Starting }).(pulumi.StringArrayOutput)
}

func (o CSIUnityStatusNodeStatusOutput) Stopped() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIUnityStatusNodeStatus) []string { return v.Stopped }).(pulumi.StringArrayOutput)
}

type CSIUnityStatusNodeStatusPtrOutput struct{ *pulumi.OutputState }

func (CSIUnityStatusNodeStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIUnityStatusNodeStatus)(nil)).Elem()
}

func (o CSIUnityStatusNodeStatusPtrOutput) ToCSIUnityStatusNodeStatusPtrOutput() CSIUnityStatusNodeStatusPtrOutput {
	return o
}

func (o CSIUnityStatusNodeStatusPtrOutput) ToCSIUnityStatusNodeStatusPtrOutputWithContext(ctx context.Context) CSIUnityStatusNodeStatusPtrOutput {
	return o
}

func (o CSIUnityStatusNodeStatusPtrOutput) Elem() CSIUnityStatusNodeStatusOutput {
	return o.ApplyT(func(v *CSIUnityStatusNodeStatus) CSIUnityStatusNodeStatus { return *v }).(CSIUnityStatusNodeStatusOutput)
}

func (o CSIUnityStatusNodeStatusPtrOutput) Available() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIUnityStatusNodeStatus) []string {
		if v == nil {
			return nil
		}
		return v.Available
	}).(pulumi.StringArrayOutput)
}

func (o CSIUnityStatusNodeStatusPtrOutput) Ready() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIUnityStatusNodeStatus) []string {
		if v == nil {
			return nil
		}
		return v.Ready
	}).(pulumi.StringArrayOutput)
}

func (o CSIUnityStatusNodeStatusPtrOutput) Starting() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIUnityStatusNodeStatus) []string {
		if v == nil {
			return nil
		}
		return v.Starting
	}).(pulumi.StringArrayOutput)
}

func (o CSIUnityStatusNodeStatusPtrOutput) Stopped() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIUnityStatusNodeStatus) []string {
		if v == nil {
			return nil
		}
		return v.Stopped
	}).(pulumi.StringArrayOutput)
}

// CSIVXFlexOS is the Schema for the csivxflexoses API
type CSIVXFlexOSType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// CSIVXFlexOSSpec defines the desired state of CSIVXFlexOS
	Spec *CSIVXFlexOSSpec `pulumi:"spec"`
	// DriverStatus defines the observed state of CSIDriver
	Status *CSIVXFlexOSStatus `pulumi:"status"`
}

// CSIVXFlexOSTypeInput is an input type that accepts CSIVXFlexOSTypeArgs and CSIVXFlexOSTypeOutput values.
// You can construct a concrete instance of `CSIVXFlexOSTypeInput` via:
//
//          CSIVXFlexOSTypeArgs{...}
type CSIVXFlexOSTypeInput interface {
	pulumi.Input

	ToCSIVXFlexOSTypeOutput() CSIVXFlexOSTypeOutput
	ToCSIVXFlexOSTypeOutputWithContext(context.Context) CSIVXFlexOSTypeOutput
}

// CSIVXFlexOS is the Schema for the csivxflexoses API
type CSIVXFlexOSTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// CSIVXFlexOSSpec defines the desired state of CSIVXFlexOS
	Spec CSIVXFlexOSSpecPtrInput `pulumi:"spec"`
	// DriverStatus defines the observed state of CSIDriver
	Status CSIVXFlexOSStatusPtrInput `pulumi:"status"`
}

func (CSIVXFlexOSTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSType)(nil)).Elem()
}

func (i CSIVXFlexOSTypeArgs) ToCSIVXFlexOSTypeOutput() CSIVXFlexOSTypeOutput {
	return i.ToCSIVXFlexOSTypeOutputWithContext(context.Background())
}

func (i CSIVXFlexOSTypeArgs) ToCSIVXFlexOSTypeOutputWithContext(ctx context.Context) CSIVXFlexOSTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSTypeOutput)
}

// CSIVXFlexOS is the Schema for the csivxflexoses API
type CSIVXFlexOSTypeOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSType)(nil)).Elem()
}

func (o CSIVXFlexOSTypeOutput) ToCSIVXFlexOSTypeOutput() CSIVXFlexOSTypeOutput {
	return o
}

func (o CSIVXFlexOSTypeOutput) ToCSIVXFlexOSTypeOutputWithContext(ctx context.Context) CSIVXFlexOSTypeOutput {
	return o
}

func (o CSIVXFlexOSTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o CSIVXFlexOSTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o CSIVXFlexOSTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// CSIVXFlexOSSpec defines the desired state of CSIVXFlexOS
func (o CSIVXFlexOSTypeOutput) Spec() CSIVXFlexOSSpecPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSType) *CSIVXFlexOSSpec { return v.Spec }).(CSIVXFlexOSSpecPtrOutput)
}

// DriverStatus defines the observed state of CSIDriver
func (o CSIVXFlexOSTypeOutput) Status() CSIVXFlexOSStatusPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSType) *CSIVXFlexOSStatus { return v.Status }).(CSIVXFlexOSStatusPtrOutput)
}

type CSIVXFlexOSMetadata struct {
}

// CSIVXFlexOSMetadataInput is an input type that accepts CSIVXFlexOSMetadataArgs and CSIVXFlexOSMetadataOutput values.
// You can construct a concrete instance of `CSIVXFlexOSMetadataInput` via:
//
//          CSIVXFlexOSMetadataArgs{...}
type CSIVXFlexOSMetadataInput interface {
	pulumi.Input

	ToCSIVXFlexOSMetadataOutput() CSIVXFlexOSMetadataOutput
	ToCSIVXFlexOSMetadataOutputWithContext(context.Context) CSIVXFlexOSMetadataOutput
}

type CSIVXFlexOSMetadataArgs struct {
}

func (CSIVXFlexOSMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSMetadata)(nil)).Elem()
}

func (i CSIVXFlexOSMetadataArgs) ToCSIVXFlexOSMetadataOutput() CSIVXFlexOSMetadataOutput {
	return i.ToCSIVXFlexOSMetadataOutputWithContext(context.Background())
}

func (i CSIVXFlexOSMetadataArgs) ToCSIVXFlexOSMetadataOutputWithContext(ctx context.Context) CSIVXFlexOSMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSMetadataOutput)
}

type CSIVXFlexOSMetadataOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSMetadata)(nil)).Elem()
}

func (o CSIVXFlexOSMetadataOutput) ToCSIVXFlexOSMetadataOutput() CSIVXFlexOSMetadataOutput {
	return o
}

func (o CSIVXFlexOSMetadataOutput) ToCSIVXFlexOSMetadataOutputWithContext(ctx context.Context) CSIVXFlexOSMetadataOutput {
	return o
}

// CSIVXFlexOSSpec defines the desired state of CSIVXFlexOS
type CSIVXFlexOSSpec struct {
	// Driver is the specification for the CSI VxFlexOS Driver
	Driver CSIVXFlexOSSpecDriver `pulumi:"driver"`
}

// CSIVXFlexOSSpecInput is an input type that accepts CSIVXFlexOSSpecArgs and CSIVXFlexOSSpecOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecInput` via:
//
//          CSIVXFlexOSSpecArgs{...}
type CSIVXFlexOSSpecInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecOutput() CSIVXFlexOSSpecOutput
	ToCSIVXFlexOSSpecOutputWithContext(context.Context) CSIVXFlexOSSpecOutput
}

// CSIVXFlexOSSpec defines the desired state of CSIVXFlexOS
type CSIVXFlexOSSpecArgs struct {
	// Driver is the specification for the CSI VxFlexOS Driver
	Driver CSIVXFlexOSSpecDriverInput `pulumi:"driver"`
}

func (CSIVXFlexOSSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpec)(nil)).Elem()
}

func (i CSIVXFlexOSSpecArgs) ToCSIVXFlexOSSpecOutput() CSIVXFlexOSSpecOutput {
	return i.ToCSIVXFlexOSSpecOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecArgs) ToCSIVXFlexOSSpecOutputWithContext(ctx context.Context) CSIVXFlexOSSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecOutput)
}

func (i CSIVXFlexOSSpecArgs) ToCSIVXFlexOSSpecPtrOutput() CSIVXFlexOSSpecPtrOutput {
	return i.ToCSIVXFlexOSSpecPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecArgs) ToCSIVXFlexOSSpecPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecOutput).ToCSIVXFlexOSSpecPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecPtrInput is an input type that accepts CSIVXFlexOSSpecArgs, CSIVXFlexOSSpecPtr and CSIVXFlexOSSpecPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecPtrInput` via:
//
//          CSIVXFlexOSSpecArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecPtrOutput() CSIVXFlexOSSpecPtrOutput
	ToCSIVXFlexOSSpecPtrOutputWithContext(context.Context) CSIVXFlexOSSpecPtrOutput
}

type csivxflexOSSpecPtrType CSIVXFlexOSSpecArgs

func CSIVXFlexOSSpecPtr(v *CSIVXFlexOSSpecArgs) CSIVXFlexOSSpecPtrInput {
	return (*csivxflexOSSpecPtrType)(v)
}

func (*csivxflexOSSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpec)(nil)).Elem()
}

func (i *csivxflexOSSpecPtrType) ToCSIVXFlexOSSpecPtrOutput() CSIVXFlexOSSpecPtrOutput {
	return i.ToCSIVXFlexOSSpecPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecPtrType) ToCSIVXFlexOSSpecPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecPtrOutput)
}

// CSIVXFlexOSSpec defines the desired state of CSIVXFlexOS
type CSIVXFlexOSSpecOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpec)(nil)).Elem()
}

func (o CSIVXFlexOSSpecOutput) ToCSIVXFlexOSSpecOutput() CSIVXFlexOSSpecOutput {
	return o
}

func (o CSIVXFlexOSSpecOutput) ToCSIVXFlexOSSpecOutputWithContext(ctx context.Context) CSIVXFlexOSSpecOutput {
	return o
}

func (o CSIVXFlexOSSpecOutput) ToCSIVXFlexOSSpecPtrOutput() CSIVXFlexOSSpecPtrOutput {
	return o.ToCSIVXFlexOSSpecPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecOutput) ToCSIVXFlexOSSpecPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpec) *CSIVXFlexOSSpec {
		return &v
	}).(CSIVXFlexOSSpecPtrOutput)
}

// Driver is the specification for the CSI VxFlexOS Driver
func (o CSIVXFlexOSSpecOutput) Driver() CSIVXFlexOSSpecDriverOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpec) CSIVXFlexOSSpecDriver { return v.Driver }).(CSIVXFlexOSSpecDriverOutput)
}

type CSIVXFlexOSSpecPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpec)(nil)).Elem()
}

func (o CSIVXFlexOSSpecPtrOutput) ToCSIVXFlexOSSpecPtrOutput() CSIVXFlexOSSpecPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecPtrOutput) ToCSIVXFlexOSSpecPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecPtrOutput) Elem() CSIVXFlexOSSpecOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpec) CSIVXFlexOSSpec { return *v }).(CSIVXFlexOSSpecOutput)
}

// Driver is the specification for the CSI VxFlexOS Driver
func (o CSIVXFlexOSSpecPtrOutput) Driver() CSIVXFlexOSSpecDriverPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpec) *CSIVXFlexOSSpecDriver {
		if v == nil {
			return nil
		}
		return &v.Driver
	}).(CSIVXFlexOSSpecDriverPtrOutput)
}

// Driver is the specification for the CSI VxFlexOS Driver
type CSIVXFlexOSSpecDriver struct {
	// AuthSecret is the name of the credentials secret for the driver
	AuthSecret *string `pulumi:"authSecret"`
	// Common is the common specification for both controller and node plugins
	Common CSIVXFlexOSSpecDriverCommon `pulumi:"common"`
	// ConfigVersion is the configuration version of the driver
	ConfigVersion string `pulumi:"configVersion"`
	// Controller is the specification for Controller plugin only
	Controller *CSIVXFlexOSSpecDriverController `pulumi:"controller"`
	// ForceUpdate is the boolean flag used to force an update of the driver instance
	ForceUpdate *bool `pulumi:"forceUpdate"`
	// Node is the specification for Node plugin only
	Node *CSIVXFlexOSSpecDriverNode `pulumi:"node"`
	// Replicas is the count of controllers for Controller plugin
	Replicas int `pulumi:"replicas"`
	// SideCars is the specification for CSI sidecar containers
	SideCars []CSIVXFlexOSSpecDriverSideCars `pulumi:"sideCars"`
	// SnapshotClass is the specification for Snapshot Classes
	SnapshotClass []CSIVXFlexOSSpecDriverSnapshotClass `pulumi:"snapshotClass"`
	// StorageClass is the specification for Storage Classes
	StorageClass []CSIVXFlexOSSpecDriverStorageClass `pulumi:"storageClass"`
	// TLSCertSecret is the name of the TLS Cert secret
	TlsCertSecret *string `pulumi:"tlsCertSecret"`
}

// CSIVXFlexOSSpecDriverInput is an input type that accepts CSIVXFlexOSSpecDriverArgs and CSIVXFlexOSSpecDriverOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverInput` via:
//
//          CSIVXFlexOSSpecDriverArgs{...}
type CSIVXFlexOSSpecDriverInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverOutput() CSIVXFlexOSSpecDriverOutput
	ToCSIVXFlexOSSpecDriverOutputWithContext(context.Context) CSIVXFlexOSSpecDriverOutput
}

// Driver is the specification for the CSI VxFlexOS Driver
type CSIVXFlexOSSpecDriverArgs struct {
	// AuthSecret is the name of the credentials secret for the driver
	AuthSecret pulumi.StringPtrInput `pulumi:"authSecret"`
	// Common is the common specification for both controller and node plugins
	Common CSIVXFlexOSSpecDriverCommonInput `pulumi:"common"`
	// ConfigVersion is the configuration version of the driver
	ConfigVersion pulumi.StringInput `pulumi:"configVersion"`
	// Controller is the specification for Controller plugin only
	Controller CSIVXFlexOSSpecDriverControllerPtrInput `pulumi:"controller"`
	// ForceUpdate is the boolean flag used to force an update of the driver instance
	ForceUpdate pulumi.BoolPtrInput `pulumi:"forceUpdate"`
	// Node is the specification for Node plugin only
	Node CSIVXFlexOSSpecDriverNodePtrInput `pulumi:"node"`
	// Replicas is the count of controllers for Controller plugin
	Replicas pulumi.IntInput `pulumi:"replicas"`
	// SideCars is the specification for CSI sidecar containers
	SideCars CSIVXFlexOSSpecDriverSideCarsArrayInput `pulumi:"sideCars"`
	// SnapshotClass is the specification for Snapshot Classes
	SnapshotClass CSIVXFlexOSSpecDriverSnapshotClassArrayInput `pulumi:"snapshotClass"`
	// StorageClass is the specification for Storage Classes
	StorageClass CSIVXFlexOSSpecDriverStorageClassArrayInput `pulumi:"storageClass"`
	// TLSCertSecret is the name of the TLS Cert secret
	TlsCertSecret pulumi.StringPtrInput `pulumi:"tlsCertSecret"`
}

func (CSIVXFlexOSSpecDriverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriver)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverArgs) ToCSIVXFlexOSSpecDriverOutput() CSIVXFlexOSSpecDriverOutput {
	return i.ToCSIVXFlexOSSpecDriverOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverArgs) ToCSIVXFlexOSSpecDriverOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverOutput)
}

func (i CSIVXFlexOSSpecDriverArgs) ToCSIVXFlexOSSpecDriverPtrOutput() CSIVXFlexOSSpecDriverPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverArgs) ToCSIVXFlexOSSpecDriverPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverOutput).ToCSIVXFlexOSSpecDriverPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverPtrInput is an input type that accepts CSIVXFlexOSSpecDriverArgs, CSIVXFlexOSSpecDriverPtr and CSIVXFlexOSSpecDriverPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverPtrInput` via:
//
//          CSIVXFlexOSSpecDriverArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverPtrOutput() CSIVXFlexOSSpecDriverPtrOutput
	ToCSIVXFlexOSSpecDriverPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverPtrOutput
}

type csivxflexOSSpecDriverPtrType CSIVXFlexOSSpecDriverArgs

func CSIVXFlexOSSpecDriverPtr(v *CSIVXFlexOSSpecDriverArgs) CSIVXFlexOSSpecDriverPtrInput {
	return (*csivxflexOSSpecDriverPtrType)(v)
}

func (*csivxflexOSSpecDriverPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriver)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverPtrType) ToCSIVXFlexOSSpecDriverPtrOutput() CSIVXFlexOSSpecDriverPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverPtrType) ToCSIVXFlexOSSpecDriverPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverPtrOutput)
}

// Driver is the specification for the CSI VxFlexOS Driver
type CSIVXFlexOSSpecDriverOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriver)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverOutput) ToCSIVXFlexOSSpecDriverOutput() CSIVXFlexOSSpecDriverOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverOutput) ToCSIVXFlexOSSpecDriverOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverOutput) ToCSIVXFlexOSSpecDriverPtrOutput() CSIVXFlexOSSpecDriverPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverOutput) ToCSIVXFlexOSSpecDriverPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriver) *CSIVXFlexOSSpecDriver {
		return &v
	}).(CSIVXFlexOSSpecDriverPtrOutput)
}

// AuthSecret is the name of the credentials secret for the driver
func (o CSIVXFlexOSSpecDriverOutput) AuthSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriver) *string { return v.AuthSecret }).(pulumi.StringPtrOutput)
}

// Common is the common specification for both controller and node plugins
func (o CSIVXFlexOSSpecDriverOutput) Common() CSIVXFlexOSSpecDriverCommonOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriver) CSIVXFlexOSSpecDriverCommon { return v.Common }).(CSIVXFlexOSSpecDriverCommonOutput)
}

// ConfigVersion is the configuration version of the driver
func (o CSIVXFlexOSSpecDriverOutput) ConfigVersion() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriver) string { return v.ConfigVersion }).(pulumi.StringOutput)
}

// Controller is the specification for Controller plugin only
func (o CSIVXFlexOSSpecDriverOutput) Controller() CSIVXFlexOSSpecDriverControllerPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriver) *CSIVXFlexOSSpecDriverController { return v.Controller }).(CSIVXFlexOSSpecDriverControllerPtrOutput)
}

// ForceUpdate is the boolean flag used to force an update of the driver instance
func (o CSIVXFlexOSSpecDriverOutput) ForceUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriver) *bool { return v.ForceUpdate }).(pulumi.BoolPtrOutput)
}

// Node is the specification for Node plugin only
func (o CSIVXFlexOSSpecDriverOutput) Node() CSIVXFlexOSSpecDriverNodePtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriver) *CSIVXFlexOSSpecDriverNode { return v.Node }).(CSIVXFlexOSSpecDriverNodePtrOutput)
}

// Replicas is the count of controllers for Controller plugin
func (o CSIVXFlexOSSpecDriverOutput) Replicas() pulumi.IntOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriver) int { return v.Replicas }).(pulumi.IntOutput)
}

// SideCars is the specification for CSI sidecar containers
func (o CSIVXFlexOSSpecDriverOutput) SideCars() CSIVXFlexOSSpecDriverSideCarsArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriver) []CSIVXFlexOSSpecDriverSideCars { return v.SideCars }).(CSIVXFlexOSSpecDriverSideCarsArrayOutput)
}

// SnapshotClass is the specification for Snapshot Classes
func (o CSIVXFlexOSSpecDriverOutput) SnapshotClass() CSIVXFlexOSSpecDriverSnapshotClassArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriver) []CSIVXFlexOSSpecDriverSnapshotClass { return v.SnapshotClass }).(CSIVXFlexOSSpecDriverSnapshotClassArrayOutput)
}

// StorageClass is the specification for Storage Classes
func (o CSIVXFlexOSSpecDriverOutput) StorageClass() CSIVXFlexOSSpecDriverStorageClassArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriver) []CSIVXFlexOSSpecDriverStorageClass { return v.StorageClass }).(CSIVXFlexOSSpecDriverStorageClassArrayOutput)
}

// TLSCertSecret is the name of the TLS Cert secret
func (o CSIVXFlexOSSpecDriverOutput) TlsCertSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriver) *string { return v.TlsCertSecret }).(pulumi.StringPtrOutput)
}

type CSIVXFlexOSSpecDriverPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriver)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverPtrOutput) ToCSIVXFlexOSSpecDriverPtrOutput() CSIVXFlexOSSpecDriverPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverPtrOutput) ToCSIVXFlexOSSpecDriverPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverPtrOutput) Elem() CSIVXFlexOSSpecDriverOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriver) CSIVXFlexOSSpecDriver { return *v }).(CSIVXFlexOSSpecDriverOutput)
}

// AuthSecret is the name of the credentials secret for the driver
func (o CSIVXFlexOSSpecDriverPtrOutput) AuthSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriver) *string {
		if v == nil {
			return nil
		}
		return v.AuthSecret
	}).(pulumi.StringPtrOutput)
}

// Common is the common specification for both controller and node plugins
func (o CSIVXFlexOSSpecDriverPtrOutput) Common() CSIVXFlexOSSpecDriverCommonPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriver) *CSIVXFlexOSSpecDriverCommon {
		if v == nil {
			return nil
		}
		return &v.Common
	}).(CSIVXFlexOSSpecDriverCommonPtrOutput)
}

// ConfigVersion is the configuration version of the driver
func (o CSIVXFlexOSSpecDriverPtrOutput) ConfigVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriver) *string {
		if v == nil {
			return nil
		}
		return &v.ConfigVersion
	}).(pulumi.StringPtrOutput)
}

// Controller is the specification for Controller plugin only
func (o CSIVXFlexOSSpecDriverPtrOutput) Controller() CSIVXFlexOSSpecDriverControllerPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriver) *CSIVXFlexOSSpecDriverController {
		if v == nil {
			return nil
		}
		return v.Controller
	}).(CSIVXFlexOSSpecDriverControllerPtrOutput)
}

// ForceUpdate is the boolean flag used to force an update of the driver instance
func (o CSIVXFlexOSSpecDriverPtrOutput) ForceUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriver) *bool {
		if v == nil {
			return nil
		}
		return v.ForceUpdate
	}).(pulumi.BoolPtrOutput)
}

// Node is the specification for Node plugin only
func (o CSIVXFlexOSSpecDriverPtrOutput) Node() CSIVXFlexOSSpecDriverNodePtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriver) *CSIVXFlexOSSpecDriverNode {
		if v == nil {
			return nil
		}
		return v.Node
	}).(CSIVXFlexOSSpecDriverNodePtrOutput)
}

// Replicas is the count of controllers for Controller plugin
func (o CSIVXFlexOSSpecDriverPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriver) *int {
		if v == nil {
			return nil
		}
		return &v.Replicas
	}).(pulumi.IntPtrOutput)
}

// SideCars is the specification for CSI sidecar containers
func (o CSIVXFlexOSSpecDriverPtrOutput) SideCars() CSIVXFlexOSSpecDriverSideCarsArrayOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriver) []CSIVXFlexOSSpecDriverSideCars {
		if v == nil {
			return nil
		}
		return v.SideCars
	}).(CSIVXFlexOSSpecDriverSideCarsArrayOutput)
}

// SnapshotClass is the specification for Snapshot Classes
func (o CSIVXFlexOSSpecDriverPtrOutput) SnapshotClass() CSIVXFlexOSSpecDriverSnapshotClassArrayOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriver) []CSIVXFlexOSSpecDriverSnapshotClass {
		if v == nil {
			return nil
		}
		return v.SnapshotClass
	}).(CSIVXFlexOSSpecDriverSnapshotClassArrayOutput)
}

// StorageClass is the specification for Storage Classes
func (o CSIVXFlexOSSpecDriverPtrOutput) StorageClass() CSIVXFlexOSSpecDriverStorageClassArrayOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriver) []CSIVXFlexOSSpecDriverStorageClass {
		if v == nil {
			return nil
		}
		return v.StorageClass
	}).(CSIVXFlexOSSpecDriverStorageClassArrayOutput)
}

// TLSCertSecret is the name of the TLS Cert secret
func (o CSIVXFlexOSSpecDriverPtrOutput) TlsCertSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriver) *string {
		if v == nil {
			return nil
		}
		return v.TlsCertSecret
	}).(pulumi.StringPtrOutput)
}

// Common is the common specification for both controller and node plugins
type CSIVXFlexOSSpecDriverCommon struct {
	// Args is the set of arguments for the container
	Args []string `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs []CSIVXFlexOSSpecDriverCommonEnvs `pulumi:"envs"`
	// Image is the image tag for the Container
	Image *string `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name *string `pulumi:"name"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
	NodeSelector map[string]string `pulumi:"nodeSelector"`
	// Tolerations is the list of tolerations for the driver pods
	Tolerations []CSIVXFlexOSSpecDriverCommonTolerations `pulumi:"tolerations"`
}

// CSIVXFlexOSSpecDriverCommonInput is an input type that accepts CSIVXFlexOSSpecDriverCommonArgs and CSIVXFlexOSSpecDriverCommonOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverCommonInput` via:
//
//          CSIVXFlexOSSpecDriverCommonArgs{...}
type CSIVXFlexOSSpecDriverCommonInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverCommonOutput() CSIVXFlexOSSpecDriverCommonOutput
	ToCSIVXFlexOSSpecDriverCommonOutputWithContext(context.Context) CSIVXFlexOSSpecDriverCommonOutput
}

// Common is the common specification for both controller and node plugins
type CSIVXFlexOSSpecDriverCommonArgs struct {
	// Args is the set of arguments for the container
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs CSIVXFlexOSSpecDriverCommonEnvsArrayInput `pulumi:"envs"`
	// Image is the image tag for the Container
	Image pulumi.StringPtrInput `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name pulumi.StringPtrInput `pulumi:"name"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
	NodeSelector pulumi.StringMapInput `pulumi:"nodeSelector"`
	// Tolerations is the list of tolerations for the driver pods
	Tolerations CSIVXFlexOSSpecDriverCommonTolerationsArrayInput `pulumi:"tolerations"`
}

func (CSIVXFlexOSSpecDriverCommonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverCommon)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverCommonArgs) ToCSIVXFlexOSSpecDriverCommonOutput() CSIVXFlexOSSpecDriverCommonOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverCommonArgs) ToCSIVXFlexOSSpecDriverCommonOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonOutput)
}

func (i CSIVXFlexOSSpecDriverCommonArgs) ToCSIVXFlexOSSpecDriverCommonPtrOutput() CSIVXFlexOSSpecDriverCommonPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverCommonArgs) ToCSIVXFlexOSSpecDriverCommonPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonOutput).ToCSIVXFlexOSSpecDriverCommonPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverCommonPtrInput is an input type that accepts CSIVXFlexOSSpecDriverCommonArgs, CSIVXFlexOSSpecDriverCommonPtr and CSIVXFlexOSSpecDriverCommonPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverCommonPtrInput` via:
//
//          CSIVXFlexOSSpecDriverCommonArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverCommonPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverCommonPtrOutput() CSIVXFlexOSSpecDriverCommonPtrOutput
	ToCSIVXFlexOSSpecDriverCommonPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverCommonPtrOutput
}

type csivxflexOSSpecDriverCommonPtrType CSIVXFlexOSSpecDriverCommonArgs

func CSIVXFlexOSSpecDriverCommonPtr(v *CSIVXFlexOSSpecDriverCommonArgs) CSIVXFlexOSSpecDriverCommonPtrInput {
	return (*csivxflexOSSpecDriverCommonPtrType)(v)
}

func (*csivxflexOSSpecDriverCommonPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverCommon)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverCommonPtrType) ToCSIVXFlexOSSpecDriverCommonPtrOutput() CSIVXFlexOSSpecDriverCommonPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverCommonPtrType) ToCSIVXFlexOSSpecDriverCommonPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonPtrOutput)
}

// Common is the common specification for both controller and node plugins
type CSIVXFlexOSSpecDriverCommonOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverCommonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverCommon)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverCommonOutput) ToCSIVXFlexOSSpecDriverCommonOutput() CSIVXFlexOSSpecDriverCommonOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonOutput) ToCSIVXFlexOSSpecDriverCommonOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonOutput) ToCSIVXFlexOSSpecDriverCommonPtrOutput() CSIVXFlexOSSpecDriverCommonPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverCommonPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverCommonOutput) ToCSIVXFlexOSSpecDriverCommonPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommon) *CSIVXFlexOSSpecDriverCommon {
		return &v
	}).(CSIVXFlexOSSpecDriverCommonPtrOutput)
}

// Args is the set of arguments for the container
func (o CSIVXFlexOSSpecDriverCommonOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommon) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIVXFlexOSSpecDriverCommonOutput) Envs() CSIVXFlexOSSpecDriverCommonEnvsArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommon) []CSIVXFlexOSSpecDriverCommonEnvs { return v.Envs }).(CSIVXFlexOSSpecDriverCommonEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIVXFlexOSSpecDriverCommonOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommon) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIVXFlexOSSpecDriverCommonOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommon) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIVXFlexOSSpecDriverCommonOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommon) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
func (o CSIVXFlexOSSpecDriverCommonOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommon) map[string]string { return v.NodeSelector }).(pulumi.StringMapOutput)
}

// Tolerations is the list of tolerations for the driver pods
func (o CSIVXFlexOSSpecDriverCommonOutput) Tolerations() CSIVXFlexOSSpecDriverCommonTolerationsArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommon) []CSIVXFlexOSSpecDriverCommonTolerations { return v.Tolerations }).(CSIVXFlexOSSpecDriverCommonTolerationsArrayOutput)
}

type CSIVXFlexOSSpecDriverCommonPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverCommonPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverCommon)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverCommonPtrOutput) ToCSIVXFlexOSSpecDriverCommonPtrOutput() CSIVXFlexOSSpecDriverCommonPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonPtrOutput) ToCSIVXFlexOSSpecDriverCommonPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonPtrOutput) Elem() CSIVXFlexOSSpecDriverCommonOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommon) CSIVXFlexOSSpecDriverCommon { return *v }).(CSIVXFlexOSSpecDriverCommonOutput)
}

// Args is the set of arguments for the container
func (o CSIVXFlexOSSpecDriverCommonPtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommon) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIVXFlexOSSpecDriverCommonPtrOutput) Envs() CSIVXFlexOSSpecDriverCommonEnvsArrayOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommon) []CSIVXFlexOSSpecDriverCommonEnvs {
		if v == nil {
			return nil
		}
		return v.Envs
	}).(CSIVXFlexOSSpecDriverCommonEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIVXFlexOSSpecDriverCommonPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommon) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIVXFlexOSSpecDriverCommonPtrOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommon) *string {
		if v == nil {
			return nil
		}
		return v.ImagePullPolicy
	}).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIVXFlexOSSpecDriverCommonPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommon) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
func (o CSIVXFlexOSSpecDriverCommonPtrOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommon) map[string]string {
		if v == nil {
			return nil
		}
		return v.NodeSelector
	}).(pulumi.StringMapOutput)
}

// Tolerations is the list of tolerations for the driver pods
func (o CSIVXFlexOSSpecDriverCommonPtrOutput) Tolerations() CSIVXFlexOSSpecDriverCommonTolerationsArrayOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommon) []CSIVXFlexOSSpecDriverCommonTolerations {
		if v == nil {
			return nil
		}
		return v.Tolerations
	}).(CSIVXFlexOSSpecDriverCommonTolerationsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIVXFlexOSSpecDriverCommonEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *CSIVXFlexOSSpecDriverCommonEnvsValueFrom `pulumi:"valueFrom"`
}

// CSIVXFlexOSSpecDriverCommonEnvsInput is an input type that accepts CSIVXFlexOSSpecDriverCommonEnvsArgs and CSIVXFlexOSSpecDriverCommonEnvsOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverCommonEnvsInput` via:
//
//          CSIVXFlexOSSpecDriverCommonEnvsArgs{...}
type CSIVXFlexOSSpecDriverCommonEnvsInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverCommonEnvsOutput() CSIVXFlexOSSpecDriverCommonEnvsOutput
	ToCSIVXFlexOSSpecDriverCommonEnvsOutputWithContext(context.Context) CSIVXFlexOSSpecDriverCommonEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type CSIVXFlexOSSpecDriverCommonEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (CSIVXFlexOSSpecDriverCommonEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverCommonEnvs)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverCommonEnvsArgs) ToCSIVXFlexOSSpecDriverCommonEnvsOutput() CSIVXFlexOSSpecDriverCommonEnvsOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonEnvsOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverCommonEnvsArgs) ToCSIVXFlexOSSpecDriverCommonEnvsOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonEnvsOutput)
}

// CSIVXFlexOSSpecDriverCommonEnvsArrayInput is an input type that accepts CSIVXFlexOSSpecDriverCommonEnvsArray and CSIVXFlexOSSpecDriverCommonEnvsArrayOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverCommonEnvsArrayInput` via:
//
//          CSIVXFlexOSSpecDriverCommonEnvsArray{ CSIVXFlexOSSpecDriverCommonEnvsArgs{...} }
type CSIVXFlexOSSpecDriverCommonEnvsArrayInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverCommonEnvsArrayOutput() CSIVXFlexOSSpecDriverCommonEnvsArrayOutput
	ToCSIVXFlexOSSpecDriverCommonEnvsArrayOutputWithContext(context.Context) CSIVXFlexOSSpecDriverCommonEnvsArrayOutput
}

type CSIVXFlexOSSpecDriverCommonEnvsArray []CSIVXFlexOSSpecDriverCommonEnvsInput

func (CSIVXFlexOSSpecDriverCommonEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIVXFlexOSSpecDriverCommonEnvs)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverCommonEnvsArray) ToCSIVXFlexOSSpecDriverCommonEnvsArrayOutput() CSIVXFlexOSSpecDriverCommonEnvsArrayOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonEnvsArrayOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverCommonEnvsArray) ToCSIVXFlexOSSpecDriverCommonEnvsArrayOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIVXFlexOSSpecDriverCommonEnvsOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverCommonEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverCommonEnvs)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverCommonEnvsOutput) ToCSIVXFlexOSSpecDriverCommonEnvsOutput() CSIVXFlexOSSpecDriverCommonEnvsOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsOutput) ToCSIVXFlexOSSpecDriverCommonEnvsOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o CSIVXFlexOSSpecDriverCommonEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o CSIVXFlexOSSpecDriverCommonEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o CSIVXFlexOSSpecDriverCommonEnvsOutput) ValueFrom() CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvs) *CSIVXFlexOSSpecDriverCommonEnvsValueFrom { return v.ValueFrom }).(CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput)
}

type CSIVXFlexOSSpecDriverCommonEnvsArrayOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverCommonEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIVXFlexOSSpecDriverCommonEnvs)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverCommonEnvsArrayOutput) ToCSIVXFlexOSSpecDriverCommonEnvsArrayOutput() CSIVXFlexOSSpecDriverCommonEnvsArrayOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsArrayOutput) ToCSIVXFlexOSSpecDriverCommonEnvsArrayOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsArrayOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsArrayOutput) Index(i pulumi.IntInput) CSIVXFlexOSSpecDriverCommonEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIVXFlexOSSpecDriverCommonEnvs {
		return vs[0].([]CSIVXFlexOSSpecDriverCommonEnvs)[vs[1].(int)]
	}).(CSIVXFlexOSSpecDriverCommonEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIVXFlexOSSpecDriverCommonEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef *CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// CSIVXFlexOSSpecDriverCommonEnvsValueFromInput is an input type that accepts CSIVXFlexOSSpecDriverCommonEnvsValueFromArgs and CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverCommonEnvsValueFromInput` via:
//
//          CSIVXFlexOSSpecDriverCommonEnvsValueFromArgs{...}
type CSIVXFlexOSSpecDriverCommonEnvsValueFromInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput
	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromOutputWithContext(context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIVXFlexOSSpecDriverCommonEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (CSIVXFlexOSSpecDriverCommonEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverCommonEnvsValueFrom)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput)
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput).ToCSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrInput is an input type that accepts CSIVXFlexOSSpecDriverCommonEnvsValueFromArgs, CSIVXFlexOSSpecDriverCommonEnvsValueFromPtr and CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrInput` via:
//
//          CSIVXFlexOSSpecDriverCommonEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput
	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput
}

type csivxflexOSSpecDriverCommonEnvsValueFromPtrType CSIVXFlexOSSpecDriverCommonEnvsValueFromArgs

func CSIVXFlexOSSpecDriverCommonEnvsValueFromPtr(v *CSIVXFlexOSSpecDriverCommonEnvsValueFromArgs) CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrInput {
	return (*csivxflexOSSpecDriverCommonEnvsValueFromPtrType)(v)
}

func (*csivxflexOSSpecDriverCommonEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverCommonEnvsValueFrom)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverCommonEnvsValueFromPtrType) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverCommonEnvsValueFromPtrType) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverCommonEnvsValueFrom)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvsValueFrom) *CSIVXFlexOSSpecDriverCommonEnvsValueFrom {
		return &v
	}).(CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput) ConfigMapKeyRef() CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvsValueFrom) *CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput) FieldRef() CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvsValueFrom) *CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRef {
		return v.FieldRef
	}).(CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput) ResourceFieldRef() CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvsValueFrom) *CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput) SecretKeyRef() CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvsValueFrom) *CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput)
}

type CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverCommonEnvsValueFrom)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput) Elem() CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommonEnvsValueFrom) CSIVXFlexOSSpecDriverCommonEnvsValueFrom { return *v }).(CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput) ConfigMapKeyRef() CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommonEnvsValueFrom) *CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput) FieldRef() CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommonEnvsValueFrom) *CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput) ResourceFieldRef() CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommonEnvsValueFrom) *CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput) SecretKeyRef() CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommonEnvsValueFrom) *CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefInput is an input type that accepts CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs and CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefInput` via:
//
//          CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs{...}
type CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput
	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput)
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput).ToCSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs, CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtr and CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput
	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput
}

type csivxflexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs

func CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtr(v *CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefArgs) CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrInput {
	return (*csivxflexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*csivxflexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrType) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRef) *CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRef {
		return &v
	}).(CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) Elem() CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRef) CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRef {
		return *v
	}).(CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefInput is an input type that accepts CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefArgs and CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefInput` via:
//
//          CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefArgs{...}
type CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput
	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutputWithContext(context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRef)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput)
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput).ToCSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrInput is an input type that accepts CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefArgs, CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtr and CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrInput` via:
//
//          CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput
	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput
}

type csivxflexOSSpecDriverCommonEnvsValueFromFieldRefPtrType CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefArgs

func CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtr(v *CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefArgs) CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrInput {
	return (*csivxflexOSSpecDriverCommonEnvsValueFromFieldRefPtrType)(v)
}

func (*csivxflexOSSpecDriverCommonEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverCommonEnvsValueFromFieldRefPtrType) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverCommonEnvsValueFromFieldRefPtrType) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRef) *CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRef {
		return &v
	}).(CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput) Elem() CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRef) CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRef {
		return *v
	}).(CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisor `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefInput is an input type that accepts CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefArgs and CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefInput` via:
//
//          CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefArgs{...}
type CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput
	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutputWithContext(context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput)
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput).ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrInput is an input type that accepts CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefArgs, CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtr and CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrInput` via:
//
//          CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput
	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput
}

type csivxflexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrType CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefArgs

func CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtr(v *CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefArgs) CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrInput {
	return (*csivxflexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*csivxflexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrType) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrType) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRef) *CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRef {
		return &v
	}).(CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput) Divisor() CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRef) *CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisor {
		return v.Divisor
	}).(CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) Elem() CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRef) CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRef {
		return *v
	}).(CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) Divisor() CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRef) *CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisor {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

type CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisor struct {
}

// CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorInput is an input type that accepts CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs and CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorInput` via:
//
//          CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs{...}
type CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput
	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput
}

type CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs struct {
}

func (CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput)
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput).ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrInput is an input type that accepts CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs, CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtr and CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrInput` via:
//
//          CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput
	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput
}

type csivxflexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrType CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs

func CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtr(v *CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorArgs) CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrInput {
	return (*csivxflexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrType)(v)
}

func (*csivxflexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrType) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrType) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisor) *CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisor {
		return &v
	}).(CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput) Elem() CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisor) CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisor {
		return *v
	}).(CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefInput is an input type that accepts CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefArgs and CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefInput` via:
//
//          CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefArgs{...}
type CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput
	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutputWithContext(context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput)
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefArgs) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput).ToCSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrInput is an input type that accepts CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefArgs, CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtr and CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrInput` via:
//
//          CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput
	ToCSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput
}

type csivxflexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrType CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefArgs

func CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtr(v *CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefArgs) CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrInput {
	return (*csivxflexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*csivxflexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrType) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrType) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRef) *CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRef {
		return &v
	}).(CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput() CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) ToCSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) Elem() CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRef) CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRef {
		return *v
	}).(CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIVXFlexOSSpecDriverCommonNodeSelector struct {
}

// CSIVXFlexOSSpecDriverCommonNodeSelectorInput is an input type that accepts CSIVXFlexOSSpecDriverCommonNodeSelectorArgs and CSIVXFlexOSSpecDriverCommonNodeSelectorOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverCommonNodeSelectorInput` via:
//
//          CSIVXFlexOSSpecDriverCommonNodeSelectorArgs{...}
type CSIVXFlexOSSpecDriverCommonNodeSelectorInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverCommonNodeSelectorOutput() CSIVXFlexOSSpecDriverCommonNodeSelectorOutput
	ToCSIVXFlexOSSpecDriverCommonNodeSelectorOutputWithContext(context.Context) CSIVXFlexOSSpecDriverCommonNodeSelectorOutput
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIVXFlexOSSpecDriverCommonNodeSelectorArgs struct {
}

func (CSIVXFlexOSSpecDriverCommonNodeSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverCommonNodeSelector)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverCommonNodeSelectorArgs) ToCSIVXFlexOSSpecDriverCommonNodeSelectorOutput() CSIVXFlexOSSpecDriverCommonNodeSelectorOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonNodeSelectorOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverCommonNodeSelectorArgs) ToCSIVXFlexOSSpecDriverCommonNodeSelectorOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonNodeSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonNodeSelectorOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIVXFlexOSSpecDriverCommonNodeSelectorOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverCommonNodeSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverCommonNodeSelector)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverCommonNodeSelectorOutput) ToCSIVXFlexOSSpecDriverCommonNodeSelectorOutput() CSIVXFlexOSSpecDriverCommonNodeSelectorOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonNodeSelectorOutput) ToCSIVXFlexOSSpecDriverCommonNodeSelectorOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonNodeSelectorOutput {
	return o
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIVXFlexOSSpecDriverCommonTolerations struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect *string `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key *string `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator *string `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds *int `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value *string `pulumi:"value"`
}

// CSIVXFlexOSSpecDriverCommonTolerationsInput is an input type that accepts CSIVXFlexOSSpecDriverCommonTolerationsArgs and CSIVXFlexOSSpecDriverCommonTolerationsOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverCommonTolerationsInput` via:
//
//          CSIVXFlexOSSpecDriverCommonTolerationsArgs{...}
type CSIVXFlexOSSpecDriverCommonTolerationsInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverCommonTolerationsOutput() CSIVXFlexOSSpecDriverCommonTolerationsOutput
	ToCSIVXFlexOSSpecDriverCommonTolerationsOutputWithContext(context.Context) CSIVXFlexOSSpecDriverCommonTolerationsOutput
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIVXFlexOSSpecDriverCommonTolerationsArgs struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect pulumi.StringPtrInput `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds pulumi.IntPtrInput `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (CSIVXFlexOSSpecDriverCommonTolerationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverCommonTolerations)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverCommonTolerationsArgs) ToCSIVXFlexOSSpecDriverCommonTolerationsOutput() CSIVXFlexOSSpecDriverCommonTolerationsOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonTolerationsOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverCommonTolerationsArgs) ToCSIVXFlexOSSpecDriverCommonTolerationsOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonTolerationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonTolerationsOutput)
}

// CSIVXFlexOSSpecDriverCommonTolerationsArrayInput is an input type that accepts CSIVXFlexOSSpecDriverCommonTolerationsArray and CSIVXFlexOSSpecDriverCommonTolerationsArrayOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverCommonTolerationsArrayInput` via:
//
//          CSIVXFlexOSSpecDriverCommonTolerationsArray{ CSIVXFlexOSSpecDriverCommonTolerationsArgs{...} }
type CSIVXFlexOSSpecDriverCommonTolerationsArrayInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverCommonTolerationsArrayOutput() CSIVXFlexOSSpecDriverCommonTolerationsArrayOutput
	ToCSIVXFlexOSSpecDriverCommonTolerationsArrayOutputWithContext(context.Context) CSIVXFlexOSSpecDriverCommonTolerationsArrayOutput
}

type CSIVXFlexOSSpecDriverCommonTolerationsArray []CSIVXFlexOSSpecDriverCommonTolerationsInput

func (CSIVXFlexOSSpecDriverCommonTolerationsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIVXFlexOSSpecDriverCommonTolerations)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverCommonTolerationsArray) ToCSIVXFlexOSSpecDriverCommonTolerationsArrayOutput() CSIVXFlexOSSpecDriverCommonTolerationsArrayOutput {
	return i.ToCSIVXFlexOSSpecDriverCommonTolerationsArrayOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverCommonTolerationsArray) ToCSIVXFlexOSSpecDriverCommonTolerationsArrayOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonTolerationsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverCommonTolerationsArrayOutput)
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIVXFlexOSSpecDriverCommonTolerationsOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverCommonTolerationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverCommonTolerations)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverCommonTolerationsOutput) ToCSIVXFlexOSSpecDriverCommonTolerationsOutput() CSIVXFlexOSSpecDriverCommonTolerationsOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonTolerationsOutput) ToCSIVXFlexOSSpecDriverCommonTolerationsOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonTolerationsOutput {
	return o
}

// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
func (o CSIVXFlexOSSpecDriverCommonTolerationsOutput) Effect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonTolerations) *string { return v.Effect }).(pulumi.StringPtrOutput)
}

// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
func (o CSIVXFlexOSSpecDriverCommonTolerationsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonTolerations) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
func (o CSIVXFlexOSSpecDriverCommonTolerationsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonTolerations) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
func (o CSIVXFlexOSSpecDriverCommonTolerationsOutput) TolerationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonTolerations) *int { return v.TolerationSeconds }).(pulumi.IntPtrOutput)
}

// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
func (o CSIVXFlexOSSpecDriverCommonTolerationsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverCommonTolerations) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type CSIVXFlexOSSpecDriverCommonTolerationsArrayOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverCommonTolerationsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIVXFlexOSSpecDriverCommonTolerations)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverCommonTolerationsArrayOutput) ToCSIVXFlexOSSpecDriverCommonTolerationsArrayOutput() CSIVXFlexOSSpecDriverCommonTolerationsArrayOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonTolerationsArrayOutput) ToCSIVXFlexOSSpecDriverCommonTolerationsArrayOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverCommonTolerationsArrayOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverCommonTolerationsArrayOutput) Index(i pulumi.IntInput) CSIVXFlexOSSpecDriverCommonTolerationsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIVXFlexOSSpecDriverCommonTolerations {
		return vs[0].([]CSIVXFlexOSSpecDriverCommonTolerations)[vs[1].(int)]
	}).(CSIVXFlexOSSpecDriverCommonTolerationsOutput)
}

// Controller is the specification for Controller plugin only
type CSIVXFlexOSSpecDriverController struct {
	// Args is the set of arguments for the container
	Args []string `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs []CSIVXFlexOSSpecDriverControllerEnvs `pulumi:"envs"`
	// Image is the image tag for the Container
	Image *string `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name *string `pulumi:"name"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
	NodeSelector map[string]string `pulumi:"nodeSelector"`
	// Tolerations is the list of tolerations for the driver pods
	Tolerations []CSIVXFlexOSSpecDriverControllerTolerations `pulumi:"tolerations"`
}

// CSIVXFlexOSSpecDriverControllerInput is an input type that accepts CSIVXFlexOSSpecDriverControllerArgs and CSIVXFlexOSSpecDriverControllerOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverControllerInput` via:
//
//          CSIVXFlexOSSpecDriverControllerArgs{...}
type CSIVXFlexOSSpecDriverControllerInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverControllerOutput() CSIVXFlexOSSpecDriverControllerOutput
	ToCSIVXFlexOSSpecDriverControllerOutputWithContext(context.Context) CSIVXFlexOSSpecDriverControllerOutput
}

// Controller is the specification for Controller plugin only
type CSIVXFlexOSSpecDriverControllerArgs struct {
	// Args is the set of arguments for the container
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs CSIVXFlexOSSpecDriverControllerEnvsArrayInput `pulumi:"envs"`
	// Image is the image tag for the Container
	Image pulumi.StringPtrInput `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name pulumi.StringPtrInput `pulumi:"name"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
	NodeSelector pulumi.StringMapInput `pulumi:"nodeSelector"`
	// Tolerations is the list of tolerations for the driver pods
	Tolerations CSIVXFlexOSSpecDriverControllerTolerationsArrayInput `pulumi:"tolerations"`
}

func (CSIVXFlexOSSpecDriverControllerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverController)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverControllerArgs) ToCSIVXFlexOSSpecDriverControllerOutput() CSIVXFlexOSSpecDriverControllerOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverControllerArgs) ToCSIVXFlexOSSpecDriverControllerOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerOutput)
}

func (i CSIVXFlexOSSpecDriverControllerArgs) ToCSIVXFlexOSSpecDriverControllerPtrOutput() CSIVXFlexOSSpecDriverControllerPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverControllerArgs) ToCSIVXFlexOSSpecDriverControllerPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerOutput).ToCSIVXFlexOSSpecDriverControllerPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverControllerPtrInput is an input type that accepts CSIVXFlexOSSpecDriverControllerArgs, CSIVXFlexOSSpecDriverControllerPtr and CSIVXFlexOSSpecDriverControllerPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverControllerPtrInput` via:
//
//          CSIVXFlexOSSpecDriverControllerArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverControllerPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverControllerPtrOutput() CSIVXFlexOSSpecDriverControllerPtrOutput
	ToCSIVXFlexOSSpecDriverControllerPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverControllerPtrOutput
}

type csivxflexOSSpecDriverControllerPtrType CSIVXFlexOSSpecDriverControllerArgs

func CSIVXFlexOSSpecDriverControllerPtr(v *CSIVXFlexOSSpecDriverControllerArgs) CSIVXFlexOSSpecDriverControllerPtrInput {
	return (*csivxflexOSSpecDriverControllerPtrType)(v)
}

func (*csivxflexOSSpecDriverControllerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverController)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverControllerPtrType) ToCSIVXFlexOSSpecDriverControllerPtrOutput() CSIVXFlexOSSpecDriverControllerPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverControllerPtrType) ToCSIVXFlexOSSpecDriverControllerPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerPtrOutput)
}

// Controller is the specification for Controller plugin only
type CSIVXFlexOSSpecDriverControllerOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverControllerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverController)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverControllerOutput) ToCSIVXFlexOSSpecDriverControllerOutput() CSIVXFlexOSSpecDriverControllerOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerOutput) ToCSIVXFlexOSSpecDriverControllerOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerOutput) ToCSIVXFlexOSSpecDriverControllerPtrOutput() CSIVXFlexOSSpecDriverControllerPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverControllerPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverControllerOutput) ToCSIVXFlexOSSpecDriverControllerPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverController) *CSIVXFlexOSSpecDriverController {
		return &v
	}).(CSIVXFlexOSSpecDriverControllerPtrOutput)
}

// Args is the set of arguments for the container
func (o CSIVXFlexOSSpecDriverControllerOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverController) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIVXFlexOSSpecDriverControllerOutput) Envs() CSIVXFlexOSSpecDriverControllerEnvsArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverController) []CSIVXFlexOSSpecDriverControllerEnvs { return v.Envs }).(CSIVXFlexOSSpecDriverControllerEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIVXFlexOSSpecDriverControllerOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverController) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIVXFlexOSSpecDriverControllerOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverController) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIVXFlexOSSpecDriverControllerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverController) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
func (o CSIVXFlexOSSpecDriverControllerOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverController) map[string]string { return v.NodeSelector }).(pulumi.StringMapOutput)
}

// Tolerations is the list of tolerations for the driver pods
func (o CSIVXFlexOSSpecDriverControllerOutput) Tolerations() CSIVXFlexOSSpecDriverControllerTolerationsArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverController) []CSIVXFlexOSSpecDriverControllerTolerations {
		return v.Tolerations
	}).(CSIVXFlexOSSpecDriverControllerTolerationsArrayOutput)
}

type CSIVXFlexOSSpecDriverControllerPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverControllerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverController)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverControllerPtrOutput) ToCSIVXFlexOSSpecDriverControllerPtrOutput() CSIVXFlexOSSpecDriverControllerPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerPtrOutput) ToCSIVXFlexOSSpecDriverControllerPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerPtrOutput) Elem() CSIVXFlexOSSpecDriverControllerOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverController) CSIVXFlexOSSpecDriverController { return *v }).(CSIVXFlexOSSpecDriverControllerOutput)
}

// Args is the set of arguments for the container
func (o CSIVXFlexOSSpecDriverControllerPtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverController) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIVXFlexOSSpecDriverControllerPtrOutput) Envs() CSIVXFlexOSSpecDriverControllerEnvsArrayOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverController) []CSIVXFlexOSSpecDriverControllerEnvs {
		if v == nil {
			return nil
		}
		return v.Envs
	}).(CSIVXFlexOSSpecDriverControllerEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIVXFlexOSSpecDriverControllerPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverController) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIVXFlexOSSpecDriverControllerPtrOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverController) *string {
		if v == nil {
			return nil
		}
		return v.ImagePullPolicy
	}).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIVXFlexOSSpecDriverControllerPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverController) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
func (o CSIVXFlexOSSpecDriverControllerPtrOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverController) map[string]string {
		if v == nil {
			return nil
		}
		return v.NodeSelector
	}).(pulumi.StringMapOutput)
}

// Tolerations is the list of tolerations for the driver pods
func (o CSIVXFlexOSSpecDriverControllerPtrOutput) Tolerations() CSIVXFlexOSSpecDriverControllerTolerationsArrayOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverController) []CSIVXFlexOSSpecDriverControllerTolerations {
		if v == nil {
			return nil
		}
		return v.Tolerations
	}).(CSIVXFlexOSSpecDriverControllerTolerationsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIVXFlexOSSpecDriverControllerEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *CSIVXFlexOSSpecDriverControllerEnvsValueFrom `pulumi:"valueFrom"`
}

// CSIVXFlexOSSpecDriverControllerEnvsInput is an input type that accepts CSIVXFlexOSSpecDriverControllerEnvsArgs and CSIVXFlexOSSpecDriverControllerEnvsOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverControllerEnvsInput` via:
//
//          CSIVXFlexOSSpecDriverControllerEnvsArgs{...}
type CSIVXFlexOSSpecDriverControllerEnvsInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverControllerEnvsOutput() CSIVXFlexOSSpecDriverControllerEnvsOutput
	ToCSIVXFlexOSSpecDriverControllerEnvsOutputWithContext(context.Context) CSIVXFlexOSSpecDriverControllerEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type CSIVXFlexOSSpecDriverControllerEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (CSIVXFlexOSSpecDriverControllerEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverControllerEnvs)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverControllerEnvsArgs) ToCSIVXFlexOSSpecDriverControllerEnvsOutput() CSIVXFlexOSSpecDriverControllerEnvsOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerEnvsOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverControllerEnvsArgs) ToCSIVXFlexOSSpecDriverControllerEnvsOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerEnvsOutput)
}

// CSIVXFlexOSSpecDriverControllerEnvsArrayInput is an input type that accepts CSIVXFlexOSSpecDriverControllerEnvsArray and CSIVXFlexOSSpecDriverControllerEnvsArrayOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverControllerEnvsArrayInput` via:
//
//          CSIVXFlexOSSpecDriverControllerEnvsArray{ CSIVXFlexOSSpecDriverControllerEnvsArgs{...} }
type CSIVXFlexOSSpecDriverControllerEnvsArrayInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverControllerEnvsArrayOutput() CSIVXFlexOSSpecDriverControllerEnvsArrayOutput
	ToCSIVXFlexOSSpecDriverControllerEnvsArrayOutputWithContext(context.Context) CSIVXFlexOSSpecDriverControllerEnvsArrayOutput
}

type CSIVXFlexOSSpecDriverControllerEnvsArray []CSIVXFlexOSSpecDriverControllerEnvsInput

func (CSIVXFlexOSSpecDriverControllerEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIVXFlexOSSpecDriverControllerEnvs)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverControllerEnvsArray) ToCSIVXFlexOSSpecDriverControllerEnvsArrayOutput() CSIVXFlexOSSpecDriverControllerEnvsArrayOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerEnvsArrayOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverControllerEnvsArray) ToCSIVXFlexOSSpecDriverControllerEnvsArrayOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIVXFlexOSSpecDriverControllerEnvsOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverControllerEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverControllerEnvs)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverControllerEnvsOutput) ToCSIVXFlexOSSpecDriverControllerEnvsOutput() CSIVXFlexOSSpecDriverControllerEnvsOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsOutput) ToCSIVXFlexOSSpecDriverControllerEnvsOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o CSIVXFlexOSSpecDriverControllerEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o CSIVXFlexOSSpecDriverControllerEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o CSIVXFlexOSSpecDriverControllerEnvsOutput) ValueFrom() CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvs) *CSIVXFlexOSSpecDriverControllerEnvsValueFrom {
		return v.ValueFrom
	}).(CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput)
}

type CSIVXFlexOSSpecDriverControllerEnvsArrayOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverControllerEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIVXFlexOSSpecDriverControllerEnvs)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverControllerEnvsArrayOutput) ToCSIVXFlexOSSpecDriverControllerEnvsArrayOutput() CSIVXFlexOSSpecDriverControllerEnvsArrayOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsArrayOutput) ToCSIVXFlexOSSpecDriverControllerEnvsArrayOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsArrayOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsArrayOutput) Index(i pulumi.IntInput) CSIVXFlexOSSpecDriverControllerEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIVXFlexOSSpecDriverControllerEnvs {
		return vs[0].([]CSIVXFlexOSSpecDriverControllerEnvs)[vs[1].(int)]
	}).(CSIVXFlexOSSpecDriverControllerEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIVXFlexOSSpecDriverControllerEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef *CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// CSIVXFlexOSSpecDriverControllerEnvsValueFromInput is an input type that accepts CSIVXFlexOSSpecDriverControllerEnvsValueFromArgs and CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverControllerEnvsValueFromInput` via:
//
//          CSIVXFlexOSSpecDriverControllerEnvsValueFromArgs{...}
type CSIVXFlexOSSpecDriverControllerEnvsValueFromInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput
	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromOutputWithContext(context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIVXFlexOSSpecDriverControllerEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (CSIVXFlexOSSpecDriverControllerEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverControllerEnvsValueFrom)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput)
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput).ToCSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrInput is an input type that accepts CSIVXFlexOSSpecDriverControllerEnvsValueFromArgs, CSIVXFlexOSSpecDriverControllerEnvsValueFromPtr and CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrInput` via:
//
//          CSIVXFlexOSSpecDriverControllerEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput
	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput
}

type csivxflexOSSpecDriverControllerEnvsValueFromPtrType CSIVXFlexOSSpecDriverControllerEnvsValueFromArgs

func CSIVXFlexOSSpecDriverControllerEnvsValueFromPtr(v *CSIVXFlexOSSpecDriverControllerEnvsValueFromArgs) CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrInput {
	return (*csivxflexOSSpecDriverControllerEnvsValueFromPtrType)(v)
}

func (*csivxflexOSSpecDriverControllerEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverControllerEnvsValueFrom)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverControllerEnvsValueFromPtrType) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverControllerEnvsValueFromPtrType) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverControllerEnvsValueFrom)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvsValueFrom) *CSIVXFlexOSSpecDriverControllerEnvsValueFrom {
		return &v
	}).(CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput) ConfigMapKeyRef() CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvsValueFrom) *CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput) FieldRef() CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvsValueFrom) *CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRef {
		return v.FieldRef
	}).(CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput) ResourceFieldRef() CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvsValueFrom) *CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput) SecretKeyRef() CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvsValueFrom) *CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput)
}

type CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverControllerEnvsValueFrom)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput) Elem() CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverControllerEnvsValueFrom) CSIVXFlexOSSpecDriverControllerEnvsValueFrom {
		return *v
	}).(CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput) ConfigMapKeyRef() CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverControllerEnvsValueFrom) *CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput) FieldRef() CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverControllerEnvsValueFrom) *CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput) ResourceFieldRef() CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverControllerEnvsValueFrom) *CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput) SecretKeyRef() CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverControllerEnvsValueFrom) *CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefInput is an input type that accepts CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs and CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefInput` via:
//
//          CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs{...}
type CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput
	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput)
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput).ToCSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs, CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtr and CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput
	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput
}

type csivxflexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs

func CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtr(v *CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefArgs) CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrInput {
	return (*csivxflexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*csivxflexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrType) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRef) *CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRef {
		return &v
	}).(CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) Elem() CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRef) CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRef {
		return *v
	}).(CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefInput is an input type that accepts CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefArgs and CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefInput` via:
//
//          CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefArgs{...}
type CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput
	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutputWithContext(context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRef)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput)
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput).ToCSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrInput is an input type that accepts CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefArgs, CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtr and CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrInput` via:
//
//          CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput
	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput
}

type csivxflexOSSpecDriverControllerEnvsValueFromFieldRefPtrType CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefArgs

func CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtr(v *CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefArgs) CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrInput {
	return (*csivxflexOSSpecDriverControllerEnvsValueFromFieldRefPtrType)(v)
}

func (*csivxflexOSSpecDriverControllerEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverControllerEnvsValueFromFieldRefPtrType) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverControllerEnvsValueFromFieldRefPtrType) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRef) *CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRef {
		return &v
	}).(CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput) Elem() CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRef) CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRef {
		return *v
	}).(CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisor `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefInput is an input type that accepts CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefArgs and CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefInput` via:
//
//          CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefArgs{...}
type CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput
	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutputWithContext(context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput)
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput).ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrInput is an input type that accepts CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefArgs, CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtr and CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrInput` via:
//
//          CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput
	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput
}

type csivxflexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrType CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefArgs

func CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtr(v *CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefArgs) CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrInput {
	return (*csivxflexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*csivxflexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrType) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrType) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRef) *CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRef {
		return &v
	}).(CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput) Divisor() CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRef) *CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisor {
		return v.Divisor
	}).(CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) Elem() CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRef) CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRef {
		return *v
	}).(CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) Divisor() CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRef) *CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisor {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

type CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisor struct {
}

// CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorInput is an input type that accepts CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs and CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorInput` via:
//
//          CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs{...}
type CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput
	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput
}

type CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs struct {
}

func (CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput)
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput).ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrInput is an input type that accepts CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs, CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtr and CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrInput` via:
//
//          CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput
	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput
}

type csivxflexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrType CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs

func CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtr(v *CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorArgs) CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrInput {
	return (*csivxflexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrType)(v)
}

func (*csivxflexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrType) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrType) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisor) *CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisor {
		return &v
	}).(CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput) Elem() CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisor) CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisor {
		return *v
	}).(CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefInput is an input type that accepts CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefArgs and CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefInput` via:
//
//          CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefArgs{...}
type CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput
	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutputWithContext(context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput)
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefArgs) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput).ToCSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrInput is an input type that accepts CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefArgs, CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtr and CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrInput` via:
//
//          CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput
	ToCSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput
}

type csivxflexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrType CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefArgs

func CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtr(v *CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefArgs) CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrInput {
	return (*csivxflexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*csivxflexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrType) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrType) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRef) *CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRef {
		return &v
	}).(CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput() CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) ToCSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) Elem() CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRef) CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRef {
		return *v
	}).(CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIVXFlexOSSpecDriverControllerNodeSelector struct {
}

// CSIVXFlexOSSpecDriverControllerNodeSelectorInput is an input type that accepts CSIVXFlexOSSpecDriverControllerNodeSelectorArgs and CSIVXFlexOSSpecDriverControllerNodeSelectorOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverControllerNodeSelectorInput` via:
//
//          CSIVXFlexOSSpecDriverControllerNodeSelectorArgs{...}
type CSIVXFlexOSSpecDriverControllerNodeSelectorInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverControllerNodeSelectorOutput() CSIVXFlexOSSpecDriverControllerNodeSelectorOutput
	ToCSIVXFlexOSSpecDriverControllerNodeSelectorOutputWithContext(context.Context) CSIVXFlexOSSpecDriverControllerNodeSelectorOutput
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIVXFlexOSSpecDriverControllerNodeSelectorArgs struct {
}

func (CSIVXFlexOSSpecDriverControllerNodeSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverControllerNodeSelector)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverControllerNodeSelectorArgs) ToCSIVXFlexOSSpecDriverControllerNodeSelectorOutput() CSIVXFlexOSSpecDriverControllerNodeSelectorOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerNodeSelectorOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverControllerNodeSelectorArgs) ToCSIVXFlexOSSpecDriverControllerNodeSelectorOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerNodeSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerNodeSelectorOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIVXFlexOSSpecDriverControllerNodeSelectorOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverControllerNodeSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverControllerNodeSelector)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverControllerNodeSelectorOutput) ToCSIVXFlexOSSpecDriverControllerNodeSelectorOutput() CSIVXFlexOSSpecDriverControllerNodeSelectorOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerNodeSelectorOutput) ToCSIVXFlexOSSpecDriverControllerNodeSelectorOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerNodeSelectorOutput {
	return o
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIVXFlexOSSpecDriverControllerTolerations struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect *string `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key *string `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator *string `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds *int `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value *string `pulumi:"value"`
}

// CSIVXFlexOSSpecDriverControllerTolerationsInput is an input type that accepts CSIVXFlexOSSpecDriverControllerTolerationsArgs and CSIVXFlexOSSpecDriverControllerTolerationsOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverControllerTolerationsInput` via:
//
//          CSIVXFlexOSSpecDriverControllerTolerationsArgs{...}
type CSIVXFlexOSSpecDriverControllerTolerationsInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverControllerTolerationsOutput() CSIVXFlexOSSpecDriverControllerTolerationsOutput
	ToCSIVXFlexOSSpecDriverControllerTolerationsOutputWithContext(context.Context) CSIVXFlexOSSpecDriverControllerTolerationsOutput
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIVXFlexOSSpecDriverControllerTolerationsArgs struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect pulumi.StringPtrInput `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds pulumi.IntPtrInput `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (CSIVXFlexOSSpecDriverControllerTolerationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverControllerTolerations)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverControllerTolerationsArgs) ToCSIVXFlexOSSpecDriverControllerTolerationsOutput() CSIVXFlexOSSpecDriverControllerTolerationsOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerTolerationsOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverControllerTolerationsArgs) ToCSIVXFlexOSSpecDriverControllerTolerationsOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerTolerationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerTolerationsOutput)
}

// CSIVXFlexOSSpecDriverControllerTolerationsArrayInput is an input type that accepts CSIVXFlexOSSpecDriverControllerTolerationsArray and CSIVXFlexOSSpecDriverControllerTolerationsArrayOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverControllerTolerationsArrayInput` via:
//
//          CSIVXFlexOSSpecDriverControllerTolerationsArray{ CSIVXFlexOSSpecDriverControllerTolerationsArgs{...} }
type CSIVXFlexOSSpecDriverControllerTolerationsArrayInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverControllerTolerationsArrayOutput() CSIVXFlexOSSpecDriverControllerTolerationsArrayOutput
	ToCSIVXFlexOSSpecDriverControllerTolerationsArrayOutputWithContext(context.Context) CSIVXFlexOSSpecDriverControllerTolerationsArrayOutput
}

type CSIVXFlexOSSpecDriverControllerTolerationsArray []CSIVXFlexOSSpecDriverControllerTolerationsInput

func (CSIVXFlexOSSpecDriverControllerTolerationsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIVXFlexOSSpecDriverControllerTolerations)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverControllerTolerationsArray) ToCSIVXFlexOSSpecDriverControllerTolerationsArrayOutput() CSIVXFlexOSSpecDriverControllerTolerationsArrayOutput {
	return i.ToCSIVXFlexOSSpecDriverControllerTolerationsArrayOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverControllerTolerationsArray) ToCSIVXFlexOSSpecDriverControllerTolerationsArrayOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerTolerationsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverControllerTolerationsArrayOutput)
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIVXFlexOSSpecDriverControllerTolerationsOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverControllerTolerationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverControllerTolerations)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverControllerTolerationsOutput) ToCSIVXFlexOSSpecDriverControllerTolerationsOutput() CSIVXFlexOSSpecDriverControllerTolerationsOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerTolerationsOutput) ToCSIVXFlexOSSpecDriverControllerTolerationsOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerTolerationsOutput {
	return o
}

// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
func (o CSIVXFlexOSSpecDriverControllerTolerationsOutput) Effect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerTolerations) *string { return v.Effect }).(pulumi.StringPtrOutput)
}

// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
func (o CSIVXFlexOSSpecDriverControllerTolerationsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerTolerations) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
func (o CSIVXFlexOSSpecDriverControllerTolerationsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerTolerations) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
func (o CSIVXFlexOSSpecDriverControllerTolerationsOutput) TolerationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerTolerations) *int { return v.TolerationSeconds }).(pulumi.IntPtrOutput)
}

// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
func (o CSIVXFlexOSSpecDriverControllerTolerationsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverControllerTolerations) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type CSIVXFlexOSSpecDriverControllerTolerationsArrayOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverControllerTolerationsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIVXFlexOSSpecDriverControllerTolerations)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverControllerTolerationsArrayOutput) ToCSIVXFlexOSSpecDriverControllerTolerationsArrayOutput() CSIVXFlexOSSpecDriverControllerTolerationsArrayOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerTolerationsArrayOutput) ToCSIVXFlexOSSpecDriverControllerTolerationsArrayOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverControllerTolerationsArrayOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverControllerTolerationsArrayOutput) Index(i pulumi.IntInput) CSIVXFlexOSSpecDriverControllerTolerationsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIVXFlexOSSpecDriverControllerTolerations {
		return vs[0].([]CSIVXFlexOSSpecDriverControllerTolerations)[vs[1].(int)]
	}).(CSIVXFlexOSSpecDriverControllerTolerationsOutput)
}

// Node is the specification for Node plugin only
type CSIVXFlexOSSpecDriverNode struct {
	// Args is the set of arguments for the container
	Args []string `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs []CSIVXFlexOSSpecDriverNodeEnvs `pulumi:"envs"`
	// Image is the image tag for the Container
	Image *string `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name *string `pulumi:"name"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
	NodeSelector map[string]string `pulumi:"nodeSelector"`
	// Tolerations is the list of tolerations for the driver pods
	Tolerations []CSIVXFlexOSSpecDriverNodeTolerations `pulumi:"tolerations"`
}

// CSIVXFlexOSSpecDriverNodeInput is an input type that accepts CSIVXFlexOSSpecDriverNodeArgs and CSIVXFlexOSSpecDriverNodeOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverNodeInput` via:
//
//          CSIVXFlexOSSpecDriverNodeArgs{...}
type CSIVXFlexOSSpecDriverNodeInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverNodeOutput() CSIVXFlexOSSpecDriverNodeOutput
	ToCSIVXFlexOSSpecDriverNodeOutputWithContext(context.Context) CSIVXFlexOSSpecDriverNodeOutput
}

// Node is the specification for Node plugin only
type CSIVXFlexOSSpecDriverNodeArgs struct {
	// Args is the set of arguments for the container
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs CSIVXFlexOSSpecDriverNodeEnvsArrayInput `pulumi:"envs"`
	// Image is the image tag for the Container
	Image pulumi.StringPtrInput `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name pulumi.StringPtrInput `pulumi:"name"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
	NodeSelector pulumi.StringMapInput `pulumi:"nodeSelector"`
	// Tolerations is the list of tolerations for the driver pods
	Tolerations CSIVXFlexOSSpecDriverNodeTolerationsArrayInput `pulumi:"tolerations"`
}

func (CSIVXFlexOSSpecDriverNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverNode)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverNodeArgs) ToCSIVXFlexOSSpecDriverNodeOutput() CSIVXFlexOSSpecDriverNodeOutput {
	return i.ToCSIVXFlexOSSpecDriverNodeOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverNodeArgs) ToCSIVXFlexOSSpecDriverNodeOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeOutput)
}

func (i CSIVXFlexOSSpecDriverNodeArgs) ToCSIVXFlexOSSpecDriverNodePtrOutput() CSIVXFlexOSSpecDriverNodePtrOutput {
	return i.ToCSIVXFlexOSSpecDriverNodePtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverNodeArgs) ToCSIVXFlexOSSpecDriverNodePtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeOutput).ToCSIVXFlexOSSpecDriverNodePtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverNodePtrInput is an input type that accepts CSIVXFlexOSSpecDriverNodeArgs, CSIVXFlexOSSpecDriverNodePtr and CSIVXFlexOSSpecDriverNodePtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverNodePtrInput` via:
//
//          CSIVXFlexOSSpecDriverNodeArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverNodePtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverNodePtrOutput() CSIVXFlexOSSpecDriverNodePtrOutput
	ToCSIVXFlexOSSpecDriverNodePtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverNodePtrOutput
}

type csivxflexOSSpecDriverNodePtrType CSIVXFlexOSSpecDriverNodeArgs

func CSIVXFlexOSSpecDriverNodePtr(v *CSIVXFlexOSSpecDriverNodeArgs) CSIVXFlexOSSpecDriverNodePtrInput {
	return (*csivxflexOSSpecDriverNodePtrType)(v)
}

func (*csivxflexOSSpecDriverNodePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverNode)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverNodePtrType) ToCSIVXFlexOSSpecDriverNodePtrOutput() CSIVXFlexOSSpecDriverNodePtrOutput {
	return i.ToCSIVXFlexOSSpecDriverNodePtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverNodePtrType) ToCSIVXFlexOSSpecDriverNodePtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodePtrOutput)
}

// Node is the specification for Node plugin only
type CSIVXFlexOSSpecDriverNodeOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverNode)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverNodeOutput) ToCSIVXFlexOSSpecDriverNodeOutput() CSIVXFlexOSSpecDriverNodeOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeOutput) ToCSIVXFlexOSSpecDriverNodeOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeOutput) ToCSIVXFlexOSSpecDriverNodePtrOutput() CSIVXFlexOSSpecDriverNodePtrOutput {
	return o.ToCSIVXFlexOSSpecDriverNodePtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverNodeOutput) ToCSIVXFlexOSSpecDriverNodePtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodePtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNode) *CSIVXFlexOSSpecDriverNode {
		return &v
	}).(CSIVXFlexOSSpecDriverNodePtrOutput)
}

// Args is the set of arguments for the container
func (o CSIVXFlexOSSpecDriverNodeOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNode) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIVXFlexOSSpecDriverNodeOutput) Envs() CSIVXFlexOSSpecDriverNodeEnvsArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNode) []CSIVXFlexOSSpecDriverNodeEnvs { return v.Envs }).(CSIVXFlexOSSpecDriverNodeEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIVXFlexOSSpecDriverNodeOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNode) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIVXFlexOSSpecDriverNodeOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNode) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIVXFlexOSSpecDriverNodeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNode) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
func (o CSIVXFlexOSSpecDriverNodeOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNode) map[string]string { return v.NodeSelector }).(pulumi.StringMapOutput)
}

// Tolerations is the list of tolerations for the driver pods
func (o CSIVXFlexOSSpecDriverNodeOutput) Tolerations() CSIVXFlexOSSpecDriverNodeTolerationsArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNode) []CSIVXFlexOSSpecDriverNodeTolerations { return v.Tolerations }).(CSIVXFlexOSSpecDriverNodeTolerationsArrayOutput)
}

type CSIVXFlexOSSpecDriverNodePtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverNodePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverNode)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverNodePtrOutput) ToCSIVXFlexOSSpecDriverNodePtrOutput() CSIVXFlexOSSpecDriverNodePtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodePtrOutput) ToCSIVXFlexOSSpecDriverNodePtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodePtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodePtrOutput) Elem() CSIVXFlexOSSpecDriverNodeOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNode) CSIVXFlexOSSpecDriverNode { return *v }).(CSIVXFlexOSSpecDriverNodeOutput)
}

// Args is the set of arguments for the container
func (o CSIVXFlexOSSpecDriverNodePtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNode) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIVXFlexOSSpecDriverNodePtrOutput) Envs() CSIVXFlexOSSpecDriverNodeEnvsArrayOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNode) []CSIVXFlexOSSpecDriverNodeEnvs {
		if v == nil {
			return nil
		}
		return v.Envs
	}).(CSIVXFlexOSSpecDriverNodeEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIVXFlexOSSpecDriverNodePtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNode) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIVXFlexOSSpecDriverNodePtrOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNode) *string {
		if v == nil {
			return nil
		}
		return v.ImagePullPolicy
	}).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIVXFlexOSSpecDriverNodePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNode) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
func (o CSIVXFlexOSSpecDriverNodePtrOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNode) map[string]string {
		if v == nil {
			return nil
		}
		return v.NodeSelector
	}).(pulumi.StringMapOutput)
}

// Tolerations is the list of tolerations for the driver pods
func (o CSIVXFlexOSSpecDriverNodePtrOutput) Tolerations() CSIVXFlexOSSpecDriverNodeTolerationsArrayOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNode) []CSIVXFlexOSSpecDriverNodeTolerations {
		if v == nil {
			return nil
		}
		return v.Tolerations
	}).(CSIVXFlexOSSpecDriverNodeTolerationsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIVXFlexOSSpecDriverNodeEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *CSIVXFlexOSSpecDriverNodeEnvsValueFrom `pulumi:"valueFrom"`
}

// CSIVXFlexOSSpecDriverNodeEnvsInput is an input type that accepts CSIVXFlexOSSpecDriverNodeEnvsArgs and CSIVXFlexOSSpecDriverNodeEnvsOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverNodeEnvsInput` via:
//
//          CSIVXFlexOSSpecDriverNodeEnvsArgs{...}
type CSIVXFlexOSSpecDriverNodeEnvsInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverNodeEnvsOutput() CSIVXFlexOSSpecDriverNodeEnvsOutput
	ToCSIVXFlexOSSpecDriverNodeEnvsOutputWithContext(context.Context) CSIVXFlexOSSpecDriverNodeEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type CSIVXFlexOSSpecDriverNodeEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (CSIVXFlexOSSpecDriverNodeEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverNodeEnvs)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverNodeEnvsArgs) ToCSIVXFlexOSSpecDriverNodeEnvsOutput() CSIVXFlexOSSpecDriverNodeEnvsOutput {
	return i.ToCSIVXFlexOSSpecDriverNodeEnvsOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverNodeEnvsArgs) ToCSIVXFlexOSSpecDriverNodeEnvsOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeEnvsOutput)
}

// CSIVXFlexOSSpecDriverNodeEnvsArrayInput is an input type that accepts CSIVXFlexOSSpecDriverNodeEnvsArray and CSIVXFlexOSSpecDriverNodeEnvsArrayOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverNodeEnvsArrayInput` via:
//
//          CSIVXFlexOSSpecDriverNodeEnvsArray{ CSIVXFlexOSSpecDriverNodeEnvsArgs{...} }
type CSIVXFlexOSSpecDriverNodeEnvsArrayInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverNodeEnvsArrayOutput() CSIVXFlexOSSpecDriverNodeEnvsArrayOutput
	ToCSIVXFlexOSSpecDriverNodeEnvsArrayOutputWithContext(context.Context) CSIVXFlexOSSpecDriverNodeEnvsArrayOutput
}

type CSIVXFlexOSSpecDriverNodeEnvsArray []CSIVXFlexOSSpecDriverNodeEnvsInput

func (CSIVXFlexOSSpecDriverNodeEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIVXFlexOSSpecDriverNodeEnvs)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverNodeEnvsArray) ToCSIVXFlexOSSpecDriverNodeEnvsArrayOutput() CSIVXFlexOSSpecDriverNodeEnvsArrayOutput {
	return i.ToCSIVXFlexOSSpecDriverNodeEnvsArrayOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverNodeEnvsArray) ToCSIVXFlexOSSpecDriverNodeEnvsArrayOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIVXFlexOSSpecDriverNodeEnvsOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverNodeEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverNodeEnvs)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverNodeEnvsOutput) ToCSIVXFlexOSSpecDriverNodeEnvsOutput() CSIVXFlexOSSpecDriverNodeEnvsOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsOutput) ToCSIVXFlexOSSpecDriverNodeEnvsOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o CSIVXFlexOSSpecDriverNodeEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o CSIVXFlexOSSpecDriverNodeEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o CSIVXFlexOSSpecDriverNodeEnvsOutput) ValueFrom() CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvs) *CSIVXFlexOSSpecDriverNodeEnvsValueFrom { return v.ValueFrom }).(CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput)
}

type CSIVXFlexOSSpecDriverNodeEnvsArrayOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverNodeEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIVXFlexOSSpecDriverNodeEnvs)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverNodeEnvsArrayOutput) ToCSIVXFlexOSSpecDriverNodeEnvsArrayOutput() CSIVXFlexOSSpecDriverNodeEnvsArrayOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsArrayOutput) ToCSIVXFlexOSSpecDriverNodeEnvsArrayOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsArrayOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsArrayOutput) Index(i pulumi.IntInput) CSIVXFlexOSSpecDriverNodeEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIVXFlexOSSpecDriverNodeEnvs {
		return vs[0].([]CSIVXFlexOSSpecDriverNodeEnvs)[vs[1].(int)]
	}).(CSIVXFlexOSSpecDriverNodeEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIVXFlexOSSpecDriverNodeEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef *CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// CSIVXFlexOSSpecDriverNodeEnvsValueFromInput is an input type that accepts CSIVXFlexOSSpecDriverNodeEnvsValueFromArgs and CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverNodeEnvsValueFromInput` via:
//
//          CSIVXFlexOSSpecDriverNodeEnvsValueFromArgs{...}
type CSIVXFlexOSSpecDriverNodeEnvsValueFromInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput
	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromOutputWithContext(context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIVXFlexOSSpecDriverNodeEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (CSIVXFlexOSSpecDriverNodeEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverNodeEnvsValueFrom)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput {
	return i.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput)
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput).ToCSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrInput is an input type that accepts CSIVXFlexOSSpecDriverNodeEnvsValueFromArgs, CSIVXFlexOSSpecDriverNodeEnvsValueFromPtr and CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrInput` via:
//
//          CSIVXFlexOSSpecDriverNodeEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput
	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput
}

type csivxflexOSSpecDriverNodeEnvsValueFromPtrType CSIVXFlexOSSpecDriverNodeEnvsValueFromArgs

func CSIVXFlexOSSpecDriverNodeEnvsValueFromPtr(v *CSIVXFlexOSSpecDriverNodeEnvsValueFromArgs) CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrInput {
	return (*csivxflexOSSpecDriverNodeEnvsValueFromPtrType)(v)
}

func (*csivxflexOSSpecDriverNodeEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverNodeEnvsValueFrom)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverNodeEnvsValueFromPtrType) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverNodeEnvsValueFromPtrType) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverNodeEnvsValueFrom)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvsValueFrom) *CSIVXFlexOSSpecDriverNodeEnvsValueFrom {
		return &v
	}).(CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput) ConfigMapKeyRef() CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvsValueFrom) *CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput) FieldRef() CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvsValueFrom) *CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRef {
		return v.FieldRef
	}).(CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput) ResourceFieldRef() CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvsValueFrom) *CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput) SecretKeyRef() CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvsValueFrom) *CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput)
}

type CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverNodeEnvsValueFrom)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput) Elem() CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNodeEnvsValueFrom) CSIVXFlexOSSpecDriverNodeEnvsValueFrom { return *v }).(CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput) ConfigMapKeyRef() CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNodeEnvsValueFrom) *CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput) FieldRef() CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNodeEnvsValueFrom) *CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput) ResourceFieldRef() CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNodeEnvsValueFrom) *CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput) SecretKeyRef() CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNodeEnvsValueFrom) *CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefInput is an input type that accepts CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs and CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefInput` via:
//
//          CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs{...}
type CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput
	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return i.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput)
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput).ToCSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs, CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtr and CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput
	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput
}

type csivxflexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs

func CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtr(v *CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefArgs) CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrInput {
	return (*csivxflexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*csivxflexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrType) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRef) *CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRef {
		return &v
	}).(CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) Elem() CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRef) CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRef {
		return *v
	}).(CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefInput is an input type that accepts CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefArgs and CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefInput` via:
//
//          CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefArgs{...}
type CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput
	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutputWithContext(context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRef)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput {
	return i.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput)
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput).ToCSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrInput is an input type that accepts CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefArgs, CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtr and CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrInput` via:
//
//          CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput
	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput
}

type csivxflexOSSpecDriverNodeEnvsValueFromFieldRefPtrType CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefArgs

func CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtr(v *CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefArgs) CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrInput {
	return (*csivxflexOSSpecDriverNodeEnvsValueFromFieldRefPtrType)(v)
}

func (*csivxflexOSSpecDriverNodeEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverNodeEnvsValueFromFieldRefPtrType) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverNodeEnvsValueFromFieldRefPtrType) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRef) *CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRef {
		return &v
	}).(CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput) Elem() CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRef) CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRef {
		return *v
	}).(CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisor `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefInput is an input type that accepts CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefArgs and CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefInput` via:
//
//          CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefArgs{...}
type CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput
	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutputWithContext(context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return i.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput)
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput).ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrInput is an input type that accepts CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefArgs, CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtr and CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrInput` via:
//
//          CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput
	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput
}

type csivxflexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrType CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefArgs

func CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtr(v *CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefArgs) CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrInput {
	return (*csivxflexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*csivxflexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrType) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrType) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRef) *CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRef {
		return &v
	}).(CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput) Divisor() CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRef) *CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisor {
		return v.Divisor
	}).(CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) Elem() CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRef) CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRef {
		return *v
	}).(CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) Divisor() CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRef) *CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisor {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

type CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisor struct {
}

// CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorInput is an input type that accepts CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs and CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorInput` via:
//
//          CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs{...}
type CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput
	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput
}

type CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs struct {
}

func (CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput {
	return i.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput)
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput).ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrInput is an input type that accepts CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs, CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtr and CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrInput` via:
//
//          CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput
	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput
}

type csivxflexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrType CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs

func CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtr(v *CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorArgs) CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrInput {
	return (*csivxflexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrType)(v)
}

func (*csivxflexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrType) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrType) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisor) *CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisor {
		return &v
	}).(CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput) Elem() CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisor) CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisor {
		return *v
	}).(CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefInput is an input type that accepts CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefArgs and CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefInput` via:
//
//          CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefArgs{...}
type CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput
	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutputWithContext(context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return i.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput)
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefArgs) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput).ToCSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrInput is an input type that accepts CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefArgs, CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtr and CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrInput` via:
//
//          CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput
	ToCSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput
}

type csivxflexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrType CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefArgs

func CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtr(v *CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefArgs) CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrInput {
	return (*csivxflexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*csivxflexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrType) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrType) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRef) *CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRef {
		return &v
	}).(CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput() CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) ToCSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) Elem() CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRef) CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRef {
		return *v
	}).(CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIVXFlexOSSpecDriverNodeNodeSelector struct {
}

// CSIVXFlexOSSpecDriverNodeNodeSelectorInput is an input type that accepts CSIVXFlexOSSpecDriverNodeNodeSelectorArgs and CSIVXFlexOSSpecDriverNodeNodeSelectorOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverNodeNodeSelectorInput` via:
//
//          CSIVXFlexOSSpecDriverNodeNodeSelectorArgs{...}
type CSIVXFlexOSSpecDriverNodeNodeSelectorInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverNodeNodeSelectorOutput() CSIVXFlexOSSpecDriverNodeNodeSelectorOutput
	ToCSIVXFlexOSSpecDriverNodeNodeSelectorOutputWithContext(context.Context) CSIVXFlexOSSpecDriverNodeNodeSelectorOutput
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIVXFlexOSSpecDriverNodeNodeSelectorArgs struct {
}

func (CSIVXFlexOSSpecDriverNodeNodeSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverNodeNodeSelector)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverNodeNodeSelectorArgs) ToCSIVXFlexOSSpecDriverNodeNodeSelectorOutput() CSIVXFlexOSSpecDriverNodeNodeSelectorOutput {
	return i.ToCSIVXFlexOSSpecDriverNodeNodeSelectorOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverNodeNodeSelectorArgs) ToCSIVXFlexOSSpecDriverNodeNodeSelectorOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeNodeSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeNodeSelectorOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIVXFlexOSSpecDriverNodeNodeSelectorOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverNodeNodeSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverNodeNodeSelector)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverNodeNodeSelectorOutput) ToCSIVXFlexOSSpecDriverNodeNodeSelectorOutput() CSIVXFlexOSSpecDriverNodeNodeSelectorOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeNodeSelectorOutput) ToCSIVXFlexOSSpecDriverNodeNodeSelectorOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeNodeSelectorOutput {
	return o
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIVXFlexOSSpecDriverNodeTolerations struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect *string `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key *string `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator *string `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds *int `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value *string `pulumi:"value"`
}

// CSIVXFlexOSSpecDriverNodeTolerationsInput is an input type that accepts CSIVXFlexOSSpecDriverNodeTolerationsArgs and CSIVXFlexOSSpecDriverNodeTolerationsOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverNodeTolerationsInput` via:
//
//          CSIVXFlexOSSpecDriverNodeTolerationsArgs{...}
type CSIVXFlexOSSpecDriverNodeTolerationsInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverNodeTolerationsOutput() CSIVXFlexOSSpecDriverNodeTolerationsOutput
	ToCSIVXFlexOSSpecDriverNodeTolerationsOutputWithContext(context.Context) CSIVXFlexOSSpecDriverNodeTolerationsOutput
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIVXFlexOSSpecDriverNodeTolerationsArgs struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect pulumi.StringPtrInput `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds pulumi.IntPtrInput `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (CSIVXFlexOSSpecDriverNodeTolerationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverNodeTolerations)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverNodeTolerationsArgs) ToCSIVXFlexOSSpecDriverNodeTolerationsOutput() CSIVXFlexOSSpecDriverNodeTolerationsOutput {
	return i.ToCSIVXFlexOSSpecDriverNodeTolerationsOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverNodeTolerationsArgs) ToCSIVXFlexOSSpecDriverNodeTolerationsOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeTolerationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeTolerationsOutput)
}

// CSIVXFlexOSSpecDriverNodeTolerationsArrayInput is an input type that accepts CSIVXFlexOSSpecDriverNodeTolerationsArray and CSIVXFlexOSSpecDriverNodeTolerationsArrayOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverNodeTolerationsArrayInput` via:
//
//          CSIVXFlexOSSpecDriverNodeTolerationsArray{ CSIVXFlexOSSpecDriverNodeTolerationsArgs{...} }
type CSIVXFlexOSSpecDriverNodeTolerationsArrayInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverNodeTolerationsArrayOutput() CSIVXFlexOSSpecDriverNodeTolerationsArrayOutput
	ToCSIVXFlexOSSpecDriverNodeTolerationsArrayOutputWithContext(context.Context) CSIVXFlexOSSpecDriverNodeTolerationsArrayOutput
}

type CSIVXFlexOSSpecDriverNodeTolerationsArray []CSIVXFlexOSSpecDriverNodeTolerationsInput

func (CSIVXFlexOSSpecDriverNodeTolerationsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIVXFlexOSSpecDriverNodeTolerations)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverNodeTolerationsArray) ToCSIVXFlexOSSpecDriverNodeTolerationsArrayOutput() CSIVXFlexOSSpecDriverNodeTolerationsArrayOutput {
	return i.ToCSIVXFlexOSSpecDriverNodeTolerationsArrayOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverNodeTolerationsArray) ToCSIVXFlexOSSpecDriverNodeTolerationsArrayOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeTolerationsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverNodeTolerationsArrayOutput)
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIVXFlexOSSpecDriverNodeTolerationsOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverNodeTolerationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverNodeTolerations)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverNodeTolerationsOutput) ToCSIVXFlexOSSpecDriverNodeTolerationsOutput() CSIVXFlexOSSpecDriverNodeTolerationsOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeTolerationsOutput) ToCSIVXFlexOSSpecDriverNodeTolerationsOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeTolerationsOutput {
	return o
}

// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
func (o CSIVXFlexOSSpecDriverNodeTolerationsOutput) Effect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeTolerations) *string { return v.Effect }).(pulumi.StringPtrOutput)
}

// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
func (o CSIVXFlexOSSpecDriverNodeTolerationsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeTolerations) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
func (o CSIVXFlexOSSpecDriverNodeTolerationsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeTolerations) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
func (o CSIVXFlexOSSpecDriverNodeTolerationsOutput) TolerationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeTolerations) *int { return v.TolerationSeconds }).(pulumi.IntPtrOutput)
}

// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
func (o CSIVXFlexOSSpecDriverNodeTolerationsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverNodeTolerations) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type CSIVXFlexOSSpecDriverNodeTolerationsArrayOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverNodeTolerationsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIVXFlexOSSpecDriverNodeTolerations)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverNodeTolerationsArrayOutput) ToCSIVXFlexOSSpecDriverNodeTolerationsArrayOutput() CSIVXFlexOSSpecDriverNodeTolerationsArrayOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeTolerationsArrayOutput) ToCSIVXFlexOSSpecDriverNodeTolerationsArrayOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverNodeTolerationsArrayOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverNodeTolerationsArrayOutput) Index(i pulumi.IntInput) CSIVXFlexOSSpecDriverNodeTolerationsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIVXFlexOSSpecDriverNodeTolerations {
		return vs[0].([]CSIVXFlexOSSpecDriverNodeTolerations)[vs[1].(int)]
	}).(CSIVXFlexOSSpecDriverNodeTolerationsOutput)
}

// ContainerTemplate - Structure representing a container
type CSIVXFlexOSSpecDriverSideCars struct {
	// Args is the set of arguments for the container
	Args []string `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs []CSIVXFlexOSSpecDriverSideCarsEnvs `pulumi:"envs"`
	// Image is the image tag for the Container
	Image *string `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name *string `pulumi:"name"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
	NodeSelector map[string]string `pulumi:"nodeSelector"`
	// Tolerations is the list of tolerations for the driver pods
	Tolerations []CSIVXFlexOSSpecDriverSideCarsTolerations `pulumi:"tolerations"`
}

// CSIVXFlexOSSpecDriverSideCarsInput is an input type that accepts CSIVXFlexOSSpecDriverSideCarsArgs and CSIVXFlexOSSpecDriverSideCarsOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverSideCarsInput` via:
//
//          CSIVXFlexOSSpecDriverSideCarsArgs{...}
type CSIVXFlexOSSpecDriverSideCarsInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverSideCarsOutput() CSIVXFlexOSSpecDriverSideCarsOutput
	ToCSIVXFlexOSSpecDriverSideCarsOutputWithContext(context.Context) CSIVXFlexOSSpecDriverSideCarsOutput
}

// ContainerTemplate - Structure representing a container
type CSIVXFlexOSSpecDriverSideCarsArgs struct {
	// Args is the set of arguments for the container
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Envs is the set of environment variables for the container
	Envs CSIVXFlexOSSpecDriverSideCarsEnvsArrayInput `pulumi:"envs"`
	// Image is the image tag for the Container
	Image pulumi.StringPtrInput `pulumi:"image"`
	// ImagePullPolicy is the image pull policy for the image
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Name is the name of Container
	Name pulumi.StringPtrInput `pulumi:"name"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
	NodeSelector pulumi.StringMapInput `pulumi:"nodeSelector"`
	// Tolerations is the list of tolerations for the driver pods
	Tolerations CSIVXFlexOSSpecDriverSideCarsTolerationsArrayInput `pulumi:"tolerations"`
}

func (CSIVXFlexOSSpecDriverSideCarsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverSideCars)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverSideCarsArgs) ToCSIVXFlexOSSpecDriverSideCarsOutput() CSIVXFlexOSSpecDriverSideCarsOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverSideCarsArgs) ToCSIVXFlexOSSpecDriverSideCarsOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsOutput)
}

// CSIVXFlexOSSpecDriverSideCarsArrayInput is an input type that accepts CSIVXFlexOSSpecDriverSideCarsArray and CSIVXFlexOSSpecDriverSideCarsArrayOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverSideCarsArrayInput` via:
//
//          CSIVXFlexOSSpecDriverSideCarsArray{ CSIVXFlexOSSpecDriverSideCarsArgs{...} }
type CSIVXFlexOSSpecDriverSideCarsArrayInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverSideCarsArrayOutput() CSIVXFlexOSSpecDriverSideCarsArrayOutput
	ToCSIVXFlexOSSpecDriverSideCarsArrayOutputWithContext(context.Context) CSIVXFlexOSSpecDriverSideCarsArrayOutput
}

type CSIVXFlexOSSpecDriverSideCarsArray []CSIVXFlexOSSpecDriverSideCarsInput

func (CSIVXFlexOSSpecDriverSideCarsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIVXFlexOSSpecDriverSideCars)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverSideCarsArray) ToCSIVXFlexOSSpecDriverSideCarsArrayOutput() CSIVXFlexOSSpecDriverSideCarsArrayOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsArrayOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverSideCarsArray) ToCSIVXFlexOSSpecDriverSideCarsArrayOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsArrayOutput)
}

// ContainerTemplate - Structure representing a container
type CSIVXFlexOSSpecDriverSideCarsOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverSideCarsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverSideCars)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverSideCarsOutput) ToCSIVXFlexOSSpecDriverSideCarsOutput() CSIVXFlexOSSpecDriverSideCarsOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsOutput) ToCSIVXFlexOSSpecDriverSideCarsOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsOutput {
	return o
}

// Args is the set of arguments for the container
func (o CSIVXFlexOSSpecDriverSideCarsOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCars) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Envs is the set of environment variables for the container
func (o CSIVXFlexOSSpecDriverSideCarsOutput) Envs() CSIVXFlexOSSpecDriverSideCarsEnvsArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCars) []CSIVXFlexOSSpecDriverSideCarsEnvs { return v.Envs }).(CSIVXFlexOSSpecDriverSideCarsEnvsArrayOutput)
}

// Image is the image tag for the Container
func (o CSIVXFlexOSSpecDriverSideCarsOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCars) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// ImagePullPolicy is the image pull policy for the image
func (o CSIVXFlexOSSpecDriverSideCarsOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCars) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Name is the name of Container
func (o CSIVXFlexOSSpecDriverSideCarsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCars) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
func (o CSIVXFlexOSSpecDriverSideCarsOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCars) map[string]string { return v.NodeSelector }).(pulumi.StringMapOutput)
}

// Tolerations is the list of tolerations for the driver pods
func (o CSIVXFlexOSSpecDriverSideCarsOutput) Tolerations() CSIVXFlexOSSpecDriverSideCarsTolerationsArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCars) []CSIVXFlexOSSpecDriverSideCarsTolerations { return v.Tolerations }).(CSIVXFlexOSSpecDriverSideCarsTolerationsArrayOutput)
}

type CSIVXFlexOSSpecDriverSideCarsArrayOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverSideCarsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIVXFlexOSSpecDriverSideCars)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverSideCarsArrayOutput) ToCSIVXFlexOSSpecDriverSideCarsArrayOutput() CSIVXFlexOSSpecDriverSideCarsArrayOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsArrayOutput) ToCSIVXFlexOSSpecDriverSideCarsArrayOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsArrayOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsArrayOutput) Index(i pulumi.IntInput) CSIVXFlexOSSpecDriverSideCarsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIVXFlexOSSpecDriverSideCars {
		return vs[0].([]CSIVXFlexOSSpecDriverSideCars)[vs[1].(int)]
	}).(CSIVXFlexOSSpecDriverSideCarsOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIVXFlexOSSpecDriverSideCarsEnvs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *CSIVXFlexOSSpecDriverSideCarsEnvsValueFrom `pulumi:"valueFrom"`
}

// CSIVXFlexOSSpecDriverSideCarsEnvsInput is an input type that accepts CSIVXFlexOSSpecDriverSideCarsEnvsArgs and CSIVXFlexOSSpecDriverSideCarsEnvsOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverSideCarsEnvsInput` via:
//
//          CSIVXFlexOSSpecDriverSideCarsEnvsArgs{...}
type CSIVXFlexOSSpecDriverSideCarsEnvsInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverSideCarsEnvsOutput() CSIVXFlexOSSpecDriverSideCarsEnvsOutput
	ToCSIVXFlexOSSpecDriverSideCarsEnvsOutputWithContext(context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsOutput
}

// EnvVar represents an environment variable present in a Container.
type CSIVXFlexOSSpecDriverSideCarsEnvsArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrInput `pulumi:"valueFrom"`
}

func (CSIVXFlexOSSpecDriverSideCarsEnvsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverSideCarsEnvs)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsOutput() CSIVXFlexOSSpecDriverSideCarsEnvsOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsEnvsOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsEnvsOutput)
}

// CSIVXFlexOSSpecDriverSideCarsEnvsArrayInput is an input type that accepts CSIVXFlexOSSpecDriverSideCarsEnvsArray and CSIVXFlexOSSpecDriverSideCarsEnvsArrayOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverSideCarsEnvsArrayInput` via:
//
//          CSIVXFlexOSSpecDriverSideCarsEnvsArray{ CSIVXFlexOSSpecDriverSideCarsEnvsArgs{...} }
type CSIVXFlexOSSpecDriverSideCarsEnvsArrayInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverSideCarsEnvsArrayOutput() CSIVXFlexOSSpecDriverSideCarsEnvsArrayOutput
	ToCSIVXFlexOSSpecDriverSideCarsEnvsArrayOutputWithContext(context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsArrayOutput
}

type CSIVXFlexOSSpecDriverSideCarsEnvsArray []CSIVXFlexOSSpecDriverSideCarsEnvsInput

func (CSIVXFlexOSSpecDriverSideCarsEnvsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIVXFlexOSSpecDriverSideCarsEnvs)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsArray) ToCSIVXFlexOSSpecDriverSideCarsEnvsArrayOutput() CSIVXFlexOSSpecDriverSideCarsEnvsArrayOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsEnvsArrayOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsArray) ToCSIVXFlexOSSpecDriverSideCarsEnvsArrayOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsEnvsArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type CSIVXFlexOSSpecDriverSideCarsEnvsOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverSideCarsEnvsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverSideCarsEnvs)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsOutput() CSIVXFlexOSSpecDriverSideCarsEnvsOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o CSIVXFlexOSSpecDriverSideCarsEnvsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvs) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o CSIVXFlexOSSpecDriverSideCarsEnvsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvs) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o CSIVXFlexOSSpecDriverSideCarsEnvsOutput) ValueFrom() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvs) *CSIVXFlexOSSpecDriverSideCarsEnvsValueFrom {
		return v.ValueFrom
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput)
}

type CSIVXFlexOSSpecDriverSideCarsEnvsArrayOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverSideCarsEnvsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIVXFlexOSSpecDriverSideCarsEnvs)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsArrayOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsArrayOutput() CSIVXFlexOSSpecDriverSideCarsEnvsArrayOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsArrayOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsArrayOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsArrayOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsArrayOutput) Index(i pulumi.IntInput) CSIVXFlexOSSpecDriverSideCarsEnvsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIVXFlexOSSpecDriverSideCarsEnvs {
		return vs[0].([]CSIVXFlexOSSpecDriverSideCarsEnvs)[vs[1].(int)]
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// CSIVXFlexOSSpecDriverSideCarsEnvsValueFromInput is an input type that accepts CSIVXFlexOSSpecDriverSideCarsEnvsValueFromArgs and CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverSideCarsEnvsValueFromInput` via:
//
//          CSIVXFlexOSSpecDriverSideCarsEnvsValueFromArgs{...}
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput
	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutputWithContext(context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	FieldRef CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (CSIVXFlexOSSpecDriverSideCarsEnvsValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverSideCarsEnvsValueFrom)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput)
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput).ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrInput is an input type that accepts CSIVXFlexOSSpecDriverSideCarsEnvsValueFromArgs, CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtr and CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrInput` via:
//
//          CSIVXFlexOSSpecDriverSideCarsEnvsValueFromArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput
	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput
}

type csivxflexOSSpecDriverSideCarsEnvsValueFromPtrType CSIVXFlexOSSpecDriverSideCarsEnvsValueFromArgs

func CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtr(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromArgs) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrInput {
	return (*csivxflexOSSpecDriverSideCarsEnvsValueFromPtrType)(v)
}

func (*csivxflexOSSpecDriverSideCarsEnvsValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverSideCarsEnvsValueFrom)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverSideCarsEnvsValueFromPtrType) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverSideCarsEnvsValueFromPtrType) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverSideCarsEnvsValueFrom)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvsValueFrom) *CSIVXFlexOSSpecDriverSideCarsEnvsValueFrom {
		return &v
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput) ConfigMapKeyRef() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvsValueFrom) *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput) FieldRef() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvsValueFrom) *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRef {
		return v.FieldRef
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput) ResourceFieldRef() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvsValueFrom) *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput) SecretKeyRef() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvsValueFrom) *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput)
}

type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverSideCarsEnvsValueFrom)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput) Elem() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFrom) CSIVXFlexOSSpecDriverSideCarsEnvsValueFrom {
		return *v
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput) ConfigMapKeyRef() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFrom) *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput) FieldRef() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFrom) *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput) ResourceFieldRef() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFrom) *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput) SecretKeyRef() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFrom) *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefInput is an input type that accepts CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs and CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefInput` via:
//
//          CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs{...}
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput
	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutputWithContext(context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput)
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput).ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput is an input type that accepts CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs, CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtr and CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput` via:
//
//          CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput
	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput
}

type csivxflexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs

func CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtr(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefArgs) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrInput {
	return (*csivxflexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType)(v)
}

func (*csivxflexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrType) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
		return &v
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) Elem() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
		return *v
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefInput is an input type that accepts CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefArgs and CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefInput` via:
//
//          CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefArgs{...}
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput
	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutputWithContext(context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRef)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput)
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput).ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrInput is an input type that accepts CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefArgs, CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtr and CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrInput` via:
//
//          CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput
	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput
}

type csivxflexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrType CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefArgs

func CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtr(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefArgs) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrInput {
	return (*csivxflexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrType)(v)
}

func (*csivxflexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRef)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrType) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrType) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRef) *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRef {
		return &v
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) Elem() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRef) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRef {
		return *v
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefInput is an input type that accepts CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs and CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefInput` via:
//
//          CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs{...}
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput
	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutputWithContext(context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput)
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput).ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput is an input type that accepts CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs, CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtr and CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput` via:
//
//          CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput
	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput
}

type csivxflexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs

func CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtr(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefArgs) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrInput {
	return (*csivxflexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType)(v)
}

func (*csivxflexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrType) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRef) *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRef {
		return &v
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) Divisor() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRef) *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor {
		return v.Divisor
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) Elem() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRef) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRef {
		return *v
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) Divisor() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRef) *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor struct {
}

// CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorInput is an input type that accepts CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs and CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorInput` via:
//
//          CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs{...}
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput
	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput
}

type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs struct {
}

func (CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput)
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput).ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrInput is an input type that accepts CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs, CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtr and CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrInput` via:
//
//          CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput
	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput
}

type csivxflexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrType CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs

func CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtr(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorArgs) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrInput {
	return (*csivxflexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrType)(v)
}

func (*csivxflexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrType) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrType) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor) *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor {
		return &v
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput)
}

type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput) Elem() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor {
		return *v
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefInput is an input type that accepts CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs and CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefInput` via:
//
//          CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs{...}
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput
	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutputWithContext(context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput)
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput).ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput is an input type that accepts CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs, CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtr and CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput` via:
//
//          CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput
	ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput
}

type csivxflexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs

func CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtr(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefArgs) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrInput {
	return (*csivxflexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType)(v)
}

func (*csivxflexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (i *csivxflexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrType) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o.ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRef) *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRef {
		return &v
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRef)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) ToCSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) Elem() CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRef) CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRef {
		return *v
	}).(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIVXFlexOSSpecDriverSideCarsNodeSelector struct {
}

// CSIVXFlexOSSpecDriverSideCarsNodeSelectorInput is an input type that accepts CSIVXFlexOSSpecDriverSideCarsNodeSelectorArgs and CSIVXFlexOSSpecDriverSideCarsNodeSelectorOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverSideCarsNodeSelectorInput` via:
//
//          CSIVXFlexOSSpecDriverSideCarsNodeSelectorArgs{...}
type CSIVXFlexOSSpecDriverSideCarsNodeSelectorInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverSideCarsNodeSelectorOutput() CSIVXFlexOSSpecDriverSideCarsNodeSelectorOutput
	ToCSIVXFlexOSSpecDriverSideCarsNodeSelectorOutputWithContext(context.Context) CSIVXFlexOSSpecDriverSideCarsNodeSelectorOutput
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIVXFlexOSSpecDriverSideCarsNodeSelectorArgs struct {
}

func (CSIVXFlexOSSpecDriverSideCarsNodeSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverSideCarsNodeSelector)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverSideCarsNodeSelectorArgs) ToCSIVXFlexOSSpecDriverSideCarsNodeSelectorOutput() CSIVXFlexOSSpecDriverSideCarsNodeSelectorOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsNodeSelectorOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverSideCarsNodeSelectorArgs) ToCSIVXFlexOSSpecDriverSideCarsNodeSelectorOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsNodeSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsNodeSelectorOutput)
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
type CSIVXFlexOSSpecDriverSideCarsNodeSelectorOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverSideCarsNodeSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverSideCarsNodeSelector)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverSideCarsNodeSelectorOutput) ToCSIVXFlexOSSpecDriverSideCarsNodeSelectorOutput() CSIVXFlexOSSpecDriverSideCarsNodeSelectorOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsNodeSelectorOutput) ToCSIVXFlexOSSpecDriverSideCarsNodeSelectorOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsNodeSelectorOutput {
	return o
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIVXFlexOSSpecDriverSideCarsTolerations struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect *string `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key *string `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator *string `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds *int `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value *string `pulumi:"value"`
}

// CSIVXFlexOSSpecDriverSideCarsTolerationsInput is an input type that accepts CSIVXFlexOSSpecDriverSideCarsTolerationsArgs and CSIVXFlexOSSpecDriverSideCarsTolerationsOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverSideCarsTolerationsInput` via:
//
//          CSIVXFlexOSSpecDriverSideCarsTolerationsArgs{...}
type CSIVXFlexOSSpecDriverSideCarsTolerationsInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverSideCarsTolerationsOutput() CSIVXFlexOSSpecDriverSideCarsTolerationsOutput
	ToCSIVXFlexOSSpecDriverSideCarsTolerationsOutputWithContext(context.Context) CSIVXFlexOSSpecDriverSideCarsTolerationsOutput
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIVXFlexOSSpecDriverSideCarsTolerationsArgs struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect pulumi.StringPtrInput `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds pulumi.IntPtrInput `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (CSIVXFlexOSSpecDriverSideCarsTolerationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverSideCarsTolerations)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverSideCarsTolerationsArgs) ToCSIVXFlexOSSpecDriverSideCarsTolerationsOutput() CSIVXFlexOSSpecDriverSideCarsTolerationsOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsTolerationsOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverSideCarsTolerationsArgs) ToCSIVXFlexOSSpecDriverSideCarsTolerationsOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsTolerationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsTolerationsOutput)
}

// CSIVXFlexOSSpecDriverSideCarsTolerationsArrayInput is an input type that accepts CSIVXFlexOSSpecDriverSideCarsTolerationsArray and CSIVXFlexOSSpecDriverSideCarsTolerationsArrayOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverSideCarsTolerationsArrayInput` via:
//
//          CSIVXFlexOSSpecDriverSideCarsTolerationsArray{ CSIVXFlexOSSpecDriverSideCarsTolerationsArgs{...} }
type CSIVXFlexOSSpecDriverSideCarsTolerationsArrayInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverSideCarsTolerationsArrayOutput() CSIVXFlexOSSpecDriverSideCarsTolerationsArrayOutput
	ToCSIVXFlexOSSpecDriverSideCarsTolerationsArrayOutputWithContext(context.Context) CSIVXFlexOSSpecDriverSideCarsTolerationsArrayOutput
}

type CSIVXFlexOSSpecDriverSideCarsTolerationsArray []CSIVXFlexOSSpecDriverSideCarsTolerationsInput

func (CSIVXFlexOSSpecDriverSideCarsTolerationsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIVXFlexOSSpecDriverSideCarsTolerations)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverSideCarsTolerationsArray) ToCSIVXFlexOSSpecDriverSideCarsTolerationsArrayOutput() CSIVXFlexOSSpecDriverSideCarsTolerationsArrayOutput {
	return i.ToCSIVXFlexOSSpecDriverSideCarsTolerationsArrayOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverSideCarsTolerationsArray) ToCSIVXFlexOSSpecDriverSideCarsTolerationsArrayOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsTolerationsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSideCarsTolerationsArrayOutput)
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
type CSIVXFlexOSSpecDriverSideCarsTolerationsOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverSideCarsTolerationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverSideCarsTolerations)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverSideCarsTolerationsOutput) ToCSIVXFlexOSSpecDriverSideCarsTolerationsOutput() CSIVXFlexOSSpecDriverSideCarsTolerationsOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsTolerationsOutput) ToCSIVXFlexOSSpecDriverSideCarsTolerationsOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsTolerationsOutput {
	return o
}

// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
func (o CSIVXFlexOSSpecDriverSideCarsTolerationsOutput) Effect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsTolerations) *string { return v.Effect }).(pulumi.StringPtrOutput)
}

// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
func (o CSIVXFlexOSSpecDriverSideCarsTolerationsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsTolerations) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
func (o CSIVXFlexOSSpecDriverSideCarsTolerationsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsTolerations) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
func (o CSIVXFlexOSSpecDriverSideCarsTolerationsOutput) TolerationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsTolerations) *int { return v.TolerationSeconds }).(pulumi.IntPtrOutput)
}

// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
func (o CSIVXFlexOSSpecDriverSideCarsTolerationsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSideCarsTolerations) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type CSIVXFlexOSSpecDriverSideCarsTolerationsArrayOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverSideCarsTolerationsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIVXFlexOSSpecDriverSideCarsTolerations)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverSideCarsTolerationsArrayOutput) ToCSIVXFlexOSSpecDriverSideCarsTolerationsArrayOutput() CSIVXFlexOSSpecDriverSideCarsTolerationsArrayOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsTolerationsArrayOutput) ToCSIVXFlexOSSpecDriverSideCarsTolerationsArrayOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSideCarsTolerationsArrayOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSideCarsTolerationsArrayOutput) Index(i pulumi.IntInput) CSIVXFlexOSSpecDriverSideCarsTolerationsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIVXFlexOSSpecDriverSideCarsTolerations {
		return vs[0].([]CSIVXFlexOSSpecDriverSideCarsTolerations)[vs[1].(int)]
	}).(CSIVXFlexOSSpecDriverSideCarsTolerationsOutput)
}

// SnapshotClass represents a VolumeSnapshotClass
type CSIVXFlexOSSpecDriverSnapshotClass struct {
	// Name is the name of the Snapshot Class
	Name string `pulumi:"name"`
	// Parameters is a map of driver specific parameters for snapshot class
	Parameters map[string]string `pulumi:"parameters"`
}

// CSIVXFlexOSSpecDriverSnapshotClassInput is an input type that accepts CSIVXFlexOSSpecDriverSnapshotClassArgs and CSIVXFlexOSSpecDriverSnapshotClassOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverSnapshotClassInput` via:
//
//          CSIVXFlexOSSpecDriverSnapshotClassArgs{...}
type CSIVXFlexOSSpecDriverSnapshotClassInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverSnapshotClassOutput() CSIVXFlexOSSpecDriverSnapshotClassOutput
	ToCSIVXFlexOSSpecDriverSnapshotClassOutputWithContext(context.Context) CSIVXFlexOSSpecDriverSnapshotClassOutput
}

// SnapshotClass represents a VolumeSnapshotClass
type CSIVXFlexOSSpecDriverSnapshotClassArgs struct {
	// Name is the name of the Snapshot Class
	Name pulumi.StringInput `pulumi:"name"`
	// Parameters is a map of driver specific parameters for snapshot class
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
}

func (CSIVXFlexOSSpecDriverSnapshotClassArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverSnapshotClass)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverSnapshotClassArgs) ToCSIVXFlexOSSpecDriverSnapshotClassOutput() CSIVXFlexOSSpecDriverSnapshotClassOutput {
	return i.ToCSIVXFlexOSSpecDriverSnapshotClassOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverSnapshotClassArgs) ToCSIVXFlexOSSpecDriverSnapshotClassOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSnapshotClassOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSnapshotClassOutput)
}

// CSIVXFlexOSSpecDriverSnapshotClassArrayInput is an input type that accepts CSIVXFlexOSSpecDriverSnapshotClassArray and CSIVXFlexOSSpecDriverSnapshotClassArrayOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverSnapshotClassArrayInput` via:
//
//          CSIVXFlexOSSpecDriverSnapshotClassArray{ CSIVXFlexOSSpecDriverSnapshotClassArgs{...} }
type CSIVXFlexOSSpecDriverSnapshotClassArrayInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverSnapshotClassArrayOutput() CSIVXFlexOSSpecDriverSnapshotClassArrayOutput
	ToCSIVXFlexOSSpecDriverSnapshotClassArrayOutputWithContext(context.Context) CSIVXFlexOSSpecDriverSnapshotClassArrayOutput
}

type CSIVXFlexOSSpecDriverSnapshotClassArray []CSIVXFlexOSSpecDriverSnapshotClassInput

func (CSIVXFlexOSSpecDriverSnapshotClassArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIVXFlexOSSpecDriverSnapshotClass)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverSnapshotClassArray) ToCSIVXFlexOSSpecDriverSnapshotClassArrayOutput() CSIVXFlexOSSpecDriverSnapshotClassArrayOutput {
	return i.ToCSIVXFlexOSSpecDriverSnapshotClassArrayOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverSnapshotClassArray) ToCSIVXFlexOSSpecDriverSnapshotClassArrayOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSnapshotClassArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSnapshotClassArrayOutput)
}

// SnapshotClass represents a VolumeSnapshotClass
type CSIVXFlexOSSpecDriverSnapshotClassOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverSnapshotClassOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverSnapshotClass)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverSnapshotClassOutput) ToCSIVXFlexOSSpecDriverSnapshotClassOutput() CSIVXFlexOSSpecDriverSnapshotClassOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSnapshotClassOutput) ToCSIVXFlexOSSpecDriverSnapshotClassOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSnapshotClassOutput {
	return o
}

// Name is the name of the Snapshot Class
func (o CSIVXFlexOSSpecDriverSnapshotClassOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSnapshotClass) string { return v.Name }).(pulumi.StringOutput)
}

// Parameters is a map of driver specific parameters for snapshot class
func (o CSIVXFlexOSSpecDriverSnapshotClassOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverSnapshotClass) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

type CSIVXFlexOSSpecDriverSnapshotClassArrayOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverSnapshotClassArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIVXFlexOSSpecDriverSnapshotClass)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverSnapshotClassArrayOutput) ToCSIVXFlexOSSpecDriverSnapshotClassArrayOutput() CSIVXFlexOSSpecDriverSnapshotClassArrayOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSnapshotClassArrayOutput) ToCSIVXFlexOSSpecDriverSnapshotClassArrayOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSnapshotClassArrayOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSnapshotClassArrayOutput) Index(i pulumi.IntInput) CSIVXFlexOSSpecDriverSnapshotClassOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIVXFlexOSSpecDriverSnapshotClass {
		return vs[0].([]CSIVXFlexOSSpecDriverSnapshotClass)[vs[1].(int)]
	}).(CSIVXFlexOSSpecDriverSnapshotClassOutput)
}

// Parameters is a map of driver specific parameters for snapshot class
type CSIVXFlexOSSpecDriverSnapshotClassParameters struct {
}

// CSIVXFlexOSSpecDriverSnapshotClassParametersInput is an input type that accepts CSIVXFlexOSSpecDriverSnapshotClassParametersArgs and CSIVXFlexOSSpecDriverSnapshotClassParametersOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverSnapshotClassParametersInput` via:
//
//          CSIVXFlexOSSpecDriverSnapshotClassParametersArgs{...}
type CSIVXFlexOSSpecDriverSnapshotClassParametersInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverSnapshotClassParametersOutput() CSIVXFlexOSSpecDriverSnapshotClassParametersOutput
	ToCSIVXFlexOSSpecDriverSnapshotClassParametersOutputWithContext(context.Context) CSIVXFlexOSSpecDriverSnapshotClassParametersOutput
}

// Parameters is a map of driver specific parameters for snapshot class
type CSIVXFlexOSSpecDriverSnapshotClassParametersArgs struct {
}

func (CSIVXFlexOSSpecDriverSnapshotClassParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverSnapshotClassParameters)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverSnapshotClassParametersArgs) ToCSIVXFlexOSSpecDriverSnapshotClassParametersOutput() CSIVXFlexOSSpecDriverSnapshotClassParametersOutput {
	return i.ToCSIVXFlexOSSpecDriverSnapshotClassParametersOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverSnapshotClassParametersArgs) ToCSIVXFlexOSSpecDriverSnapshotClassParametersOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSnapshotClassParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverSnapshotClassParametersOutput)
}

// Parameters is a map of driver specific parameters for snapshot class
type CSIVXFlexOSSpecDriverSnapshotClassParametersOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverSnapshotClassParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverSnapshotClassParameters)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverSnapshotClassParametersOutput) ToCSIVXFlexOSSpecDriverSnapshotClassParametersOutput() CSIVXFlexOSSpecDriverSnapshotClassParametersOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverSnapshotClassParametersOutput) ToCSIVXFlexOSSpecDriverSnapshotClassParametersOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverSnapshotClassParametersOutput {
	return o
}

// StorageClass represents a kubernetes storage class
type CSIVXFlexOSSpecDriverStorageClass struct {
	// AllowVolumeExpansion is a boolean flag which indicates if volumes can be expanded
	AllowVolumeExpansion *bool `pulumi:"allowVolumeExpansion"`
	// Restrict the node topologies where volumes can be dynamically provisioned.
	AllowedTopologies []CSIVXFlexOSSpecDriverStorageClassAllowedTopologies `pulumi:"allowedTopologies"`
	// DefaultSc is a boolean flag to indicate if the storage class is going to be marked as default
	Default *bool `pulumi:"default"`
	// Name is the name of the StorageClass
	Name string `pulumi:"name"`
	// Parameters is a map of driver specific storage class
	Parameters map[string]string `pulumi:"parameters"`
	// ReclaimPolicy is the reclaim policy for the storage class
	ReclaimPolicy *string `pulumi:"reclaimPolicy"`
}

// CSIVXFlexOSSpecDriverStorageClassInput is an input type that accepts CSIVXFlexOSSpecDriverStorageClassArgs and CSIVXFlexOSSpecDriverStorageClassOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverStorageClassInput` via:
//
//          CSIVXFlexOSSpecDriverStorageClassArgs{...}
type CSIVXFlexOSSpecDriverStorageClassInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverStorageClassOutput() CSIVXFlexOSSpecDriverStorageClassOutput
	ToCSIVXFlexOSSpecDriverStorageClassOutputWithContext(context.Context) CSIVXFlexOSSpecDriverStorageClassOutput
}

// StorageClass represents a kubernetes storage class
type CSIVXFlexOSSpecDriverStorageClassArgs struct {
	// AllowVolumeExpansion is a boolean flag which indicates if volumes can be expanded
	AllowVolumeExpansion pulumi.BoolPtrInput `pulumi:"allowVolumeExpansion"`
	// Restrict the node topologies where volumes can be dynamically provisioned.
	AllowedTopologies CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesArrayInput `pulumi:"allowedTopologies"`
	// DefaultSc is a boolean flag to indicate if the storage class is going to be marked as default
	Default pulumi.BoolPtrInput `pulumi:"default"`
	// Name is the name of the StorageClass
	Name pulumi.StringInput `pulumi:"name"`
	// Parameters is a map of driver specific storage class
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
	// ReclaimPolicy is the reclaim policy for the storage class
	ReclaimPolicy pulumi.StringPtrInput `pulumi:"reclaimPolicy"`
}

func (CSIVXFlexOSSpecDriverStorageClassArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverStorageClass)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverStorageClassArgs) ToCSIVXFlexOSSpecDriverStorageClassOutput() CSIVXFlexOSSpecDriverStorageClassOutput {
	return i.ToCSIVXFlexOSSpecDriverStorageClassOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverStorageClassArgs) ToCSIVXFlexOSSpecDriverStorageClassOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverStorageClassOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverStorageClassOutput)
}

// CSIVXFlexOSSpecDriverStorageClassArrayInput is an input type that accepts CSIVXFlexOSSpecDriverStorageClassArray and CSIVXFlexOSSpecDriverStorageClassArrayOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverStorageClassArrayInput` via:
//
//          CSIVXFlexOSSpecDriverStorageClassArray{ CSIVXFlexOSSpecDriverStorageClassArgs{...} }
type CSIVXFlexOSSpecDriverStorageClassArrayInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverStorageClassArrayOutput() CSIVXFlexOSSpecDriverStorageClassArrayOutput
	ToCSIVXFlexOSSpecDriverStorageClassArrayOutputWithContext(context.Context) CSIVXFlexOSSpecDriverStorageClassArrayOutput
}

type CSIVXFlexOSSpecDriverStorageClassArray []CSIVXFlexOSSpecDriverStorageClassInput

func (CSIVXFlexOSSpecDriverStorageClassArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIVXFlexOSSpecDriverStorageClass)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverStorageClassArray) ToCSIVXFlexOSSpecDriverStorageClassArrayOutput() CSIVXFlexOSSpecDriverStorageClassArrayOutput {
	return i.ToCSIVXFlexOSSpecDriverStorageClassArrayOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverStorageClassArray) ToCSIVXFlexOSSpecDriverStorageClassArrayOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverStorageClassArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverStorageClassArrayOutput)
}

// StorageClass represents a kubernetes storage class
type CSIVXFlexOSSpecDriverStorageClassOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverStorageClassOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverStorageClass)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverStorageClassOutput) ToCSIVXFlexOSSpecDriverStorageClassOutput() CSIVXFlexOSSpecDriverStorageClassOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverStorageClassOutput) ToCSIVXFlexOSSpecDriverStorageClassOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverStorageClassOutput {
	return o
}

// AllowVolumeExpansion is a boolean flag which indicates if volumes can be expanded
func (o CSIVXFlexOSSpecDriverStorageClassOutput) AllowVolumeExpansion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverStorageClass) *bool { return v.AllowVolumeExpansion }).(pulumi.BoolPtrOutput)
}

// Restrict the node topologies where volumes can be dynamically provisioned.
func (o CSIVXFlexOSSpecDriverStorageClassOutput) AllowedTopologies() CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverStorageClass) []CSIVXFlexOSSpecDriverStorageClassAllowedTopologies {
		return v.AllowedTopologies
	}).(CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesArrayOutput)
}

// DefaultSc is a boolean flag to indicate if the storage class is going to be marked as default
func (o CSIVXFlexOSSpecDriverStorageClassOutput) Default() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverStorageClass) *bool { return v.Default }).(pulumi.BoolPtrOutput)
}

// Name is the name of the StorageClass
func (o CSIVXFlexOSSpecDriverStorageClassOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverStorageClass) string { return v.Name }).(pulumi.StringOutput)
}

// Parameters is a map of driver specific storage class
func (o CSIVXFlexOSSpecDriverStorageClassOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverStorageClass) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

// ReclaimPolicy is the reclaim policy for the storage class
func (o CSIVXFlexOSSpecDriverStorageClassOutput) ReclaimPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverStorageClass) *string { return v.ReclaimPolicy }).(pulumi.StringPtrOutput)
}

type CSIVXFlexOSSpecDriverStorageClassArrayOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverStorageClassArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIVXFlexOSSpecDriverStorageClass)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverStorageClassArrayOutput) ToCSIVXFlexOSSpecDriverStorageClassArrayOutput() CSIVXFlexOSSpecDriverStorageClassArrayOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverStorageClassArrayOutput) ToCSIVXFlexOSSpecDriverStorageClassArrayOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverStorageClassArrayOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverStorageClassArrayOutput) Index(i pulumi.IntInput) CSIVXFlexOSSpecDriverStorageClassOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIVXFlexOSSpecDriverStorageClass {
		return vs[0].([]CSIVXFlexOSSpecDriverStorageClass)[vs[1].(int)]
	}).(CSIVXFlexOSSpecDriverStorageClassOutput)
}

// A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.
type CSIVXFlexOSSpecDriverStorageClassAllowedTopologies struct {
	// A list of topology selector requirements by labels.
	MatchLabelExpressions []CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions `pulumi:"matchLabelExpressions"`
}

// CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesInput is an input type that accepts CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesArgs and CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesInput` via:
//
//          CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesArgs{...}
type CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverStorageClassAllowedTopologiesOutput() CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesOutput
	ToCSIVXFlexOSSpecDriverStorageClassAllowedTopologiesOutputWithContext(context.Context) CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesOutput
}

// A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.
type CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesArgs struct {
	// A list of topology selector requirements by labels.
	MatchLabelExpressions CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayInput `pulumi:"matchLabelExpressions"`
}

func (CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverStorageClassAllowedTopologies)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesArgs) ToCSIVXFlexOSSpecDriverStorageClassAllowedTopologiesOutput() CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesOutput {
	return i.ToCSIVXFlexOSSpecDriverStorageClassAllowedTopologiesOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesArgs) ToCSIVXFlexOSSpecDriverStorageClassAllowedTopologiesOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesOutput)
}

// CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesArrayInput is an input type that accepts CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesArray and CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesArrayOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesArrayInput` via:
//
//          CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesArray{ CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesArgs{...} }
type CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesArrayInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverStorageClassAllowedTopologiesArrayOutput() CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesArrayOutput
	ToCSIVXFlexOSSpecDriverStorageClassAllowedTopologiesArrayOutputWithContext(context.Context) CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesArrayOutput
}

type CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesArray []CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesInput

func (CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIVXFlexOSSpecDriverStorageClassAllowedTopologies)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesArray) ToCSIVXFlexOSSpecDriverStorageClassAllowedTopologiesArrayOutput() CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesArrayOutput {
	return i.ToCSIVXFlexOSSpecDriverStorageClassAllowedTopologiesArrayOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesArray) ToCSIVXFlexOSSpecDriverStorageClassAllowedTopologiesArrayOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesArrayOutput)
}

// A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.
type CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverStorageClassAllowedTopologies)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesOutput) ToCSIVXFlexOSSpecDriverStorageClassAllowedTopologiesOutput() CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesOutput) ToCSIVXFlexOSSpecDriverStorageClassAllowedTopologiesOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesOutput {
	return o
}

// A list of topology selector requirements by labels.
func (o CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesOutput) MatchLabelExpressions() CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverStorageClassAllowedTopologies) []CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions {
		return v.MatchLabelExpressions
	}).(CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput)
}

type CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesArrayOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIVXFlexOSSpecDriverStorageClassAllowedTopologies)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesArrayOutput) ToCSIVXFlexOSSpecDriverStorageClassAllowedTopologiesArrayOutput() CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesArrayOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesArrayOutput) ToCSIVXFlexOSSpecDriverStorageClassAllowedTopologiesArrayOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesArrayOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesArrayOutput) Index(i pulumi.IntInput) CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIVXFlexOSSpecDriverStorageClassAllowedTopologies {
		return vs[0].([]CSIVXFlexOSSpecDriverStorageClassAllowedTopologies)[vs[1].(int)]
	}).(CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesOutput)
}

// A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.
type CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions struct {
	// The label key that the selector applies to.
	Key string `pulumi:"key"`
	// An array of string values. One value must match the label to be selected. Each entry in Values is ORed.
	Values []string `pulumi:"values"`
}

// CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsInput is an input type that accepts CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArgs and CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsInput` via:
//
//          CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArgs{...}
type CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput() CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput
	ToCSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutputWithContext(context.Context) CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput
}

// A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.
type CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArgs struct {
	// The label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// An array of string values. One value must match the label to be selected. Each entry in Values is ORed.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArgs) ToCSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput() CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput {
	return i.ToCSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArgs) ToCSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput)
}

// CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayInput is an input type that accepts CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArray and CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayInput` via:
//
//          CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArray{ CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArgs{...} }
type CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput() CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput
	ToCSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutputWithContext(context.Context) CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput
}

type CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArray []CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsInput

func (CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArray) ToCSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput() CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput {
	return i.ToCSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArray) ToCSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput)
}

// A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.
type CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput) ToCSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput() CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput) ToCSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput {
	return o
}

// The label key that the selector applies to.
func (o CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions) string { return v.Key }).(pulumi.StringOutput)
}

// An array of string values. One value must match the label to be selected. Each entry in Values is ORed.
func (o CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput) ToCSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput() CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput) ToCSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput) Index(i pulumi.IntInput) CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions {
		return vs[0].([]CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions)[vs[1].(int)]
	}).(CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput)
}

// Parameters is a map of driver specific storage class
type CSIVXFlexOSSpecDriverStorageClassParameters struct {
}

// CSIVXFlexOSSpecDriverStorageClassParametersInput is an input type that accepts CSIVXFlexOSSpecDriverStorageClassParametersArgs and CSIVXFlexOSSpecDriverStorageClassParametersOutput values.
// You can construct a concrete instance of `CSIVXFlexOSSpecDriverStorageClassParametersInput` via:
//
//          CSIVXFlexOSSpecDriverStorageClassParametersArgs{...}
type CSIVXFlexOSSpecDriverStorageClassParametersInput interface {
	pulumi.Input

	ToCSIVXFlexOSSpecDriverStorageClassParametersOutput() CSIVXFlexOSSpecDriverStorageClassParametersOutput
	ToCSIVXFlexOSSpecDriverStorageClassParametersOutputWithContext(context.Context) CSIVXFlexOSSpecDriverStorageClassParametersOutput
}

// Parameters is a map of driver specific storage class
type CSIVXFlexOSSpecDriverStorageClassParametersArgs struct {
}

func (CSIVXFlexOSSpecDriverStorageClassParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverStorageClassParameters)(nil)).Elem()
}

func (i CSIVXFlexOSSpecDriverStorageClassParametersArgs) ToCSIVXFlexOSSpecDriverStorageClassParametersOutput() CSIVXFlexOSSpecDriverStorageClassParametersOutput {
	return i.ToCSIVXFlexOSSpecDriverStorageClassParametersOutputWithContext(context.Background())
}

func (i CSIVXFlexOSSpecDriverStorageClassParametersArgs) ToCSIVXFlexOSSpecDriverStorageClassParametersOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverStorageClassParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSSpecDriverStorageClassParametersOutput)
}

// Parameters is a map of driver specific storage class
type CSIVXFlexOSSpecDriverStorageClassParametersOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSSpecDriverStorageClassParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSSpecDriverStorageClassParameters)(nil)).Elem()
}

func (o CSIVXFlexOSSpecDriverStorageClassParametersOutput) ToCSIVXFlexOSSpecDriverStorageClassParametersOutput() CSIVXFlexOSSpecDriverStorageClassParametersOutput {
	return o
}

func (o CSIVXFlexOSSpecDriverStorageClassParametersOutput) ToCSIVXFlexOSSpecDriverStorageClassParametersOutputWithContext(ctx context.Context) CSIVXFlexOSSpecDriverStorageClassParametersOutput {
	return o
}

// DriverStatus defines the observed state of CSIDriver
type CSIVXFlexOSStatus struct {
	// ControllerStatus is the status of Controller pods
	ControllerStatus *CSIVXFlexOSStatusControllerStatus `pulumi:"controllerStatus"`
	// DriverHash is a hash of the driver specification
	DriverHash *int `pulumi:"driverHash"`
	// LastUpdate is the last updated state of the driver
	LastUpdate *CSIVXFlexOSStatusLastUpdate `pulumi:"lastUpdate"`
	// NodeStatus is the status of Controller pods
	NodeStatus *CSIVXFlexOSStatusNodeStatus `pulumi:"nodeStatus"`
	// State is the state of the driver installation
	State *string `pulumi:"state"`
}

// CSIVXFlexOSStatusInput is an input type that accepts CSIVXFlexOSStatusArgs and CSIVXFlexOSStatusOutput values.
// You can construct a concrete instance of `CSIVXFlexOSStatusInput` via:
//
//          CSIVXFlexOSStatusArgs{...}
type CSIVXFlexOSStatusInput interface {
	pulumi.Input

	ToCSIVXFlexOSStatusOutput() CSIVXFlexOSStatusOutput
	ToCSIVXFlexOSStatusOutputWithContext(context.Context) CSIVXFlexOSStatusOutput
}

// DriverStatus defines the observed state of CSIDriver
type CSIVXFlexOSStatusArgs struct {
	// ControllerStatus is the status of Controller pods
	ControllerStatus CSIVXFlexOSStatusControllerStatusPtrInput `pulumi:"controllerStatus"`
	// DriverHash is a hash of the driver specification
	DriverHash pulumi.IntPtrInput `pulumi:"driverHash"`
	// LastUpdate is the last updated state of the driver
	LastUpdate CSIVXFlexOSStatusLastUpdatePtrInput `pulumi:"lastUpdate"`
	// NodeStatus is the status of Controller pods
	NodeStatus CSIVXFlexOSStatusNodeStatusPtrInput `pulumi:"nodeStatus"`
	// State is the state of the driver installation
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (CSIVXFlexOSStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSStatus)(nil)).Elem()
}

func (i CSIVXFlexOSStatusArgs) ToCSIVXFlexOSStatusOutput() CSIVXFlexOSStatusOutput {
	return i.ToCSIVXFlexOSStatusOutputWithContext(context.Background())
}

func (i CSIVXFlexOSStatusArgs) ToCSIVXFlexOSStatusOutputWithContext(ctx context.Context) CSIVXFlexOSStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSStatusOutput)
}

func (i CSIVXFlexOSStatusArgs) ToCSIVXFlexOSStatusPtrOutput() CSIVXFlexOSStatusPtrOutput {
	return i.ToCSIVXFlexOSStatusPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSStatusArgs) ToCSIVXFlexOSStatusPtrOutputWithContext(ctx context.Context) CSIVXFlexOSStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSStatusOutput).ToCSIVXFlexOSStatusPtrOutputWithContext(ctx)
}

// CSIVXFlexOSStatusPtrInput is an input type that accepts CSIVXFlexOSStatusArgs, CSIVXFlexOSStatusPtr and CSIVXFlexOSStatusPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSStatusPtrInput` via:
//
//          CSIVXFlexOSStatusArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSStatusPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSStatusPtrOutput() CSIVXFlexOSStatusPtrOutput
	ToCSIVXFlexOSStatusPtrOutputWithContext(context.Context) CSIVXFlexOSStatusPtrOutput
}

type csivxflexOSStatusPtrType CSIVXFlexOSStatusArgs

func CSIVXFlexOSStatusPtr(v *CSIVXFlexOSStatusArgs) CSIVXFlexOSStatusPtrInput {
	return (*csivxflexOSStatusPtrType)(v)
}

func (*csivxflexOSStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSStatus)(nil)).Elem()
}

func (i *csivxflexOSStatusPtrType) ToCSIVXFlexOSStatusPtrOutput() CSIVXFlexOSStatusPtrOutput {
	return i.ToCSIVXFlexOSStatusPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSStatusPtrType) ToCSIVXFlexOSStatusPtrOutputWithContext(ctx context.Context) CSIVXFlexOSStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSStatusPtrOutput)
}

// DriverStatus defines the observed state of CSIDriver
type CSIVXFlexOSStatusOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSStatus)(nil)).Elem()
}

func (o CSIVXFlexOSStatusOutput) ToCSIVXFlexOSStatusOutput() CSIVXFlexOSStatusOutput {
	return o
}

func (o CSIVXFlexOSStatusOutput) ToCSIVXFlexOSStatusOutputWithContext(ctx context.Context) CSIVXFlexOSStatusOutput {
	return o
}

func (o CSIVXFlexOSStatusOutput) ToCSIVXFlexOSStatusPtrOutput() CSIVXFlexOSStatusPtrOutput {
	return o.ToCSIVXFlexOSStatusPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSStatusOutput) ToCSIVXFlexOSStatusPtrOutputWithContext(ctx context.Context) CSIVXFlexOSStatusPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSStatus) *CSIVXFlexOSStatus {
		return &v
	}).(CSIVXFlexOSStatusPtrOutput)
}

// ControllerStatus is the status of Controller pods
func (o CSIVXFlexOSStatusOutput) ControllerStatus() CSIVXFlexOSStatusControllerStatusPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSStatus) *CSIVXFlexOSStatusControllerStatus { return v.ControllerStatus }).(CSIVXFlexOSStatusControllerStatusPtrOutput)
}

// DriverHash is a hash of the driver specification
func (o CSIVXFlexOSStatusOutput) DriverHash() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSStatus) *int { return v.DriverHash }).(pulumi.IntPtrOutput)
}

// LastUpdate is the last updated state of the driver
func (o CSIVXFlexOSStatusOutput) LastUpdate() CSIVXFlexOSStatusLastUpdatePtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSStatus) *CSIVXFlexOSStatusLastUpdate { return v.LastUpdate }).(CSIVXFlexOSStatusLastUpdatePtrOutput)
}

// NodeStatus is the status of Controller pods
func (o CSIVXFlexOSStatusOutput) NodeStatus() CSIVXFlexOSStatusNodeStatusPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSStatus) *CSIVXFlexOSStatusNodeStatus { return v.NodeStatus }).(CSIVXFlexOSStatusNodeStatusPtrOutput)
}

// State is the state of the driver installation
func (o CSIVXFlexOSStatusOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSStatus) *string { return v.State }).(pulumi.StringPtrOutput)
}

type CSIVXFlexOSStatusPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSStatus)(nil)).Elem()
}

func (o CSIVXFlexOSStatusPtrOutput) ToCSIVXFlexOSStatusPtrOutput() CSIVXFlexOSStatusPtrOutput {
	return o
}

func (o CSIVXFlexOSStatusPtrOutput) ToCSIVXFlexOSStatusPtrOutputWithContext(ctx context.Context) CSIVXFlexOSStatusPtrOutput {
	return o
}

func (o CSIVXFlexOSStatusPtrOutput) Elem() CSIVXFlexOSStatusOutput {
	return o.ApplyT(func(v *CSIVXFlexOSStatus) CSIVXFlexOSStatus { return *v }).(CSIVXFlexOSStatusOutput)
}

// ControllerStatus is the status of Controller pods
func (o CSIVXFlexOSStatusPtrOutput) ControllerStatus() CSIVXFlexOSStatusControllerStatusPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSStatus) *CSIVXFlexOSStatusControllerStatus {
		if v == nil {
			return nil
		}
		return v.ControllerStatus
	}).(CSIVXFlexOSStatusControllerStatusPtrOutput)
}

// DriverHash is a hash of the driver specification
func (o CSIVXFlexOSStatusPtrOutput) DriverHash() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSStatus) *int {
		if v == nil {
			return nil
		}
		return v.DriverHash
	}).(pulumi.IntPtrOutput)
}

// LastUpdate is the last updated state of the driver
func (o CSIVXFlexOSStatusPtrOutput) LastUpdate() CSIVXFlexOSStatusLastUpdatePtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSStatus) *CSIVXFlexOSStatusLastUpdate {
		if v == nil {
			return nil
		}
		return v.LastUpdate
	}).(CSIVXFlexOSStatusLastUpdatePtrOutput)
}

// NodeStatus is the status of Controller pods
func (o CSIVXFlexOSStatusPtrOutput) NodeStatus() CSIVXFlexOSStatusNodeStatusPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSStatus) *CSIVXFlexOSStatusNodeStatus {
		if v == nil {
			return nil
		}
		return v.NodeStatus
	}).(CSIVXFlexOSStatusNodeStatusPtrOutput)
}

// State is the state of the driver installation
func (o CSIVXFlexOSStatusPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSStatus) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// ControllerStatus is the status of Controller pods
type CSIVXFlexOSStatusControllerStatus struct {
	Available []string `pulumi:"available"`
	Ready     []string `pulumi:"ready"`
	Starting  []string `pulumi:"starting"`
	Stopped   []string `pulumi:"stopped"`
}

// CSIVXFlexOSStatusControllerStatusInput is an input type that accepts CSIVXFlexOSStatusControllerStatusArgs and CSIVXFlexOSStatusControllerStatusOutput values.
// You can construct a concrete instance of `CSIVXFlexOSStatusControllerStatusInput` via:
//
//          CSIVXFlexOSStatusControllerStatusArgs{...}
type CSIVXFlexOSStatusControllerStatusInput interface {
	pulumi.Input

	ToCSIVXFlexOSStatusControllerStatusOutput() CSIVXFlexOSStatusControllerStatusOutput
	ToCSIVXFlexOSStatusControllerStatusOutputWithContext(context.Context) CSIVXFlexOSStatusControllerStatusOutput
}

// ControllerStatus is the status of Controller pods
type CSIVXFlexOSStatusControllerStatusArgs struct {
	Available pulumi.StringArrayInput `pulumi:"available"`
	Ready     pulumi.StringArrayInput `pulumi:"ready"`
	Starting  pulumi.StringArrayInput `pulumi:"starting"`
	Stopped   pulumi.StringArrayInput `pulumi:"stopped"`
}

func (CSIVXFlexOSStatusControllerStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSStatusControllerStatus)(nil)).Elem()
}

func (i CSIVXFlexOSStatusControllerStatusArgs) ToCSIVXFlexOSStatusControllerStatusOutput() CSIVXFlexOSStatusControllerStatusOutput {
	return i.ToCSIVXFlexOSStatusControllerStatusOutputWithContext(context.Background())
}

func (i CSIVXFlexOSStatusControllerStatusArgs) ToCSIVXFlexOSStatusControllerStatusOutputWithContext(ctx context.Context) CSIVXFlexOSStatusControllerStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSStatusControllerStatusOutput)
}

func (i CSIVXFlexOSStatusControllerStatusArgs) ToCSIVXFlexOSStatusControllerStatusPtrOutput() CSIVXFlexOSStatusControllerStatusPtrOutput {
	return i.ToCSIVXFlexOSStatusControllerStatusPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSStatusControllerStatusArgs) ToCSIVXFlexOSStatusControllerStatusPtrOutputWithContext(ctx context.Context) CSIVXFlexOSStatusControllerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSStatusControllerStatusOutput).ToCSIVXFlexOSStatusControllerStatusPtrOutputWithContext(ctx)
}

// CSIVXFlexOSStatusControllerStatusPtrInput is an input type that accepts CSIVXFlexOSStatusControllerStatusArgs, CSIVXFlexOSStatusControllerStatusPtr and CSIVXFlexOSStatusControllerStatusPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSStatusControllerStatusPtrInput` via:
//
//          CSIVXFlexOSStatusControllerStatusArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSStatusControllerStatusPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSStatusControllerStatusPtrOutput() CSIVXFlexOSStatusControllerStatusPtrOutput
	ToCSIVXFlexOSStatusControllerStatusPtrOutputWithContext(context.Context) CSIVXFlexOSStatusControllerStatusPtrOutput
}

type csivxflexOSStatusControllerStatusPtrType CSIVXFlexOSStatusControllerStatusArgs

func CSIVXFlexOSStatusControllerStatusPtr(v *CSIVXFlexOSStatusControllerStatusArgs) CSIVXFlexOSStatusControllerStatusPtrInput {
	return (*csivxflexOSStatusControllerStatusPtrType)(v)
}

func (*csivxflexOSStatusControllerStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSStatusControllerStatus)(nil)).Elem()
}

func (i *csivxflexOSStatusControllerStatusPtrType) ToCSIVXFlexOSStatusControllerStatusPtrOutput() CSIVXFlexOSStatusControllerStatusPtrOutput {
	return i.ToCSIVXFlexOSStatusControllerStatusPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSStatusControllerStatusPtrType) ToCSIVXFlexOSStatusControllerStatusPtrOutputWithContext(ctx context.Context) CSIVXFlexOSStatusControllerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSStatusControllerStatusPtrOutput)
}

// ControllerStatus is the status of Controller pods
type CSIVXFlexOSStatusControllerStatusOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSStatusControllerStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSStatusControllerStatus)(nil)).Elem()
}

func (o CSIVXFlexOSStatusControllerStatusOutput) ToCSIVXFlexOSStatusControllerStatusOutput() CSIVXFlexOSStatusControllerStatusOutput {
	return o
}

func (o CSIVXFlexOSStatusControllerStatusOutput) ToCSIVXFlexOSStatusControllerStatusOutputWithContext(ctx context.Context) CSIVXFlexOSStatusControllerStatusOutput {
	return o
}

func (o CSIVXFlexOSStatusControllerStatusOutput) ToCSIVXFlexOSStatusControllerStatusPtrOutput() CSIVXFlexOSStatusControllerStatusPtrOutput {
	return o.ToCSIVXFlexOSStatusControllerStatusPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSStatusControllerStatusOutput) ToCSIVXFlexOSStatusControllerStatusPtrOutputWithContext(ctx context.Context) CSIVXFlexOSStatusControllerStatusPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSStatusControllerStatus) *CSIVXFlexOSStatusControllerStatus {
		return &v
	}).(CSIVXFlexOSStatusControllerStatusPtrOutput)
}
func (o CSIVXFlexOSStatusControllerStatusOutput) Available() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSStatusControllerStatus) []string { return v.Available }).(pulumi.StringArrayOutput)
}

func (o CSIVXFlexOSStatusControllerStatusOutput) Ready() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSStatusControllerStatus) []string { return v.Ready }).(pulumi.StringArrayOutput)
}

func (o CSIVXFlexOSStatusControllerStatusOutput) Starting() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSStatusControllerStatus) []string { return v.Starting }).(pulumi.StringArrayOutput)
}

func (o CSIVXFlexOSStatusControllerStatusOutput) Stopped() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSStatusControllerStatus) []string { return v.Stopped }).(pulumi.StringArrayOutput)
}

type CSIVXFlexOSStatusControllerStatusPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSStatusControllerStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSStatusControllerStatus)(nil)).Elem()
}

func (o CSIVXFlexOSStatusControllerStatusPtrOutput) ToCSIVXFlexOSStatusControllerStatusPtrOutput() CSIVXFlexOSStatusControllerStatusPtrOutput {
	return o
}

func (o CSIVXFlexOSStatusControllerStatusPtrOutput) ToCSIVXFlexOSStatusControllerStatusPtrOutputWithContext(ctx context.Context) CSIVXFlexOSStatusControllerStatusPtrOutput {
	return o
}

func (o CSIVXFlexOSStatusControllerStatusPtrOutput) Elem() CSIVXFlexOSStatusControllerStatusOutput {
	return o.ApplyT(func(v *CSIVXFlexOSStatusControllerStatus) CSIVXFlexOSStatusControllerStatus { return *v }).(CSIVXFlexOSStatusControllerStatusOutput)
}

func (o CSIVXFlexOSStatusControllerStatusPtrOutput) Available() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIVXFlexOSStatusControllerStatus) []string {
		if v == nil {
			return nil
		}
		return v.Available
	}).(pulumi.StringArrayOutput)
}

func (o CSIVXFlexOSStatusControllerStatusPtrOutput) Ready() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIVXFlexOSStatusControllerStatus) []string {
		if v == nil {
			return nil
		}
		return v.Ready
	}).(pulumi.StringArrayOutput)
}

func (o CSIVXFlexOSStatusControllerStatusPtrOutput) Starting() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIVXFlexOSStatusControllerStatus) []string {
		if v == nil {
			return nil
		}
		return v.Starting
	}).(pulumi.StringArrayOutput)
}

func (o CSIVXFlexOSStatusControllerStatusPtrOutput) Stopped() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIVXFlexOSStatusControllerStatus) []string {
		if v == nil {
			return nil
		}
		return v.Stopped
	}).(pulumi.StringArrayOutput)
}

// LastUpdate is the last updated state of the driver
type CSIVXFlexOSStatusLastUpdate struct {
	// Condition is the last known condition of the Custom Resource
	Condition *string `pulumi:"condition"`
	// ErrorMessage is the last error message associated with the condition
	ErrorMessage *string `pulumi:"errorMessage"`
	// Time is the time stamp for the last condition update
	Time *string `pulumi:"time"`
}

// CSIVXFlexOSStatusLastUpdateInput is an input type that accepts CSIVXFlexOSStatusLastUpdateArgs and CSIVXFlexOSStatusLastUpdateOutput values.
// You can construct a concrete instance of `CSIVXFlexOSStatusLastUpdateInput` via:
//
//          CSIVXFlexOSStatusLastUpdateArgs{...}
type CSIVXFlexOSStatusLastUpdateInput interface {
	pulumi.Input

	ToCSIVXFlexOSStatusLastUpdateOutput() CSIVXFlexOSStatusLastUpdateOutput
	ToCSIVXFlexOSStatusLastUpdateOutputWithContext(context.Context) CSIVXFlexOSStatusLastUpdateOutput
}

// LastUpdate is the last updated state of the driver
type CSIVXFlexOSStatusLastUpdateArgs struct {
	// Condition is the last known condition of the Custom Resource
	Condition pulumi.StringPtrInput `pulumi:"condition"`
	// ErrorMessage is the last error message associated with the condition
	ErrorMessage pulumi.StringPtrInput `pulumi:"errorMessage"`
	// Time is the time stamp for the last condition update
	Time pulumi.StringPtrInput `pulumi:"time"`
}

func (CSIVXFlexOSStatusLastUpdateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSStatusLastUpdate)(nil)).Elem()
}

func (i CSIVXFlexOSStatusLastUpdateArgs) ToCSIVXFlexOSStatusLastUpdateOutput() CSIVXFlexOSStatusLastUpdateOutput {
	return i.ToCSIVXFlexOSStatusLastUpdateOutputWithContext(context.Background())
}

func (i CSIVXFlexOSStatusLastUpdateArgs) ToCSIVXFlexOSStatusLastUpdateOutputWithContext(ctx context.Context) CSIVXFlexOSStatusLastUpdateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSStatusLastUpdateOutput)
}

func (i CSIVXFlexOSStatusLastUpdateArgs) ToCSIVXFlexOSStatusLastUpdatePtrOutput() CSIVXFlexOSStatusLastUpdatePtrOutput {
	return i.ToCSIVXFlexOSStatusLastUpdatePtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSStatusLastUpdateArgs) ToCSIVXFlexOSStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIVXFlexOSStatusLastUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSStatusLastUpdateOutput).ToCSIVXFlexOSStatusLastUpdatePtrOutputWithContext(ctx)
}

// CSIVXFlexOSStatusLastUpdatePtrInput is an input type that accepts CSIVXFlexOSStatusLastUpdateArgs, CSIVXFlexOSStatusLastUpdatePtr and CSIVXFlexOSStatusLastUpdatePtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSStatusLastUpdatePtrInput` via:
//
//          CSIVXFlexOSStatusLastUpdateArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSStatusLastUpdatePtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSStatusLastUpdatePtrOutput() CSIVXFlexOSStatusLastUpdatePtrOutput
	ToCSIVXFlexOSStatusLastUpdatePtrOutputWithContext(context.Context) CSIVXFlexOSStatusLastUpdatePtrOutput
}

type csivxflexOSStatusLastUpdatePtrType CSIVXFlexOSStatusLastUpdateArgs

func CSIVXFlexOSStatusLastUpdatePtr(v *CSIVXFlexOSStatusLastUpdateArgs) CSIVXFlexOSStatusLastUpdatePtrInput {
	return (*csivxflexOSStatusLastUpdatePtrType)(v)
}

func (*csivxflexOSStatusLastUpdatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSStatusLastUpdate)(nil)).Elem()
}

func (i *csivxflexOSStatusLastUpdatePtrType) ToCSIVXFlexOSStatusLastUpdatePtrOutput() CSIVXFlexOSStatusLastUpdatePtrOutput {
	return i.ToCSIVXFlexOSStatusLastUpdatePtrOutputWithContext(context.Background())
}

func (i *csivxflexOSStatusLastUpdatePtrType) ToCSIVXFlexOSStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIVXFlexOSStatusLastUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSStatusLastUpdatePtrOutput)
}

// LastUpdate is the last updated state of the driver
type CSIVXFlexOSStatusLastUpdateOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSStatusLastUpdateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSStatusLastUpdate)(nil)).Elem()
}

func (o CSIVXFlexOSStatusLastUpdateOutput) ToCSIVXFlexOSStatusLastUpdateOutput() CSIVXFlexOSStatusLastUpdateOutput {
	return o
}

func (o CSIVXFlexOSStatusLastUpdateOutput) ToCSIVXFlexOSStatusLastUpdateOutputWithContext(ctx context.Context) CSIVXFlexOSStatusLastUpdateOutput {
	return o
}

func (o CSIVXFlexOSStatusLastUpdateOutput) ToCSIVXFlexOSStatusLastUpdatePtrOutput() CSIVXFlexOSStatusLastUpdatePtrOutput {
	return o.ToCSIVXFlexOSStatusLastUpdatePtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSStatusLastUpdateOutput) ToCSIVXFlexOSStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIVXFlexOSStatusLastUpdatePtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSStatusLastUpdate) *CSIVXFlexOSStatusLastUpdate {
		return &v
	}).(CSIVXFlexOSStatusLastUpdatePtrOutput)
}

// Condition is the last known condition of the Custom Resource
func (o CSIVXFlexOSStatusLastUpdateOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSStatusLastUpdate) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

// ErrorMessage is the last error message associated with the condition
func (o CSIVXFlexOSStatusLastUpdateOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSStatusLastUpdate) *string { return v.ErrorMessage }).(pulumi.StringPtrOutput)
}

// Time is the time stamp for the last condition update
func (o CSIVXFlexOSStatusLastUpdateOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSStatusLastUpdate) *string { return v.Time }).(pulumi.StringPtrOutput)
}

type CSIVXFlexOSStatusLastUpdatePtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSStatusLastUpdatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSStatusLastUpdate)(nil)).Elem()
}

func (o CSIVXFlexOSStatusLastUpdatePtrOutput) ToCSIVXFlexOSStatusLastUpdatePtrOutput() CSIVXFlexOSStatusLastUpdatePtrOutput {
	return o
}

func (o CSIVXFlexOSStatusLastUpdatePtrOutput) ToCSIVXFlexOSStatusLastUpdatePtrOutputWithContext(ctx context.Context) CSIVXFlexOSStatusLastUpdatePtrOutput {
	return o
}

func (o CSIVXFlexOSStatusLastUpdatePtrOutput) Elem() CSIVXFlexOSStatusLastUpdateOutput {
	return o.ApplyT(func(v *CSIVXFlexOSStatusLastUpdate) CSIVXFlexOSStatusLastUpdate { return *v }).(CSIVXFlexOSStatusLastUpdateOutput)
}

// Condition is the last known condition of the Custom Resource
func (o CSIVXFlexOSStatusLastUpdatePtrOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSStatusLastUpdate) *string {
		if v == nil {
			return nil
		}
		return v.Condition
	}).(pulumi.StringPtrOutput)
}

// ErrorMessage is the last error message associated with the condition
func (o CSIVXFlexOSStatusLastUpdatePtrOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSStatusLastUpdate) *string {
		if v == nil {
			return nil
		}
		return v.ErrorMessage
	}).(pulumi.StringPtrOutput)
}

// Time is the time stamp for the last condition update
func (o CSIVXFlexOSStatusLastUpdatePtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CSIVXFlexOSStatusLastUpdate) *string {
		if v == nil {
			return nil
		}
		return v.Time
	}).(pulumi.StringPtrOutput)
}

// NodeStatus is the status of Controller pods
type CSIVXFlexOSStatusNodeStatus struct {
	Available []string `pulumi:"available"`
	Ready     []string `pulumi:"ready"`
	Starting  []string `pulumi:"starting"`
	Stopped   []string `pulumi:"stopped"`
}

// CSIVXFlexOSStatusNodeStatusInput is an input type that accepts CSIVXFlexOSStatusNodeStatusArgs and CSIVXFlexOSStatusNodeStatusOutput values.
// You can construct a concrete instance of `CSIVXFlexOSStatusNodeStatusInput` via:
//
//          CSIVXFlexOSStatusNodeStatusArgs{...}
type CSIVXFlexOSStatusNodeStatusInput interface {
	pulumi.Input

	ToCSIVXFlexOSStatusNodeStatusOutput() CSIVXFlexOSStatusNodeStatusOutput
	ToCSIVXFlexOSStatusNodeStatusOutputWithContext(context.Context) CSIVXFlexOSStatusNodeStatusOutput
}

// NodeStatus is the status of Controller pods
type CSIVXFlexOSStatusNodeStatusArgs struct {
	Available pulumi.StringArrayInput `pulumi:"available"`
	Ready     pulumi.StringArrayInput `pulumi:"ready"`
	Starting  pulumi.StringArrayInput `pulumi:"starting"`
	Stopped   pulumi.StringArrayInput `pulumi:"stopped"`
}

func (CSIVXFlexOSStatusNodeStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSStatusNodeStatus)(nil)).Elem()
}

func (i CSIVXFlexOSStatusNodeStatusArgs) ToCSIVXFlexOSStatusNodeStatusOutput() CSIVXFlexOSStatusNodeStatusOutput {
	return i.ToCSIVXFlexOSStatusNodeStatusOutputWithContext(context.Background())
}

func (i CSIVXFlexOSStatusNodeStatusArgs) ToCSIVXFlexOSStatusNodeStatusOutputWithContext(ctx context.Context) CSIVXFlexOSStatusNodeStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSStatusNodeStatusOutput)
}

func (i CSIVXFlexOSStatusNodeStatusArgs) ToCSIVXFlexOSStatusNodeStatusPtrOutput() CSIVXFlexOSStatusNodeStatusPtrOutput {
	return i.ToCSIVXFlexOSStatusNodeStatusPtrOutputWithContext(context.Background())
}

func (i CSIVXFlexOSStatusNodeStatusArgs) ToCSIVXFlexOSStatusNodeStatusPtrOutputWithContext(ctx context.Context) CSIVXFlexOSStatusNodeStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSStatusNodeStatusOutput).ToCSIVXFlexOSStatusNodeStatusPtrOutputWithContext(ctx)
}

// CSIVXFlexOSStatusNodeStatusPtrInput is an input type that accepts CSIVXFlexOSStatusNodeStatusArgs, CSIVXFlexOSStatusNodeStatusPtr and CSIVXFlexOSStatusNodeStatusPtrOutput values.
// You can construct a concrete instance of `CSIVXFlexOSStatusNodeStatusPtrInput` via:
//
//          CSIVXFlexOSStatusNodeStatusArgs{...}
//
//  or:
//
//          nil
type CSIVXFlexOSStatusNodeStatusPtrInput interface {
	pulumi.Input

	ToCSIVXFlexOSStatusNodeStatusPtrOutput() CSIVXFlexOSStatusNodeStatusPtrOutput
	ToCSIVXFlexOSStatusNodeStatusPtrOutputWithContext(context.Context) CSIVXFlexOSStatusNodeStatusPtrOutput
}

type csivxflexOSStatusNodeStatusPtrType CSIVXFlexOSStatusNodeStatusArgs

func CSIVXFlexOSStatusNodeStatusPtr(v *CSIVXFlexOSStatusNodeStatusArgs) CSIVXFlexOSStatusNodeStatusPtrInput {
	return (*csivxflexOSStatusNodeStatusPtrType)(v)
}

func (*csivxflexOSStatusNodeStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSStatusNodeStatus)(nil)).Elem()
}

func (i *csivxflexOSStatusNodeStatusPtrType) ToCSIVXFlexOSStatusNodeStatusPtrOutput() CSIVXFlexOSStatusNodeStatusPtrOutput {
	return i.ToCSIVXFlexOSStatusNodeStatusPtrOutputWithContext(context.Background())
}

func (i *csivxflexOSStatusNodeStatusPtrType) ToCSIVXFlexOSStatusNodeStatusPtrOutputWithContext(ctx context.Context) CSIVXFlexOSStatusNodeStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CSIVXFlexOSStatusNodeStatusPtrOutput)
}

// NodeStatus is the status of Controller pods
type CSIVXFlexOSStatusNodeStatusOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSStatusNodeStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CSIVXFlexOSStatusNodeStatus)(nil)).Elem()
}

func (o CSIVXFlexOSStatusNodeStatusOutput) ToCSIVXFlexOSStatusNodeStatusOutput() CSIVXFlexOSStatusNodeStatusOutput {
	return o
}

func (o CSIVXFlexOSStatusNodeStatusOutput) ToCSIVXFlexOSStatusNodeStatusOutputWithContext(ctx context.Context) CSIVXFlexOSStatusNodeStatusOutput {
	return o
}

func (o CSIVXFlexOSStatusNodeStatusOutput) ToCSIVXFlexOSStatusNodeStatusPtrOutput() CSIVXFlexOSStatusNodeStatusPtrOutput {
	return o.ToCSIVXFlexOSStatusNodeStatusPtrOutputWithContext(context.Background())
}

func (o CSIVXFlexOSStatusNodeStatusOutput) ToCSIVXFlexOSStatusNodeStatusPtrOutputWithContext(ctx context.Context) CSIVXFlexOSStatusNodeStatusPtrOutput {
	return o.ApplyT(func(v CSIVXFlexOSStatusNodeStatus) *CSIVXFlexOSStatusNodeStatus {
		return &v
	}).(CSIVXFlexOSStatusNodeStatusPtrOutput)
}
func (o CSIVXFlexOSStatusNodeStatusOutput) Available() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSStatusNodeStatus) []string { return v.Available }).(pulumi.StringArrayOutput)
}

func (o CSIVXFlexOSStatusNodeStatusOutput) Ready() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSStatusNodeStatus) []string { return v.Ready }).(pulumi.StringArrayOutput)
}

func (o CSIVXFlexOSStatusNodeStatusOutput) Starting() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSStatusNodeStatus) []string { return v.Starting }).(pulumi.StringArrayOutput)
}

func (o CSIVXFlexOSStatusNodeStatusOutput) Stopped() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CSIVXFlexOSStatusNodeStatus) []string { return v.Stopped }).(pulumi.StringArrayOutput)
}

type CSIVXFlexOSStatusNodeStatusPtrOutput struct{ *pulumi.OutputState }

func (CSIVXFlexOSStatusNodeStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CSIVXFlexOSStatusNodeStatus)(nil)).Elem()
}

func (o CSIVXFlexOSStatusNodeStatusPtrOutput) ToCSIVXFlexOSStatusNodeStatusPtrOutput() CSIVXFlexOSStatusNodeStatusPtrOutput {
	return o
}

func (o CSIVXFlexOSStatusNodeStatusPtrOutput) ToCSIVXFlexOSStatusNodeStatusPtrOutputWithContext(ctx context.Context) CSIVXFlexOSStatusNodeStatusPtrOutput {
	return o
}

func (o CSIVXFlexOSStatusNodeStatusPtrOutput) Elem() CSIVXFlexOSStatusNodeStatusOutput {
	return o.ApplyT(func(v *CSIVXFlexOSStatusNodeStatus) CSIVXFlexOSStatusNodeStatus { return *v }).(CSIVXFlexOSStatusNodeStatusOutput)
}

func (o CSIVXFlexOSStatusNodeStatusPtrOutput) Available() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIVXFlexOSStatusNodeStatus) []string {
		if v == nil {
			return nil
		}
		return v.Available
	}).(pulumi.StringArrayOutput)
}

func (o CSIVXFlexOSStatusNodeStatusPtrOutput) Ready() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIVXFlexOSStatusNodeStatus) []string {
		if v == nil {
			return nil
		}
		return v.Ready
	}).(pulumi.StringArrayOutput)
}

func (o CSIVXFlexOSStatusNodeStatusPtrOutput) Starting() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIVXFlexOSStatusNodeStatus) []string {
		if v == nil {
			return nil
		}
		return v.Starting
	}).(pulumi.StringArrayOutput)
}

func (o CSIVXFlexOSStatusNodeStatusPtrOutput) Stopped() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CSIVXFlexOSStatusNodeStatus) []string {
		if v == nil {
			return nil
		}
		return v.Stopped
	}).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(CSIIsilonTypeOutput{})
	pulumi.RegisterOutputType(CSIIsilonMetadataOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonEnvsOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonEnvsArrayOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonEnvsValueFromOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonNodeSelectorOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonTolerationsOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverCommonTolerationsArrayOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerEnvsOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerEnvsArrayOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerEnvsValueFromOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerNodeSelectorOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerTolerationsOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverControllerTolerationsArrayOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodePtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeEnvsOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeEnvsArrayOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeEnvsValueFromOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeNodeSelectorOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeTolerationsOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverNodeTolerationsArrayOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsArrayOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsEnvsOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsEnvsArrayOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsEnvsValueFromOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsNodeSelectorOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsTolerationsOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSideCarsTolerationsArrayOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSnapshotClassOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSnapshotClassArrayOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverSnapshotClassParametersOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverStorageClassOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverStorageClassArrayOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverStorageClassAllowedTopologiesOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverStorageClassAllowedTopologiesArrayOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput{})
	pulumi.RegisterOutputType(CSIIsilonSpecDriverStorageClassParametersOutput{})
	pulumi.RegisterOutputType(CSIIsilonStatusOutput{})
	pulumi.RegisterOutputType(CSIIsilonStatusPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonStatusControllerStatusOutput{})
	pulumi.RegisterOutputType(CSIIsilonStatusControllerStatusPtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonStatusLastUpdateOutput{})
	pulumi.RegisterOutputType(CSIIsilonStatusLastUpdatePtrOutput{})
	pulumi.RegisterOutputType(CSIIsilonStatusNodeStatusOutput{})
	pulumi.RegisterOutputType(CSIIsilonStatusNodeStatusPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxTypeOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxMetadataOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxRevProxyTypeOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxRevProxyMetadataOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxRevProxySpecOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxRevProxySpecPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxRevProxySpecConfigOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxRevProxySpecConfigPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxRevProxySpecConfigLinkConfigOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxRevProxySpecConfigLinkConfigPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxRevProxySpecConfigLinkConfigBackupOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxRevProxySpecConfigLinkConfigBackupPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimitsPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimitsPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxRevProxySpecConfigStandAloneConfigOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxRevProxySpecConfigStandAloneConfigPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersArrayOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimitsPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArraysArrayOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxRevProxyStatusOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxRevProxyStatusPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxRevProxyStatusLastUpdateOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxRevProxyStatusLastUpdatePtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxRevProxyStatusProxyStatusOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxRevProxyStatusProxyStatusPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverCommonOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverCommonPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverCommonEnvsOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverCommonEnvsArrayOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverCommonEnvsValueFromOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverCommonEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverCommonNodeSelectorOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverCommonTolerationsOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverCommonTolerationsArrayOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverControllerOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverControllerPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverControllerEnvsOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverControllerEnvsArrayOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverControllerEnvsValueFromOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverControllerEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverControllerNodeSelectorOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverControllerTolerationsOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverControllerTolerationsArrayOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverNodeOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverNodePtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverNodeEnvsOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverNodeEnvsArrayOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverNodeEnvsValueFromOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverNodeEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverNodeNodeSelectorOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverNodeTolerationsOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverNodeTolerationsArrayOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverSideCarsOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverSideCarsArrayOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverSideCarsEnvsOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverSideCarsEnvsArrayOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverSideCarsEnvsValueFromOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverSideCarsEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverSideCarsNodeSelectorOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverSideCarsTolerationsOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverSideCarsTolerationsArrayOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverSnapshotClassOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverSnapshotClassArrayOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverSnapshotClassParametersOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverStorageClassOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverStorageClassArrayOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverStorageClassAllowedTopologiesOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverStorageClassAllowedTopologiesArrayOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxSpecDriverStorageClassParametersOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxStatusOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxStatusPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxStatusControllerStatusOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxStatusControllerStatusPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxStatusLastUpdateOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxStatusLastUpdatePtrOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxStatusNodeStatusOutput{})
	pulumi.RegisterOutputType(CSIPowerMaxStatusNodeStatusPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreTypeOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreMetadataOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverCommonOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverCommonPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverCommonEnvsOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverCommonEnvsArrayOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverCommonEnvsValueFromOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverCommonEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverCommonNodeSelectorOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverCommonTolerationsOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverCommonTolerationsArrayOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverControllerOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverControllerPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverControllerEnvsOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverControllerEnvsArrayOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverControllerEnvsValueFromOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverControllerEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverControllerNodeSelectorOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverControllerTolerationsOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverControllerTolerationsArrayOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverNodeOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverNodePtrOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverNodeEnvsOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverNodeEnvsArrayOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverNodeEnvsValueFromOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverNodeEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverNodeNodeSelectorOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverNodeTolerationsOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverNodeTolerationsArrayOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverSideCarsOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverSideCarsArrayOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverSideCarsEnvsOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverSideCarsEnvsArrayOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverSideCarsEnvsValueFromOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverSideCarsEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverSideCarsNodeSelectorOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverSideCarsTolerationsOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverSideCarsTolerationsArrayOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverSnapshotClassOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverSnapshotClassArrayOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverSnapshotClassParametersOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverStorageClassOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverStorageClassArrayOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverStorageClassAllowedTopologiesOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverStorageClassAllowedTopologiesArrayOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreSpecDriverStorageClassParametersOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreStatusOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreStatusPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreStatusControllerStatusOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreStatusControllerStatusPtrOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreStatusLastUpdateOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreStatusLastUpdatePtrOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreStatusNodeStatusOutput{})
	pulumi.RegisterOutputType(CSIPowerStoreStatusNodeStatusPtrOutput{})
	pulumi.RegisterOutputType(CSIUnityTypeOutput{})
	pulumi.RegisterOutputType(CSIUnityMetadataOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverCommonOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverCommonPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverCommonEnvsOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverCommonEnvsArrayOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverCommonEnvsValueFromOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverCommonEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverCommonEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverCommonEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverCommonNodeSelectorOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverCommonTolerationsOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverCommonTolerationsArrayOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverControllerOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverControllerPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverControllerEnvsOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverControllerEnvsArrayOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverControllerEnvsValueFromOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverControllerEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverControllerEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverControllerEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverControllerNodeSelectorOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverControllerTolerationsOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverControllerTolerationsArrayOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverNodeOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverNodePtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverNodeEnvsOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverNodeEnvsArrayOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverNodeEnvsValueFromOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverNodeEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverNodeEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverNodeEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverNodeNodeSelectorOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverNodeTolerationsOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverNodeTolerationsArrayOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverSideCarsOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverSideCarsArrayOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverSideCarsEnvsOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverSideCarsEnvsArrayOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverSideCarsEnvsValueFromOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverSideCarsEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverSideCarsEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverSideCarsNodeSelectorOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverSideCarsTolerationsOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverSideCarsTolerationsArrayOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverSnapshotClassOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverSnapshotClassArrayOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverSnapshotClassParametersOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverStorageClassOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverStorageClassArrayOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverStorageClassAllowedTopologiesOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverStorageClassAllowedTopologiesArrayOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput{})
	pulumi.RegisterOutputType(CSIUnitySpecDriverStorageClassParametersOutput{})
	pulumi.RegisterOutputType(CSIUnityStatusOutput{})
	pulumi.RegisterOutputType(CSIUnityStatusPtrOutput{})
	pulumi.RegisterOutputType(CSIUnityStatusControllerStatusOutput{})
	pulumi.RegisterOutputType(CSIUnityStatusControllerStatusPtrOutput{})
	pulumi.RegisterOutputType(CSIUnityStatusLastUpdateOutput{})
	pulumi.RegisterOutputType(CSIUnityStatusLastUpdatePtrOutput{})
	pulumi.RegisterOutputType(CSIUnityStatusNodeStatusOutput{})
	pulumi.RegisterOutputType(CSIUnityStatusNodeStatusPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSTypeOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSMetadataOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverCommonOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverCommonPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverCommonEnvsOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverCommonEnvsArrayOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverCommonEnvsValueFromOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverCommonEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisorPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverCommonNodeSelectorOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverCommonTolerationsOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverCommonTolerationsArrayOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverControllerOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverControllerPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverControllerEnvsOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverControllerEnvsArrayOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverControllerEnvsValueFromOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverControllerEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisorPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverControllerNodeSelectorOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverControllerTolerationsOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverControllerTolerationsArrayOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverNodeOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverNodePtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverNodeEnvsOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverNodeEnvsArrayOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverNodeEnvsValueFromOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverNodeEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisorPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverNodeNodeSelectorOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverNodeTolerationsOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverNodeTolerationsArrayOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverSideCarsOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverSideCarsArrayOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverSideCarsEnvsOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverSideCarsEnvsArrayOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisorPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverSideCarsNodeSelectorOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverSideCarsTolerationsOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverSideCarsTolerationsArrayOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverSnapshotClassOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverSnapshotClassArrayOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverSnapshotClassParametersOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverStorageClassOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverStorageClassArrayOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesArrayOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressionsArrayOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSSpecDriverStorageClassParametersOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSStatusOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSStatusPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSStatusControllerStatusOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSStatusControllerStatusPtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSStatusLastUpdateOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSStatusLastUpdatePtrOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSStatusNodeStatusOutput{})
	pulumi.RegisterOutputType(CSIVXFlexOSStatusNodeStatusPtrOutput{})
}

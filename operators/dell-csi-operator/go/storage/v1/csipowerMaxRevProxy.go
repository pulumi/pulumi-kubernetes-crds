// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// CSIPowerMaxRevProxy is the Schema for the csipowermaxrevproxies API
type CSIPowerMaxRevProxy struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// CSIPowerMaxRevProxySpec defines the desired state of CSIPowerMaxRevProxy
	Spec CSIPowerMaxRevProxySpecPtrOutput `pulumi:"spec"`
	// CSIPowerMaxRevProxyStatus defines the observed state of CSIPowerMaxRevProxy
	Status CSIPowerMaxRevProxyStatusPtrOutput `pulumi:"status"`
}

// NewCSIPowerMaxRevProxy registers a new resource with the given unique name, arguments, and options.
func NewCSIPowerMaxRevProxy(ctx *pulumi.Context,
	name string, args *CSIPowerMaxRevProxyArgs, opts ...pulumi.ResourceOption) (*CSIPowerMaxRevProxy, error) {
	if args == nil {
		args = &CSIPowerMaxRevProxyArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("storage.dell.com/v1")
	args.Kind = pulumi.StringPtr("CSIPowerMaxRevProxy")
	var resource CSIPowerMaxRevProxy
	err := ctx.RegisterResource("kubernetes:storage.dell.com/v1:CSIPowerMaxRevProxy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCSIPowerMaxRevProxy gets an existing CSIPowerMaxRevProxy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCSIPowerMaxRevProxy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CSIPowerMaxRevProxyState, opts ...pulumi.ResourceOption) (*CSIPowerMaxRevProxy, error) {
	var resource CSIPowerMaxRevProxy
	err := ctx.ReadResource("kubernetes:storage.dell.com/v1:CSIPowerMaxRevProxy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CSIPowerMaxRevProxy resources.
type csipowerMaxRevProxyState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// CSIPowerMaxRevProxySpec defines the desired state of CSIPowerMaxRevProxy
	Spec *CSIPowerMaxRevProxySpec `pulumi:"spec"`
	// CSIPowerMaxRevProxyStatus defines the observed state of CSIPowerMaxRevProxy
	Status *CSIPowerMaxRevProxyStatus `pulumi:"status"`
}

type CSIPowerMaxRevProxyState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// CSIPowerMaxRevProxySpec defines the desired state of CSIPowerMaxRevProxy
	Spec CSIPowerMaxRevProxySpecPtrInput
	// CSIPowerMaxRevProxyStatus defines the observed state of CSIPowerMaxRevProxy
	Status CSIPowerMaxRevProxyStatusPtrInput
}

func (CSIPowerMaxRevProxyState) ElementType() reflect.Type {
	return reflect.TypeOf((*csipowerMaxRevProxyState)(nil)).Elem()
}

type csipowerMaxRevProxyArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// CSIPowerMaxRevProxySpec defines the desired state of CSIPowerMaxRevProxy
	Spec *CSIPowerMaxRevProxySpec `pulumi:"spec"`
	// CSIPowerMaxRevProxyStatus defines the observed state of CSIPowerMaxRevProxy
	Status *CSIPowerMaxRevProxyStatus `pulumi:"status"`
}

// The set of arguments for constructing a CSIPowerMaxRevProxy resource.
type CSIPowerMaxRevProxyArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// CSIPowerMaxRevProxySpec defines the desired state of CSIPowerMaxRevProxy
	Spec CSIPowerMaxRevProxySpecPtrInput
	// CSIPowerMaxRevProxyStatus defines the observed state of CSIPowerMaxRevProxy
	Status CSIPowerMaxRevProxyStatusPtrInput
}

func (CSIPowerMaxRevProxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*csipowerMaxRevProxyArgs)(nil)).Elem()
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// CSIUnity is the Schema for the csiunities API
type CSIUnity struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// CSIUnitySpec defines the desired state of CSIUnity
	Spec CSIUnitySpecPtrOutput `pulumi:"spec"`
	// DriverStatus defines the observed state of CSIDriver
	Status CSIUnityStatusPtrOutput `pulumi:"status"`
}

// NewCSIUnity registers a new resource with the given unique name, arguments, and options.
func NewCSIUnity(ctx *pulumi.Context,
	name string, args *CSIUnityArgs, opts ...pulumi.ResourceOption) (*CSIUnity, error) {
	if args == nil {
		args = &CSIUnityArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("storage.dell.com/v1")
	args.Kind = pulumi.StringPtr("CSIUnity")
	var resource CSIUnity
	err := ctx.RegisterResource("kubernetes:storage.dell.com/v1:CSIUnity", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCSIUnity gets an existing CSIUnity resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCSIUnity(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CSIUnityState, opts ...pulumi.ResourceOption) (*CSIUnity, error) {
	var resource CSIUnity
	err := ctx.ReadResource("kubernetes:storage.dell.com/v1:CSIUnity", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CSIUnity resources.
type csiunityState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// CSIUnitySpec defines the desired state of CSIUnity
	Spec *CSIUnitySpec `pulumi:"spec"`
	// DriverStatus defines the observed state of CSIDriver
	Status *CSIUnityStatus `pulumi:"status"`
}

type CSIUnityState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// CSIUnitySpec defines the desired state of CSIUnity
	Spec CSIUnitySpecPtrInput
	// DriverStatus defines the observed state of CSIDriver
	Status CSIUnityStatusPtrInput
}

func (CSIUnityState) ElementType() reflect.Type {
	return reflect.TypeOf((*csiunityState)(nil)).Elem()
}

type csiunityArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// CSIUnitySpec defines the desired state of CSIUnity
	Spec *CSIUnitySpec `pulumi:"spec"`
	// DriverStatus defines the observed state of CSIDriver
	Status *CSIUnityStatus `pulumi:"status"`
}

// The set of arguments for constructing a CSIUnity resource.
type CSIUnityArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// CSIUnitySpec defines the desired state of CSIUnity
	Spec CSIUnitySpecPtrInput
	// DriverStatus defines the observed state of CSIDriver
	Status CSIUnityStatusPtrInput
}

func (CSIUnityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*csiunityArgs)(nil)).Elem()
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// CSIPowerStore is the Schema for the csipowerstores API
type CSIPowerStore struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// CSIPowerStoreSpec defines the desired state of CSIPowerStore
	Spec CSIPowerStoreSpecPtrOutput `pulumi:"spec"`
	// DriverStatus defines the observed state of CSIDriver
	Status CSIPowerStoreStatusPtrOutput `pulumi:"status"`
}

// NewCSIPowerStore registers a new resource with the given unique name, arguments, and options.
func NewCSIPowerStore(ctx *pulumi.Context,
	name string, args *CSIPowerStoreArgs, opts ...pulumi.ResourceOption) (*CSIPowerStore, error) {
	if args == nil {
		args = &CSIPowerStoreArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("storage.dell.com/v1")
	args.Kind = pulumi.StringPtr("CSIPowerStore")
	var resource CSIPowerStore
	err := ctx.RegisterResource("kubernetes:storage.dell.com/v1:CSIPowerStore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCSIPowerStore gets an existing CSIPowerStore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCSIPowerStore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CSIPowerStoreState, opts ...pulumi.ResourceOption) (*CSIPowerStore, error) {
	var resource CSIPowerStore
	err := ctx.ReadResource("kubernetes:storage.dell.com/v1:CSIPowerStore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CSIPowerStore resources.
type csipowerStoreState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// CSIPowerStoreSpec defines the desired state of CSIPowerStore
	Spec *CSIPowerStoreSpec `pulumi:"spec"`
	// DriverStatus defines the observed state of CSIDriver
	Status *CSIPowerStoreStatus `pulumi:"status"`
}

type CSIPowerStoreState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// CSIPowerStoreSpec defines the desired state of CSIPowerStore
	Spec CSIPowerStoreSpecPtrInput
	// DriverStatus defines the observed state of CSIDriver
	Status CSIPowerStoreStatusPtrInput
}

func (CSIPowerStoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*csipowerStoreState)(nil)).Elem()
}

type csipowerStoreArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// CSIPowerStoreSpec defines the desired state of CSIPowerStore
	Spec *CSIPowerStoreSpec `pulumi:"spec"`
	// DriverStatus defines the observed state of CSIDriver
	Status *CSIPowerStoreStatus `pulumi:"status"`
}

// The set of arguments for constructing a CSIPowerStore resource.
type CSIPowerStoreArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// CSIPowerStoreSpec defines the desired state of CSIPowerStore
	Spec CSIPowerStoreSpecPtrInput
	// DriverStatus defines the observed state of CSIDriver
	Status CSIPowerStoreStatusPtrInput
}

func (CSIPowerStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*csipowerStoreArgs)(nil)).Elem()
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// CSIPowerMax is the Schema for the csipowermaxes API
type CSIPowerMax struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// CSIPowerMaxSpec defines the desired state of CSIPowerMax
	Spec CSIPowerMaxSpecPtrOutput `pulumi:"spec"`
	// DriverStatus defines the observed state of CSIDriver
	Status CSIPowerMaxStatusPtrOutput `pulumi:"status"`
}

// NewCSIPowerMax registers a new resource with the given unique name, arguments, and options.
func NewCSIPowerMax(ctx *pulumi.Context,
	name string, args *CSIPowerMaxArgs, opts ...pulumi.ResourceOption) (*CSIPowerMax, error) {
	if args == nil {
		args = &CSIPowerMaxArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("storage.dell.com/v1")
	args.Kind = pulumi.StringPtr("CSIPowerMax")
	var resource CSIPowerMax
	err := ctx.RegisterResource("kubernetes:storage.dell.com/v1:CSIPowerMax", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCSIPowerMax gets an existing CSIPowerMax resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCSIPowerMax(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CSIPowerMaxState, opts ...pulumi.ResourceOption) (*CSIPowerMax, error) {
	var resource CSIPowerMax
	err := ctx.ReadResource("kubernetes:storage.dell.com/v1:CSIPowerMax", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CSIPowerMax resources.
type csipowerMaxState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// CSIPowerMaxSpec defines the desired state of CSIPowerMax
	Spec *CSIPowerMaxSpec `pulumi:"spec"`
	// DriverStatus defines the observed state of CSIDriver
	Status *CSIPowerMaxStatus `pulumi:"status"`
}

type CSIPowerMaxState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// CSIPowerMaxSpec defines the desired state of CSIPowerMax
	Spec CSIPowerMaxSpecPtrInput
	// DriverStatus defines the observed state of CSIDriver
	Status CSIPowerMaxStatusPtrInput
}

func (CSIPowerMaxState) ElementType() reflect.Type {
	return reflect.TypeOf((*csipowerMaxState)(nil)).Elem()
}

type csipowerMaxArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// CSIPowerMaxSpec defines the desired state of CSIPowerMax
	Spec *CSIPowerMaxSpec `pulumi:"spec"`
	// DriverStatus defines the observed state of CSIDriver
	Status *CSIPowerMaxStatus `pulumi:"status"`
}

// The set of arguments for constructing a CSIPowerMax resource.
type CSIPowerMaxArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// CSIPowerMaxSpec defines the desired state of CSIPowerMax
	Spec CSIPowerMaxSpecPtrInput
	// DriverStatus defines the observed state of CSIDriver
	Status CSIPowerMaxStatusPtrInput
}

func (CSIPowerMaxArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*csipowerMaxArgs)(nil)).Elem()
}

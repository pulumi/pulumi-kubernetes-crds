// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import {ObjectMeta} from "../meta/v1";

export namespace storage {
    export namespace v1 {
        /**
         * CSIIsilonSpec defines the desired state of CSIIsilon
         */
        export interface CSIIsilonSpec {
            /**
             * Driver is the specification for the CSI Isilon Driver
             */
            driver: pulumi.Input<inputs.storage.v1.CSIIsilonSpecDriver>;
        }

        /**
         * Driver is the specification for the CSI Isilon Driver
         */
        export interface CSIIsilonSpecDriver {
            /**
             * AuthSecret is the name of the credentials secret for the driver
             */
            authSecret?: pulumi.Input<string>;
            /**
             * Common is the common specification for both controller and node plugins
             */
            common: pulumi.Input<inputs.storage.v1.CSIIsilonSpecDriverCommon>;
            /**
             * ConfigVersion is the configuration version of the driver
             */
            configVersion: pulumi.Input<string>;
            /**
             * Controller is the specification for Controller plugin only
             */
            controller?: pulumi.Input<inputs.storage.v1.CSIIsilonSpecDriverController>;
            /**
             * ForceUpdate is the boolean flag used to force an update of the driver instance
             */
            forceUpdate?: pulumi.Input<boolean>;
            /**
             * Node is the specification for Node plugin only
             */
            node?: pulumi.Input<inputs.storage.v1.CSIIsilonSpecDriverNode>;
            /**
             * Replicas is the count of controllers for Controller plugin
             */
            replicas: pulumi.Input<number>;
            /**
             * SideCars is the specification for CSI sidecar containers
             */
            sideCars?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIIsilonSpecDriverSideCars>[]>;
            /**
             * SnapshotClass is the specification for Snapshot Classes
             */
            snapshotClass?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIIsilonSpecDriverSnapshotClass>[]>;
            /**
             * StorageClass is the specification for Storage Classes
             */
            storageClass?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIIsilonSpecDriverStorageClass>[]>;
            /**
             * TLSCertSecret is the name of the TLS Cert secret
             */
            tlsCertSecret?: pulumi.Input<string>;
        }

        /**
         * Common is the common specification for both controller and node plugins
         */
        export interface CSIIsilonSpecDriverCommon {
            /**
             * Args is the set of arguments for the container
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Envs is the set of environment variables for the container
             */
            envs?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIIsilonSpecDriverCommonEnvs>[]>;
            /**
             * Image is the image tag for the Container
             */
            image?: pulumi.Input<string>;
            /**
             * ImagePullPolicy is the image pull policy for the image
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Name is the name of Container
             */
            name?: pulumi.Input<string>;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Tolerations is the list of tolerations for the driver pods
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIIsilonSpecDriverCommonTolerations>[]>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface CSIIsilonSpecDriverCommonEnvs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.storage.v1.CSIIsilonSpecDriverCommonEnvsValueFrom>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface CSIIsilonSpecDriverCommonEnvsValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.storage.v1.CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.storage.v1.CSIIsilonSpecDriverCommonEnvsValueFromFieldRef>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.storage.v1.CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.storage.v1.CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface CSIIsilonSpecDriverCommonEnvsValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface CSIIsilonSpecDriverCommonEnvsValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.storage.v1.CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisor>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface CSIIsilonSpecDriverCommonEnvsValueFromResourceFieldRefDivisor {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface CSIIsilonSpecDriverCommonEnvsValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface CSIIsilonSpecDriverCommonTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * Controller is the specification for Controller plugin only
         */
        export interface CSIIsilonSpecDriverController {
            /**
             * Args is the set of arguments for the container
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Envs is the set of environment variables for the container
             */
            envs?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIIsilonSpecDriverControllerEnvs>[]>;
            /**
             * Image is the image tag for the Container
             */
            image?: pulumi.Input<string>;
            /**
             * ImagePullPolicy is the image pull policy for the image
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Name is the name of Container
             */
            name?: pulumi.Input<string>;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Tolerations is the list of tolerations for the driver pods
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIIsilonSpecDriverControllerTolerations>[]>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface CSIIsilonSpecDriverControllerEnvs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.storage.v1.CSIIsilonSpecDriverControllerEnvsValueFrom>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface CSIIsilonSpecDriverControllerEnvsValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.storage.v1.CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.storage.v1.CSIIsilonSpecDriverControllerEnvsValueFromFieldRef>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.storage.v1.CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.storage.v1.CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface CSIIsilonSpecDriverControllerEnvsValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface CSIIsilonSpecDriverControllerEnvsValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.storage.v1.CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisor>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface CSIIsilonSpecDriverControllerEnvsValueFromResourceFieldRefDivisor {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface CSIIsilonSpecDriverControllerEnvsValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface CSIIsilonSpecDriverControllerTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * Node is the specification for Node plugin only
         */
        export interface CSIIsilonSpecDriverNode {
            /**
             * Args is the set of arguments for the container
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Envs is the set of environment variables for the container
             */
            envs?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIIsilonSpecDriverNodeEnvs>[]>;
            /**
             * Image is the image tag for the Container
             */
            image?: pulumi.Input<string>;
            /**
             * ImagePullPolicy is the image pull policy for the image
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Name is the name of Container
             */
            name?: pulumi.Input<string>;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Tolerations is the list of tolerations for the driver pods
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIIsilonSpecDriverNodeTolerations>[]>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface CSIIsilonSpecDriverNodeEnvs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.storage.v1.CSIIsilonSpecDriverNodeEnvsValueFrom>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface CSIIsilonSpecDriverNodeEnvsValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.storage.v1.CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.storage.v1.CSIIsilonSpecDriverNodeEnvsValueFromFieldRef>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.storage.v1.CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.storage.v1.CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface CSIIsilonSpecDriverNodeEnvsValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface CSIIsilonSpecDriverNodeEnvsValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.storage.v1.CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisor>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface CSIIsilonSpecDriverNodeEnvsValueFromResourceFieldRefDivisor {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface CSIIsilonSpecDriverNodeEnvsValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface CSIIsilonSpecDriverNodeTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * ContainerTemplate - Structure representing a container
         */
        export interface CSIIsilonSpecDriverSideCars {
            /**
             * Args is the set of arguments for the container
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Envs is the set of environment variables for the container
             */
            envs?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIIsilonSpecDriverSideCarsEnvs>[]>;
            /**
             * Image is the image tag for the Container
             */
            image?: pulumi.Input<string>;
            /**
             * ImagePullPolicy is the image pull policy for the image
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Name is the name of Container
             */
            name?: pulumi.Input<string>;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Tolerations is the list of tolerations for the driver pods
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIIsilonSpecDriverSideCarsTolerations>[]>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface CSIIsilonSpecDriverSideCarsEnvs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.storage.v1.CSIIsilonSpecDriverSideCarsEnvsValueFrom>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface CSIIsilonSpecDriverSideCarsEnvsValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.storage.v1.CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.storage.v1.CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.storage.v1.CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.storage.v1.CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface CSIIsilonSpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface CSIIsilonSpecDriverSideCarsEnvsValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.storage.v1.CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface CSIIsilonSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface CSIIsilonSpecDriverSideCarsEnvsValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface CSIIsilonSpecDriverSideCarsTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * SnapshotClass represents a VolumeSnapshotClass
         */
        export interface CSIIsilonSpecDriverSnapshotClass {
            /**
             * Name is the name of the Snapshot Class
             */
            name: pulumi.Input<string>;
            /**
             * Parameters is a map of driver specific parameters for snapshot class
             */
            parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * StorageClass represents a kubernetes storage class
         */
        export interface CSIIsilonSpecDriverStorageClass {
            /**
             * AllowVolumeExpansion is a boolean flag which indicates if volumes can be expanded
             */
            allowVolumeExpansion?: pulumi.Input<boolean>;
            /**
             * Restrict the node topologies where volumes can be dynamically provisioned.
             */
            allowedTopologies?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIIsilonSpecDriverStorageClassAllowedTopologies>[]>;
            /**
             * DefaultSc is a boolean flag to indicate if the storage class is going to be marked as default
             */
            default?: pulumi.Input<boolean>;
            /**
             * Name is the name of the StorageClass
             */
            name: pulumi.Input<string>;
            /**
             * Parameters is a map of driver specific storage class
             */
            parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * ReclaimPolicy is the reclaim policy for the storage class
             */
            reclaimPolicy?: pulumi.Input<string>;
        }

        /**
         * A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.
         */
        export interface CSIIsilonSpecDriverStorageClassAllowedTopologies {
            /**
             * A list of topology selector requirements by labels.
             */
            matchLabelExpressions?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions>[]>;
        }

        /**
         * A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.
         */
        export interface CSIIsilonSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * An array of string values. One value must match the label to be selected. Each entry in Values is ORed.
             */
            values: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * DriverStatus defines the observed state of CSIDriver
         */
        export interface CSIIsilonStatus {
            /**
             * ControllerStatus is the status of Controller pods
             */
            controllerStatus?: pulumi.Input<inputs.storage.v1.CSIIsilonStatusControllerStatus>;
            /**
             * DriverHash is a hash of the driver specification
             */
            driverHash?: pulumi.Input<number>;
            /**
             * LastUpdate is the last updated state of the driver
             */
            lastUpdate?: pulumi.Input<inputs.storage.v1.CSIIsilonStatusLastUpdate>;
            /**
             * NodeStatus is the status of Controller pods
             */
            nodeStatus?: pulumi.Input<inputs.storage.v1.CSIIsilonStatusNodeStatus>;
            /**
             * State is the state of the driver installation
             */
            state?: pulumi.Input<string>;
        }

        /**
         * ControllerStatus is the status of Controller pods
         */
        export interface CSIIsilonStatusControllerStatus {
            available?: pulumi.Input<pulumi.Input<string>[]>;
            ready?: pulumi.Input<pulumi.Input<string>[]>;
            starting?: pulumi.Input<pulumi.Input<string>[]>;
            stopped?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * LastUpdate is the last updated state of the driver
         */
        export interface CSIIsilonStatusLastUpdate {
            /**
             * Condition is the last known condition of the Custom Resource
             */
            condition?: pulumi.Input<string>;
            /**
             * ErrorMessage is the last error message associated with the condition
             */
            errorMessage?: pulumi.Input<string>;
            /**
             * Time is the time stamp for the last condition update
             */
            time?: pulumi.Input<string>;
        }

        /**
         * NodeStatus is the status of Controller pods
         */
        export interface CSIIsilonStatusNodeStatus {
            available?: pulumi.Input<pulumi.Input<string>[]>;
            ready?: pulumi.Input<pulumi.Input<string>[]>;
            starting?: pulumi.Input<pulumi.Input<string>[]>;
            stopped?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * CSIPowerMaxRevProxySpec defines the desired state of CSIPowerMaxRevProxy
         */
        export interface CSIPowerMaxRevProxySpec {
            /**
             * RevProxyConfig represents the reverse proxy configuration
             */
            config: pulumi.Input<inputs.storage.v1.CSIPowerMaxRevProxySpecConfig>;
            /**
             * INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html
             */
            image: pulumi.Input<string>;
            /**
             * PullPolicy describes a policy for if/when to pull a container image
             */
            imagePullPolicy?: pulumi.Input<string>;
            tlsSecret: pulumi.Input<string>;
        }

        /**
         * RevProxyConfig represents the reverse proxy configuration
         */
        export interface CSIPowerMaxRevProxySpecConfig {
            /**
             * LinkConfig is one of the configuration modes for reverse proxy
             */
            linkConfig?: pulumi.Input<inputs.storage.v1.CSIPowerMaxRevProxySpecConfigLinkConfig>;
            mode?: pulumi.Input<string>;
            port?: pulumi.Input<number>;
            /**
             * StandAloneConfig is one of the configuration modes for reverse proxy
             */
            standAloneConfig?: pulumi.Input<inputs.storage.v1.CSIPowerMaxRevProxySpecConfigStandAloneConfig>;
        }

        /**
         * LinkConfig is one of the configuration modes for reverse proxy
         */
        export interface CSIPowerMaxRevProxySpecConfigLinkConfig {
            /**
             * ManagementServerConfig - represents a management server configuration for the management server
             */
            backup?: pulumi.Input<inputs.storage.v1.CSIPowerMaxRevProxySpecConfigLinkConfigBackup>;
            /**
             * ManagementServerConfig - represents a management server configuration for the management server
             */
            primary: pulumi.Input<inputs.storage.v1.CSIPowerMaxRevProxySpecConfigLinkConfigPrimary>;
        }

        /**
         * ManagementServerConfig - represents a management server configuration for the management server
         */
        export interface CSIPowerMaxRevProxySpecConfigLinkConfigBackup {
            arrayCredentialSecret?: pulumi.Input<string>;
            certSecret?: pulumi.Input<string>;
            /**
             * ProxyLimits is used for storing the various types of limits applied for a particular proxy instance
             */
            limits?: pulumi.Input<inputs.storage.v1.CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimits>;
            skipCertificateValidation?: pulumi.Input<boolean>;
            url: pulumi.Input<string>;
        }

        /**
         * ProxyLimits is used for storing the various types of limits applied for a particular proxy instance
         */
        export interface CSIPowerMaxRevProxySpecConfigLinkConfigBackupLimits {
            maxActiveRead?: pulumi.Input<number>;
            maxActiveWrite?: pulumi.Input<number>;
            maxOutStandingRead?: pulumi.Input<number>;
            maxOutStandingWrite?: pulumi.Input<number>;
        }

        /**
         * ManagementServerConfig - represents a management server configuration for the management server
         */
        export interface CSIPowerMaxRevProxySpecConfigLinkConfigPrimary {
            arrayCredentialSecret?: pulumi.Input<string>;
            certSecret?: pulumi.Input<string>;
            /**
             * ProxyLimits is used for storing the various types of limits applied for a particular proxy instance
             */
            limits?: pulumi.Input<inputs.storage.v1.CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimits>;
            skipCertificateValidation?: pulumi.Input<boolean>;
            url: pulumi.Input<string>;
        }

        /**
         * ProxyLimits is used for storing the various types of limits applied for a particular proxy instance
         */
        export interface CSIPowerMaxRevProxySpecConfigLinkConfigPrimaryLimits {
            maxActiveRead?: pulumi.Input<number>;
            maxActiveWrite?: pulumi.Input<number>;
            maxOutStandingRead?: pulumi.Input<number>;
            maxOutStandingWrite?: pulumi.Input<number>;
        }

        /**
         * StandAloneConfig is one of the configuration modes for reverse proxy
         */
        export interface CSIPowerMaxRevProxySpecConfigStandAloneConfig {
            managementServers: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServers>[]>;
            storageArrays: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArrays>[]>;
        }

        /**
         * ManagementServerConfig - represents a management server configuration for the management server
         */
        export interface CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServers {
            arrayCredentialSecret?: pulumi.Input<string>;
            certSecret?: pulumi.Input<string>;
            /**
             * ProxyLimits is used for storing the various types of limits applied for a particular proxy instance
             */
            limits?: pulumi.Input<inputs.storage.v1.CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimits>;
            skipCertificateValidation?: pulumi.Input<boolean>;
            url: pulumi.Input<string>;
        }

        /**
         * ProxyLimits is used for storing the various types of limits applied for a particular proxy instance
         */
        export interface CSIPowerMaxRevProxySpecConfigStandAloneConfigManagementServersLimits {
            maxActiveRead?: pulumi.Input<number>;
            maxActiveWrite?: pulumi.Input<number>;
            maxOutStandingRead?: pulumi.Input<number>;
            maxOutStandingWrite?: pulumi.Input<number>;
        }

        /**
         * StorageArrayConfig represents a storage array managed by reverse proxy
         */
        export interface CSIPowerMaxRevProxySpecConfigStandAloneConfigStorageArrays {
            backupURL?: pulumi.Input<string>;
            primaryURL: pulumi.Input<string>;
            proxyCredentialSecrets: pulumi.Input<pulumi.Input<string>[]>;
            storageArrayId: pulumi.Input<string>;
        }

        /**
         * CSIPowerMaxRevProxyStatus defines the observed state of CSIPowerMaxRevProxy
         */
        export interface CSIPowerMaxRevProxyStatus {
            /**
             * LastUpdate is the last updated state of the driver
             */
            lastUpdate?: pulumi.Input<inputs.storage.v1.CSIPowerMaxRevProxyStatusLastUpdate>;
            /**
             * DriverHash is a hash of the driver specification
             */
            proxyHash?: pulumi.Input<number>;
            /**
             * INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html ProxyStatus is the status of proxy pod
             */
            proxyStatus?: pulumi.Input<inputs.storage.v1.CSIPowerMaxRevProxyStatusProxyStatus>;
            /**
             * State is the state of the driver installation
             */
            state?: pulumi.Input<string>;
        }

        /**
         * LastUpdate is the last updated state of the driver
         */
        export interface CSIPowerMaxRevProxyStatusLastUpdate {
            /**
             * Condition is the last known condition of the Custom Resource
             */
            condition?: pulumi.Input<string>;
            /**
             * ErrorMessage is the last error message associated with the condition
             */
            errorMessage?: pulumi.Input<string>;
            /**
             * Time is the time stamp for the last condition update
             */
            time?: pulumi.Input<string>;
        }

        /**
         * INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html ProxyStatus is the status of proxy pod
         */
        export interface CSIPowerMaxRevProxyStatusProxyStatus {
            available?: pulumi.Input<pulumi.Input<string>[]>;
            ready?: pulumi.Input<pulumi.Input<string>[]>;
            starting?: pulumi.Input<pulumi.Input<string>[]>;
            stopped?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * CSIPowerMaxSpec defines the desired state of CSIPowerMax
         */
        export interface CSIPowerMaxSpec {
            /**
             * Driver is the specification for the CSI PowerMax Driver
             */
            driver: pulumi.Input<inputs.storage.v1.CSIPowerMaxSpecDriver>;
        }

        /**
         * Driver is the specification for the CSI PowerMax Driver
         */
        export interface CSIPowerMaxSpecDriver {
            /**
             * AuthSecret is the name of the credentials secret for the driver
             */
            authSecret?: pulumi.Input<string>;
            /**
             * Common is the common specification for both controller and node plugins
             */
            common: pulumi.Input<inputs.storage.v1.CSIPowerMaxSpecDriverCommon>;
            /**
             * ConfigVersion is the configuration version of the driver
             */
            configVersion: pulumi.Input<string>;
            /**
             * Controller is the specification for Controller plugin only
             */
            controller?: pulumi.Input<inputs.storage.v1.CSIPowerMaxSpecDriverController>;
            /**
             * ForceUpdate is the boolean flag used to force an update of the driver instance
             */
            forceUpdate?: pulumi.Input<boolean>;
            /**
             * Node is the specification for Node plugin only
             */
            node?: pulumi.Input<inputs.storage.v1.CSIPowerMaxSpecDriverNode>;
            /**
             * Replicas is the count of controllers for Controller plugin
             */
            replicas: pulumi.Input<number>;
            /**
             * SideCars is the specification for CSI sidecar containers
             */
            sideCars?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIPowerMaxSpecDriverSideCars>[]>;
            /**
             * SnapshotClass is the specification for Snapshot Classes
             */
            snapshotClass?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIPowerMaxSpecDriverSnapshotClass>[]>;
            /**
             * StorageClass is the specification for Storage Classes
             */
            storageClass?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIPowerMaxSpecDriverStorageClass>[]>;
            /**
             * TLSCertSecret is the name of the TLS Cert secret
             */
            tlsCertSecret?: pulumi.Input<string>;
        }

        /**
         * Common is the common specification for both controller and node plugins
         */
        export interface CSIPowerMaxSpecDriverCommon {
            /**
             * Args is the set of arguments for the container
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Envs is the set of environment variables for the container
             */
            envs?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIPowerMaxSpecDriverCommonEnvs>[]>;
            /**
             * Image is the image tag for the Container
             */
            image?: pulumi.Input<string>;
            /**
             * ImagePullPolicy is the image pull policy for the image
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Name is the name of Container
             */
            name?: pulumi.Input<string>;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Tolerations is the list of tolerations for the driver pods
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIPowerMaxSpecDriverCommonTolerations>[]>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface CSIPowerMaxSpecDriverCommonEnvs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.storage.v1.CSIPowerMaxSpecDriverCommonEnvsValueFrom>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface CSIPowerMaxSpecDriverCommonEnvsValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.storage.v1.CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRef>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.storage.v1.CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRef>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.storage.v1.CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRef>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.storage.v1.CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRef>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface CSIPowerMaxSpecDriverCommonEnvsValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface CSIPowerMaxSpecDriverCommonEnvsValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.storage.v1.CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisor>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface CSIPowerMaxSpecDriverCommonEnvsValueFromResourceFieldRefDivisor {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface CSIPowerMaxSpecDriverCommonEnvsValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface CSIPowerMaxSpecDriverCommonTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * Controller is the specification for Controller plugin only
         */
        export interface CSIPowerMaxSpecDriverController {
            /**
             * Args is the set of arguments for the container
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Envs is the set of environment variables for the container
             */
            envs?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIPowerMaxSpecDriverControllerEnvs>[]>;
            /**
             * Image is the image tag for the Container
             */
            image?: pulumi.Input<string>;
            /**
             * ImagePullPolicy is the image pull policy for the image
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Name is the name of Container
             */
            name?: pulumi.Input<string>;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Tolerations is the list of tolerations for the driver pods
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIPowerMaxSpecDriverControllerTolerations>[]>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface CSIPowerMaxSpecDriverControllerEnvs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.storage.v1.CSIPowerMaxSpecDriverControllerEnvsValueFrom>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface CSIPowerMaxSpecDriverControllerEnvsValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.storage.v1.CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRef>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.storage.v1.CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRef>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.storage.v1.CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRef>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.storage.v1.CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRef>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface CSIPowerMaxSpecDriverControllerEnvsValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface CSIPowerMaxSpecDriverControllerEnvsValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.storage.v1.CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisor>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface CSIPowerMaxSpecDriverControllerEnvsValueFromResourceFieldRefDivisor {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface CSIPowerMaxSpecDriverControllerEnvsValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface CSIPowerMaxSpecDriverControllerTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * Node is the specification for Node plugin only
         */
        export interface CSIPowerMaxSpecDriverNode {
            /**
             * Args is the set of arguments for the container
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Envs is the set of environment variables for the container
             */
            envs?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIPowerMaxSpecDriverNodeEnvs>[]>;
            /**
             * Image is the image tag for the Container
             */
            image?: pulumi.Input<string>;
            /**
             * ImagePullPolicy is the image pull policy for the image
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Name is the name of Container
             */
            name?: pulumi.Input<string>;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Tolerations is the list of tolerations for the driver pods
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIPowerMaxSpecDriverNodeTolerations>[]>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface CSIPowerMaxSpecDriverNodeEnvs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.storage.v1.CSIPowerMaxSpecDriverNodeEnvsValueFrom>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface CSIPowerMaxSpecDriverNodeEnvsValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.storage.v1.CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRef>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.storage.v1.CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRef>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.storage.v1.CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRef>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.storage.v1.CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRef>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface CSIPowerMaxSpecDriverNodeEnvsValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface CSIPowerMaxSpecDriverNodeEnvsValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.storage.v1.CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisor>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface CSIPowerMaxSpecDriverNodeEnvsValueFromResourceFieldRefDivisor {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface CSIPowerMaxSpecDriverNodeEnvsValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface CSIPowerMaxSpecDriverNodeTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * ContainerTemplate - Structure representing a container
         */
        export interface CSIPowerMaxSpecDriverSideCars {
            /**
             * Args is the set of arguments for the container
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Envs is the set of environment variables for the container
             */
            envs?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIPowerMaxSpecDriverSideCarsEnvs>[]>;
            /**
             * Image is the image tag for the Container
             */
            image?: pulumi.Input<string>;
            /**
             * ImagePullPolicy is the image pull policy for the image
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Name is the name of Container
             */
            name?: pulumi.Input<string>;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Tolerations is the list of tolerations for the driver pods
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIPowerMaxSpecDriverSideCarsTolerations>[]>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface CSIPowerMaxSpecDriverSideCarsEnvs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.storage.v1.CSIPowerMaxSpecDriverSideCarsEnvsValueFrom>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface CSIPowerMaxSpecDriverSideCarsEnvsValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.storage.v1.CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRef>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.storage.v1.CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRef>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.storage.v1.CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRef>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.storage.v1.CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRef>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface CSIPowerMaxSpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface CSIPowerMaxSpecDriverSideCarsEnvsValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.storage.v1.CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface CSIPowerMaxSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface CSIPowerMaxSpecDriverSideCarsEnvsValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface CSIPowerMaxSpecDriverSideCarsTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * SnapshotClass represents a VolumeSnapshotClass
         */
        export interface CSIPowerMaxSpecDriverSnapshotClass {
            /**
             * Name is the name of the Snapshot Class
             */
            name: pulumi.Input<string>;
            /**
             * Parameters is a map of driver specific parameters for snapshot class
             */
            parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * StorageClass represents a kubernetes storage class
         */
        export interface CSIPowerMaxSpecDriverStorageClass {
            /**
             * AllowVolumeExpansion is a boolean flag which indicates if volumes can be expanded
             */
            allowVolumeExpansion?: pulumi.Input<boolean>;
            /**
             * Restrict the node topologies where volumes can be dynamically provisioned.
             */
            allowedTopologies?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIPowerMaxSpecDriverStorageClassAllowedTopologies>[]>;
            /**
             * DefaultSc is a boolean flag to indicate if the storage class is going to be marked as default
             */
            default?: pulumi.Input<boolean>;
            /**
             * Name is the name of the StorageClass
             */
            name: pulumi.Input<string>;
            /**
             * Parameters is a map of driver specific storage class
             */
            parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * ReclaimPolicy is the reclaim policy for the storage class
             */
            reclaimPolicy?: pulumi.Input<string>;
        }

        /**
         * A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.
         */
        export interface CSIPowerMaxSpecDriverStorageClassAllowedTopologies {
            /**
             * A list of topology selector requirements by labels.
             */
            matchLabelExpressions?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions>[]>;
        }

        /**
         * A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.
         */
        export interface CSIPowerMaxSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * An array of string values. One value must match the label to be selected. Each entry in Values is ORed.
             */
            values: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * DriverStatus defines the observed state of CSIDriver
         */
        export interface CSIPowerMaxStatus {
            /**
             * ControllerStatus is the status of Controller pods
             */
            controllerStatus?: pulumi.Input<inputs.storage.v1.CSIPowerMaxStatusControllerStatus>;
            /**
             * DriverHash is a hash of the driver specification
             */
            driverHash?: pulumi.Input<number>;
            /**
             * LastUpdate is the last updated state of the driver
             */
            lastUpdate?: pulumi.Input<inputs.storage.v1.CSIPowerMaxStatusLastUpdate>;
            /**
             * NodeStatus is the status of Controller pods
             */
            nodeStatus?: pulumi.Input<inputs.storage.v1.CSIPowerMaxStatusNodeStatus>;
            /**
             * State is the state of the driver installation
             */
            state?: pulumi.Input<string>;
        }

        /**
         * ControllerStatus is the status of Controller pods
         */
        export interface CSIPowerMaxStatusControllerStatus {
            available?: pulumi.Input<pulumi.Input<string>[]>;
            ready?: pulumi.Input<pulumi.Input<string>[]>;
            starting?: pulumi.Input<pulumi.Input<string>[]>;
            stopped?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * LastUpdate is the last updated state of the driver
         */
        export interface CSIPowerMaxStatusLastUpdate {
            /**
             * Condition is the last known condition of the Custom Resource
             */
            condition?: pulumi.Input<string>;
            /**
             * ErrorMessage is the last error message associated with the condition
             */
            errorMessage?: pulumi.Input<string>;
            /**
             * Time is the time stamp for the last condition update
             */
            time?: pulumi.Input<string>;
        }

        /**
         * NodeStatus is the status of Controller pods
         */
        export interface CSIPowerMaxStatusNodeStatus {
            available?: pulumi.Input<pulumi.Input<string>[]>;
            ready?: pulumi.Input<pulumi.Input<string>[]>;
            starting?: pulumi.Input<pulumi.Input<string>[]>;
            stopped?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * CSIPowerStoreSpec defines the desired state of CSIPowerStore
         */
        export interface CSIPowerStoreSpec {
            /**
             * INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html
             */
            driver: pulumi.Input<inputs.storage.v1.CSIPowerStoreSpecDriver>;
        }

        /**
         * INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html
         */
        export interface CSIPowerStoreSpecDriver {
            /**
             * AuthSecret is the name of the credentials secret for the driver
             */
            authSecret?: pulumi.Input<string>;
            /**
             * Common is the common specification for both controller and node plugins
             */
            common: pulumi.Input<inputs.storage.v1.CSIPowerStoreSpecDriverCommon>;
            /**
             * ConfigVersion is the configuration version of the driver
             */
            configVersion: pulumi.Input<string>;
            /**
             * Controller is the specification for Controller plugin only
             */
            controller?: pulumi.Input<inputs.storage.v1.CSIPowerStoreSpecDriverController>;
            /**
             * ForceUpdate is the boolean flag used to force an update of the driver instance
             */
            forceUpdate?: pulumi.Input<boolean>;
            /**
             * Node is the specification for Node plugin only
             */
            node?: pulumi.Input<inputs.storage.v1.CSIPowerStoreSpecDriverNode>;
            /**
             * Replicas is the count of controllers for Controller plugin
             */
            replicas: pulumi.Input<number>;
            /**
             * SideCars is the specification for CSI sidecar containers
             */
            sideCars?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIPowerStoreSpecDriverSideCars>[]>;
            /**
             * SnapshotClass is the specification for Snapshot Classes
             */
            snapshotClass?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIPowerStoreSpecDriverSnapshotClass>[]>;
            /**
             * StorageClass is the specification for Storage Classes
             */
            storageClass?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIPowerStoreSpecDriverStorageClass>[]>;
            /**
             * TLSCertSecret is the name of the TLS Cert secret
             */
            tlsCertSecret?: pulumi.Input<string>;
        }

        /**
         * Common is the common specification for both controller and node plugins
         */
        export interface CSIPowerStoreSpecDriverCommon {
            /**
             * Args is the set of arguments for the container
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Envs is the set of environment variables for the container
             */
            envs?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIPowerStoreSpecDriverCommonEnvs>[]>;
            /**
             * Image is the image tag for the Container
             */
            image?: pulumi.Input<string>;
            /**
             * ImagePullPolicy is the image pull policy for the image
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Name is the name of Container
             */
            name?: pulumi.Input<string>;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Tolerations is the list of tolerations for the driver pods
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIPowerStoreSpecDriverCommonTolerations>[]>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface CSIPowerStoreSpecDriverCommonEnvs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.storage.v1.CSIPowerStoreSpecDriverCommonEnvsValueFrom>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface CSIPowerStoreSpecDriverCommonEnvsValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.storage.v1.CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRef>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.storage.v1.CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRef>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.storage.v1.CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRef>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.storage.v1.CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRef>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface CSIPowerStoreSpecDriverCommonEnvsValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface CSIPowerStoreSpecDriverCommonEnvsValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.storage.v1.CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisor>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface CSIPowerStoreSpecDriverCommonEnvsValueFromResourceFieldRefDivisor {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface CSIPowerStoreSpecDriverCommonEnvsValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface CSIPowerStoreSpecDriverCommonTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * Controller is the specification for Controller plugin only
         */
        export interface CSIPowerStoreSpecDriverController {
            /**
             * Args is the set of arguments for the container
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Envs is the set of environment variables for the container
             */
            envs?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIPowerStoreSpecDriverControllerEnvs>[]>;
            /**
             * Image is the image tag for the Container
             */
            image?: pulumi.Input<string>;
            /**
             * ImagePullPolicy is the image pull policy for the image
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Name is the name of Container
             */
            name?: pulumi.Input<string>;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Tolerations is the list of tolerations for the driver pods
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIPowerStoreSpecDriverControllerTolerations>[]>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface CSIPowerStoreSpecDriverControllerEnvs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.storage.v1.CSIPowerStoreSpecDriverControllerEnvsValueFrom>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface CSIPowerStoreSpecDriverControllerEnvsValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.storage.v1.CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRef>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.storage.v1.CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRef>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.storage.v1.CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRef>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.storage.v1.CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRef>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface CSIPowerStoreSpecDriverControllerEnvsValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface CSIPowerStoreSpecDriverControllerEnvsValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.storage.v1.CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisor>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface CSIPowerStoreSpecDriverControllerEnvsValueFromResourceFieldRefDivisor {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface CSIPowerStoreSpecDriverControllerEnvsValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface CSIPowerStoreSpecDriverControllerTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * Node is the specification for Node plugin only
         */
        export interface CSIPowerStoreSpecDriverNode {
            /**
             * Args is the set of arguments for the container
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Envs is the set of environment variables for the container
             */
            envs?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIPowerStoreSpecDriverNodeEnvs>[]>;
            /**
             * Image is the image tag for the Container
             */
            image?: pulumi.Input<string>;
            /**
             * ImagePullPolicy is the image pull policy for the image
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Name is the name of Container
             */
            name?: pulumi.Input<string>;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Tolerations is the list of tolerations for the driver pods
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIPowerStoreSpecDriverNodeTolerations>[]>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface CSIPowerStoreSpecDriverNodeEnvs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.storage.v1.CSIPowerStoreSpecDriverNodeEnvsValueFrom>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface CSIPowerStoreSpecDriverNodeEnvsValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.storage.v1.CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRef>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.storage.v1.CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRef>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.storage.v1.CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRef>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.storage.v1.CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRef>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface CSIPowerStoreSpecDriverNodeEnvsValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface CSIPowerStoreSpecDriverNodeEnvsValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.storage.v1.CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisor>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface CSIPowerStoreSpecDriverNodeEnvsValueFromResourceFieldRefDivisor {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface CSIPowerStoreSpecDriverNodeEnvsValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface CSIPowerStoreSpecDriverNodeTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * ContainerTemplate - Structure representing a container
         */
        export interface CSIPowerStoreSpecDriverSideCars {
            /**
             * Args is the set of arguments for the container
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Envs is the set of environment variables for the container
             */
            envs?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIPowerStoreSpecDriverSideCarsEnvs>[]>;
            /**
             * Image is the image tag for the Container
             */
            image?: pulumi.Input<string>;
            /**
             * ImagePullPolicy is the image pull policy for the image
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Name is the name of Container
             */
            name?: pulumi.Input<string>;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Tolerations is the list of tolerations for the driver pods
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIPowerStoreSpecDriverSideCarsTolerations>[]>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface CSIPowerStoreSpecDriverSideCarsEnvs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.storage.v1.CSIPowerStoreSpecDriverSideCarsEnvsValueFrom>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface CSIPowerStoreSpecDriverSideCarsEnvsValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.storage.v1.CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRef>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.storage.v1.CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRef>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.storage.v1.CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRef>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.storage.v1.CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRef>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface CSIPowerStoreSpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface CSIPowerStoreSpecDriverSideCarsEnvsValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.storage.v1.CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface CSIPowerStoreSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface CSIPowerStoreSpecDriverSideCarsEnvsValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface CSIPowerStoreSpecDriverSideCarsTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * SnapshotClass represents a VolumeSnapshotClass
         */
        export interface CSIPowerStoreSpecDriverSnapshotClass {
            /**
             * Name is the name of the Snapshot Class
             */
            name: pulumi.Input<string>;
            /**
             * Parameters is a map of driver specific parameters for snapshot class
             */
            parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * StorageClass represents a kubernetes storage class
         */
        export interface CSIPowerStoreSpecDriverStorageClass {
            /**
             * AllowVolumeExpansion is a boolean flag which indicates if volumes can be expanded
             */
            allowVolumeExpansion?: pulumi.Input<boolean>;
            /**
             * Restrict the node topologies where volumes can be dynamically provisioned.
             */
            allowedTopologies?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIPowerStoreSpecDriverStorageClassAllowedTopologies>[]>;
            /**
             * DefaultSc is a boolean flag to indicate if the storage class is going to be marked as default
             */
            default?: pulumi.Input<boolean>;
            /**
             * Name is the name of the StorageClass
             */
            name: pulumi.Input<string>;
            /**
             * Parameters is a map of driver specific storage class
             */
            parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * ReclaimPolicy is the reclaim policy for the storage class
             */
            reclaimPolicy?: pulumi.Input<string>;
        }

        /**
         * A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.
         */
        export interface CSIPowerStoreSpecDriverStorageClassAllowedTopologies {
            /**
             * A list of topology selector requirements by labels.
             */
            matchLabelExpressions?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions>[]>;
        }

        /**
         * A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.
         */
        export interface CSIPowerStoreSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * An array of string values. One value must match the label to be selected. Each entry in Values is ORed.
             */
            values: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * DriverStatus defines the observed state of CSIDriver
         */
        export interface CSIPowerStoreStatus {
            /**
             * ControllerStatus is the status of Controller pods
             */
            controllerStatus?: pulumi.Input<inputs.storage.v1.CSIPowerStoreStatusControllerStatus>;
            /**
             * DriverHash is a hash of the driver specification
             */
            driverHash?: pulumi.Input<number>;
            /**
             * LastUpdate is the last updated state of the driver
             */
            lastUpdate?: pulumi.Input<inputs.storage.v1.CSIPowerStoreStatusLastUpdate>;
            /**
             * NodeStatus is the status of Controller pods
             */
            nodeStatus?: pulumi.Input<inputs.storage.v1.CSIPowerStoreStatusNodeStatus>;
            /**
             * State is the state of the driver installation
             */
            state?: pulumi.Input<string>;
        }

        /**
         * ControllerStatus is the status of Controller pods
         */
        export interface CSIPowerStoreStatusControllerStatus {
            available?: pulumi.Input<pulumi.Input<string>[]>;
            ready?: pulumi.Input<pulumi.Input<string>[]>;
            starting?: pulumi.Input<pulumi.Input<string>[]>;
            stopped?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * LastUpdate is the last updated state of the driver
         */
        export interface CSIPowerStoreStatusLastUpdate {
            /**
             * Condition is the last known condition of the Custom Resource
             */
            condition?: pulumi.Input<string>;
            /**
             * ErrorMessage is the last error message associated with the condition
             */
            errorMessage?: pulumi.Input<string>;
            /**
             * Time is the time stamp for the last condition update
             */
            time?: pulumi.Input<string>;
        }

        /**
         * NodeStatus is the status of Controller pods
         */
        export interface CSIPowerStoreStatusNodeStatus {
            available?: pulumi.Input<pulumi.Input<string>[]>;
            ready?: pulumi.Input<pulumi.Input<string>[]>;
            starting?: pulumi.Input<pulumi.Input<string>[]>;
            stopped?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * CSIUnitySpec defines the desired state of CSIUnity
         */
        export interface CSIUnitySpec {
            /**
             * Driver is the specification for the CSI Unity Driver
             */
            driver: pulumi.Input<inputs.storage.v1.CSIUnitySpecDriver>;
        }

        /**
         * Driver is the specification for the CSI Unity Driver
         */
        export interface CSIUnitySpecDriver {
            /**
             * AuthSecret is the name of the credentials secret for the driver
             */
            authSecret?: pulumi.Input<string>;
            /**
             * Common is the common specification for both controller and node plugins
             */
            common: pulumi.Input<inputs.storage.v1.CSIUnitySpecDriverCommon>;
            /**
             * ConfigVersion is the configuration version of the driver
             */
            configVersion: pulumi.Input<string>;
            /**
             * Controller is the specification for Controller plugin only
             */
            controller?: pulumi.Input<inputs.storage.v1.CSIUnitySpecDriverController>;
            /**
             * ForceUpdate is the boolean flag used to force an update of the driver instance
             */
            forceUpdate?: pulumi.Input<boolean>;
            /**
             * Node is the specification for Node plugin only
             */
            node?: pulumi.Input<inputs.storage.v1.CSIUnitySpecDriverNode>;
            /**
             * Replicas is the count of controllers for Controller plugin
             */
            replicas: pulumi.Input<number>;
            /**
             * SideCars is the specification for CSI sidecar containers
             */
            sideCars?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIUnitySpecDriverSideCars>[]>;
            /**
             * SnapshotClass is the specification for Snapshot Classes
             */
            snapshotClass?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIUnitySpecDriverSnapshotClass>[]>;
            /**
             * StorageClass is the specification for Storage Classes
             */
            storageClass?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIUnitySpecDriverStorageClass>[]>;
            /**
             * TLSCertSecret is the name of the TLS Cert secret
             */
            tlsCertSecret?: pulumi.Input<string>;
        }

        /**
         * Common is the common specification for both controller and node plugins
         */
        export interface CSIUnitySpecDriverCommon {
            /**
             * Args is the set of arguments for the container
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Envs is the set of environment variables for the container
             */
            envs?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIUnitySpecDriverCommonEnvs>[]>;
            /**
             * Image is the image tag for the Container
             */
            image?: pulumi.Input<string>;
            /**
             * ImagePullPolicy is the image pull policy for the image
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Name is the name of Container
             */
            name?: pulumi.Input<string>;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Tolerations is the list of tolerations for the driver pods
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIUnitySpecDriverCommonTolerations>[]>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface CSIUnitySpecDriverCommonEnvs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.storage.v1.CSIUnitySpecDriverCommonEnvsValueFrom>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface CSIUnitySpecDriverCommonEnvsValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.storage.v1.CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRef>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.storage.v1.CSIUnitySpecDriverCommonEnvsValueFromFieldRef>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.storage.v1.CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRef>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.storage.v1.CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRef>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface CSIUnitySpecDriverCommonEnvsValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface CSIUnitySpecDriverCommonEnvsValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.storage.v1.CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisor>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface CSIUnitySpecDriverCommonEnvsValueFromResourceFieldRefDivisor {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface CSIUnitySpecDriverCommonEnvsValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface CSIUnitySpecDriverCommonTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * Controller is the specification for Controller plugin only
         */
        export interface CSIUnitySpecDriverController {
            /**
             * Args is the set of arguments for the container
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Envs is the set of environment variables for the container
             */
            envs?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIUnitySpecDriverControllerEnvs>[]>;
            /**
             * Image is the image tag for the Container
             */
            image?: pulumi.Input<string>;
            /**
             * ImagePullPolicy is the image pull policy for the image
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Name is the name of Container
             */
            name?: pulumi.Input<string>;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Tolerations is the list of tolerations for the driver pods
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIUnitySpecDriverControllerTolerations>[]>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface CSIUnitySpecDriverControllerEnvs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.storage.v1.CSIUnitySpecDriverControllerEnvsValueFrom>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface CSIUnitySpecDriverControllerEnvsValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.storage.v1.CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRef>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.storage.v1.CSIUnitySpecDriverControllerEnvsValueFromFieldRef>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.storage.v1.CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRef>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.storage.v1.CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRef>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface CSIUnitySpecDriverControllerEnvsValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface CSIUnitySpecDriverControllerEnvsValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.storage.v1.CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisor>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface CSIUnitySpecDriverControllerEnvsValueFromResourceFieldRefDivisor {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface CSIUnitySpecDriverControllerEnvsValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface CSIUnitySpecDriverControllerTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * Node is the specification for Node plugin only
         */
        export interface CSIUnitySpecDriverNode {
            /**
             * Args is the set of arguments for the container
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Envs is the set of environment variables for the container
             */
            envs?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIUnitySpecDriverNodeEnvs>[]>;
            /**
             * Image is the image tag for the Container
             */
            image?: pulumi.Input<string>;
            /**
             * ImagePullPolicy is the image pull policy for the image
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Name is the name of Container
             */
            name?: pulumi.Input<string>;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Tolerations is the list of tolerations for the driver pods
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIUnitySpecDriverNodeTolerations>[]>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface CSIUnitySpecDriverNodeEnvs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.storage.v1.CSIUnitySpecDriverNodeEnvsValueFrom>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface CSIUnitySpecDriverNodeEnvsValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.storage.v1.CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRef>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.storage.v1.CSIUnitySpecDriverNodeEnvsValueFromFieldRef>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.storage.v1.CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRef>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.storage.v1.CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRef>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface CSIUnitySpecDriverNodeEnvsValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface CSIUnitySpecDriverNodeEnvsValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.storage.v1.CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisor>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface CSIUnitySpecDriverNodeEnvsValueFromResourceFieldRefDivisor {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface CSIUnitySpecDriverNodeEnvsValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface CSIUnitySpecDriverNodeTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * ContainerTemplate - Structure representing a container
         */
        export interface CSIUnitySpecDriverSideCars {
            /**
             * Args is the set of arguments for the container
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Envs is the set of environment variables for the container
             */
            envs?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIUnitySpecDriverSideCarsEnvs>[]>;
            /**
             * Image is the image tag for the Container
             */
            image?: pulumi.Input<string>;
            /**
             * ImagePullPolicy is the image pull policy for the image
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Name is the name of Container
             */
            name?: pulumi.Input<string>;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Tolerations is the list of tolerations for the driver pods
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIUnitySpecDriverSideCarsTolerations>[]>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface CSIUnitySpecDriverSideCarsEnvs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.storage.v1.CSIUnitySpecDriverSideCarsEnvsValueFrom>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface CSIUnitySpecDriverSideCarsEnvsValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.storage.v1.CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRef>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.storage.v1.CSIUnitySpecDriverSideCarsEnvsValueFromFieldRef>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.storage.v1.CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRef>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.storage.v1.CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRef>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface CSIUnitySpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface CSIUnitySpecDriverSideCarsEnvsValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.storage.v1.CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface CSIUnitySpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface CSIUnitySpecDriverSideCarsEnvsValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface CSIUnitySpecDriverSideCarsTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * SnapshotClass represents a VolumeSnapshotClass
         */
        export interface CSIUnitySpecDriverSnapshotClass {
            /**
             * Name is the name of the Snapshot Class
             */
            name: pulumi.Input<string>;
            /**
             * Parameters is a map of driver specific parameters for snapshot class
             */
            parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * StorageClass represents a kubernetes storage class
         */
        export interface CSIUnitySpecDriverStorageClass {
            /**
             * AllowVolumeExpansion is a boolean flag which indicates if volumes can be expanded
             */
            allowVolumeExpansion?: pulumi.Input<boolean>;
            /**
             * Restrict the node topologies where volumes can be dynamically provisioned.
             */
            allowedTopologies?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIUnitySpecDriverStorageClassAllowedTopologies>[]>;
            /**
             * DefaultSc is a boolean flag to indicate if the storage class is going to be marked as default
             */
            default?: pulumi.Input<boolean>;
            /**
             * Name is the name of the StorageClass
             */
            name: pulumi.Input<string>;
            /**
             * Parameters is a map of driver specific storage class
             */
            parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * ReclaimPolicy is the reclaim policy for the storage class
             */
            reclaimPolicy?: pulumi.Input<string>;
        }

        /**
         * A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.
         */
        export interface CSIUnitySpecDriverStorageClassAllowedTopologies {
            /**
             * A list of topology selector requirements by labels.
             */
            matchLabelExpressions?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressions>[]>;
        }

        /**
         * A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.
         */
        export interface CSIUnitySpecDriverStorageClassAllowedTopologiesMatchLabelExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * An array of string values. One value must match the label to be selected. Each entry in Values is ORed.
             */
            values: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * DriverStatus defines the observed state of CSIDriver
         */
        export interface CSIUnityStatus {
            /**
             * ControllerStatus is the status of Controller pods
             */
            controllerStatus?: pulumi.Input<inputs.storage.v1.CSIUnityStatusControllerStatus>;
            /**
             * DriverHash is a hash of the driver specification
             */
            driverHash?: pulumi.Input<number>;
            /**
             * LastUpdate is the last updated state of the driver
             */
            lastUpdate?: pulumi.Input<inputs.storage.v1.CSIUnityStatusLastUpdate>;
            /**
             * NodeStatus is the status of Controller pods
             */
            nodeStatus?: pulumi.Input<inputs.storage.v1.CSIUnityStatusNodeStatus>;
            /**
             * State is the state of the driver installation
             */
            state?: pulumi.Input<string>;
        }

        /**
         * ControllerStatus is the status of Controller pods
         */
        export interface CSIUnityStatusControllerStatus {
            available?: pulumi.Input<pulumi.Input<string>[]>;
            ready?: pulumi.Input<pulumi.Input<string>[]>;
            starting?: pulumi.Input<pulumi.Input<string>[]>;
            stopped?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * LastUpdate is the last updated state of the driver
         */
        export interface CSIUnityStatusLastUpdate {
            /**
             * Condition is the last known condition of the Custom Resource
             */
            condition?: pulumi.Input<string>;
            /**
             * ErrorMessage is the last error message associated with the condition
             */
            errorMessage?: pulumi.Input<string>;
            /**
             * Time is the time stamp for the last condition update
             */
            time?: pulumi.Input<string>;
        }

        /**
         * NodeStatus is the status of Controller pods
         */
        export interface CSIUnityStatusNodeStatus {
            available?: pulumi.Input<pulumi.Input<string>[]>;
            ready?: pulumi.Input<pulumi.Input<string>[]>;
            starting?: pulumi.Input<pulumi.Input<string>[]>;
            stopped?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * CSIVXFlexOSSpec defines the desired state of CSIVXFlexOS
         */
        export interface CSIVXFlexOSSpec {
            /**
             * Driver is the specification for the CSI VxFlexOS Driver
             */
            driver: pulumi.Input<inputs.storage.v1.CSIVXFlexOSSpecDriver>;
        }

        /**
         * Driver is the specification for the CSI VxFlexOS Driver
         */
        export interface CSIVXFlexOSSpecDriver {
            /**
             * AuthSecret is the name of the credentials secret for the driver
             */
            authSecret?: pulumi.Input<string>;
            /**
             * Common is the common specification for both controller and node plugins
             */
            common: pulumi.Input<inputs.storage.v1.CSIVXFlexOSSpecDriverCommon>;
            /**
             * ConfigVersion is the configuration version of the driver
             */
            configVersion: pulumi.Input<string>;
            /**
             * Controller is the specification for Controller plugin only
             */
            controller?: pulumi.Input<inputs.storage.v1.CSIVXFlexOSSpecDriverController>;
            /**
             * ForceUpdate is the boolean flag used to force an update of the driver instance
             */
            forceUpdate?: pulumi.Input<boolean>;
            /**
             * Node is the specification for Node plugin only
             */
            node?: pulumi.Input<inputs.storage.v1.CSIVXFlexOSSpecDriverNode>;
            /**
             * Replicas is the count of controllers for Controller plugin
             */
            replicas: pulumi.Input<number>;
            /**
             * SideCars is the specification for CSI sidecar containers
             */
            sideCars?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIVXFlexOSSpecDriverSideCars>[]>;
            /**
             * SnapshotClass is the specification for Snapshot Classes
             */
            snapshotClass?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIVXFlexOSSpecDriverSnapshotClass>[]>;
            /**
             * StorageClass is the specification for Storage Classes
             */
            storageClass?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIVXFlexOSSpecDriverStorageClass>[]>;
            /**
             * TLSCertSecret is the name of the TLS Cert secret
             */
            tlsCertSecret?: pulumi.Input<string>;
        }

        /**
         * Common is the common specification for both controller and node plugins
         */
        export interface CSIVXFlexOSSpecDriverCommon {
            /**
             * Args is the set of arguments for the container
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Envs is the set of environment variables for the container
             */
            envs?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIVXFlexOSSpecDriverCommonEnvs>[]>;
            /**
             * Image is the image tag for the Container
             */
            image?: pulumi.Input<string>;
            /**
             * ImagePullPolicy is the image pull policy for the image
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Name is the name of Container
             */
            name?: pulumi.Input<string>;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Tolerations is the list of tolerations for the driver pods
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIVXFlexOSSpecDriverCommonTolerations>[]>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface CSIVXFlexOSSpecDriverCommonEnvs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.storage.v1.CSIVXFlexOSSpecDriverCommonEnvsValueFrom>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface CSIVXFlexOSSpecDriverCommonEnvsValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.storage.v1.CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRef>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.storage.v1.CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRef>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.storage.v1.CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRef>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.storage.v1.CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRef>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface CSIVXFlexOSSpecDriverCommonEnvsValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface CSIVXFlexOSSpecDriverCommonEnvsValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.storage.v1.CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisor>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface CSIVXFlexOSSpecDriverCommonEnvsValueFromResourceFieldRefDivisor {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface CSIVXFlexOSSpecDriverCommonEnvsValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface CSIVXFlexOSSpecDriverCommonTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * Controller is the specification for Controller plugin only
         */
        export interface CSIVXFlexOSSpecDriverController {
            /**
             * Args is the set of arguments for the container
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Envs is the set of environment variables for the container
             */
            envs?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIVXFlexOSSpecDriverControllerEnvs>[]>;
            /**
             * Image is the image tag for the Container
             */
            image?: pulumi.Input<string>;
            /**
             * ImagePullPolicy is the image pull policy for the image
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Name is the name of Container
             */
            name?: pulumi.Input<string>;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Tolerations is the list of tolerations for the driver pods
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIVXFlexOSSpecDriverControllerTolerations>[]>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface CSIVXFlexOSSpecDriverControllerEnvs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.storage.v1.CSIVXFlexOSSpecDriverControllerEnvsValueFrom>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface CSIVXFlexOSSpecDriverControllerEnvsValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.storage.v1.CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRef>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.storage.v1.CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRef>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.storage.v1.CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRef>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.storage.v1.CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRef>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface CSIVXFlexOSSpecDriverControllerEnvsValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface CSIVXFlexOSSpecDriverControllerEnvsValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.storage.v1.CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisor>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface CSIVXFlexOSSpecDriverControllerEnvsValueFromResourceFieldRefDivisor {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface CSIVXFlexOSSpecDriverControllerEnvsValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface CSIVXFlexOSSpecDriverControllerTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * Node is the specification for Node plugin only
         */
        export interface CSIVXFlexOSSpecDriverNode {
            /**
             * Args is the set of arguments for the container
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Envs is the set of environment variables for the container
             */
            envs?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIVXFlexOSSpecDriverNodeEnvs>[]>;
            /**
             * Image is the image tag for the Container
             */
            image?: pulumi.Input<string>;
            /**
             * ImagePullPolicy is the image pull policy for the image
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Name is the name of Container
             */
            name?: pulumi.Input<string>;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Tolerations is the list of tolerations for the driver pods
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIVXFlexOSSpecDriverNodeTolerations>[]>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface CSIVXFlexOSSpecDriverNodeEnvs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.storage.v1.CSIVXFlexOSSpecDriverNodeEnvsValueFrom>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface CSIVXFlexOSSpecDriverNodeEnvsValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.storage.v1.CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRef>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.storage.v1.CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRef>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.storage.v1.CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRef>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.storage.v1.CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRef>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface CSIVXFlexOSSpecDriverNodeEnvsValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface CSIVXFlexOSSpecDriverNodeEnvsValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.storage.v1.CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisor>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface CSIVXFlexOSSpecDriverNodeEnvsValueFromResourceFieldRefDivisor {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface CSIVXFlexOSSpecDriverNodeEnvsValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface CSIVXFlexOSSpecDriverNodeTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * ContainerTemplate - Structure representing a container
         */
        export interface CSIVXFlexOSSpecDriverSideCars {
            /**
             * Args is the set of arguments for the container
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Envs is the set of environment variables for the container
             */
            envs?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIVXFlexOSSpecDriverSideCarsEnvs>[]>;
            /**
             * Image is the image tag for the Container
             */
            image?: pulumi.Input<string>;
            /**
             * ImagePullPolicy is the image pull policy for the image
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Name is the name of Container
             */
            name?: pulumi.Input<string>;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Tolerations is the list of tolerations for the driver pods
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIVXFlexOSSpecDriverSideCarsTolerations>[]>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface CSIVXFlexOSSpecDriverSideCarsEnvs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.storage.v1.CSIVXFlexOSSpecDriverSideCarsEnvsValueFrom>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface CSIVXFlexOSSpecDriverSideCarsEnvsValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.storage.v1.CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRef>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.storage.v1.CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRef>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.storage.v1.CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRef>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.storage.v1.CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRef>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface CSIVXFlexOSSpecDriverSideCarsEnvsValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface CSIVXFlexOSSpecDriverSideCarsEnvsValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.storage.v1.CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface CSIVXFlexOSSpecDriverSideCarsEnvsValueFromResourceFieldRefDivisor {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface CSIVXFlexOSSpecDriverSideCarsEnvsValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface CSIVXFlexOSSpecDriverSideCarsTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * SnapshotClass represents a VolumeSnapshotClass
         */
        export interface CSIVXFlexOSSpecDriverSnapshotClass {
            /**
             * Name is the name of the Snapshot Class
             */
            name: pulumi.Input<string>;
            /**
             * Parameters is a map of driver specific parameters for snapshot class
             */
            parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * StorageClass represents a kubernetes storage class
         */
        export interface CSIVXFlexOSSpecDriverStorageClass {
            /**
             * AllowVolumeExpansion is a boolean flag which indicates if volumes can be expanded
             */
            allowVolumeExpansion?: pulumi.Input<boolean>;
            /**
             * Restrict the node topologies where volumes can be dynamically provisioned.
             */
            allowedTopologies?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIVXFlexOSSpecDriverStorageClassAllowedTopologies>[]>;
            /**
             * DefaultSc is a boolean flag to indicate if the storage class is going to be marked as default
             */
            default?: pulumi.Input<boolean>;
            /**
             * Name is the name of the StorageClass
             */
            name: pulumi.Input<string>;
            /**
             * Parameters is a map of driver specific storage class
             */
            parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * ReclaimPolicy is the reclaim policy for the storage class
             */
            reclaimPolicy?: pulumi.Input<string>;
        }

        /**
         * A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.
         */
        export interface CSIVXFlexOSSpecDriverStorageClassAllowedTopologies {
            /**
             * A list of topology selector requirements by labels.
             */
            matchLabelExpressions?: pulumi.Input<pulumi.Input<inputs.storage.v1.CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions>[]>;
        }

        /**
         * A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.
         */
        export interface CSIVXFlexOSSpecDriverStorageClassAllowedTopologiesMatchLabelExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * An array of string values. One value must match the label to be selected. Each entry in Values is ORed.
             */
            values: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * DriverStatus defines the observed state of CSIDriver
         */
        export interface CSIVXFlexOSStatus {
            /**
             * ControllerStatus is the status of Controller pods
             */
            controllerStatus?: pulumi.Input<inputs.storage.v1.CSIVXFlexOSStatusControllerStatus>;
            /**
             * DriverHash is a hash of the driver specification
             */
            driverHash?: pulumi.Input<number>;
            /**
             * LastUpdate is the last updated state of the driver
             */
            lastUpdate?: pulumi.Input<inputs.storage.v1.CSIVXFlexOSStatusLastUpdate>;
            /**
             * NodeStatus is the status of Controller pods
             */
            nodeStatus?: pulumi.Input<inputs.storage.v1.CSIVXFlexOSStatusNodeStatus>;
            /**
             * State is the state of the driver installation
             */
            state?: pulumi.Input<string>;
        }

        /**
         * ControllerStatus is the status of Controller pods
         */
        export interface CSIVXFlexOSStatusControllerStatus {
            available?: pulumi.Input<pulumi.Input<string>[]>;
            ready?: pulumi.Input<pulumi.Input<string>[]>;
            starting?: pulumi.Input<pulumi.Input<string>[]>;
            stopped?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * LastUpdate is the last updated state of the driver
         */
        export interface CSIVXFlexOSStatusLastUpdate {
            /**
             * Condition is the last known condition of the Custom Resource
             */
            condition?: pulumi.Input<string>;
            /**
             * ErrorMessage is the last error message associated with the condition
             */
            errorMessage?: pulumi.Input<string>;
            /**
             * Time is the time stamp for the last condition update
             */
            time?: pulumi.Input<string>;
        }

        /**
         * NodeStatus is the status of Controller pods
         */
        export interface CSIVXFlexOSStatusNodeStatus {
            available?: pulumi.Input<pulumi.Input<string>[]>;
            ready?: pulumi.Input<pulumi.Input<string>[]>;
            starting?: pulumi.Input<pulumi.Input<string>[]>;
            stopped?: pulumi.Input<pulumi.Input<string>[]>;
        }
    }
}

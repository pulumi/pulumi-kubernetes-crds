// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Inputs.Keycloak.V1Alpha1
{

    /// <summary>
    /// KeycloakBackupSpec defines the desired state of KeycloakBackup.
    /// </summary>
    public class KeycloakBackupSpecArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// If provided, an automatic database backup will be created on AWS S3 instead of a local Persistent Volume. If this property is not provided - a local Persistent Volume backup will be chosen.
        /// </summary>
        [Input("aws")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Keycloak.V1Alpha1.KeycloakBackupSpecAwsArgs>? Aws { get; set; }

        /// <summary>
        /// Selector for looking up Keycloak Custom Resources.
        /// </summary>
        [Input("instanceSelector")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Keycloak.V1Alpha1.KeycloakBackupSpecInstanceSelectorArgs>? InstanceSelector { get; set; }

        /// <summary>
        /// Controls automatic restore behavior. Currently not implemented. 
        ///  In the future this will be used to trigger automatic restore for a given KeycloakBackup. Each backup will correspond to a single snapshot of the database (stored either in a Persistent Volume or AWS). If a user wants to restore it, all he/she needs to do is to change this flag to true. Potentially, it will be possible to restore a single backup multiple times.
        /// </summary>
        [Input("restore")]
        public Input<bool>? Restore { get; set; }

        /// <summary>
        /// Name of the StorageClass for Postgresql Backup Persistent Volume Claim
        /// </summary>
        [Input("storageClassName")]
        public Input<string>? StorageClassName { get; set; }

        public KeycloakBackupSpecArgs()
        {
        }
    }
}

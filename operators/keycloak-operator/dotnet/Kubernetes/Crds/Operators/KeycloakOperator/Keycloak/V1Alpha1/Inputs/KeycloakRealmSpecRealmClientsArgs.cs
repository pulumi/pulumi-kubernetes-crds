// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Inputs.Keycloak.V1Alpha1
{

    public class KeycloakRealmSpecRealmClientsArgs : Pulumi.ResourceArgs
    {
        [Input("access")]
        private InputMap<bool>? _access;

        /// <summary>
        /// Access options.
        /// </summary>
        public InputMap<bool> Access
        {
            get => _access ?? (_access = new InputMap<bool>());
            set => _access = value;
        }

        /// <summary>
        /// Application Admin URL.
        /// </summary>
        [Input("adminUrl")]
        public Input<string>? AdminUrl { get; set; }

        [Input("attributes")]
        private InputMap<string>? _attributes;

        /// <summary>
        /// Client Attributes.
        /// </summary>
        public InputMap<string> Attributes
        {
            get => _attributes ?? (_attributes = new InputMap<string>());
            set => _attributes = value;
        }

        /// <summary>
        /// Application base URL.
        /// </summary>
        [Input("baseUrl")]
        public Input<string>? BaseUrl { get; set; }

        /// <summary>
        /// True if a client supports only Bearer Tokens.
        /// </summary>
        [Input("bearerOnly")]
        public Input<bool>? BearerOnly { get; set; }

        /// <summary>
        /// What Client authentication type to use.
        /// </summary>
        [Input("clientAuthenticatorType")]
        public Input<string>? ClientAuthenticatorType { get; set; }

        /// <summary>
        /// Client ID.
        /// </summary>
        [Input("clientId", required: true)]
        public Input<string> ClientId { get; set; } = null!;

        /// <summary>
        /// True if Consent Screen is required.
        /// </summary>
        [Input("consentRequired")]
        public Input<bool>? ConsentRequired { get; set; }

        [Input("defaultRoles")]
        private InputList<string>? _defaultRoles;

        /// <summary>
        /// Default Client roles.
        /// </summary>
        public InputList<string> DefaultRoles
        {
            get => _defaultRoles ?? (_defaultRoles = new InputList<string>());
            set => _defaultRoles = value;
        }

        /// <summary>
        /// Client description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// True if Direct Grant is enabled.
        /// </summary>
        [Input("directAccessGrantsEnabled")]
        public Input<bool>? DirectAccessGrantsEnabled { get; set; }

        /// <summary>
        /// Client enabled flag.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// True if this client supports Front Channel logout.
        /// </summary>
        [Input("frontchannelLogout")]
        public Input<bool>? FrontchannelLogout { get; set; }

        /// <summary>
        /// True if Full Scope is allowed.
        /// </summary>
        [Input("fullScopeAllowed")]
        public Input<bool>? FullScopeAllowed { get; set; }

        /// <summary>
        /// Client ID. If not specified, automatically generated.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// True if Implicit flow is enabled.
        /// </summary>
        [Input("implicitFlowEnabled")]
        public Input<bool>? ImplicitFlowEnabled { get; set; }

        /// <summary>
        /// Client name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Node registration timeout.
        /// </summary>
        [Input("nodeReRegistrationTimeout")]
        public Input<int>? NodeReRegistrationTimeout { get; set; }

        /// <summary>
        /// Not Before setting.
        /// </summary>
        [Input("notBefore")]
        public Input<int>? NotBefore { get; set; }

        /// <summary>
        /// Protocol used for this Client.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        [Input("protocolMappers")]
        private InputList<Pulumi.Kubernetes.Types.Inputs.Keycloak.V1Alpha1.KeycloakRealmSpecRealmClientsProtocolMappersArgs>? _protocolMappers;

        /// <summary>
        /// Protocol Mappers.
        /// </summary>
        public InputList<Pulumi.Kubernetes.Types.Inputs.Keycloak.V1Alpha1.KeycloakRealmSpecRealmClientsProtocolMappersArgs> ProtocolMappers
        {
            get => _protocolMappers ?? (_protocolMappers = new InputList<Pulumi.Kubernetes.Types.Inputs.Keycloak.V1Alpha1.KeycloakRealmSpecRealmClientsProtocolMappersArgs>());
            set => _protocolMappers = value;
        }

        /// <summary>
        /// True if this is a public Client.
        /// </summary>
        [Input("publicClient")]
        public Input<bool>? PublicClient { get; set; }

        [Input("redirectUris")]
        private InputList<string>? _redirectUris;

        /// <summary>
        /// A list of valid Redirection URLs.
        /// </summary>
        public InputList<string> RedirectUris
        {
            get => _redirectUris ?? (_redirectUris = new InputList<string>());
            set => _redirectUris = value;
        }

        /// <summary>
        /// Application root URL.
        /// </summary>
        [Input("rootUrl")]
        public Input<string>? RootUrl { get; set; }

        /// <summary>
        /// Client Secret. The Operator will automatically create a Secret based on this value.
        /// </summary>
        [Input("secret")]
        public Input<string>? Secret { get; set; }

        /// <summary>
        /// True if Service Accounts are enabled.
        /// </summary>
        [Input("serviceAccountsEnabled")]
        public Input<bool>? ServiceAccountsEnabled { get; set; }

        /// <summary>
        /// True if Standard flow is enabled.
        /// </summary>
        [Input("standardFlowEnabled")]
        public Input<bool>? StandardFlowEnabled { get; set; }

        /// <summary>
        /// Surrogate Authentication Required option.
        /// </summary>
        [Input("surrogateAuthRequired")]
        public Input<bool>? SurrogateAuthRequired { get; set; }

        /// <summary>
        /// True to use a Template Config.
        /// </summary>
        [Input("useTemplateConfig")]
        public Input<bool>? UseTemplateConfig { get; set; }

        /// <summary>
        /// True to use Template Mappers.
        /// </summary>
        [Input("useTemplateMappers")]
        public Input<bool>? UseTemplateMappers { get; set; }

        /// <summary>
        /// True to use Template Scope.
        /// </summary>
        [Input("useTemplateScope")]
        public Input<bool>? UseTemplateScope { get; set; }

        [Input("webOrigins")]
        private InputList<string>? _webOrigins;

        /// <summary>
        /// A list of valid Web Origins.
        /// </summary>
        public InputList<string> WebOrigins
        {
            get => _webOrigins ?? (_webOrigins = new InputList<string>());
            set => _webOrigins = value;
        }

        public KeycloakRealmSpecRealmClientsArgs()
        {
        }
    }
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import {ObjectMeta} from "../meta/v1";

export namespace keycloak {
    export namespace v1alpha1 {
        /**
         * KeycloakBackupSpec defines the desired state of KeycloakBackup.
         */
        export interface KeycloakBackupSpec {
            /**
             * If provided, an automatic database backup will be created on AWS S3 instead of a local Persistent Volume. If this property is not provided - a local Persistent Volume backup will be chosen.
             */
            aws?: pulumi.Input<inputs.keycloak.v1alpha1.KeycloakBackupSpecAws>;
            /**
             * Selector for looking up Keycloak Custom Resources.
             */
            instanceSelector?: pulumi.Input<inputs.keycloak.v1alpha1.KeycloakBackupSpecInstanceSelector>;
            /**
             * Controls automatic restore behavior. Currently not implemented. 
             *  In the future this will be used to trigger automatic restore for a given KeycloakBackup. Each backup will correspond to a single snapshot of the database (stored either in a Persistent Volume or AWS). If a user wants to restore it, all he/she needs to do is to change this flag to true. Potentially, it will be possible to restore a single backup multiple times.
             */
            restore?: pulumi.Input<boolean>;
            /**
             * Name of the StorageClass for Postgresql Backup Persistent Volume Claim
             */
            storageClassName?: pulumi.Input<string>;
        }

        /**
         * If provided, an automatic database backup will be created on AWS S3 instead of a local Persistent Volume. If this property is not provided - a local Persistent Volume backup will be chosen.
         */
        export interface KeycloakBackupSpecAws {
            /**
             * Provides a secret name used for connecting to AWS S3 Service. The secret needs to be in the following form: 
             *      apiVersion: v1     kind: Secret     metadata:       name: <Secret name>     type: Opaque     stringData:       AWS_S3_BUCKET_NAME: <S3 Bucket Name>       AWS_ACCESS_KEY_ID: <AWS Access Key ID>       AWS_SECRET_ACCESS_KEY: <AWS Secret Key> 
             *  For more information, please refer to the Operator documentation.
             */
            credentialsSecretName?: pulumi.Input<string>;
            /**
             * If provided, the database backup will be encrypted. Provides a secret name used for encrypting database data. The secret needs to be in the following form: 
             *      apiVersion: v1     kind: Secret     metadata:       name: <Secret name>     type: Opaque     stringData:       GPG_PUBLIC_KEY: <GPG Public Key>       GPG_TRUST_MODEL: <GPG Trust Model>       GPG_RECIPIENT: <GPG Recipient> 
             *  For more information, please refer to the Operator documentation.
             */
            encryptionKeySecretName?: pulumi.Input<string>;
            /**
             * If specified, it will be used as a schedule for creating a CronJob.
             */
            schedule?: pulumi.Input<string>;
        }

        /**
         * Selector for looking up Keycloak Custom Resources.
         */
        export interface KeycloakBackupSpecInstanceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.keycloak.v1alpha1.KeycloakBackupSpecInstanceSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface KeycloakBackupSpecInstanceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * KeycloakBackupStatus defines the observed state of KeycloakBackup.
         */
        export interface KeycloakBackupStatus {
            /**
             * Human-readable message indicating details about current operator phase or error.
             */
            message: pulumi.Input<string>;
            /**
             * Current phase of the operator.
             */
            phase: pulumi.Input<string>;
            /**
             * True if all resources are in a ready state and all work is done.
             */
            ready: pulumi.Input<boolean>;
            /**
             * A map of all the secondary resources types and names created for this CR. e.g "Deployment": [ "DeploymentName1", "DeploymentName2" ]
             */
            secondaryResources?: pulumi.Input<{[key: string]: pulumi.Input<pulumi.Input<string>[]>}>;
        }

        /**
         * KeycloakClientSpec defines the desired state of KeycloakClient.
         */
        export interface KeycloakClientSpec {
            /**
             * Keycloak Client REST object.
             */
            client: pulumi.Input<inputs.keycloak.v1alpha1.KeycloakClientSpecClient>;
            /**
             * Selector for looking up KeycloakRealm Custom Resources.
             */
            realmSelector: pulumi.Input<inputs.keycloak.v1alpha1.KeycloakClientSpecRealmSelector>;
        }

        /**
         * Keycloak Client REST object.
         */
        export interface KeycloakClientSpecClient {
            /**
             * Access options.
             */
            access?: pulumi.Input<{[key: string]: pulumi.Input<boolean>}>;
            /**
             * Application Admin URL.
             */
            adminUrl?: pulumi.Input<string>;
            /**
             * Client Attributes.
             */
            attributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Application base URL.
             */
            baseUrl?: pulumi.Input<string>;
            /**
             * True if a client supports only Bearer Tokens.
             */
            bearerOnly?: pulumi.Input<boolean>;
            /**
             * What Client authentication type to use.
             */
            clientAuthenticatorType?: pulumi.Input<string>;
            /**
             * Client ID.
             */
            clientId: pulumi.Input<string>;
            /**
             * True if Consent Screen is required.
             */
            consentRequired?: pulumi.Input<boolean>;
            /**
             * Default Client roles.
             */
            defaultRoles?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Client description.
             */
            description?: pulumi.Input<string>;
            /**
             * True if Direct Grant is enabled.
             */
            directAccessGrantsEnabled?: pulumi.Input<boolean>;
            /**
             * Client enabled flag.
             */
            enabled?: pulumi.Input<boolean>;
            /**
             * True if this client supports Front Channel logout.
             */
            frontchannelLogout?: pulumi.Input<boolean>;
            /**
             * True if Full Scope is allowed.
             */
            fullScopeAllowed?: pulumi.Input<boolean>;
            /**
             * Client ID. If not specified, automatically generated.
             */
            id?: pulumi.Input<string>;
            /**
             * True if Implicit flow is enabled.
             */
            implicitFlowEnabled?: pulumi.Input<boolean>;
            /**
             * Client name.
             */
            name?: pulumi.Input<string>;
            /**
             * Node registration timeout.
             */
            nodeReRegistrationTimeout?: pulumi.Input<number>;
            /**
             * Not Before setting.
             */
            notBefore?: pulumi.Input<number>;
            /**
             * Protocol used for this Client.
             */
            protocol?: pulumi.Input<string>;
            /**
             * Protocol Mappers.
             */
            protocolMappers?: pulumi.Input<pulumi.Input<inputs.keycloak.v1alpha1.KeycloakClientSpecClientProtocolMappers>[]>;
            /**
             * True if this is a public Client.
             */
            publicClient?: pulumi.Input<boolean>;
            /**
             * A list of valid Redirection URLs.
             */
            redirectUris?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Application root URL.
             */
            rootUrl?: pulumi.Input<string>;
            /**
             * Client Secret. The Operator will automatically create a Secret based on this value.
             */
            secret?: pulumi.Input<string>;
            /**
             * True if Service Accounts are enabled.
             */
            serviceAccountsEnabled?: pulumi.Input<boolean>;
            /**
             * True if Standard flow is enabled.
             */
            standardFlowEnabled?: pulumi.Input<boolean>;
            /**
             * Surrogate Authentication Required option.
             */
            surrogateAuthRequired?: pulumi.Input<boolean>;
            /**
             * True to use a Template Config.
             */
            useTemplateConfig?: pulumi.Input<boolean>;
            /**
             * True to use Template Mappers.
             */
            useTemplateMappers?: pulumi.Input<boolean>;
            /**
             * True to use Template Scope.
             */
            useTemplateScope?: pulumi.Input<boolean>;
            /**
             * A list of valid Web Origins.
             */
            webOrigins?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface KeycloakClientSpecClientProtocolMappers {
            /**
             * Config options.
             */
            config?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * True if Consent Screen is required.
             */
            consentRequired?: pulumi.Input<boolean>;
            /**
             * Text to use for displaying Consent Screen.
             */
            consentText?: pulumi.Input<string>;
            /**
             * Protocol Mapper ID.
             */
            id?: pulumi.Input<string>;
            /**
             * Protocol Mapper Name.
             */
            name?: pulumi.Input<string>;
            /**
             * Protocol to use.
             */
            protocol?: pulumi.Input<string>;
            /**
             * Protocol Mapper to use
             */
            protocolMapper?: pulumi.Input<string>;
        }

        /**
         * Selector for looking up KeycloakRealm Custom Resources.
         */
        export interface KeycloakClientSpecRealmSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.keycloak.v1alpha1.KeycloakClientSpecRealmSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface KeycloakClientSpecRealmSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * KeycloakClientStatus defines the observed state of KeycloakClient
         */
        export interface KeycloakClientStatus {
            /**
             * Human-readable message indicating details about current operator phase or error.
             */
            message: pulumi.Input<string>;
            /**
             * Current phase of the operator.
             */
            phase: pulumi.Input<string>;
            /**
             * True if all resources are in a ready state and all work is done.
             */
            ready: pulumi.Input<boolean>;
            /**
             * A map of all the secondary resources types and names created for this CR. e.g "Deployment": [ "DeploymentName1", "DeploymentName2" ]
             */
            secondaryResources?: pulumi.Input<{[key: string]: pulumi.Input<pulumi.Input<string>[]>}>;
        }

        /**
         * KeycloakRealmSpec defines the desired state of KeycloakRealm.
         */
        export interface KeycloakRealmSpec {
            /**
             * Selector for looking up Keycloak Custom Resources.
             */
            instanceSelector?: pulumi.Input<inputs.keycloak.v1alpha1.KeycloakRealmSpecInstanceSelector>;
            /**
             * Keycloak Realm REST object.
             */
            realm: pulumi.Input<inputs.keycloak.v1alpha1.KeycloakRealmSpecRealm>;
            /**
             * A list of overrides to the default Realm behavior.
             */
            realmOverrides?: pulumi.Input<pulumi.Input<inputs.keycloak.v1alpha1.KeycloakRealmSpecRealmOverrides>[]>;
        }

        /**
         * Selector for looking up Keycloak Custom Resources.
         */
        export interface KeycloakRealmSpecInstanceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.keycloak.v1alpha1.KeycloakRealmSpecInstanceSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface KeycloakRealmSpecInstanceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Keycloak Realm REST object.
         */
        export interface KeycloakRealmSpecRealm {
            /**
             * Enable admin events details TODO: change to values and use kubebuilder default annotation once supported
             */
            adminEventsDetailsEnabled?: pulumi.Input<boolean>;
            /**
             * Enable events recording TODO: change to values and use kubebuilder default annotation once supported
             */
            adminEventsEnabled?: pulumi.Input<boolean>;
            /**
             * A set of Keycloak Clients.
             */
            clients?: pulumi.Input<pulumi.Input<inputs.keycloak.v1alpha1.KeycloakRealmSpecRealmClients>[]>;
            /**
             * Realm display name.
             */
            displayName?: pulumi.Input<string>;
            /**
             * Realm enabled flag.
             */
            enabled?: pulumi.Input<boolean>;
            /**
             * Enable events recording TODO: change to values and use kubebuilder default annotation once supported
             */
            eventsEnabled?: pulumi.Input<boolean>;
            /**
             * A set of Event Listeners.
             */
            eventsListeners?: pulumi.Input<pulumi.Input<string>[]>;
            id?: pulumi.Input<string>;
            /**
             * A set of Identity Providers.
             */
            identityProviders?: pulumi.Input<pulumi.Input<inputs.keycloak.v1alpha1.KeycloakRealmSpecRealmIdentityProviders>[]>;
            /**
             * Realm name.
             */
            realm: pulumi.Input<string>;
            /**
             * A set of Keycloak Users.
             */
            users?: pulumi.Input<pulumi.Input<inputs.keycloak.v1alpha1.KeycloakRealmSpecRealmUsers>[]>;
        }

        export interface KeycloakRealmSpecRealmClients {
            /**
             * Access options.
             */
            access?: pulumi.Input<{[key: string]: pulumi.Input<boolean>}>;
            /**
             * Application Admin URL.
             */
            adminUrl?: pulumi.Input<string>;
            /**
             * Client Attributes.
             */
            attributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Application base URL.
             */
            baseUrl?: pulumi.Input<string>;
            /**
             * True if a client supports only Bearer Tokens.
             */
            bearerOnly?: pulumi.Input<boolean>;
            /**
             * What Client authentication type to use.
             */
            clientAuthenticatorType?: pulumi.Input<string>;
            /**
             * Client ID.
             */
            clientId: pulumi.Input<string>;
            /**
             * True if Consent Screen is required.
             */
            consentRequired?: pulumi.Input<boolean>;
            /**
             * Default Client roles.
             */
            defaultRoles?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Client description.
             */
            description?: pulumi.Input<string>;
            /**
             * True if Direct Grant is enabled.
             */
            directAccessGrantsEnabled?: pulumi.Input<boolean>;
            /**
             * Client enabled flag.
             */
            enabled?: pulumi.Input<boolean>;
            /**
             * True if this client supports Front Channel logout.
             */
            frontchannelLogout?: pulumi.Input<boolean>;
            /**
             * True if Full Scope is allowed.
             */
            fullScopeAllowed?: pulumi.Input<boolean>;
            /**
             * Client ID. If not specified, automatically generated.
             */
            id?: pulumi.Input<string>;
            /**
             * True if Implicit flow is enabled.
             */
            implicitFlowEnabled?: pulumi.Input<boolean>;
            /**
             * Client name.
             */
            name?: pulumi.Input<string>;
            /**
             * Node registration timeout.
             */
            nodeReRegistrationTimeout?: pulumi.Input<number>;
            /**
             * Not Before setting.
             */
            notBefore?: pulumi.Input<number>;
            /**
             * Protocol used for this Client.
             */
            protocol?: pulumi.Input<string>;
            /**
             * Protocol Mappers.
             */
            protocolMappers?: pulumi.Input<pulumi.Input<inputs.keycloak.v1alpha1.KeycloakRealmSpecRealmClientsProtocolMappers>[]>;
            /**
             * True if this is a public Client.
             */
            publicClient?: pulumi.Input<boolean>;
            /**
             * A list of valid Redirection URLs.
             */
            redirectUris?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Application root URL.
             */
            rootUrl?: pulumi.Input<string>;
            /**
             * Client Secret. The Operator will automatically create a Secret based on this value.
             */
            secret?: pulumi.Input<string>;
            /**
             * True if Service Accounts are enabled.
             */
            serviceAccountsEnabled?: pulumi.Input<boolean>;
            /**
             * True if Standard flow is enabled.
             */
            standardFlowEnabled?: pulumi.Input<boolean>;
            /**
             * Surrogate Authentication Required option.
             */
            surrogateAuthRequired?: pulumi.Input<boolean>;
            /**
             * True to use a Template Config.
             */
            useTemplateConfig?: pulumi.Input<boolean>;
            /**
             * True to use Template Mappers.
             */
            useTemplateMappers?: pulumi.Input<boolean>;
            /**
             * True to use Template Scope.
             */
            useTemplateScope?: pulumi.Input<boolean>;
            /**
             * A list of valid Web Origins.
             */
            webOrigins?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface KeycloakRealmSpecRealmClientsProtocolMappers {
            /**
             * Config options.
             */
            config?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * True if Consent Screen is required.
             */
            consentRequired?: pulumi.Input<boolean>;
            /**
             * Text to use for displaying Consent Screen.
             */
            consentText?: pulumi.Input<string>;
            /**
             * Protocol Mapper ID.
             */
            id?: pulumi.Input<string>;
            /**
             * Protocol Mapper Name.
             */
            name?: pulumi.Input<string>;
            /**
             * Protocol to use.
             */
            protocol?: pulumi.Input<string>;
            /**
             * Protocol Mapper to use
             */
            protocolMapper?: pulumi.Input<string>;
        }

        export interface KeycloakRealmSpecRealmIdentityProviders {
            /**
             * Adds Read Token role when creating this Identity Provider.
             */
            addReadTokenRoleOnCreate?: pulumi.Input<boolean>;
            /**
             * Identity Provider Alias.
             */
            alias?: pulumi.Input<string>;
            /**
             * Identity Provider config.
             */
            config?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Identity Provider Display Name.
             */
            displayName?: pulumi.Input<string>;
            /**
             * Identity Provider enabled flag.
             */
            enabled?: pulumi.Input<boolean>;
            /**
             * Identity Provider First Broker Login Flow Alias.
             */
            firstBrokerLoginFlowAlias?: pulumi.Input<string>;
            /**
             * Identity Provider Internal ID.
             */
            internalId?: pulumi.Input<string>;
            /**
             * Identity Provider Link Only setting.
             */
            linkOnly?: pulumi.Input<boolean>;
            /**
             * Identity Provider Post Broker Login Flow Alias.
             */
            postBrokerLoginFlowAlias?: pulumi.Input<string>;
            /**
             * Identity Provider ID.
             */
            providerId?: pulumi.Input<string>;
            /**
             * Identity Provider Store to Token.
             */
            storeToken?: pulumi.Input<boolean>;
            /**
             * Identity Provider Trust Email.
             */
            trustEmail?: pulumi.Input<boolean>;
        }

        export interface KeycloakRealmSpecRealmOverrides {
            /**
             * Flow to be overridden.
             */
            forFlow?: pulumi.Input<string>;
            /**
             * Identity Provider to be overridden.
             */
            identityProvider?: pulumi.Input<string>;
        }

        export interface KeycloakRealmSpecRealmUsers {
            /**
             * A set of Attributes.
             */
            attributes?: pulumi.Input<{[key: string]: pulumi.Input<pulumi.Input<string>[]>}>;
            /**
             * A set of Client Roles.
             */
            clientRoles?: pulumi.Input<{[key: string]: pulumi.Input<pulumi.Input<string>[]>}>;
            /**
             * A set of Credentials.
             */
            credentials?: pulumi.Input<pulumi.Input<inputs.keycloak.v1alpha1.KeycloakRealmSpecRealmUsersCredentials>[]>;
            /**
             * Email.
             */
            email?: pulumi.Input<string>;
            /**
             * True if email has already been verified.
             */
            emailVerified?: pulumi.Input<boolean>;
            /**
             * User enabled flag.
             */
            enabled?: pulumi.Input<boolean>;
            /**
             * A set of Federated Identities.
             */
            federatedIdentities?: pulumi.Input<pulumi.Input<inputs.keycloak.v1alpha1.KeycloakRealmSpecRealmUsersFederatedIdentities>[]>;
            /**
             * First Name.
             */
            firstName?: pulumi.Input<string>;
            /**
             * A set of Groups.
             */
            groups?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * User ID.
             */
            id?: pulumi.Input<string>;
            /**
             * Last Name.
             */
            lastName?: pulumi.Input<string>;
            /**
             * A set of Realm Roles.
             */
            realmRoles?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * A set of Required Actions.
             */
            requiredActions?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * User Name.
             */
            username?: pulumi.Input<string>;
        }

        export interface KeycloakRealmSpecRealmUsersCredentials {
            /**
             * True if this credential object is temporary.
             */
            temporary?: pulumi.Input<boolean>;
            /**
             * Credential Type.
             */
            type?: pulumi.Input<string>;
            /**
             * Credential Value.
             */
            value?: pulumi.Input<string>;
        }

        export interface KeycloakRealmSpecRealmUsersFederatedIdentities {
            /**
             * Federated Identity Provider.
             */
            identityProvider?: pulumi.Input<string>;
            /**
             * Federated Identity User ID.
             */
            userId?: pulumi.Input<string>;
            /**
             * Federated Identity User Name.
             */
            userName?: pulumi.Input<string>;
        }

        /**
         * KeycloakRealmStatus defines the observed state of KeycloakRealm
         */
        export interface KeycloakRealmStatus {
            /**
             * TODO
             */
            loginURL: pulumi.Input<string>;
            /**
             * Human-readable message indicating details about current operator phase or error.
             */
            message: pulumi.Input<string>;
            /**
             * Current phase of the operator.
             */
            phase: pulumi.Input<string>;
            /**
             * True if all resources are in a ready state and all work is done.
             */
            ready: pulumi.Input<boolean>;
            /**
             * A map of all the secondary resources types and names created for this CR. e.g "Deployment": [ "DeploymentName1", "DeploymentName2" ]
             */
            secondaryResources?: pulumi.Input<{[key: string]: pulumi.Input<pulumi.Input<string>[]>}>;
        }

        /**
         * KeycloakSpec defines the desired state of Keycloak.
         */
        export interface KeycloakSpec {
            /**
             * A list of extensions, where each one is a URL to a JAR files that will be deployed in Keycloak.
             */
            extensions?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Controls external Ingress/Route settings.
             */
            externalAccess?: pulumi.Input<inputs.keycloak.v1alpha1.KeycloakSpecExternalAccess>;
            /**
             * Controls external database settings. Using an external database requires providing a secret containing credentials as well as connection details. Here's an example of such secret: 
             *      apiVersion: v1     kind: Secret     metadata:         name: keycloak-db-secret         namespace: keycloak     stringData:         POSTGRES_DATABASE: <Database Name>         POSTGRES_EXTERNAL_ADDRESS: <External Database IP or URL (resolvable by K8s)>         POSTGRES_EXTERNAL_PORT: <External Database Port>         # Strongly recommended to use <'Keycloak CR Name'-postgresql>         POSTGRES_HOST: <Database Service Name>         POSTGRES_PASSWORD: <Database Password>         # Required for AWS Backup functionality         POSTGRES_SUPERUSER: true         POSTGRES_USERNAME: <Database Username>      type: Opaque 
             *  Both POSTGRES_EXTERNAL_ADDRESS and POSTGRES_EXTERNAL_PORT are specifically required for creating connection to the external database. The secret name is created using the following convention:       <Custom Resource Name>-db-secret 
             *  For more information, please refer to the Operator documentation.
             */
            externalDatabase?: pulumi.Input<inputs.keycloak.v1alpha1.KeycloakSpecExternalDatabase>;
            /**
             * Number of Keycloak instances in HA mode. Default is 1.
             */
            instances?: pulumi.Input<number>;
            /**
             * Resources (Requests and Limits) for KeycloakDeployment.
             */
            keycloakDeploymentSpec?: pulumi.Input<inputs.keycloak.v1alpha1.KeycloakSpecKeycloakDeploymentSpec>;
            /**
             * Specify Migration configuration
             */
            migration?: pulumi.Input<inputs.keycloak.v1alpha1.KeycloakSpecMigration>;
            /**
             * Specify PodDisruptionBudget configuration.
             */
            podDisruptionBudget?: pulumi.Input<inputs.keycloak.v1alpha1.KeycloakSpecPodDisruptionBudget>;
            /**
             * Resources (Requests and Limits) for PostgresDeployment.
             */
            postgresDeploymentSpec?: pulumi.Input<inputs.keycloak.v1alpha1.KeycloakSpecPostgresDeploymentSpec>;
            /**
             * Profile used for controlling Operator behavior. Default is empty.
             */
            profile?: pulumi.Input<string>;
            /**
             * Name of the StorageClass for Postgresql Persistent Volume Claim
             */
            storageClassName?: pulumi.Input<string>;
        }

        /**
         * Controls external Ingress/Route settings.
         */
        export interface KeycloakSpecExternalAccess {
            /**
             * If set to true, the Operator will create an Ingress or a Route pointing to Keycloak.
             */
            enabled?: pulumi.Input<boolean>;
            /**
             * TLS Termination type for the external access. Setting this field to "reencrypt" will terminate TLS on the Ingress/Route level. Setting this field to "passthrough" will send encrypted traffic to the Pod. If unspecified, defaults to "reencrypt". Note, that this setting has no effect on Ingress as Ingress TLS settings are not reconciled by this operator. In other words, Ingress TLS configuration is the same in both cases and it is up to the user to configure TLS section of the Ingress.
             */
            tlsTermination?: pulumi.Input<string>;
        }

        /**
         * Controls external database settings. Using an external database requires providing a secret containing credentials as well as connection details. Here's an example of such secret: 
         *      apiVersion: v1     kind: Secret     metadata:         name: keycloak-db-secret         namespace: keycloak     stringData:         POSTGRES_DATABASE: <Database Name>         POSTGRES_EXTERNAL_ADDRESS: <External Database IP or URL (resolvable by K8s)>         POSTGRES_EXTERNAL_PORT: <External Database Port>         # Strongly recommended to use <'Keycloak CR Name'-postgresql>         POSTGRES_HOST: <Database Service Name>         POSTGRES_PASSWORD: <Database Password>         # Required for AWS Backup functionality         POSTGRES_SUPERUSER: true         POSTGRES_USERNAME: <Database Username>      type: Opaque 
         *  Both POSTGRES_EXTERNAL_ADDRESS and POSTGRES_EXTERNAL_PORT are specifically required for creating connection to the external database. The secret name is created using the following convention:       <Custom Resource Name>-db-secret 
         *  For more information, please refer to the Operator documentation.
         */
        export interface KeycloakSpecExternalDatabase {
            /**
             * If set to true, the Operator will use an external database. pointing to Keycloak.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Resources (Requests and Limits) for KeycloakDeployment.
         */
        export interface KeycloakSpecKeycloakDeploymentSpec {
            /**
             * Resources (Requests and Limits) for the Pods.
             */
            resources?: pulumi.Input<inputs.keycloak.v1alpha1.KeycloakSpecKeycloakDeploymentSpecResources>;
        }

        /**
         * Resources (Requests and Limits) for the Pods.
         */
        export interface KeycloakSpecKeycloakDeploymentSpecResources {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Specify Migration configuration
         */
        export interface KeycloakSpecMigration {
            /**
             * Set it to config backup policy for migration
             */
            backups?: pulumi.Input<inputs.keycloak.v1alpha1.KeycloakSpecMigrationBackups>;
        }

        /**
         * Set it to config backup policy for migration
         */
        export interface KeycloakSpecMigrationBackups {
            /**
             * If set to true, the operator will do database backup before doing migration
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Specify PodDisruptionBudget configuration.
         */
        export interface KeycloakSpecPodDisruptionBudget {
            /**
             * If set to true, the operator will create a PodDistruptionBudget for the Keycloak deployment and set its `maxUnavailable` value to 1.
             */
            enabled?: pulumi.Input<boolean>;
        }

        /**
         * Resources (Requests and Limits) for PostgresDeployment.
         */
        export interface KeycloakSpecPostgresDeploymentSpec {
            /**
             * Resources (Requests and Limits) for the Pods.
             */
            resources?: pulumi.Input<inputs.keycloak.v1alpha1.KeycloakSpecPostgresDeploymentSpecResources>;
        }

        /**
         * Resources (Requests and Limits) for the Pods.
         */
        export interface KeycloakSpecPostgresDeploymentSpecResources {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * KeycloakStatus defines the observed state of Keycloak.
         */
        export interface KeycloakStatus {
            /**
             * The secret where the admin credentials are to be found.
             */
            credentialSecret: pulumi.Input<string>;
            /**
             * Service IP and Port for in-cluster access to the keycloak instance.
             */
            internalURL: pulumi.Input<string>;
            /**
             * Human-readable message indicating details about current operator phase or error.
             */
            message: pulumi.Input<string>;
            /**
             * Current phase of the operator.
             */
            phase: pulumi.Input<string>;
            /**
             * True if all resources are in a ready state and all work is done.
             */
            ready: pulumi.Input<boolean>;
            /**
             * A map of all the secondary resources types and names created for this CR. e.g "Deployment": [ "DeploymentName1", "DeploymentName2" ].
             */
            secondaryResources?: pulumi.Input<{[key: string]: pulumi.Input<pulumi.Input<string>[]>}>;
            /**
             * Version of Keycloak or RHSSO running on the cluster.
             */
            version: pulumi.Input<string>;
        }

        /**
         * KeycloakUserSpec defines the desired state of KeycloakUser.
         */
        export interface KeycloakUserSpec {
            /**
             * Selector for looking up KeycloakRealm Custom Resources.
             */
            realmSelector?: pulumi.Input<inputs.keycloak.v1alpha1.KeycloakUserSpecRealmSelector>;
            /**
             * Keycloak User REST object.
             */
            user: pulumi.Input<inputs.keycloak.v1alpha1.KeycloakUserSpecUser>;
        }

        /**
         * Selector for looking up KeycloakRealm Custom Resources.
         */
        export interface KeycloakUserSpecRealmSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.keycloak.v1alpha1.KeycloakUserSpecRealmSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface KeycloakUserSpecRealmSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Keycloak User REST object.
         */
        export interface KeycloakUserSpecUser {
            /**
             * A set of Attributes.
             */
            attributes?: pulumi.Input<{[key: string]: pulumi.Input<pulumi.Input<string>[]>}>;
            /**
             * A set of Client Roles.
             */
            clientRoles?: pulumi.Input<{[key: string]: pulumi.Input<pulumi.Input<string>[]>}>;
            /**
             * A set of Credentials.
             */
            credentials?: pulumi.Input<pulumi.Input<inputs.keycloak.v1alpha1.KeycloakUserSpecUserCredentials>[]>;
            /**
             * Email.
             */
            email?: pulumi.Input<string>;
            /**
             * True if email has already been verified.
             */
            emailVerified?: pulumi.Input<boolean>;
            /**
             * User enabled flag.
             */
            enabled?: pulumi.Input<boolean>;
            /**
             * A set of Federated Identities.
             */
            federatedIdentities?: pulumi.Input<pulumi.Input<inputs.keycloak.v1alpha1.KeycloakUserSpecUserFederatedIdentities>[]>;
            /**
             * First Name.
             */
            firstName?: pulumi.Input<string>;
            /**
             * A set of Groups.
             */
            groups?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * User ID.
             */
            id?: pulumi.Input<string>;
            /**
             * Last Name.
             */
            lastName?: pulumi.Input<string>;
            /**
             * A set of Realm Roles.
             */
            realmRoles?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * A set of Required Actions.
             */
            requiredActions?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * User Name.
             */
            username?: pulumi.Input<string>;
        }

        export interface KeycloakUserSpecUserCredentials {
            /**
             * True if this credential object is temporary.
             */
            temporary?: pulumi.Input<boolean>;
            /**
             * Credential Type.
             */
            type?: pulumi.Input<string>;
            /**
             * Credential Value.
             */
            value?: pulumi.Input<string>;
        }

        export interface KeycloakUserSpecUserFederatedIdentities {
            /**
             * Federated Identity Provider.
             */
            identityProvider?: pulumi.Input<string>;
            /**
             * Federated Identity User ID.
             */
            userId?: pulumi.Input<string>;
            /**
             * Federated Identity User Name.
             */
            userName?: pulumi.Input<string>;
        }

        /**
         * KeycloakUserStatus defines the observed state of KeycloakUser.
         */
        export interface KeycloakUserStatus {
            /**
             * Human-readable message indicating details about current operator phase or error.
             */
            message: pulumi.Input<string>;
            /**
             * Current phase of the operator.
             */
            phase: pulumi.Input<string>;
        }
    }
}

# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'KeycloakBackupSpecArgs',
    'KeycloakBackupSpecAwsArgs',
    'KeycloakBackupSpecInstanceSelectorArgs',
    'KeycloakBackupSpecInstanceSelectorMatchExpressionsArgs',
    'KeycloakBackupStatusArgs',
    'KeycloakClientSpecArgs',
    'KeycloakClientSpecClientArgs',
    'KeycloakClientSpecClientProtocolMappersArgs',
    'KeycloakClientSpecRealmSelectorArgs',
    'KeycloakClientSpecRealmSelectorMatchExpressionsArgs',
    'KeycloakClientStatusArgs',
    'KeycloakRealmSpecArgs',
    'KeycloakRealmSpecInstanceSelectorArgs',
    'KeycloakRealmSpecInstanceSelectorMatchExpressionsArgs',
    'KeycloakRealmSpecRealmArgs',
    'KeycloakRealmSpecRealmClientsArgs',
    'KeycloakRealmSpecRealmClientsProtocolMappersArgs',
    'KeycloakRealmSpecRealmIdentityProvidersArgs',
    'KeycloakRealmSpecRealmOverridesArgs',
    'KeycloakRealmSpecRealmUsersArgs',
    'KeycloakRealmSpecRealmUsersCredentialsArgs',
    'KeycloakRealmSpecRealmUsersFederatedIdentitiesArgs',
    'KeycloakRealmStatusArgs',
    'KeycloakSpecArgs',
    'KeycloakSpecExternalAccessArgs',
    'KeycloakSpecExternalDatabaseArgs',
    'KeycloakSpecKeycloakDeploymentSpecArgs',
    'KeycloakSpecKeycloakDeploymentSpecResourcesArgs',
    'KeycloakSpecMigrationArgs',
    'KeycloakSpecMigrationBackupsArgs',
    'KeycloakSpecPodDisruptionBudgetArgs',
    'KeycloakSpecPostgresDeploymentSpecArgs',
    'KeycloakSpecPostgresDeploymentSpecResourcesArgs',
    'KeycloakStatusArgs',
    'KeycloakUserSpecArgs',
    'KeycloakUserSpecRealmSelectorArgs',
    'KeycloakUserSpecRealmSelectorMatchExpressionsArgs',
    'KeycloakUserSpecUserArgs',
    'KeycloakUserSpecUserCredentialsArgs',
    'KeycloakUserSpecUserFederatedIdentitiesArgs',
    'KeycloakUserStatusArgs',
]

@pulumi.input_type
class KeycloakBackupSpecArgs:
    def __init__(__self__, *,
                 aws: Optional[pulumi.Input['KeycloakBackupSpecAwsArgs']] = None,
                 instance_selector: Optional[pulumi.Input['KeycloakBackupSpecInstanceSelectorArgs']] = None,
                 restore: Optional[pulumi.Input[bool]] = None,
                 storage_class_name: Optional[pulumi.Input[str]] = None):
        """
        KeycloakBackupSpec defines the desired state of KeycloakBackup.
        :param pulumi.Input['KeycloakBackupSpecAwsArgs'] aws: If provided, an automatic database backup will be created on AWS S3 instead of a local Persistent Volume. If this property is not provided - a local Persistent Volume backup will be chosen.
        :param pulumi.Input['KeycloakBackupSpecInstanceSelectorArgs'] instance_selector: Selector for looking up Keycloak Custom Resources.
        :param pulumi.Input[bool] restore: Controls automatic restore behavior. Currently not implemented. 
                In the future this will be used to trigger automatic restore for a given KeycloakBackup. Each backup will correspond to a single snapshot of the database (stored either in a Persistent Volume or AWS). If a user wants to restore it, all he/she needs to do is to change this flag to true. Potentially, it will be possible to restore a single backup multiple times.
        :param pulumi.Input[str] storage_class_name: Name of the StorageClass for Postgresql Backup Persistent Volume Claim
        """
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if instance_selector is not None:
            pulumi.set(__self__, "instance_selector", instance_selector)
        if restore is not None:
            pulumi.set(__self__, "restore", restore)
        if storage_class_name is not None:
            pulumi.set(__self__, "storage_class_name", storage_class_name)

    @property
    @pulumi.getter
    def aws(self) -> Optional[pulumi.Input['KeycloakBackupSpecAwsArgs']]:
        """
        If provided, an automatic database backup will be created on AWS S3 instead of a local Persistent Volume. If this property is not provided - a local Persistent Volume backup will be chosen.
        """
        return pulumi.get(self, "aws")

    @aws.setter
    def aws(self, value: Optional[pulumi.Input['KeycloakBackupSpecAwsArgs']]):
        pulumi.set(self, "aws", value)

    @property
    @pulumi.getter(name="instanceSelector")
    def instance_selector(self) -> Optional[pulumi.Input['KeycloakBackupSpecInstanceSelectorArgs']]:
        """
        Selector for looking up Keycloak Custom Resources.
        """
        return pulumi.get(self, "instance_selector")

    @instance_selector.setter
    def instance_selector(self, value: Optional[pulumi.Input['KeycloakBackupSpecInstanceSelectorArgs']]):
        pulumi.set(self, "instance_selector", value)

    @property
    @pulumi.getter
    def restore(self) -> Optional[pulumi.Input[bool]]:
        """
        Controls automatic restore behavior. Currently not implemented. 
         In the future this will be used to trigger automatic restore for a given KeycloakBackup. Each backup will correspond to a single snapshot of the database (stored either in a Persistent Volume or AWS). If a user wants to restore it, all he/she needs to do is to change this flag to true. Potentially, it will be possible to restore a single backup multiple times.
        """
        return pulumi.get(self, "restore")

    @restore.setter
    def restore(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "restore", value)

    @property
    @pulumi.getter(name="storageClassName")
    def storage_class_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the StorageClass for Postgresql Backup Persistent Volume Claim
        """
        return pulumi.get(self, "storage_class_name")

    @storage_class_name.setter
    def storage_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_class_name", value)


@pulumi.input_type
class KeycloakBackupSpecAwsArgs:
    def __init__(__self__, *,
                 credentials_secret_name: Optional[pulumi.Input[str]] = None,
                 encryption_key_secret_name: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input[str]] = None):
        """
        If provided, an automatic database backup will be created on AWS S3 instead of a local Persistent Volume. If this property is not provided - a local Persistent Volume backup will be chosen.
        :param pulumi.Input[str] credentials_secret_name: Provides a secret name used for connecting to AWS S3 Service. The secret needs to be in the following form: 
                    apiVersion: v1     kind: Secret     metadata:       name: <Secret name>     type: Opaque     stringData:       AWS_S3_BUCKET_NAME: <S3 Bucket Name>       AWS_ACCESS_KEY_ID: <AWS Access Key ID>       AWS_SECRET_ACCESS_KEY: <AWS Secret Key> 
                For more information, please refer to the Operator documentation.
        :param pulumi.Input[str] encryption_key_secret_name: If provided, the database backup will be encrypted. Provides a secret name used for encrypting database data. The secret needs to be in the following form: 
                    apiVersion: v1     kind: Secret     metadata:       name: <Secret name>     type: Opaque     stringData:       GPG_PUBLIC_KEY: <GPG Public Key>       GPG_TRUST_MODEL: <GPG Trust Model>       GPG_RECIPIENT: <GPG Recipient> 
                For more information, please refer to the Operator documentation.
        :param pulumi.Input[str] schedule: If specified, it will be used as a schedule for creating a CronJob.
        """
        if credentials_secret_name is not None:
            pulumi.set(__self__, "credentials_secret_name", credentials_secret_name)
        if encryption_key_secret_name is not None:
            pulumi.set(__self__, "encryption_key_secret_name", encryption_key_secret_name)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)

    @property
    @pulumi.getter(name="credentialsSecretName")
    def credentials_secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        Provides a secret name used for connecting to AWS S3 Service. The secret needs to be in the following form: 
             apiVersion: v1     kind: Secret     metadata:       name: <Secret name>     type: Opaque     stringData:       AWS_S3_BUCKET_NAME: <S3 Bucket Name>       AWS_ACCESS_KEY_ID: <AWS Access Key ID>       AWS_SECRET_ACCESS_KEY: <AWS Secret Key> 
         For more information, please refer to the Operator documentation.
        """
        return pulumi.get(self, "credentials_secret_name")

    @credentials_secret_name.setter
    def credentials_secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credentials_secret_name", value)

    @property
    @pulumi.getter(name="encryptionKeySecretName")
    def encryption_key_secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        If provided, the database backup will be encrypted. Provides a secret name used for encrypting database data. The secret needs to be in the following form: 
             apiVersion: v1     kind: Secret     metadata:       name: <Secret name>     type: Opaque     stringData:       GPG_PUBLIC_KEY: <GPG Public Key>       GPG_TRUST_MODEL: <GPG Trust Model>       GPG_RECIPIENT: <GPG Recipient> 
         For more information, please refer to the Operator documentation.
        """
        return pulumi.get(self, "encryption_key_secret_name")

    @encryption_key_secret_name.setter
    def encryption_key_secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption_key_secret_name", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, it will be used as a schedule for creating a CronJob.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule", value)


@pulumi.input_type
class KeycloakBackupSpecInstanceSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['KeycloakBackupSpecInstanceSelectorMatchExpressionsArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Selector for looking up Keycloak Custom Resources.
        :param pulumi.Input[Sequence[pulumi.Input['KeycloakBackupSpecInstanceSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KeycloakBackupSpecInstanceSelectorMatchExpressionsArgs']]]]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KeycloakBackupSpecInstanceSelectorMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class KeycloakBackupSpecInstanceSelectorMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class KeycloakBackupStatusArgs:
    def __init__(__self__, *,
                 message: pulumi.Input[str],
                 phase: pulumi.Input[str],
                 ready: pulumi.Input[bool],
                 secondary_resources: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None):
        """
        KeycloakBackupStatus defines the observed state of KeycloakBackup.
        :param pulumi.Input[str] message: Human-readable message indicating details about current operator phase or error.
        :param pulumi.Input[str] phase: Current phase of the operator.
        :param pulumi.Input[bool] ready: True if all resources are in a ready state and all work is done.
        :param pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]] secondary_resources: A map of all the secondary resources types and names created for this CR. e.g "Deployment": [ "DeploymentName1", "DeploymentName2" ]
        """
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "phase", phase)
        pulumi.set(__self__, "ready", ready)
        if secondary_resources is not None:
            pulumi.set(__self__, "secondary_resources", secondary_resources)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input[str]:
        """
        Human-readable message indicating details about current operator phase or error.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input[str]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def phase(self) -> pulumi.Input[str]:
        """
        Current phase of the operator.
        """
        return pulumi.get(self, "phase")

    @phase.setter
    def phase(self, value: pulumi.Input[str]):
        pulumi.set(self, "phase", value)

    @property
    @pulumi.getter
    def ready(self) -> pulumi.Input[bool]:
        """
        True if all resources are in a ready state and all work is done.
        """
        return pulumi.get(self, "ready")

    @ready.setter
    def ready(self, value: pulumi.Input[bool]):
        pulumi.set(self, "ready", value)

    @property
    @pulumi.getter(name="secondaryResources")
    def secondary_resources(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]:
        """
        A map of all the secondary resources types and names created for this CR. e.g "Deployment": [ "DeploymentName1", "DeploymentName2" ]
        """
        return pulumi.get(self, "secondary_resources")

    @secondary_resources.setter
    def secondary_resources(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]):
        pulumi.set(self, "secondary_resources", value)


@pulumi.input_type
class KeycloakClientSpecArgs:
    def __init__(__self__, *,
                 client: pulumi.Input['KeycloakClientSpecClientArgs'],
                 realm_selector: pulumi.Input['KeycloakClientSpecRealmSelectorArgs']):
        """
        KeycloakClientSpec defines the desired state of KeycloakClient.
        :param pulumi.Input['KeycloakClientSpecClientArgs'] client: Keycloak Client REST object.
        :param pulumi.Input['KeycloakClientSpecRealmSelectorArgs'] realm_selector: Selector for looking up KeycloakRealm Custom Resources.
        """
        pulumi.set(__self__, "client", client)
        pulumi.set(__self__, "realm_selector", realm_selector)

    @property
    @pulumi.getter
    def client(self) -> pulumi.Input['KeycloakClientSpecClientArgs']:
        """
        Keycloak Client REST object.
        """
        return pulumi.get(self, "client")

    @client.setter
    def client(self, value: pulumi.Input['KeycloakClientSpecClientArgs']):
        pulumi.set(self, "client", value)

    @property
    @pulumi.getter(name="realmSelector")
    def realm_selector(self) -> pulumi.Input['KeycloakClientSpecRealmSelectorArgs']:
        """
        Selector for looking up KeycloakRealm Custom Resources.
        """
        return pulumi.get(self, "realm_selector")

    @realm_selector.setter
    def realm_selector(self, value: pulumi.Input['KeycloakClientSpecRealmSelectorArgs']):
        pulumi.set(self, "realm_selector", value)


@pulumi.input_type
class KeycloakClientSpecClientArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 access: Optional[pulumi.Input[Mapping[str, pulumi.Input[bool]]]] = None,
                 admin_url: Optional[pulumi.Input[str]] = None,
                 attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 base_url: Optional[pulumi.Input[str]] = None,
                 bearer_only: Optional[pulumi.Input[bool]] = None,
                 client_authenticator_type: Optional[pulumi.Input[str]] = None,
                 consent_required: Optional[pulumi.Input[bool]] = None,
                 default_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 direct_access_grants_enabled: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 frontchannel_logout: Optional[pulumi.Input[bool]] = None,
                 full_scope_allowed: Optional[pulumi.Input[bool]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 implicit_flow_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_re_registration_timeout: Optional[pulumi.Input[int]] = None,
                 not_before: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 protocol_mappers: Optional[pulumi.Input[Sequence[pulumi.Input['KeycloakClientSpecClientProtocolMappersArgs']]]] = None,
                 public_client: Optional[pulumi.Input[bool]] = None,
                 redirect_uris: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 root_url: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 service_accounts_enabled: Optional[pulumi.Input[bool]] = None,
                 standard_flow_enabled: Optional[pulumi.Input[bool]] = None,
                 surrogate_auth_required: Optional[pulumi.Input[bool]] = None,
                 use_template_config: Optional[pulumi.Input[bool]] = None,
                 use_template_mappers: Optional[pulumi.Input[bool]] = None,
                 use_template_scope: Optional[pulumi.Input[bool]] = None,
                 web_origins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Keycloak Client REST object.
        :param pulumi.Input[str] client_id: Client ID.
        :param pulumi.Input[Mapping[str, pulumi.Input[bool]]] access: Access options.
        :param pulumi.Input[str] admin_url: Application Admin URL.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] attributes: Client Attributes.
        :param pulumi.Input[str] base_url: Application base URL.
        :param pulumi.Input[bool] bearer_only: True if a client supports only Bearer Tokens.
        :param pulumi.Input[str] client_authenticator_type: What Client authentication type to use.
        :param pulumi.Input[bool] consent_required: True if Consent Screen is required.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] default_roles: Default Client roles.
        :param pulumi.Input[str] description: Client description.
        :param pulumi.Input[bool] direct_access_grants_enabled: True if Direct Grant is enabled.
        :param pulumi.Input[bool] enabled: Client enabled flag.
        :param pulumi.Input[bool] frontchannel_logout: True if this client supports Front Channel logout.
        :param pulumi.Input[bool] full_scope_allowed: True if Full Scope is allowed.
        :param pulumi.Input[str] id: Client ID. If not specified, automatically generated.
        :param pulumi.Input[bool] implicit_flow_enabled: True if Implicit flow is enabled.
        :param pulumi.Input[str] name: Client name.
        :param pulumi.Input[int] node_re_registration_timeout: Node registration timeout.
        :param pulumi.Input[int] not_before: Not Before setting.
        :param pulumi.Input[str] protocol: Protocol used for this Client.
        :param pulumi.Input[Sequence[pulumi.Input['KeycloakClientSpecClientProtocolMappersArgs']]] protocol_mappers: Protocol Mappers.
        :param pulumi.Input[bool] public_client: True if this is a public Client.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] redirect_uris: A list of valid Redirection URLs.
        :param pulumi.Input[str] root_url: Application root URL.
        :param pulumi.Input[str] secret: Client Secret. The Operator will automatically create a Secret based on this value.
        :param pulumi.Input[bool] service_accounts_enabled: True if Service Accounts are enabled.
        :param pulumi.Input[bool] standard_flow_enabled: True if Standard flow is enabled.
        :param pulumi.Input[bool] surrogate_auth_required: Surrogate Authentication Required option.
        :param pulumi.Input[bool] use_template_config: True to use a Template Config.
        :param pulumi.Input[bool] use_template_mappers: True to use Template Mappers.
        :param pulumi.Input[bool] use_template_scope: True to use Template Scope.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] web_origins: A list of valid Web Origins.
        """
        pulumi.set(__self__, "client_id", client_id)
        if access is not None:
            pulumi.set(__self__, "access", access)
        if admin_url is not None:
            pulumi.set(__self__, "admin_url", admin_url)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if base_url is not None:
            pulumi.set(__self__, "base_url", base_url)
        if bearer_only is not None:
            pulumi.set(__self__, "bearer_only", bearer_only)
        if client_authenticator_type is not None:
            pulumi.set(__self__, "client_authenticator_type", client_authenticator_type)
        if consent_required is not None:
            pulumi.set(__self__, "consent_required", consent_required)
        if default_roles is not None:
            pulumi.set(__self__, "default_roles", default_roles)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if direct_access_grants_enabled is not None:
            pulumi.set(__self__, "direct_access_grants_enabled", direct_access_grants_enabled)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if frontchannel_logout is not None:
            pulumi.set(__self__, "frontchannel_logout", frontchannel_logout)
        if full_scope_allowed is not None:
            pulumi.set(__self__, "full_scope_allowed", full_scope_allowed)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if implicit_flow_enabled is not None:
            pulumi.set(__self__, "implicit_flow_enabled", implicit_flow_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_re_registration_timeout is not None:
            pulumi.set(__self__, "node_re_registration_timeout", node_re_registration_timeout)
        if not_before is not None:
            pulumi.set(__self__, "not_before", not_before)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_mappers is not None:
            pulumi.set(__self__, "protocol_mappers", protocol_mappers)
        if public_client is not None:
            pulumi.set(__self__, "public_client", public_client)
        if redirect_uris is not None:
            pulumi.set(__self__, "redirect_uris", redirect_uris)
        if root_url is not None:
            pulumi.set(__self__, "root_url", root_url)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if service_accounts_enabled is not None:
            pulumi.set(__self__, "service_accounts_enabled", service_accounts_enabled)
        if standard_flow_enabled is not None:
            pulumi.set(__self__, "standard_flow_enabled", standard_flow_enabled)
        if surrogate_auth_required is not None:
            pulumi.set(__self__, "surrogate_auth_required", surrogate_auth_required)
        if use_template_config is not None:
            pulumi.set(__self__, "use_template_config", use_template_config)
        if use_template_mappers is not None:
            pulumi.set(__self__, "use_template_mappers", use_template_mappers)
        if use_template_scope is not None:
            pulumi.set(__self__, "use_template_scope", use_template_scope)
        if web_origins is not None:
            pulumi.set(__self__, "web_origins", web_origins)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        """
        Client ID.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter
    def access(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[bool]]]]:
        """
        Access options.
        """
        return pulumi.get(self, "access")

    @access.setter
    def access(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[bool]]]]):
        pulumi.set(self, "access", value)

    @property
    @pulumi.getter(name="adminUrl")
    def admin_url(self) -> Optional[pulumi.Input[str]]:
        """
        Application Admin URL.
        """
        return pulumi.get(self, "admin_url")

    @admin_url.setter
    def admin_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_url", value)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Client Attributes.
        """
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "attributes", value)

    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> Optional[pulumi.Input[str]]:
        """
        Application base URL.
        """
        return pulumi.get(self, "base_url")

    @base_url.setter
    def base_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_url", value)

    @property
    @pulumi.getter(name="bearerOnly")
    def bearer_only(self) -> Optional[pulumi.Input[bool]]:
        """
        True if a client supports only Bearer Tokens.
        """
        return pulumi.get(self, "bearer_only")

    @bearer_only.setter
    def bearer_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bearer_only", value)

    @property
    @pulumi.getter(name="clientAuthenticatorType")
    def client_authenticator_type(self) -> Optional[pulumi.Input[str]]:
        """
        What Client authentication type to use.
        """
        return pulumi.get(self, "client_authenticator_type")

    @client_authenticator_type.setter
    def client_authenticator_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_authenticator_type", value)

    @property
    @pulumi.getter(name="consentRequired")
    def consent_required(self) -> Optional[pulumi.Input[bool]]:
        """
        True if Consent Screen is required.
        """
        return pulumi.get(self, "consent_required")

    @consent_required.setter
    def consent_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "consent_required", value)

    @property
    @pulumi.getter(name="defaultRoles")
    def default_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Default Client roles.
        """
        return pulumi.get(self, "default_roles")

    @default_roles.setter
    def default_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "default_roles", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Client description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="directAccessGrantsEnabled")
    def direct_access_grants_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        True if Direct Grant is enabled.
        """
        return pulumi.get(self, "direct_access_grants_enabled")

    @direct_access_grants_enabled.setter
    def direct_access_grants_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "direct_access_grants_enabled", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Client enabled flag.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="frontchannelLogout")
    def frontchannel_logout(self) -> Optional[pulumi.Input[bool]]:
        """
        True if this client supports Front Channel logout.
        """
        return pulumi.get(self, "frontchannel_logout")

    @frontchannel_logout.setter
    def frontchannel_logout(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "frontchannel_logout", value)

    @property
    @pulumi.getter(name="fullScopeAllowed")
    def full_scope_allowed(self) -> Optional[pulumi.Input[bool]]:
        """
        True if Full Scope is allowed.
        """
        return pulumi.get(self, "full_scope_allowed")

    @full_scope_allowed.setter
    def full_scope_allowed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "full_scope_allowed", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Client ID. If not specified, automatically generated.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="implicitFlowEnabled")
    def implicit_flow_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        True if Implicit flow is enabled.
        """
        return pulumi.get(self, "implicit_flow_enabled")

    @implicit_flow_enabled.setter
    def implicit_flow_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "implicit_flow_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Client name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodeReRegistrationTimeout")
    def node_re_registration_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Node registration timeout.
        """
        return pulumi.get(self, "node_re_registration_timeout")

    @node_re_registration_timeout.setter
    def node_re_registration_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_re_registration_timeout", value)

    @property
    @pulumi.getter(name="notBefore")
    def not_before(self) -> Optional[pulumi.Input[int]]:
        """
        Not Before setting.
        """
        return pulumi.get(self, "not_before")

    @not_before.setter
    def not_before(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "not_before", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol used for this Client.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="protocolMappers")
    def protocol_mappers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KeycloakClientSpecClientProtocolMappersArgs']]]]:
        """
        Protocol Mappers.
        """
        return pulumi.get(self, "protocol_mappers")

    @protocol_mappers.setter
    def protocol_mappers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KeycloakClientSpecClientProtocolMappersArgs']]]]):
        pulumi.set(self, "protocol_mappers", value)

    @property
    @pulumi.getter(name="publicClient")
    def public_client(self) -> Optional[pulumi.Input[bool]]:
        """
        True if this is a public Client.
        """
        return pulumi.get(self, "public_client")

    @public_client.setter
    def public_client(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public_client", value)

    @property
    @pulumi.getter(name="redirectUris")
    def redirect_uris(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of valid Redirection URLs.
        """
        return pulumi.get(self, "redirect_uris")

    @redirect_uris.setter
    def redirect_uris(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "redirect_uris", value)

    @property
    @pulumi.getter(name="rootUrl")
    def root_url(self) -> Optional[pulumi.Input[str]]:
        """
        Application root URL.
        """
        return pulumi.get(self, "root_url")

    @root_url.setter
    def root_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_url", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        """
        Client Secret. The Operator will automatically create a Secret based on this value.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter(name="serviceAccountsEnabled")
    def service_accounts_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        True if Service Accounts are enabled.
        """
        return pulumi.get(self, "service_accounts_enabled")

    @service_accounts_enabled.setter
    def service_accounts_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "service_accounts_enabled", value)

    @property
    @pulumi.getter(name="standardFlowEnabled")
    def standard_flow_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        True if Standard flow is enabled.
        """
        return pulumi.get(self, "standard_flow_enabled")

    @standard_flow_enabled.setter
    def standard_flow_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "standard_flow_enabled", value)

    @property
    @pulumi.getter(name="surrogateAuthRequired")
    def surrogate_auth_required(self) -> Optional[pulumi.Input[bool]]:
        """
        Surrogate Authentication Required option.
        """
        return pulumi.get(self, "surrogate_auth_required")

    @surrogate_auth_required.setter
    def surrogate_auth_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "surrogate_auth_required", value)

    @property
    @pulumi.getter(name="useTemplateConfig")
    def use_template_config(self) -> Optional[pulumi.Input[bool]]:
        """
        True to use a Template Config.
        """
        return pulumi.get(self, "use_template_config")

    @use_template_config.setter
    def use_template_config(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_template_config", value)

    @property
    @pulumi.getter(name="useTemplateMappers")
    def use_template_mappers(self) -> Optional[pulumi.Input[bool]]:
        """
        True to use Template Mappers.
        """
        return pulumi.get(self, "use_template_mappers")

    @use_template_mappers.setter
    def use_template_mappers(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_template_mappers", value)

    @property
    @pulumi.getter(name="useTemplateScope")
    def use_template_scope(self) -> Optional[pulumi.Input[bool]]:
        """
        True to use Template Scope.
        """
        return pulumi.get(self, "use_template_scope")

    @use_template_scope.setter
    def use_template_scope(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_template_scope", value)

    @property
    @pulumi.getter(name="webOrigins")
    def web_origins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of valid Web Origins.
        """
        return pulumi.get(self, "web_origins")

    @web_origins.setter
    def web_origins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "web_origins", value)


@pulumi.input_type
class KeycloakClientSpecClientProtocolMappersArgs:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 consent_required: Optional[pulumi.Input[bool]] = None,
                 consent_text: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 protocol_mapper: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] config: Config options.
        :param pulumi.Input[bool] consent_required: True if Consent Screen is required.
        :param pulumi.Input[str] consent_text: Text to use for displaying Consent Screen.
        :param pulumi.Input[str] id: Protocol Mapper ID.
        :param pulumi.Input[str] name: Protocol Mapper Name.
        :param pulumi.Input[str] protocol: Protocol to use.
        :param pulumi.Input[str] protocol_mapper: Protocol Mapper to use
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if consent_required is not None:
            pulumi.set(__self__, "consent_required", consent_required)
        if consent_text is not None:
            pulumi.set(__self__, "consent_text", consent_text)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_mapper is not None:
            pulumi.set(__self__, "protocol_mapper", protocol_mapper)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Config options.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="consentRequired")
    def consent_required(self) -> Optional[pulumi.Input[bool]]:
        """
        True if Consent Screen is required.
        """
        return pulumi.get(self, "consent_required")

    @consent_required.setter
    def consent_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "consent_required", value)

    @property
    @pulumi.getter(name="consentText")
    def consent_text(self) -> Optional[pulumi.Input[str]]:
        """
        Text to use for displaying Consent Screen.
        """
        return pulumi.get(self, "consent_text")

    @consent_text.setter
    def consent_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consent_text", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol Mapper ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol Mapper Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol to use.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="protocolMapper")
    def protocol_mapper(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol Mapper to use
        """
        return pulumi.get(self, "protocol_mapper")

    @protocol_mapper.setter
    def protocol_mapper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol_mapper", value)


@pulumi.input_type
class KeycloakClientSpecRealmSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['KeycloakClientSpecRealmSelectorMatchExpressionsArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Selector for looking up KeycloakRealm Custom Resources.
        :param pulumi.Input[Sequence[pulumi.Input['KeycloakClientSpecRealmSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KeycloakClientSpecRealmSelectorMatchExpressionsArgs']]]]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KeycloakClientSpecRealmSelectorMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class KeycloakClientSpecRealmSelectorMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class KeycloakClientStatusArgs:
    def __init__(__self__, *,
                 message: pulumi.Input[str],
                 phase: pulumi.Input[str],
                 ready: pulumi.Input[bool],
                 secondary_resources: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None):
        """
        KeycloakClientStatus defines the observed state of KeycloakClient
        :param pulumi.Input[str] message: Human-readable message indicating details about current operator phase or error.
        :param pulumi.Input[str] phase: Current phase of the operator.
        :param pulumi.Input[bool] ready: True if all resources are in a ready state and all work is done.
        :param pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]] secondary_resources: A map of all the secondary resources types and names created for this CR. e.g "Deployment": [ "DeploymentName1", "DeploymentName2" ]
        """
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "phase", phase)
        pulumi.set(__self__, "ready", ready)
        if secondary_resources is not None:
            pulumi.set(__self__, "secondary_resources", secondary_resources)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input[str]:
        """
        Human-readable message indicating details about current operator phase or error.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input[str]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def phase(self) -> pulumi.Input[str]:
        """
        Current phase of the operator.
        """
        return pulumi.get(self, "phase")

    @phase.setter
    def phase(self, value: pulumi.Input[str]):
        pulumi.set(self, "phase", value)

    @property
    @pulumi.getter
    def ready(self) -> pulumi.Input[bool]:
        """
        True if all resources are in a ready state and all work is done.
        """
        return pulumi.get(self, "ready")

    @ready.setter
    def ready(self, value: pulumi.Input[bool]):
        pulumi.set(self, "ready", value)

    @property
    @pulumi.getter(name="secondaryResources")
    def secondary_resources(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]:
        """
        A map of all the secondary resources types and names created for this CR. e.g "Deployment": [ "DeploymentName1", "DeploymentName2" ]
        """
        return pulumi.get(self, "secondary_resources")

    @secondary_resources.setter
    def secondary_resources(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]):
        pulumi.set(self, "secondary_resources", value)


@pulumi.input_type
class KeycloakRealmSpecArgs:
    def __init__(__self__, *,
                 realm: pulumi.Input['KeycloakRealmSpecRealmArgs'],
                 instance_selector: Optional[pulumi.Input['KeycloakRealmSpecInstanceSelectorArgs']] = None,
                 realm_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['KeycloakRealmSpecRealmOverridesArgs']]]] = None):
        """
        KeycloakRealmSpec defines the desired state of KeycloakRealm.
        :param pulumi.Input['KeycloakRealmSpecRealmArgs'] realm: Keycloak Realm REST object.
        :param pulumi.Input['KeycloakRealmSpecInstanceSelectorArgs'] instance_selector: Selector for looking up Keycloak Custom Resources.
        :param pulumi.Input[Sequence[pulumi.Input['KeycloakRealmSpecRealmOverridesArgs']]] realm_overrides: A list of overrides to the default Realm behavior.
        """
        pulumi.set(__self__, "realm", realm)
        if instance_selector is not None:
            pulumi.set(__self__, "instance_selector", instance_selector)
        if realm_overrides is not None:
            pulumi.set(__self__, "realm_overrides", realm_overrides)

    @property
    @pulumi.getter
    def realm(self) -> pulumi.Input['KeycloakRealmSpecRealmArgs']:
        """
        Keycloak Realm REST object.
        """
        return pulumi.get(self, "realm")

    @realm.setter
    def realm(self, value: pulumi.Input['KeycloakRealmSpecRealmArgs']):
        pulumi.set(self, "realm", value)

    @property
    @pulumi.getter(name="instanceSelector")
    def instance_selector(self) -> Optional[pulumi.Input['KeycloakRealmSpecInstanceSelectorArgs']]:
        """
        Selector for looking up Keycloak Custom Resources.
        """
        return pulumi.get(self, "instance_selector")

    @instance_selector.setter
    def instance_selector(self, value: Optional[pulumi.Input['KeycloakRealmSpecInstanceSelectorArgs']]):
        pulumi.set(self, "instance_selector", value)

    @property
    @pulumi.getter(name="realmOverrides")
    def realm_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KeycloakRealmSpecRealmOverridesArgs']]]]:
        """
        A list of overrides to the default Realm behavior.
        """
        return pulumi.get(self, "realm_overrides")

    @realm_overrides.setter
    def realm_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KeycloakRealmSpecRealmOverridesArgs']]]]):
        pulumi.set(self, "realm_overrides", value)


@pulumi.input_type
class KeycloakRealmSpecInstanceSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['KeycloakRealmSpecInstanceSelectorMatchExpressionsArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Selector for looking up Keycloak Custom Resources.
        :param pulumi.Input[Sequence[pulumi.Input['KeycloakRealmSpecInstanceSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KeycloakRealmSpecInstanceSelectorMatchExpressionsArgs']]]]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KeycloakRealmSpecInstanceSelectorMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class KeycloakRealmSpecInstanceSelectorMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class KeycloakRealmSpecRealmArgs:
    def __init__(__self__, *,
                 realm: pulumi.Input[str],
                 admin_events_details_enabled: Optional[pulumi.Input[bool]] = None,
                 admin_events_enabled: Optional[pulumi.Input[bool]] = None,
                 clients: Optional[pulumi.Input[Sequence[pulumi.Input['KeycloakRealmSpecRealmClientsArgs']]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 events_enabled: Optional[pulumi.Input[bool]] = None,
                 events_listeners: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 identity_providers: Optional[pulumi.Input[Sequence[pulumi.Input['KeycloakRealmSpecRealmIdentityProvidersArgs']]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['KeycloakRealmSpecRealmUsersArgs']]]] = None):
        """
        Keycloak Realm REST object.
        :param pulumi.Input[str] realm: Realm name.
        :param pulumi.Input[bool] admin_events_details_enabled: Enable admin events details TODO: change to values and use kubebuilder default annotation once supported
        :param pulumi.Input[bool] admin_events_enabled: Enable events recording TODO: change to values and use kubebuilder default annotation once supported
        :param pulumi.Input[Sequence[pulumi.Input['KeycloakRealmSpecRealmClientsArgs']]] clients: A set of Keycloak Clients.
        :param pulumi.Input[str] display_name: Realm display name.
        :param pulumi.Input[bool] enabled: Realm enabled flag.
        :param pulumi.Input[bool] events_enabled: Enable events recording TODO: change to values and use kubebuilder default annotation once supported
        :param pulumi.Input[Sequence[pulumi.Input[str]]] events_listeners: A set of Event Listeners.
        :param pulumi.Input[Sequence[pulumi.Input['KeycloakRealmSpecRealmIdentityProvidersArgs']]] identity_providers: A set of Identity Providers.
        :param pulumi.Input[Sequence[pulumi.Input['KeycloakRealmSpecRealmUsersArgs']]] users: A set of Keycloak Users.
        """
        pulumi.set(__self__, "realm", realm)
        if admin_events_details_enabled is not None:
            pulumi.set(__self__, "admin_events_details_enabled", admin_events_details_enabled)
        if admin_events_enabled is not None:
            pulumi.set(__self__, "admin_events_enabled", admin_events_enabled)
        if clients is not None:
            pulumi.set(__self__, "clients", clients)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if events_enabled is not None:
            pulumi.set(__self__, "events_enabled", events_enabled)
        if events_listeners is not None:
            pulumi.set(__self__, "events_listeners", events_listeners)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if identity_providers is not None:
            pulumi.set(__self__, "identity_providers", identity_providers)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def realm(self) -> pulumi.Input[str]:
        """
        Realm name.
        """
        return pulumi.get(self, "realm")

    @realm.setter
    def realm(self, value: pulumi.Input[str]):
        pulumi.set(self, "realm", value)

    @property
    @pulumi.getter(name="adminEventsDetailsEnabled")
    def admin_events_details_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable admin events details TODO: change to values and use kubebuilder default annotation once supported
        """
        return pulumi.get(self, "admin_events_details_enabled")

    @admin_events_details_enabled.setter
    def admin_events_details_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "admin_events_details_enabled", value)

    @property
    @pulumi.getter(name="adminEventsEnabled")
    def admin_events_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable events recording TODO: change to values and use kubebuilder default annotation once supported
        """
        return pulumi.get(self, "admin_events_enabled")

    @admin_events_enabled.setter
    def admin_events_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "admin_events_enabled", value)

    @property
    @pulumi.getter
    def clients(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KeycloakRealmSpecRealmClientsArgs']]]]:
        """
        A set of Keycloak Clients.
        """
        return pulumi.get(self, "clients")

    @clients.setter
    def clients(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KeycloakRealmSpecRealmClientsArgs']]]]):
        pulumi.set(self, "clients", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Realm display name.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Realm enabled flag.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="eventsEnabled")
    def events_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable events recording TODO: change to values and use kubebuilder default annotation once supported
        """
        return pulumi.get(self, "events_enabled")

    @events_enabled.setter
    def events_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "events_enabled", value)

    @property
    @pulumi.getter(name="eventsListeners")
    def events_listeners(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A set of Event Listeners.
        """
        return pulumi.get(self, "events_listeners")

    @events_listeners.setter
    def events_listeners(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "events_listeners", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="identityProviders")
    def identity_providers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KeycloakRealmSpecRealmIdentityProvidersArgs']]]]:
        """
        A set of Identity Providers.
        """
        return pulumi.get(self, "identity_providers")

    @identity_providers.setter
    def identity_providers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KeycloakRealmSpecRealmIdentityProvidersArgs']]]]):
        pulumi.set(self, "identity_providers", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KeycloakRealmSpecRealmUsersArgs']]]]:
        """
        A set of Keycloak Users.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KeycloakRealmSpecRealmUsersArgs']]]]):
        pulumi.set(self, "users", value)


@pulumi.input_type
class KeycloakRealmSpecRealmClientsArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 access: Optional[pulumi.Input[Mapping[str, pulumi.Input[bool]]]] = None,
                 admin_url: Optional[pulumi.Input[str]] = None,
                 attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 base_url: Optional[pulumi.Input[str]] = None,
                 bearer_only: Optional[pulumi.Input[bool]] = None,
                 client_authenticator_type: Optional[pulumi.Input[str]] = None,
                 consent_required: Optional[pulumi.Input[bool]] = None,
                 default_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 direct_access_grants_enabled: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 frontchannel_logout: Optional[pulumi.Input[bool]] = None,
                 full_scope_allowed: Optional[pulumi.Input[bool]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 implicit_flow_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_re_registration_timeout: Optional[pulumi.Input[int]] = None,
                 not_before: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 protocol_mappers: Optional[pulumi.Input[Sequence[pulumi.Input['KeycloakRealmSpecRealmClientsProtocolMappersArgs']]]] = None,
                 public_client: Optional[pulumi.Input[bool]] = None,
                 redirect_uris: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 root_url: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 service_accounts_enabled: Optional[pulumi.Input[bool]] = None,
                 standard_flow_enabled: Optional[pulumi.Input[bool]] = None,
                 surrogate_auth_required: Optional[pulumi.Input[bool]] = None,
                 use_template_config: Optional[pulumi.Input[bool]] = None,
                 use_template_mappers: Optional[pulumi.Input[bool]] = None,
                 use_template_scope: Optional[pulumi.Input[bool]] = None,
                 web_origins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] client_id: Client ID.
        :param pulumi.Input[Mapping[str, pulumi.Input[bool]]] access: Access options.
        :param pulumi.Input[str] admin_url: Application Admin URL.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] attributes: Client Attributes.
        :param pulumi.Input[str] base_url: Application base URL.
        :param pulumi.Input[bool] bearer_only: True if a client supports only Bearer Tokens.
        :param pulumi.Input[str] client_authenticator_type: What Client authentication type to use.
        :param pulumi.Input[bool] consent_required: True if Consent Screen is required.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] default_roles: Default Client roles.
        :param pulumi.Input[str] description: Client description.
        :param pulumi.Input[bool] direct_access_grants_enabled: True if Direct Grant is enabled.
        :param pulumi.Input[bool] enabled: Client enabled flag.
        :param pulumi.Input[bool] frontchannel_logout: True if this client supports Front Channel logout.
        :param pulumi.Input[bool] full_scope_allowed: True if Full Scope is allowed.
        :param pulumi.Input[str] id: Client ID. If not specified, automatically generated.
        :param pulumi.Input[bool] implicit_flow_enabled: True if Implicit flow is enabled.
        :param pulumi.Input[str] name: Client name.
        :param pulumi.Input[int] node_re_registration_timeout: Node registration timeout.
        :param pulumi.Input[int] not_before: Not Before setting.
        :param pulumi.Input[str] protocol: Protocol used for this Client.
        :param pulumi.Input[Sequence[pulumi.Input['KeycloakRealmSpecRealmClientsProtocolMappersArgs']]] protocol_mappers: Protocol Mappers.
        :param pulumi.Input[bool] public_client: True if this is a public Client.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] redirect_uris: A list of valid Redirection URLs.
        :param pulumi.Input[str] root_url: Application root URL.
        :param pulumi.Input[str] secret: Client Secret. The Operator will automatically create a Secret based on this value.
        :param pulumi.Input[bool] service_accounts_enabled: True if Service Accounts are enabled.
        :param pulumi.Input[bool] standard_flow_enabled: True if Standard flow is enabled.
        :param pulumi.Input[bool] surrogate_auth_required: Surrogate Authentication Required option.
        :param pulumi.Input[bool] use_template_config: True to use a Template Config.
        :param pulumi.Input[bool] use_template_mappers: True to use Template Mappers.
        :param pulumi.Input[bool] use_template_scope: True to use Template Scope.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] web_origins: A list of valid Web Origins.
        """
        pulumi.set(__self__, "client_id", client_id)
        if access is not None:
            pulumi.set(__self__, "access", access)
        if admin_url is not None:
            pulumi.set(__self__, "admin_url", admin_url)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if base_url is not None:
            pulumi.set(__self__, "base_url", base_url)
        if bearer_only is not None:
            pulumi.set(__self__, "bearer_only", bearer_only)
        if client_authenticator_type is not None:
            pulumi.set(__self__, "client_authenticator_type", client_authenticator_type)
        if consent_required is not None:
            pulumi.set(__self__, "consent_required", consent_required)
        if default_roles is not None:
            pulumi.set(__self__, "default_roles", default_roles)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if direct_access_grants_enabled is not None:
            pulumi.set(__self__, "direct_access_grants_enabled", direct_access_grants_enabled)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if frontchannel_logout is not None:
            pulumi.set(__self__, "frontchannel_logout", frontchannel_logout)
        if full_scope_allowed is not None:
            pulumi.set(__self__, "full_scope_allowed", full_scope_allowed)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if implicit_flow_enabled is not None:
            pulumi.set(__self__, "implicit_flow_enabled", implicit_flow_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_re_registration_timeout is not None:
            pulumi.set(__self__, "node_re_registration_timeout", node_re_registration_timeout)
        if not_before is not None:
            pulumi.set(__self__, "not_before", not_before)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_mappers is not None:
            pulumi.set(__self__, "protocol_mappers", protocol_mappers)
        if public_client is not None:
            pulumi.set(__self__, "public_client", public_client)
        if redirect_uris is not None:
            pulumi.set(__self__, "redirect_uris", redirect_uris)
        if root_url is not None:
            pulumi.set(__self__, "root_url", root_url)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if service_accounts_enabled is not None:
            pulumi.set(__self__, "service_accounts_enabled", service_accounts_enabled)
        if standard_flow_enabled is not None:
            pulumi.set(__self__, "standard_flow_enabled", standard_flow_enabled)
        if surrogate_auth_required is not None:
            pulumi.set(__self__, "surrogate_auth_required", surrogate_auth_required)
        if use_template_config is not None:
            pulumi.set(__self__, "use_template_config", use_template_config)
        if use_template_mappers is not None:
            pulumi.set(__self__, "use_template_mappers", use_template_mappers)
        if use_template_scope is not None:
            pulumi.set(__self__, "use_template_scope", use_template_scope)
        if web_origins is not None:
            pulumi.set(__self__, "web_origins", web_origins)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        """
        Client ID.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter
    def access(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[bool]]]]:
        """
        Access options.
        """
        return pulumi.get(self, "access")

    @access.setter
    def access(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[bool]]]]):
        pulumi.set(self, "access", value)

    @property
    @pulumi.getter(name="adminUrl")
    def admin_url(self) -> Optional[pulumi.Input[str]]:
        """
        Application Admin URL.
        """
        return pulumi.get(self, "admin_url")

    @admin_url.setter
    def admin_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_url", value)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Client Attributes.
        """
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "attributes", value)

    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> Optional[pulumi.Input[str]]:
        """
        Application base URL.
        """
        return pulumi.get(self, "base_url")

    @base_url.setter
    def base_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_url", value)

    @property
    @pulumi.getter(name="bearerOnly")
    def bearer_only(self) -> Optional[pulumi.Input[bool]]:
        """
        True if a client supports only Bearer Tokens.
        """
        return pulumi.get(self, "bearer_only")

    @bearer_only.setter
    def bearer_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bearer_only", value)

    @property
    @pulumi.getter(name="clientAuthenticatorType")
    def client_authenticator_type(self) -> Optional[pulumi.Input[str]]:
        """
        What Client authentication type to use.
        """
        return pulumi.get(self, "client_authenticator_type")

    @client_authenticator_type.setter
    def client_authenticator_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_authenticator_type", value)

    @property
    @pulumi.getter(name="consentRequired")
    def consent_required(self) -> Optional[pulumi.Input[bool]]:
        """
        True if Consent Screen is required.
        """
        return pulumi.get(self, "consent_required")

    @consent_required.setter
    def consent_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "consent_required", value)

    @property
    @pulumi.getter(name="defaultRoles")
    def default_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Default Client roles.
        """
        return pulumi.get(self, "default_roles")

    @default_roles.setter
    def default_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "default_roles", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Client description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="directAccessGrantsEnabled")
    def direct_access_grants_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        True if Direct Grant is enabled.
        """
        return pulumi.get(self, "direct_access_grants_enabled")

    @direct_access_grants_enabled.setter
    def direct_access_grants_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "direct_access_grants_enabled", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Client enabled flag.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="frontchannelLogout")
    def frontchannel_logout(self) -> Optional[pulumi.Input[bool]]:
        """
        True if this client supports Front Channel logout.
        """
        return pulumi.get(self, "frontchannel_logout")

    @frontchannel_logout.setter
    def frontchannel_logout(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "frontchannel_logout", value)

    @property
    @pulumi.getter(name="fullScopeAllowed")
    def full_scope_allowed(self) -> Optional[pulumi.Input[bool]]:
        """
        True if Full Scope is allowed.
        """
        return pulumi.get(self, "full_scope_allowed")

    @full_scope_allowed.setter
    def full_scope_allowed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "full_scope_allowed", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Client ID. If not specified, automatically generated.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="implicitFlowEnabled")
    def implicit_flow_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        True if Implicit flow is enabled.
        """
        return pulumi.get(self, "implicit_flow_enabled")

    @implicit_flow_enabled.setter
    def implicit_flow_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "implicit_flow_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Client name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodeReRegistrationTimeout")
    def node_re_registration_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Node registration timeout.
        """
        return pulumi.get(self, "node_re_registration_timeout")

    @node_re_registration_timeout.setter
    def node_re_registration_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_re_registration_timeout", value)

    @property
    @pulumi.getter(name="notBefore")
    def not_before(self) -> Optional[pulumi.Input[int]]:
        """
        Not Before setting.
        """
        return pulumi.get(self, "not_before")

    @not_before.setter
    def not_before(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "not_before", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol used for this Client.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="protocolMappers")
    def protocol_mappers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KeycloakRealmSpecRealmClientsProtocolMappersArgs']]]]:
        """
        Protocol Mappers.
        """
        return pulumi.get(self, "protocol_mappers")

    @protocol_mappers.setter
    def protocol_mappers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KeycloakRealmSpecRealmClientsProtocolMappersArgs']]]]):
        pulumi.set(self, "protocol_mappers", value)

    @property
    @pulumi.getter(name="publicClient")
    def public_client(self) -> Optional[pulumi.Input[bool]]:
        """
        True if this is a public Client.
        """
        return pulumi.get(self, "public_client")

    @public_client.setter
    def public_client(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public_client", value)

    @property
    @pulumi.getter(name="redirectUris")
    def redirect_uris(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of valid Redirection URLs.
        """
        return pulumi.get(self, "redirect_uris")

    @redirect_uris.setter
    def redirect_uris(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "redirect_uris", value)

    @property
    @pulumi.getter(name="rootUrl")
    def root_url(self) -> Optional[pulumi.Input[str]]:
        """
        Application root URL.
        """
        return pulumi.get(self, "root_url")

    @root_url.setter
    def root_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_url", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        """
        Client Secret. The Operator will automatically create a Secret based on this value.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter(name="serviceAccountsEnabled")
    def service_accounts_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        True if Service Accounts are enabled.
        """
        return pulumi.get(self, "service_accounts_enabled")

    @service_accounts_enabled.setter
    def service_accounts_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "service_accounts_enabled", value)

    @property
    @pulumi.getter(name="standardFlowEnabled")
    def standard_flow_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        True if Standard flow is enabled.
        """
        return pulumi.get(self, "standard_flow_enabled")

    @standard_flow_enabled.setter
    def standard_flow_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "standard_flow_enabled", value)

    @property
    @pulumi.getter(name="surrogateAuthRequired")
    def surrogate_auth_required(self) -> Optional[pulumi.Input[bool]]:
        """
        Surrogate Authentication Required option.
        """
        return pulumi.get(self, "surrogate_auth_required")

    @surrogate_auth_required.setter
    def surrogate_auth_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "surrogate_auth_required", value)

    @property
    @pulumi.getter(name="useTemplateConfig")
    def use_template_config(self) -> Optional[pulumi.Input[bool]]:
        """
        True to use a Template Config.
        """
        return pulumi.get(self, "use_template_config")

    @use_template_config.setter
    def use_template_config(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_template_config", value)

    @property
    @pulumi.getter(name="useTemplateMappers")
    def use_template_mappers(self) -> Optional[pulumi.Input[bool]]:
        """
        True to use Template Mappers.
        """
        return pulumi.get(self, "use_template_mappers")

    @use_template_mappers.setter
    def use_template_mappers(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_template_mappers", value)

    @property
    @pulumi.getter(name="useTemplateScope")
    def use_template_scope(self) -> Optional[pulumi.Input[bool]]:
        """
        True to use Template Scope.
        """
        return pulumi.get(self, "use_template_scope")

    @use_template_scope.setter
    def use_template_scope(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_template_scope", value)

    @property
    @pulumi.getter(name="webOrigins")
    def web_origins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of valid Web Origins.
        """
        return pulumi.get(self, "web_origins")

    @web_origins.setter
    def web_origins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "web_origins", value)


@pulumi.input_type
class KeycloakRealmSpecRealmClientsProtocolMappersArgs:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 consent_required: Optional[pulumi.Input[bool]] = None,
                 consent_text: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 protocol_mapper: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] config: Config options.
        :param pulumi.Input[bool] consent_required: True if Consent Screen is required.
        :param pulumi.Input[str] consent_text: Text to use for displaying Consent Screen.
        :param pulumi.Input[str] id: Protocol Mapper ID.
        :param pulumi.Input[str] name: Protocol Mapper Name.
        :param pulumi.Input[str] protocol: Protocol to use.
        :param pulumi.Input[str] protocol_mapper: Protocol Mapper to use
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if consent_required is not None:
            pulumi.set(__self__, "consent_required", consent_required)
        if consent_text is not None:
            pulumi.set(__self__, "consent_text", consent_text)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if protocol_mapper is not None:
            pulumi.set(__self__, "protocol_mapper", protocol_mapper)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Config options.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="consentRequired")
    def consent_required(self) -> Optional[pulumi.Input[bool]]:
        """
        True if Consent Screen is required.
        """
        return pulumi.get(self, "consent_required")

    @consent_required.setter
    def consent_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "consent_required", value)

    @property
    @pulumi.getter(name="consentText")
    def consent_text(self) -> Optional[pulumi.Input[str]]:
        """
        Text to use for displaying Consent Screen.
        """
        return pulumi.get(self, "consent_text")

    @consent_text.setter
    def consent_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consent_text", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol Mapper ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol Mapper Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol to use.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="protocolMapper")
    def protocol_mapper(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol Mapper to use
        """
        return pulumi.get(self, "protocol_mapper")

    @protocol_mapper.setter
    def protocol_mapper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol_mapper", value)


@pulumi.input_type
class KeycloakRealmSpecRealmIdentityProvidersArgs:
    def __init__(__self__, *,
                 add_read_token_role_on_create: Optional[pulumi.Input[bool]] = None,
                 alias: Optional[pulumi.Input[str]] = None,
                 config: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 first_broker_login_flow_alias: Optional[pulumi.Input[str]] = None,
                 internal_id: Optional[pulumi.Input[str]] = None,
                 link_only: Optional[pulumi.Input[bool]] = None,
                 post_broker_login_flow_alias: Optional[pulumi.Input[str]] = None,
                 provider_id: Optional[pulumi.Input[str]] = None,
                 store_token: Optional[pulumi.Input[bool]] = None,
                 trust_email: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] add_read_token_role_on_create: Adds Read Token role when creating this Identity Provider.
        :param pulumi.Input[str] alias: Identity Provider Alias.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] config: Identity Provider config.
        :param pulumi.Input[str] display_name: Identity Provider Display Name.
        :param pulumi.Input[bool] enabled: Identity Provider enabled flag.
        :param pulumi.Input[str] first_broker_login_flow_alias: Identity Provider First Broker Login Flow Alias.
        :param pulumi.Input[str] internal_id: Identity Provider Internal ID.
        :param pulumi.Input[bool] link_only: Identity Provider Link Only setting.
        :param pulumi.Input[str] post_broker_login_flow_alias: Identity Provider Post Broker Login Flow Alias.
        :param pulumi.Input[str] provider_id: Identity Provider ID.
        :param pulumi.Input[bool] store_token: Identity Provider Store to Token.
        :param pulumi.Input[bool] trust_email: Identity Provider Trust Email.
        """
        if add_read_token_role_on_create is not None:
            pulumi.set(__self__, "add_read_token_role_on_create", add_read_token_role_on_create)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if first_broker_login_flow_alias is not None:
            pulumi.set(__self__, "first_broker_login_flow_alias", first_broker_login_flow_alias)
        if internal_id is not None:
            pulumi.set(__self__, "internal_id", internal_id)
        if link_only is not None:
            pulumi.set(__self__, "link_only", link_only)
        if post_broker_login_flow_alias is not None:
            pulumi.set(__self__, "post_broker_login_flow_alias", post_broker_login_flow_alias)
        if provider_id is not None:
            pulumi.set(__self__, "provider_id", provider_id)
        if store_token is not None:
            pulumi.set(__self__, "store_token", store_token)
        if trust_email is not None:
            pulumi.set(__self__, "trust_email", trust_email)

    @property
    @pulumi.getter(name="addReadTokenRoleOnCreate")
    def add_read_token_role_on_create(self) -> Optional[pulumi.Input[bool]]:
        """
        Adds Read Token role when creating this Identity Provider.
        """
        return pulumi.get(self, "add_read_token_role_on_create")

    @add_read_token_role_on_create.setter
    def add_read_token_role_on_create(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "add_read_token_role_on_create", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        Identity Provider Alias.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Identity Provider config.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Identity Provider Display Name.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Identity Provider enabled flag.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="firstBrokerLoginFlowAlias")
    def first_broker_login_flow_alias(self) -> Optional[pulumi.Input[str]]:
        """
        Identity Provider First Broker Login Flow Alias.
        """
        return pulumi.get(self, "first_broker_login_flow_alias")

    @first_broker_login_flow_alias.setter
    def first_broker_login_flow_alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "first_broker_login_flow_alias", value)

    @property
    @pulumi.getter(name="internalId")
    def internal_id(self) -> Optional[pulumi.Input[str]]:
        """
        Identity Provider Internal ID.
        """
        return pulumi.get(self, "internal_id")

    @internal_id.setter
    def internal_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internal_id", value)

    @property
    @pulumi.getter(name="linkOnly")
    def link_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Identity Provider Link Only setting.
        """
        return pulumi.get(self, "link_only")

    @link_only.setter
    def link_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "link_only", value)

    @property
    @pulumi.getter(name="postBrokerLoginFlowAlias")
    def post_broker_login_flow_alias(self) -> Optional[pulumi.Input[str]]:
        """
        Identity Provider Post Broker Login Flow Alias.
        """
        return pulumi.get(self, "post_broker_login_flow_alias")

    @post_broker_login_flow_alias.setter
    def post_broker_login_flow_alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "post_broker_login_flow_alias", value)

    @property
    @pulumi.getter(name="providerId")
    def provider_id(self) -> Optional[pulumi.Input[str]]:
        """
        Identity Provider ID.
        """
        return pulumi.get(self, "provider_id")

    @provider_id.setter
    def provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider_id", value)

    @property
    @pulumi.getter(name="storeToken")
    def store_token(self) -> Optional[pulumi.Input[bool]]:
        """
        Identity Provider Store to Token.
        """
        return pulumi.get(self, "store_token")

    @store_token.setter
    def store_token(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "store_token", value)

    @property
    @pulumi.getter(name="trustEmail")
    def trust_email(self) -> Optional[pulumi.Input[bool]]:
        """
        Identity Provider Trust Email.
        """
        return pulumi.get(self, "trust_email")

    @trust_email.setter
    def trust_email(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trust_email", value)


@pulumi.input_type
class KeycloakRealmSpecRealmOverridesArgs:
    def __init__(__self__, *,
                 for_flow: Optional[pulumi.Input[str]] = None,
                 identity_provider: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] for_flow: Flow to be overridden.
        :param pulumi.Input[str] identity_provider: Identity Provider to be overridden.
        """
        if for_flow is not None:
            pulumi.set(__self__, "for_flow", for_flow)
        if identity_provider is not None:
            pulumi.set(__self__, "identity_provider", identity_provider)

    @property
    @pulumi.getter(name="forFlow")
    def for_flow(self) -> Optional[pulumi.Input[str]]:
        """
        Flow to be overridden.
        """
        return pulumi.get(self, "for_flow")

    @for_flow.setter
    def for_flow(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "for_flow", value)

    @property
    @pulumi.getter(name="identityProvider")
    def identity_provider(self) -> Optional[pulumi.Input[str]]:
        """
        Identity Provider to be overridden.
        """
        return pulumi.get(self, "identity_provider")

    @identity_provider.setter
    def identity_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_provider", value)


@pulumi.input_type
class KeycloakRealmSpecRealmUsersArgs:
    def __init__(__self__, *,
                 attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None,
                 client_roles: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None,
                 credentials: Optional[pulumi.Input[Sequence[pulumi.Input['KeycloakRealmSpecRealmUsersCredentialsArgs']]]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 email_verified: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 federated_identities: Optional[pulumi.Input[Sequence[pulumi.Input['KeycloakRealmSpecRealmUsersFederatedIdentitiesArgs']]]] = None,
                 first_name: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 last_name: Optional[pulumi.Input[str]] = None,
                 realm_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 required_actions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]] attributes: A set of Attributes.
        :param pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]] client_roles: A set of Client Roles.
        :param pulumi.Input[Sequence[pulumi.Input['KeycloakRealmSpecRealmUsersCredentialsArgs']]] credentials: A set of Credentials.
        :param pulumi.Input[str] email: Email.
        :param pulumi.Input[bool] email_verified: True if email has already been verified.
        :param pulumi.Input[bool] enabled: User enabled flag.
        :param pulumi.Input[Sequence[pulumi.Input['KeycloakRealmSpecRealmUsersFederatedIdentitiesArgs']]] federated_identities: A set of Federated Identities.
        :param pulumi.Input[str] first_name: First Name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] groups: A set of Groups.
        :param pulumi.Input[str] id: User ID.
        :param pulumi.Input[str] last_name: Last Name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] realm_roles: A set of Realm Roles.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] required_actions: A set of Required Actions.
        :param pulumi.Input[str] username: User Name.
        """
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if client_roles is not None:
            pulumi.set(__self__, "client_roles", client_roles)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if email_verified is not None:
            pulumi.set(__self__, "email_verified", email_verified)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if federated_identities is not None:
            pulumi.set(__self__, "federated_identities", federated_identities)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if realm_roles is not None:
            pulumi.set(__self__, "realm_roles", realm_roles)
        if required_actions is not None:
            pulumi.set(__self__, "required_actions", required_actions)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]:
        """
        A set of Attributes.
        """
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]):
        pulumi.set(self, "attributes", value)

    @property
    @pulumi.getter(name="clientRoles")
    def client_roles(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]:
        """
        A set of Client Roles.
        """
        return pulumi.get(self, "client_roles")

    @client_roles.setter
    def client_roles(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]):
        pulumi.set(self, "client_roles", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KeycloakRealmSpecRealmUsersCredentialsArgs']]]]:
        """
        A set of Credentials.
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KeycloakRealmSpecRealmUsersCredentialsArgs']]]]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        Email.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="emailVerified")
    def email_verified(self) -> Optional[pulumi.Input[bool]]:
        """
        True if email has already been verified.
        """
        return pulumi.get(self, "email_verified")

    @email_verified.setter
    def email_verified(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "email_verified", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        User enabled flag.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="federatedIdentities")
    def federated_identities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KeycloakRealmSpecRealmUsersFederatedIdentitiesArgs']]]]:
        """
        A set of Federated Identities.
        """
        return pulumi.get(self, "federated_identities")

    @federated_identities.setter
    def federated_identities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KeycloakRealmSpecRealmUsersFederatedIdentitiesArgs']]]]):
        pulumi.set(self, "federated_identities", value)

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[pulumi.Input[str]]:
        """
        First Name.
        """
        return pulumi.get(self, "first_name")

    @first_name.setter
    def first_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "first_name", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A set of Groups.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        User ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[pulumi.Input[str]]:
        """
        Last Name.
        """
        return pulumi.get(self, "last_name")

    @last_name.setter
    def last_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_name", value)

    @property
    @pulumi.getter(name="realmRoles")
    def realm_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A set of Realm Roles.
        """
        return pulumi.get(self, "realm_roles")

    @realm_roles.setter
    def realm_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "realm_roles", value)

    @property
    @pulumi.getter(name="requiredActions")
    def required_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A set of Required Actions.
        """
        return pulumi.get(self, "required_actions")

    @required_actions.setter
    def required_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "required_actions", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        User Name.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class KeycloakRealmSpecRealmUsersCredentialsArgs:
    def __init__(__self__, *,
                 temporary: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] temporary: True if this credential object is temporary.
        :param pulumi.Input[str] type: Credential Type.
        :param pulumi.Input[str] value: Credential Value.
        """
        if temporary is not None:
            pulumi.set(__self__, "temporary", temporary)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def temporary(self) -> Optional[pulumi.Input[bool]]:
        """
        True if this credential object is temporary.
        """
        return pulumi.get(self, "temporary")

    @temporary.setter
    def temporary(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "temporary", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Credential Type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Credential Value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class KeycloakRealmSpecRealmUsersFederatedIdentitiesArgs:
    def __init__(__self__, *,
                 identity_provider: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] identity_provider: Federated Identity Provider.
        :param pulumi.Input[str] user_id: Federated Identity User ID.
        :param pulumi.Input[str] user_name: Federated Identity User Name.
        """
        if identity_provider is not None:
            pulumi.set(__self__, "identity_provider", identity_provider)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="identityProvider")
    def identity_provider(self) -> Optional[pulumi.Input[str]]:
        """
        Federated Identity Provider.
        """
        return pulumi.get(self, "identity_provider")

    @identity_provider.setter
    def identity_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_provider", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[str]]:
        """
        Federated Identity User ID.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_id", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        """
        Federated Identity User Name.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)


@pulumi.input_type
class KeycloakRealmStatusArgs:
    def __init__(__self__, *,
                 login_url: pulumi.Input[str],
                 message: pulumi.Input[str],
                 phase: pulumi.Input[str],
                 ready: pulumi.Input[bool],
                 secondary_resources: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None):
        """
        KeycloakRealmStatus defines the observed state of KeycloakRealm
        :param pulumi.Input[str] login_url: TODO
        :param pulumi.Input[str] message: Human-readable message indicating details about current operator phase or error.
        :param pulumi.Input[str] phase: Current phase of the operator.
        :param pulumi.Input[bool] ready: True if all resources are in a ready state and all work is done.
        :param pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]] secondary_resources: A map of all the secondary resources types and names created for this CR. e.g "Deployment": [ "DeploymentName1", "DeploymentName2" ]
        """
        pulumi.set(__self__, "login_url", login_url)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "phase", phase)
        pulumi.set(__self__, "ready", ready)
        if secondary_resources is not None:
            pulumi.set(__self__, "secondary_resources", secondary_resources)

    @property
    @pulumi.getter(name="loginURL")
    def login_url(self) -> pulumi.Input[str]:
        """
        TODO
        """
        return pulumi.get(self, "login_url")

    @login_url.setter
    def login_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "login_url", value)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input[str]:
        """
        Human-readable message indicating details about current operator phase or error.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input[str]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def phase(self) -> pulumi.Input[str]:
        """
        Current phase of the operator.
        """
        return pulumi.get(self, "phase")

    @phase.setter
    def phase(self, value: pulumi.Input[str]):
        pulumi.set(self, "phase", value)

    @property
    @pulumi.getter
    def ready(self) -> pulumi.Input[bool]:
        """
        True if all resources are in a ready state and all work is done.
        """
        return pulumi.get(self, "ready")

    @ready.setter
    def ready(self, value: pulumi.Input[bool]):
        pulumi.set(self, "ready", value)

    @property
    @pulumi.getter(name="secondaryResources")
    def secondary_resources(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]:
        """
        A map of all the secondary resources types and names created for this CR. e.g "Deployment": [ "DeploymentName1", "DeploymentName2" ]
        """
        return pulumi.get(self, "secondary_resources")

    @secondary_resources.setter
    def secondary_resources(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]):
        pulumi.set(self, "secondary_resources", value)


@pulumi.input_type
class KeycloakSpecArgs:
    def __init__(__self__, *,
                 extensions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 external_access: Optional[pulumi.Input['KeycloakSpecExternalAccessArgs']] = None,
                 external_database: Optional[pulumi.Input['KeycloakSpecExternalDatabaseArgs']] = None,
                 instances: Optional[pulumi.Input[int]] = None,
                 keycloak_deployment_spec: Optional[pulumi.Input['KeycloakSpecKeycloakDeploymentSpecArgs']] = None,
                 migration: Optional[pulumi.Input['KeycloakSpecMigrationArgs']] = None,
                 pod_disruption_budget: Optional[pulumi.Input['KeycloakSpecPodDisruptionBudgetArgs']] = None,
                 postgres_deployment_spec: Optional[pulumi.Input['KeycloakSpecPostgresDeploymentSpecArgs']] = None,
                 profile: Optional[pulumi.Input[str]] = None,
                 storage_class_name: Optional[pulumi.Input[str]] = None):
        """
        KeycloakSpec defines the desired state of Keycloak.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extensions: A list of extensions, where each one is a URL to a JAR files that will be deployed in Keycloak.
        :param pulumi.Input['KeycloakSpecExternalAccessArgs'] external_access: Controls external Ingress/Route settings.
        :param pulumi.Input['KeycloakSpecExternalDatabaseArgs'] external_database: Controls external database settings. Using an external database requires providing a secret containing credentials as well as connection details. Here's an example of such secret: 
                    apiVersion: v1     kind: Secret     metadata:         name: keycloak-db-secret         namespace: keycloak     stringData:         POSTGRES_DATABASE: <Database Name>         POSTGRES_EXTERNAL_ADDRESS: <External Database IP or URL (resolvable by K8s)>         POSTGRES_EXTERNAL_PORT: <External Database Port>         # Strongly recommended to use <'Keycloak CR Name'-postgresql>         POSTGRES_HOST: <Database Service Name>         POSTGRES_PASSWORD: <Database Password>         # Required for AWS Backup functionality         POSTGRES_SUPERUSER: true         POSTGRES_USERNAME: <Database Username>      type: Opaque 
                Both POSTGRES_EXTERNAL_ADDRESS and POSTGRES_EXTERNAL_PORT are specifically required for creating connection to the external database. The secret name is created using the following convention:       <Custom Resource Name>-db-secret 
                For more information, please refer to the Operator documentation.
        :param pulumi.Input[int] instances: Number of Keycloak instances in HA mode. Default is 1.
        :param pulumi.Input['KeycloakSpecKeycloakDeploymentSpecArgs'] keycloak_deployment_spec: Resources (Requests and Limits) for KeycloakDeployment.
        :param pulumi.Input['KeycloakSpecMigrationArgs'] migration: Specify Migration configuration
        :param pulumi.Input['KeycloakSpecPodDisruptionBudgetArgs'] pod_disruption_budget: Specify PodDisruptionBudget configuration.
        :param pulumi.Input['KeycloakSpecPostgresDeploymentSpecArgs'] postgres_deployment_spec: Resources (Requests and Limits) for PostgresDeployment.
        :param pulumi.Input[str] profile: Profile used for controlling Operator behavior. Default is empty.
        :param pulumi.Input[str] storage_class_name: Name of the StorageClass for Postgresql Persistent Volume Claim
        """
        if extensions is not None:
            pulumi.set(__self__, "extensions", extensions)
        if external_access is not None:
            pulumi.set(__self__, "external_access", external_access)
        if external_database is not None:
            pulumi.set(__self__, "external_database", external_database)
        if instances is not None:
            pulumi.set(__self__, "instances", instances)
        if keycloak_deployment_spec is not None:
            pulumi.set(__self__, "keycloak_deployment_spec", keycloak_deployment_spec)
        if migration is not None:
            pulumi.set(__self__, "migration", migration)
        if pod_disruption_budget is not None:
            pulumi.set(__self__, "pod_disruption_budget", pod_disruption_budget)
        if postgres_deployment_spec is not None:
            pulumi.set(__self__, "postgres_deployment_spec", postgres_deployment_spec)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if storage_class_name is not None:
            pulumi.set(__self__, "storage_class_name", storage_class_name)

    @property
    @pulumi.getter
    def extensions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of extensions, where each one is a URL to a JAR files that will be deployed in Keycloak.
        """
        return pulumi.get(self, "extensions")

    @extensions.setter
    def extensions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extensions", value)

    @property
    @pulumi.getter(name="externalAccess")
    def external_access(self) -> Optional[pulumi.Input['KeycloakSpecExternalAccessArgs']]:
        """
        Controls external Ingress/Route settings.
        """
        return pulumi.get(self, "external_access")

    @external_access.setter
    def external_access(self, value: Optional[pulumi.Input['KeycloakSpecExternalAccessArgs']]):
        pulumi.set(self, "external_access", value)

    @property
    @pulumi.getter(name="externalDatabase")
    def external_database(self) -> Optional[pulumi.Input['KeycloakSpecExternalDatabaseArgs']]:
        """
        Controls external database settings. Using an external database requires providing a secret containing credentials as well as connection details. Here's an example of such secret: 
             apiVersion: v1     kind: Secret     metadata:         name: keycloak-db-secret         namespace: keycloak     stringData:         POSTGRES_DATABASE: <Database Name>         POSTGRES_EXTERNAL_ADDRESS: <External Database IP or URL (resolvable by K8s)>         POSTGRES_EXTERNAL_PORT: <External Database Port>         # Strongly recommended to use <'Keycloak CR Name'-postgresql>         POSTGRES_HOST: <Database Service Name>         POSTGRES_PASSWORD: <Database Password>         # Required for AWS Backup functionality         POSTGRES_SUPERUSER: true         POSTGRES_USERNAME: <Database Username>      type: Opaque 
         Both POSTGRES_EXTERNAL_ADDRESS and POSTGRES_EXTERNAL_PORT are specifically required for creating connection to the external database. The secret name is created using the following convention:       <Custom Resource Name>-db-secret 
         For more information, please refer to the Operator documentation.
        """
        return pulumi.get(self, "external_database")

    @external_database.setter
    def external_database(self, value: Optional[pulumi.Input['KeycloakSpecExternalDatabaseArgs']]):
        pulumi.set(self, "external_database", value)

    @property
    @pulumi.getter
    def instances(self) -> Optional[pulumi.Input[int]]:
        """
        Number of Keycloak instances in HA mode. Default is 1.
        """
        return pulumi.get(self, "instances")

    @instances.setter
    def instances(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instances", value)

    @property
    @pulumi.getter(name="keycloakDeploymentSpec")
    def keycloak_deployment_spec(self) -> Optional[pulumi.Input['KeycloakSpecKeycloakDeploymentSpecArgs']]:
        """
        Resources (Requests and Limits) for KeycloakDeployment.
        """
        return pulumi.get(self, "keycloak_deployment_spec")

    @keycloak_deployment_spec.setter
    def keycloak_deployment_spec(self, value: Optional[pulumi.Input['KeycloakSpecKeycloakDeploymentSpecArgs']]):
        pulumi.set(self, "keycloak_deployment_spec", value)

    @property
    @pulumi.getter
    def migration(self) -> Optional[pulumi.Input['KeycloakSpecMigrationArgs']]:
        """
        Specify Migration configuration
        """
        return pulumi.get(self, "migration")

    @migration.setter
    def migration(self, value: Optional[pulumi.Input['KeycloakSpecMigrationArgs']]):
        pulumi.set(self, "migration", value)

    @property
    @pulumi.getter(name="podDisruptionBudget")
    def pod_disruption_budget(self) -> Optional[pulumi.Input['KeycloakSpecPodDisruptionBudgetArgs']]:
        """
        Specify PodDisruptionBudget configuration.
        """
        return pulumi.get(self, "pod_disruption_budget")

    @pod_disruption_budget.setter
    def pod_disruption_budget(self, value: Optional[pulumi.Input['KeycloakSpecPodDisruptionBudgetArgs']]):
        pulumi.set(self, "pod_disruption_budget", value)

    @property
    @pulumi.getter(name="postgresDeploymentSpec")
    def postgres_deployment_spec(self) -> Optional[pulumi.Input['KeycloakSpecPostgresDeploymentSpecArgs']]:
        """
        Resources (Requests and Limits) for PostgresDeployment.
        """
        return pulumi.get(self, "postgres_deployment_spec")

    @postgres_deployment_spec.setter
    def postgres_deployment_spec(self, value: Optional[pulumi.Input['KeycloakSpecPostgresDeploymentSpecArgs']]):
        pulumi.set(self, "postgres_deployment_spec", value)

    @property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[str]]:
        """
        Profile used for controlling Operator behavior. Default is empty.
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile", value)

    @property
    @pulumi.getter(name="storageClassName")
    def storage_class_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the StorageClass for Postgresql Persistent Volume Claim
        """
        return pulumi.get(self, "storage_class_name")

    @storage_class_name.setter
    def storage_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_class_name", value)


@pulumi.input_type
class KeycloakSpecExternalAccessArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 tls_termination: Optional[pulumi.Input[str]] = None):
        """
        Controls external Ingress/Route settings.
        :param pulumi.Input[bool] enabled: If set to true, the Operator will create an Ingress or a Route pointing to Keycloak.
        :param pulumi.Input[str] tls_termination: TLS Termination type for the external access. Setting this field to "reencrypt" will terminate TLS on the Ingress/Route level. Setting this field to "passthrough" will send encrypted traffic to the Pod. If unspecified, defaults to "reencrypt". Note, that this setting has no effect on Ingress as Ingress TLS settings are not reconciled by this operator. In other words, Ingress TLS configuration is the same in both cases and it is up to the user to configure TLS section of the Ingress.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if tls_termination is not None:
            pulumi.set(__self__, "tls_termination", tls_termination)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, the Operator will create an Ingress or a Route pointing to Keycloak.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="tlsTermination")
    def tls_termination(self) -> Optional[pulumi.Input[str]]:
        """
        TLS Termination type for the external access. Setting this field to "reencrypt" will terminate TLS on the Ingress/Route level. Setting this field to "passthrough" will send encrypted traffic to the Pod. If unspecified, defaults to "reencrypt". Note, that this setting has no effect on Ingress as Ingress TLS settings are not reconciled by this operator. In other words, Ingress TLS configuration is the same in both cases and it is up to the user to configure TLS section of the Ingress.
        """
        return pulumi.get(self, "tls_termination")

    @tls_termination.setter
    def tls_termination(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_termination", value)


@pulumi.input_type
class KeycloakSpecExternalDatabaseArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        Controls external database settings. Using an external database requires providing a secret containing credentials as well as connection details. Here's an example of such secret: 
             apiVersion: v1     kind: Secret     metadata:         name: keycloak-db-secret         namespace: keycloak     stringData:         POSTGRES_DATABASE: <Database Name>         POSTGRES_EXTERNAL_ADDRESS: <External Database IP or URL (resolvable by K8s)>         POSTGRES_EXTERNAL_PORT: <External Database Port>         # Strongly recommended to use <'Keycloak CR Name'-postgresql>         POSTGRES_HOST: <Database Service Name>         POSTGRES_PASSWORD: <Database Password>         # Required for AWS Backup functionality         POSTGRES_SUPERUSER: true         POSTGRES_USERNAME: <Database Username>      type: Opaque 
         Both POSTGRES_EXTERNAL_ADDRESS and POSTGRES_EXTERNAL_PORT are specifically required for creating connection to the external database. The secret name is created using the following convention:       <Custom Resource Name>-db-secret 
         For more information, please refer to the Operator documentation.
        :param pulumi.Input[bool] enabled: If set to true, the Operator will use an external database. pointing to Keycloak.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, the Operator will use an external database. pointing to Keycloak.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class KeycloakSpecKeycloakDeploymentSpecArgs:
    def __init__(__self__, *,
                 resources: Optional[pulumi.Input['KeycloakSpecKeycloakDeploymentSpecResourcesArgs']] = None):
        """
        Resources (Requests and Limits) for KeycloakDeployment.
        :param pulumi.Input['KeycloakSpecKeycloakDeploymentSpecResourcesArgs'] resources: Resources (Requests and Limits) for the Pods.
        """
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['KeycloakSpecKeycloakDeploymentSpecResourcesArgs']]:
        """
        Resources (Requests and Limits) for the Pods.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['KeycloakSpecKeycloakDeploymentSpecResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class KeycloakSpecKeycloakDeploymentSpecResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Resources (Requests and Limits) for the Pods.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] limits: Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class KeycloakSpecMigrationArgs:
    def __init__(__self__, *,
                 backups: Optional[pulumi.Input['KeycloakSpecMigrationBackupsArgs']] = None):
        """
        Specify Migration configuration
        :param pulumi.Input['KeycloakSpecMigrationBackupsArgs'] backups: Set it to config backup policy for migration
        """
        if backups is not None:
            pulumi.set(__self__, "backups", backups)

    @property
    @pulumi.getter
    def backups(self) -> Optional[pulumi.Input['KeycloakSpecMigrationBackupsArgs']]:
        """
        Set it to config backup policy for migration
        """
        return pulumi.get(self, "backups")

    @backups.setter
    def backups(self, value: Optional[pulumi.Input['KeycloakSpecMigrationBackupsArgs']]):
        pulumi.set(self, "backups", value)


@pulumi.input_type
class KeycloakSpecMigrationBackupsArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        Set it to config backup policy for migration
        :param pulumi.Input[bool] enabled: If set to true, the operator will do database backup before doing migration
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, the operator will do database backup before doing migration
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class KeycloakSpecPodDisruptionBudgetArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        Specify PodDisruptionBudget configuration.
        :param pulumi.Input[bool] enabled: If set to true, the operator will create a PodDistruptionBudget for the Keycloak deployment and set its `maxUnavailable` value to 1.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, the operator will create a PodDistruptionBudget for the Keycloak deployment and set its `maxUnavailable` value to 1.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class KeycloakSpecPostgresDeploymentSpecArgs:
    def __init__(__self__, *,
                 resources: Optional[pulumi.Input['KeycloakSpecPostgresDeploymentSpecResourcesArgs']] = None):
        """
        Resources (Requests and Limits) for PostgresDeployment.
        :param pulumi.Input['KeycloakSpecPostgresDeploymentSpecResourcesArgs'] resources: Resources (Requests and Limits) for the Pods.
        """
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['KeycloakSpecPostgresDeploymentSpecResourcesArgs']]:
        """
        Resources (Requests and Limits) for the Pods.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['KeycloakSpecPostgresDeploymentSpecResourcesArgs']]):
        pulumi.set(self, "resources", value)


@pulumi.input_type
class KeycloakSpecPostgresDeploymentSpecResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 requests: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Resources (Requests and Limits) for the Pods.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] limits: Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] requests: Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class KeycloakStatusArgs:
    def __init__(__self__, *,
                 credential_secret: pulumi.Input[str],
                 internal_url: pulumi.Input[str],
                 message: pulumi.Input[str],
                 phase: pulumi.Input[str],
                 ready: pulumi.Input[bool],
                 version: pulumi.Input[str],
                 secondary_resources: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None):
        """
        KeycloakStatus defines the observed state of Keycloak.
        :param pulumi.Input[str] credential_secret: The secret where the admin credentials are to be found.
        :param pulumi.Input[str] internal_url: Service IP and Port for in-cluster access to the keycloak instance.
        :param pulumi.Input[str] message: Human-readable message indicating details about current operator phase or error.
        :param pulumi.Input[str] phase: Current phase of the operator.
        :param pulumi.Input[bool] ready: True if all resources are in a ready state and all work is done.
        :param pulumi.Input[str] version: Version of Keycloak or RHSSO running on the cluster.
        :param pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]] secondary_resources: A map of all the secondary resources types and names created for this CR. e.g "Deployment": [ "DeploymentName1", "DeploymentName2" ].
        """
        pulumi.set(__self__, "credential_secret", credential_secret)
        pulumi.set(__self__, "internal_url", internal_url)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "phase", phase)
        pulumi.set(__self__, "ready", ready)
        pulumi.set(__self__, "version", version)
        if secondary_resources is not None:
            pulumi.set(__self__, "secondary_resources", secondary_resources)

    @property
    @pulumi.getter(name="credentialSecret")
    def credential_secret(self) -> pulumi.Input[str]:
        """
        The secret where the admin credentials are to be found.
        """
        return pulumi.get(self, "credential_secret")

    @credential_secret.setter
    def credential_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "credential_secret", value)

    @property
    @pulumi.getter(name="internalURL")
    def internal_url(self) -> pulumi.Input[str]:
        """
        Service IP and Port for in-cluster access to the keycloak instance.
        """
        return pulumi.get(self, "internal_url")

    @internal_url.setter
    def internal_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "internal_url", value)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input[str]:
        """
        Human-readable message indicating details about current operator phase or error.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input[str]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def phase(self) -> pulumi.Input[str]:
        """
        Current phase of the operator.
        """
        return pulumi.get(self, "phase")

    @phase.setter
    def phase(self, value: pulumi.Input[str]):
        pulumi.set(self, "phase", value)

    @property
    @pulumi.getter
    def ready(self) -> pulumi.Input[bool]:
        """
        True if all resources are in a ready state and all work is done.
        """
        return pulumi.get(self, "ready")

    @ready.setter
    def ready(self, value: pulumi.Input[bool]):
        pulumi.set(self, "ready", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[str]:
        """
        Version of Keycloak or RHSSO running on the cluster.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[str]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="secondaryResources")
    def secondary_resources(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]:
        """
        A map of all the secondary resources types and names created for this CR. e.g "Deployment": [ "DeploymentName1", "DeploymentName2" ].
        """
        return pulumi.get(self, "secondary_resources")

    @secondary_resources.setter
    def secondary_resources(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]):
        pulumi.set(self, "secondary_resources", value)


@pulumi.input_type
class KeycloakUserSpecArgs:
    def __init__(__self__, *,
                 user: pulumi.Input['KeycloakUserSpecUserArgs'],
                 realm_selector: Optional[pulumi.Input['KeycloakUserSpecRealmSelectorArgs']] = None):
        """
        KeycloakUserSpec defines the desired state of KeycloakUser.
        :param pulumi.Input['KeycloakUserSpecUserArgs'] user: Keycloak User REST object.
        :param pulumi.Input['KeycloakUserSpecRealmSelectorArgs'] realm_selector: Selector for looking up KeycloakRealm Custom Resources.
        """
        pulumi.set(__self__, "user", user)
        if realm_selector is not None:
            pulumi.set(__self__, "realm_selector", realm_selector)

    @property
    @pulumi.getter
    def user(self) -> pulumi.Input['KeycloakUserSpecUserArgs']:
        """
        Keycloak User REST object.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: pulumi.Input['KeycloakUserSpecUserArgs']):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter(name="realmSelector")
    def realm_selector(self) -> Optional[pulumi.Input['KeycloakUserSpecRealmSelectorArgs']]:
        """
        Selector for looking up KeycloakRealm Custom Resources.
        """
        return pulumi.get(self, "realm_selector")

    @realm_selector.setter
    def realm_selector(self, value: Optional[pulumi.Input['KeycloakUserSpecRealmSelectorArgs']]):
        pulumi.set(self, "realm_selector", value)


@pulumi.input_type
class KeycloakUserSpecRealmSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['KeycloakUserSpecRealmSelectorMatchExpressionsArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Selector for looking up KeycloakRealm Custom Resources.
        :param pulumi.Input[Sequence[pulumi.Input['KeycloakUserSpecRealmSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KeycloakUserSpecRealmSelectorMatchExpressionsArgs']]]]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KeycloakUserSpecRealmSelectorMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class KeycloakUserSpecRealmSelectorMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class KeycloakUserSpecUserArgs:
    def __init__(__self__, *,
                 attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None,
                 client_roles: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None,
                 credentials: Optional[pulumi.Input[Sequence[pulumi.Input['KeycloakUserSpecUserCredentialsArgs']]]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 email_verified: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 federated_identities: Optional[pulumi.Input[Sequence[pulumi.Input['KeycloakUserSpecUserFederatedIdentitiesArgs']]]] = None,
                 first_name: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 last_name: Optional[pulumi.Input[str]] = None,
                 realm_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 required_actions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        Keycloak User REST object.
        :param pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]] attributes: A set of Attributes.
        :param pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]] client_roles: A set of Client Roles.
        :param pulumi.Input[Sequence[pulumi.Input['KeycloakUserSpecUserCredentialsArgs']]] credentials: A set of Credentials.
        :param pulumi.Input[str] email: Email.
        :param pulumi.Input[bool] email_verified: True if email has already been verified.
        :param pulumi.Input[bool] enabled: User enabled flag.
        :param pulumi.Input[Sequence[pulumi.Input['KeycloakUserSpecUserFederatedIdentitiesArgs']]] federated_identities: A set of Federated Identities.
        :param pulumi.Input[str] first_name: First Name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] groups: A set of Groups.
        :param pulumi.Input[str] id: User ID.
        :param pulumi.Input[str] last_name: Last Name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] realm_roles: A set of Realm Roles.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] required_actions: A set of Required Actions.
        :param pulumi.Input[str] username: User Name.
        """
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if client_roles is not None:
            pulumi.set(__self__, "client_roles", client_roles)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if email_verified is not None:
            pulumi.set(__self__, "email_verified", email_verified)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if federated_identities is not None:
            pulumi.set(__self__, "federated_identities", federated_identities)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if realm_roles is not None:
            pulumi.set(__self__, "realm_roles", realm_roles)
        if required_actions is not None:
            pulumi.set(__self__, "required_actions", required_actions)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]:
        """
        A set of Attributes.
        """
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]):
        pulumi.set(self, "attributes", value)

    @property
    @pulumi.getter(name="clientRoles")
    def client_roles(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]:
        """
        A set of Client Roles.
        """
        return pulumi.get(self, "client_roles")

    @client_roles.setter
    def client_roles(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]):
        pulumi.set(self, "client_roles", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KeycloakUserSpecUserCredentialsArgs']]]]:
        """
        A set of Credentials.
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KeycloakUserSpecUserCredentialsArgs']]]]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        Email.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="emailVerified")
    def email_verified(self) -> Optional[pulumi.Input[bool]]:
        """
        True if email has already been verified.
        """
        return pulumi.get(self, "email_verified")

    @email_verified.setter
    def email_verified(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "email_verified", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        User enabled flag.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="federatedIdentities")
    def federated_identities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KeycloakUserSpecUserFederatedIdentitiesArgs']]]]:
        """
        A set of Federated Identities.
        """
        return pulumi.get(self, "federated_identities")

    @federated_identities.setter
    def federated_identities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KeycloakUserSpecUserFederatedIdentitiesArgs']]]]):
        pulumi.set(self, "federated_identities", value)

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[pulumi.Input[str]]:
        """
        First Name.
        """
        return pulumi.get(self, "first_name")

    @first_name.setter
    def first_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "first_name", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A set of Groups.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        User ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[pulumi.Input[str]]:
        """
        Last Name.
        """
        return pulumi.get(self, "last_name")

    @last_name.setter
    def last_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_name", value)

    @property
    @pulumi.getter(name="realmRoles")
    def realm_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A set of Realm Roles.
        """
        return pulumi.get(self, "realm_roles")

    @realm_roles.setter
    def realm_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "realm_roles", value)

    @property
    @pulumi.getter(name="requiredActions")
    def required_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A set of Required Actions.
        """
        return pulumi.get(self, "required_actions")

    @required_actions.setter
    def required_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "required_actions", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        User Name.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class KeycloakUserSpecUserCredentialsArgs:
    def __init__(__self__, *,
                 temporary: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] temporary: True if this credential object is temporary.
        :param pulumi.Input[str] type: Credential Type.
        :param pulumi.Input[str] value: Credential Value.
        """
        if temporary is not None:
            pulumi.set(__self__, "temporary", temporary)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def temporary(self) -> Optional[pulumi.Input[bool]]:
        """
        True if this credential object is temporary.
        """
        return pulumi.get(self, "temporary")

    @temporary.setter
    def temporary(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "temporary", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Credential Type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Credential Value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class KeycloakUserSpecUserFederatedIdentitiesArgs:
    def __init__(__self__, *,
                 identity_provider: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] identity_provider: Federated Identity Provider.
        :param pulumi.Input[str] user_id: Federated Identity User ID.
        :param pulumi.Input[str] user_name: Federated Identity User Name.
        """
        if identity_provider is not None:
            pulumi.set(__self__, "identity_provider", identity_provider)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="identityProvider")
    def identity_provider(self) -> Optional[pulumi.Input[str]]:
        """
        Federated Identity Provider.
        """
        return pulumi.get(self, "identity_provider")

    @identity_provider.setter
    def identity_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_provider", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[str]]:
        """
        Federated Identity User ID.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_id", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        """
        Federated Identity User Name.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)


@pulumi.input_type
class KeycloakUserStatusArgs:
    def __init__(__self__, *,
                 message: pulumi.Input[str],
                 phase: pulumi.Input[str]):
        """
        KeycloakUserStatus defines the observed state of KeycloakUser.
        :param pulumi.Input[str] message: Human-readable message indicating details about current operator phase or error.
        :param pulumi.Input[str] phase: Current phase of the operator.
        """
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "phase", phase)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input[str]:
        """
        Human-readable message indicating details about current operator phase or error.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input[str]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def phase(self) -> pulumi.Input[str]:
        """
        Current phase of the operator.
        """
        return pulumi.get(self, "phase")

    @phase.setter
    def phase(self, value: pulumi.Input[str]):
        pulumi.set(self, "phase", value)



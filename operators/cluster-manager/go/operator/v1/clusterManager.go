// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ClusterManager configures the controllers on the hub that govern registration and work distribution for attached Klusterlets. ClusterManager will be only deployed in open-cluster-management-hub namespace.
type ClusterManager struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// Spec represents a desired deployment configuration of controllers that govern registration and work distribution for attached Klusterlets.
	Spec ClusterManagerSpecPtrOutput `pulumi:"spec"`
	// Status represents the current status of controllers that govern the lifecycle of managed clusters.
	Status ClusterManagerStatusPtrOutput `pulumi:"status"`
}

// NewClusterManager registers a new resource with the given unique name, arguments, and options.
func NewClusterManager(ctx *pulumi.Context,
	name string, args *ClusterManagerArgs, opts ...pulumi.ResourceOption) (*ClusterManager, error) {
	if args == nil {
		args = &ClusterManagerArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("operator.open-cluster-management.io/v1")
	args.Kind = pulumi.StringPtr("ClusterManager")
	var resource ClusterManager
	err := ctx.RegisterResource("kubernetes:operator.open-cluster-management.io/v1:ClusterManager", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterManager gets an existing ClusterManager resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterManager(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterManagerState, opts ...pulumi.ResourceOption) (*ClusterManager, error) {
	var resource ClusterManager
	err := ctx.ReadResource("kubernetes:operator.open-cluster-management.io/v1:ClusterManager", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterManager resources.
type clusterManagerState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec represents a desired deployment configuration of controllers that govern registration and work distribution for attached Klusterlets.
	Spec *ClusterManagerSpec `pulumi:"spec"`
	// Status represents the current status of controllers that govern the lifecycle of managed clusters.
	Status *ClusterManagerStatus `pulumi:"status"`
}

type ClusterManagerState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// Spec represents a desired deployment configuration of controllers that govern registration and work distribution for attached Klusterlets.
	Spec ClusterManagerSpecPtrInput
	// Status represents the current status of controllers that govern the lifecycle of managed clusters.
	Status ClusterManagerStatusPtrInput
}

func (ClusterManagerState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterManagerState)(nil)).Elem()
}

type clusterManagerArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec represents a desired deployment configuration of controllers that govern registration and work distribution for attached Klusterlets.
	Spec *ClusterManagerSpec `pulumi:"spec"`
	// Status represents the current status of controllers that govern the lifecycle of managed clusters.
	Status *ClusterManagerStatus `pulumi:"status"`
}

// The set of arguments for constructing a ClusterManager resource.
type ClusterManagerArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// Spec represents a desired deployment configuration of controllers that govern registration and work distribution for attached Klusterlets.
	Spec ClusterManagerSpecPtrInput
	// Status represents the current status of controllers that govern the lifecycle of managed clusters.
	Status ClusterManagerStatusPtrInput
}

func (ClusterManagerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterManagerArgs)(nil)).Elem()
}

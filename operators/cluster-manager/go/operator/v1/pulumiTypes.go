// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ClusterManager configures the controllers on the hub that govern registration and work distribution for attached Klusterlets. ClusterManager will be only deployed in open-cluster-management-hub namespace.
type ClusterManagerType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec represents a desired deployment configuration of controllers that govern registration and work distribution for attached Klusterlets.
	Spec *ClusterManagerSpec `pulumi:"spec"`
	// Status represents the current status of controllers that govern the lifecycle of managed clusters.
	Status *ClusterManagerStatus `pulumi:"status"`
}

// ClusterManagerTypeInput is an input type that accepts ClusterManagerTypeArgs and ClusterManagerTypeOutput values.
// You can construct a concrete instance of `ClusterManagerTypeInput` via:
//
//          ClusterManagerTypeArgs{...}
type ClusterManagerTypeInput interface {
	pulumi.Input

	ToClusterManagerTypeOutput() ClusterManagerTypeOutput
	ToClusterManagerTypeOutputWithContext(context.Context) ClusterManagerTypeOutput
}

// ClusterManager configures the controllers on the hub that govern registration and work distribution for attached Klusterlets. ClusterManager will be only deployed in open-cluster-management-hub namespace.
type ClusterManagerTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Spec represents a desired deployment configuration of controllers that govern registration and work distribution for attached Klusterlets.
	Spec ClusterManagerSpecPtrInput `pulumi:"spec"`
	// Status represents the current status of controllers that govern the lifecycle of managed clusters.
	Status ClusterManagerStatusPtrInput `pulumi:"status"`
}

func (ClusterManagerTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterManagerType)(nil)).Elem()
}

func (i ClusterManagerTypeArgs) ToClusterManagerTypeOutput() ClusterManagerTypeOutput {
	return i.ToClusterManagerTypeOutputWithContext(context.Background())
}

func (i ClusterManagerTypeArgs) ToClusterManagerTypeOutputWithContext(ctx context.Context) ClusterManagerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterManagerTypeOutput)
}

// ClusterManager configures the controllers on the hub that govern registration and work distribution for attached Klusterlets. ClusterManager will be only deployed in open-cluster-management-hub namespace.
type ClusterManagerTypeOutput struct{ *pulumi.OutputState }

func (ClusterManagerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterManagerType)(nil)).Elem()
}

func (o ClusterManagerTypeOutput) ToClusterManagerTypeOutput() ClusterManagerTypeOutput {
	return o
}

func (o ClusterManagerTypeOutput) ToClusterManagerTypeOutputWithContext(ctx context.Context) ClusterManagerTypeOutput {
	return o
}

func (o ClusterManagerTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterManagerType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o ClusterManagerTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterManagerType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o ClusterManagerTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ClusterManagerType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Spec represents a desired deployment configuration of controllers that govern registration and work distribution for attached Klusterlets.
func (o ClusterManagerTypeOutput) Spec() ClusterManagerSpecPtrOutput {
	return o.ApplyT(func(v ClusterManagerType) *ClusterManagerSpec { return v.Spec }).(ClusterManagerSpecPtrOutput)
}

// Status represents the current status of controllers that govern the lifecycle of managed clusters.
func (o ClusterManagerTypeOutput) Status() ClusterManagerStatusPtrOutput {
	return o.ApplyT(func(v ClusterManagerType) *ClusterManagerStatus { return v.Status }).(ClusterManagerStatusPtrOutput)
}

type ClusterManagerMetadata struct {
}

// ClusterManagerMetadataInput is an input type that accepts ClusterManagerMetadataArgs and ClusterManagerMetadataOutput values.
// You can construct a concrete instance of `ClusterManagerMetadataInput` via:
//
//          ClusterManagerMetadataArgs{...}
type ClusterManagerMetadataInput interface {
	pulumi.Input

	ToClusterManagerMetadataOutput() ClusterManagerMetadataOutput
	ToClusterManagerMetadataOutputWithContext(context.Context) ClusterManagerMetadataOutput
}

type ClusterManagerMetadataArgs struct {
}

func (ClusterManagerMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterManagerMetadata)(nil)).Elem()
}

func (i ClusterManagerMetadataArgs) ToClusterManagerMetadataOutput() ClusterManagerMetadataOutput {
	return i.ToClusterManagerMetadataOutputWithContext(context.Background())
}

func (i ClusterManagerMetadataArgs) ToClusterManagerMetadataOutputWithContext(ctx context.Context) ClusterManagerMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterManagerMetadataOutput)
}

type ClusterManagerMetadataOutput struct{ *pulumi.OutputState }

func (ClusterManagerMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterManagerMetadata)(nil)).Elem()
}

func (o ClusterManagerMetadataOutput) ToClusterManagerMetadataOutput() ClusterManagerMetadataOutput {
	return o
}

func (o ClusterManagerMetadataOutput) ToClusterManagerMetadataOutputWithContext(ctx context.Context) ClusterManagerMetadataOutput {
	return o
}

// Spec represents a desired deployment configuration of controllers that govern registration and work distribution for attached Klusterlets.
type ClusterManagerSpec struct {
	// RegistrationImagePullSpec represents the desired image of registration controller/webhook installed on hub.
	RegistrationImagePullSpec *string `pulumi:"registrationImagePullSpec"`
	// WorkImagePullSpec represents the desired image configuration of work controller/webhook installed on hub.
	WorkImagePullSpec *string `pulumi:"workImagePullSpec"`
}

// ClusterManagerSpecInput is an input type that accepts ClusterManagerSpecArgs and ClusterManagerSpecOutput values.
// You can construct a concrete instance of `ClusterManagerSpecInput` via:
//
//          ClusterManagerSpecArgs{...}
type ClusterManagerSpecInput interface {
	pulumi.Input

	ToClusterManagerSpecOutput() ClusterManagerSpecOutput
	ToClusterManagerSpecOutputWithContext(context.Context) ClusterManagerSpecOutput
}

// Spec represents a desired deployment configuration of controllers that govern registration and work distribution for attached Klusterlets.
type ClusterManagerSpecArgs struct {
	// RegistrationImagePullSpec represents the desired image of registration controller/webhook installed on hub.
	RegistrationImagePullSpec pulumi.StringPtrInput `pulumi:"registrationImagePullSpec"`
	// WorkImagePullSpec represents the desired image configuration of work controller/webhook installed on hub.
	WorkImagePullSpec pulumi.StringPtrInput `pulumi:"workImagePullSpec"`
}

func (ClusterManagerSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterManagerSpec)(nil)).Elem()
}

func (i ClusterManagerSpecArgs) ToClusterManagerSpecOutput() ClusterManagerSpecOutput {
	return i.ToClusterManagerSpecOutputWithContext(context.Background())
}

func (i ClusterManagerSpecArgs) ToClusterManagerSpecOutputWithContext(ctx context.Context) ClusterManagerSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterManagerSpecOutput)
}

func (i ClusterManagerSpecArgs) ToClusterManagerSpecPtrOutput() ClusterManagerSpecPtrOutput {
	return i.ToClusterManagerSpecPtrOutputWithContext(context.Background())
}

func (i ClusterManagerSpecArgs) ToClusterManagerSpecPtrOutputWithContext(ctx context.Context) ClusterManagerSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterManagerSpecOutput).ToClusterManagerSpecPtrOutputWithContext(ctx)
}

// ClusterManagerSpecPtrInput is an input type that accepts ClusterManagerSpecArgs, ClusterManagerSpecPtr and ClusterManagerSpecPtrOutput values.
// You can construct a concrete instance of `ClusterManagerSpecPtrInput` via:
//
//          ClusterManagerSpecArgs{...}
//
//  or:
//
//          nil
type ClusterManagerSpecPtrInput interface {
	pulumi.Input

	ToClusterManagerSpecPtrOutput() ClusterManagerSpecPtrOutput
	ToClusterManagerSpecPtrOutputWithContext(context.Context) ClusterManagerSpecPtrOutput
}

type clusterManagerSpecPtrType ClusterManagerSpecArgs

func ClusterManagerSpecPtr(v *ClusterManagerSpecArgs) ClusterManagerSpecPtrInput {
	return (*clusterManagerSpecPtrType)(v)
}

func (*clusterManagerSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterManagerSpec)(nil)).Elem()
}

func (i *clusterManagerSpecPtrType) ToClusterManagerSpecPtrOutput() ClusterManagerSpecPtrOutput {
	return i.ToClusterManagerSpecPtrOutputWithContext(context.Background())
}

func (i *clusterManagerSpecPtrType) ToClusterManagerSpecPtrOutputWithContext(ctx context.Context) ClusterManagerSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterManagerSpecPtrOutput)
}

// Spec represents a desired deployment configuration of controllers that govern registration and work distribution for attached Klusterlets.
type ClusterManagerSpecOutput struct{ *pulumi.OutputState }

func (ClusterManagerSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterManagerSpec)(nil)).Elem()
}

func (o ClusterManagerSpecOutput) ToClusterManagerSpecOutput() ClusterManagerSpecOutput {
	return o
}

func (o ClusterManagerSpecOutput) ToClusterManagerSpecOutputWithContext(ctx context.Context) ClusterManagerSpecOutput {
	return o
}

func (o ClusterManagerSpecOutput) ToClusterManagerSpecPtrOutput() ClusterManagerSpecPtrOutput {
	return o.ToClusterManagerSpecPtrOutputWithContext(context.Background())
}

func (o ClusterManagerSpecOutput) ToClusterManagerSpecPtrOutputWithContext(ctx context.Context) ClusterManagerSpecPtrOutput {
	return o.ApplyT(func(v ClusterManagerSpec) *ClusterManagerSpec {
		return &v
	}).(ClusterManagerSpecPtrOutput)
}

// RegistrationImagePullSpec represents the desired image of registration controller/webhook installed on hub.
func (o ClusterManagerSpecOutput) RegistrationImagePullSpec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterManagerSpec) *string { return v.RegistrationImagePullSpec }).(pulumi.StringPtrOutput)
}

// WorkImagePullSpec represents the desired image configuration of work controller/webhook installed on hub.
func (o ClusterManagerSpecOutput) WorkImagePullSpec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterManagerSpec) *string { return v.WorkImagePullSpec }).(pulumi.StringPtrOutput)
}

type ClusterManagerSpecPtrOutput struct{ *pulumi.OutputState }

func (ClusterManagerSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterManagerSpec)(nil)).Elem()
}

func (o ClusterManagerSpecPtrOutput) ToClusterManagerSpecPtrOutput() ClusterManagerSpecPtrOutput {
	return o
}

func (o ClusterManagerSpecPtrOutput) ToClusterManagerSpecPtrOutputWithContext(ctx context.Context) ClusterManagerSpecPtrOutput {
	return o
}

func (o ClusterManagerSpecPtrOutput) Elem() ClusterManagerSpecOutput {
	return o.ApplyT(func(v *ClusterManagerSpec) ClusterManagerSpec { return *v }).(ClusterManagerSpecOutput)
}

// RegistrationImagePullSpec represents the desired image of registration controller/webhook installed on hub.
func (o ClusterManagerSpecPtrOutput) RegistrationImagePullSpec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterManagerSpec) *string {
		if v == nil {
			return nil
		}
		return v.RegistrationImagePullSpec
	}).(pulumi.StringPtrOutput)
}

// WorkImagePullSpec represents the desired image configuration of work controller/webhook installed on hub.
func (o ClusterManagerSpecPtrOutput) WorkImagePullSpec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterManagerSpec) *string {
		if v == nil {
			return nil
		}
		return v.WorkImagePullSpec
	}).(pulumi.StringPtrOutput)
}

// Status represents the current status of controllers that govern the lifecycle of managed clusters.
type ClusterManagerStatus struct {
	// Conditions contain the different condition statuses for this ClusterManager. Valid condition types are: Applied: components in hub are applied. Available: components in hub are available and ready to serve. Progressing: components in hub are in a transitioning state. Degraded: components in hub do not match the desired configuration and only provide degraded service.
	Conditions []ClusterManagerStatusConditions `pulumi:"conditions"`
	// Generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.
	Generations []ClusterManagerStatusGenerations `pulumi:"generations"`
	// ObservedGeneration is the last generation change you've dealt with
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// RelatedResources are used to track the resources that are related to this ClusterManager
	RelatedResources []ClusterManagerStatusRelatedResources `pulumi:"relatedResources"`
}

// ClusterManagerStatusInput is an input type that accepts ClusterManagerStatusArgs and ClusterManagerStatusOutput values.
// You can construct a concrete instance of `ClusterManagerStatusInput` via:
//
//          ClusterManagerStatusArgs{...}
type ClusterManagerStatusInput interface {
	pulumi.Input

	ToClusterManagerStatusOutput() ClusterManagerStatusOutput
	ToClusterManagerStatusOutputWithContext(context.Context) ClusterManagerStatusOutput
}

// Status represents the current status of controllers that govern the lifecycle of managed clusters.
type ClusterManagerStatusArgs struct {
	// Conditions contain the different condition statuses for this ClusterManager. Valid condition types are: Applied: components in hub are applied. Available: components in hub are available and ready to serve. Progressing: components in hub are in a transitioning state. Degraded: components in hub do not match the desired configuration and only provide degraded service.
	Conditions ClusterManagerStatusConditionsArrayInput `pulumi:"conditions"`
	// Generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.
	Generations ClusterManagerStatusGenerationsArrayInput `pulumi:"generations"`
	// ObservedGeneration is the last generation change you've dealt with
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// RelatedResources are used to track the resources that are related to this ClusterManager
	RelatedResources ClusterManagerStatusRelatedResourcesArrayInput `pulumi:"relatedResources"`
}

func (ClusterManagerStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterManagerStatus)(nil)).Elem()
}

func (i ClusterManagerStatusArgs) ToClusterManagerStatusOutput() ClusterManagerStatusOutput {
	return i.ToClusterManagerStatusOutputWithContext(context.Background())
}

func (i ClusterManagerStatusArgs) ToClusterManagerStatusOutputWithContext(ctx context.Context) ClusterManagerStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterManagerStatusOutput)
}

func (i ClusterManagerStatusArgs) ToClusterManagerStatusPtrOutput() ClusterManagerStatusPtrOutput {
	return i.ToClusterManagerStatusPtrOutputWithContext(context.Background())
}

func (i ClusterManagerStatusArgs) ToClusterManagerStatusPtrOutputWithContext(ctx context.Context) ClusterManagerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterManagerStatusOutput).ToClusterManagerStatusPtrOutputWithContext(ctx)
}

// ClusterManagerStatusPtrInput is an input type that accepts ClusterManagerStatusArgs, ClusterManagerStatusPtr and ClusterManagerStatusPtrOutput values.
// You can construct a concrete instance of `ClusterManagerStatusPtrInput` via:
//
//          ClusterManagerStatusArgs{...}
//
//  or:
//
//          nil
type ClusterManagerStatusPtrInput interface {
	pulumi.Input

	ToClusterManagerStatusPtrOutput() ClusterManagerStatusPtrOutput
	ToClusterManagerStatusPtrOutputWithContext(context.Context) ClusterManagerStatusPtrOutput
}

type clusterManagerStatusPtrType ClusterManagerStatusArgs

func ClusterManagerStatusPtr(v *ClusterManagerStatusArgs) ClusterManagerStatusPtrInput {
	return (*clusterManagerStatusPtrType)(v)
}

func (*clusterManagerStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterManagerStatus)(nil)).Elem()
}

func (i *clusterManagerStatusPtrType) ToClusterManagerStatusPtrOutput() ClusterManagerStatusPtrOutput {
	return i.ToClusterManagerStatusPtrOutputWithContext(context.Background())
}

func (i *clusterManagerStatusPtrType) ToClusterManagerStatusPtrOutputWithContext(ctx context.Context) ClusterManagerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterManagerStatusPtrOutput)
}

// Status represents the current status of controllers that govern the lifecycle of managed clusters.
type ClusterManagerStatusOutput struct{ *pulumi.OutputState }

func (ClusterManagerStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterManagerStatus)(nil)).Elem()
}

func (o ClusterManagerStatusOutput) ToClusterManagerStatusOutput() ClusterManagerStatusOutput {
	return o
}

func (o ClusterManagerStatusOutput) ToClusterManagerStatusOutputWithContext(ctx context.Context) ClusterManagerStatusOutput {
	return o
}

func (o ClusterManagerStatusOutput) ToClusterManagerStatusPtrOutput() ClusterManagerStatusPtrOutput {
	return o.ToClusterManagerStatusPtrOutputWithContext(context.Background())
}

func (o ClusterManagerStatusOutput) ToClusterManagerStatusPtrOutputWithContext(ctx context.Context) ClusterManagerStatusPtrOutput {
	return o.ApplyT(func(v ClusterManagerStatus) *ClusterManagerStatus {
		return &v
	}).(ClusterManagerStatusPtrOutput)
}

// Conditions contain the different condition statuses for this ClusterManager. Valid condition types are: Applied: components in hub are applied. Available: components in hub are available and ready to serve. Progressing: components in hub are in a transitioning state. Degraded: components in hub do not match the desired configuration and only provide degraded service.
func (o ClusterManagerStatusOutput) Conditions() ClusterManagerStatusConditionsArrayOutput {
	return o.ApplyT(func(v ClusterManagerStatus) []ClusterManagerStatusConditions { return v.Conditions }).(ClusterManagerStatusConditionsArrayOutput)
}

// Generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.
func (o ClusterManagerStatusOutput) Generations() ClusterManagerStatusGenerationsArrayOutput {
	return o.ApplyT(func(v ClusterManagerStatus) []ClusterManagerStatusGenerations { return v.Generations }).(ClusterManagerStatusGenerationsArrayOutput)
}

// ObservedGeneration is the last generation change you've dealt with
func (o ClusterManagerStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterManagerStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// RelatedResources are used to track the resources that are related to this ClusterManager
func (o ClusterManagerStatusOutput) RelatedResources() ClusterManagerStatusRelatedResourcesArrayOutput {
	return o.ApplyT(func(v ClusterManagerStatus) []ClusterManagerStatusRelatedResources { return v.RelatedResources }).(ClusterManagerStatusRelatedResourcesArrayOutput)
}

type ClusterManagerStatusPtrOutput struct{ *pulumi.OutputState }

func (ClusterManagerStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterManagerStatus)(nil)).Elem()
}

func (o ClusterManagerStatusPtrOutput) ToClusterManagerStatusPtrOutput() ClusterManagerStatusPtrOutput {
	return o
}

func (o ClusterManagerStatusPtrOutput) ToClusterManagerStatusPtrOutputWithContext(ctx context.Context) ClusterManagerStatusPtrOutput {
	return o
}

func (o ClusterManagerStatusPtrOutput) Elem() ClusterManagerStatusOutput {
	return o.ApplyT(func(v *ClusterManagerStatus) ClusterManagerStatus { return *v }).(ClusterManagerStatusOutput)
}

// Conditions contain the different condition statuses for this ClusterManager. Valid condition types are: Applied: components in hub are applied. Available: components in hub are available and ready to serve. Progressing: components in hub are in a transitioning state. Degraded: components in hub do not match the desired configuration and only provide degraded service.
func (o ClusterManagerStatusPtrOutput) Conditions() ClusterManagerStatusConditionsArrayOutput {
	return o.ApplyT(func(v *ClusterManagerStatus) []ClusterManagerStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(ClusterManagerStatusConditionsArrayOutput)
}

// Generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.
func (o ClusterManagerStatusPtrOutput) Generations() ClusterManagerStatusGenerationsArrayOutput {
	return o.ApplyT(func(v *ClusterManagerStatus) []ClusterManagerStatusGenerations {
		if v == nil {
			return nil
		}
		return v.Generations
	}).(ClusterManagerStatusGenerationsArrayOutput)
}

// ObservedGeneration is the last generation change you've dealt with
func (o ClusterManagerStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterManagerStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// RelatedResources are used to track the resources that are related to this ClusterManager
func (o ClusterManagerStatusPtrOutput) RelatedResources() ClusterManagerStatusRelatedResourcesArrayOutput {
	return o.ApplyT(func(v *ClusterManagerStatus) []ClusterManagerStatusRelatedResources {
		if v == nil {
			return nil
		}
		return v.RelatedResources
	}).(ClusterManagerStatusRelatedResourcesArrayOutput)
}

// Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: "Available", "Progressing", and "Degraded"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"`
//      // other fields }
type ClusterManagerStatusConditions struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime string `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition. This may be an empty string.
	Message string `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
	Reason string `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status string `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
	Type string `pulumi:"type"`
}

// ClusterManagerStatusConditionsInput is an input type that accepts ClusterManagerStatusConditionsArgs and ClusterManagerStatusConditionsOutput values.
// You can construct a concrete instance of `ClusterManagerStatusConditionsInput` via:
//
//          ClusterManagerStatusConditionsArgs{...}
type ClusterManagerStatusConditionsInput interface {
	pulumi.Input

	ToClusterManagerStatusConditionsOutput() ClusterManagerStatusConditionsOutput
	ToClusterManagerStatusConditionsOutputWithContext(context.Context) ClusterManagerStatusConditionsOutput
}

// Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: "Available", "Progressing", and "Degraded"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"`
//      // other fields }
type ClusterManagerStatusConditionsArgs struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime pulumi.StringInput `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition. This may be an empty string.
	Message pulumi.StringInput `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
	Reason pulumi.StringInput `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status pulumi.StringInput `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
	Type pulumi.StringInput `pulumi:"type"`
}

func (ClusterManagerStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterManagerStatusConditions)(nil)).Elem()
}

func (i ClusterManagerStatusConditionsArgs) ToClusterManagerStatusConditionsOutput() ClusterManagerStatusConditionsOutput {
	return i.ToClusterManagerStatusConditionsOutputWithContext(context.Background())
}

func (i ClusterManagerStatusConditionsArgs) ToClusterManagerStatusConditionsOutputWithContext(ctx context.Context) ClusterManagerStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterManagerStatusConditionsOutput)
}

// ClusterManagerStatusConditionsArrayInput is an input type that accepts ClusterManagerStatusConditionsArray and ClusterManagerStatusConditionsArrayOutput values.
// You can construct a concrete instance of `ClusterManagerStatusConditionsArrayInput` via:
//
//          ClusterManagerStatusConditionsArray{ ClusterManagerStatusConditionsArgs{...} }
type ClusterManagerStatusConditionsArrayInput interface {
	pulumi.Input

	ToClusterManagerStatusConditionsArrayOutput() ClusterManagerStatusConditionsArrayOutput
	ToClusterManagerStatusConditionsArrayOutputWithContext(context.Context) ClusterManagerStatusConditionsArrayOutput
}

type ClusterManagerStatusConditionsArray []ClusterManagerStatusConditionsInput

func (ClusterManagerStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterManagerStatusConditions)(nil)).Elem()
}

func (i ClusterManagerStatusConditionsArray) ToClusterManagerStatusConditionsArrayOutput() ClusterManagerStatusConditionsArrayOutput {
	return i.ToClusterManagerStatusConditionsArrayOutputWithContext(context.Background())
}

func (i ClusterManagerStatusConditionsArray) ToClusterManagerStatusConditionsArrayOutputWithContext(ctx context.Context) ClusterManagerStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterManagerStatusConditionsArrayOutput)
}

// Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: "Available", "Progressing", and "Degraded"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"`
//      // other fields }
type ClusterManagerStatusConditionsOutput struct{ *pulumi.OutputState }

func (ClusterManagerStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterManagerStatusConditions)(nil)).Elem()
}

func (o ClusterManagerStatusConditionsOutput) ToClusterManagerStatusConditionsOutput() ClusterManagerStatusConditionsOutput {
	return o
}

func (o ClusterManagerStatusConditionsOutput) ToClusterManagerStatusConditionsOutputWithContext(ctx context.Context) ClusterManagerStatusConditionsOutput {
	return o
}

// lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
func (o ClusterManagerStatusConditionsOutput) LastTransitionTime() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterManagerStatusConditions) string { return v.LastTransitionTime }).(pulumi.StringOutput)
}

// message is a human readable message indicating details about the transition. This may be an empty string.
func (o ClusterManagerStatusConditionsOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterManagerStatusConditions) string { return v.Message }).(pulumi.StringOutput)
}

// observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
func (o ClusterManagerStatusConditionsOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterManagerStatusConditions) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
func (o ClusterManagerStatusConditionsOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterManagerStatusConditions) string { return v.Reason }).(pulumi.StringOutput)
}

// status of the condition, one of True, False, Unknown.
func (o ClusterManagerStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterManagerStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
func (o ClusterManagerStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterManagerStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type ClusterManagerStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (ClusterManagerStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterManagerStatusConditions)(nil)).Elem()
}

func (o ClusterManagerStatusConditionsArrayOutput) ToClusterManagerStatusConditionsArrayOutput() ClusterManagerStatusConditionsArrayOutput {
	return o
}

func (o ClusterManagerStatusConditionsArrayOutput) ToClusterManagerStatusConditionsArrayOutputWithContext(ctx context.Context) ClusterManagerStatusConditionsArrayOutput {
	return o
}

func (o ClusterManagerStatusConditionsArrayOutput) Index(i pulumi.IntInput) ClusterManagerStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterManagerStatusConditions {
		return vs[0].([]ClusterManagerStatusConditions)[vs[1].(int)]
	}).(ClusterManagerStatusConditionsOutput)
}

// GenerationStatus keeps track of the generation for a given resource so that decisions about forced updates can be made. the definition matches the GenerationStatus defined in github.com/openshift/api/v1
type ClusterManagerStatusGenerations struct {
	// group is the group of the thing you're tracking
	Group *string `pulumi:"group"`
	// lastGeneration is the last generation of the thing that controller applies
	LastGeneration *int `pulumi:"lastGeneration"`
	// name is the name of the thing you're tracking
	Name *string `pulumi:"name"`
	// namespace is where the thing you're tracking is
	Namespace *string `pulumi:"namespace"`
	// resource is the resource type of the thing you're tracking
	Resource *string `pulumi:"resource"`
	// version is the version of the thing you're tracking
	Version *string `pulumi:"version"`
}

// ClusterManagerStatusGenerationsInput is an input type that accepts ClusterManagerStatusGenerationsArgs and ClusterManagerStatusGenerationsOutput values.
// You can construct a concrete instance of `ClusterManagerStatusGenerationsInput` via:
//
//          ClusterManagerStatusGenerationsArgs{...}
type ClusterManagerStatusGenerationsInput interface {
	pulumi.Input

	ToClusterManagerStatusGenerationsOutput() ClusterManagerStatusGenerationsOutput
	ToClusterManagerStatusGenerationsOutputWithContext(context.Context) ClusterManagerStatusGenerationsOutput
}

// GenerationStatus keeps track of the generation for a given resource so that decisions about forced updates can be made. the definition matches the GenerationStatus defined in github.com/openshift/api/v1
type ClusterManagerStatusGenerationsArgs struct {
	// group is the group of the thing you're tracking
	Group pulumi.StringPtrInput `pulumi:"group"`
	// lastGeneration is the last generation of the thing that controller applies
	LastGeneration pulumi.IntPtrInput `pulumi:"lastGeneration"`
	// name is the name of the thing you're tracking
	Name pulumi.StringPtrInput `pulumi:"name"`
	// namespace is where the thing you're tracking is
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// resource is the resource type of the thing you're tracking
	Resource pulumi.StringPtrInput `pulumi:"resource"`
	// version is the version of the thing you're tracking
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ClusterManagerStatusGenerationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterManagerStatusGenerations)(nil)).Elem()
}

func (i ClusterManagerStatusGenerationsArgs) ToClusterManagerStatusGenerationsOutput() ClusterManagerStatusGenerationsOutput {
	return i.ToClusterManagerStatusGenerationsOutputWithContext(context.Background())
}

func (i ClusterManagerStatusGenerationsArgs) ToClusterManagerStatusGenerationsOutputWithContext(ctx context.Context) ClusterManagerStatusGenerationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterManagerStatusGenerationsOutput)
}

// ClusterManagerStatusGenerationsArrayInput is an input type that accepts ClusterManagerStatusGenerationsArray and ClusterManagerStatusGenerationsArrayOutput values.
// You can construct a concrete instance of `ClusterManagerStatusGenerationsArrayInput` via:
//
//          ClusterManagerStatusGenerationsArray{ ClusterManagerStatusGenerationsArgs{...} }
type ClusterManagerStatusGenerationsArrayInput interface {
	pulumi.Input

	ToClusterManagerStatusGenerationsArrayOutput() ClusterManagerStatusGenerationsArrayOutput
	ToClusterManagerStatusGenerationsArrayOutputWithContext(context.Context) ClusterManagerStatusGenerationsArrayOutput
}

type ClusterManagerStatusGenerationsArray []ClusterManagerStatusGenerationsInput

func (ClusterManagerStatusGenerationsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterManagerStatusGenerations)(nil)).Elem()
}

func (i ClusterManagerStatusGenerationsArray) ToClusterManagerStatusGenerationsArrayOutput() ClusterManagerStatusGenerationsArrayOutput {
	return i.ToClusterManagerStatusGenerationsArrayOutputWithContext(context.Background())
}

func (i ClusterManagerStatusGenerationsArray) ToClusterManagerStatusGenerationsArrayOutputWithContext(ctx context.Context) ClusterManagerStatusGenerationsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterManagerStatusGenerationsArrayOutput)
}

// GenerationStatus keeps track of the generation for a given resource so that decisions about forced updates can be made. the definition matches the GenerationStatus defined in github.com/openshift/api/v1
type ClusterManagerStatusGenerationsOutput struct{ *pulumi.OutputState }

func (ClusterManagerStatusGenerationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterManagerStatusGenerations)(nil)).Elem()
}

func (o ClusterManagerStatusGenerationsOutput) ToClusterManagerStatusGenerationsOutput() ClusterManagerStatusGenerationsOutput {
	return o
}

func (o ClusterManagerStatusGenerationsOutput) ToClusterManagerStatusGenerationsOutputWithContext(ctx context.Context) ClusterManagerStatusGenerationsOutput {
	return o
}

// group is the group of the thing you're tracking
func (o ClusterManagerStatusGenerationsOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterManagerStatusGenerations) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// lastGeneration is the last generation of the thing that controller applies
func (o ClusterManagerStatusGenerationsOutput) LastGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterManagerStatusGenerations) *int { return v.LastGeneration }).(pulumi.IntPtrOutput)
}

// name is the name of the thing you're tracking
func (o ClusterManagerStatusGenerationsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterManagerStatusGenerations) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// namespace is where the thing you're tracking is
func (o ClusterManagerStatusGenerationsOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterManagerStatusGenerations) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// resource is the resource type of the thing you're tracking
func (o ClusterManagerStatusGenerationsOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterManagerStatusGenerations) *string { return v.Resource }).(pulumi.StringPtrOutput)
}

// version is the version of the thing you're tracking
func (o ClusterManagerStatusGenerationsOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterManagerStatusGenerations) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ClusterManagerStatusGenerationsArrayOutput struct{ *pulumi.OutputState }

func (ClusterManagerStatusGenerationsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterManagerStatusGenerations)(nil)).Elem()
}

func (o ClusterManagerStatusGenerationsArrayOutput) ToClusterManagerStatusGenerationsArrayOutput() ClusterManagerStatusGenerationsArrayOutput {
	return o
}

func (o ClusterManagerStatusGenerationsArrayOutput) ToClusterManagerStatusGenerationsArrayOutputWithContext(ctx context.Context) ClusterManagerStatusGenerationsArrayOutput {
	return o
}

func (o ClusterManagerStatusGenerationsArrayOutput) Index(i pulumi.IntInput) ClusterManagerStatusGenerationsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterManagerStatusGenerations {
		return vs[0].([]ClusterManagerStatusGenerations)[vs[1].(int)]
	}).(ClusterManagerStatusGenerationsOutput)
}

// RelatedResourceMeta represents the resource that is managed by an operator
type ClusterManagerStatusRelatedResources struct {
	// group is the group of the thing you're tracking
	Group *string `pulumi:"group"`
	// name is the name of the thing you're tracking
	Name *string `pulumi:"name"`
	// namespace is where the thing you're tracking is
	Namespace *string `pulumi:"namespace"`
	// resource is the resource type of the thing you're tracking
	Resource *string `pulumi:"resource"`
	// version is the version of the thing you're tracking
	Version *string `pulumi:"version"`
}

// ClusterManagerStatusRelatedResourcesInput is an input type that accepts ClusterManagerStatusRelatedResourcesArgs and ClusterManagerStatusRelatedResourcesOutput values.
// You can construct a concrete instance of `ClusterManagerStatusRelatedResourcesInput` via:
//
//          ClusterManagerStatusRelatedResourcesArgs{...}
type ClusterManagerStatusRelatedResourcesInput interface {
	pulumi.Input

	ToClusterManagerStatusRelatedResourcesOutput() ClusterManagerStatusRelatedResourcesOutput
	ToClusterManagerStatusRelatedResourcesOutputWithContext(context.Context) ClusterManagerStatusRelatedResourcesOutput
}

// RelatedResourceMeta represents the resource that is managed by an operator
type ClusterManagerStatusRelatedResourcesArgs struct {
	// group is the group of the thing you're tracking
	Group pulumi.StringPtrInput `pulumi:"group"`
	// name is the name of the thing you're tracking
	Name pulumi.StringPtrInput `pulumi:"name"`
	// namespace is where the thing you're tracking is
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// resource is the resource type of the thing you're tracking
	Resource pulumi.StringPtrInput `pulumi:"resource"`
	// version is the version of the thing you're tracking
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ClusterManagerStatusRelatedResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterManagerStatusRelatedResources)(nil)).Elem()
}

func (i ClusterManagerStatusRelatedResourcesArgs) ToClusterManagerStatusRelatedResourcesOutput() ClusterManagerStatusRelatedResourcesOutput {
	return i.ToClusterManagerStatusRelatedResourcesOutputWithContext(context.Background())
}

func (i ClusterManagerStatusRelatedResourcesArgs) ToClusterManagerStatusRelatedResourcesOutputWithContext(ctx context.Context) ClusterManagerStatusRelatedResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterManagerStatusRelatedResourcesOutput)
}

// ClusterManagerStatusRelatedResourcesArrayInput is an input type that accepts ClusterManagerStatusRelatedResourcesArray and ClusterManagerStatusRelatedResourcesArrayOutput values.
// You can construct a concrete instance of `ClusterManagerStatusRelatedResourcesArrayInput` via:
//
//          ClusterManagerStatusRelatedResourcesArray{ ClusterManagerStatusRelatedResourcesArgs{...} }
type ClusterManagerStatusRelatedResourcesArrayInput interface {
	pulumi.Input

	ToClusterManagerStatusRelatedResourcesArrayOutput() ClusterManagerStatusRelatedResourcesArrayOutput
	ToClusterManagerStatusRelatedResourcesArrayOutputWithContext(context.Context) ClusterManagerStatusRelatedResourcesArrayOutput
}

type ClusterManagerStatusRelatedResourcesArray []ClusterManagerStatusRelatedResourcesInput

func (ClusterManagerStatusRelatedResourcesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterManagerStatusRelatedResources)(nil)).Elem()
}

func (i ClusterManagerStatusRelatedResourcesArray) ToClusterManagerStatusRelatedResourcesArrayOutput() ClusterManagerStatusRelatedResourcesArrayOutput {
	return i.ToClusterManagerStatusRelatedResourcesArrayOutputWithContext(context.Background())
}

func (i ClusterManagerStatusRelatedResourcesArray) ToClusterManagerStatusRelatedResourcesArrayOutputWithContext(ctx context.Context) ClusterManagerStatusRelatedResourcesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterManagerStatusRelatedResourcesArrayOutput)
}

// RelatedResourceMeta represents the resource that is managed by an operator
type ClusterManagerStatusRelatedResourcesOutput struct{ *pulumi.OutputState }

func (ClusterManagerStatusRelatedResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterManagerStatusRelatedResources)(nil)).Elem()
}

func (o ClusterManagerStatusRelatedResourcesOutput) ToClusterManagerStatusRelatedResourcesOutput() ClusterManagerStatusRelatedResourcesOutput {
	return o
}

func (o ClusterManagerStatusRelatedResourcesOutput) ToClusterManagerStatusRelatedResourcesOutputWithContext(ctx context.Context) ClusterManagerStatusRelatedResourcesOutput {
	return o
}

// group is the group of the thing you're tracking
func (o ClusterManagerStatusRelatedResourcesOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterManagerStatusRelatedResources) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// name is the name of the thing you're tracking
func (o ClusterManagerStatusRelatedResourcesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterManagerStatusRelatedResources) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// namespace is where the thing you're tracking is
func (o ClusterManagerStatusRelatedResourcesOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterManagerStatusRelatedResources) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// resource is the resource type of the thing you're tracking
func (o ClusterManagerStatusRelatedResourcesOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterManagerStatusRelatedResources) *string { return v.Resource }).(pulumi.StringPtrOutput)
}

// version is the version of the thing you're tracking
func (o ClusterManagerStatusRelatedResourcesOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterManagerStatusRelatedResources) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ClusterManagerStatusRelatedResourcesArrayOutput struct{ *pulumi.OutputState }

func (ClusterManagerStatusRelatedResourcesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterManagerStatusRelatedResources)(nil)).Elem()
}

func (o ClusterManagerStatusRelatedResourcesArrayOutput) ToClusterManagerStatusRelatedResourcesArrayOutput() ClusterManagerStatusRelatedResourcesArrayOutput {
	return o
}

func (o ClusterManagerStatusRelatedResourcesArrayOutput) ToClusterManagerStatusRelatedResourcesArrayOutputWithContext(ctx context.Context) ClusterManagerStatusRelatedResourcesArrayOutput {
	return o
}

func (o ClusterManagerStatusRelatedResourcesArrayOutput) Index(i pulumi.IntInput) ClusterManagerStatusRelatedResourcesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterManagerStatusRelatedResources {
		return vs[0].([]ClusterManagerStatusRelatedResources)[vs[1].(int)]
	}).(ClusterManagerStatusRelatedResourcesOutput)
}

func init() {
	pulumi.RegisterOutputType(ClusterManagerTypeOutput{})
	pulumi.RegisterOutputType(ClusterManagerMetadataOutput{})
	pulumi.RegisterOutputType(ClusterManagerSpecOutput{})
	pulumi.RegisterOutputType(ClusterManagerSpecPtrOutput{})
	pulumi.RegisterOutputType(ClusterManagerStatusOutput{})
	pulumi.RegisterOutputType(ClusterManagerStatusPtrOutput{})
	pulumi.RegisterOutputType(ClusterManagerStatusConditionsOutput{})
	pulumi.RegisterOutputType(ClusterManagerStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(ClusterManagerStatusGenerationsOutput{})
	pulumi.RegisterOutputType(ClusterManagerStatusGenerationsArrayOutput{})
	pulumi.RegisterOutputType(ClusterManagerStatusRelatedResourcesOutput{})
	pulumi.RegisterOutputType(ClusterManagerStatusRelatedResourcesArrayOutput{})
}

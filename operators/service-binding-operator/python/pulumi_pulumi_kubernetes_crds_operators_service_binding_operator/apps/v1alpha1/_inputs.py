# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'ServiceBindingRequestSpecArgs',
    'ServiceBindingRequestSpecApplicationSelectorArgs',
    'ServiceBindingRequestSpecApplicationSelectorBindingPathArgs',
    'ServiceBindingRequestSpecApplicationSelectorLabelSelectorArgs',
    'ServiceBindingRequestSpecApplicationSelectorLabelSelectorMatchExpressionsArgs',
    'ServiceBindingRequestSpecBackingServiceSelectorArgs',
    'ServiceBindingRequestSpecBackingServiceSelectorsArgs',
    'ServiceBindingRequestSpecCustomEnvVarArgs',
    'ServiceBindingRequestSpecCustomEnvVarValueFromArgs',
    'ServiceBindingRequestSpecCustomEnvVarValueFromConfigMapKeyRefArgs',
    'ServiceBindingRequestSpecCustomEnvVarValueFromFieldRefArgs',
    'ServiceBindingRequestSpecCustomEnvVarValueFromResourceFieldRefArgs',
    'ServiceBindingRequestSpecCustomEnvVarValueFromSecretKeyRefArgs',
    'ServiceBindingRequestStatusArgs',
    'ServiceBindingRequestStatusApplicationsArgs',
    'ServiceBindingRequestStatusConditionsArgs',
]

@pulumi.input_type
class ServiceBindingRequestSpecArgs:
    def __init__(__self__, *,
                 application_selector: Optional[pulumi.Input['ServiceBindingRequestSpecApplicationSelectorArgs']] = None,
                 backing_service_selector: Optional[pulumi.Input['ServiceBindingRequestSpecBackingServiceSelectorArgs']] = None,
                 backing_service_selectors: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceBindingRequestSpecBackingServiceSelectorsArgs']]]] = None,
                 custom_env_var: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceBindingRequestSpecCustomEnvVarArgs']]]] = None,
                 detect_binding_resources: Optional[pulumi.Input[bool]] = None,
                 env_var_prefix: Optional[pulumi.Input[str]] = None,
                 mount_path_prefix: Optional[pulumi.Input[str]] = None):
        """
        ServiceBindingRequestSpec defines the desired state of ServiceBindingRequest
        :param pulumi.Input['ServiceBindingRequestSpecApplicationSelectorArgs'] application_selector: ApplicationSelector is used to identify the application connecting to the backing service operator.
        :param pulumi.Input['ServiceBindingRequestSpecBackingServiceSelectorArgs'] backing_service_selector: BackingServiceSelector is used to identify the backing service operator. Deprecation Notice: In the upcoming release, this field would be depcreated. It would be mandatory to set "backingServiceSelectors".
        :param pulumi.Input[Sequence[pulumi.Input['ServiceBindingRequestSpecBackingServiceSelectorsArgs']]] backing_service_selectors: BackingServiceSelectors is used to identify multiple backing services. This would be made a required field after 'BackingServiceSelector' is removed.
        :param pulumi.Input[Sequence[pulumi.Input['ServiceBindingRequestSpecCustomEnvVarArgs']]] custom_env_var: Custom env variables
        :param pulumi.Input[bool] detect_binding_resources: DetectBindingResources is flag used to bind all non-bindable variables from different subresources owned by backing operator CR.
        :param pulumi.Input[str] env_var_prefix: EnvVarPrefix is the prefix for environment variables
        :param pulumi.Input[str] mount_path_prefix: MountPathPrefix is the prefix for volume mount
        """
        if application_selector is not None:
            pulumi.set(__self__, "application_selector", application_selector)
        if backing_service_selector is not None:
            pulumi.set(__self__, "backing_service_selector", backing_service_selector)
        if backing_service_selectors is not None:
            pulumi.set(__self__, "backing_service_selectors", backing_service_selectors)
        if custom_env_var is not None:
            pulumi.set(__self__, "custom_env_var", custom_env_var)
        if detect_binding_resources is not None:
            pulumi.set(__self__, "detect_binding_resources", detect_binding_resources)
        if env_var_prefix is not None:
            pulumi.set(__self__, "env_var_prefix", env_var_prefix)
        if mount_path_prefix is not None:
            pulumi.set(__self__, "mount_path_prefix", mount_path_prefix)

    @property
    @pulumi.getter(name="applicationSelector")
    def application_selector(self) -> Optional[pulumi.Input['ServiceBindingRequestSpecApplicationSelectorArgs']]:
        """
        ApplicationSelector is used to identify the application connecting to the backing service operator.
        """
        return pulumi.get(self, "application_selector")

    @application_selector.setter
    def application_selector(self, value: Optional[pulumi.Input['ServiceBindingRequestSpecApplicationSelectorArgs']]):
        pulumi.set(self, "application_selector", value)

    @property
    @pulumi.getter(name="backingServiceSelector")
    def backing_service_selector(self) -> Optional[pulumi.Input['ServiceBindingRequestSpecBackingServiceSelectorArgs']]:
        """
        BackingServiceSelector is used to identify the backing service operator. Deprecation Notice: In the upcoming release, this field would be depcreated. It would be mandatory to set "backingServiceSelectors".
        """
        return pulumi.get(self, "backing_service_selector")

    @backing_service_selector.setter
    def backing_service_selector(self, value: Optional[pulumi.Input['ServiceBindingRequestSpecBackingServiceSelectorArgs']]):
        pulumi.set(self, "backing_service_selector", value)

    @property
    @pulumi.getter(name="backingServiceSelectors")
    def backing_service_selectors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceBindingRequestSpecBackingServiceSelectorsArgs']]]]:
        """
        BackingServiceSelectors is used to identify multiple backing services. This would be made a required field after 'BackingServiceSelector' is removed.
        """
        return pulumi.get(self, "backing_service_selectors")

    @backing_service_selectors.setter
    def backing_service_selectors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceBindingRequestSpecBackingServiceSelectorsArgs']]]]):
        pulumi.set(self, "backing_service_selectors", value)

    @property
    @pulumi.getter(name="customEnvVar")
    def custom_env_var(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceBindingRequestSpecCustomEnvVarArgs']]]]:
        """
        Custom env variables
        """
        return pulumi.get(self, "custom_env_var")

    @custom_env_var.setter
    def custom_env_var(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceBindingRequestSpecCustomEnvVarArgs']]]]):
        pulumi.set(self, "custom_env_var", value)

    @property
    @pulumi.getter(name="detectBindingResources")
    def detect_binding_resources(self) -> Optional[pulumi.Input[bool]]:
        """
        DetectBindingResources is flag used to bind all non-bindable variables from different subresources owned by backing operator CR.
        """
        return pulumi.get(self, "detect_binding_resources")

    @detect_binding_resources.setter
    def detect_binding_resources(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "detect_binding_resources", value)

    @property
    @pulumi.getter(name="envVarPrefix")
    def env_var_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        EnvVarPrefix is the prefix for environment variables
        """
        return pulumi.get(self, "env_var_prefix")

    @env_var_prefix.setter
    def env_var_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "env_var_prefix", value)

    @property
    @pulumi.getter(name="mountPathPrefix")
    def mount_path_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        MountPathPrefix is the prefix for volume mount
        """
        return pulumi.get(self, "mount_path_prefix")

    @mount_path_prefix.setter
    def mount_path_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_path_prefix", value)


@pulumi.input_type
class ServiceBindingRequestSpecApplicationSelectorArgs:
    def __init__(__self__, *,
                 group: pulumi.Input[str],
                 resource: pulumi.Input[str],
                 version: pulumi.Input[str],
                 binding_path: Optional[pulumi.Input['ServiceBindingRequestSpecApplicationSelectorBindingPathArgs']] = None,
                 label_selector: Optional[pulumi.Input['ServiceBindingRequestSpecApplicationSelectorLabelSelectorArgs']] = None,
                 resource_ref: Optional[pulumi.Input[str]] = None):
        """
        ApplicationSelector is used to identify the application connecting to the backing service operator.
        :param pulumi.Input['ServiceBindingRequestSpecApplicationSelectorBindingPathArgs'] binding_path: BindingPath refers to the path in the application workload's schema where the binding workload would be referenced.
        :param pulumi.Input['ServiceBindingRequestSpecApplicationSelectorLabelSelectorArgs'] label_selector: A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "version", version)
        if binding_path is not None:
            pulumi.set(__self__, "binding_path", binding_path)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if resource_ref is not None:
            pulumi.set(__self__, "resource_ref", resource_ref)

    @property
    @pulumi.getter
    def group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: pulumi.Input[str]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[str]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[str]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="bindingPath")
    def binding_path(self) -> Optional[pulumi.Input['ServiceBindingRequestSpecApplicationSelectorBindingPathArgs']]:
        """
        BindingPath refers to the path in the application workload's schema where the binding workload would be referenced.
        """
        return pulumi.get(self, "binding_path")

    @binding_path.setter
    def binding_path(self, value: Optional[pulumi.Input['ServiceBindingRequestSpecApplicationSelectorBindingPathArgs']]):
        pulumi.set(self, "binding_path", value)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional[pulumi.Input['ServiceBindingRequestSpecApplicationSelectorLabelSelectorArgs']]:
        """
        A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
        """
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(self, value: Optional[pulumi.Input['ServiceBindingRequestSpecApplicationSelectorLabelSelectorArgs']]):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter(name="resourceRef")
    def resource_ref(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_ref")

    @resource_ref.setter
    def resource_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_ref", value)


@pulumi.input_type
class ServiceBindingRequestSpecApplicationSelectorBindingPathArgs:
    def __init__(__self__, *,
                 containers_path: Optional[pulumi.Input[str]] = None,
                 secret_path: Optional[pulumi.Input[str]] = None):
        """
        BindingPath refers to the path in the application workload's schema where the binding workload would be referenced.
        :param pulumi.Input[str] containers_path: ContainersPath defines the path to the corev1.Containers reference The default location is going to this: "spec.template.spec.containers"
        :param pulumi.Input[str] secret_path: SecretPath defines the path to a string field where the secret needs to be assigned. The default name is going to the value of the name of SBR CR (metadata.name)
        """
        if containers_path is not None:
            pulumi.set(__self__, "containers_path", containers_path)
        if secret_path is not None:
            pulumi.set(__self__, "secret_path", secret_path)

    @property
    @pulumi.getter(name="containersPath")
    def containers_path(self) -> Optional[pulumi.Input[str]]:
        """
        ContainersPath defines the path to the corev1.Containers reference The default location is going to this: "spec.template.spec.containers"
        """
        return pulumi.get(self, "containers_path")

    @containers_path.setter
    def containers_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "containers_path", value)

    @property
    @pulumi.getter(name="secretPath")
    def secret_path(self) -> Optional[pulumi.Input[str]]:
        """
        SecretPath defines the path to a string field where the secret needs to be assigned. The default name is going to the value of the name of SBR CR (metadata.name)
        """
        return pulumi.get(self, "secret_path")

    @secret_path.setter
    def secret_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_path", value)


@pulumi.input_type
class ServiceBindingRequestSpecApplicationSelectorLabelSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceBindingRequestSpecApplicationSelectorLabelSelectorMatchExpressionsArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
        :param pulumi.Input[Sequence[pulumi.Input['ServiceBindingRequestSpecApplicationSelectorLabelSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceBindingRequestSpecApplicationSelectorLabelSelectorMatchExpressionsArgs']]]]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceBindingRequestSpecApplicationSelectorLabelSelectorMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class ServiceBindingRequestSpecApplicationSelectorLabelSelectorMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ServiceBindingRequestSpecBackingServiceSelectorArgs:
    def __init__(__self__, *,
                 group: pulumi.Input[str],
                 kind: pulumi.Input[str],
                 resource_ref: pulumi.Input[str],
                 version: pulumi.Input[str],
                 env_var_prefix: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        BackingServiceSelector is used to identify the backing service operator. Deprecation Notice: In the upcoming release, this field would be depcreated. It would be mandatory to set "backingServiceSelectors".
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "resource_ref", resource_ref)
        pulumi.set(__self__, "version", version)
        if env_var_prefix is not None:
            pulumi.set(__self__, "env_var_prefix", env_var_prefix)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: pulumi.Input[str]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter(name="resourceRef")
    def resource_ref(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_ref")

    @resource_ref.setter
    def resource_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_ref", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[str]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[str]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="envVarPrefix")
    def env_var_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "env_var_prefix")

    @env_var_prefix.setter
    def env_var_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "env_var_prefix", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class ServiceBindingRequestSpecBackingServiceSelectorsArgs:
    def __init__(__self__, *,
                 group: pulumi.Input[str],
                 kind: pulumi.Input[str],
                 resource_ref: pulumi.Input[str],
                 version: pulumi.Input[str],
                 env_var_prefix: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        BackingServiceSelector defines the selector based on resource name, version, and resource kind
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "resource_ref", resource_ref)
        pulumi.set(__self__, "version", version)
        if env_var_prefix is not None:
            pulumi.set(__self__, "env_var_prefix", env_var_prefix)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: pulumi.Input[str]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter(name="resourceRef")
    def resource_ref(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_ref")

    @resource_ref.setter
    def resource_ref(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_ref", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[str]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[str]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="envVarPrefix")
    def env_var_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "env_var_prefix")

    @env_var_prefix.setter
    def env_var_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "env_var_prefix", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class ServiceBindingRequestSpecCustomEnvVarArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None,
                 value_from: Optional[pulumi.Input['ServiceBindingRequestSpecCustomEnvVarValueFromArgs']] = None):
        """
        EnvVar represents an environment variable present in a Container.
        :param pulumi.Input[str] name: Name of the environment variable. Must be a C_IDENTIFIER.
        :param pulumi.Input[str] value: Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        :param pulumi.Input['ServiceBindingRequestSpecCustomEnvVarValueFromArgs'] value_from: Source for the environment variable's value. Cannot be used if value is not empty.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the environment variable. Must be a C_IDENTIFIER.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional[pulumi.Input['ServiceBindingRequestSpecCustomEnvVarValueFromArgs']]:
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        """
        return pulumi.get(self, "value_from")

    @value_from.setter
    def value_from(self, value: Optional[pulumi.Input['ServiceBindingRequestSpecCustomEnvVarValueFromArgs']]):
        pulumi.set(self, "value_from", value)


@pulumi.input_type
class ServiceBindingRequestSpecCustomEnvVarValueFromArgs:
    def __init__(__self__, *,
                 config_map_key_ref: Optional[pulumi.Input['ServiceBindingRequestSpecCustomEnvVarValueFromConfigMapKeyRefArgs']] = None,
                 field_ref: Optional[pulumi.Input['ServiceBindingRequestSpecCustomEnvVarValueFromFieldRefArgs']] = None,
                 resource_field_ref: Optional[pulumi.Input['ServiceBindingRequestSpecCustomEnvVarValueFromResourceFieldRefArgs']] = None,
                 secret_key_ref: Optional[pulumi.Input['ServiceBindingRequestSpecCustomEnvVarValueFromSecretKeyRefArgs']] = None):
        """
        Source for the environment variable's value. Cannot be used if value is not empty.
        :param pulumi.Input['ServiceBindingRequestSpecCustomEnvVarValueFromConfigMapKeyRefArgs'] config_map_key_ref: Selects a key of a ConfigMap.
        :param pulumi.Input['ServiceBindingRequestSpecCustomEnvVarValueFromFieldRefArgs'] field_ref: Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
        :param pulumi.Input['ServiceBindingRequestSpecCustomEnvVarValueFromResourceFieldRefArgs'] resource_field_ref: Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param pulumi.Input['ServiceBindingRequestSpecCustomEnvVarValueFromSecretKeyRefArgs'] secret_key_ref: Selects a key of a secret in the pod's namespace
        """
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional[pulumi.Input['ServiceBindingRequestSpecCustomEnvVarValueFromConfigMapKeyRefArgs']]:
        """
        Selects a key of a ConfigMap.
        """
        return pulumi.get(self, "config_map_key_ref")

    @config_map_key_ref.setter
    def config_map_key_ref(self, value: Optional[pulumi.Input['ServiceBindingRequestSpecCustomEnvVarValueFromConfigMapKeyRefArgs']]):
        pulumi.set(self, "config_map_key_ref", value)

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional[pulumi.Input['ServiceBindingRequestSpecCustomEnvVarValueFromFieldRefArgs']]:
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
        """
        return pulumi.get(self, "field_ref")

    @field_ref.setter
    def field_ref(self, value: Optional[pulumi.Input['ServiceBindingRequestSpecCustomEnvVarValueFromFieldRefArgs']]):
        pulumi.set(self, "field_ref", value)

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional[pulumi.Input['ServiceBindingRequestSpecCustomEnvVarValueFromResourceFieldRefArgs']]:
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        """
        return pulumi.get(self, "resource_field_ref")

    @resource_field_ref.setter
    def resource_field_ref(self, value: Optional[pulumi.Input['ServiceBindingRequestSpecCustomEnvVarValueFromResourceFieldRefArgs']]):
        pulumi.set(self, "resource_field_ref", value)

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional[pulumi.Input['ServiceBindingRequestSpecCustomEnvVarValueFromSecretKeyRefArgs']]:
        """
        Selects a key of a secret in the pod's namespace
        """
        return pulumi.get(self, "secret_key_ref")

    @secret_key_ref.setter
    def secret_key_ref(self, value: Optional[pulumi.Input['ServiceBindingRequestSpecCustomEnvVarValueFromSecretKeyRefArgs']]):
        pulumi.set(self, "secret_key_ref", value)


@pulumi.input_type
class ServiceBindingRequestSpecCustomEnvVarValueFromConfigMapKeyRefArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        Selects a key of a ConfigMap.
        :param pulumi.Input[str] key: The key to select.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the ConfigMap or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key to select.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the ConfigMap or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class ServiceBindingRequestSpecCustomEnvVarValueFromFieldRefArgs:
    def __init__(__self__, *,
                 field_path: pulumi.Input[str],
                 api_version: Optional[pulumi.Input[str]] = None):
        """
        Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
        :param pulumi.Input[str] field_path: Path of the field to select in the specified API version.
        :param pulumi.Input[str] api_version: Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        pulumi.set(__self__, "field_path", field_path)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> pulumi.Input[str]:
        """
        Path of the field to select in the specified API version.
        """
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_path", value)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)


@pulumi.input_type
class ServiceBindingRequestSpecCustomEnvVarValueFromResourceFieldRefArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 container_name: Optional[pulumi.Input[str]] = None,
                 divisor: Optional[pulumi.Input[str]] = None):
        """
        Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
        :param pulumi.Input[str] resource: Required: resource to select
        :param pulumi.Input[str] container_name: Container name: required for volumes, optional for env vars
        :param pulumi.Input[str] divisor: Specifies the output format of the exposed resources, defaults to "1"
        """
        pulumi.set(__self__, "resource", resource)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if divisor is not None:
            pulumi.set(__self__, "divisor", divisor)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        """
        Required: resource to select
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Container name: required for volumes, optional for env vars
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter
    def divisor(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the output format of the exposed resources, defaults to "1"
        """
        return pulumi.get(self, "divisor")

    @divisor.setter
    def divisor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "divisor", value)


@pulumi.input_type
class ServiceBindingRequestSpecCustomEnvVarValueFromSecretKeyRefArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None):
        """
        Selects a key of a secret in the pod's namespace
        :param pulumi.Input[str] key: The key of the secret to select from.  Must be a valid secret key.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        :param pulumi.Input[bool] optional: Specify whether the Secret or its key must be defined
        """
        pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key of the secret to select from.  Must be a valid secret key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether the Secret or its key must be defined
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)


@pulumi.input_type
class ServiceBindingRequestStatusArgs:
    def __init__(__self__, *,
                 conditions: pulumi.Input[Sequence[pulumi.Input['ServiceBindingRequestStatusConditionsArgs']]],
                 secret: pulumi.Input[str],
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceBindingRequestStatusApplicationsArgs']]]] = None):
        """
        ServiceBindingRequestStatus defines the observed state of ServiceBindingRequest
        :param pulumi.Input[Sequence[pulumi.Input['ServiceBindingRequestStatusConditionsArgs']]] conditions: Conditions describes the state of the operator's reconciliation functionality.
        :param pulumi.Input[str] secret: Secret is the name of the intermediate secret
        :param pulumi.Input[Sequence[pulumi.Input['ServiceBindingRequestStatusApplicationsArgs']]] applications: Applications contain all the applications filtered by name or label
        """
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "secret", secret)
        if applications is not None:
            pulumi.set(__self__, "applications", applications)

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input['ServiceBindingRequestStatusConditionsArgs']]]:
        """
        Conditions describes the state of the operator's reconciliation functionality.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input['ServiceBindingRequestStatusConditionsArgs']]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def secret(self) -> pulumi.Input[str]:
        """
        Secret is the name of the intermediate secret
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceBindingRequestStatusApplicationsArgs']]]]:
        """
        Applications contain all the applications filtered by name or label
        """
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceBindingRequestStatusApplicationsArgs']]]]):
        pulumi.set(self, "applications", value)


@pulumi.input_type
class ServiceBindingRequestStatusApplicationsArgs:
    def __init__(__self__, *,
                 group: pulumi.Input[str],
                 kind: pulumi.Input[str],
                 version: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        BoundApplication defines the application workloads to which the binding secret has injected.
        :param pulumi.Input[str] name: Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "version", version)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: pulumi.Input[str]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[str]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[str]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ServiceBindingRequestStatusConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_heartbeat_time: Optional[pulumi.Input[str]] = None,
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        Condition represents the state of the operator's reconciliation functionality.
        :param pulumi.Input[str] type: ConditionType is the state of the operator's reconciliation functionality.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_heartbeat_time is not None:
            pulumi.set(__self__, "last_heartbeat_time", last_heartbeat_time)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        ConditionType is the state of the operator's reconciliation functionality.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastHeartbeatTime")
    def last_heartbeat_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_heartbeat_time")

    @last_heartbeat_time.setter
    def last_heartbeat_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_heartbeat_time", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)



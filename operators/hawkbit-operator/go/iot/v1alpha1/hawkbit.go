// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Hawkbit struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	Spec       HawkbitSpecPtrOutput       `pulumi:"spec"`
	Status     HawkbitStatusPtrOutput     `pulumi:"status"`
}

// NewHawkbit registers a new resource with the given unique name, arguments, and options.
func NewHawkbit(ctx *pulumi.Context,
	name string, args *HawkbitArgs, opts ...pulumi.ResourceOption) (*Hawkbit, error) {
	if args == nil {
		args = &HawkbitArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("iot.eclipse.org/v1alpha1")
	args.Kind = pulumi.StringPtr("Hawkbit")
	var resource Hawkbit
	err := ctx.RegisterResource("kubernetes:iot.eclipse.org/v1alpha1:Hawkbit", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHawkbit gets an existing Hawkbit resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHawkbit(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HawkbitState, opts ...pulumi.ResourceOption) (*Hawkbit, error) {
	var resource Hawkbit
	err := ctx.ReadResource("kubernetes:iot.eclipse.org/v1alpha1:Hawkbit", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Hawkbit resources.
type hawkbitState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	Spec       *HawkbitSpec       `pulumi:"spec"`
	Status     *HawkbitStatus     `pulumi:"status"`
}

type HawkbitState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	Spec       HawkbitSpecPtrInput
	Status     HawkbitStatusPtrInput
}

func (HawkbitState) ElementType() reflect.Type {
	return reflect.TypeOf((*hawkbitState)(nil)).Elem()
}

type hawkbitArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	Spec       *HawkbitSpec       `pulumi:"spec"`
	Status     *HawkbitStatus     `pulumi:"status"`
}

// The set of arguments for constructing a Hawkbit resource.
type HawkbitArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	Spec       HawkbitSpecPtrInput
	Status     HawkbitStatusPtrInput
}

func (HawkbitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hawkbitArgs)(nil)).Elem()
}

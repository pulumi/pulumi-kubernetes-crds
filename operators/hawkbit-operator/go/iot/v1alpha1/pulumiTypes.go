// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type HawkbitType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	Spec       *HawkbitSpec       `pulumi:"spec"`
	Status     *HawkbitStatus     `pulumi:"status"`
}

// HawkbitTypeInput is an input type that accepts HawkbitTypeArgs and HawkbitTypeOutput values.
// You can construct a concrete instance of `HawkbitTypeInput` via:
//
//          HawkbitTypeArgs{...}
type HawkbitTypeInput interface {
	pulumi.Input

	ToHawkbitTypeOutput() HawkbitTypeOutput
	ToHawkbitTypeOutputWithContext(context.Context) HawkbitTypeOutput
}

type HawkbitTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Spec       HawkbitSpecPtrInput       `pulumi:"spec"`
	Status     HawkbitStatusPtrInput     `pulumi:"status"`
}

func (HawkbitTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HawkbitType)(nil)).Elem()
}

func (i HawkbitTypeArgs) ToHawkbitTypeOutput() HawkbitTypeOutput {
	return i.ToHawkbitTypeOutputWithContext(context.Background())
}

func (i HawkbitTypeArgs) ToHawkbitTypeOutputWithContext(ctx context.Context) HawkbitTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HawkbitTypeOutput)
}

type HawkbitTypeOutput struct{ *pulumi.OutputState }

func (HawkbitTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HawkbitType)(nil)).Elem()
}

func (o HawkbitTypeOutput) ToHawkbitTypeOutput() HawkbitTypeOutput {
	return o
}

func (o HawkbitTypeOutput) ToHawkbitTypeOutputWithContext(ctx context.Context) HawkbitTypeOutput {
	return o
}

func (o HawkbitTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HawkbitType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o HawkbitTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HawkbitType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o HawkbitTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v HawkbitType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o HawkbitTypeOutput) Spec() HawkbitSpecPtrOutput {
	return o.ApplyT(func(v HawkbitType) *HawkbitSpec { return v.Spec }).(HawkbitSpecPtrOutput)
}

func (o HawkbitTypeOutput) Status() HawkbitStatusPtrOutput {
	return o.ApplyT(func(v HawkbitType) *HawkbitStatus { return v.Status }).(HawkbitStatusPtrOutput)
}

type HawkbitSpec struct {
	Database       interface{}                          `pulumi:"database"`
	ImageOverrides map[string]HawkbitSpecImageOverrides `pulumi:"imageOverrides"`
	Rabbit         interface{}                          `pulumi:"rabbit"`
	SignOn         *HawkbitSpecSignOn                   `pulumi:"signOn"`
}

// HawkbitSpecInput is an input type that accepts HawkbitSpecArgs and HawkbitSpecOutput values.
// You can construct a concrete instance of `HawkbitSpecInput` via:
//
//          HawkbitSpecArgs{...}
type HawkbitSpecInput interface {
	pulumi.Input

	ToHawkbitSpecOutput() HawkbitSpecOutput
	ToHawkbitSpecOutputWithContext(context.Context) HawkbitSpecOutput
}

type HawkbitSpecArgs struct {
	Database       pulumi.Input                      `pulumi:"database"`
	ImageOverrides HawkbitSpecImageOverridesMapInput `pulumi:"imageOverrides"`
	Rabbit         pulumi.Input                      `pulumi:"rabbit"`
	SignOn         HawkbitSpecSignOnPtrInput         `pulumi:"signOn"`
}

func (HawkbitSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HawkbitSpec)(nil)).Elem()
}

func (i HawkbitSpecArgs) ToHawkbitSpecOutput() HawkbitSpecOutput {
	return i.ToHawkbitSpecOutputWithContext(context.Background())
}

func (i HawkbitSpecArgs) ToHawkbitSpecOutputWithContext(ctx context.Context) HawkbitSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HawkbitSpecOutput)
}

func (i HawkbitSpecArgs) ToHawkbitSpecPtrOutput() HawkbitSpecPtrOutput {
	return i.ToHawkbitSpecPtrOutputWithContext(context.Background())
}

func (i HawkbitSpecArgs) ToHawkbitSpecPtrOutputWithContext(ctx context.Context) HawkbitSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HawkbitSpecOutput).ToHawkbitSpecPtrOutputWithContext(ctx)
}

// HawkbitSpecPtrInput is an input type that accepts HawkbitSpecArgs, HawkbitSpecPtr and HawkbitSpecPtrOutput values.
// You can construct a concrete instance of `HawkbitSpecPtrInput` via:
//
//          HawkbitSpecArgs{...}
//
//  or:
//
//          nil
type HawkbitSpecPtrInput interface {
	pulumi.Input

	ToHawkbitSpecPtrOutput() HawkbitSpecPtrOutput
	ToHawkbitSpecPtrOutputWithContext(context.Context) HawkbitSpecPtrOutput
}

type hawkbitSpecPtrType HawkbitSpecArgs

func HawkbitSpecPtr(v *HawkbitSpecArgs) HawkbitSpecPtrInput {
	return (*hawkbitSpecPtrType)(v)
}

func (*hawkbitSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HawkbitSpec)(nil)).Elem()
}

func (i *hawkbitSpecPtrType) ToHawkbitSpecPtrOutput() HawkbitSpecPtrOutput {
	return i.ToHawkbitSpecPtrOutputWithContext(context.Background())
}

func (i *hawkbitSpecPtrType) ToHawkbitSpecPtrOutputWithContext(ctx context.Context) HawkbitSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HawkbitSpecPtrOutput)
}

type HawkbitSpecOutput struct{ *pulumi.OutputState }

func (HawkbitSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HawkbitSpec)(nil)).Elem()
}

func (o HawkbitSpecOutput) ToHawkbitSpecOutput() HawkbitSpecOutput {
	return o
}

func (o HawkbitSpecOutput) ToHawkbitSpecOutputWithContext(ctx context.Context) HawkbitSpecOutput {
	return o
}

func (o HawkbitSpecOutput) ToHawkbitSpecPtrOutput() HawkbitSpecPtrOutput {
	return o.ToHawkbitSpecPtrOutputWithContext(context.Background())
}

func (o HawkbitSpecOutput) ToHawkbitSpecPtrOutputWithContext(ctx context.Context) HawkbitSpecPtrOutput {
	return o.ApplyT(func(v HawkbitSpec) *HawkbitSpec {
		return &v
	}).(HawkbitSpecPtrOutput)
}
func (o HawkbitSpecOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v HawkbitSpec) interface{} { return v.Database }).(pulumi.AnyOutput)
}

func (o HawkbitSpecOutput) ImageOverrides() HawkbitSpecImageOverridesMapOutput {
	return o.ApplyT(func(v HawkbitSpec) map[string]HawkbitSpecImageOverrides { return v.ImageOverrides }).(HawkbitSpecImageOverridesMapOutput)
}

func (o HawkbitSpecOutput) Rabbit() pulumi.AnyOutput {
	return o.ApplyT(func(v HawkbitSpec) interface{} { return v.Rabbit }).(pulumi.AnyOutput)
}

func (o HawkbitSpecOutput) SignOn() HawkbitSpecSignOnPtrOutput {
	return o.ApplyT(func(v HawkbitSpec) *HawkbitSpecSignOn { return v.SignOn }).(HawkbitSpecSignOnPtrOutput)
}

type HawkbitSpecPtrOutput struct{ *pulumi.OutputState }

func (HawkbitSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HawkbitSpec)(nil)).Elem()
}

func (o HawkbitSpecPtrOutput) ToHawkbitSpecPtrOutput() HawkbitSpecPtrOutput {
	return o
}

func (o HawkbitSpecPtrOutput) ToHawkbitSpecPtrOutputWithContext(ctx context.Context) HawkbitSpecPtrOutput {
	return o
}

func (o HawkbitSpecPtrOutput) Elem() HawkbitSpecOutput {
	return o.ApplyT(func(v *HawkbitSpec) HawkbitSpec { return *v }).(HawkbitSpecOutput)
}

func (o HawkbitSpecPtrOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v *HawkbitSpec) interface{} {
		if v == nil {
			return nil
		}
		return v.Database
	}).(pulumi.AnyOutput)
}

func (o HawkbitSpecPtrOutput) ImageOverrides() HawkbitSpecImageOverridesMapOutput {
	return o.ApplyT(func(v *HawkbitSpec) map[string]HawkbitSpecImageOverrides {
		if v == nil {
			return nil
		}
		return v.ImageOverrides
	}).(HawkbitSpecImageOverridesMapOutput)
}

func (o HawkbitSpecPtrOutput) Rabbit() pulumi.AnyOutput {
	return o.ApplyT(func(v *HawkbitSpec) interface{} {
		if v == nil {
			return nil
		}
		return v.Rabbit
	}).(pulumi.AnyOutput)
}

func (o HawkbitSpecPtrOutput) SignOn() HawkbitSpecSignOnPtrOutput {
	return o.ApplyT(func(v *HawkbitSpec) *HawkbitSpecSignOn {
		if v == nil {
			return nil
		}
		return v.SignOn
	}).(HawkbitSpecSignOnPtrOutput)
}

type HawkbitSpecImageOverrides struct {
	Image      *string `pulumi:"image"`
	PullPolicy *string `pulumi:"pullPolicy"`
}

// HawkbitSpecImageOverridesInput is an input type that accepts HawkbitSpecImageOverridesArgs and HawkbitSpecImageOverridesOutput values.
// You can construct a concrete instance of `HawkbitSpecImageOverridesInput` via:
//
//          HawkbitSpecImageOverridesArgs{...}
type HawkbitSpecImageOverridesInput interface {
	pulumi.Input

	ToHawkbitSpecImageOverridesOutput() HawkbitSpecImageOverridesOutput
	ToHawkbitSpecImageOverridesOutputWithContext(context.Context) HawkbitSpecImageOverridesOutput
}

type HawkbitSpecImageOverridesArgs struct {
	Image      pulumi.StringPtrInput `pulumi:"image"`
	PullPolicy pulumi.StringPtrInput `pulumi:"pullPolicy"`
}

func (HawkbitSpecImageOverridesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HawkbitSpecImageOverrides)(nil)).Elem()
}

func (i HawkbitSpecImageOverridesArgs) ToHawkbitSpecImageOverridesOutput() HawkbitSpecImageOverridesOutput {
	return i.ToHawkbitSpecImageOverridesOutputWithContext(context.Background())
}

func (i HawkbitSpecImageOverridesArgs) ToHawkbitSpecImageOverridesOutputWithContext(ctx context.Context) HawkbitSpecImageOverridesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HawkbitSpecImageOverridesOutput)
}

// HawkbitSpecImageOverridesMapInput is an input type that accepts HawkbitSpecImageOverridesMap and HawkbitSpecImageOverridesMapOutput values.
// You can construct a concrete instance of `HawkbitSpecImageOverridesMapInput` via:
//
//          HawkbitSpecImageOverridesMap{ "key": HawkbitSpecImageOverridesArgs{...} }
type HawkbitSpecImageOverridesMapInput interface {
	pulumi.Input

	ToHawkbitSpecImageOverridesMapOutput() HawkbitSpecImageOverridesMapOutput
	ToHawkbitSpecImageOverridesMapOutputWithContext(context.Context) HawkbitSpecImageOverridesMapOutput
}

type HawkbitSpecImageOverridesMap map[string]HawkbitSpecImageOverridesInput

func (HawkbitSpecImageOverridesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]HawkbitSpecImageOverrides)(nil)).Elem()
}

func (i HawkbitSpecImageOverridesMap) ToHawkbitSpecImageOverridesMapOutput() HawkbitSpecImageOverridesMapOutput {
	return i.ToHawkbitSpecImageOverridesMapOutputWithContext(context.Background())
}

func (i HawkbitSpecImageOverridesMap) ToHawkbitSpecImageOverridesMapOutputWithContext(ctx context.Context) HawkbitSpecImageOverridesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HawkbitSpecImageOverridesMapOutput)
}

type HawkbitSpecImageOverridesOutput struct{ *pulumi.OutputState }

func (HawkbitSpecImageOverridesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HawkbitSpecImageOverrides)(nil)).Elem()
}

func (o HawkbitSpecImageOverridesOutput) ToHawkbitSpecImageOverridesOutput() HawkbitSpecImageOverridesOutput {
	return o
}

func (o HawkbitSpecImageOverridesOutput) ToHawkbitSpecImageOverridesOutputWithContext(ctx context.Context) HawkbitSpecImageOverridesOutput {
	return o
}

func (o HawkbitSpecImageOverridesOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HawkbitSpecImageOverrides) *string { return v.Image }).(pulumi.StringPtrOutput)
}

func (o HawkbitSpecImageOverridesOutput) PullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HawkbitSpecImageOverrides) *string { return v.PullPolicy }).(pulumi.StringPtrOutput)
}

type HawkbitSpecImageOverridesMapOutput struct{ *pulumi.OutputState }

func (HawkbitSpecImageOverridesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]HawkbitSpecImageOverrides)(nil)).Elem()
}

func (o HawkbitSpecImageOverridesMapOutput) ToHawkbitSpecImageOverridesMapOutput() HawkbitSpecImageOverridesMapOutput {
	return o
}

func (o HawkbitSpecImageOverridesMapOutput) ToHawkbitSpecImageOverridesMapOutputWithContext(ctx context.Context) HawkbitSpecImageOverridesMapOutput {
	return o
}

func (o HawkbitSpecImageOverridesMapOutput) MapIndex(k pulumi.StringInput) HawkbitSpecImageOverridesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) HawkbitSpecImageOverrides {
		return vs[0].(map[string]HawkbitSpecImageOverrides)[vs[1].(string)]
	}).(HawkbitSpecImageOverridesOutput)
}

type HawkbitSpecSignOn struct {
	Keycloak *HawkbitSpecSignOnKeycloak `pulumi:"keycloak"`
}

// HawkbitSpecSignOnInput is an input type that accepts HawkbitSpecSignOnArgs and HawkbitSpecSignOnOutput values.
// You can construct a concrete instance of `HawkbitSpecSignOnInput` via:
//
//          HawkbitSpecSignOnArgs{...}
type HawkbitSpecSignOnInput interface {
	pulumi.Input

	ToHawkbitSpecSignOnOutput() HawkbitSpecSignOnOutput
	ToHawkbitSpecSignOnOutputWithContext(context.Context) HawkbitSpecSignOnOutput
}

type HawkbitSpecSignOnArgs struct {
	Keycloak HawkbitSpecSignOnKeycloakPtrInput `pulumi:"keycloak"`
}

func (HawkbitSpecSignOnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HawkbitSpecSignOn)(nil)).Elem()
}

func (i HawkbitSpecSignOnArgs) ToHawkbitSpecSignOnOutput() HawkbitSpecSignOnOutput {
	return i.ToHawkbitSpecSignOnOutputWithContext(context.Background())
}

func (i HawkbitSpecSignOnArgs) ToHawkbitSpecSignOnOutputWithContext(ctx context.Context) HawkbitSpecSignOnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HawkbitSpecSignOnOutput)
}

func (i HawkbitSpecSignOnArgs) ToHawkbitSpecSignOnPtrOutput() HawkbitSpecSignOnPtrOutput {
	return i.ToHawkbitSpecSignOnPtrOutputWithContext(context.Background())
}

func (i HawkbitSpecSignOnArgs) ToHawkbitSpecSignOnPtrOutputWithContext(ctx context.Context) HawkbitSpecSignOnPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HawkbitSpecSignOnOutput).ToHawkbitSpecSignOnPtrOutputWithContext(ctx)
}

// HawkbitSpecSignOnPtrInput is an input type that accepts HawkbitSpecSignOnArgs, HawkbitSpecSignOnPtr and HawkbitSpecSignOnPtrOutput values.
// You can construct a concrete instance of `HawkbitSpecSignOnPtrInput` via:
//
//          HawkbitSpecSignOnArgs{...}
//
//  or:
//
//          nil
type HawkbitSpecSignOnPtrInput interface {
	pulumi.Input

	ToHawkbitSpecSignOnPtrOutput() HawkbitSpecSignOnPtrOutput
	ToHawkbitSpecSignOnPtrOutputWithContext(context.Context) HawkbitSpecSignOnPtrOutput
}

type hawkbitSpecSignOnPtrType HawkbitSpecSignOnArgs

func HawkbitSpecSignOnPtr(v *HawkbitSpecSignOnArgs) HawkbitSpecSignOnPtrInput {
	return (*hawkbitSpecSignOnPtrType)(v)
}

func (*hawkbitSpecSignOnPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HawkbitSpecSignOn)(nil)).Elem()
}

func (i *hawkbitSpecSignOnPtrType) ToHawkbitSpecSignOnPtrOutput() HawkbitSpecSignOnPtrOutput {
	return i.ToHawkbitSpecSignOnPtrOutputWithContext(context.Background())
}

func (i *hawkbitSpecSignOnPtrType) ToHawkbitSpecSignOnPtrOutputWithContext(ctx context.Context) HawkbitSpecSignOnPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HawkbitSpecSignOnPtrOutput)
}

type HawkbitSpecSignOnOutput struct{ *pulumi.OutputState }

func (HawkbitSpecSignOnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HawkbitSpecSignOn)(nil)).Elem()
}

func (o HawkbitSpecSignOnOutput) ToHawkbitSpecSignOnOutput() HawkbitSpecSignOnOutput {
	return o
}

func (o HawkbitSpecSignOnOutput) ToHawkbitSpecSignOnOutputWithContext(ctx context.Context) HawkbitSpecSignOnOutput {
	return o
}

func (o HawkbitSpecSignOnOutput) ToHawkbitSpecSignOnPtrOutput() HawkbitSpecSignOnPtrOutput {
	return o.ToHawkbitSpecSignOnPtrOutputWithContext(context.Background())
}

func (o HawkbitSpecSignOnOutput) ToHawkbitSpecSignOnPtrOutputWithContext(ctx context.Context) HawkbitSpecSignOnPtrOutput {
	return o.ApplyT(func(v HawkbitSpecSignOn) *HawkbitSpecSignOn {
		return &v
	}).(HawkbitSpecSignOnPtrOutput)
}
func (o HawkbitSpecSignOnOutput) Keycloak() HawkbitSpecSignOnKeycloakPtrOutput {
	return o.ApplyT(func(v HawkbitSpecSignOn) *HawkbitSpecSignOnKeycloak { return v.Keycloak }).(HawkbitSpecSignOnKeycloakPtrOutput)
}

type HawkbitSpecSignOnPtrOutput struct{ *pulumi.OutputState }

func (HawkbitSpecSignOnPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HawkbitSpecSignOn)(nil)).Elem()
}

func (o HawkbitSpecSignOnPtrOutput) ToHawkbitSpecSignOnPtrOutput() HawkbitSpecSignOnPtrOutput {
	return o
}

func (o HawkbitSpecSignOnPtrOutput) ToHawkbitSpecSignOnPtrOutputWithContext(ctx context.Context) HawkbitSpecSignOnPtrOutput {
	return o
}

func (o HawkbitSpecSignOnPtrOutput) Elem() HawkbitSpecSignOnOutput {
	return o.ApplyT(func(v *HawkbitSpecSignOn) HawkbitSpecSignOn { return *v }).(HawkbitSpecSignOnOutput)
}

func (o HawkbitSpecSignOnPtrOutput) Keycloak() HawkbitSpecSignOnKeycloakPtrOutput {
	return o.ApplyT(func(v *HawkbitSpecSignOn) *HawkbitSpecSignOnKeycloak {
		if v == nil {
			return nil
		}
		return v.Keycloak
	}).(HawkbitSpecSignOnKeycloakPtrOutput)
}

type HawkbitSpecSignOnKeycloak struct {
	HawkbitUrl *string `pulumi:"hawkbitUrl"`
	// Selector for looking up Keycloak Custom Resources.
	InstanceSelector *HawkbitSpecSignOnKeycloakInstanceSelector `pulumi:"instanceSelector"`
}

// HawkbitSpecSignOnKeycloakInput is an input type that accepts HawkbitSpecSignOnKeycloakArgs and HawkbitSpecSignOnKeycloakOutput values.
// You can construct a concrete instance of `HawkbitSpecSignOnKeycloakInput` via:
//
//          HawkbitSpecSignOnKeycloakArgs{...}
type HawkbitSpecSignOnKeycloakInput interface {
	pulumi.Input

	ToHawkbitSpecSignOnKeycloakOutput() HawkbitSpecSignOnKeycloakOutput
	ToHawkbitSpecSignOnKeycloakOutputWithContext(context.Context) HawkbitSpecSignOnKeycloakOutput
}

type HawkbitSpecSignOnKeycloakArgs struct {
	HawkbitUrl pulumi.StringPtrInput `pulumi:"hawkbitUrl"`
	// Selector for looking up Keycloak Custom Resources.
	InstanceSelector HawkbitSpecSignOnKeycloakInstanceSelectorPtrInput `pulumi:"instanceSelector"`
}

func (HawkbitSpecSignOnKeycloakArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HawkbitSpecSignOnKeycloak)(nil)).Elem()
}

func (i HawkbitSpecSignOnKeycloakArgs) ToHawkbitSpecSignOnKeycloakOutput() HawkbitSpecSignOnKeycloakOutput {
	return i.ToHawkbitSpecSignOnKeycloakOutputWithContext(context.Background())
}

func (i HawkbitSpecSignOnKeycloakArgs) ToHawkbitSpecSignOnKeycloakOutputWithContext(ctx context.Context) HawkbitSpecSignOnKeycloakOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HawkbitSpecSignOnKeycloakOutput)
}

func (i HawkbitSpecSignOnKeycloakArgs) ToHawkbitSpecSignOnKeycloakPtrOutput() HawkbitSpecSignOnKeycloakPtrOutput {
	return i.ToHawkbitSpecSignOnKeycloakPtrOutputWithContext(context.Background())
}

func (i HawkbitSpecSignOnKeycloakArgs) ToHawkbitSpecSignOnKeycloakPtrOutputWithContext(ctx context.Context) HawkbitSpecSignOnKeycloakPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HawkbitSpecSignOnKeycloakOutput).ToHawkbitSpecSignOnKeycloakPtrOutputWithContext(ctx)
}

// HawkbitSpecSignOnKeycloakPtrInput is an input type that accepts HawkbitSpecSignOnKeycloakArgs, HawkbitSpecSignOnKeycloakPtr and HawkbitSpecSignOnKeycloakPtrOutput values.
// You can construct a concrete instance of `HawkbitSpecSignOnKeycloakPtrInput` via:
//
//          HawkbitSpecSignOnKeycloakArgs{...}
//
//  or:
//
//          nil
type HawkbitSpecSignOnKeycloakPtrInput interface {
	pulumi.Input

	ToHawkbitSpecSignOnKeycloakPtrOutput() HawkbitSpecSignOnKeycloakPtrOutput
	ToHawkbitSpecSignOnKeycloakPtrOutputWithContext(context.Context) HawkbitSpecSignOnKeycloakPtrOutput
}

type hawkbitSpecSignOnKeycloakPtrType HawkbitSpecSignOnKeycloakArgs

func HawkbitSpecSignOnKeycloakPtr(v *HawkbitSpecSignOnKeycloakArgs) HawkbitSpecSignOnKeycloakPtrInput {
	return (*hawkbitSpecSignOnKeycloakPtrType)(v)
}

func (*hawkbitSpecSignOnKeycloakPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HawkbitSpecSignOnKeycloak)(nil)).Elem()
}

func (i *hawkbitSpecSignOnKeycloakPtrType) ToHawkbitSpecSignOnKeycloakPtrOutput() HawkbitSpecSignOnKeycloakPtrOutput {
	return i.ToHawkbitSpecSignOnKeycloakPtrOutputWithContext(context.Background())
}

func (i *hawkbitSpecSignOnKeycloakPtrType) ToHawkbitSpecSignOnKeycloakPtrOutputWithContext(ctx context.Context) HawkbitSpecSignOnKeycloakPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HawkbitSpecSignOnKeycloakPtrOutput)
}

type HawkbitSpecSignOnKeycloakOutput struct{ *pulumi.OutputState }

func (HawkbitSpecSignOnKeycloakOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HawkbitSpecSignOnKeycloak)(nil)).Elem()
}

func (o HawkbitSpecSignOnKeycloakOutput) ToHawkbitSpecSignOnKeycloakOutput() HawkbitSpecSignOnKeycloakOutput {
	return o
}

func (o HawkbitSpecSignOnKeycloakOutput) ToHawkbitSpecSignOnKeycloakOutputWithContext(ctx context.Context) HawkbitSpecSignOnKeycloakOutput {
	return o
}

func (o HawkbitSpecSignOnKeycloakOutput) ToHawkbitSpecSignOnKeycloakPtrOutput() HawkbitSpecSignOnKeycloakPtrOutput {
	return o.ToHawkbitSpecSignOnKeycloakPtrOutputWithContext(context.Background())
}

func (o HawkbitSpecSignOnKeycloakOutput) ToHawkbitSpecSignOnKeycloakPtrOutputWithContext(ctx context.Context) HawkbitSpecSignOnKeycloakPtrOutput {
	return o.ApplyT(func(v HawkbitSpecSignOnKeycloak) *HawkbitSpecSignOnKeycloak {
		return &v
	}).(HawkbitSpecSignOnKeycloakPtrOutput)
}
func (o HawkbitSpecSignOnKeycloakOutput) HawkbitUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HawkbitSpecSignOnKeycloak) *string { return v.HawkbitUrl }).(pulumi.StringPtrOutput)
}

// Selector for looking up Keycloak Custom Resources.
func (o HawkbitSpecSignOnKeycloakOutput) InstanceSelector() HawkbitSpecSignOnKeycloakInstanceSelectorPtrOutput {
	return o.ApplyT(func(v HawkbitSpecSignOnKeycloak) *HawkbitSpecSignOnKeycloakInstanceSelector {
		return v.InstanceSelector
	}).(HawkbitSpecSignOnKeycloakInstanceSelectorPtrOutput)
}

type HawkbitSpecSignOnKeycloakPtrOutput struct{ *pulumi.OutputState }

func (HawkbitSpecSignOnKeycloakPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HawkbitSpecSignOnKeycloak)(nil)).Elem()
}

func (o HawkbitSpecSignOnKeycloakPtrOutput) ToHawkbitSpecSignOnKeycloakPtrOutput() HawkbitSpecSignOnKeycloakPtrOutput {
	return o
}

func (o HawkbitSpecSignOnKeycloakPtrOutput) ToHawkbitSpecSignOnKeycloakPtrOutputWithContext(ctx context.Context) HawkbitSpecSignOnKeycloakPtrOutput {
	return o
}

func (o HawkbitSpecSignOnKeycloakPtrOutput) Elem() HawkbitSpecSignOnKeycloakOutput {
	return o.ApplyT(func(v *HawkbitSpecSignOnKeycloak) HawkbitSpecSignOnKeycloak { return *v }).(HawkbitSpecSignOnKeycloakOutput)
}

func (o HawkbitSpecSignOnKeycloakPtrOutput) HawkbitUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HawkbitSpecSignOnKeycloak) *string {
		if v == nil {
			return nil
		}
		return v.HawkbitUrl
	}).(pulumi.StringPtrOutput)
}

// Selector for looking up Keycloak Custom Resources.
func (o HawkbitSpecSignOnKeycloakPtrOutput) InstanceSelector() HawkbitSpecSignOnKeycloakInstanceSelectorPtrOutput {
	return o.ApplyT(func(v *HawkbitSpecSignOnKeycloak) *HawkbitSpecSignOnKeycloakInstanceSelector {
		if v == nil {
			return nil
		}
		return v.InstanceSelector
	}).(HawkbitSpecSignOnKeycloakInstanceSelectorPtrOutput)
}

// Selector for looking up Keycloak Custom Resources.
type HawkbitSpecSignOnKeycloakInstanceSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// HawkbitSpecSignOnKeycloakInstanceSelectorInput is an input type that accepts HawkbitSpecSignOnKeycloakInstanceSelectorArgs and HawkbitSpecSignOnKeycloakInstanceSelectorOutput values.
// You can construct a concrete instance of `HawkbitSpecSignOnKeycloakInstanceSelectorInput` via:
//
//          HawkbitSpecSignOnKeycloakInstanceSelectorArgs{...}
type HawkbitSpecSignOnKeycloakInstanceSelectorInput interface {
	pulumi.Input

	ToHawkbitSpecSignOnKeycloakInstanceSelectorOutput() HawkbitSpecSignOnKeycloakInstanceSelectorOutput
	ToHawkbitSpecSignOnKeycloakInstanceSelectorOutputWithContext(context.Context) HawkbitSpecSignOnKeycloakInstanceSelectorOutput
}

// Selector for looking up Keycloak Custom Resources.
type HawkbitSpecSignOnKeycloakInstanceSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (HawkbitSpecSignOnKeycloakInstanceSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HawkbitSpecSignOnKeycloakInstanceSelector)(nil)).Elem()
}

func (i HawkbitSpecSignOnKeycloakInstanceSelectorArgs) ToHawkbitSpecSignOnKeycloakInstanceSelectorOutput() HawkbitSpecSignOnKeycloakInstanceSelectorOutput {
	return i.ToHawkbitSpecSignOnKeycloakInstanceSelectorOutputWithContext(context.Background())
}

func (i HawkbitSpecSignOnKeycloakInstanceSelectorArgs) ToHawkbitSpecSignOnKeycloakInstanceSelectorOutputWithContext(ctx context.Context) HawkbitSpecSignOnKeycloakInstanceSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HawkbitSpecSignOnKeycloakInstanceSelectorOutput)
}

func (i HawkbitSpecSignOnKeycloakInstanceSelectorArgs) ToHawkbitSpecSignOnKeycloakInstanceSelectorPtrOutput() HawkbitSpecSignOnKeycloakInstanceSelectorPtrOutput {
	return i.ToHawkbitSpecSignOnKeycloakInstanceSelectorPtrOutputWithContext(context.Background())
}

func (i HawkbitSpecSignOnKeycloakInstanceSelectorArgs) ToHawkbitSpecSignOnKeycloakInstanceSelectorPtrOutputWithContext(ctx context.Context) HawkbitSpecSignOnKeycloakInstanceSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HawkbitSpecSignOnKeycloakInstanceSelectorOutput).ToHawkbitSpecSignOnKeycloakInstanceSelectorPtrOutputWithContext(ctx)
}

// HawkbitSpecSignOnKeycloakInstanceSelectorPtrInput is an input type that accepts HawkbitSpecSignOnKeycloakInstanceSelectorArgs, HawkbitSpecSignOnKeycloakInstanceSelectorPtr and HawkbitSpecSignOnKeycloakInstanceSelectorPtrOutput values.
// You can construct a concrete instance of `HawkbitSpecSignOnKeycloakInstanceSelectorPtrInput` via:
//
//          HawkbitSpecSignOnKeycloakInstanceSelectorArgs{...}
//
//  or:
//
//          nil
type HawkbitSpecSignOnKeycloakInstanceSelectorPtrInput interface {
	pulumi.Input

	ToHawkbitSpecSignOnKeycloakInstanceSelectorPtrOutput() HawkbitSpecSignOnKeycloakInstanceSelectorPtrOutput
	ToHawkbitSpecSignOnKeycloakInstanceSelectorPtrOutputWithContext(context.Context) HawkbitSpecSignOnKeycloakInstanceSelectorPtrOutput
}

type hawkbitSpecSignOnKeycloakInstanceSelectorPtrType HawkbitSpecSignOnKeycloakInstanceSelectorArgs

func HawkbitSpecSignOnKeycloakInstanceSelectorPtr(v *HawkbitSpecSignOnKeycloakInstanceSelectorArgs) HawkbitSpecSignOnKeycloakInstanceSelectorPtrInput {
	return (*hawkbitSpecSignOnKeycloakInstanceSelectorPtrType)(v)
}

func (*hawkbitSpecSignOnKeycloakInstanceSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HawkbitSpecSignOnKeycloakInstanceSelector)(nil)).Elem()
}

func (i *hawkbitSpecSignOnKeycloakInstanceSelectorPtrType) ToHawkbitSpecSignOnKeycloakInstanceSelectorPtrOutput() HawkbitSpecSignOnKeycloakInstanceSelectorPtrOutput {
	return i.ToHawkbitSpecSignOnKeycloakInstanceSelectorPtrOutputWithContext(context.Background())
}

func (i *hawkbitSpecSignOnKeycloakInstanceSelectorPtrType) ToHawkbitSpecSignOnKeycloakInstanceSelectorPtrOutputWithContext(ctx context.Context) HawkbitSpecSignOnKeycloakInstanceSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HawkbitSpecSignOnKeycloakInstanceSelectorPtrOutput)
}

// Selector for looking up Keycloak Custom Resources.
type HawkbitSpecSignOnKeycloakInstanceSelectorOutput struct{ *pulumi.OutputState }

func (HawkbitSpecSignOnKeycloakInstanceSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HawkbitSpecSignOnKeycloakInstanceSelector)(nil)).Elem()
}

func (o HawkbitSpecSignOnKeycloakInstanceSelectorOutput) ToHawkbitSpecSignOnKeycloakInstanceSelectorOutput() HawkbitSpecSignOnKeycloakInstanceSelectorOutput {
	return o
}

func (o HawkbitSpecSignOnKeycloakInstanceSelectorOutput) ToHawkbitSpecSignOnKeycloakInstanceSelectorOutputWithContext(ctx context.Context) HawkbitSpecSignOnKeycloakInstanceSelectorOutput {
	return o
}

func (o HawkbitSpecSignOnKeycloakInstanceSelectorOutput) ToHawkbitSpecSignOnKeycloakInstanceSelectorPtrOutput() HawkbitSpecSignOnKeycloakInstanceSelectorPtrOutput {
	return o.ToHawkbitSpecSignOnKeycloakInstanceSelectorPtrOutputWithContext(context.Background())
}

func (o HawkbitSpecSignOnKeycloakInstanceSelectorOutput) ToHawkbitSpecSignOnKeycloakInstanceSelectorPtrOutputWithContext(ctx context.Context) HawkbitSpecSignOnKeycloakInstanceSelectorPtrOutput {
	return o.ApplyT(func(v HawkbitSpecSignOnKeycloakInstanceSelector) *HawkbitSpecSignOnKeycloakInstanceSelector {
		return &v
	}).(HawkbitSpecSignOnKeycloakInstanceSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o HawkbitSpecSignOnKeycloakInstanceSelectorOutput) MatchExpressions() HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v HawkbitSpecSignOnKeycloakInstanceSelector) []HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressions {
		return v.MatchExpressions
	}).(HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o HawkbitSpecSignOnKeycloakInstanceSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v HawkbitSpecSignOnKeycloakInstanceSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type HawkbitSpecSignOnKeycloakInstanceSelectorPtrOutput struct{ *pulumi.OutputState }

func (HawkbitSpecSignOnKeycloakInstanceSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HawkbitSpecSignOnKeycloakInstanceSelector)(nil)).Elem()
}

func (o HawkbitSpecSignOnKeycloakInstanceSelectorPtrOutput) ToHawkbitSpecSignOnKeycloakInstanceSelectorPtrOutput() HawkbitSpecSignOnKeycloakInstanceSelectorPtrOutput {
	return o
}

func (o HawkbitSpecSignOnKeycloakInstanceSelectorPtrOutput) ToHawkbitSpecSignOnKeycloakInstanceSelectorPtrOutputWithContext(ctx context.Context) HawkbitSpecSignOnKeycloakInstanceSelectorPtrOutput {
	return o
}

func (o HawkbitSpecSignOnKeycloakInstanceSelectorPtrOutput) Elem() HawkbitSpecSignOnKeycloakInstanceSelectorOutput {
	return o.ApplyT(func(v *HawkbitSpecSignOnKeycloakInstanceSelector) HawkbitSpecSignOnKeycloakInstanceSelector {
		return *v
	}).(HawkbitSpecSignOnKeycloakInstanceSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o HawkbitSpecSignOnKeycloakInstanceSelectorPtrOutput) MatchExpressions() HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *HawkbitSpecSignOnKeycloakInstanceSelector) []HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o HawkbitSpecSignOnKeycloakInstanceSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HawkbitSpecSignOnKeycloakInstanceSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsInput is an input type that accepts HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsArgs and HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsInput` via:
//
//          HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsArgs{...}
type HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToHawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsOutput() HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsOutput
	ToHawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsOutputWithContext(context.Context) HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressions)(nil)).Elem()
}

func (i HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsArgs) ToHawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsOutput() HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsOutput {
	return i.ToHawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsArgs) ToHawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsOutputWithContext(ctx context.Context) HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsOutput)
}

// HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsArrayInput is an input type that accepts HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsArray and HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsArrayInput` via:
//
//          HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsArray{ HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsArgs{...} }
type HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToHawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsArrayOutput() HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsArrayOutput
	ToHawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsArrayOutputWithContext(context.Context) HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsArrayOutput
}

type HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsArray []HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsInput

func (HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressions)(nil)).Elem()
}

func (i HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsArray) ToHawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsArrayOutput() HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsArrayOutput {
	return i.ToHawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsArray) ToHawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressions)(nil)).Elem()
}

func (o HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsOutput) ToHawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsOutput() HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsOutput {
	return o
}

func (o HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsOutput) ToHawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsOutputWithContext(ctx context.Context) HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressions) string { return v.Key }).(pulumi.StringOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressions) string { return v.Operator }).(pulumi.StringOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressions) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressions)(nil)).Elem()
}

func (o HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsArrayOutput) ToHawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsArrayOutput() HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsArrayOutput {
	return o
}

func (o HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsArrayOutput) ToHawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsArrayOutput {
	return o
}

func (o HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressions {
		return vs[0].([]HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressions)[vs[1].(int)]
	}).(HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type HawkbitSpecSignOnKeycloakInstanceSelectorMatchLabels struct {
}

// HawkbitSpecSignOnKeycloakInstanceSelectorMatchLabelsInput is an input type that accepts HawkbitSpecSignOnKeycloakInstanceSelectorMatchLabelsArgs and HawkbitSpecSignOnKeycloakInstanceSelectorMatchLabelsOutput values.
// You can construct a concrete instance of `HawkbitSpecSignOnKeycloakInstanceSelectorMatchLabelsInput` via:
//
//          HawkbitSpecSignOnKeycloakInstanceSelectorMatchLabelsArgs{...}
type HawkbitSpecSignOnKeycloakInstanceSelectorMatchLabelsInput interface {
	pulumi.Input

	ToHawkbitSpecSignOnKeycloakInstanceSelectorMatchLabelsOutput() HawkbitSpecSignOnKeycloakInstanceSelectorMatchLabelsOutput
	ToHawkbitSpecSignOnKeycloakInstanceSelectorMatchLabelsOutputWithContext(context.Context) HawkbitSpecSignOnKeycloakInstanceSelectorMatchLabelsOutput
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type HawkbitSpecSignOnKeycloakInstanceSelectorMatchLabelsArgs struct {
}

func (HawkbitSpecSignOnKeycloakInstanceSelectorMatchLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HawkbitSpecSignOnKeycloakInstanceSelectorMatchLabels)(nil)).Elem()
}

func (i HawkbitSpecSignOnKeycloakInstanceSelectorMatchLabelsArgs) ToHawkbitSpecSignOnKeycloakInstanceSelectorMatchLabelsOutput() HawkbitSpecSignOnKeycloakInstanceSelectorMatchLabelsOutput {
	return i.ToHawkbitSpecSignOnKeycloakInstanceSelectorMatchLabelsOutputWithContext(context.Background())
}

func (i HawkbitSpecSignOnKeycloakInstanceSelectorMatchLabelsArgs) ToHawkbitSpecSignOnKeycloakInstanceSelectorMatchLabelsOutputWithContext(ctx context.Context) HawkbitSpecSignOnKeycloakInstanceSelectorMatchLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HawkbitSpecSignOnKeycloakInstanceSelectorMatchLabelsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type HawkbitSpecSignOnKeycloakInstanceSelectorMatchLabelsOutput struct{ *pulumi.OutputState }

func (HawkbitSpecSignOnKeycloakInstanceSelectorMatchLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HawkbitSpecSignOnKeycloakInstanceSelectorMatchLabels)(nil)).Elem()
}

func (o HawkbitSpecSignOnKeycloakInstanceSelectorMatchLabelsOutput) ToHawkbitSpecSignOnKeycloakInstanceSelectorMatchLabelsOutput() HawkbitSpecSignOnKeycloakInstanceSelectorMatchLabelsOutput {
	return o
}

func (o HawkbitSpecSignOnKeycloakInstanceSelectorMatchLabelsOutput) ToHawkbitSpecSignOnKeycloakInstanceSelectorMatchLabelsOutputWithContext(ctx context.Context) HawkbitSpecSignOnKeycloakInstanceSelectorMatchLabelsOutput {
	return o
}

type HawkbitStatus struct {
	Message *string `pulumi:"message"`
	Phase   *string `pulumi:"phase"`
}

// HawkbitStatusInput is an input type that accepts HawkbitStatusArgs and HawkbitStatusOutput values.
// You can construct a concrete instance of `HawkbitStatusInput` via:
//
//          HawkbitStatusArgs{...}
type HawkbitStatusInput interface {
	pulumi.Input

	ToHawkbitStatusOutput() HawkbitStatusOutput
	ToHawkbitStatusOutputWithContext(context.Context) HawkbitStatusOutput
}

type HawkbitStatusArgs struct {
	Message pulumi.StringPtrInput `pulumi:"message"`
	Phase   pulumi.StringPtrInput `pulumi:"phase"`
}

func (HawkbitStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HawkbitStatus)(nil)).Elem()
}

func (i HawkbitStatusArgs) ToHawkbitStatusOutput() HawkbitStatusOutput {
	return i.ToHawkbitStatusOutputWithContext(context.Background())
}

func (i HawkbitStatusArgs) ToHawkbitStatusOutputWithContext(ctx context.Context) HawkbitStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HawkbitStatusOutput)
}

func (i HawkbitStatusArgs) ToHawkbitStatusPtrOutput() HawkbitStatusPtrOutput {
	return i.ToHawkbitStatusPtrOutputWithContext(context.Background())
}

func (i HawkbitStatusArgs) ToHawkbitStatusPtrOutputWithContext(ctx context.Context) HawkbitStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HawkbitStatusOutput).ToHawkbitStatusPtrOutputWithContext(ctx)
}

// HawkbitStatusPtrInput is an input type that accepts HawkbitStatusArgs, HawkbitStatusPtr and HawkbitStatusPtrOutput values.
// You can construct a concrete instance of `HawkbitStatusPtrInput` via:
//
//          HawkbitStatusArgs{...}
//
//  or:
//
//          nil
type HawkbitStatusPtrInput interface {
	pulumi.Input

	ToHawkbitStatusPtrOutput() HawkbitStatusPtrOutput
	ToHawkbitStatusPtrOutputWithContext(context.Context) HawkbitStatusPtrOutput
}

type hawkbitStatusPtrType HawkbitStatusArgs

func HawkbitStatusPtr(v *HawkbitStatusArgs) HawkbitStatusPtrInput {
	return (*hawkbitStatusPtrType)(v)
}

func (*hawkbitStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HawkbitStatus)(nil)).Elem()
}

func (i *hawkbitStatusPtrType) ToHawkbitStatusPtrOutput() HawkbitStatusPtrOutput {
	return i.ToHawkbitStatusPtrOutputWithContext(context.Background())
}

func (i *hawkbitStatusPtrType) ToHawkbitStatusPtrOutputWithContext(ctx context.Context) HawkbitStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HawkbitStatusPtrOutput)
}

type HawkbitStatusOutput struct{ *pulumi.OutputState }

func (HawkbitStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HawkbitStatus)(nil)).Elem()
}

func (o HawkbitStatusOutput) ToHawkbitStatusOutput() HawkbitStatusOutput {
	return o
}

func (o HawkbitStatusOutput) ToHawkbitStatusOutputWithContext(ctx context.Context) HawkbitStatusOutput {
	return o
}

func (o HawkbitStatusOutput) ToHawkbitStatusPtrOutput() HawkbitStatusPtrOutput {
	return o.ToHawkbitStatusPtrOutputWithContext(context.Background())
}

func (o HawkbitStatusOutput) ToHawkbitStatusPtrOutputWithContext(ctx context.Context) HawkbitStatusPtrOutput {
	return o.ApplyT(func(v HawkbitStatus) *HawkbitStatus {
		return &v
	}).(HawkbitStatusPtrOutput)
}
func (o HawkbitStatusOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HawkbitStatus) *string { return v.Message }).(pulumi.StringPtrOutput)
}

func (o HawkbitStatusOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HawkbitStatus) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

type HawkbitStatusPtrOutput struct{ *pulumi.OutputState }

func (HawkbitStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HawkbitStatus)(nil)).Elem()
}

func (o HawkbitStatusPtrOutput) ToHawkbitStatusPtrOutput() HawkbitStatusPtrOutput {
	return o
}

func (o HawkbitStatusPtrOutput) ToHawkbitStatusPtrOutputWithContext(ctx context.Context) HawkbitStatusPtrOutput {
	return o
}

func (o HawkbitStatusPtrOutput) Elem() HawkbitStatusOutput {
	return o.ApplyT(func(v *HawkbitStatus) HawkbitStatus { return *v }).(HawkbitStatusOutput)
}

func (o HawkbitStatusPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HawkbitStatus) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

func (o HawkbitStatusPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HawkbitStatus) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(HawkbitTypeOutput{})
	pulumi.RegisterOutputType(HawkbitSpecOutput{})
	pulumi.RegisterOutputType(HawkbitSpecPtrOutput{})
	pulumi.RegisterOutputType(HawkbitSpecImageOverridesOutput{})
	pulumi.RegisterOutputType(HawkbitSpecImageOverridesMapOutput{})
	pulumi.RegisterOutputType(HawkbitSpecSignOnOutput{})
	pulumi.RegisterOutputType(HawkbitSpecSignOnPtrOutput{})
	pulumi.RegisterOutputType(HawkbitSpecSignOnKeycloakOutput{})
	pulumi.RegisterOutputType(HawkbitSpecSignOnKeycloakPtrOutput{})
	pulumi.RegisterOutputType(HawkbitSpecSignOnKeycloakInstanceSelectorOutput{})
	pulumi.RegisterOutputType(HawkbitSpecSignOnKeycloakInstanceSelectorPtrOutput{})
	pulumi.RegisterOutputType(HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(HawkbitSpecSignOnKeycloakInstanceSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(HawkbitSpecSignOnKeycloakInstanceSelectorMatchLabelsOutput{})
	pulumi.RegisterOutputType(HawkbitStatusOutput{})
	pulumi.RegisterOutputType(HawkbitStatusPtrOutput{})
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type HawkbitType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	Spec       *HawkbitSpec       `pulumi:"spec"`
	Status     *HawkbitStatus     `pulumi:"status"`
}

// HawkbitTypeInput is an input type that accepts HawkbitTypeArgs and HawkbitTypeOutput values.
// You can construct a concrete instance of `HawkbitTypeInput` via:
//
//          HawkbitTypeArgs{...}
type HawkbitTypeInput interface {
	pulumi.Input

	ToHawkbitTypeOutput() HawkbitTypeOutput
	ToHawkbitTypeOutputWithContext(context.Context) HawkbitTypeOutput
}

type HawkbitTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Spec       HawkbitSpecPtrInput       `pulumi:"spec"`
	Status     HawkbitStatusPtrInput     `pulumi:"status"`
}

func (HawkbitTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HawkbitType)(nil)).Elem()
}

func (i HawkbitTypeArgs) ToHawkbitTypeOutput() HawkbitTypeOutput {
	return i.ToHawkbitTypeOutputWithContext(context.Background())
}

func (i HawkbitTypeArgs) ToHawkbitTypeOutputWithContext(ctx context.Context) HawkbitTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HawkbitTypeOutput)
}

type HawkbitTypeOutput struct{ *pulumi.OutputState }

func (HawkbitTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HawkbitType)(nil)).Elem()
}

func (o HawkbitTypeOutput) ToHawkbitTypeOutput() HawkbitTypeOutput {
	return o
}

func (o HawkbitTypeOutput) ToHawkbitTypeOutputWithContext(ctx context.Context) HawkbitTypeOutput {
	return o
}

func (o HawkbitTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HawkbitType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o HawkbitTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HawkbitType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o HawkbitTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v HawkbitType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o HawkbitTypeOutput) Spec() HawkbitSpecPtrOutput {
	return o.ApplyT(func(v HawkbitType) *HawkbitSpec { return v.Spec }).(HawkbitSpecPtrOutput)
}

func (o HawkbitTypeOutput) Status() HawkbitStatusPtrOutput {
	return o.ApplyT(func(v HawkbitType) *HawkbitStatus { return v.Status }).(HawkbitStatusPtrOutput)
}

type HawkbitSpec struct {
	Database       interface{}                          `pulumi:"database"`
	ImageOverrides map[string]HawkbitSpecImageOverrides `pulumi:"imageOverrides"`
	Rabbit         interface{}                          `pulumi:"rabbit"`
}

// HawkbitSpecInput is an input type that accepts HawkbitSpecArgs and HawkbitSpecOutput values.
// You can construct a concrete instance of `HawkbitSpecInput` via:
//
//          HawkbitSpecArgs{...}
type HawkbitSpecInput interface {
	pulumi.Input

	ToHawkbitSpecOutput() HawkbitSpecOutput
	ToHawkbitSpecOutputWithContext(context.Context) HawkbitSpecOutput
}

type HawkbitSpecArgs struct {
	Database       pulumi.Input                      `pulumi:"database"`
	ImageOverrides HawkbitSpecImageOverridesMapInput `pulumi:"imageOverrides"`
	Rabbit         pulumi.Input                      `pulumi:"rabbit"`
}

func (HawkbitSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HawkbitSpec)(nil)).Elem()
}

func (i HawkbitSpecArgs) ToHawkbitSpecOutput() HawkbitSpecOutput {
	return i.ToHawkbitSpecOutputWithContext(context.Background())
}

func (i HawkbitSpecArgs) ToHawkbitSpecOutputWithContext(ctx context.Context) HawkbitSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HawkbitSpecOutput)
}

func (i HawkbitSpecArgs) ToHawkbitSpecPtrOutput() HawkbitSpecPtrOutput {
	return i.ToHawkbitSpecPtrOutputWithContext(context.Background())
}

func (i HawkbitSpecArgs) ToHawkbitSpecPtrOutputWithContext(ctx context.Context) HawkbitSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HawkbitSpecOutput).ToHawkbitSpecPtrOutputWithContext(ctx)
}

// HawkbitSpecPtrInput is an input type that accepts HawkbitSpecArgs, HawkbitSpecPtr and HawkbitSpecPtrOutput values.
// You can construct a concrete instance of `HawkbitSpecPtrInput` via:
//
//          HawkbitSpecArgs{...}
//
//  or:
//
//          nil
type HawkbitSpecPtrInput interface {
	pulumi.Input

	ToHawkbitSpecPtrOutput() HawkbitSpecPtrOutput
	ToHawkbitSpecPtrOutputWithContext(context.Context) HawkbitSpecPtrOutput
}

type hawkbitSpecPtrType HawkbitSpecArgs

func HawkbitSpecPtr(v *HawkbitSpecArgs) HawkbitSpecPtrInput {
	return (*hawkbitSpecPtrType)(v)
}

func (*hawkbitSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HawkbitSpec)(nil)).Elem()
}

func (i *hawkbitSpecPtrType) ToHawkbitSpecPtrOutput() HawkbitSpecPtrOutput {
	return i.ToHawkbitSpecPtrOutputWithContext(context.Background())
}

func (i *hawkbitSpecPtrType) ToHawkbitSpecPtrOutputWithContext(ctx context.Context) HawkbitSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HawkbitSpecPtrOutput)
}

type HawkbitSpecOutput struct{ *pulumi.OutputState }

func (HawkbitSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HawkbitSpec)(nil)).Elem()
}

func (o HawkbitSpecOutput) ToHawkbitSpecOutput() HawkbitSpecOutput {
	return o
}

func (o HawkbitSpecOutput) ToHawkbitSpecOutputWithContext(ctx context.Context) HawkbitSpecOutput {
	return o
}

func (o HawkbitSpecOutput) ToHawkbitSpecPtrOutput() HawkbitSpecPtrOutput {
	return o.ToHawkbitSpecPtrOutputWithContext(context.Background())
}

func (o HawkbitSpecOutput) ToHawkbitSpecPtrOutputWithContext(ctx context.Context) HawkbitSpecPtrOutput {
	return o.ApplyT(func(v HawkbitSpec) *HawkbitSpec {
		return &v
	}).(HawkbitSpecPtrOutput)
}
func (o HawkbitSpecOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v HawkbitSpec) interface{} { return v.Database }).(pulumi.AnyOutput)
}

func (o HawkbitSpecOutput) ImageOverrides() HawkbitSpecImageOverridesMapOutput {
	return o.ApplyT(func(v HawkbitSpec) map[string]HawkbitSpecImageOverrides { return v.ImageOverrides }).(HawkbitSpecImageOverridesMapOutput)
}

func (o HawkbitSpecOutput) Rabbit() pulumi.AnyOutput {
	return o.ApplyT(func(v HawkbitSpec) interface{} { return v.Rabbit }).(pulumi.AnyOutput)
}

type HawkbitSpecPtrOutput struct{ *pulumi.OutputState }

func (HawkbitSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HawkbitSpec)(nil)).Elem()
}

func (o HawkbitSpecPtrOutput) ToHawkbitSpecPtrOutput() HawkbitSpecPtrOutput {
	return o
}

func (o HawkbitSpecPtrOutput) ToHawkbitSpecPtrOutputWithContext(ctx context.Context) HawkbitSpecPtrOutput {
	return o
}

func (o HawkbitSpecPtrOutput) Elem() HawkbitSpecOutput {
	return o.ApplyT(func(v *HawkbitSpec) HawkbitSpec { return *v }).(HawkbitSpecOutput)
}

func (o HawkbitSpecPtrOutput) Database() pulumi.AnyOutput {
	return o.ApplyT(func(v *HawkbitSpec) interface{} {
		if v == nil {
			return nil
		}
		return v.Database
	}).(pulumi.AnyOutput)
}

func (o HawkbitSpecPtrOutput) ImageOverrides() HawkbitSpecImageOverridesMapOutput {
	return o.ApplyT(func(v *HawkbitSpec) map[string]HawkbitSpecImageOverrides {
		if v == nil {
			return nil
		}
		return v.ImageOverrides
	}).(HawkbitSpecImageOverridesMapOutput)
}

func (o HawkbitSpecPtrOutput) Rabbit() pulumi.AnyOutput {
	return o.ApplyT(func(v *HawkbitSpec) interface{} {
		if v == nil {
			return nil
		}
		return v.Rabbit
	}).(pulumi.AnyOutput)
}

type HawkbitSpecImageOverrides struct {
	Image      *string `pulumi:"image"`
	PullPolicy *string `pulumi:"pullPolicy"`
}

// HawkbitSpecImageOverridesInput is an input type that accepts HawkbitSpecImageOverridesArgs and HawkbitSpecImageOverridesOutput values.
// You can construct a concrete instance of `HawkbitSpecImageOverridesInput` via:
//
//          HawkbitSpecImageOverridesArgs{...}
type HawkbitSpecImageOverridesInput interface {
	pulumi.Input

	ToHawkbitSpecImageOverridesOutput() HawkbitSpecImageOverridesOutput
	ToHawkbitSpecImageOverridesOutputWithContext(context.Context) HawkbitSpecImageOverridesOutput
}

type HawkbitSpecImageOverridesArgs struct {
	Image      pulumi.StringPtrInput `pulumi:"image"`
	PullPolicy pulumi.StringPtrInput `pulumi:"pullPolicy"`
}

func (HawkbitSpecImageOverridesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HawkbitSpecImageOverrides)(nil)).Elem()
}

func (i HawkbitSpecImageOverridesArgs) ToHawkbitSpecImageOverridesOutput() HawkbitSpecImageOverridesOutput {
	return i.ToHawkbitSpecImageOverridesOutputWithContext(context.Background())
}

func (i HawkbitSpecImageOverridesArgs) ToHawkbitSpecImageOverridesOutputWithContext(ctx context.Context) HawkbitSpecImageOverridesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HawkbitSpecImageOverridesOutput)
}

// HawkbitSpecImageOverridesMapInput is an input type that accepts HawkbitSpecImageOverridesMap and HawkbitSpecImageOverridesMapOutput values.
// You can construct a concrete instance of `HawkbitSpecImageOverridesMapInput` via:
//
//          HawkbitSpecImageOverridesMap{ "key": HawkbitSpecImageOverridesArgs{...} }
type HawkbitSpecImageOverridesMapInput interface {
	pulumi.Input

	ToHawkbitSpecImageOverridesMapOutput() HawkbitSpecImageOverridesMapOutput
	ToHawkbitSpecImageOverridesMapOutputWithContext(context.Context) HawkbitSpecImageOverridesMapOutput
}

type HawkbitSpecImageOverridesMap map[string]HawkbitSpecImageOverridesInput

func (HawkbitSpecImageOverridesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]HawkbitSpecImageOverrides)(nil)).Elem()
}

func (i HawkbitSpecImageOverridesMap) ToHawkbitSpecImageOverridesMapOutput() HawkbitSpecImageOverridesMapOutput {
	return i.ToHawkbitSpecImageOverridesMapOutputWithContext(context.Background())
}

func (i HawkbitSpecImageOverridesMap) ToHawkbitSpecImageOverridesMapOutputWithContext(ctx context.Context) HawkbitSpecImageOverridesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HawkbitSpecImageOverridesMapOutput)
}

type HawkbitSpecImageOverridesOutput struct{ *pulumi.OutputState }

func (HawkbitSpecImageOverridesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HawkbitSpecImageOverrides)(nil)).Elem()
}

func (o HawkbitSpecImageOverridesOutput) ToHawkbitSpecImageOverridesOutput() HawkbitSpecImageOverridesOutput {
	return o
}

func (o HawkbitSpecImageOverridesOutput) ToHawkbitSpecImageOverridesOutputWithContext(ctx context.Context) HawkbitSpecImageOverridesOutput {
	return o
}

func (o HawkbitSpecImageOverridesOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HawkbitSpecImageOverrides) *string { return v.Image }).(pulumi.StringPtrOutput)
}

func (o HawkbitSpecImageOverridesOutput) PullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HawkbitSpecImageOverrides) *string { return v.PullPolicy }).(pulumi.StringPtrOutput)
}

type HawkbitSpecImageOverridesMapOutput struct{ *pulumi.OutputState }

func (HawkbitSpecImageOverridesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]HawkbitSpecImageOverrides)(nil)).Elem()
}

func (o HawkbitSpecImageOverridesMapOutput) ToHawkbitSpecImageOverridesMapOutput() HawkbitSpecImageOverridesMapOutput {
	return o
}

func (o HawkbitSpecImageOverridesMapOutput) ToHawkbitSpecImageOverridesMapOutputWithContext(ctx context.Context) HawkbitSpecImageOverridesMapOutput {
	return o
}

func (o HawkbitSpecImageOverridesMapOutput) MapIndex(k pulumi.StringInput) HawkbitSpecImageOverridesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) HawkbitSpecImageOverrides {
		return vs[0].(map[string]HawkbitSpecImageOverrides)[vs[1].(string)]
	}).(HawkbitSpecImageOverridesOutput)
}

type HawkbitStatus struct {
	Message *string `pulumi:"message"`
	Phase   *string `pulumi:"phase"`
}

// HawkbitStatusInput is an input type that accepts HawkbitStatusArgs and HawkbitStatusOutput values.
// You can construct a concrete instance of `HawkbitStatusInput` via:
//
//          HawkbitStatusArgs{...}
type HawkbitStatusInput interface {
	pulumi.Input

	ToHawkbitStatusOutput() HawkbitStatusOutput
	ToHawkbitStatusOutputWithContext(context.Context) HawkbitStatusOutput
}

type HawkbitStatusArgs struct {
	Message pulumi.StringPtrInput `pulumi:"message"`
	Phase   pulumi.StringPtrInput `pulumi:"phase"`
}

func (HawkbitStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HawkbitStatus)(nil)).Elem()
}

func (i HawkbitStatusArgs) ToHawkbitStatusOutput() HawkbitStatusOutput {
	return i.ToHawkbitStatusOutputWithContext(context.Background())
}

func (i HawkbitStatusArgs) ToHawkbitStatusOutputWithContext(ctx context.Context) HawkbitStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HawkbitStatusOutput)
}

func (i HawkbitStatusArgs) ToHawkbitStatusPtrOutput() HawkbitStatusPtrOutput {
	return i.ToHawkbitStatusPtrOutputWithContext(context.Background())
}

func (i HawkbitStatusArgs) ToHawkbitStatusPtrOutputWithContext(ctx context.Context) HawkbitStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HawkbitStatusOutput).ToHawkbitStatusPtrOutputWithContext(ctx)
}

// HawkbitStatusPtrInput is an input type that accepts HawkbitStatusArgs, HawkbitStatusPtr and HawkbitStatusPtrOutput values.
// You can construct a concrete instance of `HawkbitStatusPtrInput` via:
//
//          HawkbitStatusArgs{...}
//
//  or:
//
//          nil
type HawkbitStatusPtrInput interface {
	pulumi.Input

	ToHawkbitStatusPtrOutput() HawkbitStatusPtrOutput
	ToHawkbitStatusPtrOutputWithContext(context.Context) HawkbitStatusPtrOutput
}

type hawkbitStatusPtrType HawkbitStatusArgs

func HawkbitStatusPtr(v *HawkbitStatusArgs) HawkbitStatusPtrInput {
	return (*hawkbitStatusPtrType)(v)
}

func (*hawkbitStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HawkbitStatus)(nil)).Elem()
}

func (i *hawkbitStatusPtrType) ToHawkbitStatusPtrOutput() HawkbitStatusPtrOutput {
	return i.ToHawkbitStatusPtrOutputWithContext(context.Background())
}

func (i *hawkbitStatusPtrType) ToHawkbitStatusPtrOutputWithContext(ctx context.Context) HawkbitStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HawkbitStatusPtrOutput)
}

type HawkbitStatusOutput struct{ *pulumi.OutputState }

func (HawkbitStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HawkbitStatus)(nil)).Elem()
}

func (o HawkbitStatusOutput) ToHawkbitStatusOutput() HawkbitStatusOutput {
	return o
}

func (o HawkbitStatusOutput) ToHawkbitStatusOutputWithContext(ctx context.Context) HawkbitStatusOutput {
	return o
}

func (o HawkbitStatusOutput) ToHawkbitStatusPtrOutput() HawkbitStatusPtrOutput {
	return o.ToHawkbitStatusPtrOutputWithContext(context.Background())
}

func (o HawkbitStatusOutput) ToHawkbitStatusPtrOutputWithContext(ctx context.Context) HawkbitStatusPtrOutput {
	return o.ApplyT(func(v HawkbitStatus) *HawkbitStatus {
		return &v
	}).(HawkbitStatusPtrOutput)
}
func (o HawkbitStatusOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HawkbitStatus) *string { return v.Message }).(pulumi.StringPtrOutput)
}

func (o HawkbitStatusOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HawkbitStatus) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

type HawkbitStatusPtrOutput struct{ *pulumi.OutputState }

func (HawkbitStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HawkbitStatus)(nil)).Elem()
}

func (o HawkbitStatusPtrOutput) ToHawkbitStatusPtrOutput() HawkbitStatusPtrOutput {
	return o
}

func (o HawkbitStatusPtrOutput) ToHawkbitStatusPtrOutputWithContext(ctx context.Context) HawkbitStatusPtrOutput {
	return o
}

func (o HawkbitStatusPtrOutput) Elem() HawkbitStatusOutput {
	return o.ApplyT(func(v *HawkbitStatus) HawkbitStatus { return *v }).(HawkbitStatusOutput)
}

func (o HawkbitStatusPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HawkbitStatus) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

func (o HawkbitStatusPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HawkbitStatus) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(HawkbitTypeOutput{})
	pulumi.RegisterOutputType(HawkbitSpecOutput{})
	pulumi.RegisterOutputType(HawkbitSpecPtrOutput{})
	pulumi.RegisterOutputType(HawkbitSpecImageOverridesOutput{})
	pulumi.RegisterOutputType(HawkbitSpecImageOverridesMapOutput{})
	pulumi.RegisterOutputType(HawkbitStatusOutput{})
	pulumi.RegisterOutputType(HawkbitStatusPtrOutput{})
}

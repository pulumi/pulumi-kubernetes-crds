# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'HawkbitSpecArgs',
    'HawkbitSpecImageOverridesArgs',
    'HawkbitStatusArgs',
]

@pulumi.input_type
class HawkbitSpecArgs:
    def __init__(__self__, *,
                 database: Optional[Any] = None,
                 image_overrides: Optional[pulumi.Input[Mapping[str, pulumi.Input['HawkbitSpecImageOverridesArgs']]]] = None,
                 rabbit: Optional[Any] = None):
        if database is not None:
            pulumi.set(__self__, "database", database)
        if image_overrides is not None:
            pulumi.set(__self__, "image_overrides", image_overrides)
        if rabbit is not None:
            pulumi.set(__self__, "rabbit", rabbit)

    @property
    @pulumi.getter
    def database(self) -> Optional[Any]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[Any]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="imageOverrides")
    def image_overrides(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['HawkbitSpecImageOverridesArgs']]]]:
        return pulumi.get(self, "image_overrides")

    @image_overrides.setter
    def image_overrides(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['HawkbitSpecImageOverridesArgs']]]]):
        pulumi.set(self, "image_overrides", value)

    @property
    @pulumi.getter
    def rabbit(self) -> Optional[Any]:
        return pulumi.get(self, "rabbit")

    @rabbit.setter
    def rabbit(self, value: Optional[Any]):
        pulumi.set(self, "rabbit", value)


@pulumi.input_type
class HawkbitSpecImageOverridesArgs:
    def __init__(__self__, *,
                 image: Optional[pulumi.Input[str]] = None,
                 pull_policy: Optional[pulumi.Input[str]] = None):
        if image is not None:
            pulumi.set(__self__, "image", image)
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pull_policy")

    @pull_policy.setter
    def pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pull_policy", value)


@pulumi.input_type
class HawkbitStatusArgs:
    def __init__(__self__, *,
                 message: Optional[pulumi.Input[str]] = None,
                 phase: Optional[pulumi.Input[str]] = None):
        if message is not None:
            pulumi.set(__self__, "message", message)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def phase(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "phase")

    @phase.setter
    def phase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "phase", value)



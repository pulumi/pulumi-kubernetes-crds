# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'HawkbitSpec',
    'HawkbitSpecImageOverrides',
    'HawkbitStatus',
]

@pulumi.output_type
class HawkbitSpec(dict):
    def __init__(__self__, *,
                 database: Optional[Any] = None,
                 image_overrides: Optional[Mapping[str, 'outputs.HawkbitSpecImageOverrides']] = None,
                 rabbit: Optional[Any] = None):
        if database is not None:
            pulumi.set(__self__, "database", database)
        if image_overrides is not None:
            pulumi.set(__self__, "image_overrides", image_overrides)
        if rabbit is not None:
            pulumi.set(__self__, "rabbit", rabbit)

    @property
    @pulumi.getter
    def database(self) -> Optional[Any]:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="imageOverrides")
    def image_overrides(self) -> Optional[Mapping[str, 'outputs.HawkbitSpecImageOverrides']]:
        return pulumi.get(self, "image_overrides")

    @property
    @pulumi.getter
    def rabbit(self) -> Optional[Any]:
        return pulumi.get(self, "rabbit")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HawkbitSpecImageOverrides(dict):
    def __init__(__self__, *,
                 image: Optional[str] = None,
                 pull_policy: Optional[str] = None):
        if image is not None:
            pulumi.set(__self__, "image", image)
        if pull_policy is not None:
            pulumi.set(__self__, "pull_policy", pull_policy)

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="pullPolicy")
    def pull_policy(self) -> Optional[str]:
        return pulumi.get(self, "pull_policy")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class HawkbitStatus(dict):
    def __init__(__self__, *,
                 message: Optional[str] = None,
                 phase: Optional[str] = None):
        if message is not None:
            pulumi.set(__self__, "message", message)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def phase(self) -> Optional[str]:
        return pulumi.get(self, "phase")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



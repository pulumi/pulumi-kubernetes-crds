// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Backup is a Velero resource that respresents the capture of Kubernetes cluster state at a point in time (API objects and associated volume state).
type BackupType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// BackupSpec defines the specification for a Velero backup.
	Spec *BackupSpec `pulumi:"spec"`
	// BackupStatus captures the current status of a Velero backup.
	Status *BackupStatus `pulumi:"status"`
}

// BackupTypeInput is an input type that accepts BackupTypeArgs and BackupTypeOutput values.
// You can construct a concrete instance of `BackupTypeInput` via:
//
//          BackupTypeArgs{...}
type BackupTypeInput interface {
	pulumi.Input

	ToBackupTypeOutput() BackupTypeOutput
	ToBackupTypeOutputWithContext(context.Context) BackupTypeOutput
}

// Backup is a Velero resource that respresents the capture of Kubernetes cluster state at a point in time (API objects and associated volume state).
type BackupTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// BackupSpec defines the specification for a Velero backup.
	Spec BackupSpecPtrInput `pulumi:"spec"`
	// BackupStatus captures the current status of a Velero backup.
	Status BackupStatusPtrInput `pulumi:"status"`
}

func (BackupTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupType)(nil)).Elem()
}

func (i BackupTypeArgs) ToBackupTypeOutput() BackupTypeOutput {
	return i.ToBackupTypeOutputWithContext(context.Background())
}

func (i BackupTypeArgs) ToBackupTypeOutputWithContext(ctx context.Context) BackupTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupTypeOutput)
}

// Backup is a Velero resource that respresents the capture of Kubernetes cluster state at a point in time (API objects and associated volume state).
type BackupTypeOutput struct{ *pulumi.OutputState }

func (BackupTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupType)(nil)).Elem()
}

func (o BackupTypeOutput) ToBackupTypeOutput() BackupTypeOutput {
	return o
}

func (o BackupTypeOutput) ToBackupTypeOutputWithContext(ctx context.Context) BackupTypeOutput {
	return o
}

func (o BackupTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o BackupTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o BackupTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v BackupType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// BackupSpec defines the specification for a Velero backup.
func (o BackupTypeOutput) Spec() BackupSpecPtrOutput {
	return o.ApplyT(func(v BackupType) *BackupSpec { return v.Spec }).(BackupSpecPtrOutput)
}

// BackupStatus captures the current status of a Velero backup.
func (o BackupTypeOutput) Status() BackupStatusPtrOutput {
	return o.ApplyT(func(v BackupType) *BackupStatus { return v.Status }).(BackupStatusPtrOutput)
}

type BackupMetadata struct {
}

// BackupMetadataInput is an input type that accepts BackupMetadataArgs and BackupMetadataOutput values.
// You can construct a concrete instance of `BackupMetadataInput` via:
//
//          BackupMetadataArgs{...}
type BackupMetadataInput interface {
	pulumi.Input

	ToBackupMetadataOutput() BackupMetadataOutput
	ToBackupMetadataOutputWithContext(context.Context) BackupMetadataOutput
}

type BackupMetadataArgs struct {
}

func (BackupMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupMetadata)(nil)).Elem()
}

func (i BackupMetadataArgs) ToBackupMetadataOutput() BackupMetadataOutput {
	return i.ToBackupMetadataOutputWithContext(context.Background())
}

func (i BackupMetadataArgs) ToBackupMetadataOutputWithContext(ctx context.Context) BackupMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupMetadataOutput)
}

type BackupMetadataOutput struct{ *pulumi.OutputState }

func (BackupMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupMetadata)(nil)).Elem()
}

func (o BackupMetadataOutput) ToBackupMetadataOutput() BackupMetadataOutput {
	return o
}

func (o BackupMetadataOutput) ToBackupMetadataOutputWithContext(ctx context.Context) BackupMetadataOutput {
	return o
}

// BackupSpec defines the specification for a Velero backup.
type BackupSpec struct {
	// ExcludedNamespaces contains a list of namespaces that are not included in the backup.
	ExcludedNamespaces []string `pulumi:"excludedNamespaces"`
	// ExcludedResources is a slice of resource names that are not included in the backup.
	ExcludedResources []string `pulumi:"excludedResources"`
	// Hooks represent custom behaviors that should be executed at different phases of the backup.
	Hooks *BackupSpecHooks `pulumi:"hooks"`
	// IncludeClusterResources specifies whether cluster-scoped resources should be included for consideration in the backup.
	IncludeClusterResources *bool `pulumi:"includeClusterResources"`
	// IncludedNamespaces is a slice of namespace names to include objects from. If empty, all namespaces are included.
	IncludedNamespaces []string `pulumi:"includedNamespaces"`
	// IncludedResources is a slice of resource names to include in the backup. If empty, all resources are included.
	IncludedResources []string `pulumi:"includedResources"`
	// LabelSelector is a metav1.LabelSelector to filter with when adding individual objects to the backup. If empty or nil, all objects are included. Optional.
	LabelSelector *BackupSpecLabelSelector `pulumi:"labelSelector"`
	// SnapshotVolumes specifies whether to take cloud snapshots of any PV's referenced in the set of objects included in the Backup.
	SnapshotVolumes *bool `pulumi:"snapshotVolumes"`
	// StorageLocation is a string containing the name of a BackupStorageLocation where the backup should be stored.
	StorageLocation *string `pulumi:"storageLocation"`
	// TTL is a time.Duration-parseable string describing how long the Backup should be retained for.
	Ttl *string `pulumi:"ttl"`
	// VolumeSnapshotLocations is a list containing names of VolumeSnapshotLocations associated with this backup.
	VolumeSnapshotLocations []string `pulumi:"volumeSnapshotLocations"`
}

// BackupSpecInput is an input type that accepts BackupSpecArgs and BackupSpecOutput values.
// You can construct a concrete instance of `BackupSpecInput` via:
//
//          BackupSpecArgs{...}
type BackupSpecInput interface {
	pulumi.Input

	ToBackupSpecOutput() BackupSpecOutput
	ToBackupSpecOutputWithContext(context.Context) BackupSpecOutput
}

// BackupSpec defines the specification for a Velero backup.
type BackupSpecArgs struct {
	// ExcludedNamespaces contains a list of namespaces that are not included in the backup.
	ExcludedNamespaces pulumi.StringArrayInput `pulumi:"excludedNamespaces"`
	// ExcludedResources is a slice of resource names that are not included in the backup.
	ExcludedResources pulumi.StringArrayInput `pulumi:"excludedResources"`
	// Hooks represent custom behaviors that should be executed at different phases of the backup.
	Hooks BackupSpecHooksPtrInput `pulumi:"hooks"`
	// IncludeClusterResources specifies whether cluster-scoped resources should be included for consideration in the backup.
	IncludeClusterResources pulumi.BoolPtrInput `pulumi:"includeClusterResources"`
	// IncludedNamespaces is a slice of namespace names to include objects from. If empty, all namespaces are included.
	IncludedNamespaces pulumi.StringArrayInput `pulumi:"includedNamespaces"`
	// IncludedResources is a slice of resource names to include in the backup. If empty, all resources are included.
	IncludedResources pulumi.StringArrayInput `pulumi:"includedResources"`
	// LabelSelector is a metav1.LabelSelector to filter with when adding individual objects to the backup. If empty or nil, all objects are included. Optional.
	LabelSelector BackupSpecLabelSelectorPtrInput `pulumi:"labelSelector"`
	// SnapshotVolumes specifies whether to take cloud snapshots of any PV's referenced in the set of objects included in the Backup.
	SnapshotVolumes pulumi.BoolPtrInput `pulumi:"snapshotVolumes"`
	// StorageLocation is a string containing the name of a BackupStorageLocation where the backup should be stored.
	StorageLocation pulumi.StringPtrInput `pulumi:"storageLocation"`
	// TTL is a time.Duration-parseable string describing how long the Backup should be retained for.
	Ttl pulumi.StringPtrInput `pulumi:"ttl"`
	// VolumeSnapshotLocations is a list containing names of VolumeSnapshotLocations associated with this backup.
	VolumeSnapshotLocations pulumi.StringArrayInput `pulumi:"volumeSnapshotLocations"`
}

func (BackupSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupSpec)(nil)).Elem()
}

func (i BackupSpecArgs) ToBackupSpecOutput() BackupSpecOutput {
	return i.ToBackupSpecOutputWithContext(context.Background())
}

func (i BackupSpecArgs) ToBackupSpecOutputWithContext(ctx context.Context) BackupSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupSpecOutput)
}

func (i BackupSpecArgs) ToBackupSpecPtrOutput() BackupSpecPtrOutput {
	return i.ToBackupSpecPtrOutputWithContext(context.Background())
}

func (i BackupSpecArgs) ToBackupSpecPtrOutputWithContext(ctx context.Context) BackupSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupSpecOutput).ToBackupSpecPtrOutputWithContext(ctx)
}

// BackupSpecPtrInput is an input type that accepts BackupSpecArgs, BackupSpecPtr and BackupSpecPtrOutput values.
// You can construct a concrete instance of `BackupSpecPtrInput` via:
//
//          BackupSpecArgs{...}
//
//  or:
//
//          nil
type BackupSpecPtrInput interface {
	pulumi.Input

	ToBackupSpecPtrOutput() BackupSpecPtrOutput
	ToBackupSpecPtrOutputWithContext(context.Context) BackupSpecPtrOutput
}

type backupSpecPtrType BackupSpecArgs

func BackupSpecPtr(v *BackupSpecArgs) BackupSpecPtrInput {
	return (*backupSpecPtrType)(v)
}

func (*backupSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupSpec)(nil)).Elem()
}

func (i *backupSpecPtrType) ToBackupSpecPtrOutput() BackupSpecPtrOutput {
	return i.ToBackupSpecPtrOutputWithContext(context.Background())
}

func (i *backupSpecPtrType) ToBackupSpecPtrOutputWithContext(ctx context.Context) BackupSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupSpecPtrOutput)
}

// BackupSpec defines the specification for a Velero backup.
type BackupSpecOutput struct{ *pulumi.OutputState }

func (BackupSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupSpec)(nil)).Elem()
}

func (o BackupSpecOutput) ToBackupSpecOutput() BackupSpecOutput {
	return o
}

func (o BackupSpecOutput) ToBackupSpecOutputWithContext(ctx context.Context) BackupSpecOutput {
	return o
}

func (o BackupSpecOutput) ToBackupSpecPtrOutput() BackupSpecPtrOutput {
	return o.ToBackupSpecPtrOutputWithContext(context.Background())
}

func (o BackupSpecOutput) ToBackupSpecPtrOutputWithContext(ctx context.Context) BackupSpecPtrOutput {
	return o.ApplyT(func(v BackupSpec) *BackupSpec {
		return &v
	}).(BackupSpecPtrOutput)
}

// ExcludedNamespaces contains a list of namespaces that are not included in the backup.
func (o BackupSpecOutput) ExcludedNamespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BackupSpec) []string { return v.ExcludedNamespaces }).(pulumi.StringArrayOutput)
}

// ExcludedResources is a slice of resource names that are not included in the backup.
func (o BackupSpecOutput) ExcludedResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BackupSpec) []string { return v.ExcludedResources }).(pulumi.StringArrayOutput)
}

// Hooks represent custom behaviors that should be executed at different phases of the backup.
func (o BackupSpecOutput) Hooks() BackupSpecHooksPtrOutput {
	return o.ApplyT(func(v BackupSpec) *BackupSpecHooks { return v.Hooks }).(BackupSpecHooksPtrOutput)
}

// IncludeClusterResources specifies whether cluster-scoped resources should be included for consideration in the backup.
func (o BackupSpecOutput) IncludeClusterResources() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BackupSpec) *bool { return v.IncludeClusterResources }).(pulumi.BoolPtrOutput)
}

// IncludedNamespaces is a slice of namespace names to include objects from. If empty, all namespaces are included.
func (o BackupSpecOutput) IncludedNamespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BackupSpec) []string { return v.IncludedNamespaces }).(pulumi.StringArrayOutput)
}

// IncludedResources is a slice of resource names to include in the backup. If empty, all resources are included.
func (o BackupSpecOutput) IncludedResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BackupSpec) []string { return v.IncludedResources }).(pulumi.StringArrayOutput)
}

// LabelSelector is a metav1.LabelSelector to filter with when adding individual objects to the backup. If empty or nil, all objects are included. Optional.
func (o BackupSpecOutput) LabelSelector() BackupSpecLabelSelectorPtrOutput {
	return o.ApplyT(func(v BackupSpec) *BackupSpecLabelSelector { return v.LabelSelector }).(BackupSpecLabelSelectorPtrOutput)
}

// SnapshotVolumes specifies whether to take cloud snapshots of any PV's referenced in the set of objects included in the Backup.
func (o BackupSpecOutput) SnapshotVolumes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BackupSpec) *bool { return v.SnapshotVolumes }).(pulumi.BoolPtrOutput)
}

// StorageLocation is a string containing the name of a BackupStorageLocation where the backup should be stored.
func (o BackupSpecOutput) StorageLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSpec) *string { return v.StorageLocation }).(pulumi.StringPtrOutput)
}

// TTL is a time.Duration-parseable string describing how long the Backup should be retained for.
func (o BackupSpecOutput) Ttl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSpec) *string { return v.Ttl }).(pulumi.StringPtrOutput)
}

// VolumeSnapshotLocations is a list containing names of VolumeSnapshotLocations associated with this backup.
func (o BackupSpecOutput) VolumeSnapshotLocations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BackupSpec) []string { return v.VolumeSnapshotLocations }).(pulumi.StringArrayOutput)
}

type BackupSpecPtrOutput struct{ *pulumi.OutputState }

func (BackupSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupSpec)(nil)).Elem()
}

func (o BackupSpecPtrOutput) ToBackupSpecPtrOutput() BackupSpecPtrOutput {
	return o
}

func (o BackupSpecPtrOutput) ToBackupSpecPtrOutputWithContext(ctx context.Context) BackupSpecPtrOutput {
	return o
}

func (o BackupSpecPtrOutput) Elem() BackupSpecOutput {
	return o.ApplyT(func(v *BackupSpec) BackupSpec { return *v }).(BackupSpecOutput)
}

// ExcludedNamespaces contains a list of namespaces that are not included in the backup.
func (o BackupSpecPtrOutput) ExcludedNamespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BackupSpec) []string {
		if v == nil {
			return nil
		}
		return v.ExcludedNamespaces
	}).(pulumi.StringArrayOutput)
}

// ExcludedResources is a slice of resource names that are not included in the backup.
func (o BackupSpecPtrOutput) ExcludedResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BackupSpec) []string {
		if v == nil {
			return nil
		}
		return v.ExcludedResources
	}).(pulumi.StringArrayOutput)
}

// Hooks represent custom behaviors that should be executed at different phases of the backup.
func (o BackupSpecPtrOutput) Hooks() BackupSpecHooksPtrOutput {
	return o.ApplyT(func(v *BackupSpec) *BackupSpecHooks {
		if v == nil {
			return nil
		}
		return v.Hooks
	}).(BackupSpecHooksPtrOutput)
}

// IncludeClusterResources specifies whether cluster-scoped resources should be included for consideration in the backup.
func (o BackupSpecPtrOutput) IncludeClusterResources() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackupSpec) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeClusterResources
	}).(pulumi.BoolPtrOutput)
}

// IncludedNamespaces is a slice of namespace names to include objects from. If empty, all namespaces are included.
func (o BackupSpecPtrOutput) IncludedNamespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BackupSpec) []string {
		if v == nil {
			return nil
		}
		return v.IncludedNamespaces
	}).(pulumi.StringArrayOutput)
}

// IncludedResources is a slice of resource names to include in the backup. If empty, all resources are included.
func (o BackupSpecPtrOutput) IncludedResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BackupSpec) []string {
		if v == nil {
			return nil
		}
		return v.IncludedResources
	}).(pulumi.StringArrayOutput)
}

// LabelSelector is a metav1.LabelSelector to filter with when adding individual objects to the backup. If empty or nil, all objects are included. Optional.
func (o BackupSpecPtrOutput) LabelSelector() BackupSpecLabelSelectorPtrOutput {
	return o.ApplyT(func(v *BackupSpec) *BackupSpecLabelSelector {
		if v == nil {
			return nil
		}
		return v.LabelSelector
	}).(BackupSpecLabelSelectorPtrOutput)
}

// SnapshotVolumes specifies whether to take cloud snapshots of any PV's referenced in the set of objects included in the Backup.
func (o BackupSpecPtrOutput) SnapshotVolumes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackupSpec) *bool {
		if v == nil {
			return nil
		}
		return v.SnapshotVolumes
	}).(pulumi.BoolPtrOutput)
}

// StorageLocation is a string containing the name of a BackupStorageLocation where the backup should be stored.
func (o BackupSpecPtrOutput) StorageLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupSpec) *string {
		if v == nil {
			return nil
		}
		return v.StorageLocation
	}).(pulumi.StringPtrOutput)
}

// TTL is a time.Duration-parseable string describing how long the Backup should be retained for.
func (o BackupSpecPtrOutput) Ttl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupSpec) *string {
		if v == nil {
			return nil
		}
		return v.Ttl
	}).(pulumi.StringPtrOutput)
}

// VolumeSnapshotLocations is a list containing names of VolumeSnapshotLocations associated with this backup.
func (o BackupSpecPtrOutput) VolumeSnapshotLocations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BackupSpec) []string {
		if v == nil {
			return nil
		}
		return v.VolumeSnapshotLocations
	}).(pulumi.StringArrayOutput)
}

// Hooks represent custom behaviors that should be executed at different phases of the backup.
type BackupSpecHooks struct {
	// Resources are hooks that should be executed when backing up individual instances of a resource.
	Resources []BackupSpecHooksResources `pulumi:"resources"`
}

// BackupSpecHooksInput is an input type that accepts BackupSpecHooksArgs and BackupSpecHooksOutput values.
// You can construct a concrete instance of `BackupSpecHooksInput` via:
//
//          BackupSpecHooksArgs{...}
type BackupSpecHooksInput interface {
	pulumi.Input

	ToBackupSpecHooksOutput() BackupSpecHooksOutput
	ToBackupSpecHooksOutputWithContext(context.Context) BackupSpecHooksOutput
}

// Hooks represent custom behaviors that should be executed at different phases of the backup.
type BackupSpecHooksArgs struct {
	// Resources are hooks that should be executed when backing up individual instances of a resource.
	Resources BackupSpecHooksResourcesArrayInput `pulumi:"resources"`
}

func (BackupSpecHooksArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupSpecHooks)(nil)).Elem()
}

func (i BackupSpecHooksArgs) ToBackupSpecHooksOutput() BackupSpecHooksOutput {
	return i.ToBackupSpecHooksOutputWithContext(context.Background())
}

func (i BackupSpecHooksArgs) ToBackupSpecHooksOutputWithContext(ctx context.Context) BackupSpecHooksOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupSpecHooksOutput)
}

func (i BackupSpecHooksArgs) ToBackupSpecHooksPtrOutput() BackupSpecHooksPtrOutput {
	return i.ToBackupSpecHooksPtrOutputWithContext(context.Background())
}

func (i BackupSpecHooksArgs) ToBackupSpecHooksPtrOutputWithContext(ctx context.Context) BackupSpecHooksPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupSpecHooksOutput).ToBackupSpecHooksPtrOutputWithContext(ctx)
}

// BackupSpecHooksPtrInput is an input type that accepts BackupSpecHooksArgs, BackupSpecHooksPtr and BackupSpecHooksPtrOutput values.
// You can construct a concrete instance of `BackupSpecHooksPtrInput` via:
//
//          BackupSpecHooksArgs{...}
//
//  or:
//
//          nil
type BackupSpecHooksPtrInput interface {
	pulumi.Input

	ToBackupSpecHooksPtrOutput() BackupSpecHooksPtrOutput
	ToBackupSpecHooksPtrOutputWithContext(context.Context) BackupSpecHooksPtrOutput
}

type backupSpecHooksPtrType BackupSpecHooksArgs

func BackupSpecHooksPtr(v *BackupSpecHooksArgs) BackupSpecHooksPtrInput {
	return (*backupSpecHooksPtrType)(v)
}

func (*backupSpecHooksPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupSpecHooks)(nil)).Elem()
}

func (i *backupSpecHooksPtrType) ToBackupSpecHooksPtrOutput() BackupSpecHooksPtrOutput {
	return i.ToBackupSpecHooksPtrOutputWithContext(context.Background())
}

func (i *backupSpecHooksPtrType) ToBackupSpecHooksPtrOutputWithContext(ctx context.Context) BackupSpecHooksPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupSpecHooksPtrOutput)
}

// Hooks represent custom behaviors that should be executed at different phases of the backup.
type BackupSpecHooksOutput struct{ *pulumi.OutputState }

func (BackupSpecHooksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupSpecHooks)(nil)).Elem()
}

func (o BackupSpecHooksOutput) ToBackupSpecHooksOutput() BackupSpecHooksOutput {
	return o
}

func (o BackupSpecHooksOutput) ToBackupSpecHooksOutputWithContext(ctx context.Context) BackupSpecHooksOutput {
	return o
}

func (o BackupSpecHooksOutput) ToBackupSpecHooksPtrOutput() BackupSpecHooksPtrOutput {
	return o.ToBackupSpecHooksPtrOutputWithContext(context.Background())
}

func (o BackupSpecHooksOutput) ToBackupSpecHooksPtrOutputWithContext(ctx context.Context) BackupSpecHooksPtrOutput {
	return o.ApplyT(func(v BackupSpecHooks) *BackupSpecHooks {
		return &v
	}).(BackupSpecHooksPtrOutput)
}

// Resources are hooks that should be executed when backing up individual instances of a resource.
func (o BackupSpecHooksOutput) Resources() BackupSpecHooksResourcesArrayOutput {
	return o.ApplyT(func(v BackupSpecHooks) []BackupSpecHooksResources { return v.Resources }).(BackupSpecHooksResourcesArrayOutput)
}

type BackupSpecHooksPtrOutput struct{ *pulumi.OutputState }

func (BackupSpecHooksPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupSpecHooks)(nil)).Elem()
}

func (o BackupSpecHooksPtrOutput) ToBackupSpecHooksPtrOutput() BackupSpecHooksPtrOutput {
	return o
}

func (o BackupSpecHooksPtrOutput) ToBackupSpecHooksPtrOutputWithContext(ctx context.Context) BackupSpecHooksPtrOutput {
	return o
}

func (o BackupSpecHooksPtrOutput) Elem() BackupSpecHooksOutput {
	return o.ApplyT(func(v *BackupSpecHooks) BackupSpecHooks { return *v }).(BackupSpecHooksOutput)
}

// Resources are hooks that should be executed when backing up individual instances of a resource.
func (o BackupSpecHooksPtrOutput) Resources() BackupSpecHooksResourcesArrayOutput {
	return o.ApplyT(func(v *BackupSpecHooks) []BackupSpecHooksResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(BackupSpecHooksResourcesArrayOutput)
}

// BackupResourceHookSpec defines one or more BackupResourceHooks that should be executed based on the rules defined for namespaces, resources, and label selector.
type BackupSpecHooksResources struct {
	// ExcludedNamespaces specifies the namespaces to which this hook spec does not apply.
	ExcludedNamespaces []string `pulumi:"excludedNamespaces"`
	// ExcludedResources specifies the resources to which this hook spec does not apply.
	ExcludedResources []string `pulumi:"excludedResources"`
	// IncludedNamespaces specifies the namespaces to which this hook spec applies. If empty, it applies to all namespaces.
	IncludedNamespaces []string `pulumi:"includedNamespaces"`
	// IncludedResources specifies the resources to which this hook spec applies. If empty, it applies to all resources.
	IncludedResources []string `pulumi:"includedResources"`
	// LabelSelector, if specified, filters the resources to which this hook spec applies.
	LabelSelector *BackupSpecHooksResourcesLabelSelector `pulumi:"labelSelector"`
	// Name is the name of this hook.
	Name string `pulumi:"name"`
	// PostHooks is a list of BackupResourceHooks to execute after storing the item in the backup. These are executed after all "additional items" from item actions are processed.
	Post []BackupSpecHooksResourcesPost `pulumi:"post"`
	// PreHooks is a list of BackupResourceHooks to execute prior to storing the item in the backup. These are executed before any "additional items" from item actions are processed.
	Pre []BackupSpecHooksResourcesPre `pulumi:"pre"`
}

// BackupSpecHooksResourcesInput is an input type that accepts BackupSpecHooksResourcesArgs and BackupSpecHooksResourcesOutput values.
// You can construct a concrete instance of `BackupSpecHooksResourcesInput` via:
//
//          BackupSpecHooksResourcesArgs{...}
type BackupSpecHooksResourcesInput interface {
	pulumi.Input

	ToBackupSpecHooksResourcesOutput() BackupSpecHooksResourcesOutput
	ToBackupSpecHooksResourcesOutputWithContext(context.Context) BackupSpecHooksResourcesOutput
}

// BackupResourceHookSpec defines one or more BackupResourceHooks that should be executed based on the rules defined for namespaces, resources, and label selector.
type BackupSpecHooksResourcesArgs struct {
	// ExcludedNamespaces specifies the namespaces to which this hook spec does not apply.
	ExcludedNamespaces pulumi.StringArrayInput `pulumi:"excludedNamespaces"`
	// ExcludedResources specifies the resources to which this hook spec does not apply.
	ExcludedResources pulumi.StringArrayInput `pulumi:"excludedResources"`
	// IncludedNamespaces specifies the namespaces to which this hook spec applies. If empty, it applies to all namespaces.
	IncludedNamespaces pulumi.StringArrayInput `pulumi:"includedNamespaces"`
	// IncludedResources specifies the resources to which this hook spec applies. If empty, it applies to all resources.
	IncludedResources pulumi.StringArrayInput `pulumi:"includedResources"`
	// LabelSelector, if specified, filters the resources to which this hook spec applies.
	LabelSelector BackupSpecHooksResourcesLabelSelectorPtrInput `pulumi:"labelSelector"`
	// Name is the name of this hook.
	Name pulumi.StringInput `pulumi:"name"`
	// PostHooks is a list of BackupResourceHooks to execute after storing the item in the backup. These are executed after all "additional items" from item actions are processed.
	Post BackupSpecHooksResourcesPostArrayInput `pulumi:"post"`
	// PreHooks is a list of BackupResourceHooks to execute prior to storing the item in the backup. These are executed before any "additional items" from item actions are processed.
	Pre BackupSpecHooksResourcesPreArrayInput `pulumi:"pre"`
}

func (BackupSpecHooksResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupSpecHooksResources)(nil)).Elem()
}

func (i BackupSpecHooksResourcesArgs) ToBackupSpecHooksResourcesOutput() BackupSpecHooksResourcesOutput {
	return i.ToBackupSpecHooksResourcesOutputWithContext(context.Background())
}

func (i BackupSpecHooksResourcesArgs) ToBackupSpecHooksResourcesOutputWithContext(ctx context.Context) BackupSpecHooksResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupSpecHooksResourcesOutput)
}

// BackupSpecHooksResourcesArrayInput is an input type that accepts BackupSpecHooksResourcesArray and BackupSpecHooksResourcesArrayOutput values.
// You can construct a concrete instance of `BackupSpecHooksResourcesArrayInput` via:
//
//          BackupSpecHooksResourcesArray{ BackupSpecHooksResourcesArgs{...} }
type BackupSpecHooksResourcesArrayInput interface {
	pulumi.Input

	ToBackupSpecHooksResourcesArrayOutput() BackupSpecHooksResourcesArrayOutput
	ToBackupSpecHooksResourcesArrayOutputWithContext(context.Context) BackupSpecHooksResourcesArrayOutput
}

type BackupSpecHooksResourcesArray []BackupSpecHooksResourcesInput

func (BackupSpecHooksResourcesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackupSpecHooksResources)(nil)).Elem()
}

func (i BackupSpecHooksResourcesArray) ToBackupSpecHooksResourcesArrayOutput() BackupSpecHooksResourcesArrayOutput {
	return i.ToBackupSpecHooksResourcesArrayOutputWithContext(context.Background())
}

func (i BackupSpecHooksResourcesArray) ToBackupSpecHooksResourcesArrayOutputWithContext(ctx context.Context) BackupSpecHooksResourcesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupSpecHooksResourcesArrayOutput)
}

// BackupResourceHookSpec defines one or more BackupResourceHooks that should be executed based on the rules defined for namespaces, resources, and label selector.
type BackupSpecHooksResourcesOutput struct{ *pulumi.OutputState }

func (BackupSpecHooksResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupSpecHooksResources)(nil)).Elem()
}

func (o BackupSpecHooksResourcesOutput) ToBackupSpecHooksResourcesOutput() BackupSpecHooksResourcesOutput {
	return o
}

func (o BackupSpecHooksResourcesOutput) ToBackupSpecHooksResourcesOutputWithContext(ctx context.Context) BackupSpecHooksResourcesOutput {
	return o
}

// ExcludedNamespaces specifies the namespaces to which this hook spec does not apply.
func (o BackupSpecHooksResourcesOutput) ExcludedNamespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BackupSpecHooksResources) []string { return v.ExcludedNamespaces }).(pulumi.StringArrayOutput)
}

// ExcludedResources specifies the resources to which this hook spec does not apply.
func (o BackupSpecHooksResourcesOutput) ExcludedResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BackupSpecHooksResources) []string { return v.ExcludedResources }).(pulumi.StringArrayOutput)
}

// IncludedNamespaces specifies the namespaces to which this hook spec applies. If empty, it applies to all namespaces.
func (o BackupSpecHooksResourcesOutput) IncludedNamespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BackupSpecHooksResources) []string { return v.IncludedNamespaces }).(pulumi.StringArrayOutput)
}

// IncludedResources specifies the resources to which this hook spec applies. If empty, it applies to all resources.
func (o BackupSpecHooksResourcesOutput) IncludedResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BackupSpecHooksResources) []string { return v.IncludedResources }).(pulumi.StringArrayOutput)
}

// LabelSelector, if specified, filters the resources to which this hook spec applies.
func (o BackupSpecHooksResourcesOutput) LabelSelector() BackupSpecHooksResourcesLabelSelectorPtrOutput {
	return o.ApplyT(func(v BackupSpecHooksResources) *BackupSpecHooksResourcesLabelSelector { return v.LabelSelector }).(BackupSpecHooksResourcesLabelSelectorPtrOutput)
}

// Name is the name of this hook.
func (o BackupSpecHooksResourcesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v BackupSpecHooksResources) string { return v.Name }).(pulumi.StringOutput)
}

// PostHooks is a list of BackupResourceHooks to execute after storing the item in the backup. These are executed after all "additional items" from item actions are processed.
func (o BackupSpecHooksResourcesOutput) Post() BackupSpecHooksResourcesPostArrayOutput {
	return o.ApplyT(func(v BackupSpecHooksResources) []BackupSpecHooksResourcesPost { return v.Post }).(BackupSpecHooksResourcesPostArrayOutput)
}

// PreHooks is a list of BackupResourceHooks to execute prior to storing the item in the backup. These are executed before any "additional items" from item actions are processed.
func (o BackupSpecHooksResourcesOutput) Pre() BackupSpecHooksResourcesPreArrayOutput {
	return o.ApplyT(func(v BackupSpecHooksResources) []BackupSpecHooksResourcesPre { return v.Pre }).(BackupSpecHooksResourcesPreArrayOutput)
}

type BackupSpecHooksResourcesArrayOutput struct{ *pulumi.OutputState }

func (BackupSpecHooksResourcesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackupSpecHooksResources)(nil)).Elem()
}

func (o BackupSpecHooksResourcesArrayOutput) ToBackupSpecHooksResourcesArrayOutput() BackupSpecHooksResourcesArrayOutput {
	return o
}

func (o BackupSpecHooksResourcesArrayOutput) ToBackupSpecHooksResourcesArrayOutputWithContext(ctx context.Context) BackupSpecHooksResourcesArrayOutput {
	return o
}

func (o BackupSpecHooksResourcesArrayOutput) Index(i pulumi.IntInput) BackupSpecHooksResourcesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BackupSpecHooksResources {
		return vs[0].([]BackupSpecHooksResources)[vs[1].(int)]
	}).(BackupSpecHooksResourcesOutput)
}

// LabelSelector, if specified, filters the resources to which this hook spec applies.
type BackupSpecHooksResourcesLabelSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []BackupSpecHooksResourcesLabelSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// BackupSpecHooksResourcesLabelSelectorInput is an input type that accepts BackupSpecHooksResourcesLabelSelectorArgs and BackupSpecHooksResourcesLabelSelectorOutput values.
// You can construct a concrete instance of `BackupSpecHooksResourcesLabelSelectorInput` via:
//
//          BackupSpecHooksResourcesLabelSelectorArgs{...}
type BackupSpecHooksResourcesLabelSelectorInput interface {
	pulumi.Input

	ToBackupSpecHooksResourcesLabelSelectorOutput() BackupSpecHooksResourcesLabelSelectorOutput
	ToBackupSpecHooksResourcesLabelSelectorOutputWithContext(context.Context) BackupSpecHooksResourcesLabelSelectorOutput
}

// LabelSelector, if specified, filters the resources to which this hook spec applies.
type BackupSpecHooksResourcesLabelSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions BackupSpecHooksResourcesLabelSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (BackupSpecHooksResourcesLabelSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupSpecHooksResourcesLabelSelector)(nil)).Elem()
}

func (i BackupSpecHooksResourcesLabelSelectorArgs) ToBackupSpecHooksResourcesLabelSelectorOutput() BackupSpecHooksResourcesLabelSelectorOutput {
	return i.ToBackupSpecHooksResourcesLabelSelectorOutputWithContext(context.Background())
}

func (i BackupSpecHooksResourcesLabelSelectorArgs) ToBackupSpecHooksResourcesLabelSelectorOutputWithContext(ctx context.Context) BackupSpecHooksResourcesLabelSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupSpecHooksResourcesLabelSelectorOutput)
}

func (i BackupSpecHooksResourcesLabelSelectorArgs) ToBackupSpecHooksResourcesLabelSelectorPtrOutput() BackupSpecHooksResourcesLabelSelectorPtrOutput {
	return i.ToBackupSpecHooksResourcesLabelSelectorPtrOutputWithContext(context.Background())
}

func (i BackupSpecHooksResourcesLabelSelectorArgs) ToBackupSpecHooksResourcesLabelSelectorPtrOutputWithContext(ctx context.Context) BackupSpecHooksResourcesLabelSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupSpecHooksResourcesLabelSelectorOutput).ToBackupSpecHooksResourcesLabelSelectorPtrOutputWithContext(ctx)
}

// BackupSpecHooksResourcesLabelSelectorPtrInput is an input type that accepts BackupSpecHooksResourcesLabelSelectorArgs, BackupSpecHooksResourcesLabelSelectorPtr and BackupSpecHooksResourcesLabelSelectorPtrOutput values.
// You can construct a concrete instance of `BackupSpecHooksResourcesLabelSelectorPtrInput` via:
//
//          BackupSpecHooksResourcesLabelSelectorArgs{...}
//
//  or:
//
//          nil
type BackupSpecHooksResourcesLabelSelectorPtrInput interface {
	pulumi.Input

	ToBackupSpecHooksResourcesLabelSelectorPtrOutput() BackupSpecHooksResourcesLabelSelectorPtrOutput
	ToBackupSpecHooksResourcesLabelSelectorPtrOutputWithContext(context.Context) BackupSpecHooksResourcesLabelSelectorPtrOutput
}

type backupSpecHooksResourcesLabelSelectorPtrType BackupSpecHooksResourcesLabelSelectorArgs

func BackupSpecHooksResourcesLabelSelectorPtr(v *BackupSpecHooksResourcesLabelSelectorArgs) BackupSpecHooksResourcesLabelSelectorPtrInput {
	return (*backupSpecHooksResourcesLabelSelectorPtrType)(v)
}

func (*backupSpecHooksResourcesLabelSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupSpecHooksResourcesLabelSelector)(nil)).Elem()
}

func (i *backupSpecHooksResourcesLabelSelectorPtrType) ToBackupSpecHooksResourcesLabelSelectorPtrOutput() BackupSpecHooksResourcesLabelSelectorPtrOutput {
	return i.ToBackupSpecHooksResourcesLabelSelectorPtrOutputWithContext(context.Background())
}

func (i *backupSpecHooksResourcesLabelSelectorPtrType) ToBackupSpecHooksResourcesLabelSelectorPtrOutputWithContext(ctx context.Context) BackupSpecHooksResourcesLabelSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupSpecHooksResourcesLabelSelectorPtrOutput)
}

// LabelSelector, if specified, filters the resources to which this hook spec applies.
type BackupSpecHooksResourcesLabelSelectorOutput struct{ *pulumi.OutputState }

func (BackupSpecHooksResourcesLabelSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupSpecHooksResourcesLabelSelector)(nil)).Elem()
}

func (o BackupSpecHooksResourcesLabelSelectorOutput) ToBackupSpecHooksResourcesLabelSelectorOutput() BackupSpecHooksResourcesLabelSelectorOutput {
	return o
}

func (o BackupSpecHooksResourcesLabelSelectorOutput) ToBackupSpecHooksResourcesLabelSelectorOutputWithContext(ctx context.Context) BackupSpecHooksResourcesLabelSelectorOutput {
	return o
}

func (o BackupSpecHooksResourcesLabelSelectorOutput) ToBackupSpecHooksResourcesLabelSelectorPtrOutput() BackupSpecHooksResourcesLabelSelectorPtrOutput {
	return o.ToBackupSpecHooksResourcesLabelSelectorPtrOutputWithContext(context.Background())
}

func (o BackupSpecHooksResourcesLabelSelectorOutput) ToBackupSpecHooksResourcesLabelSelectorPtrOutputWithContext(ctx context.Context) BackupSpecHooksResourcesLabelSelectorPtrOutput {
	return o.ApplyT(func(v BackupSpecHooksResourcesLabelSelector) *BackupSpecHooksResourcesLabelSelector {
		return &v
	}).(BackupSpecHooksResourcesLabelSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o BackupSpecHooksResourcesLabelSelectorOutput) MatchExpressions() BackupSpecHooksResourcesLabelSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v BackupSpecHooksResourcesLabelSelector) []BackupSpecHooksResourcesLabelSelectorMatchExpressions {
		return v.MatchExpressions
	}).(BackupSpecHooksResourcesLabelSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o BackupSpecHooksResourcesLabelSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v BackupSpecHooksResourcesLabelSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type BackupSpecHooksResourcesLabelSelectorPtrOutput struct{ *pulumi.OutputState }

func (BackupSpecHooksResourcesLabelSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupSpecHooksResourcesLabelSelector)(nil)).Elem()
}

func (o BackupSpecHooksResourcesLabelSelectorPtrOutput) ToBackupSpecHooksResourcesLabelSelectorPtrOutput() BackupSpecHooksResourcesLabelSelectorPtrOutput {
	return o
}

func (o BackupSpecHooksResourcesLabelSelectorPtrOutput) ToBackupSpecHooksResourcesLabelSelectorPtrOutputWithContext(ctx context.Context) BackupSpecHooksResourcesLabelSelectorPtrOutput {
	return o
}

func (o BackupSpecHooksResourcesLabelSelectorPtrOutput) Elem() BackupSpecHooksResourcesLabelSelectorOutput {
	return o.ApplyT(func(v *BackupSpecHooksResourcesLabelSelector) BackupSpecHooksResourcesLabelSelector { return *v }).(BackupSpecHooksResourcesLabelSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o BackupSpecHooksResourcesLabelSelectorPtrOutput) MatchExpressions() BackupSpecHooksResourcesLabelSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *BackupSpecHooksResourcesLabelSelector) []BackupSpecHooksResourcesLabelSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(BackupSpecHooksResourcesLabelSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o BackupSpecHooksResourcesLabelSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BackupSpecHooksResourcesLabelSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type BackupSpecHooksResourcesLabelSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// BackupSpecHooksResourcesLabelSelectorMatchExpressionsInput is an input type that accepts BackupSpecHooksResourcesLabelSelectorMatchExpressionsArgs and BackupSpecHooksResourcesLabelSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `BackupSpecHooksResourcesLabelSelectorMatchExpressionsInput` via:
//
//          BackupSpecHooksResourcesLabelSelectorMatchExpressionsArgs{...}
type BackupSpecHooksResourcesLabelSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToBackupSpecHooksResourcesLabelSelectorMatchExpressionsOutput() BackupSpecHooksResourcesLabelSelectorMatchExpressionsOutput
	ToBackupSpecHooksResourcesLabelSelectorMatchExpressionsOutputWithContext(context.Context) BackupSpecHooksResourcesLabelSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type BackupSpecHooksResourcesLabelSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (BackupSpecHooksResourcesLabelSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupSpecHooksResourcesLabelSelectorMatchExpressions)(nil)).Elem()
}

func (i BackupSpecHooksResourcesLabelSelectorMatchExpressionsArgs) ToBackupSpecHooksResourcesLabelSelectorMatchExpressionsOutput() BackupSpecHooksResourcesLabelSelectorMatchExpressionsOutput {
	return i.ToBackupSpecHooksResourcesLabelSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i BackupSpecHooksResourcesLabelSelectorMatchExpressionsArgs) ToBackupSpecHooksResourcesLabelSelectorMatchExpressionsOutputWithContext(ctx context.Context) BackupSpecHooksResourcesLabelSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupSpecHooksResourcesLabelSelectorMatchExpressionsOutput)
}

// BackupSpecHooksResourcesLabelSelectorMatchExpressionsArrayInput is an input type that accepts BackupSpecHooksResourcesLabelSelectorMatchExpressionsArray and BackupSpecHooksResourcesLabelSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `BackupSpecHooksResourcesLabelSelectorMatchExpressionsArrayInput` via:
//
//          BackupSpecHooksResourcesLabelSelectorMatchExpressionsArray{ BackupSpecHooksResourcesLabelSelectorMatchExpressionsArgs{...} }
type BackupSpecHooksResourcesLabelSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToBackupSpecHooksResourcesLabelSelectorMatchExpressionsArrayOutput() BackupSpecHooksResourcesLabelSelectorMatchExpressionsArrayOutput
	ToBackupSpecHooksResourcesLabelSelectorMatchExpressionsArrayOutputWithContext(context.Context) BackupSpecHooksResourcesLabelSelectorMatchExpressionsArrayOutput
}

type BackupSpecHooksResourcesLabelSelectorMatchExpressionsArray []BackupSpecHooksResourcesLabelSelectorMatchExpressionsInput

func (BackupSpecHooksResourcesLabelSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackupSpecHooksResourcesLabelSelectorMatchExpressions)(nil)).Elem()
}

func (i BackupSpecHooksResourcesLabelSelectorMatchExpressionsArray) ToBackupSpecHooksResourcesLabelSelectorMatchExpressionsArrayOutput() BackupSpecHooksResourcesLabelSelectorMatchExpressionsArrayOutput {
	return i.ToBackupSpecHooksResourcesLabelSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i BackupSpecHooksResourcesLabelSelectorMatchExpressionsArray) ToBackupSpecHooksResourcesLabelSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) BackupSpecHooksResourcesLabelSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupSpecHooksResourcesLabelSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type BackupSpecHooksResourcesLabelSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (BackupSpecHooksResourcesLabelSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupSpecHooksResourcesLabelSelectorMatchExpressions)(nil)).Elem()
}

func (o BackupSpecHooksResourcesLabelSelectorMatchExpressionsOutput) ToBackupSpecHooksResourcesLabelSelectorMatchExpressionsOutput() BackupSpecHooksResourcesLabelSelectorMatchExpressionsOutput {
	return o
}

func (o BackupSpecHooksResourcesLabelSelectorMatchExpressionsOutput) ToBackupSpecHooksResourcesLabelSelectorMatchExpressionsOutputWithContext(ctx context.Context) BackupSpecHooksResourcesLabelSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o BackupSpecHooksResourcesLabelSelectorMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v BackupSpecHooksResourcesLabelSelectorMatchExpressions) string { return v.Key }).(pulumi.StringOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o BackupSpecHooksResourcesLabelSelectorMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v BackupSpecHooksResourcesLabelSelectorMatchExpressions) string { return v.Operator }).(pulumi.StringOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o BackupSpecHooksResourcesLabelSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BackupSpecHooksResourcesLabelSelectorMatchExpressions) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type BackupSpecHooksResourcesLabelSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (BackupSpecHooksResourcesLabelSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackupSpecHooksResourcesLabelSelectorMatchExpressions)(nil)).Elem()
}

func (o BackupSpecHooksResourcesLabelSelectorMatchExpressionsArrayOutput) ToBackupSpecHooksResourcesLabelSelectorMatchExpressionsArrayOutput() BackupSpecHooksResourcesLabelSelectorMatchExpressionsArrayOutput {
	return o
}

func (o BackupSpecHooksResourcesLabelSelectorMatchExpressionsArrayOutput) ToBackupSpecHooksResourcesLabelSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) BackupSpecHooksResourcesLabelSelectorMatchExpressionsArrayOutput {
	return o
}

func (o BackupSpecHooksResourcesLabelSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) BackupSpecHooksResourcesLabelSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BackupSpecHooksResourcesLabelSelectorMatchExpressions {
		return vs[0].([]BackupSpecHooksResourcesLabelSelectorMatchExpressions)[vs[1].(int)]
	}).(BackupSpecHooksResourcesLabelSelectorMatchExpressionsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type BackupSpecHooksResourcesLabelSelectorMatchLabels struct {
}

// BackupSpecHooksResourcesLabelSelectorMatchLabelsInput is an input type that accepts BackupSpecHooksResourcesLabelSelectorMatchLabelsArgs and BackupSpecHooksResourcesLabelSelectorMatchLabelsOutput values.
// You can construct a concrete instance of `BackupSpecHooksResourcesLabelSelectorMatchLabelsInput` via:
//
//          BackupSpecHooksResourcesLabelSelectorMatchLabelsArgs{...}
type BackupSpecHooksResourcesLabelSelectorMatchLabelsInput interface {
	pulumi.Input

	ToBackupSpecHooksResourcesLabelSelectorMatchLabelsOutput() BackupSpecHooksResourcesLabelSelectorMatchLabelsOutput
	ToBackupSpecHooksResourcesLabelSelectorMatchLabelsOutputWithContext(context.Context) BackupSpecHooksResourcesLabelSelectorMatchLabelsOutput
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type BackupSpecHooksResourcesLabelSelectorMatchLabelsArgs struct {
}

func (BackupSpecHooksResourcesLabelSelectorMatchLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupSpecHooksResourcesLabelSelectorMatchLabels)(nil)).Elem()
}

func (i BackupSpecHooksResourcesLabelSelectorMatchLabelsArgs) ToBackupSpecHooksResourcesLabelSelectorMatchLabelsOutput() BackupSpecHooksResourcesLabelSelectorMatchLabelsOutput {
	return i.ToBackupSpecHooksResourcesLabelSelectorMatchLabelsOutputWithContext(context.Background())
}

func (i BackupSpecHooksResourcesLabelSelectorMatchLabelsArgs) ToBackupSpecHooksResourcesLabelSelectorMatchLabelsOutputWithContext(ctx context.Context) BackupSpecHooksResourcesLabelSelectorMatchLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupSpecHooksResourcesLabelSelectorMatchLabelsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type BackupSpecHooksResourcesLabelSelectorMatchLabelsOutput struct{ *pulumi.OutputState }

func (BackupSpecHooksResourcesLabelSelectorMatchLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupSpecHooksResourcesLabelSelectorMatchLabels)(nil)).Elem()
}

func (o BackupSpecHooksResourcesLabelSelectorMatchLabelsOutput) ToBackupSpecHooksResourcesLabelSelectorMatchLabelsOutput() BackupSpecHooksResourcesLabelSelectorMatchLabelsOutput {
	return o
}

func (o BackupSpecHooksResourcesLabelSelectorMatchLabelsOutput) ToBackupSpecHooksResourcesLabelSelectorMatchLabelsOutputWithContext(ctx context.Context) BackupSpecHooksResourcesLabelSelectorMatchLabelsOutput {
	return o
}

// BackupResourceHook defines a hook for a resource.
type BackupSpecHooksResourcesPost struct {
	// Exec defines an exec hook.
	Exec BackupSpecHooksResourcesPostExec `pulumi:"exec"`
}

// BackupSpecHooksResourcesPostInput is an input type that accepts BackupSpecHooksResourcesPostArgs and BackupSpecHooksResourcesPostOutput values.
// You can construct a concrete instance of `BackupSpecHooksResourcesPostInput` via:
//
//          BackupSpecHooksResourcesPostArgs{...}
type BackupSpecHooksResourcesPostInput interface {
	pulumi.Input

	ToBackupSpecHooksResourcesPostOutput() BackupSpecHooksResourcesPostOutput
	ToBackupSpecHooksResourcesPostOutputWithContext(context.Context) BackupSpecHooksResourcesPostOutput
}

// BackupResourceHook defines a hook for a resource.
type BackupSpecHooksResourcesPostArgs struct {
	// Exec defines an exec hook.
	Exec BackupSpecHooksResourcesPostExecInput `pulumi:"exec"`
}

func (BackupSpecHooksResourcesPostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupSpecHooksResourcesPost)(nil)).Elem()
}

func (i BackupSpecHooksResourcesPostArgs) ToBackupSpecHooksResourcesPostOutput() BackupSpecHooksResourcesPostOutput {
	return i.ToBackupSpecHooksResourcesPostOutputWithContext(context.Background())
}

func (i BackupSpecHooksResourcesPostArgs) ToBackupSpecHooksResourcesPostOutputWithContext(ctx context.Context) BackupSpecHooksResourcesPostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupSpecHooksResourcesPostOutput)
}

// BackupSpecHooksResourcesPostArrayInput is an input type that accepts BackupSpecHooksResourcesPostArray and BackupSpecHooksResourcesPostArrayOutput values.
// You can construct a concrete instance of `BackupSpecHooksResourcesPostArrayInput` via:
//
//          BackupSpecHooksResourcesPostArray{ BackupSpecHooksResourcesPostArgs{...} }
type BackupSpecHooksResourcesPostArrayInput interface {
	pulumi.Input

	ToBackupSpecHooksResourcesPostArrayOutput() BackupSpecHooksResourcesPostArrayOutput
	ToBackupSpecHooksResourcesPostArrayOutputWithContext(context.Context) BackupSpecHooksResourcesPostArrayOutput
}

type BackupSpecHooksResourcesPostArray []BackupSpecHooksResourcesPostInput

func (BackupSpecHooksResourcesPostArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackupSpecHooksResourcesPost)(nil)).Elem()
}

func (i BackupSpecHooksResourcesPostArray) ToBackupSpecHooksResourcesPostArrayOutput() BackupSpecHooksResourcesPostArrayOutput {
	return i.ToBackupSpecHooksResourcesPostArrayOutputWithContext(context.Background())
}

func (i BackupSpecHooksResourcesPostArray) ToBackupSpecHooksResourcesPostArrayOutputWithContext(ctx context.Context) BackupSpecHooksResourcesPostArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupSpecHooksResourcesPostArrayOutput)
}

// BackupResourceHook defines a hook for a resource.
type BackupSpecHooksResourcesPostOutput struct{ *pulumi.OutputState }

func (BackupSpecHooksResourcesPostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupSpecHooksResourcesPost)(nil)).Elem()
}

func (o BackupSpecHooksResourcesPostOutput) ToBackupSpecHooksResourcesPostOutput() BackupSpecHooksResourcesPostOutput {
	return o
}

func (o BackupSpecHooksResourcesPostOutput) ToBackupSpecHooksResourcesPostOutputWithContext(ctx context.Context) BackupSpecHooksResourcesPostOutput {
	return o
}

// Exec defines an exec hook.
func (o BackupSpecHooksResourcesPostOutput) Exec() BackupSpecHooksResourcesPostExecOutput {
	return o.ApplyT(func(v BackupSpecHooksResourcesPost) BackupSpecHooksResourcesPostExec { return v.Exec }).(BackupSpecHooksResourcesPostExecOutput)
}

type BackupSpecHooksResourcesPostArrayOutput struct{ *pulumi.OutputState }

func (BackupSpecHooksResourcesPostArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackupSpecHooksResourcesPost)(nil)).Elem()
}

func (o BackupSpecHooksResourcesPostArrayOutput) ToBackupSpecHooksResourcesPostArrayOutput() BackupSpecHooksResourcesPostArrayOutput {
	return o
}

func (o BackupSpecHooksResourcesPostArrayOutput) ToBackupSpecHooksResourcesPostArrayOutputWithContext(ctx context.Context) BackupSpecHooksResourcesPostArrayOutput {
	return o
}

func (o BackupSpecHooksResourcesPostArrayOutput) Index(i pulumi.IntInput) BackupSpecHooksResourcesPostOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BackupSpecHooksResourcesPost {
		return vs[0].([]BackupSpecHooksResourcesPost)[vs[1].(int)]
	}).(BackupSpecHooksResourcesPostOutput)
}

// Exec defines an exec hook.
type BackupSpecHooksResourcesPostExec struct {
	// Command is the command and arguments to execute.
	Command []string `pulumi:"command"`
	// Container is the container in the pod where the command should be executed. If not specified, the pod's first container is used.
	Container *string `pulumi:"container"`
	// OnError specifies how Velero should behave if it encounters an error executing this hook.
	OnError *string `pulumi:"onError"`
	// Timeout defines the maximum amount of time Velero should wait for the hook to complete before considering the execution a failure.
	Timeout *string `pulumi:"timeout"`
}

// BackupSpecHooksResourcesPostExecInput is an input type that accepts BackupSpecHooksResourcesPostExecArgs and BackupSpecHooksResourcesPostExecOutput values.
// You can construct a concrete instance of `BackupSpecHooksResourcesPostExecInput` via:
//
//          BackupSpecHooksResourcesPostExecArgs{...}
type BackupSpecHooksResourcesPostExecInput interface {
	pulumi.Input

	ToBackupSpecHooksResourcesPostExecOutput() BackupSpecHooksResourcesPostExecOutput
	ToBackupSpecHooksResourcesPostExecOutputWithContext(context.Context) BackupSpecHooksResourcesPostExecOutput
}

// Exec defines an exec hook.
type BackupSpecHooksResourcesPostExecArgs struct {
	// Command is the command and arguments to execute.
	Command pulumi.StringArrayInput `pulumi:"command"`
	// Container is the container in the pod where the command should be executed. If not specified, the pod's first container is used.
	Container pulumi.StringPtrInput `pulumi:"container"`
	// OnError specifies how Velero should behave if it encounters an error executing this hook.
	OnError pulumi.StringPtrInput `pulumi:"onError"`
	// Timeout defines the maximum amount of time Velero should wait for the hook to complete before considering the execution a failure.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (BackupSpecHooksResourcesPostExecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupSpecHooksResourcesPostExec)(nil)).Elem()
}

func (i BackupSpecHooksResourcesPostExecArgs) ToBackupSpecHooksResourcesPostExecOutput() BackupSpecHooksResourcesPostExecOutput {
	return i.ToBackupSpecHooksResourcesPostExecOutputWithContext(context.Background())
}

func (i BackupSpecHooksResourcesPostExecArgs) ToBackupSpecHooksResourcesPostExecOutputWithContext(ctx context.Context) BackupSpecHooksResourcesPostExecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupSpecHooksResourcesPostExecOutput)
}

// Exec defines an exec hook.
type BackupSpecHooksResourcesPostExecOutput struct{ *pulumi.OutputState }

func (BackupSpecHooksResourcesPostExecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupSpecHooksResourcesPostExec)(nil)).Elem()
}

func (o BackupSpecHooksResourcesPostExecOutput) ToBackupSpecHooksResourcesPostExecOutput() BackupSpecHooksResourcesPostExecOutput {
	return o
}

func (o BackupSpecHooksResourcesPostExecOutput) ToBackupSpecHooksResourcesPostExecOutputWithContext(ctx context.Context) BackupSpecHooksResourcesPostExecOutput {
	return o
}

// Command is the command and arguments to execute.
func (o BackupSpecHooksResourcesPostExecOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BackupSpecHooksResourcesPostExec) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// Container is the container in the pod where the command should be executed. If not specified, the pod's first container is used.
func (o BackupSpecHooksResourcesPostExecOutput) Container() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSpecHooksResourcesPostExec) *string { return v.Container }).(pulumi.StringPtrOutput)
}

// OnError specifies how Velero should behave if it encounters an error executing this hook.
func (o BackupSpecHooksResourcesPostExecOutput) OnError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSpecHooksResourcesPostExec) *string { return v.OnError }).(pulumi.StringPtrOutput)
}

// Timeout defines the maximum amount of time Velero should wait for the hook to complete before considering the execution a failure.
func (o BackupSpecHooksResourcesPostExecOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSpecHooksResourcesPostExec) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// BackupResourceHook defines a hook for a resource.
type BackupSpecHooksResourcesPre struct {
	// Exec defines an exec hook.
	Exec BackupSpecHooksResourcesPreExec `pulumi:"exec"`
}

// BackupSpecHooksResourcesPreInput is an input type that accepts BackupSpecHooksResourcesPreArgs and BackupSpecHooksResourcesPreOutput values.
// You can construct a concrete instance of `BackupSpecHooksResourcesPreInput` via:
//
//          BackupSpecHooksResourcesPreArgs{...}
type BackupSpecHooksResourcesPreInput interface {
	pulumi.Input

	ToBackupSpecHooksResourcesPreOutput() BackupSpecHooksResourcesPreOutput
	ToBackupSpecHooksResourcesPreOutputWithContext(context.Context) BackupSpecHooksResourcesPreOutput
}

// BackupResourceHook defines a hook for a resource.
type BackupSpecHooksResourcesPreArgs struct {
	// Exec defines an exec hook.
	Exec BackupSpecHooksResourcesPreExecInput `pulumi:"exec"`
}

func (BackupSpecHooksResourcesPreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupSpecHooksResourcesPre)(nil)).Elem()
}

func (i BackupSpecHooksResourcesPreArgs) ToBackupSpecHooksResourcesPreOutput() BackupSpecHooksResourcesPreOutput {
	return i.ToBackupSpecHooksResourcesPreOutputWithContext(context.Background())
}

func (i BackupSpecHooksResourcesPreArgs) ToBackupSpecHooksResourcesPreOutputWithContext(ctx context.Context) BackupSpecHooksResourcesPreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupSpecHooksResourcesPreOutput)
}

// BackupSpecHooksResourcesPreArrayInput is an input type that accepts BackupSpecHooksResourcesPreArray and BackupSpecHooksResourcesPreArrayOutput values.
// You can construct a concrete instance of `BackupSpecHooksResourcesPreArrayInput` via:
//
//          BackupSpecHooksResourcesPreArray{ BackupSpecHooksResourcesPreArgs{...} }
type BackupSpecHooksResourcesPreArrayInput interface {
	pulumi.Input

	ToBackupSpecHooksResourcesPreArrayOutput() BackupSpecHooksResourcesPreArrayOutput
	ToBackupSpecHooksResourcesPreArrayOutputWithContext(context.Context) BackupSpecHooksResourcesPreArrayOutput
}

type BackupSpecHooksResourcesPreArray []BackupSpecHooksResourcesPreInput

func (BackupSpecHooksResourcesPreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackupSpecHooksResourcesPre)(nil)).Elem()
}

func (i BackupSpecHooksResourcesPreArray) ToBackupSpecHooksResourcesPreArrayOutput() BackupSpecHooksResourcesPreArrayOutput {
	return i.ToBackupSpecHooksResourcesPreArrayOutputWithContext(context.Background())
}

func (i BackupSpecHooksResourcesPreArray) ToBackupSpecHooksResourcesPreArrayOutputWithContext(ctx context.Context) BackupSpecHooksResourcesPreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupSpecHooksResourcesPreArrayOutput)
}

// BackupResourceHook defines a hook for a resource.
type BackupSpecHooksResourcesPreOutput struct{ *pulumi.OutputState }

func (BackupSpecHooksResourcesPreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupSpecHooksResourcesPre)(nil)).Elem()
}

func (o BackupSpecHooksResourcesPreOutput) ToBackupSpecHooksResourcesPreOutput() BackupSpecHooksResourcesPreOutput {
	return o
}

func (o BackupSpecHooksResourcesPreOutput) ToBackupSpecHooksResourcesPreOutputWithContext(ctx context.Context) BackupSpecHooksResourcesPreOutput {
	return o
}

// Exec defines an exec hook.
func (o BackupSpecHooksResourcesPreOutput) Exec() BackupSpecHooksResourcesPreExecOutput {
	return o.ApplyT(func(v BackupSpecHooksResourcesPre) BackupSpecHooksResourcesPreExec { return v.Exec }).(BackupSpecHooksResourcesPreExecOutput)
}

type BackupSpecHooksResourcesPreArrayOutput struct{ *pulumi.OutputState }

func (BackupSpecHooksResourcesPreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackupSpecHooksResourcesPre)(nil)).Elem()
}

func (o BackupSpecHooksResourcesPreArrayOutput) ToBackupSpecHooksResourcesPreArrayOutput() BackupSpecHooksResourcesPreArrayOutput {
	return o
}

func (o BackupSpecHooksResourcesPreArrayOutput) ToBackupSpecHooksResourcesPreArrayOutputWithContext(ctx context.Context) BackupSpecHooksResourcesPreArrayOutput {
	return o
}

func (o BackupSpecHooksResourcesPreArrayOutput) Index(i pulumi.IntInput) BackupSpecHooksResourcesPreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BackupSpecHooksResourcesPre {
		return vs[0].([]BackupSpecHooksResourcesPre)[vs[1].(int)]
	}).(BackupSpecHooksResourcesPreOutput)
}

// Exec defines an exec hook.
type BackupSpecHooksResourcesPreExec struct {
	// Command is the command and arguments to execute.
	Command []string `pulumi:"command"`
	// Container is the container in the pod where the command should be executed. If not specified, the pod's first container is used.
	Container *string `pulumi:"container"`
	// OnError specifies how Velero should behave if it encounters an error executing this hook.
	OnError *string `pulumi:"onError"`
	// Timeout defines the maximum amount of time Velero should wait for the hook to complete before considering the execution a failure.
	Timeout *string `pulumi:"timeout"`
}

// BackupSpecHooksResourcesPreExecInput is an input type that accepts BackupSpecHooksResourcesPreExecArgs and BackupSpecHooksResourcesPreExecOutput values.
// You can construct a concrete instance of `BackupSpecHooksResourcesPreExecInput` via:
//
//          BackupSpecHooksResourcesPreExecArgs{...}
type BackupSpecHooksResourcesPreExecInput interface {
	pulumi.Input

	ToBackupSpecHooksResourcesPreExecOutput() BackupSpecHooksResourcesPreExecOutput
	ToBackupSpecHooksResourcesPreExecOutputWithContext(context.Context) BackupSpecHooksResourcesPreExecOutput
}

// Exec defines an exec hook.
type BackupSpecHooksResourcesPreExecArgs struct {
	// Command is the command and arguments to execute.
	Command pulumi.StringArrayInput `pulumi:"command"`
	// Container is the container in the pod where the command should be executed. If not specified, the pod's first container is used.
	Container pulumi.StringPtrInput `pulumi:"container"`
	// OnError specifies how Velero should behave if it encounters an error executing this hook.
	OnError pulumi.StringPtrInput `pulumi:"onError"`
	// Timeout defines the maximum amount of time Velero should wait for the hook to complete before considering the execution a failure.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (BackupSpecHooksResourcesPreExecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupSpecHooksResourcesPreExec)(nil)).Elem()
}

func (i BackupSpecHooksResourcesPreExecArgs) ToBackupSpecHooksResourcesPreExecOutput() BackupSpecHooksResourcesPreExecOutput {
	return i.ToBackupSpecHooksResourcesPreExecOutputWithContext(context.Background())
}

func (i BackupSpecHooksResourcesPreExecArgs) ToBackupSpecHooksResourcesPreExecOutputWithContext(ctx context.Context) BackupSpecHooksResourcesPreExecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupSpecHooksResourcesPreExecOutput)
}

// Exec defines an exec hook.
type BackupSpecHooksResourcesPreExecOutput struct{ *pulumi.OutputState }

func (BackupSpecHooksResourcesPreExecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupSpecHooksResourcesPreExec)(nil)).Elem()
}

func (o BackupSpecHooksResourcesPreExecOutput) ToBackupSpecHooksResourcesPreExecOutput() BackupSpecHooksResourcesPreExecOutput {
	return o
}

func (o BackupSpecHooksResourcesPreExecOutput) ToBackupSpecHooksResourcesPreExecOutputWithContext(ctx context.Context) BackupSpecHooksResourcesPreExecOutput {
	return o
}

// Command is the command and arguments to execute.
func (o BackupSpecHooksResourcesPreExecOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BackupSpecHooksResourcesPreExec) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// Container is the container in the pod where the command should be executed. If not specified, the pod's first container is used.
func (o BackupSpecHooksResourcesPreExecOutput) Container() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSpecHooksResourcesPreExec) *string { return v.Container }).(pulumi.StringPtrOutput)
}

// OnError specifies how Velero should behave if it encounters an error executing this hook.
func (o BackupSpecHooksResourcesPreExecOutput) OnError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSpecHooksResourcesPreExec) *string { return v.OnError }).(pulumi.StringPtrOutput)
}

// Timeout defines the maximum amount of time Velero should wait for the hook to complete before considering the execution a failure.
func (o BackupSpecHooksResourcesPreExecOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupSpecHooksResourcesPreExec) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// LabelSelector is a metav1.LabelSelector to filter with when adding individual objects to the backup. If empty or nil, all objects are included. Optional.
type BackupSpecLabelSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []BackupSpecLabelSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// BackupSpecLabelSelectorInput is an input type that accepts BackupSpecLabelSelectorArgs and BackupSpecLabelSelectorOutput values.
// You can construct a concrete instance of `BackupSpecLabelSelectorInput` via:
//
//          BackupSpecLabelSelectorArgs{...}
type BackupSpecLabelSelectorInput interface {
	pulumi.Input

	ToBackupSpecLabelSelectorOutput() BackupSpecLabelSelectorOutput
	ToBackupSpecLabelSelectorOutputWithContext(context.Context) BackupSpecLabelSelectorOutput
}

// LabelSelector is a metav1.LabelSelector to filter with when adding individual objects to the backup. If empty or nil, all objects are included. Optional.
type BackupSpecLabelSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions BackupSpecLabelSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (BackupSpecLabelSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupSpecLabelSelector)(nil)).Elem()
}

func (i BackupSpecLabelSelectorArgs) ToBackupSpecLabelSelectorOutput() BackupSpecLabelSelectorOutput {
	return i.ToBackupSpecLabelSelectorOutputWithContext(context.Background())
}

func (i BackupSpecLabelSelectorArgs) ToBackupSpecLabelSelectorOutputWithContext(ctx context.Context) BackupSpecLabelSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupSpecLabelSelectorOutput)
}

func (i BackupSpecLabelSelectorArgs) ToBackupSpecLabelSelectorPtrOutput() BackupSpecLabelSelectorPtrOutput {
	return i.ToBackupSpecLabelSelectorPtrOutputWithContext(context.Background())
}

func (i BackupSpecLabelSelectorArgs) ToBackupSpecLabelSelectorPtrOutputWithContext(ctx context.Context) BackupSpecLabelSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupSpecLabelSelectorOutput).ToBackupSpecLabelSelectorPtrOutputWithContext(ctx)
}

// BackupSpecLabelSelectorPtrInput is an input type that accepts BackupSpecLabelSelectorArgs, BackupSpecLabelSelectorPtr and BackupSpecLabelSelectorPtrOutput values.
// You can construct a concrete instance of `BackupSpecLabelSelectorPtrInput` via:
//
//          BackupSpecLabelSelectorArgs{...}
//
//  or:
//
//          nil
type BackupSpecLabelSelectorPtrInput interface {
	pulumi.Input

	ToBackupSpecLabelSelectorPtrOutput() BackupSpecLabelSelectorPtrOutput
	ToBackupSpecLabelSelectorPtrOutputWithContext(context.Context) BackupSpecLabelSelectorPtrOutput
}

type backupSpecLabelSelectorPtrType BackupSpecLabelSelectorArgs

func BackupSpecLabelSelectorPtr(v *BackupSpecLabelSelectorArgs) BackupSpecLabelSelectorPtrInput {
	return (*backupSpecLabelSelectorPtrType)(v)
}

func (*backupSpecLabelSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupSpecLabelSelector)(nil)).Elem()
}

func (i *backupSpecLabelSelectorPtrType) ToBackupSpecLabelSelectorPtrOutput() BackupSpecLabelSelectorPtrOutput {
	return i.ToBackupSpecLabelSelectorPtrOutputWithContext(context.Background())
}

func (i *backupSpecLabelSelectorPtrType) ToBackupSpecLabelSelectorPtrOutputWithContext(ctx context.Context) BackupSpecLabelSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupSpecLabelSelectorPtrOutput)
}

// LabelSelector is a metav1.LabelSelector to filter with when adding individual objects to the backup. If empty or nil, all objects are included. Optional.
type BackupSpecLabelSelectorOutput struct{ *pulumi.OutputState }

func (BackupSpecLabelSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupSpecLabelSelector)(nil)).Elem()
}

func (o BackupSpecLabelSelectorOutput) ToBackupSpecLabelSelectorOutput() BackupSpecLabelSelectorOutput {
	return o
}

func (o BackupSpecLabelSelectorOutput) ToBackupSpecLabelSelectorOutputWithContext(ctx context.Context) BackupSpecLabelSelectorOutput {
	return o
}

func (o BackupSpecLabelSelectorOutput) ToBackupSpecLabelSelectorPtrOutput() BackupSpecLabelSelectorPtrOutput {
	return o.ToBackupSpecLabelSelectorPtrOutputWithContext(context.Background())
}

func (o BackupSpecLabelSelectorOutput) ToBackupSpecLabelSelectorPtrOutputWithContext(ctx context.Context) BackupSpecLabelSelectorPtrOutput {
	return o.ApplyT(func(v BackupSpecLabelSelector) *BackupSpecLabelSelector {
		return &v
	}).(BackupSpecLabelSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o BackupSpecLabelSelectorOutput) MatchExpressions() BackupSpecLabelSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v BackupSpecLabelSelector) []BackupSpecLabelSelectorMatchExpressions { return v.MatchExpressions }).(BackupSpecLabelSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o BackupSpecLabelSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v BackupSpecLabelSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type BackupSpecLabelSelectorPtrOutput struct{ *pulumi.OutputState }

func (BackupSpecLabelSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupSpecLabelSelector)(nil)).Elem()
}

func (o BackupSpecLabelSelectorPtrOutput) ToBackupSpecLabelSelectorPtrOutput() BackupSpecLabelSelectorPtrOutput {
	return o
}

func (o BackupSpecLabelSelectorPtrOutput) ToBackupSpecLabelSelectorPtrOutputWithContext(ctx context.Context) BackupSpecLabelSelectorPtrOutput {
	return o
}

func (o BackupSpecLabelSelectorPtrOutput) Elem() BackupSpecLabelSelectorOutput {
	return o.ApplyT(func(v *BackupSpecLabelSelector) BackupSpecLabelSelector { return *v }).(BackupSpecLabelSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o BackupSpecLabelSelectorPtrOutput) MatchExpressions() BackupSpecLabelSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *BackupSpecLabelSelector) []BackupSpecLabelSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(BackupSpecLabelSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o BackupSpecLabelSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BackupSpecLabelSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type BackupSpecLabelSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// BackupSpecLabelSelectorMatchExpressionsInput is an input type that accepts BackupSpecLabelSelectorMatchExpressionsArgs and BackupSpecLabelSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `BackupSpecLabelSelectorMatchExpressionsInput` via:
//
//          BackupSpecLabelSelectorMatchExpressionsArgs{...}
type BackupSpecLabelSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToBackupSpecLabelSelectorMatchExpressionsOutput() BackupSpecLabelSelectorMatchExpressionsOutput
	ToBackupSpecLabelSelectorMatchExpressionsOutputWithContext(context.Context) BackupSpecLabelSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type BackupSpecLabelSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (BackupSpecLabelSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupSpecLabelSelectorMatchExpressions)(nil)).Elem()
}

func (i BackupSpecLabelSelectorMatchExpressionsArgs) ToBackupSpecLabelSelectorMatchExpressionsOutput() BackupSpecLabelSelectorMatchExpressionsOutput {
	return i.ToBackupSpecLabelSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i BackupSpecLabelSelectorMatchExpressionsArgs) ToBackupSpecLabelSelectorMatchExpressionsOutputWithContext(ctx context.Context) BackupSpecLabelSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupSpecLabelSelectorMatchExpressionsOutput)
}

// BackupSpecLabelSelectorMatchExpressionsArrayInput is an input type that accepts BackupSpecLabelSelectorMatchExpressionsArray and BackupSpecLabelSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `BackupSpecLabelSelectorMatchExpressionsArrayInput` via:
//
//          BackupSpecLabelSelectorMatchExpressionsArray{ BackupSpecLabelSelectorMatchExpressionsArgs{...} }
type BackupSpecLabelSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToBackupSpecLabelSelectorMatchExpressionsArrayOutput() BackupSpecLabelSelectorMatchExpressionsArrayOutput
	ToBackupSpecLabelSelectorMatchExpressionsArrayOutputWithContext(context.Context) BackupSpecLabelSelectorMatchExpressionsArrayOutput
}

type BackupSpecLabelSelectorMatchExpressionsArray []BackupSpecLabelSelectorMatchExpressionsInput

func (BackupSpecLabelSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackupSpecLabelSelectorMatchExpressions)(nil)).Elem()
}

func (i BackupSpecLabelSelectorMatchExpressionsArray) ToBackupSpecLabelSelectorMatchExpressionsArrayOutput() BackupSpecLabelSelectorMatchExpressionsArrayOutput {
	return i.ToBackupSpecLabelSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i BackupSpecLabelSelectorMatchExpressionsArray) ToBackupSpecLabelSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) BackupSpecLabelSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupSpecLabelSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type BackupSpecLabelSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (BackupSpecLabelSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupSpecLabelSelectorMatchExpressions)(nil)).Elem()
}

func (o BackupSpecLabelSelectorMatchExpressionsOutput) ToBackupSpecLabelSelectorMatchExpressionsOutput() BackupSpecLabelSelectorMatchExpressionsOutput {
	return o
}

func (o BackupSpecLabelSelectorMatchExpressionsOutput) ToBackupSpecLabelSelectorMatchExpressionsOutputWithContext(ctx context.Context) BackupSpecLabelSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o BackupSpecLabelSelectorMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v BackupSpecLabelSelectorMatchExpressions) string { return v.Key }).(pulumi.StringOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o BackupSpecLabelSelectorMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v BackupSpecLabelSelectorMatchExpressions) string { return v.Operator }).(pulumi.StringOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o BackupSpecLabelSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BackupSpecLabelSelectorMatchExpressions) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type BackupSpecLabelSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (BackupSpecLabelSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackupSpecLabelSelectorMatchExpressions)(nil)).Elem()
}

func (o BackupSpecLabelSelectorMatchExpressionsArrayOutput) ToBackupSpecLabelSelectorMatchExpressionsArrayOutput() BackupSpecLabelSelectorMatchExpressionsArrayOutput {
	return o
}

func (o BackupSpecLabelSelectorMatchExpressionsArrayOutput) ToBackupSpecLabelSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) BackupSpecLabelSelectorMatchExpressionsArrayOutput {
	return o
}

func (o BackupSpecLabelSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) BackupSpecLabelSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BackupSpecLabelSelectorMatchExpressions {
		return vs[0].([]BackupSpecLabelSelectorMatchExpressions)[vs[1].(int)]
	}).(BackupSpecLabelSelectorMatchExpressionsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type BackupSpecLabelSelectorMatchLabels struct {
}

// BackupSpecLabelSelectorMatchLabelsInput is an input type that accepts BackupSpecLabelSelectorMatchLabelsArgs and BackupSpecLabelSelectorMatchLabelsOutput values.
// You can construct a concrete instance of `BackupSpecLabelSelectorMatchLabelsInput` via:
//
//          BackupSpecLabelSelectorMatchLabelsArgs{...}
type BackupSpecLabelSelectorMatchLabelsInput interface {
	pulumi.Input

	ToBackupSpecLabelSelectorMatchLabelsOutput() BackupSpecLabelSelectorMatchLabelsOutput
	ToBackupSpecLabelSelectorMatchLabelsOutputWithContext(context.Context) BackupSpecLabelSelectorMatchLabelsOutput
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type BackupSpecLabelSelectorMatchLabelsArgs struct {
}

func (BackupSpecLabelSelectorMatchLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupSpecLabelSelectorMatchLabels)(nil)).Elem()
}

func (i BackupSpecLabelSelectorMatchLabelsArgs) ToBackupSpecLabelSelectorMatchLabelsOutput() BackupSpecLabelSelectorMatchLabelsOutput {
	return i.ToBackupSpecLabelSelectorMatchLabelsOutputWithContext(context.Background())
}

func (i BackupSpecLabelSelectorMatchLabelsArgs) ToBackupSpecLabelSelectorMatchLabelsOutputWithContext(ctx context.Context) BackupSpecLabelSelectorMatchLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupSpecLabelSelectorMatchLabelsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type BackupSpecLabelSelectorMatchLabelsOutput struct{ *pulumi.OutputState }

func (BackupSpecLabelSelectorMatchLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupSpecLabelSelectorMatchLabels)(nil)).Elem()
}

func (o BackupSpecLabelSelectorMatchLabelsOutput) ToBackupSpecLabelSelectorMatchLabelsOutput() BackupSpecLabelSelectorMatchLabelsOutput {
	return o
}

func (o BackupSpecLabelSelectorMatchLabelsOutput) ToBackupSpecLabelSelectorMatchLabelsOutputWithContext(ctx context.Context) BackupSpecLabelSelectorMatchLabelsOutput {
	return o
}

// BackupStatus captures the current status of a Velero backup.
type BackupStatus struct {
	// CompletionTimestamp records the time a backup was completed. Completion time is recorded even on failed backups. Completion time is recorded before uploading the backup object. The server's time is used for CompletionTimestamps
	CompletionTimestamp *string `pulumi:"completionTimestamp"`
	// Errors is a count of all error messages that were generated during execution of the backup.  The actual errors are in the backup's log file in object storage.
	Errors *int `pulumi:"errors"`
	// Expiration is when this Backup is eligible for garbage-collection.
	Expiration *string `pulumi:"expiration"`
	// FormatVersion is the backup format version, including major, minor, and patch version.
	FormatVersion *string `pulumi:"formatVersion"`
	// Phase is the current state of the Backup.
	Phase *string `pulumi:"phase"`
	// Progress contains information about the backup's execution progress. Note that this information is best-effort only -- if Velero fails to update it during a backup for any reason, it may be inaccurate/stale.
	Progress *BackupStatusProgress `pulumi:"progress"`
	// StartTimestamp records the time a backup was started. Separate from CreationTimestamp, since that value changes on restores. The server's time is used for StartTimestamps
	StartTimestamp *string `pulumi:"startTimestamp"`
	// ValidationErrors is a slice of all validation errors (if applicable).
	ValidationErrors []string `pulumi:"validationErrors"`
	// Version is the backup format major version. Deprecated: Please see FormatVersion
	Version *int `pulumi:"version"`
	// VolumeSnapshotsAttempted is the total number of attempted volume snapshots for this backup.
	VolumeSnapshotsAttempted *int `pulumi:"volumeSnapshotsAttempted"`
	// VolumeSnapshotsCompleted is the total number of successfully completed volume snapshots for this backup.
	VolumeSnapshotsCompleted *int `pulumi:"volumeSnapshotsCompleted"`
	// Warnings is a count of all warning messages that were generated during execution of the backup. The actual warnings are in the backup's log file in object storage.
	Warnings *int `pulumi:"warnings"`
}

// BackupStatusInput is an input type that accepts BackupStatusArgs and BackupStatusOutput values.
// You can construct a concrete instance of `BackupStatusInput` via:
//
//          BackupStatusArgs{...}
type BackupStatusInput interface {
	pulumi.Input

	ToBackupStatusOutput() BackupStatusOutput
	ToBackupStatusOutputWithContext(context.Context) BackupStatusOutput
}

// BackupStatus captures the current status of a Velero backup.
type BackupStatusArgs struct {
	// CompletionTimestamp records the time a backup was completed. Completion time is recorded even on failed backups. Completion time is recorded before uploading the backup object. The server's time is used for CompletionTimestamps
	CompletionTimestamp pulumi.StringPtrInput `pulumi:"completionTimestamp"`
	// Errors is a count of all error messages that were generated during execution of the backup.  The actual errors are in the backup's log file in object storage.
	Errors pulumi.IntPtrInput `pulumi:"errors"`
	// Expiration is when this Backup is eligible for garbage-collection.
	Expiration pulumi.StringPtrInput `pulumi:"expiration"`
	// FormatVersion is the backup format version, including major, minor, and patch version.
	FormatVersion pulumi.StringPtrInput `pulumi:"formatVersion"`
	// Phase is the current state of the Backup.
	Phase pulumi.StringPtrInput `pulumi:"phase"`
	// Progress contains information about the backup's execution progress. Note that this information is best-effort only -- if Velero fails to update it during a backup for any reason, it may be inaccurate/stale.
	Progress BackupStatusProgressPtrInput `pulumi:"progress"`
	// StartTimestamp records the time a backup was started. Separate from CreationTimestamp, since that value changes on restores. The server's time is used for StartTimestamps
	StartTimestamp pulumi.StringPtrInput `pulumi:"startTimestamp"`
	// ValidationErrors is a slice of all validation errors (if applicable).
	ValidationErrors pulumi.StringArrayInput `pulumi:"validationErrors"`
	// Version is the backup format major version. Deprecated: Please see FormatVersion
	Version pulumi.IntPtrInput `pulumi:"version"`
	// VolumeSnapshotsAttempted is the total number of attempted volume snapshots for this backup.
	VolumeSnapshotsAttempted pulumi.IntPtrInput `pulumi:"volumeSnapshotsAttempted"`
	// VolumeSnapshotsCompleted is the total number of successfully completed volume snapshots for this backup.
	VolumeSnapshotsCompleted pulumi.IntPtrInput `pulumi:"volumeSnapshotsCompleted"`
	// Warnings is a count of all warning messages that were generated during execution of the backup. The actual warnings are in the backup's log file in object storage.
	Warnings pulumi.IntPtrInput `pulumi:"warnings"`
}

func (BackupStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupStatus)(nil)).Elem()
}

func (i BackupStatusArgs) ToBackupStatusOutput() BackupStatusOutput {
	return i.ToBackupStatusOutputWithContext(context.Background())
}

func (i BackupStatusArgs) ToBackupStatusOutputWithContext(ctx context.Context) BackupStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupStatusOutput)
}

func (i BackupStatusArgs) ToBackupStatusPtrOutput() BackupStatusPtrOutput {
	return i.ToBackupStatusPtrOutputWithContext(context.Background())
}

func (i BackupStatusArgs) ToBackupStatusPtrOutputWithContext(ctx context.Context) BackupStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupStatusOutput).ToBackupStatusPtrOutputWithContext(ctx)
}

// BackupStatusPtrInput is an input type that accepts BackupStatusArgs, BackupStatusPtr and BackupStatusPtrOutput values.
// You can construct a concrete instance of `BackupStatusPtrInput` via:
//
//          BackupStatusArgs{...}
//
//  or:
//
//          nil
type BackupStatusPtrInput interface {
	pulumi.Input

	ToBackupStatusPtrOutput() BackupStatusPtrOutput
	ToBackupStatusPtrOutputWithContext(context.Context) BackupStatusPtrOutput
}

type backupStatusPtrType BackupStatusArgs

func BackupStatusPtr(v *BackupStatusArgs) BackupStatusPtrInput {
	return (*backupStatusPtrType)(v)
}

func (*backupStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupStatus)(nil)).Elem()
}

func (i *backupStatusPtrType) ToBackupStatusPtrOutput() BackupStatusPtrOutput {
	return i.ToBackupStatusPtrOutputWithContext(context.Background())
}

func (i *backupStatusPtrType) ToBackupStatusPtrOutputWithContext(ctx context.Context) BackupStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupStatusPtrOutput)
}

// BackupStatus captures the current status of a Velero backup.
type BackupStatusOutput struct{ *pulumi.OutputState }

func (BackupStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupStatus)(nil)).Elem()
}

func (o BackupStatusOutput) ToBackupStatusOutput() BackupStatusOutput {
	return o
}

func (o BackupStatusOutput) ToBackupStatusOutputWithContext(ctx context.Context) BackupStatusOutput {
	return o
}

func (o BackupStatusOutput) ToBackupStatusPtrOutput() BackupStatusPtrOutput {
	return o.ToBackupStatusPtrOutputWithContext(context.Background())
}

func (o BackupStatusOutput) ToBackupStatusPtrOutputWithContext(ctx context.Context) BackupStatusPtrOutput {
	return o.ApplyT(func(v BackupStatus) *BackupStatus {
		return &v
	}).(BackupStatusPtrOutput)
}

// CompletionTimestamp records the time a backup was completed. Completion time is recorded even on failed backups. Completion time is recorded before uploading the backup object. The server's time is used for CompletionTimestamps
func (o BackupStatusOutput) CompletionTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupStatus) *string { return v.CompletionTimestamp }).(pulumi.StringPtrOutput)
}

// Errors is a count of all error messages that were generated during execution of the backup.  The actual errors are in the backup's log file in object storage.
func (o BackupStatusOutput) Errors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackupStatus) *int { return v.Errors }).(pulumi.IntPtrOutput)
}

// Expiration is when this Backup is eligible for garbage-collection.
func (o BackupStatusOutput) Expiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupStatus) *string { return v.Expiration }).(pulumi.StringPtrOutput)
}

// FormatVersion is the backup format version, including major, minor, and patch version.
func (o BackupStatusOutput) FormatVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupStatus) *string { return v.FormatVersion }).(pulumi.StringPtrOutput)
}

// Phase is the current state of the Backup.
func (o BackupStatusOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupStatus) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

// Progress contains information about the backup's execution progress. Note that this information is best-effort only -- if Velero fails to update it during a backup for any reason, it may be inaccurate/stale.
func (o BackupStatusOutput) Progress() BackupStatusProgressPtrOutput {
	return o.ApplyT(func(v BackupStatus) *BackupStatusProgress { return v.Progress }).(BackupStatusProgressPtrOutput)
}

// StartTimestamp records the time a backup was started. Separate from CreationTimestamp, since that value changes on restores. The server's time is used for StartTimestamps
func (o BackupStatusOutput) StartTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupStatus) *string { return v.StartTimestamp }).(pulumi.StringPtrOutput)
}

// ValidationErrors is a slice of all validation errors (if applicable).
func (o BackupStatusOutput) ValidationErrors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BackupStatus) []string { return v.ValidationErrors }).(pulumi.StringArrayOutput)
}

// Version is the backup format major version. Deprecated: Please see FormatVersion
func (o BackupStatusOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackupStatus) *int { return v.Version }).(pulumi.IntPtrOutput)
}

// VolumeSnapshotsAttempted is the total number of attempted volume snapshots for this backup.
func (o BackupStatusOutput) VolumeSnapshotsAttempted() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackupStatus) *int { return v.VolumeSnapshotsAttempted }).(pulumi.IntPtrOutput)
}

// VolumeSnapshotsCompleted is the total number of successfully completed volume snapshots for this backup.
func (o BackupStatusOutput) VolumeSnapshotsCompleted() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackupStatus) *int { return v.VolumeSnapshotsCompleted }).(pulumi.IntPtrOutput)
}

// Warnings is a count of all warning messages that were generated during execution of the backup. The actual warnings are in the backup's log file in object storage.
func (o BackupStatusOutput) Warnings() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackupStatus) *int { return v.Warnings }).(pulumi.IntPtrOutput)
}

type BackupStatusPtrOutput struct{ *pulumi.OutputState }

func (BackupStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupStatus)(nil)).Elem()
}

func (o BackupStatusPtrOutput) ToBackupStatusPtrOutput() BackupStatusPtrOutput {
	return o
}

func (o BackupStatusPtrOutput) ToBackupStatusPtrOutputWithContext(ctx context.Context) BackupStatusPtrOutput {
	return o
}

func (o BackupStatusPtrOutput) Elem() BackupStatusOutput {
	return o.ApplyT(func(v *BackupStatus) BackupStatus { return *v }).(BackupStatusOutput)
}

// CompletionTimestamp records the time a backup was completed. Completion time is recorded even on failed backups. Completion time is recorded before uploading the backup object. The server's time is used for CompletionTimestamps
func (o BackupStatusPtrOutput) CompletionTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupStatus) *string {
		if v == nil {
			return nil
		}
		return v.CompletionTimestamp
	}).(pulumi.StringPtrOutput)
}

// Errors is a count of all error messages that were generated during execution of the backup.  The actual errors are in the backup's log file in object storage.
func (o BackupStatusPtrOutput) Errors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackupStatus) *int {
		if v == nil {
			return nil
		}
		return v.Errors
	}).(pulumi.IntPtrOutput)
}

// Expiration is when this Backup is eligible for garbage-collection.
func (o BackupStatusPtrOutput) Expiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupStatus) *string {
		if v == nil {
			return nil
		}
		return v.Expiration
	}).(pulumi.StringPtrOutput)
}

// FormatVersion is the backup format version, including major, minor, and patch version.
func (o BackupStatusPtrOutput) FormatVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupStatus) *string {
		if v == nil {
			return nil
		}
		return v.FormatVersion
	}).(pulumi.StringPtrOutput)
}

// Phase is the current state of the Backup.
func (o BackupStatusPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupStatus) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

// Progress contains information about the backup's execution progress. Note that this information is best-effort only -- if Velero fails to update it during a backup for any reason, it may be inaccurate/stale.
func (o BackupStatusPtrOutput) Progress() BackupStatusProgressPtrOutput {
	return o.ApplyT(func(v *BackupStatus) *BackupStatusProgress {
		if v == nil {
			return nil
		}
		return v.Progress
	}).(BackupStatusProgressPtrOutput)
}

// StartTimestamp records the time a backup was started. Separate from CreationTimestamp, since that value changes on restores. The server's time is used for StartTimestamps
func (o BackupStatusPtrOutput) StartTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupStatus) *string {
		if v == nil {
			return nil
		}
		return v.StartTimestamp
	}).(pulumi.StringPtrOutput)
}

// ValidationErrors is a slice of all validation errors (if applicable).
func (o BackupStatusPtrOutput) ValidationErrors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BackupStatus) []string {
		if v == nil {
			return nil
		}
		return v.ValidationErrors
	}).(pulumi.StringArrayOutput)
}

// Version is the backup format major version. Deprecated: Please see FormatVersion
func (o BackupStatusPtrOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackupStatus) *int {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.IntPtrOutput)
}

// VolumeSnapshotsAttempted is the total number of attempted volume snapshots for this backup.
func (o BackupStatusPtrOutput) VolumeSnapshotsAttempted() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackupStatus) *int {
		if v == nil {
			return nil
		}
		return v.VolumeSnapshotsAttempted
	}).(pulumi.IntPtrOutput)
}

// VolumeSnapshotsCompleted is the total number of successfully completed volume snapshots for this backup.
func (o BackupStatusPtrOutput) VolumeSnapshotsCompleted() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackupStatus) *int {
		if v == nil {
			return nil
		}
		return v.VolumeSnapshotsCompleted
	}).(pulumi.IntPtrOutput)
}

// Warnings is a count of all warning messages that were generated during execution of the backup. The actual warnings are in the backup's log file in object storage.
func (o BackupStatusPtrOutput) Warnings() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackupStatus) *int {
		if v == nil {
			return nil
		}
		return v.Warnings
	}).(pulumi.IntPtrOutput)
}

// Progress contains information about the backup's execution progress. Note that this information is best-effort only -- if Velero fails to update it during a backup for any reason, it may be inaccurate/stale.
type BackupStatusProgress struct {
	// ItemsBackedUp is the number of items that have actually been written to the backup tarball so far.
	ItemsBackedUp *int `pulumi:"itemsBackedUp"`
	// TotalItems is the total number of items to be backed up. This number may change throughout the execution of the backup due to plugins that return additional related items to back up, the velero.io/exclude-from-backup label, and various other filters that happen as items are processed.
	TotalItems *int `pulumi:"totalItems"`
}

// BackupStatusProgressInput is an input type that accepts BackupStatusProgressArgs and BackupStatusProgressOutput values.
// You can construct a concrete instance of `BackupStatusProgressInput` via:
//
//          BackupStatusProgressArgs{...}
type BackupStatusProgressInput interface {
	pulumi.Input

	ToBackupStatusProgressOutput() BackupStatusProgressOutput
	ToBackupStatusProgressOutputWithContext(context.Context) BackupStatusProgressOutput
}

// Progress contains information about the backup's execution progress. Note that this information is best-effort only -- if Velero fails to update it during a backup for any reason, it may be inaccurate/stale.
type BackupStatusProgressArgs struct {
	// ItemsBackedUp is the number of items that have actually been written to the backup tarball so far.
	ItemsBackedUp pulumi.IntPtrInput `pulumi:"itemsBackedUp"`
	// TotalItems is the total number of items to be backed up. This number may change throughout the execution of the backup due to plugins that return additional related items to back up, the velero.io/exclude-from-backup label, and various other filters that happen as items are processed.
	TotalItems pulumi.IntPtrInput `pulumi:"totalItems"`
}

func (BackupStatusProgressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupStatusProgress)(nil)).Elem()
}

func (i BackupStatusProgressArgs) ToBackupStatusProgressOutput() BackupStatusProgressOutput {
	return i.ToBackupStatusProgressOutputWithContext(context.Background())
}

func (i BackupStatusProgressArgs) ToBackupStatusProgressOutputWithContext(ctx context.Context) BackupStatusProgressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupStatusProgressOutput)
}

func (i BackupStatusProgressArgs) ToBackupStatusProgressPtrOutput() BackupStatusProgressPtrOutput {
	return i.ToBackupStatusProgressPtrOutputWithContext(context.Background())
}

func (i BackupStatusProgressArgs) ToBackupStatusProgressPtrOutputWithContext(ctx context.Context) BackupStatusProgressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupStatusProgressOutput).ToBackupStatusProgressPtrOutputWithContext(ctx)
}

// BackupStatusProgressPtrInput is an input type that accepts BackupStatusProgressArgs, BackupStatusProgressPtr and BackupStatusProgressPtrOutput values.
// You can construct a concrete instance of `BackupStatusProgressPtrInput` via:
//
//          BackupStatusProgressArgs{...}
//
//  or:
//
//          nil
type BackupStatusProgressPtrInput interface {
	pulumi.Input

	ToBackupStatusProgressPtrOutput() BackupStatusProgressPtrOutput
	ToBackupStatusProgressPtrOutputWithContext(context.Context) BackupStatusProgressPtrOutput
}

type backupStatusProgressPtrType BackupStatusProgressArgs

func BackupStatusProgressPtr(v *BackupStatusProgressArgs) BackupStatusProgressPtrInput {
	return (*backupStatusProgressPtrType)(v)
}

func (*backupStatusProgressPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupStatusProgress)(nil)).Elem()
}

func (i *backupStatusProgressPtrType) ToBackupStatusProgressPtrOutput() BackupStatusProgressPtrOutput {
	return i.ToBackupStatusProgressPtrOutputWithContext(context.Background())
}

func (i *backupStatusProgressPtrType) ToBackupStatusProgressPtrOutputWithContext(ctx context.Context) BackupStatusProgressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupStatusProgressPtrOutput)
}

// Progress contains information about the backup's execution progress. Note that this information is best-effort only -- if Velero fails to update it during a backup for any reason, it may be inaccurate/stale.
type BackupStatusProgressOutput struct{ *pulumi.OutputState }

func (BackupStatusProgressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupStatusProgress)(nil)).Elem()
}

func (o BackupStatusProgressOutput) ToBackupStatusProgressOutput() BackupStatusProgressOutput {
	return o
}

func (o BackupStatusProgressOutput) ToBackupStatusProgressOutputWithContext(ctx context.Context) BackupStatusProgressOutput {
	return o
}

func (o BackupStatusProgressOutput) ToBackupStatusProgressPtrOutput() BackupStatusProgressPtrOutput {
	return o.ToBackupStatusProgressPtrOutputWithContext(context.Background())
}

func (o BackupStatusProgressOutput) ToBackupStatusProgressPtrOutputWithContext(ctx context.Context) BackupStatusProgressPtrOutput {
	return o.ApplyT(func(v BackupStatusProgress) *BackupStatusProgress {
		return &v
	}).(BackupStatusProgressPtrOutput)
}

// ItemsBackedUp is the number of items that have actually been written to the backup tarball so far.
func (o BackupStatusProgressOutput) ItemsBackedUp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackupStatusProgress) *int { return v.ItemsBackedUp }).(pulumi.IntPtrOutput)
}

// TotalItems is the total number of items to be backed up. This number may change throughout the execution of the backup due to plugins that return additional related items to back up, the velero.io/exclude-from-backup label, and various other filters that happen as items are processed.
func (o BackupStatusProgressOutput) TotalItems() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackupStatusProgress) *int { return v.TotalItems }).(pulumi.IntPtrOutput)
}

type BackupStatusProgressPtrOutput struct{ *pulumi.OutputState }

func (BackupStatusProgressPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupStatusProgress)(nil)).Elem()
}

func (o BackupStatusProgressPtrOutput) ToBackupStatusProgressPtrOutput() BackupStatusProgressPtrOutput {
	return o
}

func (o BackupStatusProgressPtrOutput) ToBackupStatusProgressPtrOutputWithContext(ctx context.Context) BackupStatusProgressPtrOutput {
	return o
}

func (o BackupStatusProgressPtrOutput) Elem() BackupStatusProgressOutput {
	return o.ApplyT(func(v *BackupStatusProgress) BackupStatusProgress { return *v }).(BackupStatusProgressOutput)
}

// ItemsBackedUp is the number of items that have actually been written to the backup tarball so far.
func (o BackupStatusProgressPtrOutput) ItemsBackedUp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackupStatusProgress) *int {
		if v == nil {
			return nil
		}
		return v.ItemsBackedUp
	}).(pulumi.IntPtrOutput)
}

// TotalItems is the total number of items to be backed up. This number may change throughout the execution of the backup due to plugins that return additional related items to back up, the velero.io/exclude-from-backup label, and various other filters that happen as items are processed.
func (o BackupStatusProgressPtrOutput) TotalItems() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackupStatusProgress) *int {
		if v == nil {
			return nil
		}
		return v.TotalItems
	}).(pulumi.IntPtrOutput)
}

// BackupStorageLocation is a location where Velero stores backup objects.
type BackupStorageLocationType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// BackupStorageLocationSpec defines the specification for a Velero BackupStorageLocation.
	Spec *BackupStorageLocationSpec `pulumi:"spec"`
	// BackupStorageLocationStatus describes the current status of a Velero BackupStorageLocation.
	Status *BackupStorageLocationStatus `pulumi:"status"`
}

// BackupStorageLocationTypeInput is an input type that accepts BackupStorageLocationTypeArgs and BackupStorageLocationTypeOutput values.
// You can construct a concrete instance of `BackupStorageLocationTypeInput` via:
//
//          BackupStorageLocationTypeArgs{...}
type BackupStorageLocationTypeInput interface {
	pulumi.Input

	ToBackupStorageLocationTypeOutput() BackupStorageLocationTypeOutput
	ToBackupStorageLocationTypeOutputWithContext(context.Context) BackupStorageLocationTypeOutput
}

// BackupStorageLocation is a location where Velero stores backup objects.
type BackupStorageLocationTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// BackupStorageLocationSpec defines the specification for a Velero BackupStorageLocation.
	Spec BackupStorageLocationSpecPtrInput `pulumi:"spec"`
	// BackupStorageLocationStatus describes the current status of a Velero BackupStorageLocation.
	Status BackupStorageLocationStatusPtrInput `pulumi:"status"`
}

func (BackupStorageLocationTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupStorageLocationType)(nil)).Elem()
}

func (i BackupStorageLocationTypeArgs) ToBackupStorageLocationTypeOutput() BackupStorageLocationTypeOutput {
	return i.ToBackupStorageLocationTypeOutputWithContext(context.Background())
}

func (i BackupStorageLocationTypeArgs) ToBackupStorageLocationTypeOutputWithContext(ctx context.Context) BackupStorageLocationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupStorageLocationTypeOutput)
}

// BackupStorageLocation is a location where Velero stores backup objects.
type BackupStorageLocationTypeOutput struct{ *pulumi.OutputState }

func (BackupStorageLocationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupStorageLocationType)(nil)).Elem()
}

func (o BackupStorageLocationTypeOutput) ToBackupStorageLocationTypeOutput() BackupStorageLocationTypeOutput {
	return o
}

func (o BackupStorageLocationTypeOutput) ToBackupStorageLocationTypeOutputWithContext(ctx context.Context) BackupStorageLocationTypeOutput {
	return o
}

func (o BackupStorageLocationTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupStorageLocationType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o BackupStorageLocationTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupStorageLocationType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o BackupStorageLocationTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v BackupStorageLocationType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// BackupStorageLocationSpec defines the specification for a Velero BackupStorageLocation.
func (o BackupStorageLocationTypeOutput) Spec() BackupStorageLocationSpecPtrOutput {
	return o.ApplyT(func(v BackupStorageLocationType) *BackupStorageLocationSpec { return v.Spec }).(BackupStorageLocationSpecPtrOutput)
}

// BackupStorageLocationStatus describes the current status of a Velero BackupStorageLocation.
func (o BackupStorageLocationTypeOutput) Status() BackupStorageLocationStatusPtrOutput {
	return o.ApplyT(func(v BackupStorageLocationType) *BackupStorageLocationStatus { return v.Status }).(BackupStorageLocationStatusPtrOutput)
}

type BackupStorageLocationMetadata struct {
}

// BackupStorageLocationMetadataInput is an input type that accepts BackupStorageLocationMetadataArgs and BackupStorageLocationMetadataOutput values.
// You can construct a concrete instance of `BackupStorageLocationMetadataInput` via:
//
//          BackupStorageLocationMetadataArgs{...}
type BackupStorageLocationMetadataInput interface {
	pulumi.Input

	ToBackupStorageLocationMetadataOutput() BackupStorageLocationMetadataOutput
	ToBackupStorageLocationMetadataOutputWithContext(context.Context) BackupStorageLocationMetadataOutput
}

type BackupStorageLocationMetadataArgs struct {
}

func (BackupStorageLocationMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupStorageLocationMetadata)(nil)).Elem()
}

func (i BackupStorageLocationMetadataArgs) ToBackupStorageLocationMetadataOutput() BackupStorageLocationMetadataOutput {
	return i.ToBackupStorageLocationMetadataOutputWithContext(context.Background())
}

func (i BackupStorageLocationMetadataArgs) ToBackupStorageLocationMetadataOutputWithContext(ctx context.Context) BackupStorageLocationMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupStorageLocationMetadataOutput)
}

type BackupStorageLocationMetadataOutput struct{ *pulumi.OutputState }

func (BackupStorageLocationMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupStorageLocationMetadata)(nil)).Elem()
}

func (o BackupStorageLocationMetadataOutput) ToBackupStorageLocationMetadataOutput() BackupStorageLocationMetadataOutput {
	return o
}

func (o BackupStorageLocationMetadataOutput) ToBackupStorageLocationMetadataOutputWithContext(ctx context.Context) BackupStorageLocationMetadataOutput {
	return o
}

// BackupStorageLocationSpec defines the specification for a Velero BackupStorageLocation.
type BackupStorageLocationSpec struct {
	// AccessMode defines the permissions for the backup storage location.
	AccessMode *string `pulumi:"accessMode"`
	// BackupSyncPeriod defines how frequently to sync backup API objects from object storage. A value of 0 disables sync.
	BackupSyncPeriod *string `pulumi:"backupSyncPeriod"`
	// Config is for provider-specific configuration fields.
	Config map[string]string `pulumi:"config"`
	// ObjectStorageLocation specifies the settings necessary to connect to a provider's object storage.
	ObjectStorage BackupStorageLocationSpecObjectStorage `pulumi:"objectStorage"`
	// Provider is the provider of the backup storage.
	Provider string `pulumi:"provider"`
}

// BackupStorageLocationSpecInput is an input type that accepts BackupStorageLocationSpecArgs and BackupStorageLocationSpecOutput values.
// You can construct a concrete instance of `BackupStorageLocationSpecInput` via:
//
//          BackupStorageLocationSpecArgs{...}
type BackupStorageLocationSpecInput interface {
	pulumi.Input

	ToBackupStorageLocationSpecOutput() BackupStorageLocationSpecOutput
	ToBackupStorageLocationSpecOutputWithContext(context.Context) BackupStorageLocationSpecOutput
}

// BackupStorageLocationSpec defines the specification for a Velero BackupStorageLocation.
type BackupStorageLocationSpecArgs struct {
	// AccessMode defines the permissions for the backup storage location.
	AccessMode pulumi.StringPtrInput `pulumi:"accessMode"`
	// BackupSyncPeriod defines how frequently to sync backup API objects from object storage. A value of 0 disables sync.
	BackupSyncPeriod pulumi.StringPtrInput `pulumi:"backupSyncPeriod"`
	// Config is for provider-specific configuration fields.
	Config pulumi.StringMapInput `pulumi:"config"`
	// ObjectStorageLocation specifies the settings necessary to connect to a provider's object storage.
	ObjectStorage BackupStorageLocationSpecObjectStorageInput `pulumi:"objectStorage"`
	// Provider is the provider of the backup storage.
	Provider pulumi.StringInput `pulumi:"provider"`
}

func (BackupStorageLocationSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupStorageLocationSpec)(nil)).Elem()
}

func (i BackupStorageLocationSpecArgs) ToBackupStorageLocationSpecOutput() BackupStorageLocationSpecOutput {
	return i.ToBackupStorageLocationSpecOutputWithContext(context.Background())
}

func (i BackupStorageLocationSpecArgs) ToBackupStorageLocationSpecOutputWithContext(ctx context.Context) BackupStorageLocationSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupStorageLocationSpecOutput)
}

func (i BackupStorageLocationSpecArgs) ToBackupStorageLocationSpecPtrOutput() BackupStorageLocationSpecPtrOutput {
	return i.ToBackupStorageLocationSpecPtrOutputWithContext(context.Background())
}

func (i BackupStorageLocationSpecArgs) ToBackupStorageLocationSpecPtrOutputWithContext(ctx context.Context) BackupStorageLocationSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupStorageLocationSpecOutput).ToBackupStorageLocationSpecPtrOutputWithContext(ctx)
}

// BackupStorageLocationSpecPtrInput is an input type that accepts BackupStorageLocationSpecArgs, BackupStorageLocationSpecPtr and BackupStorageLocationSpecPtrOutput values.
// You can construct a concrete instance of `BackupStorageLocationSpecPtrInput` via:
//
//          BackupStorageLocationSpecArgs{...}
//
//  or:
//
//          nil
type BackupStorageLocationSpecPtrInput interface {
	pulumi.Input

	ToBackupStorageLocationSpecPtrOutput() BackupStorageLocationSpecPtrOutput
	ToBackupStorageLocationSpecPtrOutputWithContext(context.Context) BackupStorageLocationSpecPtrOutput
}

type backupStorageLocationSpecPtrType BackupStorageLocationSpecArgs

func BackupStorageLocationSpecPtr(v *BackupStorageLocationSpecArgs) BackupStorageLocationSpecPtrInput {
	return (*backupStorageLocationSpecPtrType)(v)
}

func (*backupStorageLocationSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupStorageLocationSpec)(nil)).Elem()
}

func (i *backupStorageLocationSpecPtrType) ToBackupStorageLocationSpecPtrOutput() BackupStorageLocationSpecPtrOutput {
	return i.ToBackupStorageLocationSpecPtrOutputWithContext(context.Background())
}

func (i *backupStorageLocationSpecPtrType) ToBackupStorageLocationSpecPtrOutputWithContext(ctx context.Context) BackupStorageLocationSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupStorageLocationSpecPtrOutput)
}

// BackupStorageLocationSpec defines the specification for a Velero BackupStorageLocation.
type BackupStorageLocationSpecOutput struct{ *pulumi.OutputState }

func (BackupStorageLocationSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupStorageLocationSpec)(nil)).Elem()
}

func (o BackupStorageLocationSpecOutput) ToBackupStorageLocationSpecOutput() BackupStorageLocationSpecOutput {
	return o
}

func (o BackupStorageLocationSpecOutput) ToBackupStorageLocationSpecOutputWithContext(ctx context.Context) BackupStorageLocationSpecOutput {
	return o
}

func (o BackupStorageLocationSpecOutput) ToBackupStorageLocationSpecPtrOutput() BackupStorageLocationSpecPtrOutput {
	return o.ToBackupStorageLocationSpecPtrOutputWithContext(context.Background())
}

func (o BackupStorageLocationSpecOutput) ToBackupStorageLocationSpecPtrOutputWithContext(ctx context.Context) BackupStorageLocationSpecPtrOutput {
	return o.ApplyT(func(v BackupStorageLocationSpec) *BackupStorageLocationSpec {
		return &v
	}).(BackupStorageLocationSpecPtrOutput)
}

// AccessMode defines the permissions for the backup storage location.
func (o BackupStorageLocationSpecOutput) AccessMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupStorageLocationSpec) *string { return v.AccessMode }).(pulumi.StringPtrOutput)
}

// BackupSyncPeriod defines how frequently to sync backup API objects from object storage. A value of 0 disables sync.
func (o BackupStorageLocationSpecOutput) BackupSyncPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupStorageLocationSpec) *string { return v.BackupSyncPeriod }).(pulumi.StringPtrOutput)
}

// Config is for provider-specific configuration fields.
func (o BackupStorageLocationSpecOutput) Config() pulumi.StringMapOutput {
	return o.ApplyT(func(v BackupStorageLocationSpec) map[string]string { return v.Config }).(pulumi.StringMapOutput)
}

// ObjectStorageLocation specifies the settings necessary to connect to a provider's object storage.
func (o BackupStorageLocationSpecOutput) ObjectStorage() BackupStorageLocationSpecObjectStorageOutput {
	return o.ApplyT(func(v BackupStorageLocationSpec) BackupStorageLocationSpecObjectStorage { return v.ObjectStorage }).(BackupStorageLocationSpecObjectStorageOutput)
}

// Provider is the provider of the backup storage.
func (o BackupStorageLocationSpecOutput) Provider() pulumi.StringOutput {
	return o.ApplyT(func(v BackupStorageLocationSpec) string { return v.Provider }).(pulumi.StringOutput)
}

type BackupStorageLocationSpecPtrOutput struct{ *pulumi.OutputState }

func (BackupStorageLocationSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupStorageLocationSpec)(nil)).Elem()
}

func (o BackupStorageLocationSpecPtrOutput) ToBackupStorageLocationSpecPtrOutput() BackupStorageLocationSpecPtrOutput {
	return o
}

func (o BackupStorageLocationSpecPtrOutput) ToBackupStorageLocationSpecPtrOutputWithContext(ctx context.Context) BackupStorageLocationSpecPtrOutput {
	return o
}

func (o BackupStorageLocationSpecPtrOutput) Elem() BackupStorageLocationSpecOutput {
	return o.ApplyT(func(v *BackupStorageLocationSpec) BackupStorageLocationSpec { return *v }).(BackupStorageLocationSpecOutput)
}

// AccessMode defines the permissions for the backup storage location.
func (o BackupStorageLocationSpecPtrOutput) AccessMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupStorageLocationSpec) *string {
		if v == nil {
			return nil
		}
		return v.AccessMode
	}).(pulumi.StringPtrOutput)
}

// BackupSyncPeriod defines how frequently to sync backup API objects from object storage. A value of 0 disables sync.
func (o BackupStorageLocationSpecPtrOutput) BackupSyncPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupStorageLocationSpec) *string {
		if v == nil {
			return nil
		}
		return v.BackupSyncPeriod
	}).(pulumi.StringPtrOutput)
}

// Config is for provider-specific configuration fields.
func (o BackupStorageLocationSpecPtrOutput) Config() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BackupStorageLocationSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.Config
	}).(pulumi.StringMapOutput)
}

// ObjectStorageLocation specifies the settings necessary to connect to a provider's object storage.
func (o BackupStorageLocationSpecPtrOutput) ObjectStorage() BackupStorageLocationSpecObjectStoragePtrOutput {
	return o.ApplyT(func(v *BackupStorageLocationSpec) *BackupStorageLocationSpecObjectStorage {
		if v == nil {
			return nil
		}
		return &v.ObjectStorage
	}).(BackupStorageLocationSpecObjectStoragePtrOutput)
}

// Provider is the provider of the backup storage.
func (o BackupStorageLocationSpecPtrOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupStorageLocationSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Provider
	}).(pulumi.StringPtrOutput)
}

// Config is for provider-specific configuration fields.
type BackupStorageLocationSpecConfig struct {
}

// BackupStorageLocationSpecConfigInput is an input type that accepts BackupStorageLocationSpecConfigArgs and BackupStorageLocationSpecConfigOutput values.
// You can construct a concrete instance of `BackupStorageLocationSpecConfigInput` via:
//
//          BackupStorageLocationSpecConfigArgs{...}
type BackupStorageLocationSpecConfigInput interface {
	pulumi.Input

	ToBackupStorageLocationSpecConfigOutput() BackupStorageLocationSpecConfigOutput
	ToBackupStorageLocationSpecConfigOutputWithContext(context.Context) BackupStorageLocationSpecConfigOutput
}

// Config is for provider-specific configuration fields.
type BackupStorageLocationSpecConfigArgs struct {
}

func (BackupStorageLocationSpecConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupStorageLocationSpecConfig)(nil)).Elem()
}

func (i BackupStorageLocationSpecConfigArgs) ToBackupStorageLocationSpecConfigOutput() BackupStorageLocationSpecConfigOutput {
	return i.ToBackupStorageLocationSpecConfigOutputWithContext(context.Background())
}

func (i BackupStorageLocationSpecConfigArgs) ToBackupStorageLocationSpecConfigOutputWithContext(ctx context.Context) BackupStorageLocationSpecConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupStorageLocationSpecConfigOutput)
}

// Config is for provider-specific configuration fields.
type BackupStorageLocationSpecConfigOutput struct{ *pulumi.OutputState }

func (BackupStorageLocationSpecConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupStorageLocationSpecConfig)(nil)).Elem()
}

func (o BackupStorageLocationSpecConfigOutput) ToBackupStorageLocationSpecConfigOutput() BackupStorageLocationSpecConfigOutput {
	return o
}

func (o BackupStorageLocationSpecConfigOutput) ToBackupStorageLocationSpecConfigOutputWithContext(ctx context.Context) BackupStorageLocationSpecConfigOutput {
	return o
}

// ObjectStorageLocation specifies the settings necessary to connect to a provider's object storage.
type BackupStorageLocationSpecObjectStorage struct {
	// Bucket is the bucket to use for object storage.
	Bucket string `pulumi:"bucket"`
	// CACert defines a CA bundle to use when verifying TLS connections to the provider.
	CaCert *string `pulumi:"caCert"`
	// Prefix is the path inside a bucket to use for Velero storage. Optional.
	Prefix *string `pulumi:"prefix"`
}

// BackupStorageLocationSpecObjectStorageInput is an input type that accepts BackupStorageLocationSpecObjectStorageArgs and BackupStorageLocationSpecObjectStorageOutput values.
// You can construct a concrete instance of `BackupStorageLocationSpecObjectStorageInput` via:
//
//          BackupStorageLocationSpecObjectStorageArgs{...}
type BackupStorageLocationSpecObjectStorageInput interface {
	pulumi.Input

	ToBackupStorageLocationSpecObjectStorageOutput() BackupStorageLocationSpecObjectStorageOutput
	ToBackupStorageLocationSpecObjectStorageOutputWithContext(context.Context) BackupStorageLocationSpecObjectStorageOutput
}

// ObjectStorageLocation specifies the settings necessary to connect to a provider's object storage.
type BackupStorageLocationSpecObjectStorageArgs struct {
	// Bucket is the bucket to use for object storage.
	Bucket pulumi.StringInput `pulumi:"bucket"`
	// CACert defines a CA bundle to use when verifying TLS connections to the provider.
	CaCert pulumi.StringPtrInput `pulumi:"caCert"`
	// Prefix is the path inside a bucket to use for Velero storage. Optional.
	Prefix pulumi.StringPtrInput `pulumi:"prefix"`
}

func (BackupStorageLocationSpecObjectStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupStorageLocationSpecObjectStorage)(nil)).Elem()
}

func (i BackupStorageLocationSpecObjectStorageArgs) ToBackupStorageLocationSpecObjectStorageOutput() BackupStorageLocationSpecObjectStorageOutput {
	return i.ToBackupStorageLocationSpecObjectStorageOutputWithContext(context.Background())
}

func (i BackupStorageLocationSpecObjectStorageArgs) ToBackupStorageLocationSpecObjectStorageOutputWithContext(ctx context.Context) BackupStorageLocationSpecObjectStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupStorageLocationSpecObjectStorageOutput)
}

func (i BackupStorageLocationSpecObjectStorageArgs) ToBackupStorageLocationSpecObjectStoragePtrOutput() BackupStorageLocationSpecObjectStoragePtrOutput {
	return i.ToBackupStorageLocationSpecObjectStoragePtrOutputWithContext(context.Background())
}

func (i BackupStorageLocationSpecObjectStorageArgs) ToBackupStorageLocationSpecObjectStoragePtrOutputWithContext(ctx context.Context) BackupStorageLocationSpecObjectStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupStorageLocationSpecObjectStorageOutput).ToBackupStorageLocationSpecObjectStoragePtrOutputWithContext(ctx)
}

// BackupStorageLocationSpecObjectStoragePtrInput is an input type that accepts BackupStorageLocationSpecObjectStorageArgs, BackupStorageLocationSpecObjectStoragePtr and BackupStorageLocationSpecObjectStoragePtrOutput values.
// You can construct a concrete instance of `BackupStorageLocationSpecObjectStoragePtrInput` via:
//
//          BackupStorageLocationSpecObjectStorageArgs{...}
//
//  or:
//
//          nil
type BackupStorageLocationSpecObjectStoragePtrInput interface {
	pulumi.Input

	ToBackupStorageLocationSpecObjectStoragePtrOutput() BackupStorageLocationSpecObjectStoragePtrOutput
	ToBackupStorageLocationSpecObjectStoragePtrOutputWithContext(context.Context) BackupStorageLocationSpecObjectStoragePtrOutput
}

type backupStorageLocationSpecObjectStoragePtrType BackupStorageLocationSpecObjectStorageArgs

func BackupStorageLocationSpecObjectStoragePtr(v *BackupStorageLocationSpecObjectStorageArgs) BackupStorageLocationSpecObjectStoragePtrInput {
	return (*backupStorageLocationSpecObjectStoragePtrType)(v)
}

func (*backupStorageLocationSpecObjectStoragePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupStorageLocationSpecObjectStorage)(nil)).Elem()
}

func (i *backupStorageLocationSpecObjectStoragePtrType) ToBackupStorageLocationSpecObjectStoragePtrOutput() BackupStorageLocationSpecObjectStoragePtrOutput {
	return i.ToBackupStorageLocationSpecObjectStoragePtrOutputWithContext(context.Background())
}

func (i *backupStorageLocationSpecObjectStoragePtrType) ToBackupStorageLocationSpecObjectStoragePtrOutputWithContext(ctx context.Context) BackupStorageLocationSpecObjectStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupStorageLocationSpecObjectStoragePtrOutput)
}

// ObjectStorageLocation specifies the settings necessary to connect to a provider's object storage.
type BackupStorageLocationSpecObjectStorageOutput struct{ *pulumi.OutputState }

func (BackupStorageLocationSpecObjectStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupStorageLocationSpecObjectStorage)(nil)).Elem()
}

func (o BackupStorageLocationSpecObjectStorageOutput) ToBackupStorageLocationSpecObjectStorageOutput() BackupStorageLocationSpecObjectStorageOutput {
	return o
}

func (o BackupStorageLocationSpecObjectStorageOutput) ToBackupStorageLocationSpecObjectStorageOutputWithContext(ctx context.Context) BackupStorageLocationSpecObjectStorageOutput {
	return o
}

func (o BackupStorageLocationSpecObjectStorageOutput) ToBackupStorageLocationSpecObjectStoragePtrOutput() BackupStorageLocationSpecObjectStoragePtrOutput {
	return o.ToBackupStorageLocationSpecObjectStoragePtrOutputWithContext(context.Background())
}

func (o BackupStorageLocationSpecObjectStorageOutput) ToBackupStorageLocationSpecObjectStoragePtrOutputWithContext(ctx context.Context) BackupStorageLocationSpecObjectStoragePtrOutput {
	return o.ApplyT(func(v BackupStorageLocationSpecObjectStorage) *BackupStorageLocationSpecObjectStorage {
		return &v
	}).(BackupStorageLocationSpecObjectStoragePtrOutput)
}

// Bucket is the bucket to use for object storage.
func (o BackupStorageLocationSpecObjectStorageOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v BackupStorageLocationSpecObjectStorage) string { return v.Bucket }).(pulumi.StringOutput)
}

// CACert defines a CA bundle to use when verifying TLS connections to the provider.
func (o BackupStorageLocationSpecObjectStorageOutput) CaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupStorageLocationSpecObjectStorage) *string { return v.CaCert }).(pulumi.StringPtrOutput)
}

// Prefix is the path inside a bucket to use for Velero storage. Optional.
func (o BackupStorageLocationSpecObjectStorageOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupStorageLocationSpecObjectStorage) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

type BackupStorageLocationSpecObjectStoragePtrOutput struct{ *pulumi.OutputState }

func (BackupStorageLocationSpecObjectStoragePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupStorageLocationSpecObjectStorage)(nil)).Elem()
}

func (o BackupStorageLocationSpecObjectStoragePtrOutput) ToBackupStorageLocationSpecObjectStoragePtrOutput() BackupStorageLocationSpecObjectStoragePtrOutput {
	return o
}

func (o BackupStorageLocationSpecObjectStoragePtrOutput) ToBackupStorageLocationSpecObjectStoragePtrOutputWithContext(ctx context.Context) BackupStorageLocationSpecObjectStoragePtrOutput {
	return o
}

func (o BackupStorageLocationSpecObjectStoragePtrOutput) Elem() BackupStorageLocationSpecObjectStorageOutput {
	return o.ApplyT(func(v *BackupStorageLocationSpecObjectStorage) BackupStorageLocationSpecObjectStorage { return *v }).(BackupStorageLocationSpecObjectStorageOutput)
}

// Bucket is the bucket to use for object storage.
func (o BackupStorageLocationSpecObjectStoragePtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupStorageLocationSpecObjectStorage) *string {
		if v == nil {
			return nil
		}
		return &v.Bucket
	}).(pulumi.StringPtrOutput)
}

// CACert defines a CA bundle to use when verifying TLS connections to the provider.
func (o BackupStorageLocationSpecObjectStoragePtrOutput) CaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupStorageLocationSpecObjectStorage) *string {
		if v == nil {
			return nil
		}
		return v.CaCert
	}).(pulumi.StringPtrOutput)
}

// Prefix is the path inside a bucket to use for Velero storage. Optional.
func (o BackupStorageLocationSpecObjectStoragePtrOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupStorageLocationSpecObjectStorage) *string {
		if v == nil {
			return nil
		}
		return v.Prefix
	}).(pulumi.StringPtrOutput)
}

// BackupStorageLocationStatus describes the current status of a Velero BackupStorageLocation.
type BackupStorageLocationStatus struct {
	// AccessMode is an unused field.
	//  Deprecated: there is now an AccessMode field on the Spec and this field will be removed entirely as of v2.0.
	AccessMode *string `pulumi:"accessMode"`
	// LastSyncedRevision is the value of the `metadata/revision` file in the backup storage location the last time the BSL's contents were synced into the cluster.
	//  Deprecated: this field is no longer updated or used for detecting changes to the location's contents and will be removed entirely in v2.0.
	LastSyncedRevision *string `pulumi:"lastSyncedRevision"`
	// LastSyncedTime is the last time the contents of the location were synced into the cluster.
	LastSyncedTime *string `pulumi:"lastSyncedTime"`
	// Phase is the current state of the BackupStorageLocation.
	Phase *string `pulumi:"phase"`
}

// BackupStorageLocationStatusInput is an input type that accepts BackupStorageLocationStatusArgs and BackupStorageLocationStatusOutput values.
// You can construct a concrete instance of `BackupStorageLocationStatusInput` via:
//
//          BackupStorageLocationStatusArgs{...}
type BackupStorageLocationStatusInput interface {
	pulumi.Input

	ToBackupStorageLocationStatusOutput() BackupStorageLocationStatusOutput
	ToBackupStorageLocationStatusOutputWithContext(context.Context) BackupStorageLocationStatusOutput
}

// BackupStorageLocationStatus describes the current status of a Velero BackupStorageLocation.
type BackupStorageLocationStatusArgs struct {
	// AccessMode is an unused field.
	//  Deprecated: there is now an AccessMode field on the Spec and this field will be removed entirely as of v2.0.
	AccessMode pulumi.StringPtrInput `pulumi:"accessMode"`
	// LastSyncedRevision is the value of the `metadata/revision` file in the backup storage location the last time the BSL's contents were synced into the cluster.
	//  Deprecated: this field is no longer updated or used for detecting changes to the location's contents and will be removed entirely in v2.0.
	LastSyncedRevision pulumi.StringPtrInput `pulumi:"lastSyncedRevision"`
	// LastSyncedTime is the last time the contents of the location were synced into the cluster.
	LastSyncedTime pulumi.StringPtrInput `pulumi:"lastSyncedTime"`
	// Phase is the current state of the BackupStorageLocation.
	Phase pulumi.StringPtrInput `pulumi:"phase"`
}

func (BackupStorageLocationStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupStorageLocationStatus)(nil)).Elem()
}

func (i BackupStorageLocationStatusArgs) ToBackupStorageLocationStatusOutput() BackupStorageLocationStatusOutput {
	return i.ToBackupStorageLocationStatusOutputWithContext(context.Background())
}

func (i BackupStorageLocationStatusArgs) ToBackupStorageLocationStatusOutputWithContext(ctx context.Context) BackupStorageLocationStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupStorageLocationStatusOutput)
}

func (i BackupStorageLocationStatusArgs) ToBackupStorageLocationStatusPtrOutput() BackupStorageLocationStatusPtrOutput {
	return i.ToBackupStorageLocationStatusPtrOutputWithContext(context.Background())
}

func (i BackupStorageLocationStatusArgs) ToBackupStorageLocationStatusPtrOutputWithContext(ctx context.Context) BackupStorageLocationStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupStorageLocationStatusOutput).ToBackupStorageLocationStatusPtrOutputWithContext(ctx)
}

// BackupStorageLocationStatusPtrInput is an input type that accepts BackupStorageLocationStatusArgs, BackupStorageLocationStatusPtr and BackupStorageLocationStatusPtrOutput values.
// You can construct a concrete instance of `BackupStorageLocationStatusPtrInput` via:
//
//          BackupStorageLocationStatusArgs{...}
//
//  or:
//
//          nil
type BackupStorageLocationStatusPtrInput interface {
	pulumi.Input

	ToBackupStorageLocationStatusPtrOutput() BackupStorageLocationStatusPtrOutput
	ToBackupStorageLocationStatusPtrOutputWithContext(context.Context) BackupStorageLocationStatusPtrOutput
}

type backupStorageLocationStatusPtrType BackupStorageLocationStatusArgs

func BackupStorageLocationStatusPtr(v *BackupStorageLocationStatusArgs) BackupStorageLocationStatusPtrInput {
	return (*backupStorageLocationStatusPtrType)(v)
}

func (*backupStorageLocationStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupStorageLocationStatus)(nil)).Elem()
}

func (i *backupStorageLocationStatusPtrType) ToBackupStorageLocationStatusPtrOutput() BackupStorageLocationStatusPtrOutput {
	return i.ToBackupStorageLocationStatusPtrOutputWithContext(context.Background())
}

func (i *backupStorageLocationStatusPtrType) ToBackupStorageLocationStatusPtrOutputWithContext(ctx context.Context) BackupStorageLocationStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupStorageLocationStatusPtrOutput)
}

// BackupStorageLocationStatus describes the current status of a Velero BackupStorageLocation.
type BackupStorageLocationStatusOutput struct{ *pulumi.OutputState }

func (BackupStorageLocationStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupStorageLocationStatus)(nil)).Elem()
}

func (o BackupStorageLocationStatusOutput) ToBackupStorageLocationStatusOutput() BackupStorageLocationStatusOutput {
	return o
}

func (o BackupStorageLocationStatusOutput) ToBackupStorageLocationStatusOutputWithContext(ctx context.Context) BackupStorageLocationStatusOutput {
	return o
}

func (o BackupStorageLocationStatusOutput) ToBackupStorageLocationStatusPtrOutput() BackupStorageLocationStatusPtrOutput {
	return o.ToBackupStorageLocationStatusPtrOutputWithContext(context.Background())
}

func (o BackupStorageLocationStatusOutput) ToBackupStorageLocationStatusPtrOutputWithContext(ctx context.Context) BackupStorageLocationStatusPtrOutput {
	return o.ApplyT(func(v BackupStorageLocationStatus) *BackupStorageLocationStatus {
		return &v
	}).(BackupStorageLocationStatusPtrOutput)
}

// AccessMode is an unused field.
//  Deprecated: there is now an AccessMode field on the Spec and this field will be removed entirely as of v2.0.
func (o BackupStorageLocationStatusOutput) AccessMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupStorageLocationStatus) *string { return v.AccessMode }).(pulumi.StringPtrOutput)
}

// LastSyncedRevision is the value of the `metadata/revision` file in the backup storage location the last time the BSL's contents were synced into the cluster.
//  Deprecated: this field is no longer updated or used for detecting changes to the location's contents and will be removed entirely in v2.0.
func (o BackupStorageLocationStatusOutput) LastSyncedRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupStorageLocationStatus) *string { return v.LastSyncedRevision }).(pulumi.StringPtrOutput)
}

// LastSyncedTime is the last time the contents of the location were synced into the cluster.
func (o BackupStorageLocationStatusOutput) LastSyncedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupStorageLocationStatus) *string { return v.LastSyncedTime }).(pulumi.StringPtrOutput)
}

// Phase is the current state of the BackupStorageLocation.
func (o BackupStorageLocationStatusOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupStorageLocationStatus) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

type BackupStorageLocationStatusPtrOutput struct{ *pulumi.OutputState }

func (BackupStorageLocationStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupStorageLocationStatus)(nil)).Elem()
}

func (o BackupStorageLocationStatusPtrOutput) ToBackupStorageLocationStatusPtrOutput() BackupStorageLocationStatusPtrOutput {
	return o
}

func (o BackupStorageLocationStatusPtrOutput) ToBackupStorageLocationStatusPtrOutputWithContext(ctx context.Context) BackupStorageLocationStatusPtrOutput {
	return o
}

func (o BackupStorageLocationStatusPtrOutput) Elem() BackupStorageLocationStatusOutput {
	return o.ApplyT(func(v *BackupStorageLocationStatus) BackupStorageLocationStatus { return *v }).(BackupStorageLocationStatusOutput)
}

// AccessMode is an unused field.
//  Deprecated: there is now an AccessMode field on the Spec and this field will be removed entirely as of v2.0.
func (o BackupStorageLocationStatusPtrOutput) AccessMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupStorageLocationStatus) *string {
		if v == nil {
			return nil
		}
		return v.AccessMode
	}).(pulumi.StringPtrOutput)
}

// LastSyncedRevision is the value of the `metadata/revision` file in the backup storage location the last time the BSL's contents were synced into the cluster.
//  Deprecated: this field is no longer updated or used for detecting changes to the location's contents and will be removed entirely in v2.0.
func (o BackupStorageLocationStatusPtrOutput) LastSyncedRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupStorageLocationStatus) *string {
		if v == nil {
			return nil
		}
		return v.LastSyncedRevision
	}).(pulumi.StringPtrOutput)
}

// LastSyncedTime is the last time the contents of the location were synced into the cluster.
func (o BackupStorageLocationStatusPtrOutput) LastSyncedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupStorageLocationStatus) *string {
		if v == nil {
			return nil
		}
		return v.LastSyncedTime
	}).(pulumi.StringPtrOutput)
}

// Phase is the current state of the BackupStorageLocation.
func (o BackupStorageLocationStatusPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupStorageLocationStatus) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

// DeleteBackupRequest is a request to delete one or more backups.
type DeleteBackupRequestType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// DeleteBackupRequestSpec is the specification for which backups to delete.
	Spec *DeleteBackupRequestSpec `pulumi:"spec"`
	// DeleteBackupRequestStatus is the current status of a DeleteBackupRequest.
	Status *DeleteBackupRequestStatus `pulumi:"status"`
}

// DeleteBackupRequestTypeInput is an input type that accepts DeleteBackupRequestTypeArgs and DeleteBackupRequestTypeOutput values.
// You can construct a concrete instance of `DeleteBackupRequestTypeInput` via:
//
//          DeleteBackupRequestTypeArgs{...}
type DeleteBackupRequestTypeInput interface {
	pulumi.Input

	ToDeleteBackupRequestTypeOutput() DeleteBackupRequestTypeOutput
	ToDeleteBackupRequestTypeOutputWithContext(context.Context) DeleteBackupRequestTypeOutput
}

// DeleteBackupRequest is a request to delete one or more backups.
type DeleteBackupRequestTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// DeleteBackupRequestSpec is the specification for which backups to delete.
	Spec DeleteBackupRequestSpecPtrInput `pulumi:"spec"`
	// DeleteBackupRequestStatus is the current status of a DeleteBackupRequest.
	Status DeleteBackupRequestStatusPtrInput `pulumi:"status"`
}

func (DeleteBackupRequestTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeleteBackupRequestType)(nil)).Elem()
}

func (i DeleteBackupRequestTypeArgs) ToDeleteBackupRequestTypeOutput() DeleteBackupRequestTypeOutput {
	return i.ToDeleteBackupRequestTypeOutputWithContext(context.Background())
}

func (i DeleteBackupRequestTypeArgs) ToDeleteBackupRequestTypeOutputWithContext(ctx context.Context) DeleteBackupRequestTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeleteBackupRequestTypeOutput)
}

// DeleteBackupRequest is a request to delete one or more backups.
type DeleteBackupRequestTypeOutput struct{ *pulumi.OutputState }

func (DeleteBackupRequestTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeleteBackupRequestType)(nil)).Elem()
}

func (o DeleteBackupRequestTypeOutput) ToDeleteBackupRequestTypeOutput() DeleteBackupRequestTypeOutput {
	return o
}

func (o DeleteBackupRequestTypeOutput) ToDeleteBackupRequestTypeOutputWithContext(ctx context.Context) DeleteBackupRequestTypeOutput {
	return o
}

func (o DeleteBackupRequestTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeleteBackupRequestType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o DeleteBackupRequestTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeleteBackupRequestType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o DeleteBackupRequestTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v DeleteBackupRequestType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// DeleteBackupRequestSpec is the specification for which backups to delete.
func (o DeleteBackupRequestTypeOutput) Spec() DeleteBackupRequestSpecPtrOutput {
	return o.ApplyT(func(v DeleteBackupRequestType) *DeleteBackupRequestSpec { return v.Spec }).(DeleteBackupRequestSpecPtrOutput)
}

// DeleteBackupRequestStatus is the current status of a DeleteBackupRequest.
func (o DeleteBackupRequestTypeOutput) Status() DeleteBackupRequestStatusPtrOutput {
	return o.ApplyT(func(v DeleteBackupRequestType) *DeleteBackupRequestStatus { return v.Status }).(DeleteBackupRequestStatusPtrOutput)
}

type DeleteBackupRequestMetadata struct {
}

// DeleteBackupRequestMetadataInput is an input type that accepts DeleteBackupRequestMetadataArgs and DeleteBackupRequestMetadataOutput values.
// You can construct a concrete instance of `DeleteBackupRequestMetadataInput` via:
//
//          DeleteBackupRequestMetadataArgs{...}
type DeleteBackupRequestMetadataInput interface {
	pulumi.Input

	ToDeleteBackupRequestMetadataOutput() DeleteBackupRequestMetadataOutput
	ToDeleteBackupRequestMetadataOutputWithContext(context.Context) DeleteBackupRequestMetadataOutput
}

type DeleteBackupRequestMetadataArgs struct {
}

func (DeleteBackupRequestMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeleteBackupRequestMetadata)(nil)).Elem()
}

func (i DeleteBackupRequestMetadataArgs) ToDeleteBackupRequestMetadataOutput() DeleteBackupRequestMetadataOutput {
	return i.ToDeleteBackupRequestMetadataOutputWithContext(context.Background())
}

func (i DeleteBackupRequestMetadataArgs) ToDeleteBackupRequestMetadataOutputWithContext(ctx context.Context) DeleteBackupRequestMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeleteBackupRequestMetadataOutput)
}

type DeleteBackupRequestMetadataOutput struct{ *pulumi.OutputState }

func (DeleteBackupRequestMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeleteBackupRequestMetadata)(nil)).Elem()
}

func (o DeleteBackupRequestMetadataOutput) ToDeleteBackupRequestMetadataOutput() DeleteBackupRequestMetadataOutput {
	return o
}

func (o DeleteBackupRequestMetadataOutput) ToDeleteBackupRequestMetadataOutputWithContext(ctx context.Context) DeleteBackupRequestMetadataOutput {
	return o
}

// DeleteBackupRequestSpec is the specification for which backups to delete.
type DeleteBackupRequestSpec struct {
	BackupName string `pulumi:"backupName"`
}

// DeleteBackupRequestSpecInput is an input type that accepts DeleteBackupRequestSpecArgs and DeleteBackupRequestSpecOutput values.
// You can construct a concrete instance of `DeleteBackupRequestSpecInput` via:
//
//          DeleteBackupRequestSpecArgs{...}
type DeleteBackupRequestSpecInput interface {
	pulumi.Input

	ToDeleteBackupRequestSpecOutput() DeleteBackupRequestSpecOutput
	ToDeleteBackupRequestSpecOutputWithContext(context.Context) DeleteBackupRequestSpecOutput
}

// DeleteBackupRequestSpec is the specification for which backups to delete.
type DeleteBackupRequestSpecArgs struct {
	BackupName pulumi.StringInput `pulumi:"backupName"`
}

func (DeleteBackupRequestSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeleteBackupRequestSpec)(nil)).Elem()
}

func (i DeleteBackupRequestSpecArgs) ToDeleteBackupRequestSpecOutput() DeleteBackupRequestSpecOutput {
	return i.ToDeleteBackupRequestSpecOutputWithContext(context.Background())
}

func (i DeleteBackupRequestSpecArgs) ToDeleteBackupRequestSpecOutputWithContext(ctx context.Context) DeleteBackupRequestSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeleteBackupRequestSpecOutput)
}

func (i DeleteBackupRequestSpecArgs) ToDeleteBackupRequestSpecPtrOutput() DeleteBackupRequestSpecPtrOutput {
	return i.ToDeleteBackupRequestSpecPtrOutputWithContext(context.Background())
}

func (i DeleteBackupRequestSpecArgs) ToDeleteBackupRequestSpecPtrOutputWithContext(ctx context.Context) DeleteBackupRequestSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeleteBackupRequestSpecOutput).ToDeleteBackupRequestSpecPtrOutputWithContext(ctx)
}

// DeleteBackupRequestSpecPtrInput is an input type that accepts DeleteBackupRequestSpecArgs, DeleteBackupRequestSpecPtr and DeleteBackupRequestSpecPtrOutput values.
// You can construct a concrete instance of `DeleteBackupRequestSpecPtrInput` via:
//
//          DeleteBackupRequestSpecArgs{...}
//
//  or:
//
//          nil
type DeleteBackupRequestSpecPtrInput interface {
	pulumi.Input

	ToDeleteBackupRequestSpecPtrOutput() DeleteBackupRequestSpecPtrOutput
	ToDeleteBackupRequestSpecPtrOutputWithContext(context.Context) DeleteBackupRequestSpecPtrOutput
}

type deleteBackupRequestSpecPtrType DeleteBackupRequestSpecArgs

func DeleteBackupRequestSpecPtr(v *DeleteBackupRequestSpecArgs) DeleteBackupRequestSpecPtrInput {
	return (*deleteBackupRequestSpecPtrType)(v)
}

func (*deleteBackupRequestSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeleteBackupRequestSpec)(nil)).Elem()
}

func (i *deleteBackupRequestSpecPtrType) ToDeleteBackupRequestSpecPtrOutput() DeleteBackupRequestSpecPtrOutput {
	return i.ToDeleteBackupRequestSpecPtrOutputWithContext(context.Background())
}

func (i *deleteBackupRequestSpecPtrType) ToDeleteBackupRequestSpecPtrOutputWithContext(ctx context.Context) DeleteBackupRequestSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeleteBackupRequestSpecPtrOutput)
}

// DeleteBackupRequestSpec is the specification for which backups to delete.
type DeleteBackupRequestSpecOutput struct{ *pulumi.OutputState }

func (DeleteBackupRequestSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeleteBackupRequestSpec)(nil)).Elem()
}

func (o DeleteBackupRequestSpecOutput) ToDeleteBackupRequestSpecOutput() DeleteBackupRequestSpecOutput {
	return o
}

func (o DeleteBackupRequestSpecOutput) ToDeleteBackupRequestSpecOutputWithContext(ctx context.Context) DeleteBackupRequestSpecOutput {
	return o
}

func (o DeleteBackupRequestSpecOutput) ToDeleteBackupRequestSpecPtrOutput() DeleteBackupRequestSpecPtrOutput {
	return o.ToDeleteBackupRequestSpecPtrOutputWithContext(context.Background())
}

func (o DeleteBackupRequestSpecOutput) ToDeleteBackupRequestSpecPtrOutputWithContext(ctx context.Context) DeleteBackupRequestSpecPtrOutput {
	return o.ApplyT(func(v DeleteBackupRequestSpec) *DeleteBackupRequestSpec {
		return &v
	}).(DeleteBackupRequestSpecPtrOutput)
}
func (o DeleteBackupRequestSpecOutput) BackupName() pulumi.StringOutput {
	return o.ApplyT(func(v DeleteBackupRequestSpec) string { return v.BackupName }).(pulumi.StringOutput)
}

type DeleteBackupRequestSpecPtrOutput struct{ *pulumi.OutputState }

func (DeleteBackupRequestSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeleteBackupRequestSpec)(nil)).Elem()
}

func (o DeleteBackupRequestSpecPtrOutput) ToDeleteBackupRequestSpecPtrOutput() DeleteBackupRequestSpecPtrOutput {
	return o
}

func (o DeleteBackupRequestSpecPtrOutput) ToDeleteBackupRequestSpecPtrOutputWithContext(ctx context.Context) DeleteBackupRequestSpecPtrOutput {
	return o
}

func (o DeleteBackupRequestSpecPtrOutput) Elem() DeleteBackupRequestSpecOutput {
	return o.ApplyT(func(v *DeleteBackupRequestSpec) DeleteBackupRequestSpec { return *v }).(DeleteBackupRequestSpecOutput)
}

func (o DeleteBackupRequestSpecPtrOutput) BackupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeleteBackupRequestSpec) *string {
		if v == nil {
			return nil
		}
		return &v.BackupName
	}).(pulumi.StringPtrOutput)
}

// DeleteBackupRequestStatus is the current status of a DeleteBackupRequest.
type DeleteBackupRequestStatus struct {
	// Errors contains any errors that were encountered during the deletion process.
	Errors []string `pulumi:"errors"`
	// Phase is the current state of the DeleteBackupRequest.
	Phase *string `pulumi:"phase"`
}

// DeleteBackupRequestStatusInput is an input type that accepts DeleteBackupRequestStatusArgs and DeleteBackupRequestStatusOutput values.
// You can construct a concrete instance of `DeleteBackupRequestStatusInput` via:
//
//          DeleteBackupRequestStatusArgs{...}
type DeleteBackupRequestStatusInput interface {
	pulumi.Input

	ToDeleteBackupRequestStatusOutput() DeleteBackupRequestStatusOutput
	ToDeleteBackupRequestStatusOutputWithContext(context.Context) DeleteBackupRequestStatusOutput
}

// DeleteBackupRequestStatus is the current status of a DeleteBackupRequest.
type DeleteBackupRequestStatusArgs struct {
	// Errors contains any errors that were encountered during the deletion process.
	Errors pulumi.StringArrayInput `pulumi:"errors"`
	// Phase is the current state of the DeleteBackupRequest.
	Phase pulumi.StringPtrInput `pulumi:"phase"`
}

func (DeleteBackupRequestStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeleteBackupRequestStatus)(nil)).Elem()
}

func (i DeleteBackupRequestStatusArgs) ToDeleteBackupRequestStatusOutput() DeleteBackupRequestStatusOutput {
	return i.ToDeleteBackupRequestStatusOutputWithContext(context.Background())
}

func (i DeleteBackupRequestStatusArgs) ToDeleteBackupRequestStatusOutputWithContext(ctx context.Context) DeleteBackupRequestStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeleteBackupRequestStatusOutput)
}

func (i DeleteBackupRequestStatusArgs) ToDeleteBackupRequestStatusPtrOutput() DeleteBackupRequestStatusPtrOutput {
	return i.ToDeleteBackupRequestStatusPtrOutputWithContext(context.Background())
}

func (i DeleteBackupRequestStatusArgs) ToDeleteBackupRequestStatusPtrOutputWithContext(ctx context.Context) DeleteBackupRequestStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeleteBackupRequestStatusOutput).ToDeleteBackupRequestStatusPtrOutputWithContext(ctx)
}

// DeleteBackupRequestStatusPtrInput is an input type that accepts DeleteBackupRequestStatusArgs, DeleteBackupRequestStatusPtr and DeleteBackupRequestStatusPtrOutput values.
// You can construct a concrete instance of `DeleteBackupRequestStatusPtrInput` via:
//
//          DeleteBackupRequestStatusArgs{...}
//
//  or:
//
//          nil
type DeleteBackupRequestStatusPtrInput interface {
	pulumi.Input

	ToDeleteBackupRequestStatusPtrOutput() DeleteBackupRequestStatusPtrOutput
	ToDeleteBackupRequestStatusPtrOutputWithContext(context.Context) DeleteBackupRequestStatusPtrOutput
}

type deleteBackupRequestStatusPtrType DeleteBackupRequestStatusArgs

func DeleteBackupRequestStatusPtr(v *DeleteBackupRequestStatusArgs) DeleteBackupRequestStatusPtrInput {
	return (*deleteBackupRequestStatusPtrType)(v)
}

func (*deleteBackupRequestStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeleteBackupRequestStatus)(nil)).Elem()
}

func (i *deleteBackupRequestStatusPtrType) ToDeleteBackupRequestStatusPtrOutput() DeleteBackupRequestStatusPtrOutput {
	return i.ToDeleteBackupRequestStatusPtrOutputWithContext(context.Background())
}

func (i *deleteBackupRequestStatusPtrType) ToDeleteBackupRequestStatusPtrOutputWithContext(ctx context.Context) DeleteBackupRequestStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeleteBackupRequestStatusPtrOutput)
}

// DeleteBackupRequestStatus is the current status of a DeleteBackupRequest.
type DeleteBackupRequestStatusOutput struct{ *pulumi.OutputState }

func (DeleteBackupRequestStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeleteBackupRequestStatus)(nil)).Elem()
}

func (o DeleteBackupRequestStatusOutput) ToDeleteBackupRequestStatusOutput() DeleteBackupRequestStatusOutput {
	return o
}

func (o DeleteBackupRequestStatusOutput) ToDeleteBackupRequestStatusOutputWithContext(ctx context.Context) DeleteBackupRequestStatusOutput {
	return o
}

func (o DeleteBackupRequestStatusOutput) ToDeleteBackupRequestStatusPtrOutput() DeleteBackupRequestStatusPtrOutput {
	return o.ToDeleteBackupRequestStatusPtrOutputWithContext(context.Background())
}

func (o DeleteBackupRequestStatusOutput) ToDeleteBackupRequestStatusPtrOutputWithContext(ctx context.Context) DeleteBackupRequestStatusPtrOutput {
	return o.ApplyT(func(v DeleteBackupRequestStatus) *DeleteBackupRequestStatus {
		return &v
	}).(DeleteBackupRequestStatusPtrOutput)
}

// Errors contains any errors that were encountered during the deletion process.
func (o DeleteBackupRequestStatusOutput) Errors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeleteBackupRequestStatus) []string { return v.Errors }).(pulumi.StringArrayOutput)
}

// Phase is the current state of the DeleteBackupRequest.
func (o DeleteBackupRequestStatusOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeleteBackupRequestStatus) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

type DeleteBackupRequestStatusPtrOutput struct{ *pulumi.OutputState }

func (DeleteBackupRequestStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeleteBackupRequestStatus)(nil)).Elem()
}

func (o DeleteBackupRequestStatusPtrOutput) ToDeleteBackupRequestStatusPtrOutput() DeleteBackupRequestStatusPtrOutput {
	return o
}

func (o DeleteBackupRequestStatusPtrOutput) ToDeleteBackupRequestStatusPtrOutputWithContext(ctx context.Context) DeleteBackupRequestStatusPtrOutput {
	return o
}

func (o DeleteBackupRequestStatusPtrOutput) Elem() DeleteBackupRequestStatusOutput {
	return o.ApplyT(func(v *DeleteBackupRequestStatus) DeleteBackupRequestStatus { return *v }).(DeleteBackupRequestStatusOutput)
}

// Errors contains any errors that were encountered during the deletion process.
func (o DeleteBackupRequestStatusPtrOutput) Errors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeleteBackupRequestStatus) []string {
		if v == nil {
			return nil
		}
		return v.Errors
	}).(pulumi.StringArrayOutput)
}

// Phase is the current state of the DeleteBackupRequest.
func (o DeleteBackupRequestStatusPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeleteBackupRequestStatus) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

// DownloadRequest is a request to download an artifact from backup object storage, such as a backup log file.
type DownloadRequestType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// DownloadRequestSpec is the specification for a download request.
	Spec *DownloadRequestSpec `pulumi:"spec"`
	// DownloadRequestStatus is the current status of a DownloadRequest.
	Status *DownloadRequestStatus `pulumi:"status"`
}

// DownloadRequestTypeInput is an input type that accepts DownloadRequestTypeArgs and DownloadRequestTypeOutput values.
// You can construct a concrete instance of `DownloadRequestTypeInput` via:
//
//          DownloadRequestTypeArgs{...}
type DownloadRequestTypeInput interface {
	pulumi.Input

	ToDownloadRequestTypeOutput() DownloadRequestTypeOutput
	ToDownloadRequestTypeOutputWithContext(context.Context) DownloadRequestTypeOutput
}

// DownloadRequest is a request to download an artifact from backup object storage, such as a backup log file.
type DownloadRequestTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// DownloadRequestSpec is the specification for a download request.
	Spec DownloadRequestSpecPtrInput `pulumi:"spec"`
	// DownloadRequestStatus is the current status of a DownloadRequest.
	Status DownloadRequestStatusPtrInput `pulumi:"status"`
}

func (DownloadRequestTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DownloadRequestType)(nil)).Elem()
}

func (i DownloadRequestTypeArgs) ToDownloadRequestTypeOutput() DownloadRequestTypeOutput {
	return i.ToDownloadRequestTypeOutputWithContext(context.Background())
}

func (i DownloadRequestTypeArgs) ToDownloadRequestTypeOutputWithContext(ctx context.Context) DownloadRequestTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DownloadRequestTypeOutput)
}

// DownloadRequest is a request to download an artifact from backup object storage, such as a backup log file.
type DownloadRequestTypeOutput struct{ *pulumi.OutputState }

func (DownloadRequestTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DownloadRequestType)(nil)).Elem()
}

func (o DownloadRequestTypeOutput) ToDownloadRequestTypeOutput() DownloadRequestTypeOutput {
	return o
}

func (o DownloadRequestTypeOutput) ToDownloadRequestTypeOutputWithContext(ctx context.Context) DownloadRequestTypeOutput {
	return o
}

func (o DownloadRequestTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DownloadRequestType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o DownloadRequestTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DownloadRequestType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o DownloadRequestTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v DownloadRequestType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// DownloadRequestSpec is the specification for a download request.
func (o DownloadRequestTypeOutput) Spec() DownloadRequestSpecPtrOutput {
	return o.ApplyT(func(v DownloadRequestType) *DownloadRequestSpec { return v.Spec }).(DownloadRequestSpecPtrOutput)
}

// DownloadRequestStatus is the current status of a DownloadRequest.
func (o DownloadRequestTypeOutput) Status() DownloadRequestStatusPtrOutput {
	return o.ApplyT(func(v DownloadRequestType) *DownloadRequestStatus { return v.Status }).(DownloadRequestStatusPtrOutput)
}

type DownloadRequestMetadata struct {
}

// DownloadRequestMetadataInput is an input type that accepts DownloadRequestMetadataArgs and DownloadRequestMetadataOutput values.
// You can construct a concrete instance of `DownloadRequestMetadataInput` via:
//
//          DownloadRequestMetadataArgs{...}
type DownloadRequestMetadataInput interface {
	pulumi.Input

	ToDownloadRequestMetadataOutput() DownloadRequestMetadataOutput
	ToDownloadRequestMetadataOutputWithContext(context.Context) DownloadRequestMetadataOutput
}

type DownloadRequestMetadataArgs struct {
}

func (DownloadRequestMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DownloadRequestMetadata)(nil)).Elem()
}

func (i DownloadRequestMetadataArgs) ToDownloadRequestMetadataOutput() DownloadRequestMetadataOutput {
	return i.ToDownloadRequestMetadataOutputWithContext(context.Background())
}

func (i DownloadRequestMetadataArgs) ToDownloadRequestMetadataOutputWithContext(ctx context.Context) DownloadRequestMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DownloadRequestMetadataOutput)
}

type DownloadRequestMetadataOutput struct{ *pulumi.OutputState }

func (DownloadRequestMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DownloadRequestMetadata)(nil)).Elem()
}

func (o DownloadRequestMetadataOutput) ToDownloadRequestMetadataOutput() DownloadRequestMetadataOutput {
	return o
}

func (o DownloadRequestMetadataOutput) ToDownloadRequestMetadataOutputWithContext(ctx context.Context) DownloadRequestMetadataOutput {
	return o
}

// DownloadRequestSpec is the specification for a download request.
type DownloadRequestSpec struct {
	// Target is what to download (e.g. logs for a backup).
	Target DownloadRequestSpecTarget `pulumi:"target"`
}

// DownloadRequestSpecInput is an input type that accepts DownloadRequestSpecArgs and DownloadRequestSpecOutput values.
// You can construct a concrete instance of `DownloadRequestSpecInput` via:
//
//          DownloadRequestSpecArgs{...}
type DownloadRequestSpecInput interface {
	pulumi.Input

	ToDownloadRequestSpecOutput() DownloadRequestSpecOutput
	ToDownloadRequestSpecOutputWithContext(context.Context) DownloadRequestSpecOutput
}

// DownloadRequestSpec is the specification for a download request.
type DownloadRequestSpecArgs struct {
	// Target is what to download (e.g. logs for a backup).
	Target DownloadRequestSpecTargetInput `pulumi:"target"`
}

func (DownloadRequestSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DownloadRequestSpec)(nil)).Elem()
}

func (i DownloadRequestSpecArgs) ToDownloadRequestSpecOutput() DownloadRequestSpecOutput {
	return i.ToDownloadRequestSpecOutputWithContext(context.Background())
}

func (i DownloadRequestSpecArgs) ToDownloadRequestSpecOutputWithContext(ctx context.Context) DownloadRequestSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DownloadRequestSpecOutput)
}

func (i DownloadRequestSpecArgs) ToDownloadRequestSpecPtrOutput() DownloadRequestSpecPtrOutput {
	return i.ToDownloadRequestSpecPtrOutputWithContext(context.Background())
}

func (i DownloadRequestSpecArgs) ToDownloadRequestSpecPtrOutputWithContext(ctx context.Context) DownloadRequestSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DownloadRequestSpecOutput).ToDownloadRequestSpecPtrOutputWithContext(ctx)
}

// DownloadRequestSpecPtrInput is an input type that accepts DownloadRequestSpecArgs, DownloadRequestSpecPtr and DownloadRequestSpecPtrOutput values.
// You can construct a concrete instance of `DownloadRequestSpecPtrInput` via:
//
//          DownloadRequestSpecArgs{...}
//
//  or:
//
//          nil
type DownloadRequestSpecPtrInput interface {
	pulumi.Input

	ToDownloadRequestSpecPtrOutput() DownloadRequestSpecPtrOutput
	ToDownloadRequestSpecPtrOutputWithContext(context.Context) DownloadRequestSpecPtrOutput
}

type downloadRequestSpecPtrType DownloadRequestSpecArgs

func DownloadRequestSpecPtr(v *DownloadRequestSpecArgs) DownloadRequestSpecPtrInput {
	return (*downloadRequestSpecPtrType)(v)
}

func (*downloadRequestSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DownloadRequestSpec)(nil)).Elem()
}

func (i *downloadRequestSpecPtrType) ToDownloadRequestSpecPtrOutput() DownloadRequestSpecPtrOutput {
	return i.ToDownloadRequestSpecPtrOutputWithContext(context.Background())
}

func (i *downloadRequestSpecPtrType) ToDownloadRequestSpecPtrOutputWithContext(ctx context.Context) DownloadRequestSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DownloadRequestSpecPtrOutput)
}

// DownloadRequestSpec is the specification for a download request.
type DownloadRequestSpecOutput struct{ *pulumi.OutputState }

func (DownloadRequestSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DownloadRequestSpec)(nil)).Elem()
}

func (o DownloadRequestSpecOutput) ToDownloadRequestSpecOutput() DownloadRequestSpecOutput {
	return o
}

func (o DownloadRequestSpecOutput) ToDownloadRequestSpecOutputWithContext(ctx context.Context) DownloadRequestSpecOutput {
	return o
}

func (o DownloadRequestSpecOutput) ToDownloadRequestSpecPtrOutput() DownloadRequestSpecPtrOutput {
	return o.ToDownloadRequestSpecPtrOutputWithContext(context.Background())
}

func (o DownloadRequestSpecOutput) ToDownloadRequestSpecPtrOutputWithContext(ctx context.Context) DownloadRequestSpecPtrOutput {
	return o.ApplyT(func(v DownloadRequestSpec) *DownloadRequestSpec {
		return &v
	}).(DownloadRequestSpecPtrOutput)
}

// Target is what to download (e.g. logs for a backup).
func (o DownloadRequestSpecOutput) Target() DownloadRequestSpecTargetOutput {
	return o.ApplyT(func(v DownloadRequestSpec) DownloadRequestSpecTarget { return v.Target }).(DownloadRequestSpecTargetOutput)
}

type DownloadRequestSpecPtrOutput struct{ *pulumi.OutputState }

func (DownloadRequestSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DownloadRequestSpec)(nil)).Elem()
}

func (o DownloadRequestSpecPtrOutput) ToDownloadRequestSpecPtrOutput() DownloadRequestSpecPtrOutput {
	return o
}

func (o DownloadRequestSpecPtrOutput) ToDownloadRequestSpecPtrOutputWithContext(ctx context.Context) DownloadRequestSpecPtrOutput {
	return o
}

func (o DownloadRequestSpecPtrOutput) Elem() DownloadRequestSpecOutput {
	return o.ApplyT(func(v *DownloadRequestSpec) DownloadRequestSpec { return *v }).(DownloadRequestSpecOutput)
}

// Target is what to download (e.g. logs for a backup).
func (o DownloadRequestSpecPtrOutput) Target() DownloadRequestSpecTargetPtrOutput {
	return o.ApplyT(func(v *DownloadRequestSpec) *DownloadRequestSpecTarget {
		if v == nil {
			return nil
		}
		return &v.Target
	}).(DownloadRequestSpecTargetPtrOutput)
}

// Target is what to download (e.g. logs for a backup).
type DownloadRequestSpecTarget struct {
	// Kind is the type of file to download.
	Kind string `pulumi:"kind"`
	// Name is the name of the kubernetes resource with which the file is associated.
	Name string `pulumi:"name"`
}

// DownloadRequestSpecTargetInput is an input type that accepts DownloadRequestSpecTargetArgs and DownloadRequestSpecTargetOutput values.
// You can construct a concrete instance of `DownloadRequestSpecTargetInput` via:
//
//          DownloadRequestSpecTargetArgs{...}
type DownloadRequestSpecTargetInput interface {
	pulumi.Input

	ToDownloadRequestSpecTargetOutput() DownloadRequestSpecTargetOutput
	ToDownloadRequestSpecTargetOutputWithContext(context.Context) DownloadRequestSpecTargetOutput
}

// Target is what to download (e.g. logs for a backup).
type DownloadRequestSpecTargetArgs struct {
	// Kind is the type of file to download.
	Kind pulumi.StringInput `pulumi:"kind"`
	// Name is the name of the kubernetes resource with which the file is associated.
	Name pulumi.StringInput `pulumi:"name"`
}

func (DownloadRequestSpecTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DownloadRequestSpecTarget)(nil)).Elem()
}

func (i DownloadRequestSpecTargetArgs) ToDownloadRequestSpecTargetOutput() DownloadRequestSpecTargetOutput {
	return i.ToDownloadRequestSpecTargetOutputWithContext(context.Background())
}

func (i DownloadRequestSpecTargetArgs) ToDownloadRequestSpecTargetOutputWithContext(ctx context.Context) DownloadRequestSpecTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DownloadRequestSpecTargetOutput)
}

func (i DownloadRequestSpecTargetArgs) ToDownloadRequestSpecTargetPtrOutput() DownloadRequestSpecTargetPtrOutput {
	return i.ToDownloadRequestSpecTargetPtrOutputWithContext(context.Background())
}

func (i DownloadRequestSpecTargetArgs) ToDownloadRequestSpecTargetPtrOutputWithContext(ctx context.Context) DownloadRequestSpecTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DownloadRequestSpecTargetOutput).ToDownloadRequestSpecTargetPtrOutputWithContext(ctx)
}

// DownloadRequestSpecTargetPtrInput is an input type that accepts DownloadRequestSpecTargetArgs, DownloadRequestSpecTargetPtr and DownloadRequestSpecTargetPtrOutput values.
// You can construct a concrete instance of `DownloadRequestSpecTargetPtrInput` via:
//
//          DownloadRequestSpecTargetArgs{...}
//
//  or:
//
//          nil
type DownloadRequestSpecTargetPtrInput interface {
	pulumi.Input

	ToDownloadRequestSpecTargetPtrOutput() DownloadRequestSpecTargetPtrOutput
	ToDownloadRequestSpecTargetPtrOutputWithContext(context.Context) DownloadRequestSpecTargetPtrOutput
}

type downloadRequestSpecTargetPtrType DownloadRequestSpecTargetArgs

func DownloadRequestSpecTargetPtr(v *DownloadRequestSpecTargetArgs) DownloadRequestSpecTargetPtrInput {
	return (*downloadRequestSpecTargetPtrType)(v)
}

func (*downloadRequestSpecTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DownloadRequestSpecTarget)(nil)).Elem()
}

func (i *downloadRequestSpecTargetPtrType) ToDownloadRequestSpecTargetPtrOutput() DownloadRequestSpecTargetPtrOutput {
	return i.ToDownloadRequestSpecTargetPtrOutputWithContext(context.Background())
}

func (i *downloadRequestSpecTargetPtrType) ToDownloadRequestSpecTargetPtrOutputWithContext(ctx context.Context) DownloadRequestSpecTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DownloadRequestSpecTargetPtrOutput)
}

// Target is what to download (e.g. logs for a backup).
type DownloadRequestSpecTargetOutput struct{ *pulumi.OutputState }

func (DownloadRequestSpecTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DownloadRequestSpecTarget)(nil)).Elem()
}

func (o DownloadRequestSpecTargetOutput) ToDownloadRequestSpecTargetOutput() DownloadRequestSpecTargetOutput {
	return o
}

func (o DownloadRequestSpecTargetOutput) ToDownloadRequestSpecTargetOutputWithContext(ctx context.Context) DownloadRequestSpecTargetOutput {
	return o
}

func (o DownloadRequestSpecTargetOutput) ToDownloadRequestSpecTargetPtrOutput() DownloadRequestSpecTargetPtrOutput {
	return o.ToDownloadRequestSpecTargetPtrOutputWithContext(context.Background())
}

func (o DownloadRequestSpecTargetOutput) ToDownloadRequestSpecTargetPtrOutputWithContext(ctx context.Context) DownloadRequestSpecTargetPtrOutput {
	return o.ApplyT(func(v DownloadRequestSpecTarget) *DownloadRequestSpecTarget {
		return &v
	}).(DownloadRequestSpecTargetPtrOutput)
}

// Kind is the type of file to download.
func (o DownloadRequestSpecTargetOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v DownloadRequestSpecTarget) string { return v.Kind }).(pulumi.StringOutput)
}

// Name is the name of the kubernetes resource with which the file is associated.
func (o DownloadRequestSpecTargetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DownloadRequestSpecTarget) string { return v.Name }).(pulumi.StringOutput)
}

type DownloadRequestSpecTargetPtrOutput struct{ *pulumi.OutputState }

func (DownloadRequestSpecTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DownloadRequestSpecTarget)(nil)).Elem()
}

func (o DownloadRequestSpecTargetPtrOutput) ToDownloadRequestSpecTargetPtrOutput() DownloadRequestSpecTargetPtrOutput {
	return o
}

func (o DownloadRequestSpecTargetPtrOutput) ToDownloadRequestSpecTargetPtrOutputWithContext(ctx context.Context) DownloadRequestSpecTargetPtrOutput {
	return o
}

func (o DownloadRequestSpecTargetPtrOutput) Elem() DownloadRequestSpecTargetOutput {
	return o.ApplyT(func(v *DownloadRequestSpecTarget) DownloadRequestSpecTarget { return *v }).(DownloadRequestSpecTargetOutput)
}

// Kind is the type of file to download.
func (o DownloadRequestSpecTargetPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DownloadRequestSpecTarget) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of the kubernetes resource with which the file is associated.
func (o DownloadRequestSpecTargetPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DownloadRequestSpecTarget) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// DownloadRequestStatus is the current status of a DownloadRequest.
type DownloadRequestStatus struct {
	// DownloadURL contains the pre-signed URL for the target file.
	DownloadURL *string `pulumi:"downloadURL"`
	// Expiration is when this DownloadRequest expires and can be deleted by the system.
	Expiration *string `pulumi:"expiration"`
	// Phase is the current state of the DownloadRequest.
	Phase *string `pulumi:"phase"`
}

// DownloadRequestStatusInput is an input type that accepts DownloadRequestStatusArgs and DownloadRequestStatusOutput values.
// You can construct a concrete instance of `DownloadRequestStatusInput` via:
//
//          DownloadRequestStatusArgs{...}
type DownloadRequestStatusInput interface {
	pulumi.Input

	ToDownloadRequestStatusOutput() DownloadRequestStatusOutput
	ToDownloadRequestStatusOutputWithContext(context.Context) DownloadRequestStatusOutput
}

// DownloadRequestStatus is the current status of a DownloadRequest.
type DownloadRequestStatusArgs struct {
	// DownloadURL contains the pre-signed URL for the target file.
	DownloadURL pulumi.StringPtrInput `pulumi:"downloadURL"`
	// Expiration is when this DownloadRequest expires and can be deleted by the system.
	Expiration pulumi.StringPtrInput `pulumi:"expiration"`
	// Phase is the current state of the DownloadRequest.
	Phase pulumi.StringPtrInput `pulumi:"phase"`
}

func (DownloadRequestStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DownloadRequestStatus)(nil)).Elem()
}

func (i DownloadRequestStatusArgs) ToDownloadRequestStatusOutput() DownloadRequestStatusOutput {
	return i.ToDownloadRequestStatusOutputWithContext(context.Background())
}

func (i DownloadRequestStatusArgs) ToDownloadRequestStatusOutputWithContext(ctx context.Context) DownloadRequestStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DownloadRequestStatusOutput)
}

func (i DownloadRequestStatusArgs) ToDownloadRequestStatusPtrOutput() DownloadRequestStatusPtrOutput {
	return i.ToDownloadRequestStatusPtrOutputWithContext(context.Background())
}

func (i DownloadRequestStatusArgs) ToDownloadRequestStatusPtrOutputWithContext(ctx context.Context) DownloadRequestStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DownloadRequestStatusOutput).ToDownloadRequestStatusPtrOutputWithContext(ctx)
}

// DownloadRequestStatusPtrInput is an input type that accepts DownloadRequestStatusArgs, DownloadRequestStatusPtr and DownloadRequestStatusPtrOutput values.
// You can construct a concrete instance of `DownloadRequestStatusPtrInput` via:
//
//          DownloadRequestStatusArgs{...}
//
//  or:
//
//          nil
type DownloadRequestStatusPtrInput interface {
	pulumi.Input

	ToDownloadRequestStatusPtrOutput() DownloadRequestStatusPtrOutput
	ToDownloadRequestStatusPtrOutputWithContext(context.Context) DownloadRequestStatusPtrOutput
}

type downloadRequestStatusPtrType DownloadRequestStatusArgs

func DownloadRequestStatusPtr(v *DownloadRequestStatusArgs) DownloadRequestStatusPtrInput {
	return (*downloadRequestStatusPtrType)(v)
}

func (*downloadRequestStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DownloadRequestStatus)(nil)).Elem()
}

func (i *downloadRequestStatusPtrType) ToDownloadRequestStatusPtrOutput() DownloadRequestStatusPtrOutput {
	return i.ToDownloadRequestStatusPtrOutputWithContext(context.Background())
}

func (i *downloadRequestStatusPtrType) ToDownloadRequestStatusPtrOutputWithContext(ctx context.Context) DownloadRequestStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DownloadRequestStatusPtrOutput)
}

// DownloadRequestStatus is the current status of a DownloadRequest.
type DownloadRequestStatusOutput struct{ *pulumi.OutputState }

func (DownloadRequestStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DownloadRequestStatus)(nil)).Elem()
}

func (o DownloadRequestStatusOutput) ToDownloadRequestStatusOutput() DownloadRequestStatusOutput {
	return o
}

func (o DownloadRequestStatusOutput) ToDownloadRequestStatusOutputWithContext(ctx context.Context) DownloadRequestStatusOutput {
	return o
}

func (o DownloadRequestStatusOutput) ToDownloadRequestStatusPtrOutput() DownloadRequestStatusPtrOutput {
	return o.ToDownloadRequestStatusPtrOutputWithContext(context.Background())
}

func (o DownloadRequestStatusOutput) ToDownloadRequestStatusPtrOutputWithContext(ctx context.Context) DownloadRequestStatusPtrOutput {
	return o.ApplyT(func(v DownloadRequestStatus) *DownloadRequestStatus {
		return &v
	}).(DownloadRequestStatusPtrOutput)
}

// DownloadURL contains the pre-signed URL for the target file.
func (o DownloadRequestStatusOutput) DownloadURL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DownloadRequestStatus) *string { return v.DownloadURL }).(pulumi.StringPtrOutput)
}

// Expiration is when this DownloadRequest expires and can be deleted by the system.
func (o DownloadRequestStatusOutput) Expiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DownloadRequestStatus) *string { return v.Expiration }).(pulumi.StringPtrOutput)
}

// Phase is the current state of the DownloadRequest.
func (o DownloadRequestStatusOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DownloadRequestStatus) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

type DownloadRequestStatusPtrOutput struct{ *pulumi.OutputState }

func (DownloadRequestStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DownloadRequestStatus)(nil)).Elem()
}

func (o DownloadRequestStatusPtrOutput) ToDownloadRequestStatusPtrOutput() DownloadRequestStatusPtrOutput {
	return o
}

func (o DownloadRequestStatusPtrOutput) ToDownloadRequestStatusPtrOutputWithContext(ctx context.Context) DownloadRequestStatusPtrOutput {
	return o
}

func (o DownloadRequestStatusPtrOutput) Elem() DownloadRequestStatusOutput {
	return o.ApplyT(func(v *DownloadRequestStatus) DownloadRequestStatus { return *v }).(DownloadRequestStatusOutput)
}

// DownloadURL contains the pre-signed URL for the target file.
func (o DownloadRequestStatusPtrOutput) DownloadURL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DownloadRequestStatus) *string {
		if v == nil {
			return nil
		}
		return v.DownloadURL
	}).(pulumi.StringPtrOutput)
}

// Expiration is when this DownloadRequest expires and can be deleted by the system.
func (o DownloadRequestStatusPtrOutput) Expiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DownloadRequestStatus) *string {
		if v == nil {
			return nil
		}
		return v.Expiration
	}).(pulumi.StringPtrOutput)
}

// Phase is the current state of the DownloadRequest.
func (o DownloadRequestStatusPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DownloadRequestStatus) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

type PodVolumeBackupType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// PodVolumeBackupSpec is the specification for a PodVolumeBackup.
	Spec *PodVolumeBackupSpec `pulumi:"spec"`
	// PodVolumeBackupStatus is the current status of a PodVolumeBackup.
	Status *PodVolumeBackupStatus `pulumi:"status"`
}

// PodVolumeBackupTypeInput is an input type that accepts PodVolumeBackupTypeArgs and PodVolumeBackupTypeOutput values.
// You can construct a concrete instance of `PodVolumeBackupTypeInput` via:
//
//          PodVolumeBackupTypeArgs{...}
type PodVolumeBackupTypeInput interface {
	pulumi.Input

	ToPodVolumeBackupTypeOutput() PodVolumeBackupTypeOutput
	ToPodVolumeBackupTypeOutputWithContext(context.Context) PodVolumeBackupTypeOutput
}

type PodVolumeBackupTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// PodVolumeBackupSpec is the specification for a PodVolumeBackup.
	Spec PodVolumeBackupSpecPtrInput `pulumi:"spec"`
	// PodVolumeBackupStatus is the current status of a PodVolumeBackup.
	Status PodVolumeBackupStatusPtrInput `pulumi:"status"`
}

func (PodVolumeBackupTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodVolumeBackupType)(nil)).Elem()
}

func (i PodVolumeBackupTypeArgs) ToPodVolumeBackupTypeOutput() PodVolumeBackupTypeOutput {
	return i.ToPodVolumeBackupTypeOutputWithContext(context.Background())
}

func (i PodVolumeBackupTypeArgs) ToPodVolumeBackupTypeOutputWithContext(ctx context.Context) PodVolumeBackupTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodVolumeBackupTypeOutput)
}

type PodVolumeBackupTypeOutput struct{ *pulumi.OutputState }

func (PodVolumeBackupTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodVolumeBackupType)(nil)).Elem()
}

func (o PodVolumeBackupTypeOutput) ToPodVolumeBackupTypeOutput() PodVolumeBackupTypeOutput {
	return o
}

func (o PodVolumeBackupTypeOutput) ToPodVolumeBackupTypeOutputWithContext(ctx context.Context) PodVolumeBackupTypeOutput {
	return o
}

func (o PodVolumeBackupTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodVolumeBackupType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o PodVolumeBackupTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodVolumeBackupType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o PodVolumeBackupTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v PodVolumeBackupType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// PodVolumeBackupSpec is the specification for a PodVolumeBackup.
func (o PodVolumeBackupTypeOutput) Spec() PodVolumeBackupSpecPtrOutput {
	return o.ApplyT(func(v PodVolumeBackupType) *PodVolumeBackupSpec { return v.Spec }).(PodVolumeBackupSpecPtrOutput)
}

// PodVolumeBackupStatus is the current status of a PodVolumeBackup.
func (o PodVolumeBackupTypeOutput) Status() PodVolumeBackupStatusPtrOutput {
	return o.ApplyT(func(v PodVolumeBackupType) *PodVolumeBackupStatus { return v.Status }).(PodVolumeBackupStatusPtrOutput)
}

type PodVolumeBackupMetadata struct {
}

// PodVolumeBackupMetadataInput is an input type that accepts PodVolumeBackupMetadataArgs and PodVolumeBackupMetadataOutput values.
// You can construct a concrete instance of `PodVolumeBackupMetadataInput` via:
//
//          PodVolumeBackupMetadataArgs{...}
type PodVolumeBackupMetadataInput interface {
	pulumi.Input

	ToPodVolumeBackupMetadataOutput() PodVolumeBackupMetadataOutput
	ToPodVolumeBackupMetadataOutputWithContext(context.Context) PodVolumeBackupMetadataOutput
}

type PodVolumeBackupMetadataArgs struct {
}

func (PodVolumeBackupMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodVolumeBackupMetadata)(nil)).Elem()
}

func (i PodVolumeBackupMetadataArgs) ToPodVolumeBackupMetadataOutput() PodVolumeBackupMetadataOutput {
	return i.ToPodVolumeBackupMetadataOutputWithContext(context.Background())
}

func (i PodVolumeBackupMetadataArgs) ToPodVolumeBackupMetadataOutputWithContext(ctx context.Context) PodVolumeBackupMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodVolumeBackupMetadataOutput)
}

type PodVolumeBackupMetadataOutput struct{ *pulumi.OutputState }

func (PodVolumeBackupMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodVolumeBackupMetadata)(nil)).Elem()
}

func (o PodVolumeBackupMetadataOutput) ToPodVolumeBackupMetadataOutput() PodVolumeBackupMetadataOutput {
	return o
}

func (o PodVolumeBackupMetadataOutput) ToPodVolumeBackupMetadataOutputWithContext(ctx context.Context) PodVolumeBackupMetadataOutput {
	return o
}

// PodVolumeBackupSpec is the specification for a PodVolumeBackup.
type PodVolumeBackupSpec struct {
	// BackupStorageLocation is the name of the backup storage location where the restic repository is stored.
	BackupStorageLocation string `pulumi:"backupStorageLocation"`
	// Node is the name of the node that the Pod is running on.
	Node string `pulumi:"node"`
	// Pod is a reference to the pod containing the volume to be backed up.
	Pod PodVolumeBackupSpecPod `pulumi:"pod"`
	// RepoIdentifier is the restic repository identifier.
	RepoIdentifier string `pulumi:"repoIdentifier"`
	// Tags are a map of key-value pairs that should be applied to the volume backup as tags.
	Tags map[string]string `pulumi:"tags"`
	// Volume is the name of the volume within the Pod to be backed up.
	Volume string `pulumi:"volume"`
}

// PodVolumeBackupSpecInput is an input type that accepts PodVolumeBackupSpecArgs and PodVolumeBackupSpecOutput values.
// You can construct a concrete instance of `PodVolumeBackupSpecInput` via:
//
//          PodVolumeBackupSpecArgs{...}
type PodVolumeBackupSpecInput interface {
	pulumi.Input

	ToPodVolumeBackupSpecOutput() PodVolumeBackupSpecOutput
	ToPodVolumeBackupSpecOutputWithContext(context.Context) PodVolumeBackupSpecOutput
}

// PodVolumeBackupSpec is the specification for a PodVolumeBackup.
type PodVolumeBackupSpecArgs struct {
	// BackupStorageLocation is the name of the backup storage location where the restic repository is stored.
	BackupStorageLocation pulumi.StringInput `pulumi:"backupStorageLocation"`
	// Node is the name of the node that the Pod is running on.
	Node pulumi.StringInput `pulumi:"node"`
	// Pod is a reference to the pod containing the volume to be backed up.
	Pod PodVolumeBackupSpecPodInput `pulumi:"pod"`
	// RepoIdentifier is the restic repository identifier.
	RepoIdentifier pulumi.StringInput `pulumi:"repoIdentifier"`
	// Tags are a map of key-value pairs that should be applied to the volume backup as tags.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// Volume is the name of the volume within the Pod to be backed up.
	Volume pulumi.StringInput `pulumi:"volume"`
}

func (PodVolumeBackupSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodVolumeBackupSpec)(nil)).Elem()
}

func (i PodVolumeBackupSpecArgs) ToPodVolumeBackupSpecOutput() PodVolumeBackupSpecOutput {
	return i.ToPodVolumeBackupSpecOutputWithContext(context.Background())
}

func (i PodVolumeBackupSpecArgs) ToPodVolumeBackupSpecOutputWithContext(ctx context.Context) PodVolumeBackupSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodVolumeBackupSpecOutput)
}

func (i PodVolumeBackupSpecArgs) ToPodVolumeBackupSpecPtrOutput() PodVolumeBackupSpecPtrOutput {
	return i.ToPodVolumeBackupSpecPtrOutputWithContext(context.Background())
}

func (i PodVolumeBackupSpecArgs) ToPodVolumeBackupSpecPtrOutputWithContext(ctx context.Context) PodVolumeBackupSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodVolumeBackupSpecOutput).ToPodVolumeBackupSpecPtrOutputWithContext(ctx)
}

// PodVolumeBackupSpecPtrInput is an input type that accepts PodVolumeBackupSpecArgs, PodVolumeBackupSpecPtr and PodVolumeBackupSpecPtrOutput values.
// You can construct a concrete instance of `PodVolumeBackupSpecPtrInput` via:
//
//          PodVolumeBackupSpecArgs{...}
//
//  or:
//
//          nil
type PodVolumeBackupSpecPtrInput interface {
	pulumi.Input

	ToPodVolumeBackupSpecPtrOutput() PodVolumeBackupSpecPtrOutput
	ToPodVolumeBackupSpecPtrOutputWithContext(context.Context) PodVolumeBackupSpecPtrOutput
}

type podVolumeBackupSpecPtrType PodVolumeBackupSpecArgs

func PodVolumeBackupSpecPtr(v *PodVolumeBackupSpecArgs) PodVolumeBackupSpecPtrInput {
	return (*podVolumeBackupSpecPtrType)(v)
}

func (*podVolumeBackupSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PodVolumeBackupSpec)(nil)).Elem()
}

func (i *podVolumeBackupSpecPtrType) ToPodVolumeBackupSpecPtrOutput() PodVolumeBackupSpecPtrOutput {
	return i.ToPodVolumeBackupSpecPtrOutputWithContext(context.Background())
}

func (i *podVolumeBackupSpecPtrType) ToPodVolumeBackupSpecPtrOutputWithContext(ctx context.Context) PodVolumeBackupSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodVolumeBackupSpecPtrOutput)
}

// PodVolumeBackupSpec is the specification for a PodVolumeBackup.
type PodVolumeBackupSpecOutput struct{ *pulumi.OutputState }

func (PodVolumeBackupSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodVolumeBackupSpec)(nil)).Elem()
}

func (o PodVolumeBackupSpecOutput) ToPodVolumeBackupSpecOutput() PodVolumeBackupSpecOutput {
	return o
}

func (o PodVolumeBackupSpecOutput) ToPodVolumeBackupSpecOutputWithContext(ctx context.Context) PodVolumeBackupSpecOutput {
	return o
}

func (o PodVolumeBackupSpecOutput) ToPodVolumeBackupSpecPtrOutput() PodVolumeBackupSpecPtrOutput {
	return o.ToPodVolumeBackupSpecPtrOutputWithContext(context.Background())
}

func (o PodVolumeBackupSpecOutput) ToPodVolumeBackupSpecPtrOutputWithContext(ctx context.Context) PodVolumeBackupSpecPtrOutput {
	return o.ApplyT(func(v PodVolumeBackupSpec) *PodVolumeBackupSpec {
		return &v
	}).(PodVolumeBackupSpecPtrOutput)
}

// BackupStorageLocation is the name of the backup storage location where the restic repository is stored.
func (o PodVolumeBackupSpecOutput) BackupStorageLocation() pulumi.StringOutput {
	return o.ApplyT(func(v PodVolumeBackupSpec) string { return v.BackupStorageLocation }).(pulumi.StringOutput)
}

// Node is the name of the node that the Pod is running on.
func (o PodVolumeBackupSpecOutput) Node() pulumi.StringOutput {
	return o.ApplyT(func(v PodVolumeBackupSpec) string { return v.Node }).(pulumi.StringOutput)
}

// Pod is a reference to the pod containing the volume to be backed up.
func (o PodVolumeBackupSpecOutput) Pod() PodVolumeBackupSpecPodOutput {
	return o.ApplyT(func(v PodVolumeBackupSpec) PodVolumeBackupSpecPod { return v.Pod }).(PodVolumeBackupSpecPodOutput)
}

// RepoIdentifier is the restic repository identifier.
func (o PodVolumeBackupSpecOutput) RepoIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v PodVolumeBackupSpec) string { return v.RepoIdentifier }).(pulumi.StringOutput)
}

// Tags are a map of key-value pairs that should be applied to the volume backup as tags.
func (o PodVolumeBackupSpecOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v PodVolumeBackupSpec) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Volume is the name of the volume within the Pod to be backed up.
func (o PodVolumeBackupSpecOutput) Volume() pulumi.StringOutput {
	return o.ApplyT(func(v PodVolumeBackupSpec) string { return v.Volume }).(pulumi.StringOutput)
}

type PodVolumeBackupSpecPtrOutput struct{ *pulumi.OutputState }

func (PodVolumeBackupSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodVolumeBackupSpec)(nil)).Elem()
}

func (o PodVolumeBackupSpecPtrOutput) ToPodVolumeBackupSpecPtrOutput() PodVolumeBackupSpecPtrOutput {
	return o
}

func (o PodVolumeBackupSpecPtrOutput) ToPodVolumeBackupSpecPtrOutputWithContext(ctx context.Context) PodVolumeBackupSpecPtrOutput {
	return o
}

func (o PodVolumeBackupSpecPtrOutput) Elem() PodVolumeBackupSpecOutput {
	return o.ApplyT(func(v *PodVolumeBackupSpec) PodVolumeBackupSpec { return *v }).(PodVolumeBackupSpecOutput)
}

// BackupStorageLocation is the name of the backup storage location where the restic repository is stored.
func (o PodVolumeBackupSpecPtrOutput) BackupStorageLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodVolumeBackupSpec) *string {
		if v == nil {
			return nil
		}
		return &v.BackupStorageLocation
	}).(pulumi.StringPtrOutput)
}

// Node is the name of the node that the Pod is running on.
func (o PodVolumeBackupSpecPtrOutput) Node() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodVolumeBackupSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Node
	}).(pulumi.StringPtrOutput)
}

// Pod is a reference to the pod containing the volume to be backed up.
func (o PodVolumeBackupSpecPtrOutput) Pod() PodVolumeBackupSpecPodPtrOutput {
	return o.ApplyT(func(v *PodVolumeBackupSpec) *PodVolumeBackupSpecPod {
		if v == nil {
			return nil
		}
		return &v.Pod
	}).(PodVolumeBackupSpecPodPtrOutput)
}

// RepoIdentifier is the restic repository identifier.
func (o PodVolumeBackupSpecPtrOutput) RepoIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodVolumeBackupSpec) *string {
		if v == nil {
			return nil
		}
		return &v.RepoIdentifier
	}).(pulumi.StringPtrOutput)
}

// Tags are a map of key-value pairs that should be applied to the volume backup as tags.
func (o PodVolumeBackupSpecPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PodVolumeBackupSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// Volume is the name of the volume within the Pod to be backed up.
func (o PodVolumeBackupSpecPtrOutput) Volume() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodVolumeBackupSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Volume
	}).(pulumi.StringPtrOutput)
}

// Pod is a reference to the pod containing the volume to be backed up.
type PodVolumeBackupSpecPod struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath *string `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`
}

// PodVolumeBackupSpecPodInput is an input type that accepts PodVolumeBackupSpecPodArgs and PodVolumeBackupSpecPodOutput values.
// You can construct a concrete instance of `PodVolumeBackupSpecPodInput` via:
//
//          PodVolumeBackupSpecPodArgs{...}
type PodVolumeBackupSpecPodInput interface {
	pulumi.Input

	ToPodVolumeBackupSpecPodOutput() PodVolumeBackupSpecPodOutput
	ToPodVolumeBackupSpecPodOutputWithContext(context.Context) PodVolumeBackupSpecPodOutput
}

// Pod is a reference to the pod containing the volume to be backed up.
type PodVolumeBackupSpecPodArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (PodVolumeBackupSpecPodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodVolumeBackupSpecPod)(nil)).Elem()
}

func (i PodVolumeBackupSpecPodArgs) ToPodVolumeBackupSpecPodOutput() PodVolumeBackupSpecPodOutput {
	return i.ToPodVolumeBackupSpecPodOutputWithContext(context.Background())
}

func (i PodVolumeBackupSpecPodArgs) ToPodVolumeBackupSpecPodOutputWithContext(ctx context.Context) PodVolumeBackupSpecPodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodVolumeBackupSpecPodOutput)
}

func (i PodVolumeBackupSpecPodArgs) ToPodVolumeBackupSpecPodPtrOutput() PodVolumeBackupSpecPodPtrOutput {
	return i.ToPodVolumeBackupSpecPodPtrOutputWithContext(context.Background())
}

func (i PodVolumeBackupSpecPodArgs) ToPodVolumeBackupSpecPodPtrOutputWithContext(ctx context.Context) PodVolumeBackupSpecPodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodVolumeBackupSpecPodOutput).ToPodVolumeBackupSpecPodPtrOutputWithContext(ctx)
}

// PodVolumeBackupSpecPodPtrInput is an input type that accepts PodVolumeBackupSpecPodArgs, PodVolumeBackupSpecPodPtr and PodVolumeBackupSpecPodPtrOutput values.
// You can construct a concrete instance of `PodVolumeBackupSpecPodPtrInput` via:
//
//          PodVolumeBackupSpecPodArgs{...}
//
//  or:
//
//          nil
type PodVolumeBackupSpecPodPtrInput interface {
	pulumi.Input

	ToPodVolumeBackupSpecPodPtrOutput() PodVolumeBackupSpecPodPtrOutput
	ToPodVolumeBackupSpecPodPtrOutputWithContext(context.Context) PodVolumeBackupSpecPodPtrOutput
}

type podVolumeBackupSpecPodPtrType PodVolumeBackupSpecPodArgs

func PodVolumeBackupSpecPodPtr(v *PodVolumeBackupSpecPodArgs) PodVolumeBackupSpecPodPtrInput {
	return (*podVolumeBackupSpecPodPtrType)(v)
}

func (*podVolumeBackupSpecPodPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PodVolumeBackupSpecPod)(nil)).Elem()
}

func (i *podVolumeBackupSpecPodPtrType) ToPodVolumeBackupSpecPodPtrOutput() PodVolumeBackupSpecPodPtrOutput {
	return i.ToPodVolumeBackupSpecPodPtrOutputWithContext(context.Background())
}

func (i *podVolumeBackupSpecPodPtrType) ToPodVolumeBackupSpecPodPtrOutputWithContext(ctx context.Context) PodVolumeBackupSpecPodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodVolumeBackupSpecPodPtrOutput)
}

// Pod is a reference to the pod containing the volume to be backed up.
type PodVolumeBackupSpecPodOutput struct{ *pulumi.OutputState }

func (PodVolumeBackupSpecPodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodVolumeBackupSpecPod)(nil)).Elem()
}

func (o PodVolumeBackupSpecPodOutput) ToPodVolumeBackupSpecPodOutput() PodVolumeBackupSpecPodOutput {
	return o
}

func (o PodVolumeBackupSpecPodOutput) ToPodVolumeBackupSpecPodOutputWithContext(ctx context.Context) PodVolumeBackupSpecPodOutput {
	return o
}

func (o PodVolumeBackupSpecPodOutput) ToPodVolumeBackupSpecPodPtrOutput() PodVolumeBackupSpecPodPtrOutput {
	return o.ToPodVolumeBackupSpecPodPtrOutputWithContext(context.Background())
}

func (o PodVolumeBackupSpecPodOutput) ToPodVolumeBackupSpecPodPtrOutputWithContext(ctx context.Context) PodVolumeBackupSpecPodPtrOutput {
	return o.ApplyT(func(v PodVolumeBackupSpecPod) *PodVolumeBackupSpecPod {
		return &v
	}).(PodVolumeBackupSpecPodPtrOutput)
}

// API version of the referent.
func (o PodVolumeBackupSpecPodOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodVolumeBackupSpecPod) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o PodVolumeBackupSpecPodOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodVolumeBackupSpecPod) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PodVolumeBackupSpecPodOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodVolumeBackupSpecPod) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o PodVolumeBackupSpecPodOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodVolumeBackupSpecPod) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o PodVolumeBackupSpecPodOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodVolumeBackupSpecPod) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o PodVolumeBackupSpecPodOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodVolumeBackupSpecPod) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o PodVolumeBackupSpecPodOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodVolumeBackupSpecPod) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type PodVolumeBackupSpecPodPtrOutput struct{ *pulumi.OutputState }

func (PodVolumeBackupSpecPodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodVolumeBackupSpecPod)(nil)).Elem()
}

func (o PodVolumeBackupSpecPodPtrOutput) ToPodVolumeBackupSpecPodPtrOutput() PodVolumeBackupSpecPodPtrOutput {
	return o
}

func (o PodVolumeBackupSpecPodPtrOutput) ToPodVolumeBackupSpecPodPtrOutputWithContext(ctx context.Context) PodVolumeBackupSpecPodPtrOutput {
	return o
}

func (o PodVolumeBackupSpecPodPtrOutput) Elem() PodVolumeBackupSpecPodOutput {
	return o.ApplyT(func(v *PodVolumeBackupSpecPod) PodVolumeBackupSpecPod { return *v }).(PodVolumeBackupSpecPodOutput)
}

// API version of the referent.
func (o PodVolumeBackupSpecPodPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodVolumeBackupSpecPod) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o PodVolumeBackupSpecPodPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodVolumeBackupSpecPod) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PodVolumeBackupSpecPodPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodVolumeBackupSpecPod) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o PodVolumeBackupSpecPodPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodVolumeBackupSpecPod) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o PodVolumeBackupSpecPodPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodVolumeBackupSpecPod) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o PodVolumeBackupSpecPodPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodVolumeBackupSpecPod) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o PodVolumeBackupSpecPodPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodVolumeBackupSpecPod) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// Tags are a map of key-value pairs that should be applied to the volume backup as tags.
type PodVolumeBackupSpecTags struct {
}

// PodVolumeBackupSpecTagsInput is an input type that accepts PodVolumeBackupSpecTagsArgs and PodVolumeBackupSpecTagsOutput values.
// You can construct a concrete instance of `PodVolumeBackupSpecTagsInput` via:
//
//          PodVolumeBackupSpecTagsArgs{...}
type PodVolumeBackupSpecTagsInput interface {
	pulumi.Input

	ToPodVolumeBackupSpecTagsOutput() PodVolumeBackupSpecTagsOutput
	ToPodVolumeBackupSpecTagsOutputWithContext(context.Context) PodVolumeBackupSpecTagsOutput
}

// Tags are a map of key-value pairs that should be applied to the volume backup as tags.
type PodVolumeBackupSpecTagsArgs struct {
}

func (PodVolumeBackupSpecTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodVolumeBackupSpecTags)(nil)).Elem()
}

func (i PodVolumeBackupSpecTagsArgs) ToPodVolumeBackupSpecTagsOutput() PodVolumeBackupSpecTagsOutput {
	return i.ToPodVolumeBackupSpecTagsOutputWithContext(context.Background())
}

func (i PodVolumeBackupSpecTagsArgs) ToPodVolumeBackupSpecTagsOutputWithContext(ctx context.Context) PodVolumeBackupSpecTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodVolumeBackupSpecTagsOutput)
}

// Tags are a map of key-value pairs that should be applied to the volume backup as tags.
type PodVolumeBackupSpecTagsOutput struct{ *pulumi.OutputState }

func (PodVolumeBackupSpecTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodVolumeBackupSpecTags)(nil)).Elem()
}

func (o PodVolumeBackupSpecTagsOutput) ToPodVolumeBackupSpecTagsOutput() PodVolumeBackupSpecTagsOutput {
	return o
}

func (o PodVolumeBackupSpecTagsOutput) ToPodVolumeBackupSpecTagsOutputWithContext(ctx context.Context) PodVolumeBackupSpecTagsOutput {
	return o
}

// PodVolumeBackupStatus is the current status of a PodVolumeBackup.
type PodVolumeBackupStatus struct {
	// CompletionTimestamp records the time a backup was completed. Completion time is recorded even on failed backups. Completion time is recorded before uploading the backup object. The server's time is used for CompletionTimestamps
	CompletionTimestamp *string `pulumi:"completionTimestamp"`
	// Message is a message about the pod volume backup's status.
	Message *string `pulumi:"message"`
	// Path is the full path within the controller pod being backed up.
	Path *string `pulumi:"path"`
	// Phase is the current state of the PodVolumeBackup.
	Phase *string `pulumi:"phase"`
	// Progress holds the total number of bytes of the volume and the current number of backed up bytes. This can be used to display progress information about the backup operation.
	Progress *PodVolumeBackupStatusProgress `pulumi:"progress"`
	// SnapshotID is the identifier for the snapshot of the pod volume.
	SnapshotID *string `pulumi:"snapshotID"`
	// StartTimestamp records the time a backup was started. Separate from CreationTimestamp, since that value changes on restores. The server's time is used for StartTimestamps
	StartTimestamp *string `pulumi:"startTimestamp"`
}

// PodVolumeBackupStatusInput is an input type that accepts PodVolumeBackupStatusArgs and PodVolumeBackupStatusOutput values.
// You can construct a concrete instance of `PodVolumeBackupStatusInput` via:
//
//          PodVolumeBackupStatusArgs{...}
type PodVolumeBackupStatusInput interface {
	pulumi.Input

	ToPodVolumeBackupStatusOutput() PodVolumeBackupStatusOutput
	ToPodVolumeBackupStatusOutputWithContext(context.Context) PodVolumeBackupStatusOutput
}

// PodVolumeBackupStatus is the current status of a PodVolumeBackup.
type PodVolumeBackupStatusArgs struct {
	// CompletionTimestamp records the time a backup was completed. Completion time is recorded even on failed backups. Completion time is recorded before uploading the backup object. The server's time is used for CompletionTimestamps
	CompletionTimestamp pulumi.StringPtrInput `pulumi:"completionTimestamp"`
	// Message is a message about the pod volume backup's status.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Path is the full path within the controller pod being backed up.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Phase is the current state of the PodVolumeBackup.
	Phase pulumi.StringPtrInput `pulumi:"phase"`
	// Progress holds the total number of bytes of the volume and the current number of backed up bytes. This can be used to display progress information about the backup operation.
	Progress PodVolumeBackupStatusProgressPtrInput `pulumi:"progress"`
	// SnapshotID is the identifier for the snapshot of the pod volume.
	SnapshotID pulumi.StringPtrInput `pulumi:"snapshotID"`
	// StartTimestamp records the time a backup was started. Separate from CreationTimestamp, since that value changes on restores. The server's time is used for StartTimestamps
	StartTimestamp pulumi.StringPtrInput `pulumi:"startTimestamp"`
}

func (PodVolumeBackupStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodVolumeBackupStatus)(nil)).Elem()
}

func (i PodVolumeBackupStatusArgs) ToPodVolumeBackupStatusOutput() PodVolumeBackupStatusOutput {
	return i.ToPodVolumeBackupStatusOutputWithContext(context.Background())
}

func (i PodVolumeBackupStatusArgs) ToPodVolumeBackupStatusOutputWithContext(ctx context.Context) PodVolumeBackupStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodVolumeBackupStatusOutput)
}

func (i PodVolumeBackupStatusArgs) ToPodVolumeBackupStatusPtrOutput() PodVolumeBackupStatusPtrOutput {
	return i.ToPodVolumeBackupStatusPtrOutputWithContext(context.Background())
}

func (i PodVolumeBackupStatusArgs) ToPodVolumeBackupStatusPtrOutputWithContext(ctx context.Context) PodVolumeBackupStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodVolumeBackupStatusOutput).ToPodVolumeBackupStatusPtrOutputWithContext(ctx)
}

// PodVolumeBackupStatusPtrInput is an input type that accepts PodVolumeBackupStatusArgs, PodVolumeBackupStatusPtr and PodVolumeBackupStatusPtrOutput values.
// You can construct a concrete instance of `PodVolumeBackupStatusPtrInput` via:
//
//          PodVolumeBackupStatusArgs{...}
//
//  or:
//
//          nil
type PodVolumeBackupStatusPtrInput interface {
	pulumi.Input

	ToPodVolumeBackupStatusPtrOutput() PodVolumeBackupStatusPtrOutput
	ToPodVolumeBackupStatusPtrOutputWithContext(context.Context) PodVolumeBackupStatusPtrOutput
}

type podVolumeBackupStatusPtrType PodVolumeBackupStatusArgs

func PodVolumeBackupStatusPtr(v *PodVolumeBackupStatusArgs) PodVolumeBackupStatusPtrInput {
	return (*podVolumeBackupStatusPtrType)(v)
}

func (*podVolumeBackupStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PodVolumeBackupStatus)(nil)).Elem()
}

func (i *podVolumeBackupStatusPtrType) ToPodVolumeBackupStatusPtrOutput() PodVolumeBackupStatusPtrOutput {
	return i.ToPodVolumeBackupStatusPtrOutputWithContext(context.Background())
}

func (i *podVolumeBackupStatusPtrType) ToPodVolumeBackupStatusPtrOutputWithContext(ctx context.Context) PodVolumeBackupStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodVolumeBackupStatusPtrOutput)
}

// PodVolumeBackupStatus is the current status of a PodVolumeBackup.
type PodVolumeBackupStatusOutput struct{ *pulumi.OutputState }

func (PodVolumeBackupStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodVolumeBackupStatus)(nil)).Elem()
}

func (o PodVolumeBackupStatusOutput) ToPodVolumeBackupStatusOutput() PodVolumeBackupStatusOutput {
	return o
}

func (o PodVolumeBackupStatusOutput) ToPodVolumeBackupStatusOutputWithContext(ctx context.Context) PodVolumeBackupStatusOutput {
	return o
}

func (o PodVolumeBackupStatusOutput) ToPodVolumeBackupStatusPtrOutput() PodVolumeBackupStatusPtrOutput {
	return o.ToPodVolumeBackupStatusPtrOutputWithContext(context.Background())
}

func (o PodVolumeBackupStatusOutput) ToPodVolumeBackupStatusPtrOutputWithContext(ctx context.Context) PodVolumeBackupStatusPtrOutput {
	return o.ApplyT(func(v PodVolumeBackupStatus) *PodVolumeBackupStatus {
		return &v
	}).(PodVolumeBackupStatusPtrOutput)
}

// CompletionTimestamp records the time a backup was completed. Completion time is recorded even on failed backups. Completion time is recorded before uploading the backup object. The server's time is used for CompletionTimestamps
func (o PodVolumeBackupStatusOutput) CompletionTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodVolumeBackupStatus) *string { return v.CompletionTimestamp }).(pulumi.StringPtrOutput)
}

// Message is a message about the pod volume backup's status.
func (o PodVolumeBackupStatusOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodVolumeBackupStatus) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Path is the full path within the controller pod being backed up.
func (o PodVolumeBackupStatusOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodVolumeBackupStatus) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Phase is the current state of the PodVolumeBackup.
func (o PodVolumeBackupStatusOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodVolumeBackupStatus) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

// Progress holds the total number of bytes of the volume and the current number of backed up bytes. This can be used to display progress information about the backup operation.
func (o PodVolumeBackupStatusOutput) Progress() PodVolumeBackupStatusProgressPtrOutput {
	return o.ApplyT(func(v PodVolumeBackupStatus) *PodVolumeBackupStatusProgress { return v.Progress }).(PodVolumeBackupStatusProgressPtrOutput)
}

// SnapshotID is the identifier for the snapshot of the pod volume.
func (o PodVolumeBackupStatusOutput) SnapshotID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodVolumeBackupStatus) *string { return v.SnapshotID }).(pulumi.StringPtrOutput)
}

// StartTimestamp records the time a backup was started. Separate from CreationTimestamp, since that value changes on restores. The server's time is used for StartTimestamps
func (o PodVolumeBackupStatusOutput) StartTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodVolumeBackupStatus) *string { return v.StartTimestamp }).(pulumi.StringPtrOutput)
}

type PodVolumeBackupStatusPtrOutput struct{ *pulumi.OutputState }

func (PodVolumeBackupStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodVolumeBackupStatus)(nil)).Elem()
}

func (o PodVolumeBackupStatusPtrOutput) ToPodVolumeBackupStatusPtrOutput() PodVolumeBackupStatusPtrOutput {
	return o
}

func (o PodVolumeBackupStatusPtrOutput) ToPodVolumeBackupStatusPtrOutputWithContext(ctx context.Context) PodVolumeBackupStatusPtrOutput {
	return o
}

func (o PodVolumeBackupStatusPtrOutput) Elem() PodVolumeBackupStatusOutput {
	return o.ApplyT(func(v *PodVolumeBackupStatus) PodVolumeBackupStatus { return *v }).(PodVolumeBackupStatusOutput)
}

// CompletionTimestamp records the time a backup was completed. Completion time is recorded even on failed backups. Completion time is recorded before uploading the backup object. The server's time is used for CompletionTimestamps
func (o PodVolumeBackupStatusPtrOutput) CompletionTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodVolumeBackupStatus) *string {
		if v == nil {
			return nil
		}
		return v.CompletionTimestamp
	}).(pulumi.StringPtrOutput)
}

// Message is a message about the pod volume backup's status.
func (o PodVolumeBackupStatusPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodVolumeBackupStatus) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// Path is the full path within the controller pod being backed up.
func (o PodVolumeBackupStatusPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodVolumeBackupStatus) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Phase is the current state of the PodVolumeBackup.
func (o PodVolumeBackupStatusPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodVolumeBackupStatus) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

// Progress holds the total number of bytes of the volume and the current number of backed up bytes. This can be used to display progress information about the backup operation.
func (o PodVolumeBackupStatusPtrOutput) Progress() PodVolumeBackupStatusProgressPtrOutput {
	return o.ApplyT(func(v *PodVolumeBackupStatus) *PodVolumeBackupStatusProgress {
		if v == nil {
			return nil
		}
		return v.Progress
	}).(PodVolumeBackupStatusProgressPtrOutput)
}

// SnapshotID is the identifier for the snapshot of the pod volume.
func (o PodVolumeBackupStatusPtrOutput) SnapshotID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodVolumeBackupStatus) *string {
		if v == nil {
			return nil
		}
		return v.SnapshotID
	}).(pulumi.StringPtrOutput)
}

// StartTimestamp records the time a backup was started. Separate from CreationTimestamp, since that value changes on restores. The server's time is used for StartTimestamps
func (o PodVolumeBackupStatusPtrOutput) StartTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodVolumeBackupStatus) *string {
		if v == nil {
			return nil
		}
		return v.StartTimestamp
	}).(pulumi.StringPtrOutput)
}

// Progress holds the total number of bytes of the volume and the current number of backed up bytes. This can be used to display progress information about the backup operation.
type PodVolumeBackupStatusProgress struct {
	BytesDone  *int `pulumi:"bytesDone"`
	TotalBytes *int `pulumi:"totalBytes"`
}

// PodVolumeBackupStatusProgressInput is an input type that accepts PodVolumeBackupStatusProgressArgs and PodVolumeBackupStatusProgressOutput values.
// You can construct a concrete instance of `PodVolumeBackupStatusProgressInput` via:
//
//          PodVolumeBackupStatusProgressArgs{...}
type PodVolumeBackupStatusProgressInput interface {
	pulumi.Input

	ToPodVolumeBackupStatusProgressOutput() PodVolumeBackupStatusProgressOutput
	ToPodVolumeBackupStatusProgressOutputWithContext(context.Context) PodVolumeBackupStatusProgressOutput
}

// Progress holds the total number of bytes of the volume and the current number of backed up bytes. This can be used to display progress information about the backup operation.
type PodVolumeBackupStatusProgressArgs struct {
	BytesDone  pulumi.IntPtrInput `pulumi:"bytesDone"`
	TotalBytes pulumi.IntPtrInput `pulumi:"totalBytes"`
}

func (PodVolumeBackupStatusProgressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodVolumeBackupStatusProgress)(nil)).Elem()
}

func (i PodVolumeBackupStatusProgressArgs) ToPodVolumeBackupStatusProgressOutput() PodVolumeBackupStatusProgressOutput {
	return i.ToPodVolumeBackupStatusProgressOutputWithContext(context.Background())
}

func (i PodVolumeBackupStatusProgressArgs) ToPodVolumeBackupStatusProgressOutputWithContext(ctx context.Context) PodVolumeBackupStatusProgressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodVolumeBackupStatusProgressOutput)
}

func (i PodVolumeBackupStatusProgressArgs) ToPodVolumeBackupStatusProgressPtrOutput() PodVolumeBackupStatusProgressPtrOutput {
	return i.ToPodVolumeBackupStatusProgressPtrOutputWithContext(context.Background())
}

func (i PodVolumeBackupStatusProgressArgs) ToPodVolumeBackupStatusProgressPtrOutputWithContext(ctx context.Context) PodVolumeBackupStatusProgressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodVolumeBackupStatusProgressOutput).ToPodVolumeBackupStatusProgressPtrOutputWithContext(ctx)
}

// PodVolumeBackupStatusProgressPtrInput is an input type that accepts PodVolumeBackupStatusProgressArgs, PodVolumeBackupStatusProgressPtr and PodVolumeBackupStatusProgressPtrOutput values.
// You can construct a concrete instance of `PodVolumeBackupStatusProgressPtrInput` via:
//
//          PodVolumeBackupStatusProgressArgs{...}
//
//  or:
//
//          nil
type PodVolumeBackupStatusProgressPtrInput interface {
	pulumi.Input

	ToPodVolumeBackupStatusProgressPtrOutput() PodVolumeBackupStatusProgressPtrOutput
	ToPodVolumeBackupStatusProgressPtrOutputWithContext(context.Context) PodVolumeBackupStatusProgressPtrOutput
}

type podVolumeBackupStatusProgressPtrType PodVolumeBackupStatusProgressArgs

func PodVolumeBackupStatusProgressPtr(v *PodVolumeBackupStatusProgressArgs) PodVolumeBackupStatusProgressPtrInput {
	return (*podVolumeBackupStatusProgressPtrType)(v)
}

func (*podVolumeBackupStatusProgressPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PodVolumeBackupStatusProgress)(nil)).Elem()
}

func (i *podVolumeBackupStatusProgressPtrType) ToPodVolumeBackupStatusProgressPtrOutput() PodVolumeBackupStatusProgressPtrOutput {
	return i.ToPodVolumeBackupStatusProgressPtrOutputWithContext(context.Background())
}

func (i *podVolumeBackupStatusProgressPtrType) ToPodVolumeBackupStatusProgressPtrOutputWithContext(ctx context.Context) PodVolumeBackupStatusProgressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodVolumeBackupStatusProgressPtrOutput)
}

// Progress holds the total number of bytes of the volume and the current number of backed up bytes. This can be used to display progress information about the backup operation.
type PodVolumeBackupStatusProgressOutput struct{ *pulumi.OutputState }

func (PodVolumeBackupStatusProgressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodVolumeBackupStatusProgress)(nil)).Elem()
}

func (o PodVolumeBackupStatusProgressOutput) ToPodVolumeBackupStatusProgressOutput() PodVolumeBackupStatusProgressOutput {
	return o
}

func (o PodVolumeBackupStatusProgressOutput) ToPodVolumeBackupStatusProgressOutputWithContext(ctx context.Context) PodVolumeBackupStatusProgressOutput {
	return o
}

func (o PodVolumeBackupStatusProgressOutput) ToPodVolumeBackupStatusProgressPtrOutput() PodVolumeBackupStatusProgressPtrOutput {
	return o.ToPodVolumeBackupStatusProgressPtrOutputWithContext(context.Background())
}

func (o PodVolumeBackupStatusProgressOutput) ToPodVolumeBackupStatusProgressPtrOutputWithContext(ctx context.Context) PodVolumeBackupStatusProgressPtrOutput {
	return o.ApplyT(func(v PodVolumeBackupStatusProgress) *PodVolumeBackupStatusProgress {
		return &v
	}).(PodVolumeBackupStatusProgressPtrOutput)
}
func (o PodVolumeBackupStatusProgressOutput) BytesDone() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PodVolumeBackupStatusProgress) *int { return v.BytesDone }).(pulumi.IntPtrOutput)
}

func (o PodVolumeBackupStatusProgressOutput) TotalBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PodVolumeBackupStatusProgress) *int { return v.TotalBytes }).(pulumi.IntPtrOutput)
}

type PodVolumeBackupStatusProgressPtrOutput struct{ *pulumi.OutputState }

func (PodVolumeBackupStatusProgressPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodVolumeBackupStatusProgress)(nil)).Elem()
}

func (o PodVolumeBackupStatusProgressPtrOutput) ToPodVolumeBackupStatusProgressPtrOutput() PodVolumeBackupStatusProgressPtrOutput {
	return o
}

func (o PodVolumeBackupStatusProgressPtrOutput) ToPodVolumeBackupStatusProgressPtrOutputWithContext(ctx context.Context) PodVolumeBackupStatusProgressPtrOutput {
	return o
}

func (o PodVolumeBackupStatusProgressPtrOutput) Elem() PodVolumeBackupStatusProgressOutput {
	return o.ApplyT(func(v *PodVolumeBackupStatusProgress) PodVolumeBackupStatusProgress { return *v }).(PodVolumeBackupStatusProgressOutput)
}

func (o PodVolumeBackupStatusProgressPtrOutput) BytesDone() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PodVolumeBackupStatusProgress) *int {
		if v == nil {
			return nil
		}
		return v.BytesDone
	}).(pulumi.IntPtrOutput)
}

func (o PodVolumeBackupStatusProgressPtrOutput) TotalBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PodVolumeBackupStatusProgress) *int {
		if v == nil {
			return nil
		}
		return v.TotalBytes
	}).(pulumi.IntPtrOutput)
}

type PodVolumeRestoreType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// PodVolumeRestoreSpec is the specification for a PodVolumeRestore.
	Spec *PodVolumeRestoreSpec `pulumi:"spec"`
	// PodVolumeRestoreStatus is the current status of a PodVolumeRestore.
	Status *PodVolumeRestoreStatus `pulumi:"status"`
}

// PodVolumeRestoreTypeInput is an input type that accepts PodVolumeRestoreTypeArgs and PodVolumeRestoreTypeOutput values.
// You can construct a concrete instance of `PodVolumeRestoreTypeInput` via:
//
//          PodVolumeRestoreTypeArgs{...}
type PodVolumeRestoreTypeInput interface {
	pulumi.Input

	ToPodVolumeRestoreTypeOutput() PodVolumeRestoreTypeOutput
	ToPodVolumeRestoreTypeOutputWithContext(context.Context) PodVolumeRestoreTypeOutput
}

type PodVolumeRestoreTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// PodVolumeRestoreSpec is the specification for a PodVolumeRestore.
	Spec PodVolumeRestoreSpecPtrInput `pulumi:"spec"`
	// PodVolumeRestoreStatus is the current status of a PodVolumeRestore.
	Status PodVolumeRestoreStatusPtrInput `pulumi:"status"`
}

func (PodVolumeRestoreTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodVolumeRestoreType)(nil)).Elem()
}

func (i PodVolumeRestoreTypeArgs) ToPodVolumeRestoreTypeOutput() PodVolumeRestoreTypeOutput {
	return i.ToPodVolumeRestoreTypeOutputWithContext(context.Background())
}

func (i PodVolumeRestoreTypeArgs) ToPodVolumeRestoreTypeOutputWithContext(ctx context.Context) PodVolumeRestoreTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodVolumeRestoreTypeOutput)
}

type PodVolumeRestoreTypeOutput struct{ *pulumi.OutputState }

func (PodVolumeRestoreTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodVolumeRestoreType)(nil)).Elem()
}

func (o PodVolumeRestoreTypeOutput) ToPodVolumeRestoreTypeOutput() PodVolumeRestoreTypeOutput {
	return o
}

func (o PodVolumeRestoreTypeOutput) ToPodVolumeRestoreTypeOutputWithContext(ctx context.Context) PodVolumeRestoreTypeOutput {
	return o
}

func (o PodVolumeRestoreTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodVolumeRestoreType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o PodVolumeRestoreTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodVolumeRestoreType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o PodVolumeRestoreTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v PodVolumeRestoreType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// PodVolumeRestoreSpec is the specification for a PodVolumeRestore.
func (o PodVolumeRestoreTypeOutput) Spec() PodVolumeRestoreSpecPtrOutput {
	return o.ApplyT(func(v PodVolumeRestoreType) *PodVolumeRestoreSpec { return v.Spec }).(PodVolumeRestoreSpecPtrOutput)
}

// PodVolumeRestoreStatus is the current status of a PodVolumeRestore.
func (o PodVolumeRestoreTypeOutput) Status() PodVolumeRestoreStatusPtrOutput {
	return o.ApplyT(func(v PodVolumeRestoreType) *PodVolumeRestoreStatus { return v.Status }).(PodVolumeRestoreStatusPtrOutput)
}

type PodVolumeRestoreMetadata struct {
}

// PodVolumeRestoreMetadataInput is an input type that accepts PodVolumeRestoreMetadataArgs and PodVolumeRestoreMetadataOutput values.
// You can construct a concrete instance of `PodVolumeRestoreMetadataInput` via:
//
//          PodVolumeRestoreMetadataArgs{...}
type PodVolumeRestoreMetadataInput interface {
	pulumi.Input

	ToPodVolumeRestoreMetadataOutput() PodVolumeRestoreMetadataOutput
	ToPodVolumeRestoreMetadataOutputWithContext(context.Context) PodVolumeRestoreMetadataOutput
}

type PodVolumeRestoreMetadataArgs struct {
}

func (PodVolumeRestoreMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodVolumeRestoreMetadata)(nil)).Elem()
}

func (i PodVolumeRestoreMetadataArgs) ToPodVolumeRestoreMetadataOutput() PodVolumeRestoreMetadataOutput {
	return i.ToPodVolumeRestoreMetadataOutputWithContext(context.Background())
}

func (i PodVolumeRestoreMetadataArgs) ToPodVolumeRestoreMetadataOutputWithContext(ctx context.Context) PodVolumeRestoreMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodVolumeRestoreMetadataOutput)
}

type PodVolumeRestoreMetadataOutput struct{ *pulumi.OutputState }

func (PodVolumeRestoreMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodVolumeRestoreMetadata)(nil)).Elem()
}

func (o PodVolumeRestoreMetadataOutput) ToPodVolumeRestoreMetadataOutput() PodVolumeRestoreMetadataOutput {
	return o
}

func (o PodVolumeRestoreMetadataOutput) ToPodVolumeRestoreMetadataOutputWithContext(ctx context.Context) PodVolumeRestoreMetadataOutput {
	return o
}

// PodVolumeRestoreSpec is the specification for a PodVolumeRestore.
type PodVolumeRestoreSpec struct {
	// BackupStorageLocation is the name of the backup storage location where the restic repository is stored.
	BackupStorageLocation string `pulumi:"backupStorageLocation"`
	// Pod is a reference to the pod containing the volume to be restored.
	Pod PodVolumeRestoreSpecPod `pulumi:"pod"`
	// RepoIdentifier is the restic repository identifier.
	RepoIdentifier string `pulumi:"repoIdentifier"`
	// SnapshotID is the ID of the volume snapshot to be restored.
	SnapshotID string `pulumi:"snapshotID"`
	// Volume is the name of the volume within the Pod to be restored.
	Volume string `pulumi:"volume"`
}

// PodVolumeRestoreSpecInput is an input type that accepts PodVolumeRestoreSpecArgs and PodVolumeRestoreSpecOutput values.
// You can construct a concrete instance of `PodVolumeRestoreSpecInput` via:
//
//          PodVolumeRestoreSpecArgs{...}
type PodVolumeRestoreSpecInput interface {
	pulumi.Input

	ToPodVolumeRestoreSpecOutput() PodVolumeRestoreSpecOutput
	ToPodVolumeRestoreSpecOutputWithContext(context.Context) PodVolumeRestoreSpecOutput
}

// PodVolumeRestoreSpec is the specification for a PodVolumeRestore.
type PodVolumeRestoreSpecArgs struct {
	// BackupStorageLocation is the name of the backup storage location where the restic repository is stored.
	BackupStorageLocation pulumi.StringInput `pulumi:"backupStorageLocation"`
	// Pod is a reference to the pod containing the volume to be restored.
	Pod PodVolumeRestoreSpecPodInput `pulumi:"pod"`
	// RepoIdentifier is the restic repository identifier.
	RepoIdentifier pulumi.StringInput `pulumi:"repoIdentifier"`
	// SnapshotID is the ID of the volume snapshot to be restored.
	SnapshotID pulumi.StringInput `pulumi:"snapshotID"`
	// Volume is the name of the volume within the Pod to be restored.
	Volume pulumi.StringInput `pulumi:"volume"`
}

func (PodVolumeRestoreSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodVolumeRestoreSpec)(nil)).Elem()
}

func (i PodVolumeRestoreSpecArgs) ToPodVolumeRestoreSpecOutput() PodVolumeRestoreSpecOutput {
	return i.ToPodVolumeRestoreSpecOutputWithContext(context.Background())
}

func (i PodVolumeRestoreSpecArgs) ToPodVolumeRestoreSpecOutputWithContext(ctx context.Context) PodVolumeRestoreSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodVolumeRestoreSpecOutput)
}

func (i PodVolumeRestoreSpecArgs) ToPodVolumeRestoreSpecPtrOutput() PodVolumeRestoreSpecPtrOutput {
	return i.ToPodVolumeRestoreSpecPtrOutputWithContext(context.Background())
}

func (i PodVolumeRestoreSpecArgs) ToPodVolumeRestoreSpecPtrOutputWithContext(ctx context.Context) PodVolumeRestoreSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodVolumeRestoreSpecOutput).ToPodVolumeRestoreSpecPtrOutputWithContext(ctx)
}

// PodVolumeRestoreSpecPtrInput is an input type that accepts PodVolumeRestoreSpecArgs, PodVolumeRestoreSpecPtr and PodVolumeRestoreSpecPtrOutput values.
// You can construct a concrete instance of `PodVolumeRestoreSpecPtrInput` via:
//
//          PodVolumeRestoreSpecArgs{...}
//
//  or:
//
//          nil
type PodVolumeRestoreSpecPtrInput interface {
	pulumi.Input

	ToPodVolumeRestoreSpecPtrOutput() PodVolumeRestoreSpecPtrOutput
	ToPodVolumeRestoreSpecPtrOutputWithContext(context.Context) PodVolumeRestoreSpecPtrOutput
}

type podVolumeRestoreSpecPtrType PodVolumeRestoreSpecArgs

func PodVolumeRestoreSpecPtr(v *PodVolumeRestoreSpecArgs) PodVolumeRestoreSpecPtrInput {
	return (*podVolumeRestoreSpecPtrType)(v)
}

func (*podVolumeRestoreSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PodVolumeRestoreSpec)(nil)).Elem()
}

func (i *podVolumeRestoreSpecPtrType) ToPodVolumeRestoreSpecPtrOutput() PodVolumeRestoreSpecPtrOutput {
	return i.ToPodVolumeRestoreSpecPtrOutputWithContext(context.Background())
}

func (i *podVolumeRestoreSpecPtrType) ToPodVolumeRestoreSpecPtrOutputWithContext(ctx context.Context) PodVolumeRestoreSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodVolumeRestoreSpecPtrOutput)
}

// PodVolumeRestoreSpec is the specification for a PodVolumeRestore.
type PodVolumeRestoreSpecOutput struct{ *pulumi.OutputState }

func (PodVolumeRestoreSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodVolumeRestoreSpec)(nil)).Elem()
}

func (o PodVolumeRestoreSpecOutput) ToPodVolumeRestoreSpecOutput() PodVolumeRestoreSpecOutput {
	return o
}

func (o PodVolumeRestoreSpecOutput) ToPodVolumeRestoreSpecOutputWithContext(ctx context.Context) PodVolumeRestoreSpecOutput {
	return o
}

func (o PodVolumeRestoreSpecOutput) ToPodVolumeRestoreSpecPtrOutput() PodVolumeRestoreSpecPtrOutput {
	return o.ToPodVolumeRestoreSpecPtrOutputWithContext(context.Background())
}

func (o PodVolumeRestoreSpecOutput) ToPodVolumeRestoreSpecPtrOutputWithContext(ctx context.Context) PodVolumeRestoreSpecPtrOutput {
	return o.ApplyT(func(v PodVolumeRestoreSpec) *PodVolumeRestoreSpec {
		return &v
	}).(PodVolumeRestoreSpecPtrOutput)
}

// BackupStorageLocation is the name of the backup storage location where the restic repository is stored.
func (o PodVolumeRestoreSpecOutput) BackupStorageLocation() pulumi.StringOutput {
	return o.ApplyT(func(v PodVolumeRestoreSpec) string { return v.BackupStorageLocation }).(pulumi.StringOutput)
}

// Pod is a reference to the pod containing the volume to be restored.
func (o PodVolumeRestoreSpecOutput) Pod() PodVolumeRestoreSpecPodOutput {
	return o.ApplyT(func(v PodVolumeRestoreSpec) PodVolumeRestoreSpecPod { return v.Pod }).(PodVolumeRestoreSpecPodOutput)
}

// RepoIdentifier is the restic repository identifier.
func (o PodVolumeRestoreSpecOutput) RepoIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v PodVolumeRestoreSpec) string { return v.RepoIdentifier }).(pulumi.StringOutput)
}

// SnapshotID is the ID of the volume snapshot to be restored.
func (o PodVolumeRestoreSpecOutput) SnapshotID() pulumi.StringOutput {
	return o.ApplyT(func(v PodVolumeRestoreSpec) string { return v.SnapshotID }).(pulumi.StringOutput)
}

// Volume is the name of the volume within the Pod to be restored.
func (o PodVolumeRestoreSpecOutput) Volume() pulumi.StringOutput {
	return o.ApplyT(func(v PodVolumeRestoreSpec) string { return v.Volume }).(pulumi.StringOutput)
}

type PodVolumeRestoreSpecPtrOutput struct{ *pulumi.OutputState }

func (PodVolumeRestoreSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodVolumeRestoreSpec)(nil)).Elem()
}

func (o PodVolumeRestoreSpecPtrOutput) ToPodVolumeRestoreSpecPtrOutput() PodVolumeRestoreSpecPtrOutput {
	return o
}

func (o PodVolumeRestoreSpecPtrOutput) ToPodVolumeRestoreSpecPtrOutputWithContext(ctx context.Context) PodVolumeRestoreSpecPtrOutput {
	return o
}

func (o PodVolumeRestoreSpecPtrOutput) Elem() PodVolumeRestoreSpecOutput {
	return o.ApplyT(func(v *PodVolumeRestoreSpec) PodVolumeRestoreSpec { return *v }).(PodVolumeRestoreSpecOutput)
}

// BackupStorageLocation is the name of the backup storage location where the restic repository is stored.
func (o PodVolumeRestoreSpecPtrOutput) BackupStorageLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodVolumeRestoreSpec) *string {
		if v == nil {
			return nil
		}
		return &v.BackupStorageLocation
	}).(pulumi.StringPtrOutput)
}

// Pod is a reference to the pod containing the volume to be restored.
func (o PodVolumeRestoreSpecPtrOutput) Pod() PodVolumeRestoreSpecPodPtrOutput {
	return o.ApplyT(func(v *PodVolumeRestoreSpec) *PodVolumeRestoreSpecPod {
		if v == nil {
			return nil
		}
		return &v.Pod
	}).(PodVolumeRestoreSpecPodPtrOutput)
}

// RepoIdentifier is the restic repository identifier.
func (o PodVolumeRestoreSpecPtrOutput) RepoIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodVolumeRestoreSpec) *string {
		if v == nil {
			return nil
		}
		return &v.RepoIdentifier
	}).(pulumi.StringPtrOutput)
}

// SnapshotID is the ID of the volume snapshot to be restored.
func (o PodVolumeRestoreSpecPtrOutput) SnapshotID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodVolumeRestoreSpec) *string {
		if v == nil {
			return nil
		}
		return &v.SnapshotID
	}).(pulumi.StringPtrOutput)
}

// Volume is the name of the volume within the Pod to be restored.
func (o PodVolumeRestoreSpecPtrOutput) Volume() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodVolumeRestoreSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Volume
	}).(pulumi.StringPtrOutput)
}

// Pod is a reference to the pod containing the volume to be restored.
type PodVolumeRestoreSpecPod struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath *string `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`
}

// PodVolumeRestoreSpecPodInput is an input type that accepts PodVolumeRestoreSpecPodArgs and PodVolumeRestoreSpecPodOutput values.
// You can construct a concrete instance of `PodVolumeRestoreSpecPodInput` via:
//
//          PodVolumeRestoreSpecPodArgs{...}
type PodVolumeRestoreSpecPodInput interface {
	pulumi.Input

	ToPodVolumeRestoreSpecPodOutput() PodVolumeRestoreSpecPodOutput
	ToPodVolumeRestoreSpecPodOutputWithContext(context.Context) PodVolumeRestoreSpecPodOutput
}

// Pod is a reference to the pod containing the volume to be restored.
type PodVolumeRestoreSpecPodArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (PodVolumeRestoreSpecPodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodVolumeRestoreSpecPod)(nil)).Elem()
}

func (i PodVolumeRestoreSpecPodArgs) ToPodVolumeRestoreSpecPodOutput() PodVolumeRestoreSpecPodOutput {
	return i.ToPodVolumeRestoreSpecPodOutputWithContext(context.Background())
}

func (i PodVolumeRestoreSpecPodArgs) ToPodVolumeRestoreSpecPodOutputWithContext(ctx context.Context) PodVolumeRestoreSpecPodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodVolumeRestoreSpecPodOutput)
}

func (i PodVolumeRestoreSpecPodArgs) ToPodVolumeRestoreSpecPodPtrOutput() PodVolumeRestoreSpecPodPtrOutput {
	return i.ToPodVolumeRestoreSpecPodPtrOutputWithContext(context.Background())
}

func (i PodVolumeRestoreSpecPodArgs) ToPodVolumeRestoreSpecPodPtrOutputWithContext(ctx context.Context) PodVolumeRestoreSpecPodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodVolumeRestoreSpecPodOutput).ToPodVolumeRestoreSpecPodPtrOutputWithContext(ctx)
}

// PodVolumeRestoreSpecPodPtrInput is an input type that accepts PodVolumeRestoreSpecPodArgs, PodVolumeRestoreSpecPodPtr and PodVolumeRestoreSpecPodPtrOutput values.
// You can construct a concrete instance of `PodVolumeRestoreSpecPodPtrInput` via:
//
//          PodVolumeRestoreSpecPodArgs{...}
//
//  or:
//
//          nil
type PodVolumeRestoreSpecPodPtrInput interface {
	pulumi.Input

	ToPodVolumeRestoreSpecPodPtrOutput() PodVolumeRestoreSpecPodPtrOutput
	ToPodVolumeRestoreSpecPodPtrOutputWithContext(context.Context) PodVolumeRestoreSpecPodPtrOutput
}

type podVolumeRestoreSpecPodPtrType PodVolumeRestoreSpecPodArgs

func PodVolumeRestoreSpecPodPtr(v *PodVolumeRestoreSpecPodArgs) PodVolumeRestoreSpecPodPtrInput {
	return (*podVolumeRestoreSpecPodPtrType)(v)
}

func (*podVolumeRestoreSpecPodPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PodVolumeRestoreSpecPod)(nil)).Elem()
}

func (i *podVolumeRestoreSpecPodPtrType) ToPodVolumeRestoreSpecPodPtrOutput() PodVolumeRestoreSpecPodPtrOutput {
	return i.ToPodVolumeRestoreSpecPodPtrOutputWithContext(context.Background())
}

func (i *podVolumeRestoreSpecPodPtrType) ToPodVolumeRestoreSpecPodPtrOutputWithContext(ctx context.Context) PodVolumeRestoreSpecPodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodVolumeRestoreSpecPodPtrOutput)
}

// Pod is a reference to the pod containing the volume to be restored.
type PodVolumeRestoreSpecPodOutput struct{ *pulumi.OutputState }

func (PodVolumeRestoreSpecPodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodVolumeRestoreSpecPod)(nil)).Elem()
}

func (o PodVolumeRestoreSpecPodOutput) ToPodVolumeRestoreSpecPodOutput() PodVolumeRestoreSpecPodOutput {
	return o
}

func (o PodVolumeRestoreSpecPodOutput) ToPodVolumeRestoreSpecPodOutputWithContext(ctx context.Context) PodVolumeRestoreSpecPodOutput {
	return o
}

func (o PodVolumeRestoreSpecPodOutput) ToPodVolumeRestoreSpecPodPtrOutput() PodVolumeRestoreSpecPodPtrOutput {
	return o.ToPodVolumeRestoreSpecPodPtrOutputWithContext(context.Background())
}

func (o PodVolumeRestoreSpecPodOutput) ToPodVolumeRestoreSpecPodPtrOutputWithContext(ctx context.Context) PodVolumeRestoreSpecPodPtrOutput {
	return o.ApplyT(func(v PodVolumeRestoreSpecPod) *PodVolumeRestoreSpecPod {
		return &v
	}).(PodVolumeRestoreSpecPodPtrOutput)
}

// API version of the referent.
func (o PodVolumeRestoreSpecPodOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodVolumeRestoreSpecPod) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o PodVolumeRestoreSpecPodOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodVolumeRestoreSpecPod) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PodVolumeRestoreSpecPodOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodVolumeRestoreSpecPod) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o PodVolumeRestoreSpecPodOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodVolumeRestoreSpecPod) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o PodVolumeRestoreSpecPodOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodVolumeRestoreSpecPod) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o PodVolumeRestoreSpecPodOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodVolumeRestoreSpecPod) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o PodVolumeRestoreSpecPodOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodVolumeRestoreSpecPod) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type PodVolumeRestoreSpecPodPtrOutput struct{ *pulumi.OutputState }

func (PodVolumeRestoreSpecPodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodVolumeRestoreSpecPod)(nil)).Elem()
}

func (o PodVolumeRestoreSpecPodPtrOutput) ToPodVolumeRestoreSpecPodPtrOutput() PodVolumeRestoreSpecPodPtrOutput {
	return o
}

func (o PodVolumeRestoreSpecPodPtrOutput) ToPodVolumeRestoreSpecPodPtrOutputWithContext(ctx context.Context) PodVolumeRestoreSpecPodPtrOutput {
	return o
}

func (o PodVolumeRestoreSpecPodPtrOutput) Elem() PodVolumeRestoreSpecPodOutput {
	return o.ApplyT(func(v *PodVolumeRestoreSpecPod) PodVolumeRestoreSpecPod { return *v }).(PodVolumeRestoreSpecPodOutput)
}

// API version of the referent.
func (o PodVolumeRestoreSpecPodPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodVolumeRestoreSpecPod) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o PodVolumeRestoreSpecPodPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodVolumeRestoreSpecPod) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PodVolumeRestoreSpecPodPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodVolumeRestoreSpecPod) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o PodVolumeRestoreSpecPodPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodVolumeRestoreSpecPod) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o PodVolumeRestoreSpecPodPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodVolumeRestoreSpecPod) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o PodVolumeRestoreSpecPodPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodVolumeRestoreSpecPod) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o PodVolumeRestoreSpecPodPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodVolumeRestoreSpecPod) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// PodVolumeRestoreStatus is the current status of a PodVolumeRestore.
type PodVolumeRestoreStatus struct {
	// CompletionTimestamp records the time a restore was completed. Completion time is recorded even on failed restores. The server's time is used for CompletionTimestamps
	CompletionTimestamp *string `pulumi:"completionTimestamp"`
	// Errors is a count of all error messages that were generated during execution of the pod volume restore. The actual errors are in the restic log
	Errors *int `pulumi:"errors"`
	// Message is a message about the pod volume restore's status.
	Message *string `pulumi:"message"`
	// Phase is the current state of the PodVolumeRestore.
	Phase *string `pulumi:"phase"`
	// Progress holds the total number of bytes of the snapshot and the current number of restored bytes. This can be used to display progress information about the restore operation.
	Progress *PodVolumeRestoreStatusProgress `pulumi:"progress"`
	// ResticPod is the name of the restic pod which processed the restore. Any errors referenced in Errors or VerifyErrors will be logged in this pod's log.
	ResticPod *string `pulumi:"resticPod"`
	// StartTimestamp records the time a restore was started. The server's time is used for StartTimestamps
	StartTimestamp *string `pulumi:"startTimestamp"`
	// VerifyErrors is a count of all verification-related error messages that were generated during execution of the pod volume restore. The actual errors are in the restic log
	VerifyErrors *int `pulumi:"verifyErrors"`
}

// PodVolumeRestoreStatusInput is an input type that accepts PodVolumeRestoreStatusArgs and PodVolumeRestoreStatusOutput values.
// You can construct a concrete instance of `PodVolumeRestoreStatusInput` via:
//
//          PodVolumeRestoreStatusArgs{...}
type PodVolumeRestoreStatusInput interface {
	pulumi.Input

	ToPodVolumeRestoreStatusOutput() PodVolumeRestoreStatusOutput
	ToPodVolumeRestoreStatusOutputWithContext(context.Context) PodVolumeRestoreStatusOutput
}

// PodVolumeRestoreStatus is the current status of a PodVolumeRestore.
type PodVolumeRestoreStatusArgs struct {
	// CompletionTimestamp records the time a restore was completed. Completion time is recorded even on failed restores. The server's time is used for CompletionTimestamps
	CompletionTimestamp pulumi.StringPtrInput `pulumi:"completionTimestamp"`
	// Errors is a count of all error messages that were generated during execution of the pod volume restore. The actual errors are in the restic log
	Errors pulumi.IntPtrInput `pulumi:"errors"`
	// Message is a message about the pod volume restore's status.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Phase is the current state of the PodVolumeRestore.
	Phase pulumi.StringPtrInput `pulumi:"phase"`
	// Progress holds the total number of bytes of the snapshot and the current number of restored bytes. This can be used to display progress information about the restore operation.
	Progress PodVolumeRestoreStatusProgressPtrInput `pulumi:"progress"`
	// ResticPod is the name of the restic pod which processed the restore. Any errors referenced in Errors or VerifyErrors will be logged in this pod's log.
	ResticPod pulumi.StringPtrInput `pulumi:"resticPod"`
	// StartTimestamp records the time a restore was started. The server's time is used for StartTimestamps
	StartTimestamp pulumi.StringPtrInput `pulumi:"startTimestamp"`
	// VerifyErrors is a count of all verification-related error messages that were generated during execution of the pod volume restore. The actual errors are in the restic log
	VerifyErrors pulumi.IntPtrInput `pulumi:"verifyErrors"`
}

func (PodVolumeRestoreStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodVolumeRestoreStatus)(nil)).Elem()
}

func (i PodVolumeRestoreStatusArgs) ToPodVolumeRestoreStatusOutput() PodVolumeRestoreStatusOutput {
	return i.ToPodVolumeRestoreStatusOutputWithContext(context.Background())
}

func (i PodVolumeRestoreStatusArgs) ToPodVolumeRestoreStatusOutputWithContext(ctx context.Context) PodVolumeRestoreStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodVolumeRestoreStatusOutput)
}

func (i PodVolumeRestoreStatusArgs) ToPodVolumeRestoreStatusPtrOutput() PodVolumeRestoreStatusPtrOutput {
	return i.ToPodVolumeRestoreStatusPtrOutputWithContext(context.Background())
}

func (i PodVolumeRestoreStatusArgs) ToPodVolumeRestoreStatusPtrOutputWithContext(ctx context.Context) PodVolumeRestoreStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodVolumeRestoreStatusOutput).ToPodVolumeRestoreStatusPtrOutputWithContext(ctx)
}

// PodVolumeRestoreStatusPtrInput is an input type that accepts PodVolumeRestoreStatusArgs, PodVolumeRestoreStatusPtr and PodVolumeRestoreStatusPtrOutput values.
// You can construct a concrete instance of `PodVolumeRestoreStatusPtrInput` via:
//
//          PodVolumeRestoreStatusArgs{...}
//
//  or:
//
//          nil
type PodVolumeRestoreStatusPtrInput interface {
	pulumi.Input

	ToPodVolumeRestoreStatusPtrOutput() PodVolumeRestoreStatusPtrOutput
	ToPodVolumeRestoreStatusPtrOutputWithContext(context.Context) PodVolumeRestoreStatusPtrOutput
}

type podVolumeRestoreStatusPtrType PodVolumeRestoreStatusArgs

func PodVolumeRestoreStatusPtr(v *PodVolumeRestoreStatusArgs) PodVolumeRestoreStatusPtrInput {
	return (*podVolumeRestoreStatusPtrType)(v)
}

func (*podVolumeRestoreStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PodVolumeRestoreStatus)(nil)).Elem()
}

func (i *podVolumeRestoreStatusPtrType) ToPodVolumeRestoreStatusPtrOutput() PodVolumeRestoreStatusPtrOutput {
	return i.ToPodVolumeRestoreStatusPtrOutputWithContext(context.Background())
}

func (i *podVolumeRestoreStatusPtrType) ToPodVolumeRestoreStatusPtrOutputWithContext(ctx context.Context) PodVolumeRestoreStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodVolumeRestoreStatusPtrOutput)
}

// PodVolumeRestoreStatus is the current status of a PodVolumeRestore.
type PodVolumeRestoreStatusOutput struct{ *pulumi.OutputState }

func (PodVolumeRestoreStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodVolumeRestoreStatus)(nil)).Elem()
}

func (o PodVolumeRestoreStatusOutput) ToPodVolumeRestoreStatusOutput() PodVolumeRestoreStatusOutput {
	return o
}

func (o PodVolumeRestoreStatusOutput) ToPodVolumeRestoreStatusOutputWithContext(ctx context.Context) PodVolumeRestoreStatusOutput {
	return o
}

func (o PodVolumeRestoreStatusOutput) ToPodVolumeRestoreStatusPtrOutput() PodVolumeRestoreStatusPtrOutput {
	return o.ToPodVolumeRestoreStatusPtrOutputWithContext(context.Background())
}

func (o PodVolumeRestoreStatusOutput) ToPodVolumeRestoreStatusPtrOutputWithContext(ctx context.Context) PodVolumeRestoreStatusPtrOutput {
	return o.ApplyT(func(v PodVolumeRestoreStatus) *PodVolumeRestoreStatus {
		return &v
	}).(PodVolumeRestoreStatusPtrOutput)
}

// CompletionTimestamp records the time a restore was completed. Completion time is recorded even on failed restores. The server's time is used for CompletionTimestamps
func (o PodVolumeRestoreStatusOutput) CompletionTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodVolumeRestoreStatus) *string { return v.CompletionTimestamp }).(pulumi.StringPtrOutput)
}

// Errors is a count of all error messages that were generated during execution of the pod volume restore. The actual errors are in the restic log
func (o PodVolumeRestoreStatusOutput) Errors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PodVolumeRestoreStatus) *int { return v.Errors }).(pulumi.IntPtrOutput)
}

// Message is a message about the pod volume restore's status.
func (o PodVolumeRestoreStatusOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodVolumeRestoreStatus) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Phase is the current state of the PodVolumeRestore.
func (o PodVolumeRestoreStatusOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodVolumeRestoreStatus) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

// Progress holds the total number of bytes of the snapshot and the current number of restored bytes. This can be used to display progress information about the restore operation.
func (o PodVolumeRestoreStatusOutput) Progress() PodVolumeRestoreStatusProgressPtrOutput {
	return o.ApplyT(func(v PodVolumeRestoreStatus) *PodVolumeRestoreStatusProgress { return v.Progress }).(PodVolumeRestoreStatusProgressPtrOutput)
}

// ResticPod is the name of the restic pod which processed the restore. Any errors referenced in Errors or VerifyErrors will be logged in this pod's log.
func (o PodVolumeRestoreStatusOutput) ResticPod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodVolumeRestoreStatus) *string { return v.ResticPod }).(pulumi.StringPtrOutput)
}

// StartTimestamp records the time a restore was started. The server's time is used for StartTimestamps
func (o PodVolumeRestoreStatusOutput) StartTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PodVolumeRestoreStatus) *string { return v.StartTimestamp }).(pulumi.StringPtrOutput)
}

// VerifyErrors is a count of all verification-related error messages that were generated during execution of the pod volume restore. The actual errors are in the restic log
func (o PodVolumeRestoreStatusOutput) VerifyErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PodVolumeRestoreStatus) *int { return v.VerifyErrors }).(pulumi.IntPtrOutput)
}

type PodVolumeRestoreStatusPtrOutput struct{ *pulumi.OutputState }

func (PodVolumeRestoreStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodVolumeRestoreStatus)(nil)).Elem()
}

func (o PodVolumeRestoreStatusPtrOutput) ToPodVolumeRestoreStatusPtrOutput() PodVolumeRestoreStatusPtrOutput {
	return o
}

func (o PodVolumeRestoreStatusPtrOutput) ToPodVolumeRestoreStatusPtrOutputWithContext(ctx context.Context) PodVolumeRestoreStatusPtrOutput {
	return o
}

func (o PodVolumeRestoreStatusPtrOutput) Elem() PodVolumeRestoreStatusOutput {
	return o.ApplyT(func(v *PodVolumeRestoreStatus) PodVolumeRestoreStatus { return *v }).(PodVolumeRestoreStatusOutput)
}

// CompletionTimestamp records the time a restore was completed. Completion time is recorded even on failed restores. The server's time is used for CompletionTimestamps
func (o PodVolumeRestoreStatusPtrOutput) CompletionTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodVolumeRestoreStatus) *string {
		if v == nil {
			return nil
		}
		return v.CompletionTimestamp
	}).(pulumi.StringPtrOutput)
}

// Errors is a count of all error messages that were generated during execution of the pod volume restore. The actual errors are in the restic log
func (o PodVolumeRestoreStatusPtrOutput) Errors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PodVolumeRestoreStatus) *int {
		if v == nil {
			return nil
		}
		return v.Errors
	}).(pulumi.IntPtrOutput)
}

// Message is a message about the pod volume restore's status.
func (o PodVolumeRestoreStatusPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodVolumeRestoreStatus) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// Phase is the current state of the PodVolumeRestore.
func (o PodVolumeRestoreStatusPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodVolumeRestoreStatus) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

// Progress holds the total number of bytes of the snapshot and the current number of restored bytes. This can be used to display progress information about the restore operation.
func (o PodVolumeRestoreStatusPtrOutput) Progress() PodVolumeRestoreStatusProgressPtrOutput {
	return o.ApplyT(func(v *PodVolumeRestoreStatus) *PodVolumeRestoreStatusProgress {
		if v == nil {
			return nil
		}
		return v.Progress
	}).(PodVolumeRestoreStatusProgressPtrOutput)
}

// ResticPod is the name of the restic pod which processed the restore. Any errors referenced in Errors or VerifyErrors will be logged in this pod's log.
func (o PodVolumeRestoreStatusPtrOutput) ResticPod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodVolumeRestoreStatus) *string {
		if v == nil {
			return nil
		}
		return v.ResticPod
	}).(pulumi.StringPtrOutput)
}

// StartTimestamp records the time a restore was started. The server's time is used for StartTimestamps
func (o PodVolumeRestoreStatusPtrOutput) StartTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodVolumeRestoreStatus) *string {
		if v == nil {
			return nil
		}
		return v.StartTimestamp
	}).(pulumi.StringPtrOutput)
}

// VerifyErrors is a count of all verification-related error messages that were generated during execution of the pod volume restore. The actual errors are in the restic log
func (o PodVolumeRestoreStatusPtrOutput) VerifyErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PodVolumeRestoreStatus) *int {
		if v == nil {
			return nil
		}
		return v.VerifyErrors
	}).(pulumi.IntPtrOutput)
}

// Progress holds the total number of bytes of the snapshot and the current number of restored bytes. This can be used to display progress information about the restore operation.
type PodVolumeRestoreStatusProgress struct {
	BytesDone  *int `pulumi:"bytesDone"`
	TotalBytes *int `pulumi:"totalBytes"`
}

// PodVolumeRestoreStatusProgressInput is an input type that accepts PodVolumeRestoreStatusProgressArgs and PodVolumeRestoreStatusProgressOutput values.
// You can construct a concrete instance of `PodVolumeRestoreStatusProgressInput` via:
//
//          PodVolumeRestoreStatusProgressArgs{...}
type PodVolumeRestoreStatusProgressInput interface {
	pulumi.Input

	ToPodVolumeRestoreStatusProgressOutput() PodVolumeRestoreStatusProgressOutput
	ToPodVolumeRestoreStatusProgressOutputWithContext(context.Context) PodVolumeRestoreStatusProgressOutput
}

// Progress holds the total number of bytes of the snapshot and the current number of restored bytes. This can be used to display progress information about the restore operation.
type PodVolumeRestoreStatusProgressArgs struct {
	BytesDone  pulumi.IntPtrInput `pulumi:"bytesDone"`
	TotalBytes pulumi.IntPtrInput `pulumi:"totalBytes"`
}

func (PodVolumeRestoreStatusProgressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PodVolumeRestoreStatusProgress)(nil)).Elem()
}

func (i PodVolumeRestoreStatusProgressArgs) ToPodVolumeRestoreStatusProgressOutput() PodVolumeRestoreStatusProgressOutput {
	return i.ToPodVolumeRestoreStatusProgressOutputWithContext(context.Background())
}

func (i PodVolumeRestoreStatusProgressArgs) ToPodVolumeRestoreStatusProgressOutputWithContext(ctx context.Context) PodVolumeRestoreStatusProgressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodVolumeRestoreStatusProgressOutput)
}

func (i PodVolumeRestoreStatusProgressArgs) ToPodVolumeRestoreStatusProgressPtrOutput() PodVolumeRestoreStatusProgressPtrOutput {
	return i.ToPodVolumeRestoreStatusProgressPtrOutputWithContext(context.Background())
}

func (i PodVolumeRestoreStatusProgressArgs) ToPodVolumeRestoreStatusProgressPtrOutputWithContext(ctx context.Context) PodVolumeRestoreStatusProgressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodVolumeRestoreStatusProgressOutput).ToPodVolumeRestoreStatusProgressPtrOutputWithContext(ctx)
}

// PodVolumeRestoreStatusProgressPtrInput is an input type that accepts PodVolumeRestoreStatusProgressArgs, PodVolumeRestoreStatusProgressPtr and PodVolumeRestoreStatusProgressPtrOutput values.
// You can construct a concrete instance of `PodVolumeRestoreStatusProgressPtrInput` via:
//
//          PodVolumeRestoreStatusProgressArgs{...}
//
//  or:
//
//          nil
type PodVolumeRestoreStatusProgressPtrInput interface {
	pulumi.Input

	ToPodVolumeRestoreStatusProgressPtrOutput() PodVolumeRestoreStatusProgressPtrOutput
	ToPodVolumeRestoreStatusProgressPtrOutputWithContext(context.Context) PodVolumeRestoreStatusProgressPtrOutput
}

type podVolumeRestoreStatusProgressPtrType PodVolumeRestoreStatusProgressArgs

func PodVolumeRestoreStatusProgressPtr(v *PodVolumeRestoreStatusProgressArgs) PodVolumeRestoreStatusProgressPtrInput {
	return (*podVolumeRestoreStatusProgressPtrType)(v)
}

func (*podVolumeRestoreStatusProgressPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PodVolumeRestoreStatusProgress)(nil)).Elem()
}

func (i *podVolumeRestoreStatusProgressPtrType) ToPodVolumeRestoreStatusProgressPtrOutput() PodVolumeRestoreStatusProgressPtrOutput {
	return i.ToPodVolumeRestoreStatusProgressPtrOutputWithContext(context.Background())
}

func (i *podVolumeRestoreStatusProgressPtrType) ToPodVolumeRestoreStatusProgressPtrOutputWithContext(ctx context.Context) PodVolumeRestoreStatusProgressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodVolumeRestoreStatusProgressPtrOutput)
}

// Progress holds the total number of bytes of the snapshot and the current number of restored bytes. This can be used to display progress information about the restore operation.
type PodVolumeRestoreStatusProgressOutput struct{ *pulumi.OutputState }

func (PodVolumeRestoreStatusProgressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PodVolumeRestoreStatusProgress)(nil)).Elem()
}

func (o PodVolumeRestoreStatusProgressOutput) ToPodVolumeRestoreStatusProgressOutput() PodVolumeRestoreStatusProgressOutput {
	return o
}

func (o PodVolumeRestoreStatusProgressOutput) ToPodVolumeRestoreStatusProgressOutputWithContext(ctx context.Context) PodVolumeRestoreStatusProgressOutput {
	return o
}

func (o PodVolumeRestoreStatusProgressOutput) ToPodVolumeRestoreStatusProgressPtrOutput() PodVolumeRestoreStatusProgressPtrOutput {
	return o.ToPodVolumeRestoreStatusProgressPtrOutputWithContext(context.Background())
}

func (o PodVolumeRestoreStatusProgressOutput) ToPodVolumeRestoreStatusProgressPtrOutputWithContext(ctx context.Context) PodVolumeRestoreStatusProgressPtrOutput {
	return o.ApplyT(func(v PodVolumeRestoreStatusProgress) *PodVolumeRestoreStatusProgress {
		return &v
	}).(PodVolumeRestoreStatusProgressPtrOutput)
}
func (o PodVolumeRestoreStatusProgressOutput) BytesDone() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PodVolumeRestoreStatusProgress) *int { return v.BytesDone }).(pulumi.IntPtrOutput)
}

func (o PodVolumeRestoreStatusProgressOutput) TotalBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PodVolumeRestoreStatusProgress) *int { return v.TotalBytes }).(pulumi.IntPtrOutput)
}

type PodVolumeRestoreStatusProgressPtrOutput struct{ *pulumi.OutputState }

func (PodVolumeRestoreStatusProgressPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodVolumeRestoreStatusProgress)(nil)).Elem()
}

func (o PodVolumeRestoreStatusProgressPtrOutput) ToPodVolumeRestoreStatusProgressPtrOutput() PodVolumeRestoreStatusProgressPtrOutput {
	return o
}

func (o PodVolumeRestoreStatusProgressPtrOutput) ToPodVolumeRestoreStatusProgressPtrOutputWithContext(ctx context.Context) PodVolumeRestoreStatusProgressPtrOutput {
	return o
}

func (o PodVolumeRestoreStatusProgressPtrOutput) Elem() PodVolumeRestoreStatusProgressOutput {
	return o.ApplyT(func(v *PodVolumeRestoreStatusProgress) PodVolumeRestoreStatusProgress { return *v }).(PodVolumeRestoreStatusProgressOutput)
}

func (o PodVolumeRestoreStatusProgressPtrOutput) BytesDone() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PodVolumeRestoreStatusProgress) *int {
		if v == nil {
			return nil
		}
		return v.BytesDone
	}).(pulumi.IntPtrOutput)
}

func (o PodVolumeRestoreStatusProgressPtrOutput) TotalBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PodVolumeRestoreStatusProgress) *int {
		if v == nil {
			return nil
		}
		return v.TotalBytes
	}).(pulumi.IntPtrOutput)
}

type ResticRepositoryType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// ResticRepositorySpec is the specification for a ResticRepository.
	Spec *ResticRepositorySpec `pulumi:"spec"`
	// ResticRepositoryStatus is the current status of a ResticRepository.
	Status *ResticRepositoryStatus `pulumi:"status"`
}

// ResticRepositoryTypeInput is an input type that accepts ResticRepositoryTypeArgs and ResticRepositoryTypeOutput values.
// You can construct a concrete instance of `ResticRepositoryTypeInput` via:
//
//          ResticRepositoryTypeArgs{...}
type ResticRepositoryTypeInput interface {
	pulumi.Input

	ToResticRepositoryTypeOutput() ResticRepositoryTypeOutput
	ToResticRepositoryTypeOutputWithContext(context.Context) ResticRepositoryTypeOutput
}

type ResticRepositoryTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// ResticRepositorySpec is the specification for a ResticRepository.
	Spec ResticRepositorySpecPtrInput `pulumi:"spec"`
	// ResticRepositoryStatus is the current status of a ResticRepository.
	Status ResticRepositoryStatusPtrInput `pulumi:"status"`
}

func (ResticRepositoryTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResticRepositoryType)(nil)).Elem()
}

func (i ResticRepositoryTypeArgs) ToResticRepositoryTypeOutput() ResticRepositoryTypeOutput {
	return i.ToResticRepositoryTypeOutputWithContext(context.Background())
}

func (i ResticRepositoryTypeArgs) ToResticRepositoryTypeOutputWithContext(ctx context.Context) ResticRepositoryTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResticRepositoryTypeOutput)
}

type ResticRepositoryTypeOutput struct{ *pulumi.OutputState }

func (ResticRepositoryTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResticRepositoryType)(nil)).Elem()
}

func (o ResticRepositoryTypeOutput) ToResticRepositoryTypeOutput() ResticRepositoryTypeOutput {
	return o
}

func (o ResticRepositoryTypeOutput) ToResticRepositoryTypeOutputWithContext(ctx context.Context) ResticRepositoryTypeOutput {
	return o
}

func (o ResticRepositoryTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResticRepositoryType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o ResticRepositoryTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResticRepositoryType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o ResticRepositoryTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ResticRepositoryType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// ResticRepositorySpec is the specification for a ResticRepository.
func (o ResticRepositoryTypeOutput) Spec() ResticRepositorySpecPtrOutput {
	return o.ApplyT(func(v ResticRepositoryType) *ResticRepositorySpec { return v.Spec }).(ResticRepositorySpecPtrOutput)
}

// ResticRepositoryStatus is the current status of a ResticRepository.
func (o ResticRepositoryTypeOutput) Status() ResticRepositoryStatusPtrOutput {
	return o.ApplyT(func(v ResticRepositoryType) *ResticRepositoryStatus { return v.Status }).(ResticRepositoryStatusPtrOutput)
}

type ResticRepositoryMetadata struct {
}

// ResticRepositoryMetadataInput is an input type that accepts ResticRepositoryMetadataArgs and ResticRepositoryMetadataOutput values.
// You can construct a concrete instance of `ResticRepositoryMetadataInput` via:
//
//          ResticRepositoryMetadataArgs{...}
type ResticRepositoryMetadataInput interface {
	pulumi.Input

	ToResticRepositoryMetadataOutput() ResticRepositoryMetadataOutput
	ToResticRepositoryMetadataOutputWithContext(context.Context) ResticRepositoryMetadataOutput
}

type ResticRepositoryMetadataArgs struct {
}

func (ResticRepositoryMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResticRepositoryMetadata)(nil)).Elem()
}

func (i ResticRepositoryMetadataArgs) ToResticRepositoryMetadataOutput() ResticRepositoryMetadataOutput {
	return i.ToResticRepositoryMetadataOutputWithContext(context.Background())
}

func (i ResticRepositoryMetadataArgs) ToResticRepositoryMetadataOutputWithContext(ctx context.Context) ResticRepositoryMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResticRepositoryMetadataOutput)
}

type ResticRepositoryMetadataOutput struct{ *pulumi.OutputState }

func (ResticRepositoryMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResticRepositoryMetadata)(nil)).Elem()
}

func (o ResticRepositoryMetadataOutput) ToResticRepositoryMetadataOutput() ResticRepositoryMetadataOutput {
	return o
}

func (o ResticRepositoryMetadataOutput) ToResticRepositoryMetadataOutputWithContext(ctx context.Context) ResticRepositoryMetadataOutput {
	return o
}

// ResticRepositorySpec is the specification for a ResticRepository.
type ResticRepositorySpec struct {
	// BackupStorageLocation is the name of the BackupStorageLocation that should contain this repository.
	BackupStorageLocation string `pulumi:"backupStorageLocation"`
	// MaintenanceFrequency is how often maintenance should be run.
	MaintenanceFrequency string `pulumi:"maintenanceFrequency"`
	// ResticIdentifier is the full restic-compatible string for identifying this repository.
	ResticIdentifier string `pulumi:"resticIdentifier"`
	// VolumeNamespace is the namespace this restic repository contains pod volume backups for.
	VolumeNamespace string `pulumi:"volumeNamespace"`
}

// ResticRepositorySpecInput is an input type that accepts ResticRepositorySpecArgs and ResticRepositorySpecOutput values.
// You can construct a concrete instance of `ResticRepositorySpecInput` via:
//
//          ResticRepositorySpecArgs{...}
type ResticRepositorySpecInput interface {
	pulumi.Input

	ToResticRepositorySpecOutput() ResticRepositorySpecOutput
	ToResticRepositorySpecOutputWithContext(context.Context) ResticRepositorySpecOutput
}

// ResticRepositorySpec is the specification for a ResticRepository.
type ResticRepositorySpecArgs struct {
	// BackupStorageLocation is the name of the BackupStorageLocation that should contain this repository.
	BackupStorageLocation pulumi.StringInput `pulumi:"backupStorageLocation"`
	// MaintenanceFrequency is how often maintenance should be run.
	MaintenanceFrequency pulumi.StringInput `pulumi:"maintenanceFrequency"`
	// ResticIdentifier is the full restic-compatible string for identifying this repository.
	ResticIdentifier pulumi.StringInput `pulumi:"resticIdentifier"`
	// VolumeNamespace is the namespace this restic repository contains pod volume backups for.
	VolumeNamespace pulumi.StringInput `pulumi:"volumeNamespace"`
}

func (ResticRepositorySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResticRepositorySpec)(nil)).Elem()
}

func (i ResticRepositorySpecArgs) ToResticRepositorySpecOutput() ResticRepositorySpecOutput {
	return i.ToResticRepositorySpecOutputWithContext(context.Background())
}

func (i ResticRepositorySpecArgs) ToResticRepositorySpecOutputWithContext(ctx context.Context) ResticRepositorySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResticRepositorySpecOutput)
}

func (i ResticRepositorySpecArgs) ToResticRepositorySpecPtrOutput() ResticRepositorySpecPtrOutput {
	return i.ToResticRepositorySpecPtrOutputWithContext(context.Background())
}

func (i ResticRepositorySpecArgs) ToResticRepositorySpecPtrOutputWithContext(ctx context.Context) ResticRepositorySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResticRepositorySpecOutput).ToResticRepositorySpecPtrOutputWithContext(ctx)
}

// ResticRepositorySpecPtrInput is an input type that accepts ResticRepositorySpecArgs, ResticRepositorySpecPtr and ResticRepositorySpecPtrOutput values.
// You can construct a concrete instance of `ResticRepositorySpecPtrInput` via:
//
//          ResticRepositorySpecArgs{...}
//
//  or:
//
//          nil
type ResticRepositorySpecPtrInput interface {
	pulumi.Input

	ToResticRepositorySpecPtrOutput() ResticRepositorySpecPtrOutput
	ToResticRepositorySpecPtrOutputWithContext(context.Context) ResticRepositorySpecPtrOutput
}

type resticRepositorySpecPtrType ResticRepositorySpecArgs

func ResticRepositorySpecPtr(v *ResticRepositorySpecArgs) ResticRepositorySpecPtrInput {
	return (*resticRepositorySpecPtrType)(v)
}

func (*resticRepositorySpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResticRepositorySpec)(nil)).Elem()
}

func (i *resticRepositorySpecPtrType) ToResticRepositorySpecPtrOutput() ResticRepositorySpecPtrOutput {
	return i.ToResticRepositorySpecPtrOutputWithContext(context.Background())
}

func (i *resticRepositorySpecPtrType) ToResticRepositorySpecPtrOutputWithContext(ctx context.Context) ResticRepositorySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResticRepositorySpecPtrOutput)
}

// ResticRepositorySpec is the specification for a ResticRepository.
type ResticRepositorySpecOutput struct{ *pulumi.OutputState }

func (ResticRepositorySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResticRepositorySpec)(nil)).Elem()
}

func (o ResticRepositorySpecOutput) ToResticRepositorySpecOutput() ResticRepositorySpecOutput {
	return o
}

func (o ResticRepositorySpecOutput) ToResticRepositorySpecOutputWithContext(ctx context.Context) ResticRepositorySpecOutput {
	return o
}

func (o ResticRepositorySpecOutput) ToResticRepositorySpecPtrOutput() ResticRepositorySpecPtrOutput {
	return o.ToResticRepositorySpecPtrOutputWithContext(context.Background())
}

func (o ResticRepositorySpecOutput) ToResticRepositorySpecPtrOutputWithContext(ctx context.Context) ResticRepositorySpecPtrOutput {
	return o.ApplyT(func(v ResticRepositorySpec) *ResticRepositorySpec {
		return &v
	}).(ResticRepositorySpecPtrOutput)
}

// BackupStorageLocation is the name of the BackupStorageLocation that should contain this repository.
func (o ResticRepositorySpecOutput) BackupStorageLocation() pulumi.StringOutput {
	return o.ApplyT(func(v ResticRepositorySpec) string { return v.BackupStorageLocation }).(pulumi.StringOutput)
}

// MaintenanceFrequency is how often maintenance should be run.
func (o ResticRepositorySpecOutput) MaintenanceFrequency() pulumi.StringOutput {
	return o.ApplyT(func(v ResticRepositorySpec) string { return v.MaintenanceFrequency }).(pulumi.StringOutput)
}

// ResticIdentifier is the full restic-compatible string for identifying this repository.
func (o ResticRepositorySpecOutput) ResticIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v ResticRepositorySpec) string { return v.ResticIdentifier }).(pulumi.StringOutput)
}

// VolumeNamespace is the namespace this restic repository contains pod volume backups for.
func (o ResticRepositorySpecOutput) VolumeNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v ResticRepositorySpec) string { return v.VolumeNamespace }).(pulumi.StringOutput)
}

type ResticRepositorySpecPtrOutput struct{ *pulumi.OutputState }

func (ResticRepositorySpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResticRepositorySpec)(nil)).Elem()
}

func (o ResticRepositorySpecPtrOutput) ToResticRepositorySpecPtrOutput() ResticRepositorySpecPtrOutput {
	return o
}

func (o ResticRepositorySpecPtrOutput) ToResticRepositorySpecPtrOutputWithContext(ctx context.Context) ResticRepositorySpecPtrOutput {
	return o
}

func (o ResticRepositorySpecPtrOutput) Elem() ResticRepositorySpecOutput {
	return o.ApplyT(func(v *ResticRepositorySpec) ResticRepositorySpec { return *v }).(ResticRepositorySpecOutput)
}

// BackupStorageLocation is the name of the BackupStorageLocation that should contain this repository.
func (o ResticRepositorySpecPtrOutput) BackupStorageLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResticRepositorySpec) *string {
		if v == nil {
			return nil
		}
		return &v.BackupStorageLocation
	}).(pulumi.StringPtrOutput)
}

// MaintenanceFrequency is how often maintenance should be run.
func (o ResticRepositorySpecPtrOutput) MaintenanceFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResticRepositorySpec) *string {
		if v == nil {
			return nil
		}
		return &v.MaintenanceFrequency
	}).(pulumi.StringPtrOutput)
}

// ResticIdentifier is the full restic-compatible string for identifying this repository.
func (o ResticRepositorySpecPtrOutput) ResticIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResticRepositorySpec) *string {
		if v == nil {
			return nil
		}
		return &v.ResticIdentifier
	}).(pulumi.StringPtrOutput)
}

// VolumeNamespace is the namespace this restic repository contains pod volume backups for.
func (o ResticRepositorySpecPtrOutput) VolumeNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResticRepositorySpec) *string {
		if v == nil {
			return nil
		}
		return &v.VolumeNamespace
	}).(pulumi.StringPtrOutput)
}

// ResticRepositoryStatus is the current status of a ResticRepository.
type ResticRepositoryStatus struct {
	// LastMaintenanceTime is the last time maintenance was run.
	LastMaintenanceTime *string `pulumi:"lastMaintenanceTime"`
	// Message is a message about the current status of the ResticRepository.
	Message *string `pulumi:"message"`
	// Phase is the current state of the ResticRepository.
	Phase *string `pulumi:"phase"`
}

// ResticRepositoryStatusInput is an input type that accepts ResticRepositoryStatusArgs and ResticRepositoryStatusOutput values.
// You can construct a concrete instance of `ResticRepositoryStatusInput` via:
//
//          ResticRepositoryStatusArgs{...}
type ResticRepositoryStatusInput interface {
	pulumi.Input

	ToResticRepositoryStatusOutput() ResticRepositoryStatusOutput
	ToResticRepositoryStatusOutputWithContext(context.Context) ResticRepositoryStatusOutput
}

// ResticRepositoryStatus is the current status of a ResticRepository.
type ResticRepositoryStatusArgs struct {
	// LastMaintenanceTime is the last time maintenance was run.
	LastMaintenanceTime pulumi.StringPtrInput `pulumi:"lastMaintenanceTime"`
	// Message is a message about the current status of the ResticRepository.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Phase is the current state of the ResticRepository.
	Phase pulumi.StringPtrInput `pulumi:"phase"`
}

func (ResticRepositoryStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResticRepositoryStatus)(nil)).Elem()
}

func (i ResticRepositoryStatusArgs) ToResticRepositoryStatusOutput() ResticRepositoryStatusOutput {
	return i.ToResticRepositoryStatusOutputWithContext(context.Background())
}

func (i ResticRepositoryStatusArgs) ToResticRepositoryStatusOutputWithContext(ctx context.Context) ResticRepositoryStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResticRepositoryStatusOutput)
}

func (i ResticRepositoryStatusArgs) ToResticRepositoryStatusPtrOutput() ResticRepositoryStatusPtrOutput {
	return i.ToResticRepositoryStatusPtrOutputWithContext(context.Background())
}

func (i ResticRepositoryStatusArgs) ToResticRepositoryStatusPtrOutputWithContext(ctx context.Context) ResticRepositoryStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResticRepositoryStatusOutput).ToResticRepositoryStatusPtrOutputWithContext(ctx)
}

// ResticRepositoryStatusPtrInput is an input type that accepts ResticRepositoryStatusArgs, ResticRepositoryStatusPtr and ResticRepositoryStatusPtrOutput values.
// You can construct a concrete instance of `ResticRepositoryStatusPtrInput` via:
//
//          ResticRepositoryStatusArgs{...}
//
//  or:
//
//          nil
type ResticRepositoryStatusPtrInput interface {
	pulumi.Input

	ToResticRepositoryStatusPtrOutput() ResticRepositoryStatusPtrOutput
	ToResticRepositoryStatusPtrOutputWithContext(context.Context) ResticRepositoryStatusPtrOutput
}

type resticRepositoryStatusPtrType ResticRepositoryStatusArgs

func ResticRepositoryStatusPtr(v *ResticRepositoryStatusArgs) ResticRepositoryStatusPtrInput {
	return (*resticRepositoryStatusPtrType)(v)
}

func (*resticRepositoryStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResticRepositoryStatus)(nil)).Elem()
}

func (i *resticRepositoryStatusPtrType) ToResticRepositoryStatusPtrOutput() ResticRepositoryStatusPtrOutput {
	return i.ToResticRepositoryStatusPtrOutputWithContext(context.Background())
}

func (i *resticRepositoryStatusPtrType) ToResticRepositoryStatusPtrOutputWithContext(ctx context.Context) ResticRepositoryStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResticRepositoryStatusPtrOutput)
}

// ResticRepositoryStatus is the current status of a ResticRepository.
type ResticRepositoryStatusOutput struct{ *pulumi.OutputState }

func (ResticRepositoryStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResticRepositoryStatus)(nil)).Elem()
}

func (o ResticRepositoryStatusOutput) ToResticRepositoryStatusOutput() ResticRepositoryStatusOutput {
	return o
}

func (o ResticRepositoryStatusOutput) ToResticRepositoryStatusOutputWithContext(ctx context.Context) ResticRepositoryStatusOutput {
	return o
}

func (o ResticRepositoryStatusOutput) ToResticRepositoryStatusPtrOutput() ResticRepositoryStatusPtrOutput {
	return o.ToResticRepositoryStatusPtrOutputWithContext(context.Background())
}

func (o ResticRepositoryStatusOutput) ToResticRepositoryStatusPtrOutputWithContext(ctx context.Context) ResticRepositoryStatusPtrOutput {
	return o.ApplyT(func(v ResticRepositoryStatus) *ResticRepositoryStatus {
		return &v
	}).(ResticRepositoryStatusPtrOutput)
}

// LastMaintenanceTime is the last time maintenance was run.
func (o ResticRepositoryStatusOutput) LastMaintenanceTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResticRepositoryStatus) *string { return v.LastMaintenanceTime }).(pulumi.StringPtrOutput)
}

// Message is a message about the current status of the ResticRepository.
func (o ResticRepositoryStatusOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResticRepositoryStatus) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Phase is the current state of the ResticRepository.
func (o ResticRepositoryStatusOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResticRepositoryStatus) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

type ResticRepositoryStatusPtrOutput struct{ *pulumi.OutputState }

func (ResticRepositoryStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResticRepositoryStatus)(nil)).Elem()
}

func (o ResticRepositoryStatusPtrOutput) ToResticRepositoryStatusPtrOutput() ResticRepositoryStatusPtrOutput {
	return o
}

func (o ResticRepositoryStatusPtrOutput) ToResticRepositoryStatusPtrOutputWithContext(ctx context.Context) ResticRepositoryStatusPtrOutput {
	return o
}

func (o ResticRepositoryStatusPtrOutput) Elem() ResticRepositoryStatusOutput {
	return o.ApplyT(func(v *ResticRepositoryStatus) ResticRepositoryStatus { return *v }).(ResticRepositoryStatusOutput)
}

// LastMaintenanceTime is the last time maintenance was run.
func (o ResticRepositoryStatusPtrOutput) LastMaintenanceTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResticRepositoryStatus) *string {
		if v == nil {
			return nil
		}
		return v.LastMaintenanceTime
	}).(pulumi.StringPtrOutput)
}

// Message is a message about the current status of the ResticRepository.
func (o ResticRepositoryStatusPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResticRepositoryStatus) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// Phase is the current state of the ResticRepository.
func (o ResticRepositoryStatusPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResticRepositoryStatus) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

// Restore is a Velero resource that represents the application of resources from a Velero backup to a target Kubernetes cluster.
type RestoreType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// RestoreSpec defines the specification for a Velero restore.
	Spec *RestoreSpec `pulumi:"spec"`
	// RestoreStatus captures the current status of a Velero restore
	Status *RestoreStatus `pulumi:"status"`
}

// RestoreTypeInput is an input type that accepts RestoreTypeArgs and RestoreTypeOutput values.
// You can construct a concrete instance of `RestoreTypeInput` via:
//
//          RestoreTypeArgs{...}
type RestoreTypeInput interface {
	pulumi.Input

	ToRestoreTypeOutput() RestoreTypeOutput
	ToRestoreTypeOutputWithContext(context.Context) RestoreTypeOutput
}

// Restore is a Velero resource that represents the application of resources from a Velero backup to a target Kubernetes cluster.
type RestoreTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// RestoreSpec defines the specification for a Velero restore.
	Spec RestoreSpecPtrInput `pulumi:"spec"`
	// RestoreStatus captures the current status of a Velero restore
	Status RestoreStatusPtrInput `pulumi:"status"`
}

func (RestoreTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RestoreType)(nil)).Elem()
}

func (i RestoreTypeArgs) ToRestoreTypeOutput() RestoreTypeOutput {
	return i.ToRestoreTypeOutputWithContext(context.Background())
}

func (i RestoreTypeArgs) ToRestoreTypeOutputWithContext(ctx context.Context) RestoreTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestoreTypeOutput)
}

// Restore is a Velero resource that represents the application of resources from a Velero backup to a target Kubernetes cluster.
type RestoreTypeOutput struct{ *pulumi.OutputState }

func (RestoreTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestoreType)(nil)).Elem()
}

func (o RestoreTypeOutput) ToRestoreTypeOutput() RestoreTypeOutput {
	return o
}

func (o RestoreTypeOutput) ToRestoreTypeOutputWithContext(ctx context.Context) RestoreTypeOutput {
	return o
}

func (o RestoreTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RestoreType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o RestoreTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RestoreType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o RestoreTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v RestoreType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// RestoreSpec defines the specification for a Velero restore.
func (o RestoreTypeOutput) Spec() RestoreSpecPtrOutput {
	return o.ApplyT(func(v RestoreType) *RestoreSpec { return v.Spec }).(RestoreSpecPtrOutput)
}

// RestoreStatus captures the current status of a Velero restore
func (o RestoreTypeOutput) Status() RestoreStatusPtrOutput {
	return o.ApplyT(func(v RestoreType) *RestoreStatus { return v.Status }).(RestoreStatusPtrOutput)
}

type RestoreMetadata struct {
}

// RestoreMetadataInput is an input type that accepts RestoreMetadataArgs and RestoreMetadataOutput values.
// You can construct a concrete instance of `RestoreMetadataInput` via:
//
//          RestoreMetadataArgs{...}
type RestoreMetadataInput interface {
	pulumi.Input

	ToRestoreMetadataOutput() RestoreMetadataOutput
	ToRestoreMetadataOutputWithContext(context.Context) RestoreMetadataOutput
}

type RestoreMetadataArgs struct {
}

func (RestoreMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RestoreMetadata)(nil)).Elem()
}

func (i RestoreMetadataArgs) ToRestoreMetadataOutput() RestoreMetadataOutput {
	return i.ToRestoreMetadataOutputWithContext(context.Background())
}

func (i RestoreMetadataArgs) ToRestoreMetadataOutputWithContext(ctx context.Context) RestoreMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestoreMetadataOutput)
}

type RestoreMetadataOutput struct{ *pulumi.OutputState }

func (RestoreMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestoreMetadata)(nil)).Elem()
}

func (o RestoreMetadataOutput) ToRestoreMetadataOutput() RestoreMetadataOutput {
	return o
}

func (o RestoreMetadataOutput) ToRestoreMetadataOutputWithContext(ctx context.Context) RestoreMetadataOutput {
	return o
}

// RestoreSpec defines the specification for a Velero restore.
type RestoreSpec struct {
	// BackupName is the unique name of the Velero backup to restore from.
	BackupName string `pulumi:"backupName"`
	// ExcludedNamespaces contains a list of namespaces that are not included in the restore.
	ExcludedNamespaces []string `pulumi:"excludedNamespaces"`
	// ExcludedResources is a slice of resource names that are not included in the restore.
	ExcludedResources []string `pulumi:"excludedResources"`
	// IncludeClusterResources specifies whether cluster-scoped resources should be included for consideration in the restore. If null, defaults to true.
	IncludeClusterResources *bool `pulumi:"includeClusterResources"`
	// IncludedNamespaces is a slice of namespace names to include objects from. If empty, all namespaces are included.
	IncludedNamespaces []string `pulumi:"includedNamespaces"`
	// IncludedResources is a slice of resource names to include in the restore. If empty, all resources in the backup are included.
	IncludedResources []string `pulumi:"includedResources"`
	// LabelSelector is a metav1.LabelSelector to filter with when restoring individual objects from the backup. If empty or nil, all objects are included. Optional.
	LabelSelector *RestoreSpecLabelSelector `pulumi:"labelSelector"`
	// NamespaceMapping is a map of source namespace names to target namespace names to restore into. Any source namespaces not included in the map will be restored into namespaces of the same name.
	NamespaceMapping map[string]string `pulumi:"namespaceMapping"`
	// RestorePVs specifies whether to restore all included PVs from snapshot (via the cloudprovider).
	RestorePVs *bool `pulumi:"restorePVs"`
	// ScheduleName is the unique name of the Velero schedule to restore from. If specified, and BackupName is empty, Velero will restore from the most recent successful backup created from this schedule.
	ScheduleName *string `pulumi:"scheduleName"`
}

// RestoreSpecInput is an input type that accepts RestoreSpecArgs and RestoreSpecOutput values.
// You can construct a concrete instance of `RestoreSpecInput` via:
//
//          RestoreSpecArgs{...}
type RestoreSpecInput interface {
	pulumi.Input

	ToRestoreSpecOutput() RestoreSpecOutput
	ToRestoreSpecOutputWithContext(context.Context) RestoreSpecOutput
}

// RestoreSpec defines the specification for a Velero restore.
type RestoreSpecArgs struct {
	// BackupName is the unique name of the Velero backup to restore from.
	BackupName pulumi.StringInput `pulumi:"backupName"`
	// ExcludedNamespaces contains a list of namespaces that are not included in the restore.
	ExcludedNamespaces pulumi.StringArrayInput `pulumi:"excludedNamespaces"`
	// ExcludedResources is a slice of resource names that are not included in the restore.
	ExcludedResources pulumi.StringArrayInput `pulumi:"excludedResources"`
	// IncludeClusterResources specifies whether cluster-scoped resources should be included for consideration in the restore. If null, defaults to true.
	IncludeClusterResources pulumi.BoolPtrInput `pulumi:"includeClusterResources"`
	// IncludedNamespaces is a slice of namespace names to include objects from. If empty, all namespaces are included.
	IncludedNamespaces pulumi.StringArrayInput `pulumi:"includedNamespaces"`
	// IncludedResources is a slice of resource names to include in the restore. If empty, all resources in the backup are included.
	IncludedResources pulumi.StringArrayInput `pulumi:"includedResources"`
	// LabelSelector is a metav1.LabelSelector to filter with when restoring individual objects from the backup. If empty or nil, all objects are included. Optional.
	LabelSelector RestoreSpecLabelSelectorPtrInput `pulumi:"labelSelector"`
	// NamespaceMapping is a map of source namespace names to target namespace names to restore into. Any source namespaces not included in the map will be restored into namespaces of the same name.
	NamespaceMapping pulumi.StringMapInput `pulumi:"namespaceMapping"`
	// RestorePVs specifies whether to restore all included PVs from snapshot (via the cloudprovider).
	RestorePVs pulumi.BoolPtrInput `pulumi:"restorePVs"`
	// ScheduleName is the unique name of the Velero schedule to restore from. If specified, and BackupName is empty, Velero will restore from the most recent successful backup created from this schedule.
	ScheduleName pulumi.StringPtrInput `pulumi:"scheduleName"`
}

func (RestoreSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RestoreSpec)(nil)).Elem()
}

func (i RestoreSpecArgs) ToRestoreSpecOutput() RestoreSpecOutput {
	return i.ToRestoreSpecOutputWithContext(context.Background())
}

func (i RestoreSpecArgs) ToRestoreSpecOutputWithContext(ctx context.Context) RestoreSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestoreSpecOutput)
}

func (i RestoreSpecArgs) ToRestoreSpecPtrOutput() RestoreSpecPtrOutput {
	return i.ToRestoreSpecPtrOutputWithContext(context.Background())
}

func (i RestoreSpecArgs) ToRestoreSpecPtrOutputWithContext(ctx context.Context) RestoreSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestoreSpecOutput).ToRestoreSpecPtrOutputWithContext(ctx)
}

// RestoreSpecPtrInput is an input type that accepts RestoreSpecArgs, RestoreSpecPtr and RestoreSpecPtrOutput values.
// You can construct a concrete instance of `RestoreSpecPtrInput` via:
//
//          RestoreSpecArgs{...}
//
//  or:
//
//          nil
type RestoreSpecPtrInput interface {
	pulumi.Input

	ToRestoreSpecPtrOutput() RestoreSpecPtrOutput
	ToRestoreSpecPtrOutputWithContext(context.Context) RestoreSpecPtrOutput
}

type restoreSpecPtrType RestoreSpecArgs

func RestoreSpecPtr(v *RestoreSpecArgs) RestoreSpecPtrInput {
	return (*restoreSpecPtrType)(v)
}

func (*restoreSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RestoreSpec)(nil)).Elem()
}

func (i *restoreSpecPtrType) ToRestoreSpecPtrOutput() RestoreSpecPtrOutput {
	return i.ToRestoreSpecPtrOutputWithContext(context.Background())
}

func (i *restoreSpecPtrType) ToRestoreSpecPtrOutputWithContext(ctx context.Context) RestoreSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestoreSpecPtrOutput)
}

// RestoreSpec defines the specification for a Velero restore.
type RestoreSpecOutput struct{ *pulumi.OutputState }

func (RestoreSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestoreSpec)(nil)).Elem()
}

func (o RestoreSpecOutput) ToRestoreSpecOutput() RestoreSpecOutput {
	return o
}

func (o RestoreSpecOutput) ToRestoreSpecOutputWithContext(ctx context.Context) RestoreSpecOutput {
	return o
}

func (o RestoreSpecOutput) ToRestoreSpecPtrOutput() RestoreSpecPtrOutput {
	return o.ToRestoreSpecPtrOutputWithContext(context.Background())
}

func (o RestoreSpecOutput) ToRestoreSpecPtrOutputWithContext(ctx context.Context) RestoreSpecPtrOutput {
	return o.ApplyT(func(v RestoreSpec) *RestoreSpec {
		return &v
	}).(RestoreSpecPtrOutput)
}

// BackupName is the unique name of the Velero backup to restore from.
func (o RestoreSpecOutput) BackupName() pulumi.StringOutput {
	return o.ApplyT(func(v RestoreSpec) string { return v.BackupName }).(pulumi.StringOutput)
}

// ExcludedNamespaces contains a list of namespaces that are not included in the restore.
func (o RestoreSpecOutput) ExcludedNamespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RestoreSpec) []string { return v.ExcludedNamespaces }).(pulumi.StringArrayOutput)
}

// ExcludedResources is a slice of resource names that are not included in the restore.
func (o RestoreSpecOutput) ExcludedResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RestoreSpec) []string { return v.ExcludedResources }).(pulumi.StringArrayOutput)
}

// IncludeClusterResources specifies whether cluster-scoped resources should be included for consideration in the restore. If null, defaults to true.
func (o RestoreSpecOutput) IncludeClusterResources() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RestoreSpec) *bool { return v.IncludeClusterResources }).(pulumi.BoolPtrOutput)
}

// IncludedNamespaces is a slice of namespace names to include objects from. If empty, all namespaces are included.
func (o RestoreSpecOutput) IncludedNamespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RestoreSpec) []string { return v.IncludedNamespaces }).(pulumi.StringArrayOutput)
}

// IncludedResources is a slice of resource names to include in the restore. If empty, all resources in the backup are included.
func (o RestoreSpecOutput) IncludedResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RestoreSpec) []string { return v.IncludedResources }).(pulumi.StringArrayOutput)
}

// LabelSelector is a metav1.LabelSelector to filter with when restoring individual objects from the backup. If empty or nil, all objects are included. Optional.
func (o RestoreSpecOutput) LabelSelector() RestoreSpecLabelSelectorPtrOutput {
	return o.ApplyT(func(v RestoreSpec) *RestoreSpecLabelSelector { return v.LabelSelector }).(RestoreSpecLabelSelectorPtrOutput)
}

// NamespaceMapping is a map of source namespace names to target namespace names to restore into. Any source namespaces not included in the map will be restored into namespaces of the same name.
func (o RestoreSpecOutput) NamespaceMapping() pulumi.StringMapOutput {
	return o.ApplyT(func(v RestoreSpec) map[string]string { return v.NamespaceMapping }).(pulumi.StringMapOutput)
}

// RestorePVs specifies whether to restore all included PVs from snapshot (via the cloudprovider).
func (o RestoreSpecOutput) RestorePVs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RestoreSpec) *bool { return v.RestorePVs }).(pulumi.BoolPtrOutput)
}

// ScheduleName is the unique name of the Velero schedule to restore from. If specified, and BackupName is empty, Velero will restore from the most recent successful backup created from this schedule.
func (o RestoreSpecOutput) ScheduleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RestoreSpec) *string { return v.ScheduleName }).(pulumi.StringPtrOutput)
}

type RestoreSpecPtrOutput struct{ *pulumi.OutputState }

func (RestoreSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RestoreSpec)(nil)).Elem()
}

func (o RestoreSpecPtrOutput) ToRestoreSpecPtrOutput() RestoreSpecPtrOutput {
	return o
}

func (o RestoreSpecPtrOutput) ToRestoreSpecPtrOutputWithContext(ctx context.Context) RestoreSpecPtrOutput {
	return o
}

func (o RestoreSpecPtrOutput) Elem() RestoreSpecOutput {
	return o.ApplyT(func(v *RestoreSpec) RestoreSpec { return *v }).(RestoreSpecOutput)
}

// BackupName is the unique name of the Velero backup to restore from.
func (o RestoreSpecPtrOutput) BackupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RestoreSpec) *string {
		if v == nil {
			return nil
		}
		return &v.BackupName
	}).(pulumi.StringPtrOutput)
}

// ExcludedNamespaces contains a list of namespaces that are not included in the restore.
func (o RestoreSpecPtrOutput) ExcludedNamespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RestoreSpec) []string {
		if v == nil {
			return nil
		}
		return v.ExcludedNamespaces
	}).(pulumi.StringArrayOutput)
}

// ExcludedResources is a slice of resource names that are not included in the restore.
func (o RestoreSpecPtrOutput) ExcludedResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RestoreSpec) []string {
		if v == nil {
			return nil
		}
		return v.ExcludedResources
	}).(pulumi.StringArrayOutput)
}

// IncludeClusterResources specifies whether cluster-scoped resources should be included for consideration in the restore. If null, defaults to true.
func (o RestoreSpecPtrOutput) IncludeClusterResources() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RestoreSpec) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeClusterResources
	}).(pulumi.BoolPtrOutput)
}

// IncludedNamespaces is a slice of namespace names to include objects from. If empty, all namespaces are included.
func (o RestoreSpecPtrOutput) IncludedNamespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RestoreSpec) []string {
		if v == nil {
			return nil
		}
		return v.IncludedNamespaces
	}).(pulumi.StringArrayOutput)
}

// IncludedResources is a slice of resource names to include in the restore. If empty, all resources in the backup are included.
func (o RestoreSpecPtrOutput) IncludedResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RestoreSpec) []string {
		if v == nil {
			return nil
		}
		return v.IncludedResources
	}).(pulumi.StringArrayOutput)
}

// LabelSelector is a metav1.LabelSelector to filter with when restoring individual objects from the backup. If empty or nil, all objects are included. Optional.
func (o RestoreSpecPtrOutput) LabelSelector() RestoreSpecLabelSelectorPtrOutput {
	return o.ApplyT(func(v *RestoreSpec) *RestoreSpecLabelSelector {
		if v == nil {
			return nil
		}
		return v.LabelSelector
	}).(RestoreSpecLabelSelectorPtrOutput)
}

// NamespaceMapping is a map of source namespace names to target namespace names to restore into. Any source namespaces not included in the map will be restored into namespaces of the same name.
func (o RestoreSpecPtrOutput) NamespaceMapping() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RestoreSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.NamespaceMapping
	}).(pulumi.StringMapOutput)
}

// RestorePVs specifies whether to restore all included PVs from snapshot (via the cloudprovider).
func (o RestoreSpecPtrOutput) RestorePVs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RestoreSpec) *bool {
		if v == nil {
			return nil
		}
		return v.RestorePVs
	}).(pulumi.BoolPtrOutput)
}

// ScheduleName is the unique name of the Velero schedule to restore from. If specified, and BackupName is empty, Velero will restore from the most recent successful backup created from this schedule.
func (o RestoreSpecPtrOutput) ScheduleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RestoreSpec) *string {
		if v == nil {
			return nil
		}
		return v.ScheduleName
	}).(pulumi.StringPtrOutput)
}

// LabelSelector is a metav1.LabelSelector to filter with when restoring individual objects from the backup. If empty or nil, all objects are included. Optional.
type RestoreSpecLabelSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []RestoreSpecLabelSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// RestoreSpecLabelSelectorInput is an input type that accepts RestoreSpecLabelSelectorArgs and RestoreSpecLabelSelectorOutput values.
// You can construct a concrete instance of `RestoreSpecLabelSelectorInput` via:
//
//          RestoreSpecLabelSelectorArgs{...}
type RestoreSpecLabelSelectorInput interface {
	pulumi.Input

	ToRestoreSpecLabelSelectorOutput() RestoreSpecLabelSelectorOutput
	ToRestoreSpecLabelSelectorOutputWithContext(context.Context) RestoreSpecLabelSelectorOutput
}

// LabelSelector is a metav1.LabelSelector to filter with when restoring individual objects from the backup. If empty or nil, all objects are included. Optional.
type RestoreSpecLabelSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions RestoreSpecLabelSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (RestoreSpecLabelSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RestoreSpecLabelSelector)(nil)).Elem()
}

func (i RestoreSpecLabelSelectorArgs) ToRestoreSpecLabelSelectorOutput() RestoreSpecLabelSelectorOutput {
	return i.ToRestoreSpecLabelSelectorOutputWithContext(context.Background())
}

func (i RestoreSpecLabelSelectorArgs) ToRestoreSpecLabelSelectorOutputWithContext(ctx context.Context) RestoreSpecLabelSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestoreSpecLabelSelectorOutput)
}

func (i RestoreSpecLabelSelectorArgs) ToRestoreSpecLabelSelectorPtrOutput() RestoreSpecLabelSelectorPtrOutput {
	return i.ToRestoreSpecLabelSelectorPtrOutputWithContext(context.Background())
}

func (i RestoreSpecLabelSelectorArgs) ToRestoreSpecLabelSelectorPtrOutputWithContext(ctx context.Context) RestoreSpecLabelSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestoreSpecLabelSelectorOutput).ToRestoreSpecLabelSelectorPtrOutputWithContext(ctx)
}

// RestoreSpecLabelSelectorPtrInput is an input type that accepts RestoreSpecLabelSelectorArgs, RestoreSpecLabelSelectorPtr and RestoreSpecLabelSelectorPtrOutput values.
// You can construct a concrete instance of `RestoreSpecLabelSelectorPtrInput` via:
//
//          RestoreSpecLabelSelectorArgs{...}
//
//  or:
//
//          nil
type RestoreSpecLabelSelectorPtrInput interface {
	pulumi.Input

	ToRestoreSpecLabelSelectorPtrOutput() RestoreSpecLabelSelectorPtrOutput
	ToRestoreSpecLabelSelectorPtrOutputWithContext(context.Context) RestoreSpecLabelSelectorPtrOutput
}

type restoreSpecLabelSelectorPtrType RestoreSpecLabelSelectorArgs

func RestoreSpecLabelSelectorPtr(v *RestoreSpecLabelSelectorArgs) RestoreSpecLabelSelectorPtrInput {
	return (*restoreSpecLabelSelectorPtrType)(v)
}

func (*restoreSpecLabelSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RestoreSpecLabelSelector)(nil)).Elem()
}

func (i *restoreSpecLabelSelectorPtrType) ToRestoreSpecLabelSelectorPtrOutput() RestoreSpecLabelSelectorPtrOutput {
	return i.ToRestoreSpecLabelSelectorPtrOutputWithContext(context.Background())
}

func (i *restoreSpecLabelSelectorPtrType) ToRestoreSpecLabelSelectorPtrOutputWithContext(ctx context.Context) RestoreSpecLabelSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestoreSpecLabelSelectorPtrOutput)
}

// LabelSelector is a metav1.LabelSelector to filter with when restoring individual objects from the backup. If empty or nil, all objects are included. Optional.
type RestoreSpecLabelSelectorOutput struct{ *pulumi.OutputState }

func (RestoreSpecLabelSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestoreSpecLabelSelector)(nil)).Elem()
}

func (o RestoreSpecLabelSelectorOutput) ToRestoreSpecLabelSelectorOutput() RestoreSpecLabelSelectorOutput {
	return o
}

func (o RestoreSpecLabelSelectorOutput) ToRestoreSpecLabelSelectorOutputWithContext(ctx context.Context) RestoreSpecLabelSelectorOutput {
	return o
}

func (o RestoreSpecLabelSelectorOutput) ToRestoreSpecLabelSelectorPtrOutput() RestoreSpecLabelSelectorPtrOutput {
	return o.ToRestoreSpecLabelSelectorPtrOutputWithContext(context.Background())
}

func (o RestoreSpecLabelSelectorOutput) ToRestoreSpecLabelSelectorPtrOutputWithContext(ctx context.Context) RestoreSpecLabelSelectorPtrOutput {
	return o.ApplyT(func(v RestoreSpecLabelSelector) *RestoreSpecLabelSelector {
		return &v
	}).(RestoreSpecLabelSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o RestoreSpecLabelSelectorOutput) MatchExpressions() RestoreSpecLabelSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v RestoreSpecLabelSelector) []RestoreSpecLabelSelectorMatchExpressions { return v.MatchExpressions }).(RestoreSpecLabelSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o RestoreSpecLabelSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v RestoreSpecLabelSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type RestoreSpecLabelSelectorPtrOutput struct{ *pulumi.OutputState }

func (RestoreSpecLabelSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RestoreSpecLabelSelector)(nil)).Elem()
}

func (o RestoreSpecLabelSelectorPtrOutput) ToRestoreSpecLabelSelectorPtrOutput() RestoreSpecLabelSelectorPtrOutput {
	return o
}

func (o RestoreSpecLabelSelectorPtrOutput) ToRestoreSpecLabelSelectorPtrOutputWithContext(ctx context.Context) RestoreSpecLabelSelectorPtrOutput {
	return o
}

func (o RestoreSpecLabelSelectorPtrOutput) Elem() RestoreSpecLabelSelectorOutput {
	return o.ApplyT(func(v *RestoreSpecLabelSelector) RestoreSpecLabelSelector { return *v }).(RestoreSpecLabelSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o RestoreSpecLabelSelectorPtrOutput) MatchExpressions() RestoreSpecLabelSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *RestoreSpecLabelSelector) []RestoreSpecLabelSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(RestoreSpecLabelSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o RestoreSpecLabelSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RestoreSpecLabelSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RestoreSpecLabelSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// RestoreSpecLabelSelectorMatchExpressionsInput is an input type that accepts RestoreSpecLabelSelectorMatchExpressionsArgs and RestoreSpecLabelSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `RestoreSpecLabelSelectorMatchExpressionsInput` via:
//
//          RestoreSpecLabelSelectorMatchExpressionsArgs{...}
type RestoreSpecLabelSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToRestoreSpecLabelSelectorMatchExpressionsOutput() RestoreSpecLabelSelectorMatchExpressionsOutput
	ToRestoreSpecLabelSelectorMatchExpressionsOutputWithContext(context.Context) RestoreSpecLabelSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RestoreSpecLabelSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (RestoreSpecLabelSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RestoreSpecLabelSelectorMatchExpressions)(nil)).Elem()
}

func (i RestoreSpecLabelSelectorMatchExpressionsArgs) ToRestoreSpecLabelSelectorMatchExpressionsOutput() RestoreSpecLabelSelectorMatchExpressionsOutput {
	return i.ToRestoreSpecLabelSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i RestoreSpecLabelSelectorMatchExpressionsArgs) ToRestoreSpecLabelSelectorMatchExpressionsOutputWithContext(ctx context.Context) RestoreSpecLabelSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestoreSpecLabelSelectorMatchExpressionsOutput)
}

// RestoreSpecLabelSelectorMatchExpressionsArrayInput is an input type that accepts RestoreSpecLabelSelectorMatchExpressionsArray and RestoreSpecLabelSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `RestoreSpecLabelSelectorMatchExpressionsArrayInput` via:
//
//          RestoreSpecLabelSelectorMatchExpressionsArray{ RestoreSpecLabelSelectorMatchExpressionsArgs{...} }
type RestoreSpecLabelSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToRestoreSpecLabelSelectorMatchExpressionsArrayOutput() RestoreSpecLabelSelectorMatchExpressionsArrayOutput
	ToRestoreSpecLabelSelectorMatchExpressionsArrayOutputWithContext(context.Context) RestoreSpecLabelSelectorMatchExpressionsArrayOutput
}

type RestoreSpecLabelSelectorMatchExpressionsArray []RestoreSpecLabelSelectorMatchExpressionsInput

func (RestoreSpecLabelSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RestoreSpecLabelSelectorMatchExpressions)(nil)).Elem()
}

func (i RestoreSpecLabelSelectorMatchExpressionsArray) ToRestoreSpecLabelSelectorMatchExpressionsArrayOutput() RestoreSpecLabelSelectorMatchExpressionsArrayOutput {
	return i.ToRestoreSpecLabelSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i RestoreSpecLabelSelectorMatchExpressionsArray) ToRestoreSpecLabelSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) RestoreSpecLabelSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestoreSpecLabelSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type RestoreSpecLabelSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (RestoreSpecLabelSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestoreSpecLabelSelectorMatchExpressions)(nil)).Elem()
}

func (o RestoreSpecLabelSelectorMatchExpressionsOutput) ToRestoreSpecLabelSelectorMatchExpressionsOutput() RestoreSpecLabelSelectorMatchExpressionsOutput {
	return o
}

func (o RestoreSpecLabelSelectorMatchExpressionsOutput) ToRestoreSpecLabelSelectorMatchExpressionsOutputWithContext(ctx context.Context) RestoreSpecLabelSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o RestoreSpecLabelSelectorMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RestoreSpecLabelSelectorMatchExpressions) string { return v.Key }).(pulumi.StringOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o RestoreSpecLabelSelectorMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v RestoreSpecLabelSelectorMatchExpressions) string { return v.Operator }).(pulumi.StringOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o RestoreSpecLabelSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RestoreSpecLabelSelectorMatchExpressions) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type RestoreSpecLabelSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (RestoreSpecLabelSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RestoreSpecLabelSelectorMatchExpressions)(nil)).Elem()
}

func (o RestoreSpecLabelSelectorMatchExpressionsArrayOutput) ToRestoreSpecLabelSelectorMatchExpressionsArrayOutput() RestoreSpecLabelSelectorMatchExpressionsArrayOutput {
	return o
}

func (o RestoreSpecLabelSelectorMatchExpressionsArrayOutput) ToRestoreSpecLabelSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) RestoreSpecLabelSelectorMatchExpressionsArrayOutput {
	return o
}

func (o RestoreSpecLabelSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) RestoreSpecLabelSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RestoreSpecLabelSelectorMatchExpressions {
		return vs[0].([]RestoreSpecLabelSelectorMatchExpressions)[vs[1].(int)]
	}).(RestoreSpecLabelSelectorMatchExpressionsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type RestoreSpecLabelSelectorMatchLabels struct {
}

// RestoreSpecLabelSelectorMatchLabelsInput is an input type that accepts RestoreSpecLabelSelectorMatchLabelsArgs and RestoreSpecLabelSelectorMatchLabelsOutput values.
// You can construct a concrete instance of `RestoreSpecLabelSelectorMatchLabelsInput` via:
//
//          RestoreSpecLabelSelectorMatchLabelsArgs{...}
type RestoreSpecLabelSelectorMatchLabelsInput interface {
	pulumi.Input

	ToRestoreSpecLabelSelectorMatchLabelsOutput() RestoreSpecLabelSelectorMatchLabelsOutput
	ToRestoreSpecLabelSelectorMatchLabelsOutputWithContext(context.Context) RestoreSpecLabelSelectorMatchLabelsOutput
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type RestoreSpecLabelSelectorMatchLabelsArgs struct {
}

func (RestoreSpecLabelSelectorMatchLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RestoreSpecLabelSelectorMatchLabels)(nil)).Elem()
}

func (i RestoreSpecLabelSelectorMatchLabelsArgs) ToRestoreSpecLabelSelectorMatchLabelsOutput() RestoreSpecLabelSelectorMatchLabelsOutput {
	return i.ToRestoreSpecLabelSelectorMatchLabelsOutputWithContext(context.Background())
}

func (i RestoreSpecLabelSelectorMatchLabelsArgs) ToRestoreSpecLabelSelectorMatchLabelsOutputWithContext(ctx context.Context) RestoreSpecLabelSelectorMatchLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestoreSpecLabelSelectorMatchLabelsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type RestoreSpecLabelSelectorMatchLabelsOutput struct{ *pulumi.OutputState }

func (RestoreSpecLabelSelectorMatchLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestoreSpecLabelSelectorMatchLabels)(nil)).Elem()
}

func (o RestoreSpecLabelSelectorMatchLabelsOutput) ToRestoreSpecLabelSelectorMatchLabelsOutput() RestoreSpecLabelSelectorMatchLabelsOutput {
	return o
}

func (o RestoreSpecLabelSelectorMatchLabelsOutput) ToRestoreSpecLabelSelectorMatchLabelsOutputWithContext(ctx context.Context) RestoreSpecLabelSelectorMatchLabelsOutput {
	return o
}

// NamespaceMapping is a map of source namespace names to target namespace names to restore into. Any source namespaces not included in the map will be restored into namespaces of the same name.
type RestoreSpecNamespaceMapping struct {
}

// RestoreSpecNamespaceMappingInput is an input type that accepts RestoreSpecNamespaceMappingArgs and RestoreSpecNamespaceMappingOutput values.
// You can construct a concrete instance of `RestoreSpecNamespaceMappingInput` via:
//
//          RestoreSpecNamespaceMappingArgs{...}
type RestoreSpecNamespaceMappingInput interface {
	pulumi.Input

	ToRestoreSpecNamespaceMappingOutput() RestoreSpecNamespaceMappingOutput
	ToRestoreSpecNamespaceMappingOutputWithContext(context.Context) RestoreSpecNamespaceMappingOutput
}

// NamespaceMapping is a map of source namespace names to target namespace names to restore into. Any source namespaces not included in the map will be restored into namespaces of the same name.
type RestoreSpecNamespaceMappingArgs struct {
}

func (RestoreSpecNamespaceMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RestoreSpecNamespaceMapping)(nil)).Elem()
}

func (i RestoreSpecNamespaceMappingArgs) ToRestoreSpecNamespaceMappingOutput() RestoreSpecNamespaceMappingOutput {
	return i.ToRestoreSpecNamespaceMappingOutputWithContext(context.Background())
}

func (i RestoreSpecNamespaceMappingArgs) ToRestoreSpecNamespaceMappingOutputWithContext(ctx context.Context) RestoreSpecNamespaceMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestoreSpecNamespaceMappingOutput)
}

// NamespaceMapping is a map of source namespace names to target namespace names to restore into. Any source namespaces not included in the map will be restored into namespaces of the same name.
type RestoreSpecNamespaceMappingOutput struct{ *pulumi.OutputState }

func (RestoreSpecNamespaceMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestoreSpecNamespaceMapping)(nil)).Elem()
}

func (o RestoreSpecNamespaceMappingOutput) ToRestoreSpecNamespaceMappingOutput() RestoreSpecNamespaceMappingOutput {
	return o
}

func (o RestoreSpecNamespaceMappingOutput) ToRestoreSpecNamespaceMappingOutputWithContext(ctx context.Context) RestoreSpecNamespaceMappingOutput {
	return o
}

// RestoreStatus captures the current status of a Velero restore
type RestoreStatus struct {
	// Errors is a count of all error messages that were generated during execution of the restore. The actual errors are stored in object storage.
	Errors *int `pulumi:"errors"`
	// FailureReason is an error that caused the entire restore to fail.
	FailureReason *string `pulumi:"failureReason"`
	// Phase is the current state of the Restore
	Phase *string `pulumi:"phase"`
	// PodVolumeRestoreErrors is a slice of all PodVolumeRestores with errors (errors encountered by restic when restoring a pod) (if applicable)
	PodVolumeRestoreErrors []RestoreStatusPodVolumeRestoreErrors `pulumi:"podVolumeRestoreErrors"`
	// PodVolumeRestoreVerifyErrors is a slice of all PodVolumeRestore errors from restore verification (errors encountered by restic when verifying a pod restore) (if applicable)
	PodVolumeRestoreVerifyErrors []RestoreStatusPodVolumeRestoreVerifyErrors `pulumi:"podVolumeRestoreVerifyErrors"`
	// ValidationErrors is a slice of all validation errors (if applicable)
	ValidationErrors []string `pulumi:"validationErrors"`
	// Warnings is a count of all warning messages that were generated during execution of the restore. The actual warnings are stored in object storage.
	Warnings *int `pulumi:"warnings"`
}

// RestoreStatusInput is an input type that accepts RestoreStatusArgs and RestoreStatusOutput values.
// You can construct a concrete instance of `RestoreStatusInput` via:
//
//          RestoreStatusArgs{...}
type RestoreStatusInput interface {
	pulumi.Input

	ToRestoreStatusOutput() RestoreStatusOutput
	ToRestoreStatusOutputWithContext(context.Context) RestoreStatusOutput
}

// RestoreStatus captures the current status of a Velero restore
type RestoreStatusArgs struct {
	// Errors is a count of all error messages that were generated during execution of the restore. The actual errors are stored in object storage.
	Errors pulumi.IntPtrInput `pulumi:"errors"`
	// FailureReason is an error that caused the entire restore to fail.
	FailureReason pulumi.StringPtrInput `pulumi:"failureReason"`
	// Phase is the current state of the Restore
	Phase pulumi.StringPtrInput `pulumi:"phase"`
	// PodVolumeRestoreErrors is a slice of all PodVolumeRestores with errors (errors encountered by restic when restoring a pod) (if applicable)
	PodVolumeRestoreErrors RestoreStatusPodVolumeRestoreErrorsArrayInput `pulumi:"podVolumeRestoreErrors"`
	// PodVolumeRestoreVerifyErrors is a slice of all PodVolumeRestore errors from restore verification (errors encountered by restic when verifying a pod restore) (if applicable)
	PodVolumeRestoreVerifyErrors RestoreStatusPodVolumeRestoreVerifyErrorsArrayInput `pulumi:"podVolumeRestoreVerifyErrors"`
	// ValidationErrors is a slice of all validation errors (if applicable)
	ValidationErrors pulumi.StringArrayInput `pulumi:"validationErrors"`
	// Warnings is a count of all warning messages that were generated during execution of the restore. The actual warnings are stored in object storage.
	Warnings pulumi.IntPtrInput `pulumi:"warnings"`
}

func (RestoreStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RestoreStatus)(nil)).Elem()
}

func (i RestoreStatusArgs) ToRestoreStatusOutput() RestoreStatusOutput {
	return i.ToRestoreStatusOutputWithContext(context.Background())
}

func (i RestoreStatusArgs) ToRestoreStatusOutputWithContext(ctx context.Context) RestoreStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestoreStatusOutput)
}

func (i RestoreStatusArgs) ToRestoreStatusPtrOutput() RestoreStatusPtrOutput {
	return i.ToRestoreStatusPtrOutputWithContext(context.Background())
}

func (i RestoreStatusArgs) ToRestoreStatusPtrOutputWithContext(ctx context.Context) RestoreStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestoreStatusOutput).ToRestoreStatusPtrOutputWithContext(ctx)
}

// RestoreStatusPtrInput is an input type that accepts RestoreStatusArgs, RestoreStatusPtr and RestoreStatusPtrOutput values.
// You can construct a concrete instance of `RestoreStatusPtrInput` via:
//
//          RestoreStatusArgs{...}
//
//  or:
//
//          nil
type RestoreStatusPtrInput interface {
	pulumi.Input

	ToRestoreStatusPtrOutput() RestoreStatusPtrOutput
	ToRestoreStatusPtrOutputWithContext(context.Context) RestoreStatusPtrOutput
}

type restoreStatusPtrType RestoreStatusArgs

func RestoreStatusPtr(v *RestoreStatusArgs) RestoreStatusPtrInput {
	return (*restoreStatusPtrType)(v)
}

func (*restoreStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RestoreStatus)(nil)).Elem()
}

func (i *restoreStatusPtrType) ToRestoreStatusPtrOutput() RestoreStatusPtrOutput {
	return i.ToRestoreStatusPtrOutputWithContext(context.Background())
}

func (i *restoreStatusPtrType) ToRestoreStatusPtrOutputWithContext(ctx context.Context) RestoreStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestoreStatusPtrOutput)
}

// RestoreStatus captures the current status of a Velero restore
type RestoreStatusOutput struct{ *pulumi.OutputState }

func (RestoreStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestoreStatus)(nil)).Elem()
}

func (o RestoreStatusOutput) ToRestoreStatusOutput() RestoreStatusOutput {
	return o
}

func (o RestoreStatusOutput) ToRestoreStatusOutputWithContext(ctx context.Context) RestoreStatusOutput {
	return o
}

func (o RestoreStatusOutput) ToRestoreStatusPtrOutput() RestoreStatusPtrOutput {
	return o.ToRestoreStatusPtrOutputWithContext(context.Background())
}

func (o RestoreStatusOutput) ToRestoreStatusPtrOutputWithContext(ctx context.Context) RestoreStatusPtrOutput {
	return o.ApplyT(func(v RestoreStatus) *RestoreStatus {
		return &v
	}).(RestoreStatusPtrOutput)
}

// Errors is a count of all error messages that were generated during execution of the restore. The actual errors are stored in object storage.
func (o RestoreStatusOutput) Errors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RestoreStatus) *int { return v.Errors }).(pulumi.IntPtrOutput)
}

// FailureReason is an error that caused the entire restore to fail.
func (o RestoreStatusOutput) FailureReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RestoreStatus) *string { return v.FailureReason }).(pulumi.StringPtrOutput)
}

// Phase is the current state of the Restore
func (o RestoreStatusOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RestoreStatus) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

// PodVolumeRestoreErrors is a slice of all PodVolumeRestores with errors (errors encountered by restic when restoring a pod) (if applicable)
func (o RestoreStatusOutput) PodVolumeRestoreErrors() RestoreStatusPodVolumeRestoreErrorsArrayOutput {
	return o.ApplyT(func(v RestoreStatus) []RestoreStatusPodVolumeRestoreErrors { return v.PodVolumeRestoreErrors }).(RestoreStatusPodVolumeRestoreErrorsArrayOutput)
}

// PodVolumeRestoreVerifyErrors is a slice of all PodVolumeRestore errors from restore verification (errors encountered by restic when verifying a pod restore) (if applicable)
func (o RestoreStatusOutput) PodVolumeRestoreVerifyErrors() RestoreStatusPodVolumeRestoreVerifyErrorsArrayOutput {
	return o.ApplyT(func(v RestoreStatus) []RestoreStatusPodVolumeRestoreVerifyErrors {
		return v.PodVolumeRestoreVerifyErrors
	}).(RestoreStatusPodVolumeRestoreVerifyErrorsArrayOutput)
}

// ValidationErrors is a slice of all validation errors (if applicable)
func (o RestoreStatusOutput) ValidationErrors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RestoreStatus) []string { return v.ValidationErrors }).(pulumi.StringArrayOutput)
}

// Warnings is a count of all warning messages that were generated during execution of the restore. The actual warnings are stored in object storage.
func (o RestoreStatusOutput) Warnings() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RestoreStatus) *int { return v.Warnings }).(pulumi.IntPtrOutput)
}

type RestoreStatusPtrOutput struct{ *pulumi.OutputState }

func (RestoreStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RestoreStatus)(nil)).Elem()
}

func (o RestoreStatusPtrOutput) ToRestoreStatusPtrOutput() RestoreStatusPtrOutput {
	return o
}

func (o RestoreStatusPtrOutput) ToRestoreStatusPtrOutputWithContext(ctx context.Context) RestoreStatusPtrOutput {
	return o
}

func (o RestoreStatusPtrOutput) Elem() RestoreStatusOutput {
	return o.ApplyT(func(v *RestoreStatus) RestoreStatus { return *v }).(RestoreStatusOutput)
}

// Errors is a count of all error messages that were generated during execution of the restore. The actual errors are stored in object storage.
func (o RestoreStatusPtrOutput) Errors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RestoreStatus) *int {
		if v == nil {
			return nil
		}
		return v.Errors
	}).(pulumi.IntPtrOutput)
}

// FailureReason is an error that caused the entire restore to fail.
func (o RestoreStatusPtrOutput) FailureReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RestoreStatus) *string {
		if v == nil {
			return nil
		}
		return v.FailureReason
	}).(pulumi.StringPtrOutput)
}

// Phase is the current state of the Restore
func (o RestoreStatusPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RestoreStatus) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

// PodVolumeRestoreErrors is a slice of all PodVolumeRestores with errors (errors encountered by restic when restoring a pod) (if applicable)
func (o RestoreStatusPtrOutput) PodVolumeRestoreErrors() RestoreStatusPodVolumeRestoreErrorsArrayOutput {
	return o.ApplyT(func(v *RestoreStatus) []RestoreStatusPodVolumeRestoreErrors {
		if v == nil {
			return nil
		}
		return v.PodVolumeRestoreErrors
	}).(RestoreStatusPodVolumeRestoreErrorsArrayOutput)
}

// PodVolumeRestoreVerifyErrors is a slice of all PodVolumeRestore errors from restore verification (errors encountered by restic when verifying a pod restore) (if applicable)
func (o RestoreStatusPtrOutput) PodVolumeRestoreVerifyErrors() RestoreStatusPodVolumeRestoreVerifyErrorsArrayOutput {
	return o.ApplyT(func(v *RestoreStatus) []RestoreStatusPodVolumeRestoreVerifyErrors {
		if v == nil {
			return nil
		}
		return v.PodVolumeRestoreVerifyErrors
	}).(RestoreStatusPodVolumeRestoreVerifyErrorsArrayOutput)
}

// ValidationErrors is a slice of all validation errors (if applicable)
func (o RestoreStatusPtrOutput) ValidationErrors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RestoreStatus) []string {
		if v == nil {
			return nil
		}
		return v.ValidationErrors
	}).(pulumi.StringArrayOutput)
}

// Warnings is a count of all warning messages that were generated during execution of the restore. The actual warnings are stored in object storage.
func (o RestoreStatusPtrOutput) Warnings() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RestoreStatus) *int {
		if v == nil {
			return nil
		}
		return v.Warnings
	}).(pulumi.IntPtrOutput)
}

// ObjectReference contains enough information to let you inspect or modify the referred object.
type RestoreStatusPodVolumeRestoreErrors struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath *string `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`
}

// RestoreStatusPodVolumeRestoreErrorsInput is an input type that accepts RestoreStatusPodVolumeRestoreErrorsArgs and RestoreStatusPodVolumeRestoreErrorsOutput values.
// You can construct a concrete instance of `RestoreStatusPodVolumeRestoreErrorsInput` via:
//
//          RestoreStatusPodVolumeRestoreErrorsArgs{...}
type RestoreStatusPodVolumeRestoreErrorsInput interface {
	pulumi.Input

	ToRestoreStatusPodVolumeRestoreErrorsOutput() RestoreStatusPodVolumeRestoreErrorsOutput
	ToRestoreStatusPodVolumeRestoreErrorsOutputWithContext(context.Context) RestoreStatusPodVolumeRestoreErrorsOutput
}

// ObjectReference contains enough information to let you inspect or modify the referred object.
type RestoreStatusPodVolumeRestoreErrorsArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (RestoreStatusPodVolumeRestoreErrorsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RestoreStatusPodVolumeRestoreErrors)(nil)).Elem()
}

func (i RestoreStatusPodVolumeRestoreErrorsArgs) ToRestoreStatusPodVolumeRestoreErrorsOutput() RestoreStatusPodVolumeRestoreErrorsOutput {
	return i.ToRestoreStatusPodVolumeRestoreErrorsOutputWithContext(context.Background())
}

func (i RestoreStatusPodVolumeRestoreErrorsArgs) ToRestoreStatusPodVolumeRestoreErrorsOutputWithContext(ctx context.Context) RestoreStatusPodVolumeRestoreErrorsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestoreStatusPodVolumeRestoreErrorsOutput)
}

// RestoreStatusPodVolumeRestoreErrorsArrayInput is an input type that accepts RestoreStatusPodVolumeRestoreErrorsArray and RestoreStatusPodVolumeRestoreErrorsArrayOutput values.
// You can construct a concrete instance of `RestoreStatusPodVolumeRestoreErrorsArrayInput` via:
//
//          RestoreStatusPodVolumeRestoreErrorsArray{ RestoreStatusPodVolumeRestoreErrorsArgs{...} }
type RestoreStatusPodVolumeRestoreErrorsArrayInput interface {
	pulumi.Input

	ToRestoreStatusPodVolumeRestoreErrorsArrayOutput() RestoreStatusPodVolumeRestoreErrorsArrayOutput
	ToRestoreStatusPodVolumeRestoreErrorsArrayOutputWithContext(context.Context) RestoreStatusPodVolumeRestoreErrorsArrayOutput
}

type RestoreStatusPodVolumeRestoreErrorsArray []RestoreStatusPodVolumeRestoreErrorsInput

func (RestoreStatusPodVolumeRestoreErrorsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RestoreStatusPodVolumeRestoreErrors)(nil)).Elem()
}

func (i RestoreStatusPodVolumeRestoreErrorsArray) ToRestoreStatusPodVolumeRestoreErrorsArrayOutput() RestoreStatusPodVolumeRestoreErrorsArrayOutput {
	return i.ToRestoreStatusPodVolumeRestoreErrorsArrayOutputWithContext(context.Background())
}

func (i RestoreStatusPodVolumeRestoreErrorsArray) ToRestoreStatusPodVolumeRestoreErrorsArrayOutputWithContext(ctx context.Context) RestoreStatusPodVolumeRestoreErrorsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestoreStatusPodVolumeRestoreErrorsArrayOutput)
}

// ObjectReference contains enough information to let you inspect or modify the referred object.
type RestoreStatusPodVolumeRestoreErrorsOutput struct{ *pulumi.OutputState }

func (RestoreStatusPodVolumeRestoreErrorsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestoreStatusPodVolumeRestoreErrors)(nil)).Elem()
}

func (o RestoreStatusPodVolumeRestoreErrorsOutput) ToRestoreStatusPodVolumeRestoreErrorsOutput() RestoreStatusPodVolumeRestoreErrorsOutput {
	return o
}

func (o RestoreStatusPodVolumeRestoreErrorsOutput) ToRestoreStatusPodVolumeRestoreErrorsOutputWithContext(ctx context.Context) RestoreStatusPodVolumeRestoreErrorsOutput {
	return o
}

// API version of the referent.
func (o RestoreStatusPodVolumeRestoreErrorsOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RestoreStatusPodVolumeRestoreErrors) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o RestoreStatusPodVolumeRestoreErrorsOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RestoreStatusPodVolumeRestoreErrors) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o RestoreStatusPodVolumeRestoreErrorsOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RestoreStatusPodVolumeRestoreErrors) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o RestoreStatusPodVolumeRestoreErrorsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RestoreStatusPodVolumeRestoreErrors) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o RestoreStatusPodVolumeRestoreErrorsOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RestoreStatusPodVolumeRestoreErrors) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o RestoreStatusPodVolumeRestoreErrorsOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RestoreStatusPodVolumeRestoreErrors) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o RestoreStatusPodVolumeRestoreErrorsOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RestoreStatusPodVolumeRestoreErrors) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type RestoreStatusPodVolumeRestoreErrorsArrayOutput struct{ *pulumi.OutputState }

func (RestoreStatusPodVolumeRestoreErrorsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RestoreStatusPodVolumeRestoreErrors)(nil)).Elem()
}

func (o RestoreStatusPodVolumeRestoreErrorsArrayOutput) ToRestoreStatusPodVolumeRestoreErrorsArrayOutput() RestoreStatusPodVolumeRestoreErrorsArrayOutput {
	return o
}

func (o RestoreStatusPodVolumeRestoreErrorsArrayOutput) ToRestoreStatusPodVolumeRestoreErrorsArrayOutputWithContext(ctx context.Context) RestoreStatusPodVolumeRestoreErrorsArrayOutput {
	return o
}

func (o RestoreStatusPodVolumeRestoreErrorsArrayOutput) Index(i pulumi.IntInput) RestoreStatusPodVolumeRestoreErrorsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RestoreStatusPodVolumeRestoreErrors {
		return vs[0].([]RestoreStatusPodVolumeRestoreErrors)[vs[1].(int)]
	}).(RestoreStatusPodVolumeRestoreErrorsOutput)
}

// ObjectReference contains enough information to let you inspect or modify the referred object.
type RestoreStatusPodVolumeRestoreVerifyErrors struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath *string `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid *string `pulumi:"uid"`
}

// RestoreStatusPodVolumeRestoreVerifyErrorsInput is an input type that accepts RestoreStatusPodVolumeRestoreVerifyErrorsArgs and RestoreStatusPodVolumeRestoreVerifyErrorsOutput values.
// You can construct a concrete instance of `RestoreStatusPodVolumeRestoreVerifyErrorsInput` via:
//
//          RestoreStatusPodVolumeRestoreVerifyErrorsArgs{...}
type RestoreStatusPodVolumeRestoreVerifyErrorsInput interface {
	pulumi.Input

	ToRestoreStatusPodVolumeRestoreVerifyErrorsOutput() RestoreStatusPodVolumeRestoreVerifyErrorsOutput
	ToRestoreStatusPodVolumeRestoreVerifyErrorsOutputWithContext(context.Context) RestoreStatusPodVolumeRestoreVerifyErrorsOutput
}

// ObjectReference contains enough information to let you inspect or modify the referred object.
type RestoreStatusPodVolumeRestoreVerifyErrorsArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (RestoreStatusPodVolumeRestoreVerifyErrorsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RestoreStatusPodVolumeRestoreVerifyErrors)(nil)).Elem()
}

func (i RestoreStatusPodVolumeRestoreVerifyErrorsArgs) ToRestoreStatusPodVolumeRestoreVerifyErrorsOutput() RestoreStatusPodVolumeRestoreVerifyErrorsOutput {
	return i.ToRestoreStatusPodVolumeRestoreVerifyErrorsOutputWithContext(context.Background())
}

func (i RestoreStatusPodVolumeRestoreVerifyErrorsArgs) ToRestoreStatusPodVolumeRestoreVerifyErrorsOutputWithContext(ctx context.Context) RestoreStatusPodVolumeRestoreVerifyErrorsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestoreStatusPodVolumeRestoreVerifyErrorsOutput)
}

// RestoreStatusPodVolumeRestoreVerifyErrorsArrayInput is an input type that accepts RestoreStatusPodVolumeRestoreVerifyErrorsArray and RestoreStatusPodVolumeRestoreVerifyErrorsArrayOutput values.
// You can construct a concrete instance of `RestoreStatusPodVolumeRestoreVerifyErrorsArrayInput` via:
//
//          RestoreStatusPodVolumeRestoreVerifyErrorsArray{ RestoreStatusPodVolumeRestoreVerifyErrorsArgs{...} }
type RestoreStatusPodVolumeRestoreVerifyErrorsArrayInput interface {
	pulumi.Input

	ToRestoreStatusPodVolumeRestoreVerifyErrorsArrayOutput() RestoreStatusPodVolumeRestoreVerifyErrorsArrayOutput
	ToRestoreStatusPodVolumeRestoreVerifyErrorsArrayOutputWithContext(context.Context) RestoreStatusPodVolumeRestoreVerifyErrorsArrayOutput
}

type RestoreStatusPodVolumeRestoreVerifyErrorsArray []RestoreStatusPodVolumeRestoreVerifyErrorsInput

func (RestoreStatusPodVolumeRestoreVerifyErrorsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RestoreStatusPodVolumeRestoreVerifyErrors)(nil)).Elem()
}

func (i RestoreStatusPodVolumeRestoreVerifyErrorsArray) ToRestoreStatusPodVolumeRestoreVerifyErrorsArrayOutput() RestoreStatusPodVolumeRestoreVerifyErrorsArrayOutput {
	return i.ToRestoreStatusPodVolumeRestoreVerifyErrorsArrayOutputWithContext(context.Background())
}

func (i RestoreStatusPodVolumeRestoreVerifyErrorsArray) ToRestoreStatusPodVolumeRestoreVerifyErrorsArrayOutputWithContext(ctx context.Context) RestoreStatusPodVolumeRestoreVerifyErrorsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestoreStatusPodVolumeRestoreVerifyErrorsArrayOutput)
}

// ObjectReference contains enough information to let you inspect or modify the referred object.
type RestoreStatusPodVolumeRestoreVerifyErrorsOutput struct{ *pulumi.OutputState }

func (RestoreStatusPodVolumeRestoreVerifyErrorsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestoreStatusPodVolumeRestoreVerifyErrors)(nil)).Elem()
}

func (o RestoreStatusPodVolumeRestoreVerifyErrorsOutput) ToRestoreStatusPodVolumeRestoreVerifyErrorsOutput() RestoreStatusPodVolumeRestoreVerifyErrorsOutput {
	return o
}

func (o RestoreStatusPodVolumeRestoreVerifyErrorsOutput) ToRestoreStatusPodVolumeRestoreVerifyErrorsOutputWithContext(ctx context.Context) RestoreStatusPodVolumeRestoreVerifyErrorsOutput {
	return o
}

// API version of the referent.
func (o RestoreStatusPodVolumeRestoreVerifyErrorsOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RestoreStatusPodVolumeRestoreVerifyErrors) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
func (o RestoreStatusPodVolumeRestoreVerifyErrorsOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RestoreStatusPodVolumeRestoreVerifyErrors) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o RestoreStatusPodVolumeRestoreVerifyErrorsOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RestoreStatusPodVolumeRestoreVerifyErrors) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o RestoreStatusPodVolumeRestoreVerifyErrorsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RestoreStatusPodVolumeRestoreVerifyErrors) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o RestoreStatusPodVolumeRestoreVerifyErrorsOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RestoreStatusPodVolumeRestoreVerifyErrors) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o RestoreStatusPodVolumeRestoreVerifyErrorsOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RestoreStatusPodVolumeRestoreVerifyErrors) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
func (o RestoreStatusPodVolumeRestoreVerifyErrorsOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RestoreStatusPodVolumeRestoreVerifyErrors) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type RestoreStatusPodVolumeRestoreVerifyErrorsArrayOutput struct{ *pulumi.OutputState }

func (RestoreStatusPodVolumeRestoreVerifyErrorsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RestoreStatusPodVolumeRestoreVerifyErrors)(nil)).Elem()
}

func (o RestoreStatusPodVolumeRestoreVerifyErrorsArrayOutput) ToRestoreStatusPodVolumeRestoreVerifyErrorsArrayOutput() RestoreStatusPodVolumeRestoreVerifyErrorsArrayOutput {
	return o
}

func (o RestoreStatusPodVolumeRestoreVerifyErrorsArrayOutput) ToRestoreStatusPodVolumeRestoreVerifyErrorsArrayOutputWithContext(ctx context.Context) RestoreStatusPodVolumeRestoreVerifyErrorsArrayOutput {
	return o
}

func (o RestoreStatusPodVolumeRestoreVerifyErrorsArrayOutput) Index(i pulumi.IntInput) RestoreStatusPodVolumeRestoreVerifyErrorsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RestoreStatusPodVolumeRestoreVerifyErrors {
		return vs[0].([]RestoreStatusPodVolumeRestoreVerifyErrors)[vs[1].(int)]
	}).(RestoreStatusPodVolumeRestoreVerifyErrorsOutput)
}

// Schedule is a Velero resource that represents a pre-scheduled or periodic Backup that should be run.
type ScheduleType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// ScheduleSpec defines the specification for a Velero schedule
	Spec *ScheduleSpec `pulumi:"spec"`
	// ScheduleStatus captures the current state of a Velero schedule
	Status *ScheduleStatus `pulumi:"status"`
}

// ScheduleTypeInput is an input type that accepts ScheduleTypeArgs and ScheduleTypeOutput values.
// You can construct a concrete instance of `ScheduleTypeInput` via:
//
//          ScheduleTypeArgs{...}
type ScheduleTypeInput interface {
	pulumi.Input

	ToScheduleTypeOutput() ScheduleTypeOutput
	ToScheduleTypeOutputWithContext(context.Context) ScheduleTypeOutput
}

// Schedule is a Velero resource that represents a pre-scheduled or periodic Backup that should be run.
type ScheduleTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// ScheduleSpec defines the specification for a Velero schedule
	Spec ScheduleSpecPtrInput `pulumi:"spec"`
	// ScheduleStatus captures the current state of a Velero schedule
	Status ScheduleStatusPtrInput `pulumi:"status"`
}

func (ScheduleTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleType)(nil)).Elem()
}

func (i ScheduleTypeArgs) ToScheduleTypeOutput() ScheduleTypeOutput {
	return i.ToScheduleTypeOutputWithContext(context.Background())
}

func (i ScheduleTypeArgs) ToScheduleTypeOutputWithContext(ctx context.Context) ScheduleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleTypeOutput)
}

// Schedule is a Velero resource that represents a pre-scheduled or periodic Backup that should be run.
type ScheduleTypeOutput struct{ *pulumi.OutputState }

func (ScheduleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleType)(nil)).Elem()
}

func (o ScheduleTypeOutput) ToScheduleTypeOutput() ScheduleTypeOutput {
	return o
}

func (o ScheduleTypeOutput) ToScheduleTypeOutputWithContext(ctx context.Context) ScheduleTypeOutput {
	return o
}

func (o ScheduleTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o ScheduleTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o ScheduleTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ScheduleType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// ScheduleSpec defines the specification for a Velero schedule
func (o ScheduleTypeOutput) Spec() ScheduleSpecPtrOutput {
	return o.ApplyT(func(v ScheduleType) *ScheduleSpec { return v.Spec }).(ScheduleSpecPtrOutput)
}

// ScheduleStatus captures the current state of a Velero schedule
func (o ScheduleTypeOutput) Status() ScheduleStatusPtrOutput {
	return o.ApplyT(func(v ScheduleType) *ScheduleStatus { return v.Status }).(ScheduleStatusPtrOutput)
}

type ScheduleMetadata struct {
}

// ScheduleMetadataInput is an input type that accepts ScheduleMetadataArgs and ScheduleMetadataOutput values.
// You can construct a concrete instance of `ScheduleMetadataInput` via:
//
//          ScheduleMetadataArgs{...}
type ScheduleMetadataInput interface {
	pulumi.Input

	ToScheduleMetadataOutput() ScheduleMetadataOutput
	ToScheduleMetadataOutputWithContext(context.Context) ScheduleMetadataOutput
}

type ScheduleMetadataArgs struct {
}

func (ScheduleMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleMetadata)(nil)).Elem()
}

func (i ScheduleMetadataArgs) ToScheduleMetadataOutput() ScheduleMetadataOutput {
	return i.ToScheduleMetadataOutputWithContext(context.Background())
}

func (i ScheduleMetadataArgs) ToScheduleMetadataOutputWithContext(ctx context.Context) ScheduleMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleMetadataOutput)
}

type ScheduleMetadataOutput struct{ *pulumi.OutputState }

func (ScheduleMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleMetadata)(nil)).Elem()
}

func (o ScheduleMetadataOutput) ToScheduleMetadataOutput() ScheduleMetadataOutput {
	return o
}

func (o ScheduleMetadataOutput) ToScheduleMetadataOutputWithContext(ctx context.Context) ScheduleMetadataOutput {
	return o
}

// ScheduleSpec defines the specification for a Velero schedule
type ScheduleSpec struct {
	// Schedule is a Cron expression defining when to run the Backup.
	Schedule string `pulumi:"schedule"`
	// Template is the definition of the Backup to be run on the provided schedule
	Template ScheduleSpecTemplate `pulumi:"template"`
}

// ScheduleSpecInput is an input type that accepts ScheduleSpecArgs and ScheduleSpecOutput values.
// You can construct a concrete instance of `ScheduleSpecInput` via:
//
//          ScheduleSpecArgs{...}
type ScheduleSpecInput interface {
	pulumi.Input

	ToScheduleSpecOutput() ScheduleSpecOutput
	ToScheduleSpecOutputWithContext(context.Context) ScheduleSpecOutput
}

// ScheduleSpec defines the specification for a Velero schedule
type ScheduleSpecArgs struct {
	// Schedule is a Cron expression defining when to run the Backup.
	Schedule pulumi.StringInput `pulumi:"schedule"`
	// Template is the definition of the Backup to be run on the provided schedule
	Template ScheduleSpecTemplateInput `pulumi:"template"`
}

func (ScheduleSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleSpec)(nil)).Elem()
}

func (i ScheduleSpecArgs) ToScheduleSpecOutput() ScheduleSpecOutput {
	return i.ToScheduleSpecOutputWithContext(context.Background())
}

func (i ScheduleSpecArgs) ToScheduleSpecOutputWithContext(ctx context.Context) ScheduleSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleSpecOutput)
}

func (i ScheduleSpecArgs) ToScheduleSpecPtrOutput() ScheduleSpecPtrOutput {
	return i.ToScheduleSpecPtrOutputWithContext(context.Background())
}

func (i ScheduleSpecArgs) ToScheduleSpecPtrOutputWithContext(ctx context.Context) ScheduleSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleSpecOutput).ToScheduleSpecPtrOutputWithContext(ctx)
}

// ScheduleSpecPtrInput is an input type that accepts ScheduleSpecArgs, ScheduleSpecPtr and ScheduleSpecPtrOutput values.
// You can construct a concrete instance of `ScheduleSpecPtrInput` via:
//
//          ScheduleSpecArgs{...}
//
//  or:
//
//          nil
type ScheduleSpecPtrInput interface {
	pulumi.Input

	ToScheduleSpecPtrOutput() ScheduleSpecPtrOutput
	ToScheduleSpecPtrOutputWithContext(context.Context) ScheduleSpecPtrOutput
}

type scheduleSpecPtrType ScheduleSpecArgs

func ScheduleSpecPtr(v *ScheduleSpecArgs) ScheduleSpecPtrInput {
	return (*scheduleSpecPtrType)(v)
}

func (*scheduleSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleSpec)(nil)).Elem()
}

func (i *scheduleSpecPtrType) ToScheduleSpecPtrOutput() ScheduleSpecPtrOutput {
	return i.ToScheduleSpecPtrOutputWithContext(context.Background())
}

func (i *scheduleSpecPtrType) ToScheduleSpecPtrOutputWithContext(ctx context.Context) ScheduleSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleSpecPtrOutput)
}

// ScheduleSpec defines the specification for a Velero schedule
type ScheduleSpecOutput struct{ *pulumi.OutputState }

func (ScheduleSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleSpec)(nil)).Elem()
}

func (o ScheduleSpecOutput) ToScheduleSpecOutput() ScheduleSpecOutput {
	return o
}

func (o ScheduleSpecOutput) ToScheduleSpecOutputWithContext(ctx context.Context) ScheduleSpecOutput {
	return o
}

func (o ScheduleSpecOutput) ToScheduleSpecPtrOutput() ScheduleSpecPtrOutput {
	return o.ToScheduleSpecPtrOutputWithContext(context.Background())
}

func (o ScheduleSpecOutput) ToScheduleSpecPtrOutputWithContext(ctx context.Context) ScheduleSpecPtrOutput {
	return o.ApplyT(func(v ScheduleSpec) *ScheduleSpec {
		return &v
	}).(ScheduleSpecPtrOutput)
}

// Schedule is a Cron expression defining when to run the Backup.
func (o ScheduleSpecOutput) Schedule() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleSpec) string { return v.Schedule }).(pulumi.StringOutput)
}

// Template is the definition of the Backup to be run on the provided schedule
func (o ScheduleSpecOutput) Template() ScheduleSpecTemplateOutput {
	return o.ApplyT(func(v ScheduleSpec) ScheduleSpecTemplate { return v.Template }).(ScheduleSpecTemplateOutput)
}

type ScheduleSpecPtrOutput struct{ *pulumi.OutputState }

func (ScheduleSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleSpec)(nil)).Elem()
}

func (o ScheduleSpecPtrOutput) ToScheduleSpecPtrOutput() ScheduleSpecPtrOutput {
	return o
}

func (o ScheduleSpecPtrOutput) ToScheduleSpecPtrOutputWithContext(ctx context.Context) ScheduleSpecPtrOutput {
	return o
}

func (o ScheduleSpecPtrOutput) Elem() ScheduleSpecOutput {
	return o.ApplyT(func(v *ScheduleSpec) ScheduleSpec { return *v }).(ScheduleSpecOutput)
}

// Schedule is a Cron expression defining when to run the Backup.
func (o ScheduleSpecPtrOutput) Schedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Schedule
	}).(pulumi.StringPtrOutput)
}

// Template is the definition of the Backup to be run on the provided schedule
func (o ScheduleSpecPtrOutput) Template() ScheduleSpecTemplatePtrOutput {
	return o.ApplyT(func(v *ScheduleSpec) *ScheduleSpecTemplate {
		if v == nil {
			return nil
		}
		return &v.Template
	}).(ScheduleSpecTemplatePtrOutput)
}

// Template is the definition of the Backup to be run on the provided schedule
type ScheduleSpecTemplate struct {
	// ExcludedNamespaces contains a list of namespaces that are not included in the backup.
	ExcludedNamespaces []string `pulumi:"excludedNamespaces"`
	// ExcludedResources is a slice of resource names that are not included in the backup.
	ExcludedResources []string `pulumi:"excludedResources"`
	// Hooks represent custom behaviors that should be executed at different phases of the backup.
	Hooks *ScheduleSpecTemplateHooks `pulumi:"hooks"`
	// IncludeClusterResources specifies whether cluster-scoped resources should be included for consideration in the backup.
	IncludeClusterResources *bool `pulumi:"includeClusterResources"`
	// IncludedNamespaces is a slice of namespace names to include objects from. If empty, all namespaces are included.
	IncludedNamespaces []string `pulumi:"includedNamespaces"`
	// IncludedResources is a slice of resource names to include in the backup. If empty, all resources are included.
	IncludedResources []string `pulumi:"includedResources"`
	// LabelSelector is a metav1.LabelSelector to filter with when adding individual objects to the backup. If empty or nil, all objects are included. Optional.
	LabelSelector *ScheduleSpecTemplateLabelSelector `pulumi:"labelSelector"`
	// SnapshotVolumes specifies whether to take cloud snapshots of any PV's referenced in the set of objects included in the Backup.
	SnapshotVolumes *bool `pulumi:"snapshotVolumes"`
	// StorageLocation is a string containing the name of a BackupStorageLocation where the backup should be stored.
	StorageLocation *string `pulumi:"storageLocation"`
	// TTL is a time.Duration-parseable string describing how long the Backup should be retained for.
	Ttl *string `pulumi:"ttl"`
	// VolumeSnapshotLocations is a list containing names of VolumeSnapshotLocations associated with this backup.
	VolumeSnapshotLocations []string `pulumi:"volumeSnapshotLocations"`
}

// ScheduleSpecTemplateInput is an input type that accepts ScheduleSpecTemplateArgs and ScheduleSpecTemplateOutput values.
// You can construct a concrete instance of `ScheduleSpecTemplateInput` via:
//
//          ScheduleSpecTemplateArgs{...}
type ScheduleSpecTemplateInput interface {
	pulumi.Input

	ToScheduleSpecTemplateOutput() ScheduleSpecTemplateOutput
	ToScheduleSpecTemplateOutputWithContext(context.Context) ScheduleSpecTemplateOutput
}

// Template is the definition of the Backup to be run on the provided schedule
type ScheduleSpecTemplateArgs struct {
	// ExcludedNamespaces contains a list of namespaces that are not included in the backup.
	ExcludedNamespaces pulumi.StringArrayInput `pulumi:"excludedNamespaces"`
	// ExcludedResources is a slice of resource names that are not included in the backup.
	ExcludedResources pulumi.StringArrayInput `pulumi:"excludedResources"`
	// Hooks represent custom behaviors that should be executed at different phases of the backup.
	Hooks ScheduleSpecTemplateHooksPtrInput `pulumi:"hooks"`
	// IncludeClusterResources specifies whether cluster-scoped resources should be included for consideration in the backup.
	IncludeClusterResources pulumi.BoolPtrInput `pulumi:"includeClusterResources"`
	// IncludedNamespaces is a slice of namespace names to include objects from. If empty, all namespaces are included.
	IncludedNamespaces pulumi.StringArrayInput `pulumi:"includedNamespaces"`
	// IncludedResources is a slice of resource names to include in the backup. If empty, all resources are included.
	IncludedResources pulumi.StringArrayInput `pulumi:"includedResources"`
	// LabelSelector is a metav1.LabelSelector to filter with when adding individual objects to the backup. If empty or nil, all objects are included. Optional.
	LabelSelector ScheduleSpecTemplateLabelSelectorPtrInput `pulumi:"labelSelector"`
	// SnapshotVolumes specifies whether to take cloud snapshots of any PV's referenced in the set of objects included in the Backup.
	SnapshotVolumes pulumi.BoolPtrInput `pulumi:"snapshotVolumes"`
	// StorageLocation is a string containing the name of a BackupStorageLocation where the backup should be stored.
	StorageLocation pulumi.StringPtrInput `pulumi:"storageLocation"`
	// TTL is a time.Duration-parseable string describing how long the Backup should be retained for.
	Ttl pulumi.StringPtrInput `pulumi:"ttl"`
	// VolumeSnapshotLocations is a list containing names of VolumeSnapshotLocations associated with this backup.
	VolumeSnapshotLocations pulumi.StringArrayInput `pulumi:"volumeSnapshotLocations"`
}

func (ScheduleSpecTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleSpecTemplate)(nil)).Elem()
}

func (i ScheduleSpecTemplateArgs) ToScheduleSpecTemplateOutput() ScheduleSpecTemplateOutput {
	return i.ToScheduleSpecTemplateOutputWithContext(context.Background())
}

func (i ScheduleSpecTemplateArgs) ToScheduleSpecTemplateOutputWithContext(ctx context.Context) ScheduleSpecTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleSpecTemplateOutput)
}

func (i ScheduleSpecTemplateArgs) ToScheduleSpecTemplatePtrOutput() ScheduleSpecTemplatePtrOutput {
	return i.ToScheduleSpecTemplatePtrOutputWithContext(context.Background())
}

func (i ScheduleSpecTemplateArgs) ToScheduleSpecTemplatePtrOutputWithContext(ctx context.Context) ScheduleSpecTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleSpecTemplateOutput).ToScheduleSpecTemplatePtrOutputWithContext(ctx)
}

// ScheduleSpecTemplatePtrInput is an input type that accepts ScheduleSpecTemplateArgs, ScheduleSpecTemplatePtr and ScheduleSpecTemplatePtrOutput values.
// You can construct a concrete instance of `ScheduleSpecTemplatePtrInput` via:
//
//          ScheduleSpecTemplateArgs{...}
//
//  or:
//
//          nil
type ScheduleSpecTemplatePtrInput interface {
	pulumi.Input

	ToScheduleSpecTemplatePtrOutput() ScheduleSpecTemplatePtrOutput
	ToScheduleSpecTemplatePtrOutputWithContext(context.Context) ScheduleSpecTemplatePtrOutput
}

type scheduleSpecTemplatePtrType ScheduleSpecTemplateArgs

func ScheduleSpecTemplatePtr(v *ScheduleSpecTemplateArgs) ScheduleSpecTemplatePtrInput {
	return (*scheduleSpecTemplatePtrType)(v)
}

func (*scheduleSpecTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleSpecTemplate)(nil)).Elem()
}

func (i *scheduleSpecTemplatePtrType) ToScheduleSpecTemplatePtrOutput() ScheduleSpecTemplatePtrOutput {
	return i.ToScheduleSpecTemplatePtrOutputWithContext(context.Background())
}

func (i *scheduleSpecTemplatePtrType) ToScheduleSpecTemplatePtrOutputWithContext(ctx context.Context) ScheduleSpecTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleSpecTemplatePtrOutput)
}

// Template is the definition of the Backup to be run on the provided schedule
type ScheduleSpecTemplateOutput struct{ *pulumi.OutputState }

func (ScheduleSpecTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleSpecTemplate)(nil)).Elem()
}

func (o ScheduleSpecTemplateOutput) ToScheduleSpecTemplateOutput() ScheduleSpecTemplateOutput {
	return o
}

func (o ScheduleSpecTemplateOutput) ToScheduleSpecTemplateOutputWithContext(ctx context.Context) ScheduleSpecTemplateOutput {
	return o
}

func (o ScheduleSpecTemplateOutput) ToScheduleSpecTemplatePtrOutput() ScheduleSpecTemplatePtrOutput {
	return o.ToScheduleSpecTemplatePtrOutputWithContext(context.Background())
}

func (o ScheduleSpecTemplateOutput) ToScheduleSpecTemplatePtrOutputWithContext(ctx context.Context) ScheduleSpecTemplatePtrOutput {
	return o.ApplyT(func(v ScheduleSpecTemplate) *ScheduleSpecTemplate {
		return &v
	}).(ScheduleSpecTemplatePtrOutput)
}

// ExcludedNamespaces contains a list of namespaces that are not included in the backup.
func (o ScheduleSpecTemplateOutput) ExcludedNamespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScheduleSpecTemplate) []string { return v.ExcludedNamespaces }).(pulumi.StringArrayOutput)
}

// ExcludedResources is a slice of resource names that are not included in the backup.
func (o ScheduleSpecTemplateOutput) ExcludedResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScheduleSpecTemplate) []string { return v.ExcludedResources }).(pulumi.StringArrayOutput)
}

// Hooks represent custom behaviors that should be executed at different phases of the backup.
func (o ScheduleSpecTemplateOutput) Hooks() ScheduleSpecTemplateHooksPtrOutput {
	return o.ApplyT(func(v ScheduleSpecTemplate) *ScheduleSpecTemplateHooks { return v.Hooks }).(ScheduleSpecTemplateHooksPtrOutput)
}

// IncludeClusterResources specifies whether cluster-scoped resources should be included for consideration in the backup.
func (o ScheduleSpecTemplateOutput) IncludeClusterResources() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ScheduleSpecTemplate) *bool { return v.IncludeClusterResources }).(pulumi.BoolPtrOutput)
}

// IncludedNamespaces is a slice of namespace names to include objects from. If empty, all namespaces are included.
func (o ScheduleSpecTemplateOutput) IncludedNamespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScheduleSpecTemplate) []string { return v.IncludedNamespaces }).(pulumi.StringArrayOutput)
}

// IncludedResources is a slice of resource names to include in the backup. If empty, all resources are included.
func (o ScheduleSpecTemplateOutput) IncludedResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScheduleSpecTemplate) []string { return v.IncludedResources }).(pulumi.StringArrayOutput)
}

// LabelSelector is a metav1.LabelSelector to filter with when adding individual objects to the backup. If empty or nil, all objects are included. Optional.
func (o ScheduleSpecTemplateOutput) LabelSelector() ScheduleSpecTemplateLabelSelectorPtrOutput {
	return o.ApplyT(func(v ScheduleSpecTemplate) *ScheduleSpecTemplateLabelSelector { return v.LabelSelector }).(ScheduleSpecTemplateLabelSelectorPtrOutput)
}

// SnapshotVolumes specifies whether to take cloud snapshots of any PV's referenced in the set of objects included in the Backup.
func (o ScheduleSpecTemplateOutput) SnapshotVolumes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ScheduleSpecTemplate) *bool { return v.SnapshotVolumes }).(pulumi.BoolPtrOutput)
}

// StorageLocation is a string containing the name of a BackupStorageLocation where the backup should be stored.
func (o ScheduleSpecTemplateOutput) StorageLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleSpecTemplate) *string { return v.StorageLocation }).(pulumi.StringPtrOutput)
}

// TTL is a time.Duration-parseable string describing how long the Backup should be retained for.
func (o ScheduleSpecTemplateOutput) Ttl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleSpecTemplate) *string { return v.Ttl }).(pulumi.StringPtrOutput)
}

// VolumeSnapshotLocations is a list containing names of VolumeSnapshotLocations associated with this backup.
func (o ScheduleSpecTemplateOutput) VolumeSnapshotLocations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScheduleSpecTemplate) []string { return v.VolumeSnapshotLocations }).(pulumi.StringArrayOutput)
}

type ScheduleSpecTemplatePtrOutput struct{ *pulumi.OutputState }

func (ScheduleSpecTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleSpecTemplate)(nil)).Elem()
}

func (o ScheduleSpecTemplatePtrOutput) ToScheduleSpecTemplatePtrOutput() ScheduleSpecTemplatePtrOutput {
	return o
}

func (o ScheduleSpecTemplatePtrOutput) ToScheduleSpecTemplatePtrOutputWithContext(ctx context.Context) ScheduleSpecTemplatePtrOutput {
	return o
}

func (o ScheduleSpecTemplatePtrOutput) Elem() ScheduleSpecTemplateOutput {
	return o.ApplyT(func(v *ScheduleSpecTemplate) ScheduleSpecTemplate { return *v }).(ScheduleSpecTemplateOutput)
}

// ExcludedNamespaces contains a list of namespaces that are not included in the backup.
func (o ScheduleSpecTemplatePtrOutput) ExcludedNamespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ScheduleSpecTemplate) []string {
		if v == nil {
			return nil
		}
		return v.ExcludedNamespaces
	}).(pulumi.StringArrayOutput)
}

// ExcludedResources is a slice of resource names that are not included in the backup.
func (o ScheduleSpecTemplatePtrOutput) ExcludedResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ScheduleSpecTemplate) []string {
		if v == nil {
			return nil
		}
		return v.ExcludedResources
	}).(pulumi.StringArrayOutput)
}

// Hooks represent custom behaviors that should be executed at different phases of the backup.
func (o ScheduleSpecTemplatePtrOutput) Hooks() ScheduleSpecTemplateHooksPtrOutput {
	return o.ApplyT(func(v *ScheduleSpecTemplate) *ScheduleSpecTemplateHooks {
		if v == nil {
			return nil
		}
		return v.Hooks
	}).(ScheduleSpecTemplateHooksPtrOutput)
}

// IncludeClusterResources specifies whether cluster-scoped resources should be included for consideration in the backup.
func (o ScheduleSpecTemplatePtrOutput) IncludeClusterResources() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ScheduleSpecTemplate) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeClusterResources
	}).(pulumi.BoolPtrOutput)
}

// IncludedNamespaces is a slice of namespace names to include objects from. If empty, all namespaces are included.
func (o ScheduleSpecTemplatePtrOutput) IncludedNamespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ScheduleSpecTemplate) []string {
		if v == nil {
			return nil
		}
		return v.IncludedNamespaces
	}).(pulumi.StringArrayOutput)
}

// IncludedResources is a slice of resource names to include in the backup. If empty, all resources are included.
func (o ScheduleSpecTemplatePtrOutput) IncludedResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ScheduleSpecTemplate) []string {
		if v == nil {
			return nil
		}
		return v.IncludedResources
	}).(pulumi.StringArrayOutput)
}

// LabelSelector is a metav1.LabelSelector to filter with when adding individual objects to the backup. If empty or nil, all objects are included. Optional.
func (o ScheduleSpecTemplatePtrOutput) LabelSelector() ScheduleSpecTemplateLabelSelectorPtrOutput {
	return o.ApplyT(func(v *ScheduleSpecTemplate) *ScheduleSpecTemplateLabelSelector {
		if v == nil {
			return nil
		}
		return v.LabelSelector
	}).(ScheduleSpecTemplateLabelSelectorPtrOutput)
}

// SnapshotVolumes specifies whether to take cloud snapshots of any PV's referenced in the set of objects included in the Backup.
func (o ScheduleSpecTemplatePtrOutput) SnapshotVolumes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ScheduleSpecTemplate) *bool {
		if v == nil {
			return nil
		}
		return v.SnapshotVolumes
	}).(pulumi.BoolPtrOutput)
}

// StorageLocation is a string containing the name of a BackupStorageLocation where the backup should be stored.
func (o ScheduleSpecTemplatePtrOutput) StorageLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleSpecTemplate) *string {
		if v == nil {
			return nil
		}
		return v.StorageLocation
	}).(pulumi.StringPtrOutput)
}

// TTL is a time.Duration-parseable string describing how long the Backup should be retained for.
func (o ScheduleSpecTemplatePtrOutput) Ttl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleSpecTemplate) *string {
		if v == nil {
			return nil
		}
		return v.Ttl
	}).(pulumi.StringPtrOutput)
}

// VolumeSnapshotLocations is a list containing names of VolumeSnapshotLocations associated with this backup.
func (o ScheduleSpecTemplatePtrOutput) VolumeSnapshotLocations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ScheduleSpecTemplate) []string {
		if v == nil {
			return nil
		}
		return v.VolumeSnapshotLocations
	}).(pulumi.StringArrayOutput)
}

// Hooks represent custom behaviors that should be executed at different phases of the backup.
type ScheduleSpecTemplateHooks struct {
	// Resources are hooks that should be executed when backing up individual instances of a resource.
	Resources []ScheduleSpecTemplateHooksResources `pulumi:"resources"`
}

// ScheduleSpecTemplateHooksInput is an input type that accepts ScheduleSpecTemplateHooksArgs and ScheduleSpecTemplateHooksOutput values.
// You can construct a concrete instance of `ScheduleSpecTemplateHooksInput` via:
//
//          ScheduleSpecTemplateHooksArgs{...}
type ScheduleSpecTemplateHooksInput interface {
	pulumi.Input

	ToScheduleSpecTemplateHooksOutput() ScheduleSpecTemplateHooksOutput
	ToScheduleSpecTemplateHooksOutputWithContext(context.Context) ScheduleSpecTemplateHooksOutput
}

// Hooks represent custom behaviors that should be executed at different phases of the backup.
type ScheduleSpecTemplateHooksArgs struct {
	// Resources are hooks that should be executed when backing up individual instances of a resource.
	Resources ScheduleSpecTemplateHooksResourcesArrayInput `pulumi:"resources"`
}

func (ScheduleSpecTemplateHooksArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleSpecTemplateHooks)(nil)).Elem()
}

func (i ScheduleSpecTemplateHooksArgs) ToScheduleSpecTemplateHooksOutput() ScheduleSpecTemplateHooksOutput {
	return i.ToScheduleSpecTemplateHooksOutputWithContext(context.Background())
}

func (i ScheduleSpecTemplateHooksArgs) ToScheduleSpecTemplateHooksOutputWithContext(ctx context.Context) ScheduleSpecTemplateHooksOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleSpecTemplateHooksOutput)
}

func (i ScheduleSpecTemplateHooksArgs) ToScheduleSpecTemplateHooksPtrOutput() ScheduleSpecTemplateHooksPtrOutput {
	return i.ToScheduleSpecTemplateHooksPtrOutputWithContext(context.Background())
}

func (i ScheduleSpecTemplateHooksArgs) ToScheduleSpecTemplateHooksPtrOutputWithContext(ctx context.Context) ScheduleSpecTemplateHooksPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleSpecTemplateHooksOutput).ToScheduleSpecTemplateHooksPtrOutputWithContext(ctx)
}

// ScheduleSpecTemplateHooksPtrInput is an input type that accepts ScheduleSpecTemplateHooksArgs, ScheduleSpecTemplateHooksPtr and ScheduleSpecTemplateHooksPtrOutput values.
// You can construct a concrete instance of `ScheduleSpecTemplateHooksPtrInput` via:
//
//          ScheduleSpecTemplateHooksArgs{...}
//
//  or:
//
//          nil
type ScheduleSpecTemplateHooksPtrInput interface {
	pulumi.Input

	ToScheduleSpecTemplateHooksPtrOutput() ScheduleSpecTemplateHooksPtrOutput
	ToScheduleSpecTemplateHooksPtrOutputWithContext(context.Context) ScheduleSpecTemplateHooksPtrOutput
}

type scheduleSpecTemplateHooksPtrType ScheduleSpecTemplateHooksArgs

func ScheduleSpecTemplateHooksPtr(v *ScheduleSpecTemplateHooksArgs) ScheduleSpecTemplateHooksPtrInput {
	return (*scheduleSpecTemplateHooksPtrType)(v)
}

func (*scheduleSpecTemplateHooksPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleSpecTemplateHooks)(nil)).Elem()
}

func (i *scheduleSpecTemplateHooksPtrType) ToScheduleSpecTemplateHooksPtrOutput() ScheduleSpecTemplateHooksPtrOutput {
	return i.ToScheduleSpecTemplateHooksPtrOutputWithContext(context.Background())
}

func (i *scheduleSpecTemplateHooksPtrType) ToScheduleSpecTemplateHooksPtrOutputWithContext(ctx context.Context) ScheduleSpecTemplateHooksPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleSpecTemplateHooksPtrOutput)
}

// Hooks represent custom behaviors that should be executed at different phases of the backup.
type ScheduleSpecTemplateHooksOutput struct{ *pulumi.OutputState }

func (ScheduleSpecTemplateHooksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleSpecTemplateHooks)(nil)).Elem()
}

func (o ScheduleSpecTemplateHooksOutput) ToScheduleSpecTemplateHooksOutput() ScheduleSpecTemplateHooksOutput {
	return o
}

func (o ScheduleSpecTemplateHooksOutput) ToScheduleSpecTemplateHooksOutputWithContext(ctx context.Context) ScheduleSpecTemplateHooksOutput {
	return o
}

func (o ScheduleSpecTemplateHooksOutput) ToScheduleSpecTemplateHooksPtrOutput() ScheduleSpecTemplateHooksPtrOutput {
	return o.ToScheduleSpecTemplateHooksPtrOutputWithContext(context.Background())
}

func (o ScheduleSpecTemplateHooksOutput) ToScheduleSpecTemplateHooksPtrOutputWithContext(ctx context.Context) ScheduleSpecTemplateHooksPtrOutput {
	return o.ApplyT(func(v ScheduleSpecTemplateHooks) *ScheduleSpecTemplateHooks {
		return &v
	}).(ScheduleSpecTemplateHooksPtrOutput)
}

// Resources are hooks that should be executed when backing up individual instances of a resource.
func (o ScheduleSpecTemplateHooksOutput) Resources() ScheduleSpecTemplateHooksResourcesArrayOutput {
	return o.ApplyT(func(v ScheduleSpecTemplateHooks) []ScheduleSpecTemplateHooksResources { return v.Resources }).(ScheduleSpecTemplateHooksResourcesArrayOutput)
}

type ScheduleSpecTemplateHooksPtrOutput struct{ *pulumi.OutputState }

func (ScheduleSpecTemplateHooksPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleSpecTemplateHooks)(nil)).Elem()
}

func (o ScheduleSpecTemplateHooksPtrOutput) ToScheduleSpecTemplateHooksPtrOutput() ScheduleSpecTemplateHooksPtrOutput {
	return o
}

func (o ScheduleSpecTemplateHooksPtrOutput) ToScheduleSpecTemplateHooksPtrOutputWithContext(ctx context.Context) ScheduleSpecTemplateHooksPtrOutput {
	return o
}

func (o ScheduleSpecTemplateHooksPtrOutput) Elem() ScheduleSpecTemplateHooksOutput {
	return o.ApplyT(func(v *ScheduleSpecTemplateHooks) ScheduleSpecTemplateHooks { return *v }).(ScheduleSpecTemplateHooksOutput)
}

// Resources are hooks that should be executed when backing up individual instances of a resource.
func (o ScheduleSpecTemplateHooksPtrOutput) Resources() ScheduleSpecTemplateHooksResourcesArrayOutput {
	return o.ApplyT(func(v *ScheduleSpecTemplateHooks) []ScheduleSpecTemplateHooksResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(ScheduleSpecTemplateHooksResourcesArrayOutput)
}

// BackupResourceHookSpec defines one or more BackupResourceHooks that should be executed based on the rules defined for namespaces, resources, and label selector.
type ScheduleSpecTemplateHooksResources struct {
	// ExcludedNamespaces specifies the namespaces to which this hook spec does not apply.
	ExcludedNamespaces []string `pulumi:"excludedNamespaces"`
	// ExcludedResources specifies the resources to which this hook spec does not apply.
	ExcludedResources []string `pulumi:"excludedResources"`
	// IncludedNamespaces specifies the namespaces to which this hook spec applies. If empty, it applies to all namespaces.
	IncludedNamespaces []string `pulumi:"includedNamespaces"`
	// IncludedResources specifies the resources to which this hook spec applies. If empty, it applies to all resources.
	IncludedResources []string `pulumi:"includedResources"`
	// LabelSelector, if specified, filters the resources to which this hook spec applies.
	LabelSelector *ScheduleSpecTemplateHooksResourcesLabelSelector `pulumi:"labelSelector"`
	// Name is the name of this hook.
	Name string `pulumi:"name"`
	// PostHooks is a list of BackupResourceHooks to execute after storing the item in the backup. These are executed after all "additional items" from item actions are processed.
	Post []ScheduleSpecTemplateHooksResourcesPost `pulumi:"post"`
	// PreHooks is a list of BackupResourceHooks to execute prior to storing the item in the backup. These are executed before any "additional items" from item actions are processed.
	Pre []ScheduleSpecTemplateHooksResourcesPre `pulumi:"pre"`
}

// ScheduleSpecTemplateHooksResourcesInput is an input type that accepts ScheduleSpecTemplateHooksResourcesArgs and ScheduleSpecTemplateHooksResourcesOutput values.
// You can construct a concrete instance of `ScheduleSpecTemplateHooksResourcesInput` via:
//
//          ScheduleSpecTemplateHooksResourcesArgs{...}
type ScheduleSpecTemplateHooksResourcesInput interface {
	pulumi.Input

	ToScheduleSpecTemplateHooksResourcesOutput() ScheduleSpecTemplateHooksResourcesOutput
	ToScheduleSpecTemplateHooksResourcesOutputWithContext(context.Context) ScheduleSpecTemplateHooksResourcesOutput
}

// BackupResourceHookSpec defines one or more BackupResourceHooks that should be executed based on the rules defined for namespaces, resources, and label selector.
type ScheduleSpecTemplateHooksResourcesArgs struct {
	// ExcludedNamespaces specifies the namespaces to which this hook spec does not apply.
	ExcludedNamespaces pulumi.StringArrayInput `pulumi:"excludedNamespaces"`
	// ExcludedResources specifies the resources to which this hook spec does not apply.
	ExcludedResources pulumi.StringArrayInput `pulumi:"excludedResources"`
	// IncludedNamespaces specifies the namespaces to which this hook spec applies. If empty, it applies to all namespaces.
	IncludedNamespaces pulumi.StringArrayInput `pulumi:"includedNamespaces"`
	// IncludedResources specifies the resources to which this hook spec applies. If empty, it applies to all resources.
	IncludedResources pulumi.StringArrayInput `pulumi:"includedResources"`
	// LabelSelector, if specified, filters the resources to which this hook spec applies.
	LabelSelector ScheduleSpecTemplateHooksResourcesLabelSelectorPtrInput `pulumi:"labelSelector"`
	// Name is the name of this hook.
	Name pulumi.StringInput `pulumi:"name"`
	// PostHooks is a list of BackupResourceHooks to execute after storing the item in the backup. These are executed after all "additional items" from item actions are processed.
	Post ScheduleSpecTemplateHooksResourcesPostArrayInput `pulumi:"post"`
	// PreHooks is a list of BackupResourceHooks to execute prior to storing the item in the backup. These are executed before any "additional items" from item actions are processed.
	Pre ScheduleSpecTemplateHooksResourcesPreArrayInput `pulumi:"pre"`
}

func (ScheduleSpecTemplateHooksResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleSpecTemplateHooksResources)(nil)).Elem()
}

func (i ScheduleSpecTemplateHooksResourcesArgs) ToScheduleSpecTemplateHooksResourcesOutput() ScheduleSpecTemplateHooksResourcesOutput {
	return i.ToScheduleSpecTemplateHooksResourcesOutputWithContext(context.Background())
}

func (i ScheduleSpecTemplateHooksResourcesArgs) ToScheduleSpecTemplateHooksResourcesOutputWithContext(ctx context.Context) ScheduleSpecTemplateHooksResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleSpecTemplateHooksResourcesOutput)
}

// ScheduleSpecTemplateHooksResourcesArrayInput is an input type that accepts ScheduleSpecTemplateHooksResourcesArray and ScheduleSpecTemplateHooksResourcesArrayOutput values.
// You can construct a concrete instance of `ScheduleSpecTemplateHooksResourcesArrayInput` via:
//
//          ScheduleSpecTemplateHooksResourcesArray{ ScheduleSpecTemplateHooksResourcesArgs{...} }
type ScheduleSpecTemplateHooksResourcesArrayInput interface {
	pulumi.Input

	ToScheduleSpecTemplateHooksResourcesArrayOutput() ScheduleSpecTemplateHooksResourcesArrayOutput
	ToScheduleSpecTemplateHooksResourcesArrayOutputWithContext(context.Context) ScheduleSpecTemplateHooksResourcesArrayOutput
}

type ScheduleSpecTemplateHooksResourcesArray []ScheduleSpecTemplateHooksResourcesInput

func (ScheduleSpecTemplateHooksResourcesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleSpecTemplateHooksResources)(nil)).Elem()
}

func (i ScheduleSpecTemplateHooksResourcesArray) ToScheduleSpecTemplateHooksResourcesArrayOutput() ScheduleSpecTemplateHooksResourcesArrayOutput {
	return i.ToScheduleSpecTemplateHooksResourcesArrayOutputWithContext(context.Background())
}

func (i ScheduleSpecTemplateHooksResourcesArray) ToScheduleSpecTemplateHooksResourcesArrayOutputWithContext(ctx context.Context) ScheduleSpecTemplateHooksResourcesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleSpecTemplateHooksResourcesArrayOutput)
}

// BackupResourceHookSpec defines one or more BackupResourceHooks that should be executed based on the rules defined for namespaces, resources, and label selector.
type ScheduleSpecTemplateHooksResourcesOutput struct{ *pulumi.OutputState }

func (ScheduleSpecTemplateHooksResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleSpecTemplateHooksResources)(nil)).Elem()
}

func (o ScheduleSpecTemplateHooksResourcesOutput) ToScheduleSpecTemplateHooksResourcesOutput() ScheduleSpecTemplateHooksResourcesOutput {
	return o
}

func (o ScheduleSpecTemplateHooksResourcesOutput) ToScheduleSpecTemplateHooksResourcesOutputWithContext(ctx context.Context) ScheduleSpecTemplateHooksResourcesOutput {
	return o
}

// ExcludedNamespaces specifies the namespaces to which this hook spec does not apply.
func (o ScheduleSpecTemplateHooksResourcesOutput) ExcludedNamespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScheduleSpecTemplateHooksResources) []string { return v.ExcludedNamespaces }).(pulumi.StringArrayOutput)
}

// ExcludedResources specifies the resources to which this hook spec does not apply.
func (o ScheduleSpecTemplateHooksResourcesOutput) ExcludedResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScheduleSpecTemplateHooksResources) []string { return v.ExcludedResources }).(pulumi.StringArrayOutput)
}

// IncludedNamespaces specifies the namespaces to which this hook spec applies. If empty, it applies to all namespaces.
func (o ScheduleSpecTemplateHooksResourcesOutput) IncludedNamespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScheduleSpecTemplateHooksResources) []string { return v.IncludedNamespaces }).(pulumi.StringArrayOutput)
}

// IncludedResources specifies the resources to which this hook spec applies. If empty, it applies to all resources.
func (o ScheduleSpecTemplateHooksResourcesOutput) IncludedResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScheduleSpecTemplateHooksResources) []string { return v.IncludedResources }).(pulumi.StringArrayOutput)
}

// LabelSelector, if specified, filters the resources to which this hook spec applies.
func (o ScheduleSpecTemplateHooksResourcesOutput) LabelSelector() ScheduleSpecTemplateHooksResourcesLabelSelectorPtrOutput {
	return o.ApplyT(func(v ScheduleSpecTemplateHooksResources) *ScheduleSpecTemplateHooksResourcesLabelSelector {
		return v.LabelSelector
	}).(ScheduleSpecTemplateHooksResourcesLabelSelectorPtrOutput)
}

// Name is the name of this hook.
func (o ScheduleSpecTemplateHooksResourcesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleSpecTemplateHooksResources) string { return v.Name }).(pulumi.StringOutput)
}

// PostHooks is a list of BackupResourceHooks to execute after storing the item in the backup. These are executed after all "additional items" from item actions are processed.
func (o ScheduleSpecTemplateHooksResourcesOutput) Post() ScheduleSpecTemplateHooksResourcesPostArrayOutput {
	return o.ApplyT(func(v ScheduleSpecTemplateHooksResources) []ScheduleSpecTemplateHooksResourcesPost { return v.Post }).(ScheduleSpecTemplateHooksResourcesPostArrayOutput)
}

// PreHooks is a list of BackupResourceHooks to execute prior to storing the item in the backup. These are executed before any "additional items" from item actions are processed.
func (o ScheduleSpecTemplateHooksResourcesOutput) Pre() ScheduleSpecTemplateHooksResourcesPreArrayOutput {
	return o.ApplyT(func(v ScheduleSpecTemplateHooksResources) []ScheduleSpecTemplateHooksResourcesPre { return v.Pre }).(ScheduleSpecTemplateHooksResourcesPreArrayOutput)
}

type ScheduleSpecTemplateHooksResourcesArrayOutput struct{ *pulumi.OutputState }

func (ScheduleSpecTemplateHooksResourcesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleSpecTemplateHooksResources)(nil)).Elem()
}

func (o ScheduleSpecTemplateHooksResourcesArrayOutput) ToScheduleSpecTemplateHooksResourcesArrayOutput() ScheduleSpecTemplateHooksResourcesArrayOutput {
	return o
}

func (o ScheduleSpecTemplateHooksResourcesArrayOutput) ToScheduleSpecTemplateHooksResourcesArrayOutputWithContext(ctx context.Context) ScheduleSpecTemplateHooksResourcesArrayOutput {
	return o
}

func (o ScheduleSpecTemplateHooksResourcesArrayOutput) Index(i pulumi.IntInput) ScheduleSpecTemplateHooksResourcesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScheduleSpecTemplateHooksResources {
		return vs[0].([]ScheduleSpecTemplateHooksResources)[vs[1].(int)]
	}).(ScheduleSpecTemplateHooksResourcesOutput)
}

// LabelSelector, if specified, filters the resources to which this hook spec applies.
type ScheduleSpecTemplateHooksResourcesLabelSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// ScheduleSpecTemplateHooksResourcesLabelSelectorInput is an input type that accepts ScheduleSpecTemplateHooksResourcesLabelSelectorArgs and ScheduleSpecTemplateHooksResourcesLabelSelectorOutput values.
// You can construct a concrete instance of `ScheduleSpecTemplateHooksResourcesLabelSelectorInput` via:
//
//          ScheduleSpecTemplateHooksResourcesLabelSelectorArgs{...}
type ScheduleSpecTemplateHooksResourcesLabelSelectorInput interface {
	pulumi.Input

	ToScheduleSpecTemplateHooksResourcesLabelSelectorOutput() ScheduleSpecTemplateHooksResourcesLabelSelectorOutput
	ToScheduleSpecTemplateHooksResourcesLabelSelectorOutputWithContext(context.Context) ScheduleSpecTemplateHooksResourcesLabelSelectorOutput
}

// LabelSelector, if specified, filters the resources to which this hook spec applies.
type ScheduleSpecTemplateHooksResourcesLabelSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (ScheduleSpecTemplateHooksResourcesLabelSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleSpecTemplateHooksResourcesLabelSelector)(nil)).Elem()
}

func (i ScheduleSpecTemplateHooksResourcesLabelSelectorArgs) ToScheduleSpecTemplateHooksResourcesLabelSelectorOutput() ScheduleSpecTemplateHooksResourcesLabelSelectorOutput {
	return i.ToScheduleSpecTemplateHooksResourcesLabelSelectorOutputWithContext(context.Background())
}

func (i ScheduleSpecTemplateHooksResourcesLabelSelectorArgs) ToScheduleSpecTemplateHooksResourcesLabelSelectorOutputWithContext(ctx context.Context) ScheduleSpecTemplateHooksResourcesLabelSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleSpecTemplateHooksResourcesLabelSelectorOutput)
}

func (i ScheduleSpecTemplateHooksResourcesLabelSelectorArgs) ToScheduleSpecTemplateHooksResourcesLabelSelectorPtrOutput() ScheduleSpecTemplateHooksResourcesLabelSelectorPtrOutput {
	return i.ToScheduleSpecTemplateHooksResourcesLabelSelectorPtrOutputWithContext(context.Background())
}

func (i ScheduleSpecTemplateHooksResourcesLabelSelectorArgs) ToScheduleSpecTemplateHooksResourcesLabelSelectorPtrOutputWithContext(ctx context.Context) ScheduleSpecTemplateHooksResourcesLabelSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleSpecTemplateHooksResourcesLabelSelectorOutput).ToScheduleSpecTemplateHooksResourcesLabelSelectorPtrOutputWithContext(ctx)
}

// ScheduleSpecTemplateHooksResourcesLabelSelectorPtrInput is an input type that accepts ScheduleSpecTemplateHooksResourcesLabelSelectorArgs, ScheduleSpecTemplateHooksResourcesLabelSelectorPtr and ScheduleSpecTemplateHooksResourcesLabelSelectorPtrOutput values.
// You can construct a concrete instance of `ScheduleSpecTemplateHooksResourcesLabelSelectorPtrInput` via:
//
//          ScheduleSpecTemplateHooksResourcesLabelSelectorArgs{...}
//
//  or:
//
//          nil
type ScheduleSpecTemplateHooksResourcesLabelSelectorPtrInput interface {
	pulumi.Input

	ToScheduleSpecTemplateHooksResourcesLabelSelectorPtrOutput() ScheduleSpecTemplateHooksResourcesLabelSelectorPtrOutput
	ToScheduleSpecTemplateHooksResourcesLabelSelectorPtrOutputWithContext(context.Context) ScheduleSpecTemplateHooksResourcesLabelSelectorPtrOutput
}

type scheduleSpecTemplateHooksResourcesLabelSelectorPtrType ScheduleSpecTemplateHooksResourcesLabelSelectorArgs

func ScheduleSpecTemplateHooksResourcesLabelSelectorPtr(v *ScheduleSpecTemplateHooksResourcesLabelSelectorArgs) ScheduleSpecTemplateHooksResourcesLabelSelectorPtrInput {
	return (*scheduleSpecTemplateHooksResourcesLabelSelectorPtrType)(v)
}

func (*scheduleSpecTemplateHooksResourcesLabelSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleSpecTemplateHooksResourcesLabelSelector)(nil)).Elem()
}

func (i *scheduleSpecTemplateHooksResourcesLabelSelectorPtrType) ToScheduleSpecTemplateHooksResourcesLabelSelectorPtrOutput() ScheduleSpecTemplateHooksResourcesLabelSelectorPtrOutput {
	return i.ToScheduleSpecTemplateHooksResourcesLabelSelectorPtrOutputWithContext(context.Background())
}

func (i *scheduleSpecTemplateHooksResourcesLabelSelectorPtrType) ToScheduleSpecTemplateHooksResourcesLabelSelectorPtrOutputWithContext(ctx context.Context) ScheduleSpecTemplateHooksResourcesLabelSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleSpecTemplateHooksResourcesLabelSelectorPtrOutput)
}

// LabelSelector, if specified, filters the resources to which this hook spec applies.
type ScheduleSpecTemplateHooksResourcesLabelSelectorOutput struct{ *pulumi.OutputState }

func (ScheduleSpecTemplateHooksResourcesLabelSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleSpecTemplateHooksResourcesLabelSelector)(nil)).Elem()
}

func (o ScheduleSpecTemplateHooksResourcesLabelSelectorOutput) ToScheduleSpecTemplateHooksResourcesLabelSelectorOutput() ScheduleSpecTemplateHooksResourcesLabelSelectorOutput {
	return o
}

func (o ScheduleSpecTemplateHooksResourcesLabelSelectorOutput) ToScheduleSpecTemplateHooksResourcesLabelSelectorOutputWithContext(ctx context.Context) ScheduleSpecTemplateHooksResourcesLabelSelectorOutput {
	return o
}

func (o ScheduleSpecTemplateHooksResourcesLabelSelectorOutput) ToScheduleSpecTemplateHooksResourcesLabelSelectorPtrOutput() ScheduleSpecTemplateHooksResourcesLabelSelectorPtrOutput {
	return o.ToScheduleSpecTemplateHooksResourcesLabelSelectorPtrOutputWithContext(context.Background())
}

func (o ScheduleSpecTemplateHooksResourcesLabelSelectorOutput) ToScheduleSpecTemplateHooksResourcesLabelSelectorPtrOutputWithContext(ctx context.Context) ScheduleSpecTemplateHooksResourcesLabelSelectorPtrOutput {
	return o.ApplyT(func(v ScheduleSpecTemplateHooksResourcesLabelSelector) *ScheduleSpecTemplateHooksResourcesLabelSelector {
		return &v
	}).(ScheduleSpecTemplateHooksResourcesLabelSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ScheduleSpecTemplateHooksResourcesLabelSelectorOutput) MatchExpressions() ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v ScheduleSpecTemplateHooksResourcesLabelSelector) []ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressions {
		return v.MatchExpressions
	}).(ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ScheduleSpecTemplateHooksResourcesLabelSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ScheduleSpecTemplateHooksResourcesLabelSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type ScheduleSpecTemplateHooksResourcesLabelSelectorPtrOutput struct{ *pulumi.OutputState }

func (ScheduleSpecTemplateHooksResourcesLabelSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleSpecTemplateHooksResourcesLabelSelector)(nil)).Elem()
}

func (o ScheduleSpecTemplateHooksResourcesLabelSelectorPtrOutput) ToScheduleSpecTemplateHooksResourcesLabelSelectorPtrOutput() ScheduleSpecTemplateHooksResourcesLabelSelectorPtrOutput {
	return o
}

func (o ScheduleSpecTemplateHooksResourcesLabelSelectorPtrOutput) ToScheduleSpecTemplateHooksResourcesLabelSelectorPtrOutputWithContext(ctx context.Context) ScheduleSpecTemplateHooksResourcesLabelSelectorPtrOutput {
	return o
}

func (o ScheduleSpecTemplateHooksResourcesLabelSelectorPtrOutput) Elem() ScheduleSpecTemplateHooksResourcesLabelSelectorOutput {
	return o.ApplyT(func(v *ScheduleSpecTemplateHooksResourcesLabelSelector) ScheduleSpecTemplateHooksResourcesLabelSelector {
		return *v
	}).(ScheduleSpecTemplateHooksResourcesLabelSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ScheduleSpecTemplateHooksResourcesLabelSelectorPtrOutput) MatchExpressions() ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *ScheduleSpecTemplateHooksResourcesLabelSelector) []ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ScheduleSpecTemplateHooksResourcesLabelSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ScheduleSpecTemplateHooksResourcesLabelSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsInput is an input type that accepts ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsArgs and ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsInput` via:
//
//          ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsArgs{...}
type ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsOutput() ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsOutput
	ToScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsOutputWithContext(context.Context) ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressions)(nil)).Elem()
}

func (i ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsArgs) ToScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsOutput() ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsOutput {
	return i.ToScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsArgs) ToScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsOutputWithContext(ctx context.Context) ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsOutput)
}

// ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsArrayInput is an input type that accepts ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsArray and ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsArrayInput` via:
//
//          ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsArray{ ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsArgs{...} }
type ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsArrayOutput() ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsArrayOutput
	ToScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsArrayOutputWithContext(context.Context) ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsArrayOutput
}

type ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsArray []ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsInput

func (ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressions)(nil)).Elem()
}

func (i ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsArray) ToScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsArrayOutput() ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsArrayOutput {
	return i.ToScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsArray) ToScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressions)(nil)).Elem()
}

func (o ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsOutput) ToScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsOutput() ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsOutput {
	return o
}

func (o ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsOutput) ToScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsOutputWithContext(ctx context.Context) ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressions) string { return v.Key }).(pulumi.StringOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressions) string { return v.Operator }).(pulumi.StringOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressions) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressions)(nil)).Elem()
}

func (o ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsArrayOutput) ToScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsArrayOutput() ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsArrayOutput {
	return o
}

func (o ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsArrayOutput) ToScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsArrayOutput {
	return o
}

func (o ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressions {
		return vs[0].([]ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressions)[vs[1].(int)]
	}).(ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type ScheduleSpecTemplateHooksResourcesLabelSelectorMatchLabels struct {
}

// ScheduleSpecTemplateHooksResourcesLabelSelectorMatchLabelsInput is an input type that accepts ScheduleSpecTemplateHooksResourcesLabelSelectorMatchLabelsArgs and ScheduleSpecTemplateHooksResourcesLabelSelectorMatchLabelsOutput values.
// You can construct a concrete instance of `ScheduleSpecTemplateHooksResourcesLabelSelectorMatchLabelsInput` via:
//
//          ScheduleSpecTemplateHooksResourcesLabelSelectorMatchLabelsArgs{...}
type ScheduleSpecTemplateHooksResourcesLabelSelectorMatchLabelsInput interface {
	pulumi.Input

	ToScheduleSpecTemplateHooksResourcesLabelSelectorMatchLabelsOutput() ScheduleSpecTemplateHooksResourcesLabelSelectorMatchLabelsOutput
	ToScheduleSpecTemplateHooksResourcesLabelSelectorMatchLabelsOutputWithContext(context.Context) ScheduleSpecTemplateHooksResourcesLabelSelectorMatchLabelsOutput
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type ScheduleSpecTemplateHooksResourcesLabelSelectorMatchLabelsArgs struct {
}

func (ScheduleSpecTemplateHooksResourcesLabelSelectorMatchLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleSpecTemplateHooksResourcesLabelSelectorMatchLabels)(nil)).Elem()
}

func (i ScheduleSpecTemplateHooksResourcesLabelSelectorMatchLabelsArgs) ToScheduleSpecTemplateHooksResourcesLabelSelectorMatchLabelsOutput() ScheduleSpecTemplateHooksResourcesLabelSelectorMatchLabelsOutput {
	return i.ToScheduleSpecTemplateHooksResourcesLabelSelectorMatchLabelsOutputWithContext(context.Background())
}

func (i ScheduleSpecTemplateHooksResourcesLabelSelectorMatchLabelsArgs) ToScheduleSpecTemplateHooksResourcesLabelSelectorMatchLabelsOutputWithContext(ctx context.Context) ScheduleSpecTemplateHooksResourcesLabelSelectorMatchLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleSpecTemplateHooksResourcesLabelSelectorMatchLabelsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type ScheduleSpecTemplateHooksResourcesLabelSelectorMatchLabelsOutput struct{ *pulumi.OutputState }

func (ScheduleSpecTemplateHooksResourcesLabelSelectorMatchLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleSpecTemplateHooksResourcesLabelSelectorMatchLabels)(nil)).Elem()
}

func (o ScheduleSpecTemplateHooksResourcesLabelSelectorMatchLabelsOutput) ToScheduleSpecTemplateHooksResourcesLabelSelectorMatchLabelsOutput() ScheduleSpecTemplateHooksResourcesLabelSelectorMatchLabelsOutput {
	return o
}

func (o ScheduleSpecTemplateHooksResourcesLabelSelectorMatchLabelsOutput) ToScheduleSpecTemplateHooksResourcesLabelSelectorMatchLabelsOutputWithContext(ctx context.Context) ScheduleSpecTemplateHooksResourcesLabelSelectorMatchLabelsOutput {
	return o
}

// BackupResourceHook defines a hook for a resource.
type ScheduleSpecTemplateHooksResourcesPost struct {
	// Exec defines an exec hook.
	Exec ScheduleSpecTemplateHooksResourcesPostExec `pulumi:"exec"`
}

// ScheduleSpecTemplateHooksResourcesPostInput is an input type that accepts ScheduleSpecTemplateHooksResourcesPostArgs and ScheduleSpecTemplateHooksResourcesPostOutput values.
// You can construct a concrete instance of `ScheduleSpecTemplateHooksResourcesPostInput` via:
//
//          ScheduleSpecTemplateHooksResourcesPostArgs{...}
type ScheduleSpecTemplateHooksResourcesPostInput interface {
	pulumi.Input

	ToScheduleSpecTemplateHooksResourcesPostOutput() ScheduleSpecTemplateHooksResourcesPostOutput
	ToScheduleSpecTemplateHooksResourcesPostOutputWithContext(context.Context) ScheduleSpecTemplateHooksResourcesPostOutput
}

// BackupResourceHook defines a hook for a resource.
type ScheduleSpecTemplateHooksResourcesPostArgs struct {
	// Exec defines an exec hook.
	Exec ScheduleSpecTemplateHooksResourcesPostExecInput `pulumi:"exec"`
}

func (ScheduleSpecTemplateHooksResourcesPostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleSpecTemplateHooksResourcesPost)(nil)).Elem()
}

func (i ScheduleSpecTemplateHooksResourcesPostArgs) ToScheduleSpecTemplateHooksResourcesPostOutput() ScheduleSpecTemplateHooksResourcesPostOutput {
	return i.ToScheduleSpecTemplateHooksResourcesPostOutputWithContext(context.Background())
}

func (i ScheduleSpecTemplateHooksResourcesPostArgs) ToScheduleSpecTemplateHooksResourcesPostOutputWithContext(ctx context.Context) ScheduleSpecTemplateHooksResourcesPostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleSpecTemplateHooksResourcesPostOutput)
}

// ScheduleSpecTemplateHooksResourcesPostArrayInput is an input type that accepts ScheduleSpecTemplateHooksResourcesPostArray and ScheduleSpecTemplateHooksResourcesPostArrayOutput values.
// You can construct a concrete instance of `ScheduleSpecTemplateHooksResourcesPostArrayInput` via:
//
//          ScheduleSpecTemplateHooksResourcesPostArray{ ScheduleSpecTemplateHooksResourcesPostArgs{...} }
type ScheduleSpecTemplateHooksResourcesPostArrayInput interface {
	pulumi.Input

	ToScheduleSpecTemplateHooksResourcesPostArrayOutput() ScheduleSpecTemplateHooksResourcesPostArrayOutput
	ToScheduleSpecTemplateHooksResourcesPostArrayOutputWithContext(context.Context) ScheduleSpecTemplateHooksResourcesPostArrayOutput
}

type ScheduleSpecTemplateHooksResourcesPostArray []ScheduleSpecTemplateHooksResourcesPostInput

func (ScheduleSpecTemplateHooksResourcesPostArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleSpecTemplateHooksResourcesPost)(nil)).Elem()
}

func (i ScheduleSpecTemplateHooksResourcesPostArray) ToScheduleSpecTemplateHooksResourcesPostArrayOutput() ScheduleSpecTemplateHooksResourcesPostArrayOutput {
	return i.ToScheduleSpecTemplateHooksResourcesPostArrayOutputWithContext(context.Background())
}

func (i ScheduleSpecTemplateHooksResourcesPostArray) ToScheduleSpecTemplateHooksResourcesPostArrayOutputWithContext(ctx context.Context) ScheduleSpecTemplateHooksResourcesPostArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleSpecTemplateHooksResourcesPostArrayOutput)
}

// BackupResourceHook defines a hook for a resource.
type ScheduleSpecTemplateHooksResourcesPostOutput struct{ *pulumi.OutputState }

func (ScheduleSpecTemplateHooksResourcesPostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleSpecTemplateHooksResourcesPost)(nil)).Elem()
}

func (o ScheduleSpecTemplateHooksResourcesPostOutput) ToScheduleSpecTemplateHooksResourcesPostOutput() ScheduleSpecTemplateHooksResourcesPostOutput {
	return o
}

func (o ScheduleSpecTemplateHooksResourcesPostOutput) ToScheduleSpecTemplateHooksResourcesPostOutputWithContext(ctx context.Context) ScheduleSpecTemplateHooksResourcesPostOutput {
	return o
}

// Exec defines an exec hook.
func (o ScheduleSpecTemplateHooksResourcesPostOutput) Exec() ScheduleSpecTemplateHooksResourcesPostExecOutput {
	return o.ApplyT(func(v ScheduleSpecTemplateHooksResourcesPost) ScheduleSpecTemplateHooksResourcesPostExec {
		return v.Exec
	}).(ScheduleSpecTemplateHooksResourcesPostExecOutput)
}

type ScheduleSpecTemplateHooksResourcesPostArrayOutput struct{ *pulumi.OutputState }

func (ScheduleSpecTemplateHooksResourcesPostArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleSpecTemplateHooksResourcesPost)(nil)).Elem()
}

func (o ScheduleSpecTemplateHooksResourcesPostArrayOutput) ToScheduleSpecTemplateHooksResourcesPostArrayOutput() ScheduleSpecTemplateHooksResourcesPostArrayOutput {
	return o
}

func (o ScheduleSpecTemplateHooksResourcesPostArrayOutput) ToScheduleSpecTemplateHooksResourcesPostArrayOutputWithContext(ctx context.Context) ScheduleSpecTemplateHooksResourcesPostArrayOutput {
	return o
}

func (o ScheduleSpecTemplateHooksResourcesPostArrayOutput) Index(i pulumi.IntInput) ScheduleSpecTemplateHooksResourcesPostOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScheduleSpecTemplateHooksResourcesPost {
		return vs[0].([]ScheduleSpecTemplateHooksResourcesPost)[vs[1].(int)]
	}).(ScheduleSpecTemplateHooksResourcesPostOutput)
}

// Exec defines an exec hook.
type ScheduleSpecTemplateHooksResourcesPostExec struct {
	// Command is the command and arguments to execute.
	Command []string `pulumi:"command"`
	// Container is the container in the pod where the command should be executed. If not specified, the pod's first container is used.
	Container *string `pulumi:"container"`
	// OnError specifies how Velero should behave if it encounters an error executing this hook.
	OnError *string `pulumi:"onError"`
	// Timeout defines the maximum amount of time Velero should wait for the hook to complete before considering the execution a failure.
	Timeout *string `pulumi:"timeout"`
}

// ScheduleSpecTemplateHooksResourcesPostExecInput is an input type that accepts ScheduleSpecTemplateHooksResourcesPostExecArgs and ScheduleSpecTemplateHooksResourcesPostExecOutput values.
// You can construct a concrete instance of `ScheduleSpecTemplateHooksResourcesPostExecInput` via:
//
//          ScheduleSpecTemplateHooksResourcesPostExecArgs{...}
type ScheduleSpecTemplateHooksResourcesPostExecInput interface {
	pulumi.Input

	ToScheduleSpecTemplateHooksResourcesPostExecOutput() ScheduleSpecTemplateHooksResourcesPostExecOutput
	ToScheduleSpecTemplateHooksResourcesPostExecOutputWithContext(context.Context) ScheduleSpecTemplateHooksResourcesPostExecOutput
}

// Exec defines an exec hook.
type ScheduleSpecTemplateHooksResourcesPostExecArgs struct {
	// Command is the command and arguments to execute.
	Command pulumi.StringArrayInput `pulumi:"command"`
	// Container is the container in the pod where the command should be executed. If not specified, the pod's first container is used.
	Container pulumi.StringPtrInput `pulumi:"container"`
	// OnError specifies how Velero should behave if it encounters an error executing this hook.
	OnError pulumi.StringPtrInput `pulumi:"onError"`
	// Timeout defines the maximum amount of time Velero should wait for the hook to complete before considering the execution a failure.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (ScheduleSpecTemplateHooksResourcesPostExecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleSpecTemplateHooksResourcesPostExec)(nil)).Elem()
}

func (i ScheduleSpecTemplateHooksResourcesPostExecArgs) ToScheduleSpecTemplateHooksResourcesPostExecOutput() ScheduleSpecTemplateHooksResourcesPostExecOutput {
	return i.ToScheduleSpecTemplateHooksResourcesPostExecOutputWithContext(context.Background())
}

func (i ScheduleSpecTemplateHooksResourcesPostExecArgs) ToScheduleSpecTemplateHooksResourcesPostExecOutputWithContext(ctx context.Context) ScheduleSpecTemplateHooksResourcesPostExecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleSpecTemplateHooksResourcesPostExecOutput)
}

// Exec defines an exec hook.
type ScheduleSpecTemplateHooksResourcesPostExecOutput struct{ *pulumi.OutputState }

func (ScheduleSpecTemplateHooksResourcesPostExecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleSpecTemplateHooksResourcesPostExec)(nil)).Elem()
}

func (o ScheduleSpecTemplateHooksResourcesPostExecOutput) ToScheduleSpecTemplateHooksResourcesPostExecOutput() ScheduleSpecTemplateHooksResourcesPostExecOutput {
	return o
}

func (o ScheduleSpecTemplateHooksResourcesPostExecOutput) ToScheduleSpecTemplateHooksResourcesPostExecOutputWithContext(ctx context.Context) ScheduleSpecTemplateHooksResourcesPostExecOutput {
	return o
}

// Command is the command and arguments to execute.
func (o ScheduleSpecTemplateHooksResourcesPostExecOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScheduleSpecTemplateHooksResourcesPostExec) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// Container is the container in the pod where the command should be executed. If not specified, the pod's first container is used.
func (o ScheduleSpecTemplateHooksResourcesPostExecOutput) Container() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleSpecTemplateHooksResourcesPostExec) *string { return v.Container }).(pulumi.StringPtrOutput)
}

// OnError specifies how Velero should behave if it encounters an error executing this hook.
func (o ScheduleSpecTemplateHooksResourcesPostExecOutput) OnError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleSpecTemplateHooksResourcesPostExec) *string { return v.OnError }).(pulumi.StringPtrOutput)
}

// Timeout defines the maximum amount of time Velero should wait for the hook to complete before considering the execution a failure.
func (o ScheduleSpecTemplateHooksResourcesPostExecOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleSpecTemplateHooksResourcesPostExec) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// BackupResourceHook defines a hook for a resource.
type ScheduleSpecTemplateHooksResourcesPre struct {
	// Exec defines an exec hook.
	Exec ScheduleSpecTemplateHooksResourcesPreExec `pulumi:"exec"`
}

// ScheduleSpecTemplateHooksResourcesPreInput is an input type that accepts ScheduleSpecTemplateHooksResourcesPreArgs and ScheduleSpecTemplateHooksResourcesPreOutput values.
// You can construct a concrete instance of `ScheduleSpecTemplateHooksResourcesPreInput` via:
//
//          ScheduleSpecTemplateHooksResourcesPreArgs{...}
type ScheduleSpecTemplateHooksResourcesPreInput interface {
	pulumi.Input

	ToScheduleSpecTemplateHooksResourcesPreOutput() ScheduleSpecTemplateHooksResourcesPreOutput
	ToScheduleSpecTemplateHooksResourcesPreOutputWithContext(context.Context) ScheduleSpecTemplateHooksResourcesPreOutput
}

// BackupResourceHook defines a hook for a resource.
type ScheduleSpecTemplateHooksResourcesPreArgs struct {
	// Exec defines an exec hook.
	Exec ScheduleSpecTemplateHooksResourcesPreExecInput `pulumi:"exec"`
}

func (ScheduleSpecTemplateHooksResourcesPreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleSpecTemplateHooksResourcesPre)(nil)).Elem()
}

func (i ScheduleSpecTemplateHooksResourcesPreArgs) ToScheduleSpecTemplateHooksResourcesPreOutput() ScheduleSpecTemplateHooksResourcesPreOutput {
	return i.ToScheduleSpecTemplateHooksResourcesPreOutputWithContext(context.Background())
}

func (i ScheduleSpecTemplateHooksResourcesPreArgs) ToScheduleSpecTemplateHooksResourcesPreOutputWithContext(ctx context.Context) ScheduleSpecTemplateHooksResourcesPreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleSpecTemplateHooksResourcesPreOutput)
}

// ScheduleSpecTemplateHooksResourcesPreArrayInput is an input type that accepts ScheduleSpecTemplateHooksResourcesPreArray and ScheduleSpecTemplateHooksResourcesPreArrayOutput values.
// You can construct a concrete instance of `ScheduleSpecTemplateHooksResourcesPreArrayInput` via:
//
//          ScheduleSpecTemplateHooksResourcesPreArray{ ScheduleSpecTemplateHooksResourcesPreArgs{...} }
type ScheduleSpecTemplateHooksResourcesPreArrayInput interface {
	pulumi.Input

	ToScheduleSpecTemplateHooksResourcesPreArrayOutput() ScheduleSpecTemplateHooksResourcesPreArrayOutput
	ToScheduleSpecTemplateHooksResourcesPreArrayOutputWithContext(context.Context) ScheduleSpecTemplateHooksResourcesPreArrayOutput
}

type ScheduleSpecTemplateHooksResourcesPreArray []ScheduleSpecTemplateHooksResourcesPreInput

func (ScheduleSpecTemplateHooksResourcesPreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleSpecTemplateHooksResourcesPre)(nil)).Elem()
}

func (i ScheduleSpecTemplateHooksResourcesPreArray) ToScheduleSpecTemplateHooksResourcesPreArrayOutput() ScheduleSpecTemplateHooksResourcesPreArrayOutput {
	return i.ToScheduleSpecTemplateHooksResourcesPreArrayOutputWithContext(context.Background())
}

func (i ScheduleSpecTemplateHooksResourcesPreArray) ToScheduleSpecTemplateHooksResourcesPreArrayOutputWithContext(ctx context.Context) ScheduleSpecTemplateHooksResourcesPreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleSpecTemplateHooksResourcesPreArrayOutput)
}

// BackupResourceHook defines a hook for a resource.
type ScheduleSpecTemplateHooksResourcesPreOutput struct{ *pulumi.OutputState }

func (ScheduleSpecTemplateHooksResourcesPreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleSpecTemplateHooksResourcesPre)(nil)).Elem()
}

func (o ScheduleSpecTemplateHooksResourcesPreOutput) ToScheduleSpecTemplateHooksResourcesPreOutput() ScheduleSpecTemplateHooksResourcesPreOutput {
	return o
}

func (o ScheduleSpecTemplateHooksResourcesPreOutput) ToScheduleSpecTemplateHooksResourcesPreOutputWithContext(ctx context.Context) ScheduleSpecTemplateHooksResourcesPreOutput {
	return o
}

// Exec defines an exec hook.
func (o ScheduleSpecTemplateHooksResourcesPreOutput) Exec() ScheduleSpecTemplateHooksResourcesPreExecOutput {
	return o.ApplyT(func(v ScheduleSpecTemplateHooksResourcesPre) ScheduleSpecTemplateHooksResourcesPreExec { return v.Exec }).(ScheduleSpecTemplateHooksResourcesPreExecOutput)
}

type ScheduleSpecTemplateHooksResourcesPreArrayOutput struct{ *pulumi.OutputState }

func (ScheduleSpecTemplateHooksResourcesPreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleSpecTemplateHooksResourcesPre)(nil)).Elem()
}

func (o ScheduleSpecTemplateHooksResourcesPreArrayOutput) ToScheduleSpecTemplateHooksResourcesPreArrayOutput() ScheduleSpecTemplateHooksResourcesPreArrayOutput {
	return o
}

func (o ScheduleSpecTemplateHooksResourcesPreArrayOutput) ToScheduleSpecTemplateHooksResourcesPreArrayOutputWithContext(ctx context.Context) ScheduleSpecTemplateHooksResourcesPreArrayOutput {
	return o
}

func (o ScheduleSpecTemplateHooksResourcesPreArrayOutput) Index(i pulumi.IntInput) ScheduleSpecTemplateHooksResourcesPreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScheduleSpecTemplateHooksResourcesPre {
		return vs[0].([]ScheduleSpecTemplateHooksResourcesPre)[vs[1].(int)]
	}).(ScheduleSpecTemplateHooksResourcesPreOutput)
}

// Exec defines an exec hook.
type ScheduleSpecTemplateHooksResourcesPreExec struct {
	// Command is the command and arguments to execute.
	Command []string `pulumi:"command"`
	// Container is the container in the pod where the command should be executed. If not specified, the pod's first container is used.
	Container *string `pulumi:"container"`
	// OnError specifies how Velero should behave if it encounters an error executing this hook.
	OnError *string `pulumi:"onError"`
	// Timeout defines the maximum amount of time Velero should wait for the hook to complete before considering the execution a failure.
	Timeout *string `pulumi:"timeout"`
}

// ScheduleSpecTemplateHooksResourcesPreExecInput is an input type that accepts ScheduleSpecTemplateHooksResourcesPreExecArgs and ScheduleSpecTemplateHooksResourcesPreExecOutput values.
// You can construct a concrete instance of `ScheduleSpecTemplateHooksResourcesPreExecInput` via:
//
//          ScheduleSpecTemplateHooksResourcesPreExecArgs{...}
type ScheduleSpecTemplateHooksResourcesPreExecInput interface {
	pulumi.Input

	ToScheduleSpecTemplateHooksResourcesPreExecOutput() ScheduleSpecTemplateHooksResourcesPreExecOutput
	ToScheduleSpecTemplateHooksResourcesPreExecOutputWithContext(context.Context) ScheduleSpecTemplateHooksResourcesPreExecOutput
}

// Exec defines an exec hook.
type ScheduleSpecTemplateHooksResourcesPreExecArgs struct {
	// Command is the command and arguments to execute.
	Command pulumi.StringArrayInput `pulumi:"command"`
	// Container is the container in the pod where the command should be executed. If not specified, the pod's first container is used.
	Container pulumi.StringPtrInput `pulumi:"container"`
	// OnError specifies how Velero should behave if it encounters an error executing this hook.
	OnError pulumi.StringPtrInput `pulumi:"onError"`
	// Timeout defines the maximum amount of time Velero should wait for the hook to complete before considering the execution a failure.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (ScheduleSpecTemplateHooksResourcesPreExecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleSpecTemplateHooksResourcesPreExec)(nil)).Elem()
}

func (i ScheduleSpecTemplateHooksResourcesPreExecArgs) ToScheduleSpecTemplateHooksResourcesPreExecOutput() ScheduleSpecTemplateHooksResourcesPreExecOutput {
	return i.ToScheduleSpecTemplateHooksResourcesPreExecOutputWithContext(context.Background())
}

func (i ScheduleSpecTemplateHooksResourcesPreExecArgs) ToScheduleSpecTemplateHooksResourcesPreExecOutputWithContext(ctx context.Context) ScheduleSpecTemplateHooksResourcesPreExecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleSpecTemplateHooksResourcesPreExecOutput)
}

// Exec defines an exec hook.
type ScheduleSpecTemplateHooksResourcesPreExecOutput struct{ *pulumi.OutputState }

func (ScheduleSpecTemplateHooksResourcesPreExecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleSpecTemplateHooksResourcesPreExec)(nil)).Elem()
}

func (o ScheduleSpecTemplateHooksResourcesPreExecOutput) ToScheduleSpecTemplateHooksResourcesPreExecOutput() ScheduleSpecTemplateHooksResourcesPreExecOutput {
	return o
}

func (o ScheduleSpecTemplateHooksResourcesPreExecOutput) ToScheduleSpecTemplateHooksResourcesPreExecOutputWithContext(ctx context.Context) ScheduleSpecTemplateHooksResourcesPreExecOutput {
	return o
}

// Command is the command and arguments to execute.
func (o ScheduleSpecTemplateHooksResourcesPreExecOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScheduleSpecTemplateHooksResourcesPreExec) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// Container is the container in the pod where the command should be executed. If not specified, the pod's first container is used.
func (o ScheduleSpecTemplateHooksResourcesPreExecOutput) Container() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleSpecTemplateHooksResourcesPreExec) *string { return v.Container }).(pulumi.StringPtrOutput)
}

// OnError specifies how Velero should behave if it encounters an error executing this hook.
func (o ScheduleSpecTemplateHooksResourcesPreExecOutput) OnError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleSpecTemplateHooksResourcesPreExec) *string { return v.OnError }).(pulumi.StringPtrOutput)
}

// Timeout defines the maximum amount of time Velero should wait for the hook to complete before considering the execution a failure.
func (o ScheduleSpecTemplateHooksResourcesPreExecOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleSpecTemplateHooksResourcesPreExec) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// LabelSelector is a metav1.LabelSelector to filter with when adding individual objects to the backup. If empty or nil, all objects are included. Optional.
type ScheduleSpecTemplateLabelSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []ScheduleSpecTemplateLabelSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// ScheduleSpecTemplateLabelSelectorInput is an input type that accepts ScheduleSpecTemplateLabelSelectorArgs and ScheduleSpecTemplateLabelSelectorOutput values.
// You can construct a concrete instance of `ScheduleSpecTemplateLabelSelectorInput` via:
//
//          ScheduleSpecTemplateLabelSelectorArgs{...}
type ScheduleSpecTemplateLabelSelectorInput interface {
	pulumi.Input

	ToScheduleSpecTemplateLabelSelectorOutput() ScheduleSpecTemplateLabelSelectorOutput
	ToScheduleSpecTemplateLabelSelectorOutputWithContext(context.Context) ScheduleSpecTemplateLabelSelectorOutput
}

// LabelSelector is a metav1.LabelSelector to filter with when adding individual objects to the backup. If empty or nil, all objects are included. Optional.
type ScheduleSpecTemplateLabelSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions ScheduleSpecTemplateLabelSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (ScheduleSpecTemplateLabelSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleSpecTemplateLabelSelector)(nil)).Elem()
}

func (i ScheduleSpecTemplateLabelSelectorArgs) ToScheduleSpecTemplateLabelSelectorOutput() ScheduleSpecTemplateLabelSelectorOutput {
	return i.ToScheduleSpecTemplateLabelSelectorOutputWithContext(context.Background())
}

func (i ScheduleSpecTemplateLabelSelectorArgs) ToScheduleSpecTemplateLabelSelectorOutputWithContext(ctx context.Context) ScheduleSpecTemplateLabelSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleSpecTemplateLabelSelectorOutput)
}

func (i ScheduleSpecTemplateLabelSelectorArgs) ToScheduleSpecTemplateLabelSelectorPtrOutput() ScheduleSpecTemplateLabelSelectorPtrOutput {
	return i.ToScheduleSpecTemplateLabelSelectorPtrOutputWithContext(context.Background())
}

func (i ScheduleSpecTemplateLabelSelectorArgs) ToScheduleSpecTemplateLabelSelectorPtrOutputWithContext(ctx context.Context) ScheduleSpecTemplateLabelSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleSpecTemplateLabelSelectorOutput).ToScheduleSpecTemplateLabelSelectorPtrOutputWithContext(ctx)
}

// ScheduleSpecTemplateLabelSelectorPtrInput is an input type that accepts ScheduleSpecTemplateLabelSelectorArgs, ScheduleSpecTemplateLabelSelectorPtr and ScheduleSpecTemplateLabelSelectorPtrOutput values.
// You can construct a concrete instance of `ScheduleSpecTemplateLabelSelectorPtrInput` via:
//
//          ScheduleSpecTemplateLabelSelectorArgs{...}
//
//  or:
//
//          nil
type ScheduleSpecTemplateLabelSelectorPtrInput interface {
	pulumi.Input

	ToScheduleSpecTemplateLabelSelectorPtrOutput() ScheduleSpecTemplateLabelSelectorPtrOutput
	ToScheduleSpecTemplateLabelSelectorPtrOutputWithContext(context.Context) ScheduleSpecTemplateLabelSelectorPtrOutput
}

type scheduleSpecTemplateLabelSelectorPtrType ScheduleSpecTemplateLabelSelectorArgs

func ScheduleSpecTemplateLabelSelectorPtr(v *ScheduleSpecTemplateLabelSelectorArgs) ScheduleSpecTemplateLabelSelectorPtrInput {
	return (*scheduleSpecTemplateLabelSelectorPtrType)(v)
}

func (*scheduleSpecTemplateLabelSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleSpecTemplateLabelSelector)(nil)).Elem()
}

func (i *scheduleSpecTemplateLabelSelectorPtrType) ToScheduleSpecTemplateLabelSelectorPtrOutput() ScheduleSpecTemplateLabelSelectorPtrOutput {
	return i.ToScheduleSpecTemplateLabelSelectorPtrOutputWithContext(context.Background())
}

func (i *scheduleSpecTemplateLabelSelectorPtrType) ToScheduleSpecTemplateLabelSelectorPtrOutputWithContext(ctx context.Context) ScheduleSpecTemplateLabelSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleSpecTemplateLabelSelectorPtrOutput)
}

// LabelSelector is a metav1.LabelSelector to filter with when adding individual objects to the backup. If empty or nil, all objects are included. Optional.
type ScheduleSpecTemplateLabelSelectorOutput struct{ *pulumi.OutputState }

func (ScheduleSpecTemplateLabelSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleSpecTemplateLabelSelector)(nil)).Elem()
}

func (o ScheduleSpecTemplateLabelSelectorOutput) ToScheduleSpecTemplateLabelSelectorOutput() ScheduleSpecTemplateLabelSelectorOutput {
	return o
}

func (o ScheduleSpecTemplateLabelSelectorOutput) ToScheduleSpecTemplateLabelSelectorOutputWithContext(ctx context.Context) ScheduleSpecTemplateLabelSelectorOutput {
	return o
}

func (o ScheduleSpecTemplateLabelSelectorOutput) ToScheduleSpecTemplateLabelSelectorPtrOutput() ScheduleSpecTemplateLabelSelectorPtrOutput {
	return o.ToScheduleSpecTemplateLabelSelectorPtrOutputWithContext(context.Background())
}

func (o ScheduleSpecTemplateLabelSelectorOutput) ToScheduleSpecTemplateLabelSelectorPtrOutputWithContext(ctx context.Context) ScheduleSpecTemplateLabelSelectorPtrOutput {
	return o.ApplyT(func(v ScheduleSpecTemplateLabelSelector) *ScheduleSpecTemplateLabelSelector {
		return &v
	}).(ScheduleSpecTemplateLabelSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ScheduleSpecTemplateLabelSelectorOutput) MatchExpressions() ScheduleSpecTemplateLabelSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v ScheduleSpecTemplateLabelSelector) []ScheduleSpecTemplateLabelSelectorMatchExpressions {
		return v.MatchExpressions
	}).(ScheduleSpecTemplateLabelSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ScheduleSpecTemplateLabelSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ScheduleSpecTemplateLabelSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type ScheduleSpecTemplateLabelSelectorPtrOutput struct{ *pulumi.OutputState }

func (ScheduleSpecTemplateLabelSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleSpecTemplateLabelSelector)(nil)).Elem()
}

func (o ScheduleSpecTemplateLabelSelectorPtrOutput) ToScheduleSpecTemplateLabelSelectorPtrOutput() ScheduleSpecTemplateLabelSelectorPtrOutput {
	return o
}

func (o ScheduleSpecTemplateLabelSelectorPtrOutput) ToScheduleSpecTemplateLabelSelectorPtrOutputWithContext(ctx context.Context) ScheduleSpecTemplateLabelSelectorPtrOutput {
	return o
}

func (o ScheduleSpecTemplateLabelSelectorPtrOutput) Elem() ScheduleSpecTemplateLabelSelectorOutput {
	return o.ApplyT(func(v *ScheduleSpecTemplateLabelSelector) ScheduleSpecTemplateLabelSelector { return *v }).(ScheduleSpecTemplateLabelSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ScheduleSpecTemplateLabelSelectorPtrOutput) MatchExpressions() ScheduleSpecTemplateLabelSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *ScheduleSpecTemplateLabelSelector) []ScheduleSpecTemplateLabelSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(ScheduleSpecTemplateLabelSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ScheduleSpecTemplateLabelSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ScheduleSpecTemplateLabelSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type ScheduleSpecTemplateLabelSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// ScheduleSpecTemplateLabelSelectorMatchExpressionsInput is an input type that accepts ScheduleSpecTemplateLabelSelectorMatchExpressionsArgs and ScheduleSpecTemplateLabelSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `ScheduleSpecTemplateLabelSelectorMatchExpressionsInput` via:
//
//          ScheduleSpecTemplateLabelSelectorMatchExpressionsArgs{...}
type ScheduleSpecTemplateLabelSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToScheduleSpecTemplateLabelSelectorMatchExpressionsOutput() ScheduleSpecTemplateLabelSelectorMatchExpressionsOutput
	ToScheduleSpecTemplateLabelSelectorMatchExpressionsOutputWithContext(context.Context) ScheduleSpecTemplateLabelSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type ScheduleSpecTemplateLabelSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ScheduleSpecTemplateLabelSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleSpecTemplateLabelSelectorMatchExpressions)(nil)).Elem()
}

func (i ScheduleSpecTemplateLabelSelectorMatchExpressionsArgs) ToScheduleSpecTemplateLabelSelectorMatchExpressionsOutput() ScheduleSpecTemplateLabelSelectorMatchExpressionsOutput {
	return i.ToScheduleSpecTemplateLabelSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i ScheduleSpecTemplateLabelSelectorMatchExpressionsArgs) ToScheduleSpecTemplateLabelSelectorMatchExpressionsOutputWithContext(ctx context.Context) ScheduleSpecTemplateLabelSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleSpecTemplateLabelSelectorMatchExpressionsOutput)
}

// ScheduleSpecTemplateLabelSelectorMatchExpressionsArrayInput is an input type that accepts ScheduleSpecTemplateLabelSelectorMatchExpressionsArray and ScheduleSpecTemplateLabelSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `ScheduleSpecTemplateLabelSelectorMatchExpressionsArrayInput` via:
//
//          ScheduleSpecTemplateLabelSelectorMatchExpressionsArray{ ScheduleSpecTemplateLabelSelectorMatchExpressionsArgs{...} }
type ScheduleSpecTemplateLabelSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToScheduleSpecTemplateLabelSelectorMatchExpressionsArrayOutput() ScheduleSpecTemplateLabelSelectorMatchExpressionsArrayOutput
	ToScheduleSpecTemplateLabelSelectorMatchExpressionsArrayOutputWithContext(context.Context) ScheduleSpecTemplateLabelSelectorMatchExpressionsArrayOutput
}

type ScheduleSpecTemplateLabelSelectorMatchExpressionsArray []ScheduleSpecTemplateLabelSelectorMatchExpressionsInput

func (ScheduleSpecTemplateLabelSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleSpecTemplateLabelSelectorMatchExpressions)(nil)).Elem()
}

func (i ScheduleSpecTemplateLabelSelectorMatchExpressionsArray) ToScheduleSpecTemplateLabelSelectorMatchExpressionsArrayOutput() ScheduleSpecTemplateLabelSelectorMatchExpressionsArrayOutput {
	return i.ToScheduleSpecTemplateLabelSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i ScheduleSpecTemplateLabelSelectorMatchExpressionsArray) ToScheduleSpecTemplateLabelSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) ScheduleSpecTemplateLabelSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleSpecTemplateLabelSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type ScheduleSpecTemplateLabelSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (ScheduleSpecTemplateLabelSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleSpecTemplateLabelSelectorMatchExpressions)(nil)).Elem()
}

func (o ScheduleSpecTemplateLabelSelectorMatchExpressionsOutput) ToScheduleSpecTemplateLabelSelectorMatchExpressionsOutput() ScheduleSpecTemplateLabelSelectorMatchExpressionsOutput {
	return o
}

func (o ScheduleSpecTemplateLabelSelectorMatchExpressionsOutput) ToScheduleSpecTemplateLabelSelectorMatchExpressionsOutputWithContext(ctx context.Context) ScheduleSpecTemplateLabelSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o ScheduleSpecTemplateLabelSelectorMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleSpecTemplateLabelSelectorMatchExpressions) string { return v.Key }).(pulumi.StringOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o ScheduleSpecTemplateLabelSelectorMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleSpecTemplateLabelSelectorMatchExpressions) string { return v.Operator }).(pulumi.StringOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o ScheduleSpecTemplateLabelSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScheduleSpecTemplateLabelSelectorMatchExpressions) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ScheduleSpecTemplateLabelSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (ScheduleSpecTemplateLabelSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleSpecTemplateLabelSelectorMatchExpressions)(nil)).Elem()
}

func (o ScheduleSpecTemplateLabelSelectorMatchExpressionsArrayOutput) ToScheduleSpecTemplateLabelSelectorMatchExpressionsArrayOutput() ScheduleSpecTemplateLabelSelectorMatchExpressionsArrayOutput {
	return o
}

func (o ScheduleSpecTemplateLabelSelectorMatchExpressionsArrayOutput) ToScheduleSpecTemplateLabelSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) ScheduleSpecTemplateLabelSelectorMatchExpressionsArrayOutput {
	return o
}

func (o ScheduleSpecTemplateLabelSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) ScheduleSpecTemplateLabelSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScheduleSpecTemplateLabelSelectorMatchExpressions {
		return vs[0].([]ScheduleSpecTemplateLabelSelectorMatchExpressions)[vs[1].(int)]
	}).(ScheduleSpecTemplateLabelSelectorMatchExpressionsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type ScheduleSpecTemplateLabelSelectorMatchLabels struct {
}

// ScheduleSpecTemplateLabelSelectorMatchLabelsInput is an input type that accepts ScheduleSpecTemplateLabelSelectorMatchLabelsArgs and ScheduleSpecTemplateLabelSelectorMatchLabelsOutput values.
// You can construct a concrete instance of `ScheduleSpecTemplateLabelSelectorMatchLabelsInput` via:
//
//          ScheduleSpecTemplateLabelSelectorMatchLabelsArgs{...}
type ScheduleSpecTemplateLabelSelectorMatchLabelsInput interface {
	pulumi.Input

	ToScheduleSpecTemplateLabelSelectorMatchLabelsOutput() ScheduleSpecTemplateLabelSelectorMatchLabelsOutput
	ToScheduleSpecTemplateLabelSelectorMatchLabelsOutputWithContext(context.Context) ScheduleSpecTemplateLabelSelectorMatchLabelsOutput
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type ScheduleSpecTemplateLabelSelectorMatchLabelsArgs struct {
}

func (ScheduleSpecTemplateLabelSelectorMatchLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleSpecTemplateLabelSelectorMatchLabels)(nil)).Elem()
}

func (i ScheduleSpecTemplateLabelSelectorMatchLabelsArgs) ToScheduleSpecTemplateLabelSelectorMatchLabelsOutput() ScheduleSpecTemplateLabelSelectorMatchLabelsOutput {
	return i.ToScheduleSpecTemplateLabelSelectorMatchLabelsOutputWithContext(context.Background())
}

func (i ScheduleSpecTemplateLabelSelectorMatchLabelsArgs) ToScheduleSpecTemplateLabelSelectorMatchLabelsOutputWithContext(ctx context.Context) ScheduleSpecTemplateLabelSelectorMatchLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleSpecTemplateLabelSelectorMatchLabelsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type ScheduleSpecTemplateLabelSelectorMatchLabelsOutput struct{ *pulumi.OutputState }

func (ScheduleSpecTemplateLabelSelectorMatchLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleSpecTemplateLabelSelectorMatchLabels)(nil)).Elem()
}

func (o ScheduleSpecTemplateLabelSelectorMatchLabelsOutput) ToScheduleSpecTemplateLabelSelectorMatchLabelsOutput() ScheduleSpecTemplateLabelSelectorMatchLabelsOutput {
	return o
}

func (o ScheduleSpecTemplateLabelSelectorMatchLabelsOutput) ToScheduleSpecTemplateLabelSelectorMatchLabelsOutputWithContext(ctx context.Context) ScheduleSpecTemplateLabelSelectorMatchLabelsOutput {
	return o
}

// ScheduleStatus captures the current state of a Velero schedule
type ScheduleStatus struct {
	// LastBackup is the last time a Backup was run for this Schedule schedule
	LastBackup *string `pulumi:"lastBackup"`
	// Phase is the current phase of the Schedule
	Phase *string `pulumi:"phase"`
	// ValidationErrors is a slice of all validation errors (if applicable)
	ValidationErrors []string `pulumi:"validationErrors"`
}

// ScheduleStatusInput is an input type that accepts ScheduleStatusArgs and ScheduleStatusOutput values.
// You can construct a concrete instance of `ScheduleStatusInput` via:
//
//          ScheduleStatusArgs{...}
type ScheduleStatusInput interface {
	pulumi.Input

	ToScheduleStatusOutput() ScheduleStatusOutput
	ToScheduleStatusOutputWithContext(context.Context) ScheduleStatusOutput
}

// ScheduleStatus captures the current state of a Velero schedule
type ScheduleStatusArgs struct {
	// LastBackup is the last time a Backup was run for this Schedule schedule
	LastBackup pulumi.StringPtrInput `pulumi:"lastBackup"`
	// Phase is the current phase of the Schedule
	Phase pulumi.StringPtrInput `pulumi:"phase"`
	// ValidationErrors is a slice of all validation errors (if applicable)
	ValidationErrors pulumi.StringArrayInput `pulumi:"validationErrors"`
}

func (ScheduleStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleStatus)(nil)).Elem()
}

func (i ScheduleStatusArgs) ToScheduleStatusOutput() ScheduleStatusOutput {
	return i.ToScheduleStatusOutputWithContext(context.Background())
}

func (i ScheduleStatusArgs) ToScheduleStatusOutputWithContext(ctx context.Context) ScheduleStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleStatusOutput)
}

func (i ScheduleStatusArgs) ToScheduleStatusPtrOutput() ScheduleStatusPtrOutput {
	return i.ToScheduleStatusPtrOutputWithContext(context.Background())
}

func (i ScheduleStatusArgs) ToScheduleStatusPtrOutputWithContext(ctx context.Context) ScheduleStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleStatusOutput).ToScheduleStatusPtrOutputWithContext(ctx)
}

// ScheduleStatusPtrInput is an input type that accepts ScheduleStatusArgs, ScheduleStatusPtr and ScheduleStatusPtrOutput values.
// You can construct a concrete instance of `ScheduleStatusPtrInput` via:
//
//          ScheduleStatusArgs{...}
//
//  or:
//
//          nil
type ScheduleStatusPtrInput interface {
	pulumi.Input

	ToScheduleStatusPtrOutput() ScheduleStatusPtrOutput
	ToScheduleStatusPtrOutputWithContext(context.Context) ScheduleStatusPtrOutput
}

type scheduleStatusPtrType ScheduleStatusArgs

func ScheduleStatusPtr(v *ScheduleStatusArgs) ScheduleStatusPtrInput {
	return (*scheduleStatusPtrType)(v)
}

func (*scheduleStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleStatus)(nil)).Elem()
}

func (i *scheduleStatusPtrType) ToScheduleStatusPtrOutput() ScheduleStatusPtrOutput {
	return i.ToScheduleStatusPtrOutputWithContext(context.Background())
}

func (i *scheduleStatusPtrType) ToScheduleStatusPtrOutputWithContext(ctx context.Context) ScheduleStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleStatusPtrOutput)
}

// ScheduleStatus captures the current state of a Velero schedule
type ScheduleStatusOutput struct{ *pulumi.OutputState }

func (ScheduleStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleStatus)(nil)).Elem()
}

func (o ScheduleStatusOutput) ToScheduleStatusOutput() ScheduleStatusOutput {
	return o
}

func (o ScheduleStatusOutput) ToScheduleStatusOutputWithContext(ctx context.Context) ScheduleStatusOutput {
	return o
}

func (o ScheduleStatusOutput) ToScheduleStatusPtrOutput() ScheduleStatusPtrOutput {
	return o.ToScheduleStatusPtrOutputWithContext(context.Background())
}

func (o ScheduleStatusOutput) ToScheduleStatusPtrOutputWithContext(ctx context.Context) ScheduleStatusPtrOutput {
	return o.ApplyT(func(v ScheduleStatus) *ScheduleStatus {
		return &v
	}).(ScheduleStatusPtrOutput)
}

// LastBackup is the last time a Backup was run for this Schedule schedule
func (o ScheduleStatusOutput) LastBackup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleStatus) *string { return v.LastBackup }).(pulumi.StringPtrOutput)
}

// Phase is the current phase of the Schedule
func (o ScheduleStatusOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleStatus) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

// ValidationErrors is a slice of all validation errors (if applicable)
func (o ScheduleStatusOutput) ValidationErrors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScheduleStatus) []string { return v.ValidationErrors }).(pulumi.StringArrayOutput)
}

type ScheduleStatusPtrOutput struct{ *pulumi.OutputState }

func (ScheduleStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleStatus)(nil)).Elem()
}

func (o ScheduleStatusPtrOutput) ToScheduleStatusPtrOutput() ScheduleStatusPtrOutput {
	return o
}

func (o ScheduleStatusPtrOutput) ToScheduleStatusPtrOutputWithContext(ctx context.Context) ScheduleStatusPtrOutput {
	return o
}

func (o ScheduleStatusPtrOutput) Elem() ScheduleStatusOutput {
	return o.ApplyT(func(v *ScheduleStatus) ScheduleStatus { return *v }).(ScheduleStatusOutput)
}

// LastBackup is the last time a Backup was run for this Schedule schedule
func (o ScheduleStatusPtrOutput) LastBackup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleStatus) *string {
		if v == nil {
			return nil
		}
		return v.LastBackup
	}).(pulumi.StringPtrOutput)
}

// Phase is the current phase of the Schedule
func (o ScheduleStatusPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleStatus) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

// ValidationErrors is a slice of all validation errors (if applicable)
func (o ScheduleStatusPtrOutput) ValidationErrors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ScheduleStatus) []string {
		if v == nil {
			return nil
		}
		return v.ValidationErrors
	}).(pulumi.StringArrayOutput)
}

// ServerStatusRequest is a request to access current status information about the Velero server.
type ServerStatusRequestType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// ServerStatusRequestSpec is the specification for a ServerStatusRequest.
	Spec map[string]interface{} `pulumi:"spec"`
	// ServerStatusRequestStatus is the current status of a ServerStatusRequest.
	Status *ServerStatusRequestStatus `pulumi:"status"`
}

// ServerStatusRequestTypeInput is an input type that accepts ServerStatusRequestTypeArgs and ServerStatusRequestTypeOutput values.
// You can construct a concrete instance of `ServerStatusRequestTypeInput` via:
//
//          ServerStatusRequestTypeArgs{...}
type ServerStatusRequestTypeInput interface {
	pulumi.Input

	ToServerStatusRequestTypeOutput() ServerStatusRequestTypeOutput
	ToServerStatusRequestTypeOutputWithContext(context.Context) ServerStatusRequestTypeOutput
}

// ServerStatusRequest is a request to access current status information about the Velero server.
type ServerStatusRequestTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// ServerStatusRequestSpec is the specification for a ServerStatusRequest.
	Spec pulumi.MapInput `pulumi:"spec"`
	// ServerStatusRequestStatus is the current status of a ServerStatusRequest.
	Status ServerStatusRequestStatusPtrInput `pulumi:"status"`
}

func (ServerStatusRequestTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerStatusRequestType)(nil)).Elem()
}

func (i ServerStatusRequestTypeArgs) ToServerStatusRequestTypeOutput() ServerStatusRequestTypeOutput {
	return i.ToServerStatusRequestTypeOutputWithContext(context.Background())
}

func (i ServerStatusRequestTypeArgs) ToServerStatusRequestTypeOutputWithContext(ctx context.Context) ServerStatusRequestTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerStatusRequestTypeOutput)
}

// ServerStatusRequest is a request to access current status information about the Velero server.
type ServerStatusRequestTypeOutput struct{ *pulumi.OutputState }

func (ServerStatusRequestTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerStatusRequestType)(nil)).Elem()
}

func (o ServerStatusRequestTypeOutput) ToServerStatusRequestTypeOutput() ServerStatusRequestTypeOutput {
	return o
}

func (o ServerStatusRequestTypeOutput) ToServerStatusRequestTypeOutputWithContext(ctx context.Context) ServerStatusRequestTypeOutput {
	return o
}

func (o ServerStatusRequestTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerStatusRequestType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o ServerStatusRequestTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerStatusRequestType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o ServerStatusRequestTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ServerStatusRequestType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// ServerStatusRequestSpec is the specification for a ServerStatusRequest.
func (o ServerStatusRequestTypeOutput) Spec() pulumi.MapOutput {
	return o.ApplyT(func(v ServerStatusRequestType) map[string]interface{} { return v.Spec }).(pulumi.MapOutput)
}

// ServerStatusRequestStatus is the current status of a ServerStatusRequest.
func (o ServerStatusRequestTypeOutput) Status() ServerStatusRequestStatusPtrOutput {
	return o.ApplyT(func(v ServerStatusRequestType) *ServerStatusRequestStatus { return v.Status }).(ServerStatusRequestStatusPtrOutput)
}

type ServerStatusRequestMetadata struct {
}

// ServerStatusRequestMetadataInput is an input type that accepts ServerStatusRequestMetadataArgs and ServerStatusRequestMetadataOutput values.
// You can construct a concrete instance of `ServerStatusRequestMetadataInput` via:
//
//          ServerStatusRequestMetadataArgs{...}
type ServerStatusRequestMetadataInput interface {
	pulumi.Input

	ToServerStatusRequestMetadataOutput() ServerStatusRequestMetadataOutput
	ToServerStatusRequestMetadataOutputWithContext(context.Context) ServerStatusRequestMetadataOutput
}

type ServerStatusRequestMetadataArgs struct {
}

func (ServerStatusRequestMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerStatusRequestMetadata)(nil)).Elem()
}

func (i ServerStatusRequestMetadataArgs) ToServerStatusRequestMetadataOutput() ServerStatusRequestMetadataOutput {
	return i.ToServerStatusRequestMetadataOutputWithContext(context.Background())
}

func (i ServerStatusRequestMetadataArgs) ToServerStatusRequestMetadataOutputWithContext(ctx context.Context) ServerStatusRequestMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerStatusRequestMetadataOutput)
}

type ServerStatusRequestMetadataOutput struct{ *pulumi.OutputState }

func (ServerStatusRequestMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerStatusRequestMetadata)(nil)).Elem()
}

func (o ServerStatusRequestMetadataOutput) ToServerStatusRequestMetadataOutput() ServerStatusRequestMetadataOutput {
	return o
}

func (o ServerStatusRequestMetadataOutput) ToServerStatusRequestMetadataOutputWithContext(ctx context.Context) ServerStatusRequestMetadataOutput {
	return o
}

// ServerStatusRequestSpec is the specification for a ServerStatusRequest.
type ServerStatusRequestSpec struct {
}

// ServerStatusRequestSpecInput is an input type that accepts ServerStatusRequestSpecArgs and ServerStatusRequestSpecOutput values.
// You can construct a concrete instance of `ServerStatusRequestSpecInput` via:
//
//          ServerStatusRequestSpecArgs{...}
type ServerStatusRequestSpecInput interface {
	pulumi.Input

	ToServerStatusRequestSpecOutput() ServerStatusRequestSpecOutput
	ToServerStatusRequestSpecOutputWithContext(context.Context) ServerStatusRequestSpecOutput
}

// ServerStatusRequestSpec is the specification for a ServerStatusRequest.
type ServerStatusRequestSpecArgs struct {
}

func (ServerStatusRequestSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerStatusRequestSpec)(nil)).Elem()
}

func (i ServerStatusRequestSpecArgs) ToServerStatusRequestSpecOutput() ServerStatusRequestSpecOutput {
	return i.ToServerStatusRequestSpecOutputWithContext(context.Background())
}

func (i ServerStatusRequestSpecArgs) ToServerStatusRequestSpecOutputWithContext(ctx context.Context) ServerStatusRequestSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerStatusRequestSpecOutput)
}

// ServerStatusRequestSpec is the specification for a ServerStatusRequest.
type ServerStatusRequestSpecOutput struct{ *pulumi.OutputState }

func (ServerStatusRequestSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerStatusRequestSpec)(nil)).Elem()
}

func (o ServerStatusRequestSpecOutput) ToServerStatusRequestSpecOutput() ServerStatusRequestSpecOutput {
	return o
}

func (o ServerStatusRequestSpecOutput) ToServerStatusRequestSpecOutputWithContext(ctx context.Context) ServerStatusRequestSpecOutput {
	return o
}

// ServerStatusRequestStatus is the current status of a ServerStatusRequest.
type ServerStatusRequestStatus struct {
	// Phase is the current lifecycle phase of the ServerStatusRequest.
	Phase *string `pulumi:"phase"`
	// Plugins list information about the plugins running on the Velero server
	Plugins []ServerStatusRequestStatusPlugins `pulumi:"plugins"`
	// ProcessedTimestamp is when the ServerStatusRequest was processed by the ServerStatusRequestController.
	ProcessedTimestamp *string `pulumi:"processedTimestamp"`
	// ServerVersion is the Velero server version.
	ServerVersion *string `pulumi:"serverVersion"`
}

// ServerStatusRequestStatusInput is an input type that accepts ServerStatusRequestStatusArgs and ServerStatusRequestStatusOutput values.
// You can construct a concrete instance of `ServerStatusRequestStatusInput` via:
//
//          ServerStatusRequestStatusArgs{...}
type ServerStatusRequestStatusInput interface {
	pulumi.Input

	ToServerStatusRequestStatusOutput() ServerStatusRequestStatusOutput
	ToServerStatusRequestStatusOutputWithContext(context.Context) ServerStatusRequestStatusOutput
}

// ServerStatusRequestStatus is the current status of a ServerStatusRequest.
type ServerStatusRequestStatusArgs struct {
	// Phase is the current lifecycle phase of the ServerStatusRequest.
	Phase pulumi.StringPtrInput `pulumi:"phase"`
	// Plugins list information about the plugins running on the Velero server
	Plugins ServerStatusRequestStatusPluginsArrayInput `pulumi:"plugins"`
	// ProcessedTimestamp is when the ServerStatusRequest was processed by the ServerStatusRequestController.
	ProcessedTimestamp pulumi.StringPtrInput `pulumi:"processedTimestamp"`
	// ServerVersion is the Velero server version.
	ServerVersion pulumi.StringPtrInput `pulumi:"serverVersion"`
}

func (ServerStatusRequestStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerStatusRequestStatus)(nil)).Elem()
}

func (i ServerStatusRequestStatusArgs) ToServerStatusRequestStatusOutput() ServerStatusRequestStatusOutput {
	return i.ToServerStatusRequestStatusOutputWithContext(context.Background())
}

func (i ServerStatusRequestStatusArgs) ToServerStatusRequestStatusOutputWithContext(ctx context.Context) ServerStatusRequestStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerStatusRequestStatusOutput)
}

func (i ServerStatusRequestStatusArgs) ToServerStatusRequestStatusPtrOutput() ServerStatusRequestStatusPtrOutput {
	return i.ToServerStatusRequestStatusPtrOutputWithContext(context.Background())
}

func (i ServerStatusRequestStatusArgs) ToServerStatusRequestStatusPtrOutputWithContext(ctx context.Context) ServerStatusRequestStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerStatusRequestStatusOutput).ToServerStatusRequestStatusPtrOutputWithContext(ctx)
}

// ServerStatusRequestStatusPtrInput is an input type that accepts ServerStatusRequestStatusArgs, ServerStatusRequestStatusPtr and ServerStatusRequestStatusPtrOutput values.
// You can construct a concrete instance of `ServerStatusRequestStatusPtrInput` via:
//
//          ServerStatusRequestStatusArgs{...}
//
//  or:
//
//          nil
type ServerStatusRequestStatusPtrInput interface {
	pulumi.Input

	ToServerStatusRequestStatusPtrOutput() ServerStatusRequestStatusPtrOutput
	ToServerStatusRequestStatusPtrOutputWithContext(context.Context) ServerStatusRequestStatusPtrOutput
}

type serverStatusRequestStatusPtrType ServerStatusRequestStatusArgs

func ServerStatusRequestStatusPtr(v *ServerStatusRequestStatusArgs) ServerStatusRequestStatusPtrInput {
	return (*serverStatusRequestStatusPtrType)(v)
}

func (*serverStatusRequestStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerStatusRequestStatus)(nil)).Elem()
}

func (i *serverStatusRequestStatusPtrType) ToServerStatusRequestStatusPtrOutput() ServerStatusRequestStatusPtrOutput {
	return i.ToServerStatusRequestStatusPtrOutputWithContext(context.Background())
}

func (i *serverStatusRequestStatusPtrType) ToServerStatusRequestStatusPtrOutputWithContext(ctx context.Context) ServerStatusRequestStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerStatusRequestStatusPtrOutput)
}

// ServerStatusRequestStatus is the current status of a ServerStatusRequest.
type ServerStatusRequestStatusOutput struct{ *pulumi.OutputState }

func (ServerStatusRequestStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerStatusRequestStatus)(nil)).Elem()
}

func (o ServerStatusRequestStatusOutput) ToServerStatusRequestStatusOutput() ServerStatusRequestStatusOutput {
	return o
}

func (o ServerStatusRequestStatusOutput) ToServerStatusRequestStatusOutputWithContext(ctx context.Context) ServerStatusRequestStatusOutput {
	return o
}

func (o ServerStatusRequestStatusOutput) ToServerStatusRequestStatusPtrOutput() ServerStatusRequestStatusPtrOutput {
	return o.ToServerStatusRequestStatusPtrOutputWithContext(context.Background())
}

func (o ServerStatusRequestStatusOutput) ToServerStatusRequestStatusPtrOutputWithContext(ctx context.Context) ServerStatusRequestStatusPtrOutput {
	return o.ApplyT(func(v ServerStatusRequestStatus) *ServerStatusRequestStatus {
		return &v
	}).(ServerStatusRequestStatusPtrOutput)
}

// Phase is the current lifecycle phase of the ServerStatusRequest.
func (o ServerStatusRequestStatusOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerStatusRequestStatus) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

// Plugins list information about the plugins running on the Velero server
func (o ServerStatusRequestStatusOutput) Plugins() ServerStatusRequestStatusPluginsArrayOutput {
	return o.ApplyT(func(v ServerStatusRequestStatus) []ServerStatusRequestStatusPlugins { return v.Plugins }).(ServerStatusRequestStatusPluginsArrayOutput)
}

// ProcessedTimestamp is when the ServerStatusRequest was processed by the ServerStatusRequestController.
func (o ServerStatusRequestStatusOutput) ProcessedTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerStatusRequestStatus) *string { return v.ProcessedTimestamp }).(pulumi.StringPtrOutput)
}

// ServerVersion is the Velero server version.
func (o ServerStatusRequestStatusOutput) ServerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerStatusRequestStatus) *string { return v.ServerVersion }).(pulumi.StringPtrOutput)
}

type ServerStatusRequestStatusPtrOutput struct{ *pulumi.OutputState }

func (ServerStatusRequestStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerStatusRequestStatus)(nil)).Elem()
}

func (o ServerStatusRequestStatusPtrOutput) ToServerStatusRequestStatusPtrOutput() ServerStatusRequestStatusPtrOutput {
	return o
}

func (o ServerStatusRequestStatusPtrOutput) ToServerStatusRequestStatusPtrOutputWithContext(ctx context.Context) ServerStatusRequestStatusPtrOutput {
	return o
}

func (o ServerStatusRequestStatusPtrOutput) Elem() ServerStatusRequestStatusOutput {
	return o.ApplyT(func(v *ServerStatusRequestStatus) ServerStatusRequestStatus { return *v }).(ServerStatusRequestStatusOutput)
}

// Phase is the current lifecycle phase of the ServerStatusRequest.
func (o ServerStatusRequestStatusPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerStatusRequestStatus) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

// Plugins list information about the plugins running on the Velero server
func (o ServerStatusRequestStatusPtrOutput) Plugins() ServerStatusRequestStatusPluginsArrayOutput {
	return o.ApplyT(func(v *ServerStatusRequestStatus) []ServerStatusRequestStatusPlugins {
		if v == nil {
			return nil
		}
		return v.Plugins
	}).(ServerStatusRequestStatusPluginsArrayOutput)
}

// ProcessedTimestamp is when the ServerStatusRequest was processed by the ServerStatusRequestController.
func (o ServerStatusRequestStatusPtrOutput) ProcessedTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerStatusRequestStatus) *string {
		if v == nil {
			return nil
		}
		return v.ProcessedTimestamp
	}).(pulumi.StringPtrOutput)
}

// ServerVersion is the Velero server version.
func (o ServerStatusRequestStatusPtrOutput) ServerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerStatusRequestStatus) *string {
		if v == nil {
			return nil
		}
		return v.ServerVersion
	}).(pulumi.StringPtrOutput)
}

// PluginInfo contains attributes of a Velero plugin
type ServerStatusRequestStatusPlugins struct {
	Kind string `pulumi:"kind"`
	Name string `pulumi:"name"`
}

// ServerStatusRequestStatusPluginsInput is an input type that accepts ServerStatusRequestStatusPluginsArgs and ServerStatusRequestStatusPluginsOutput values.
// You can construct a concrete instance of `ServerStatusRequestStatusPluginsInput` via:
//
//          ServerStatusRequestStatusPluginsArgs{...}
type ServerStatusRequestStatusPluginsInput interface {
	pulumi.Input

	ToServerStatusRequestStatusPluginsOutput() ServerStatusRequestStatusPluginsOutput
	ToServerStatusRequestStatusPluginsOutputWithContext(context.Context) ServerStatusRequestStatusPluginsOutput
}

// PluginInfo contains attributes of a Velero plugin
type ServerStatusRequestStatusPluginsArgs struct {
	Kind pulumi.StringInput `pulumi:"kind"`
	Name pulumi.StringInput `pulumi:"name"`
}

func (ServerStatusRequestStatusPluginsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerStatusRequestStatusPlugins)(nil)).Elem()
}

func (i ServerStatusRequestStatusPluginsArgs) ToServerStatusRequestStatusPluginsOutput() ServerStatusRequestStatusPluginsOutput {
	return i.ToServerStatusRequestStatusPluginsOutputWithContext(context.Background())
}

func (i ServerStatusRequestStatusPluginsArgs) ToServerStatusRequestStatusPluginsOutputWithContext(ctx context.Context) ServerStatusRequestStatusPluginsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerStatusRequestStatusPluginsOutput)
}

// ServerStatusRequestStatusPluginsArrayInput is an input type that accepts ServerStatusRequestStatusPluginsArray and ServerStatusRequestStatusPluginsArrayOutput values.
// You can construct a concrete instance of `ServerStatusRequestStatusPluginsArrayInput` via:
//
//          ServerStatusRequestStatusPluginsArray{ ServerStatusRequestStatusPluginsArgs{...} }
type ServerStatusRequestStatusPluginsArrayInput interface {
	pulumi.Input

	ToServerStatusRequestStatusPluginsArrayOutput() ServerStatusRequestStatusPluginsArrayOutput
	ToServerStatusRequestStatusPluginsArrayOutputWithContext(context.Context) ServerStatusRequestStatusPluginsArrayOutput
}

type ServerStatusRequestStatusPluginsArray []ServerStatusRequestStatusPluginsInput

func (ServerStatusRequestStatusPluginsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerStatusRequestStatusPlugins)(nil)).Elem()
}

func (i ServerStatusRequestStatusPluginsArray) ToServerStatusRequestStatusPluginsArrayOutput() ServerStatusRequestStatusPluginsArrayOutput {
	return i.ToServerStatusRequestStatusPluginsArrayOutputWithContext(context.Background())
}

func (i ServerStatusRequestStatusPluginsArray) ToServerStatusRequestStatusPluginsArrayOutputWithContext(ctx context.Context) ServerStatusRequestStatusPluginsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerStatusRequestStatusPluginsArrayOutput)
}

// PluginInfo contains attributes of a Velero plugin
type ServerStatusRequestStatusPluginsOutput struct{ *pulumi.OutputState }

func (ServerStatusRequestStatusPluginsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerStatusRequestStatusPlugins)(nil)).Elem()
}

func (o ServerStatusRequestStatusPluginsOutput) ToServerStatusRequestStatusPluginsOutput() ServerStatusRequestStatusPluginsOutput {
	return o
}

func (o ServerStatusRequestStatusPluginsOutput) ToServerStatusRequestStatusPluginsOutputWithContext(ctx context.Context) ServerStatusRequestStatusPluginsOutput {
	return o
}

func (o ServerStatusRequestStatusPluginsOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ServerStatusRequestStatusPlugins) string { return v.Kind }).(pulumi.StringOutput)
}

func (o ServerStatusRequestStatusPluginsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServerStatusRequestStatusPlugins) string { return v.Name }).(pulumi.StringOutput)
}

type ServerStatusRequestStatusPluginsArrayOutput struct{ *pulumi.OutputState }

func (ServerStatusRequestStatusPluginsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerStatusRequestStatusPlugins)(nil)).Elem()
}

func (o ServerStatusRequestStatusPluginsArrayOutput) ToServerStatusRequestStatusPluginsArrayOutput() ServerStatusRequestStatusPluginsArrayOutput {
	return o
}

func (o ServerStatusRequestStatusPluginsArrayOutput) ToServerStatusRequestStatusPluginsArrayOutputWithContext(ctx context.Context) ServerStatusRequestStatusPluginsArrayOutput {
	return o
}

func (o ServerStatusRequestStatusPluginsArrayOutput) Index(i pulumi.IntInput) ServerStatusRequestStatusPluginsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerStatusRequestStatusPlugins {
		return vs[0].([]ServerStatusRequestStatusPlugins)[vs[1].(int)]
	}).(ServerStatusRequestStatusPluginsOutput)
}

// VolumeSnapshotLocation is a location where Velero stores volume snapshots.
type VolumeSnapshotLocationType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// VolumeSnapshotLocationSpec defines the specification for a Velero VolumeSnapshotLocation.
	Spec *VolumeSnapshotLocationSpec `pulumi:"spec"`
	// VolumeSnapshotLocationStatus describes the current status of a Velero VolumeSnapshotLocation.
	Status *VolumeSnapshotLocationStatus `pulumi:"status"`
}

// VolumeSnapshotLocationTypeInput is an input type that accepts VolumeSnapshotLocationTypeArgs and VolumeSnapshotLocationTypeOutput values.
// You can construct a concrete instance of `VolumeSnapshotLocationTypeInput` via:
//
//          VolumeSnapshotLocationTypeArgs{...}
type VolumeSnapshotLocationTypeInput interface {
	pulumi.Input

	ToVolumeSnapshotLocationTypeOutput() VolumeSnapshotLocationTypeOutput
	ToVolumeSnapshotLocationTypeOutputWithContext(context.Context) VolumeSnapshotLocationTypeOutput
}

// VolumeSnapshotLocation is a location where Velero stores volume snapshots.
type VolumeSnapshotLocationTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// VolumeSnapshotLocationSpec defines the specification for a Velero VolumeSnapshotLocation.
	Spec VolumeSnapshotLocationSpecPtrInput `pulumi:"spec"`
	// VolumeSnapshotLocationStatus describes the current status of a Velero VolumeSnapshotLocation.
	Status VolumeSnapshotLocationStatusPtrInput `pulumi:"status"`
}

func (VolumeSnapshotLocationTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeSnapshotLocationType)(nil)).Elem()
}

func (i VolumeSnapshotLocationTypeArgs) ToVolumeSnapshotLocationTypeOutput() VolumeSnapshotLocationTypeOutput {
	return i.ToVolumeSnapshotLocationTypeOutputWithContext(context.Background())
}

func (i VolumeSnapshotLocationTypeArgs) ToVolumeSnapshotLocationTypeOutputWithContext(ctx context.Context) VolumeSnapshotLocationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeSnapshotLocationTypeOutput)
}

// VolumeSnapshotLocation is a location where Velero stores volume snapshots.
type VolumeSnapshotLocationTypeOutput struct{ *pulumi.OutputState }

func (VolumeSnapshotLocationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeSnapshotLocationType)(nil)).Elem()
}

func (o VolumeSnapshotLocationTypeOutput) ToVolumeSnapshotLocationTypeOutput() VolumeSnapshotLocationTypeOutput {
	return o
}

func (o VolumeSnapshotLocationTypeOutput) ToVolumeSnapshotLocationTypeOutputWithContext(ctx context.Context) VolumeSnapshotLocationTypeOutput {
	return o
}

func (o VolumeSnapshotLocationTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeSnapshotLocationType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o VolumeSnapshotLocationTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeSnapshotLocationType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o VolumeSnapshotLocationTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v VolumeSnapshotLocationType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// VolumeSnapshotLocationSpec defines the specification for a Velero VolumeSnapshotLocation.
func (o VolumeSnapshotLocationTypeOutput) Spec() VolumeSnapshotLocationSpecPtrOutput {
	return o.ApplyT(func(v VolumeSnapshotLocationType) *VolumeSnapshotLocationSpec { return v.Spec }).(VolumeSnapshotLocationSpecPtrOutput)
}

// VolumeSnapshotLocationStatus describes the current status of a Velero VolumeSnapshotLocation.
func (o VolumeSnapshotLocationTypeOutput) Status() VolumeSnapshotLocationStatusPtrOutput {
	return o.ApplyT(func(v VolumeSnapshotLocationType) *VolumeSnapshotLocationStatus { return v.Status }).(VolumeSnapshotLocationStatusPtrOutput)
}

type VolumeSnapshotLocationMetadata struct {
}

// VolumeSnapshotLocationMetadataInput is an input type that accepts VolumeSnapshotLocationMetadataArgs and VolumeSnapshotLocationMetadataOutput values.
// You can construct a concrete instance of `VolumeSnapshotLocationMetadataInput` via:
//
//          VolumeSnapshotLocationMetadataArgs{...}
type VolumeSnapshotLocationMetadataInput interface {
	pulumi.Input

	ToVolumeSnapshotLocationMetadataOutput() VolumeSnapshotLocationMetadataOutput
	ToVolumeSnapshotLocationMetadataOutputWithContext(context.Context) VolumeSnapshotLocationMetadataOutput
}

type VolumeSnapshotLocationMetadataArgs struct {
}

func (VolumeSnapshotLocationMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeSnapshotLocationMetadata)(nil)).Elem()
}

func (i VolumeSnapshotLocationMetadataArgs) ToVolumeSnapshotLocationMetadataOutput() VolumeSnapshotLocationMetadataOutput {
	return i.ToVolumeSnapshotLocationMetadataOutputWithContext(context.Background())
}

func (i VolumeSnapshotLocationMetadataArgs) ToVolumeSnapshotLocationMetadataOutputWithContext(ctx context.Context) VolumeSnapshotLocationMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeSnapshotLocationMetadataOutput)
}

type VolumeSnapshotLocationMetadataOutput struct{ *pulumi.OutputState }

func (VolumeSnapshotLocationMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeSnapshotLocationMetadata)(nil)).Elem()
}

func (o VolumeSnapshotLocationMetadataOutput) ToVolumeSnapshotLocationMetadataOutput() VolumeSnapshotLocationMetadataOutput {
	return o
}

func (o VolumeSnapshotLocationMetadataOutput) ToVolumeSnapshotLocationMetadataOutputWithContext(ctx context.Context) VolumeSnapshotLocationMetadataOutput {
	return o
}

// VolumeSnapshotLocationSpec defines the specification for a Velero VolumeSnapshotLocation.
type VolumeSnapshotLocationSpec struct {
	// Config is for provider-specific configuration fields.
	Config map[string]string `pulumi:"config"`
	// Provider is the provider of the volume storage.
	Provider string `pulumi:"provider"`
}

// VolumeSnapshotLocationSpecInput is an input type that accepts VolumeSnapshotLocationSpecArgs and VolumeSnapshotLocationSpecOutput values.
// You can construct a concrete instance of `VolumeSnapshotLocationSpecInput` via:
//
//          VolumeSnapshotLocationSpecArgs{...}
type VolumeSnapshotLocationSpecInput interface {
	pulumi.Input

	ToVolumeSnapshotLocationSpecOutput() VolumeSnapshotLocationSpecOutput
	ToVolumeSnapshotLocationSpecOutputWithContext(context.Context) VolumeSnapshotLocationSpecOutput
}

// VolumeSnapshotLocationSpec defines the specification for a Velero VolumeSnapshotLocation.
type VolumeSnapshotLocationSpecArgs struct {
	// Config is for provider-specific configuration fields.
	Config pulumi.StringMapInput `pulumi:"config"`
	// Provider is the provider of the volume storage.
	Provider pulumi.StringInput `pulumi:"provider"`
}

func (VolumeSnapshotLocationSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeSnapshotLocationSpec)(nil)).Elem()
}

func (i VolumeSnapshotLocationSpecArgs) ToVolumeSnapshotLocationSpecOutput() VolumeSnapshotLocationSpecOutput {
	return i.ToVolumeSnapshotLocationSpecOutputWithContext(context.Background())
}

func (i VolumeSnapshotLocationSpecArgs) ToVolumeSnapshotLocationSpecOutputWithContext(ctx context.Context) VolumeSnapshotLocationSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeSnapshotLocationSpecOutput)
}

func (i VolumeSnapshotLocationSpecArgs) ToVolumeSnapshotLocationSpecPtrOutput() VolumeSnapshotLocationSpecPtrOutput {
	return i.ToVolumeSnapshotLocationSpecPtrOutputWithContext(context.Background())
}

func (i VolumeSnapshotLocationSpecArgs) ToVolumeSnapshotLocationSpecPtrOutputWithContext(ctx context.Context) VolumeSnapshotLocationSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeSnapshotLocationSpecOutput).ToVolumeSnapshotLocationSpecPtrOutputWithContext(ctx)
}

// VolumeSnapshotLocationSpecPtrInput is an input type that accepts VolumeSnapshotLocationSpecArgs, VolumeSnapshotLocationSpecPtr and VolumeSnapshotLocationSpecPtrOutput values.
// You can construct a concrete instance of `VolumeSnapshotLocationSpecPtrInput` via:
//
//          VolumeSnapshotLocationSpecArgs{...}
//
//  or:
//
//          nil
type VolumeSnapshotLocationSpecPtrInput interface {
	pulumi.Input

	ToVolumeSnapshotLocationSpecPtrOutput() VolumeSnapshotLocationSpecPtrOutput
	ToVolumeSnapshotLocationSpecPtrOutputWithContext(context.Context) VolumeSnapshotLocationSpecPtrOutput
}

type volumeSnapshotLocationSpecPtrType VolumeSnapshotLocationSpecArgs

func VolumeSnapshotLocationSpecPtr(v *VolumeSnapshotLocationSpecArgs) VolumeSnapshotLocationSpecPtrInput {
	return (*volumeSnapshotLocationSpecPtrType)(v)
}

func (*volumeSnapshotLocationSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeSnapshotLocationSpec)(nil)).Elem()
}

func (i *volumeSnapshotLocationSpecPtrType) ToVolumeSnapshotLocationSpecPtrOutput() VolumeSnapshotLocationSpecPtrOutput {
	return i.ToVolumeSnapshotLocationSpecPtrOutputWithContext(context.Background())
}

func (i *volumeSnapshotLocationSpecPtrType) ToVolumeSnapshotLocationSpecPtrOutputWithContext(ctx context.Context) VolumeSnapshotLocationSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeSnapshotLocationSpecPtrOutput)
}

// VolumeSnapshotLocationSpec defines the specification for a Velero VolumeSnapshotLocation.
type VolumeSnapshotLocationSpecOutput struct{ *pulumi.OutputState }

func (VolumeSnapshotLocationSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeSnapshotLocationSpec)(nil)).Elem()
}

func (o VolumeSnapshotLocationSpecOutput) ToVolumeSnapshotLocationSpecOutput() VolumeSnapshotLocationSpecOutput {
	return o
}

func (o VolumeSnapshotLocationSpecOutput) ToVolumeSnapshotLocationSpecOutputWithContext(ctx context.Context) VolumeSnapshotLocationSpecOutput {
	return o
}

func (o VolumeSnapshotLocationSpecOutput) ToVolumeSnapshotLocationSpecPtrOutput() VolumeSnapshotLocationSpecPtrOutput {
	return o.ToVolumeSnapshotLocationSpecPtrOutputWithContext(context.Background())
}

func (o VolumeSnapshotLocationSpecOutput) ToVolumeSnapshotLocationSpecPtrOutputWithContext(ctx context.Context) VolumeSnapshotLocationSpecPtrOutput {
	return o.ApplyT(func(v VolumeSnapshotLocationSpec) *VolumeSnapshotLocationSpec {
		return &v
	}).(VolumeSnapshotLocationSpecPtrOutput)
}

// Config is for provider-specific configuration fields.
func (o VolumeSnapshotLocationSpecOutput) Config() pulumi.StringMapOutput {
	return o.ApplyT(func(v VolumeSnapshotLocationSpec) map[string]string { return v.Config }).(pulumi.StringMapOutput)
}

// Provider is the provider of the volume storage.
func (o VolumeSnapshotLocationSpecOutput) Provider() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeSnapshotLocationSpec) string { return v.Provider }).(pulumi.StringOutput)
}

type VolumeSnapshotLocationSpecPtrOutput struct{ *pulumi.OutputState }

func (VolumeSnapshotLocationSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeSnapshotLocationSpec)(nil)).Elem()
}

func (o VolumeSnapshotLocationSpecPtrOutput) ToVolumeSnapshotLocationSpecPtrOutput() VolumeSnapshotLocationSpecPtrOutput {
	return o
}

func (o VolumeSnapshotLocationSpecPtrOutput) ToVolumeSnapshotLocationSpecPtrOutputWithContext(ctx context.Context) VolumeSnapshotLocationSpecPtrOutput {
	return o
}

func (o VolumeSnapshotLocationSpecPtrOutput) Elem() VolumeSnapshotLocationSpecOutput {
	return o.ApplyT(func(v *VolumeSnapshotLocationSpec) VolumeSnapshotLocationSpec { return *v }).(VolumeSnapshotLocationSpecOutput)
}

// Config is for provider-specific configuration fields.
func (o VolumeSnapshotLocationSpecPtrOutput) Config() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VolumeSnapshotLocationSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.Config
	}).(pulumi.StringMapOutput)
}

// Provider is the provider of the volume storage.
func (o VolumeSnapshotLocationSpecPtrOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeSnapshotLocationSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Provider
	}).(pulumi.StringPtrOutput)
}

// Config is for provider-specific configuration fields.
type VolumeSnapshotLocationSpecConfig struct {
}

// VolumeSnapshotLocationSpecConfigInput is an input type that accepts VolumeSnapshotLocationSpecConfigArgs and VolumeSnapshotLocationSpecConfigOutput values.
// You can construct a concrete instance of `VolumeSnapshotLocationSpecConfigInput` via:
//
//          VolumeSnapshotLocationSpecConfigArgs{...}
type VolumeSnapshotLocationSpecConfigInput interface {
	pulumi.Input

	ToVolumeSnapshotLocationSpecConfigOutput() VolumeSnapshotLocationSpecConfigOutput
	ToVolumeSnapshotLocationSpecConfigOutputWithContext(context.Context) VolumeSnapshotLocationSpecConfigOutput
}

// Config is for provider-specific configuration fields.
type VolumeSnapshotLocationSpecConfigArgs struct {
}

func (VolumeSnapshotLocationSpecConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeSnapshotLocationSpecConfig)(nil)).Elem()
}

func (i VolumeSnapshotLocationSpecConfigArgs) ToVolumeSnapshotLocationSpecConfigOutput() VolumeSnapshotLocationSpecConfigOutput {
	return i.ToVolumeSnapshotLocationSpecConfigOutputWithContext(context.Background())
}

func (i VolumeSnapshotLocationSpecConfigArgs) ToVolumeSnapshotLocationSpecConfigOutputWithContext(ctx context.Context) VolumeSnapshotLocationSpecConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeSnapshotLocationSpecConfigOutput)
}

// Config is for provider-specific configuration fields.
type VolumeSnapshotLocationSpecConfigOutput struct{ *pulumi.OutputState }

func (VolumeSnapshotLocationSpecConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeSnapshotLocationSpecConfig)(nil)).Elem()
}

func (o VolumeSnapshotLocationSpecConfigOutput) ToVolumeSnapshotLocationSpecConfigOutput() VolumeSnapshotLocationSpecConfigOutput {
	return o
}

func (o VolumeSnapshotLocationSpecConfigOutput) ToVolumeSnapshotLocationSpecConfigOutputWithContext(ctx context.Context) VolumeSnapshotLocationSpecConfigOutput {
	return o
}

// VolumeSnapshotLocationStatus describes the current status of a Velero VolumeSnapshotLocation.
type VolumeSnapshotLocationStatus struct {
	// VolumeSnapshotLocationPhase is the lifecyle phase of a Velero VolumeSnapshotLocation.
	Phase *string `pulumi:"phase"`
}

// VolumeSnapshotLocationStatusInput is an input type that accepts VolumeSnapshotLocationStatusArgs and VolumeSnapshotLocationStatusOutput values.
// You can construct a concrete instance of `VolumeSnapshotLocationStatusInput` via:
//
//          VolumeSnapshotLocationStatusArgs{...}
type VolumeSnapshotLocationStatusInput interface {
	pulumi.Input

	ToVolumeSnapshotLocationStatusOutput() VolumeSnapshotLocationStatusOutput
	ToVolumeSnapshotLocationStatusOutputWithContext(context.Context) VolumeSnapshotLocationStatusOutput
}

// VolumeSnapshotLocationStatus describes the current status of a Velero VolumeSnapshotLocation.
type VolumeSnapshotLocationStatusArgs struct {
	// VolumeSnapshotLocationPhase is the lifecyle phase of a Velero VolumeSnapshotLocation.
	Phase pulumi.StringPtrInput `pulumi:"phase"`
}

func (VolumeSnapshotLocationStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeSnapshotLocationStatus)(nil)).Elem()
}

func (i VolumeSnapshotLocationStatusArgs) ToVolumeSnapshotLocationStatusOutput() VolumeSnapshotLocationStatusOutput {
	return i.ToVolumeSnapshotLocationStatusOutputWithContext(context.Background())
}

func (i VolumeSnapshotLocationStatusArgs) ToVolumeSnapshotLocationStatusOutputWithContext(ctx context.Context) VolumeSnapshotLocationStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeSnapshotLocationStatusOutput)
}

func (i VolumeSnapshotLocationStatusArgs) ToVolumeSnapshotLocationStatusPtrOutput() VolumeSnapshotLocationStatusPtrOutput {
	return i.ToVolumeSnapshotLocationStatusPtrOutputWithContext(context.Background())
}

func (i VolumeSnapshotLocationStatusArgs) ToVolumeSnapshotLocationStatusPtrOutputWithContext(ctx context.Context) VolumeSnapshotLocationStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeSnapshotLocationStatusOutput).ToVolumeSnapshotLocationStatusPtrOutputWithContext(ctx)
}

// VolumeSnapshotLocationStatusPtrInput is an input type that accepts VolumeSnapshotLocationStatusArgs, VolumeSnapshotLocationStatusPtr and VolumeSnapshotLocationStatusPtrOutput values.
// You can construct a concrete instance of `VolumeSnapshotLocationStatusPtrInput` via:
//
//          VolumeSnapshotLocationStatusArgs{...}
//
//  or:
//
//          nil
type VolumeSnapshotLocationStatusPtrInput interface {
	pulumi.Input

	ToVolumeSnapshotLocationStatusPtrOutput() VolumeSnapshotLocationStatusPtrOutput
	ToVolumeSnapshotLocationStatusPtrOutputWithContext(context.Context) VolumeSnapshotLocationStatusPtrOutput
}

type volumeSnapshotLocationStatusPtrType VolumeSnapshotLocationStatusArgs

func VolumeSnapshotLocationStatusPtr(v *VolumeSnapshotLocationStatusArgs) VolumeSnapshotLocationStatusPtrInput {
	return (*volumeSnapshotLocationStatusPtrType)(v)
}

func (*volumeSnapshotLocationStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeSnapshotLocationStatus)(nil)).Elem()
}

func (i *volumeSnapshotLocationStatusPtrType) ToVolumeSnapshotLocationStatusPtrOutput() VolumeSnapshotLocationStatusPtrOutput {
	return i.ToVolumeSnapshotLocationStatusPtrOutputWithContext(context.Background())
}

func (i *volumeSnapshotLocationStatusPtrType) ToVolumeSnapshotLocationStatusPtrOutputWithContext(ctx context.Context) VolumeSnapshotLocationStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeSnapshotLocationStatusPtrOutput)
}

// VolumeSnapshotLocationStatus describes the current status of a Velero VolumeSnapshotLocation.
type VolumeSnapshotLocationStatusOutput struct{ *pulumi.OutputState }

func (VolumeSnapshotLocationStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeSnapshotLocationStatus)(nil)).Elem()
}

func (o VolumeSnapshotLocationStatusOutput) ToVolumeSnapshotLocationStatusOutput() VolumeSnapshotLocationStatusOutput {
	return o
}

func (o VolumeSnapshotLocationStatusOutput) ToVolumeSnapshotLocationStatusOutputWithContext(ctx context.Context) VolumeSnapshotLocationStatusOutput {
	return o
}

func (o VolumeSnapshotLocationStatusOutput) ToVolumeSnapshotLocationStatusPtrOutput() VolumeSnapshotLocationStatusPtrOutput {
	return o.ToVolumeSnapshotLocationStatusPtrOutputWithContext(context.Background())
}

func (o VolumeSnapshotLocationStatusOutput) ToVolumeSnapshotLocationStatusPtrOutputWithContext(ctx context.Context) VolumeSnapshotLocationStatusPtrOutput {
	return o.ApplyT(func(v VolumeSnapshotLocationStatus) *VolumeSnapshotLocationStatus {
		return &v
	}).(VolumeSnapshotLocationStatusPtrOutput)
}

// VolumeSnapshotLocationPhase is the lifecyle phase of a Velero VolumeSnapshotLocation.
func (o VolumeSnapshotLocationStatusOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeSnapshotLocationStatus) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

type VolumeSnapshotLocationStatusPtrOutput struct{ *pulumi.OutputState }

func (VolumeSnapshotLocationStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeSnapshotLocationStatus)(nil)).Elem()
}

func (o VolumeSnapshotLocationStatusPtrOutput) ToVolumeSnapshotLocationStatusPtrOutput() VolumeSnapshotLocationStatusPtrOutput {
	return o
}

func (o VolumeSnapshotLocationStatusPtrOutput) ToVolumeSnapshotLocationStatusPtrOutputWithContext(ctx context.Context) VolumeSnapshotLocationStatusPtrOutput {
	return o
}

func (o VolumeSnapshotLocationStatusPtrOutput) Elem() VolumeSnapshotLocationStatusOutput {
	return o.ApplyT(func(v *VolumeSnapshotLocationStatus) VolumeSnapshotLocationStatus { return *v }).(VolumeSnapshotLocationStatusOutput)
}

// VolumeSnapshotLocationPhase is the lifecyle phase of a Velero VolumeSnapshotLocation.
func (o VolumeSnapshotLocationStatusPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeSnapshotLocationStatus) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(BackupTypeOutput{})
	pulumi.RegisterOutputType(BackupMetadataOutput{})
	pulumi.RegisterOutputType(BackupSpecOutput{})
	pulumi.RegisterOutputType(BackupSpecPtrOutput{})
	pulumi.RegisterOutputType(BackupSpecHooksOutput{})
	pulumi.RegisterOutputType(BackupSpecHooksPtrOutput{})
	pulumi.RegisterOutputType(BackupSpecHooksResourcesOutput{})
	pulumi.RegisterOutputType(BackupSpecHooksResourcesArrayOutput{})
	pulumi.RegisterOutputType(BackupSpecHooksResourcesLabelSelectorOutput{})
	pulumi.RegisterOutputType(BackupSpecHooksResourcesLabelSelectorPtrOutput{})
	pulumi.RegisterOutputType(BackupSpecHooksResourcesLabelSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(BackupSpecHooksResourcesLabelSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(BackupSpecHooksResourcesLabelSelectorMatchLabelsOutput{})
	pulumi.RegisterOutputType(BackupSpecHooksResourcesPostOutput{})
	pulumi.RegisterOutputType(BackupSpecHooksResourcesPostArrayOutput{})
	pulumi.RegisterOutputType(BackupSpecHooksResourcesPostExecOutput{})
	pulumi.RegisterOutputType(BackupSpecHooksResourcesPreOutput{})
	pulumi.RegisterOutputType(BackupSpecHooksResourcesPreArrayOutput{})
	pulumi.RegisterOutputType(BackupSpecHooksResourcesPreExecOutput{})
	pulumi.RegisterOutputType(BackupSpecLabelSelectorOutput{})
	pulumi.RegisterOutputType(BackupSpecLabelSelectorPtrOutput{})
	pulumi.RegisterOutputType(BackupSpecLabelSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(BackupSpecLabelSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(BackupSpecLabelSelectorMatchLabelsOutput{})
	pulumi.RegisterOutputType(BackupStatusOutput{})
	pulumi.RegisterOutputType(BackupStatusPtrOutput{})
	pulumi.RegisterOutputType(BackupStatusProgressOutput{})
	pulumi.RegisterOutputType(BackupStatusProgressPtrOutput{})
	pulumi.RegisterOutputType(BackupStorageLocationTypeOutput{})
	pulumi.RegisterOutputType(BackupStorageLocationMetadataOutput{})
	pulumi.RegisterOutputType(BackupStorageLocationSpecOutput{})
	pulumi.RegisterOutputType(BackupStorageLocationSpecPtrOutput{})
	pulumi.RegisterOutputType(BackupStorageLocationSpecConfigOutput{})
	pulumi.RegisterOutputType(BackupStorageLocationSpecObjectStorageOutput{})
	pulumi.RegisterOutputType(BackupStorageLocationSpecObjectStoragePtrOutput{})
	pulumi.RegisterOutputType(BackupStorageLocationStatusOutput{})
	pulumi.RegisterOutputType(BackupStorageLocationStatusPtrOutput{})
	pulumi.RegisterOutputType(DeleteBackupRequestTypeOutput{})
	pulumi.RegisterOutputType(DeleteBackupRequestMetadataOutput{})
	pulumi.RegisterOutputType(DeleteBackupRequestSpecOutput{})
	pulumi.RegisterOutputType(DeleteBackupRequestSpecPtrOutput{})
	pulumi.RegisterOutputType(DeleteBackupRequestStatusOutput{})
	pulumi.RegisterOutputType(DeleteBackupRequestStatusPtrOutput{})
	pulumi.RegisterOutputType(DownloadRequestTypeOutput{})
	pulumi.RegisterOutputType(DownloadRequestMetadataOutput{})
	pulumi.RegisterOutputType(DownloadRequestSpecOutput{})
	pulumi.RegisterOutputType(DownloadRequestSpecPtrOutput{})
	pulumi.RegisterOutputType(DownloadRequestSpecTargetOutput{})
	pulumi.RegisterOutputType(DownloadRequestSpecTargetPtrOutput{})
	pulumi.RegisterOutputType(DownloadRequestStatusOutput{})
	pulumi.RegisterOutputType(DownloadRequestStatusPtrOutput{})
	pulumi.RegisterOutputType(PodVolumeBackupTypeOutput{})
	pulumi.RegisterOutputType(PodVolumeBackupMetadataOutput{})
	pulumi.RegisterOutputType(PodVolumeBackupSpecOutput{})
	pulumi.RegisterOutputType(PodVolumeBackupSpecPtrOutput{})
	pulumi.RegisterOutputType(PodVolumeBackupSpecPodOutput{})
	pulumi.RegisterOutputType(PodVolumeBackupSpecPodPtrOutput{})
	pulumi.RegisterOutputType(PodVolumeBackupSpecTagsOutput{})
	pulumi.RegisterOutputType(PodVolumeBackupStatusOutput{})
	pulumi.RegisterOutputType(PodVolumeBackupStatusPtrOutput{})
	pulumi.RegisterOutputType(PodVolumeBackupStatusProgressOutput{})
	pulumi.RegisterOutputType(PodVolumeBackupStatusProgressPtrOutput{})
	pulumi.RegisterOutputType(PodVolumeRestoreTypeOutput{})
	pulumi.RegisterOutputType(PodVolumeRestoreMetadataOutput{})
	pulumi.RegisterOutputType(PodVolumeRestoreSpecOutput{})
	pulumi.RegisterOutputType(PodVolumeRestoreSpecPtrOutput{})
	pulumi.RegisterOutputType(PodVolumeRestoreSpecPodOutput{})
	pulumi.RegisterOutputType(PodVolumeRestoreSpecPodPtrOutput{})
	pulumi.RegisterOutputType(PodVolumeRestoreStatusOutput{})
	pulumi.RegisterOutputType(PodVolumeRestoreStatusPtrOutput{})
	pulumi.RegisterOutputType(PodVolumeRestoreStatusProgressOutput{})
	pulumi.RegisterOutputType(PodVolumeRestoreStatusProgressPtrOutput{})
	pulumi.RegisterOutputType(ResticRepositoryTypeOutput{})
	pulumi.RegisterOutputType(ResticRepositoryMetadataOutput{})
	pulumi.RegisterOutputType(ResticRepositorySpecOutput{})
	pulumi.RegisterOutputType(ResticRepositorySpecPtrOutput{})
	pulumi.RegisterOutputType(ResticRepositoryStatusOutput{})
	pulumi.RegisterOutputType(ResticRepositoryStatusPtrOutput{})
	pulumi.RegisterOutputType(RestoreTypeOutput{})
	pulumi.RegisterOutputType(RestoreMetadataOutput{})
	pulumi.RegisterOutputType(RestoreSpecOutput{})
	pulumi.RegisterOutputType(RestoreSpecPtrOutput{})
	pulumi.RegisterOutputType(RestoreSpecLabelSelectorOutput{})
	pulumi.RegisterOutputType(RestoreSpecLabelSelectorPtrOutput{})
	pulumi.RegisterOutputType(RestoreSpecLabelSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(RestoreSpecLabelSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(RestoreSpecLabelSelectorMatchLabelsOutput{})
	pulumi.RegisterOutputType(RestoreSpecNamespaceMappingOutput{})
	pulumi.RegisterOutputType(RestoreStatusOutput{})
	pulumi.RegisterOutputType(RestoreStatusPtrOutput{})
	pulumi.RegisterOutputType(RestoreStatusPodVolumeRestoreErrorsOutput{})
	pulumi.RegisterOutputType(RestoreStatusPodVolumeRestoreErrorsArrayOutput{})
	pulumi.RegisterOutputType(RestoreStatusPodVolumeRestoreVerifyErrorsOutput{})
	pulumi.RegisterOutputType(RestoreStatusPodVolumeRestoreVerifyErrorsArrayOutput{})
	pulumi.RegisterOutputType(ScheduleTypeOutput{})
	pulumi.RegisterOutputType(ScheduleMetadataOutput{})
	pulumi.RegisterOutputType(ScheduleSpecOutput{})
	pulumi.RegisterOutputType(ScheduleSpecPtrOutput{})
	pulumi.RegisterOutputType(ScheduleSpecTemplateOutput{})
	pulumi.RegisterOutputType(ScheduleSpecTemplatePtrOutput{})
	pulumi.RegisterOutputType(ScheduleSpecTemplateHooksOutput{})
	pulumi.RegisterOutputType(ScheduleSpecTemplateHooksPtrOutput{})
	pulumi.RegisterOutputType(ScheduleSpecTemplateHooksResourcesOutput{})
	pulumi.RegisterOutputType(ScheduleSpecTemplateHooksResourcesArrayOutput{})
	pulumi.RegisterOutputType(ScheduleSpecTemplateHooksResourcesLabelSelectorOutput{})
	pulumi.RegisterOutputType(ScheduleSpecTemplateHooksResourcesLabelSelectorPtrOutput{})
	pulumi.RegisterOutputType(ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(ScheduleSpecTemplateHooksResourcesLabelSelectorMatchLabelsOutput{})
	pulumi.RegisterOutputType(ScheduleSpecTemplateHooksResourcesPostOutput{})
	pulumi.RegisterOutputType(ScheduleSpecTemplateHooksResourcesPostArrayOutput{})
	pulumi.RegisterOutputType(ScheduleSpecTemplateHooksResourcesPostExecOutput{})
	pulumi.RegisterOutputType(ScheduleSpecTemplateHooksResourcesPreOutput{})
	pulumi.RegisterOutputType(ScheduleSpecTemplateHooksResourcesPreArrayOutput{})
	pulumi.RegisterOutputType(ScheduleSpecTemplateHooksResourcesPreExecOutput{})
	pulumi.RegisterOutputType(ScheduleSpecTemplateLabelSelectorOutput{})
	pulumi.RegisterOutputType(ScheduleSpecTemplateLabelSelectorPtrOutput{})
	pulumi.RegisterOutputType(ScheduleSpecTemplateLabelSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(ScheduleSpecTemplateLabelSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(ScheduleSpecTemplateLabelSelectorMatchLabelsOutput{})
	pulumi.RegisterOutputType(ScheduleStatusOutput{})
	pulumi.RegisterOutputType(ScheduleStatusPtrOutput{})
	pulumi.RegisterOutputType(ServerStatusRequestTypeOutput{})
	pulumi.RegisterOutputType(ServerStatusRequestMetadataOutput{})
	pulumi.RegisterOutputType(ServerStatusRequestSpecOutput{})
	pulumi.RegisterOutputType(ServerStatusRequestStatusOutput{})
	pulumi.RegisterOutputType(ServerStatusRequestStatusPtrOutput{})
	pulumi.RegisterOutputType(ServerStatusRequestStatusPluginsOutput{})
	pulumi.RegisterOutputType(ServerStatusRequestStatusPluginsArrayOutput{})
	pulumi.RegisterOutputType(VolumeSnapshotLocationTypeOutput{})
	pulumi.RegisterOutputType(VolumeSnapshotLocationMetadataOutput{})
	pulumi.RegisterOutputType(VolumeSnapshotLocationSpecOutput{})
	pulumi.RegisterOutputType(VolumeSnapshotLocationSpecPtrOutput{})
	pulumi.RegisterOutputType(VolumeSnapshotLocationSpecConfigOutput{})
	pulumi.RegisterOutputType(VolumeSnapshotLocationStatusOutput{})
	pulumi.RegisterOutputType(VolumeSnapshotLocationStatusPtrOutput{})
}

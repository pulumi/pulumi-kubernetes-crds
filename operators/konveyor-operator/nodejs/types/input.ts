// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import {ObjectMeta} from "../meta/v1";

export namespace migration {
    export namespace v1alpha1 {
        export interface MigClusterSpec {
            azureResourceGroup?: pulumi.Input<string>;
            caBundle?: pulumi.Input<string>;
            insecure?: pulumi.Input<boolean>;
            isHostCluster: pulumi.Input<boolean>;
            serviceAccountSecretRef?: pulumi.Input<{[key: string]: any}>;
            storageClasses?: pulumi.Input<pulumi.Input<inputs.migration.v1alpha1.MigClusterSpecStorageClasses>[]>;
            url?: pulumi.Input<string>;
        }

        export interface MigClusterSpecStorageClasses {
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            default?: pulumi.Input<boolean>;
            name?: pulumi.Input<string>;
            provisioner?: pulumi.Input<string>;
        }

        export interface MigClusterStatus {
            observedDigest?: pulumi.Input<string>;
        }

        export interface MigHookSpec {
            activeDeadlineSeconds?: pulumi.Input<number>;
            custom: pulumi.Input<boolean>;
            image: pulumi.Input<string>;
            playbook?: pulumi.Input<string>;
            targetCluster: pulumi.Input<string>;
        }

        export interface MigHookStatus {
            observedGeneration?: pulumi.Input<number>;
        }

        export interface MigMigrationSpec {
            canceled?: pulumi.Input<boolean>;
            keepAnnotations?: pulumi.Input<boolean>;
            migPlanRef?: pulumi.Input<{[key: string]: any}>;
            quiescePods?: pulumi.Input<boolean>;
            stage: pulumi.Input<boolean>;
            verify?: pulumi.Input<boolean>;
        }

        export interface MigMigrationStatus {
            errors?: pulumi.Input<pulumi.Input<string>[]>;
            itenerary?: pulumi.Input<string>;
            observedDigest?: pulumi.Input<string>;
            phase?: pulumi.Input<string>;
            startTimestamp?: pulumi.Input<string>;
        }

        export interface MigPlanSpec {
            closed?: pulumi.Input<boolean>;
            destMigClusterRef?: pulumi.Input<{[key: string]: any}>;
            hooks?: pulumi.Input<pulumi.Input<inputs.migration.v1alpha1.MigPlanSpecHooks>[]>;
            migStorageRef?: pulumi.Input<{[key: string]: any}>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            persistentVolumes?: pulumi.Input<pulumi.Input<inputs.migration.v1alpha1.MigPlanSpecPersistentVolumes>[]>;
            srcMigClusterRef?: pulumi.Input<{[key: string]: any}>;
        }

        export interface MigPlanSpecHooks {
            executionNamespace: pulumi.Input<string>;
            phase: pulumi.Input<string>;
            reference: pulumi.Input<{[key: string]: any}>;
            serviceAccount: pulumi.Input<string>;
        }

        export interface MigPlanSpecPersistentVolumes {
            capacity?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            pvc?: pulumi.Input<inputs.migration.v1alpha1.MigPlanSpecPersistentVolumesPvc>;
            selection: pulumi.Input<inputs.migration.v1alpha1.MigPlanSpecPersistentVolumesSelection>;
            storageClass?: pulumi.Input<string>;
            supported: pulumi.Input<inputs.migration.v1alpha1.MigPlanSpecPersistentVolumesSupported>;
        }

        export interface MigPlanSpecPersistentVolumesPvc {
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface MigPlanSpecPersistentVolumesSelection {
            accessMode?: pulumi.Input<string>;
            action?: pulumi.Input<string>;
            copyMethod?: pulumi.Input<string>;
            storageClass?: pulumi.Input<string>;
            verify?: pulumi.Input<boolean>;
        }

        export interface MigPlanSpecPersistentVolumesSupported {
            actions: pulumi.Input<pulumi.Input<string>[]>;
            copyMethods: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface MigPlanStatus {
            incompatibleNamespaces?: pulumi.Input<pulumi.Input<inputs.migration.v1alpha1.MigPlanStatusIncompatibleNamespaces>[]>;
            observedDigest?: pulumi.Input<string>;
        }

        export interface MigPlanStatusIncompatibleNamespaces {
            gvks: pulumi.Input<pulumi.Input<inputs.migration.v1alpha1.MigPlanStatusIncompatibleNamespacesGvks>[]>;
            name: pulumi.Input<string>;
        }

        export interface MigPlanStatusIncompatibleNamespacesGvks {
            group: pulumi.Input<string>;
            kind: pulumi.Input<string>;
            version: pulumi.Input<string>;
        }

        export interface MigStorageSpec {
            backupStorageConfig: pulumi.Input<inputs.migration.v1alpha1.MigStorageSpecBackupStorageConfig>;
            backupStorageProvider: pulumi.Input<string>;
            volumeSnapshotConfig?: pulumi.Input<inputs.migration.v1alpha1.MigStorageSpecVolumeSnapshotConfig>;
            volumeSnapshotProvider?: pulumi.Input<string>;
        }

        export interface MigStorageSpecBackupStorageConfig {
            awsBucketName?: pulumi.Input<string>;
            awsKmsKeyId?: pulumi.Input<string>;
            awsPublicUrl?: pulumi.Input<string>;
            awsRegion?: pulumi.Input<string>;
            awsS3ForcePathStyle?: pulumi.Input<boolean>;
            awsS3Url?: pulumi.Input<string>;
            awsSignatureVersion?: pulumi.Input<string>;
            azureResourceGroup?: pulumi.Input<string>;
            azureStorageAccount?: pulumi.Input<string>;
            azureStorageContainer?: pulumi.Input<string>;
            credsSecretRef?: pulumi.Input<{[key: string]: any}>;
            gcpBucket?: pulumi.Input<string>;
            insecure?: pulumi.Input<boolean>;
            s3CustomCABundle?: pulumi.Input<string>;
        }

        export interface MigStorageSpecVolumeSnapshotConfig {
            awsRegion?: pulumi.Input<string>;
            azureApiTimeout?: pulumi.Input<string>;
            azureResourceGroup?: pulumi.Input<string>;
            credsSecretRef?: pulumi.Input<{[key: string]: any}>;
            snapshotCreationTimeout?: pulumi.Input<string>;
        }

        export interface MigStorageStatus {
            observedDigest?: pulumi.Input<string>;
        }
    }
}

export namespace velero {
    export namespace v1 {
        /**
         * BackupSpec defines the specification for a Velero backup.
         */
        export interface BackupSpec {
            /**
             * ExcludedNamespaces contains a list of namespaces that are not included in the backup.
             */
            excludedNamespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * ExcludedResources is a slice of resource names that are not included in the backup.
             */
            excludedResources?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Hooks represent custom behaviors that should be executed at different phases of the backup.
             */
            hooks?: pulumi.Input<inputs.velero.v1.BackupSpecHooks>;
            /**
             * IncludeClusterResources specifies whether cluster-scoped resources should be included for consideration in the backup.
             */
            includeClusterResources?: pulumi.Input<boolean>;
            /**
             * IncludedNamespaces is a slice of namespace names to include objects from. If empty, all namespaces are included.
             */
            includedNamespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IncludedResources is a slice of resource names to include in the backup. If empty, all resources are included.
             */
            includedResources?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * LabelSelector is a metav1.LabelSelector to filter with when adding individual objects to the backup. If empty or nil, all objects are included. Optional.
             */
            labelSelector?: pulumi.Input<inputs.velero.v1.BackupSpecLabelSelector>;
            /**
             * SnapshotVolumes specifies whether to take cloud snapshots of any PV's referenced in the set of objects included in the Backup.
             */
            snapshotVolumes?: pulumi.Input<boolean>;
            /**
             * StorageLocation is a string containing the name of a BackupStorageLocation where the backup should be stored.
             */
            storageLocation?: pulumi.Input<string>;
            /**
             * TTL is a time.Duration-parseable string describing how long the Backup should be retained for.
             */
            ttl?: pulumi.Input<string>;
            /**
             * VolumeSnapshotLocations is a list containing names of VolumeSnapshotLocations associated with this backup.
             */
            volumeSnapshotLocations?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Hooks represent custom behaviors that should be executed at different phases of the backup.
         */
        export interface BackupSpecHooks {
            /**
             * Resources are hooks that should be executed when backing up individual instances of a resource.
             */
            resources?: pulumi.Input<pulumi.Input<inputs.velero.v1.BackupSpecHooksResources>[]>;
        }

        /**
         * BackupResourceHookSpec defines one or more BackupResourceHooks that should be executed based on the rules defined for namespaces, resources, and label selector.
         */
        export interface BackupSpecHooksResources {
            /**
             * ExcludedNamespaces specifies the namespaces to which this hook spec does not apply.
             */
            excludedNamespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * ExcludedResources specifies the resources to which this hook spec does not apply.
             */
            excludedResources?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IncludedNamespaces specifies the namespaces to which this hook spec applies. If empty, it applies to all namespaces.
             */
            includedNamespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IncludedResources specifies the resources to which this hook spec applies. If empty, it applies to all resources.
             */
            includedResources?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * LabelSelector, if specified, filters the resources to which this hook spec applies.
             */
            labelSelector?: pulumi.Input<inputs.velero.v1.BackupSpecHooksResourcesLabelSelector>;
            /**
             * Name is the name of this hook.
             */
            name: pulumi.Input<string>;
            /**
             * PostHooks is a list of BackupResourceHooks to execute after storing the item in the backup. These are executed after all "additional items" from item actions are processed.
             */
            post?: pulumi.Input<pulumi.Input<inputs.velero.v1.BackupSpecHooksResourcesPost>[]>;
            /**
             * PreHooks is a list of BackupResourceHooks to execute prior to storing the item in the backup. These are executed before any "additional items" from item actions are processed.
             */
            pre?: pulumi.Input<pulumi.Input<inputs.velero.v1.BackupSpecHooksResourcesPre>[]>;
        }

        /**
         * LabelSelector, if specified, filters the resources to which this hook spec applies.
         */
        export interface BackupSpecHooksResourcesLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.velero.v1.BackupSpecHooksResourcesLabelSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface BackupSpecHooksResourcesLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * BackupResourceHook defines a hook for a resource.
         */
        export interface BackupSpecHooksResourcesPost {
            /**
             * Exec defines an exec hook.
             */
            exec: pulumi.Input<inputs.velero.v1.BackupSpecHooksResourcesPostExec>;
        }

        /**
         * Exec defines an exec hook.
         */
        export interface BackupSpecHooksResourcesPostExec {
            /**
             * Command is the command and arguments to execute.
             */
            command: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Container is the container in the pod where the command should be executed. If not specified, the pod's first container is used.
             */
            container?: pulumi.Input<string>;
            /**
             * OnError specifies how Velero should behave if it encounters an error executing this hook.
             */
            onError?: pulumi.Input<string>;
            /**
             * Timeout defines the maximum amount of time Velero should wait for the hook to complete before considering the execution a failure.
             */
            timeout?: pulumi.Input<string>;
        }

        /**
         * BackupResourceHook defines a hook for a resource.
         */
        export interface BackupSpecHooksResourcesPre {
            /**
             * Exec defines an exec hook.
             */
            exec: pulumi.Input<inputs.velero.v1.BackupSpecHooksResourcesPreExec>;
        }

        /**
         * Exec defines an exec hook.
         */
        export interface BackupSpecHooksResourcesPreExec {
            /**
             * Command is the command and arguments to execute.
             */
            command: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Container is the container in the pod where the command should be executed. If not specified, the pod's first container is used.
             */
            container?: pulumi.Input<string>;
            /**
             * OnError specifies how Velero should behave if it encounters an error executing this hook.
             */
            onError?: pulumi.Input<string>;
            /**
             * Timeout defines the maximum amount of time Velero should wait for the hook to complete before considering the execution a failure.
             */
            timeout?: pulumi.Input<string>;
        }

        /**
         * LabelSelector is a metav1.LabelSelector to filter with when adding individual objects to the backup. If empty or nil, all objects are included. Optional.
         */
        export interface BackupSpecLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.velero.v1.BackupSpecLabelSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface BackupSpecLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * BackupStatus captures the current status of a Velero backup.
         */
        export interface BackupStatus {
            /**
             * CompletionTimestamp records the time a backup was completed. Completion time is recorded even on failed backups. Completion time is recorded before uploading the backup object. The server's time is used for CompletionTimestamps
             */
            completionTimestamp?: pulumi.Input<string>;
            /**
             * Errors is a count of all error messages that were generated during execution of the backup.  The actual errors are in the backup's log file in object storage.
             */
            errors?: pulumi.Input<number>;
            /**
             * Expiration is when this Backup is eligible for garbage-collection.
             */
            expiration?: pulumi.Input<string>;
            /**
             * Phase is the current state of the Backup.
             */
            phase?: pulumi.Input<string>;
            /**
             * StartTimestamp records the time a backup was started. Separate from CreationTimestamp, since that value changes on restores. The server's time is used for StartTimestamps
             */
            startTimestamp?: pulumi.Input<string>;
            /**
             * ValidationErrors is a slice of all validation errors (if applicable).
             */
            validationErrors?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Version is the backup format version.
             */
            version?: pulumi.Input<number>;
            /**
             * VolumeSnapshotsAttempted is the total number of attempted volume snapshots for this backup.
             */
            volumeSnapshotsAttempted?: pulumi.Input<number>;
            /**
             * VolumeSnapshotsCompleted is the total number of successfully completed volume snapshots for this backup.
             */
            volumeSnapshotsCompleted?: pulumi.Input<number>;
            /**
             * Warnings is a count of all warning messages that were generated during execution of the backup. The actual warnings are in the backup's log file in object storage.
             */
            warnings?: pulumi.Input<number>;
        }

        /**
         * BackupStorageLocationSpec defines the specification for a Velero BackupStorageLocation.
         */
        export interface BackupStorageLocationSpec {
            /**
             * AccessMode defines the permissions for the backup storage location.
             */
            accessMode?: pulumi.Input<string>;
            /**
             * BackupSyncPeriod defines how frequently to sync backup API objects from object storage. A value of 0 disables sync.
             */
            backupSyncPeriod?: pulumi.Input<string>;
            /**
             * Config is for provider-specific configuration fields.
             */
            config?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * ObjectStorageLocation specifies the settings necessary to connect to a provider's object storage.
             */
            objectStorage: pulumi.Input<inputs.velero.v1.BackupStorageLocationSpecObjectStorage>;
            /**
             * Provider is the provider of the backup storage.
             */
            provider: pulumi.Input<string>;
        }

        /**
         * ObjectStorageLocation specifies the settings necessary to connect to a provider's object storage.
         */
        export interface BackupStorageLocationSpecObjectStorage {
            /**
             * Bucket is the bucket to use for object storage.
             */
            bucket: pulumi.Input<string>;
            /**
             * Prefix is the path inside a bucket to use for Velero storage. Optional.
             */
            prefix?: pulumi.Input<string>;
        }

        /**
         * BackupStorageLocationStatus describes the current status of a Velero BackupStorageLocation.
         */
        export interface BackupStorageLocationStatus {
            /**
             * AccessMode is an unused field. 
             *  Deprecated: there is now an AccessMode field on the Spec and this field will be removed entirely as of v2.0.
             */
            accessMode?: pulumi.Input<string>;
            /**
             * LastSyncedRevision is the value of the `metadata/revision` file in the backup storage location the last time the BSL's contents were synced into the cluster. 
             *  Deprecated: this field is no longer updated or used for detecting changes to the location's contents and will be removed entirely in v2.0.
             */
            lastSyncedRevision?: pulumi.Input<string>;
            /**
             * LastSyncedTime is the last time the contents of the location were synced into the cluster.
             */
            lastSyncedTime?: pulumi.Input<string>;
            /**
             * Phase is the current state of the BackupStorageLocation.
             */
            phase?: pulumi.Input<string>;
        }

        /**
         * DeleteBackupRequestSpec is the specification for which backups to delete.
         */
        export interface DeleteBackupRequestSpec {
            backupName: pulumi.Input<string>;
        }

        /**
         * DeleteBackupRequestStatus is the current status of a DeleteBackupRequest.
         */
        export interface DeleteBackupRequestStatus {
            /**
             * Errors contains any errors that were encountered during the deletion process.
             */
            errors?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Phase is the current state of the DeleteBackupRequest.
             */
            phase?: pulumi.Input<string>;
        }

        /**
         * DownloadRequestSpec is the specification for a download request.
         */
        export interface DownloadRequestSpec {
            /**
             * Target is what to download (e.g. logs for a backup).
             */
            target: pulumi.Input<inputs.velero.v1.DownloadRequestSpecTarget>;
        }

        /**
         * Target is what to download (e.g. logs for a backup).
         */
        export interface DownloadRequestSpecTarget {
            /**
             * Kind is the type of file to download.
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of the kubernetes resource with which the file is associated.
             */
            name: pulumi.Input<string>;
        }

        /**
         * DownloadRequestStatus is the current status of a DownloadRequest.
         */
        export interface DownloadRequestStatus {
            /**
             * DownloadURL contains the pre-signed URL for the target file.
             */
            downloadURL?: pulumi.Input<string>;
            /**
             * Expiration is when this DownloadRequest expires and can be deleted by the system.
             */
            expiration?: pulumi.Input<string>;
            /**
             * Phase is the current state of the DownloadRequest.
             */
            phase?: pulumi.Input<string>;
        }

        /**
         * PodVolumeBackupSpec is the specification for a PodVolumeBackup.
         */
        export interface PodVolumeBackupSpec {
            /**
             * BackupStorageLocation is the name of the backup storage location where the restic repository is stored.
             */
            backupStorageLocation: pulumi.Input<string>;
            /**
             * Node is the name of the node that the Pod is running on.
             */
            node: pulumi.Input<string>;
            /**
             * Pod is a reference to the pod containing the volume to be backed up.
             */
            pod: pulumi.Input<inputs.velero.v1.PodVolumeBackupSpecPod>;
            /**
             * RepoIdentifier is the restic repository identifier.
             */
            repoIdentifier: pulumi.Input<string>;
            /**
             * Tags are a map of key-value pairs that should be applied to the volume backup as tags.
             */
            tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Volume is the name of the volume within the Pod to be backed up.
             */
            volume: pulumi.Input<string>;
        }

        /**
         * Pod is a reference to the pod containing the volume to be backed up.
         */
        export interface PodVolumeBackupSpecPod {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * PodVolumeBackupStatus is the current status of a PodVolumeBackup.
         */
        export interface PodVolumeBackupStatus {
            /**
             * CompletionTimestamp records the time a backup was completed. Completion time is recorded even on failed backups. Completion time is recorded before uploading the backup object. The server's time is used for CompletionTimestamps
             */
            completionTimestamp?: pulumi.Input<string>;
            /**
             * Message is a message about the pod volume backup's status.
             */
            message?: pulumi.Input<string>;
            /**
             * Path is the full path within the controller pod being backed up.
             */
            path?: pulumi.Input<string>;
            /**
             * Phase is the current state of the PodVolumeBackup.
             */
            phase?: pulumi.Input<string>;
            /**
             * Progress holds the total number of bytes of the volume and the current number of backed up bytes. This can be used to display progress information about the backup operation.
             */
            progress?: pulumi.Input<inputs.velero.v1.PodVolumeBackupStatusProgress>;
            /**
             * SnapshotID is the identifier for the snapshot of the pod volume.
             */
            snapshotID?: pulumi.Input<string>;
            /**
             * StartTimestamp records the time a backup was started. Separate from CreationTimestamp, since that value changes on restores. The server's time is used for StartTimestamps
             */
            startTimestamp?: pulumi.Input<string>;
        }

        /**
         * Progress holds the total number of bytes of the volume and the current number of backed up bytes. This can be used to display progress information about the backup operation.
         */
        export interface PodVolumeBackupStatusProgress {
            bytesDone?: pulumi.Input<number>;
            totalBytes?: pulumi.Input<number>;
        }

        /**
         * PodVolumeRestoreSpec is the specification for a PodVolumeRestore.
         */
        export interface PodVolumeRestoreSpec {
            /**
             * BackupStorageLocation is the name of the backup storage location where the restic repository is stored.
             */
            backupStorageLocation: pulumi.Input<string>;
            /**
             * Pod is a reference to the pod containing the volume to be restored.
             */
            pod: pulumi.Input<inputs.velero.v1.PodVolumeRestoreSpecPod>;
            /**
             * RepoIdentifier is the restic repository identifier.
             */
            repoIdentifier: pulumi.Input<string>;
            /**
             * SnapshotID is the ID of the volume snapshot to be restored.
             */
            snapshotID: pulumi.Input<string>;
            /**
             * Volume is the name of the volume within the Pod to be restored.
             */
            volume: pulumi.Input<string>;
        }

        /**
         * Pod is a reference to the pod containing the volume to be restored.
         */
        export interface PodVolumeRestoreSpecPod {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * PodVolumeRestoreStatus is the current status of a PodVolumeRestore.
         */
        export interface PodVolumeRestoreStatus {
            /**
             * CompletionTimestamp records the time a restore was completed. Completion time is recorded even on failed restores. The server's time is used for CompletionTimestamps
             */
            completionTimestamp?: pulumi.Input<string>;
            /**
             * Errors is a count of all error messages that were generated during execution of the pod volume restore. The actual errors are in the restic log
             */
            errors?: pulumi.Input<number>;
            /**
             * Message is a message about the pod volume restore's status.
             */
            message?: pulumi.Input<string>;
            /**
             * Phase is the current state of the PodVolumeRestore.
             */
            phase?: pulumi.Input<string>;
            /**
             * Progress holds the total number of bytes of the snapshot and the current number of restored bytes. This can be used to display progress information about the restore operation.
             */
            progress?: pulumi.Input<inputs.velero.v1.PodVolumeRestoreStatusProgress>;
            /**
             * ResticPod is the name of the restic pod which processed the restore. Any errors referenced in Errors or VerifyErrors will be logged in this pod's log.
             */
            resticPod?: pulumi.Input<string>;
            /**
             * StartTimestamp records the time a restore was started. The server's time is used for StartTimestamps
             */
            startTimestamp?: pulumi.Input<string>;
            /**
             * VerifyErrors is a count of all verification-related error messages that were generated during execution of the pod volume restore. The actual errors are in the restic log
             */
            verifyErrors?: pulumi.Input<number>;
        }

        /**
         * Progress holds the total number of bytes of the snapshot and the current number of restored bytes. This can be used to display progress information about the restore operation.
         */
        export interface PodVolumeRestoreStatusProgress {
            bytesDone?: pulumi.Input<number>;
            totalBytes?: pulumi.Input<number>;
        }

        /**
         * ResticRepositorySpec is the specification for a ResticRepository.
         */
        export interface ResticRepositorySpec {
            /**
             * BackupStorageLocation is the name of the BackupStorageLocation that should contain this repository.
             */
            backupStorageLocation: pulumi.Input<string>;
            /**
             * MaintenanceFrequency is how often maintenance should be run.
             */
            maintenanceFrequency: pulumi.Input<string>;
            /**
             * ResticIdentifier is the full restic-compatible string for identifying this repository.
             */
            resticIdentifier: pulumi.Input<string>;
            /**
             * VolumeNamespace is the namespace this restic repository contains pod volume backups for.
             */
            volumeNamespace: pulumi.Input<string>;
        }

        /**
         * ResticRepositoryStatus is the current status of a ResticRepository.
         */
        export interface ResticRepositoryStatus {
            /**
             * LastMaintenanceTime is the last time maintenance was run.
             */
            lastMaintenanceTime?: pulumi.Input<string>;
            /**
             * Message is a message about the current status of the ResticRepository.
             */
            message?: pulumi.Input<string>;
            /**
             * Phase is the current state of the ResticRepository.
             */
            phase?: pulumi.Input<string>;
        }

        /**
         * RestoreSpec defines the specification for a Velero restore.
         */
        export interface RestoreSpec {
            /**
             * BackupName is the unique name of the Velero backup to restore from.
             */
            backupName: pulumi.Input<string>;
            /**
             * ExcludedNamespaces contains a list of namespaces that are not included in the restore.
             */
            excludedNamespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * ExcludedResources is a slice of resource names that are not included in the restore.
             */
            excludedResources?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IncludeClusterResources specifies whether cluster-scoped resources should be included for consideration in the restore. If null, defaults to true.
             */
            includeClusterResources?: pulumi.Input<boolean>;
            /**
             * IncludedNamespaces is a slice of namespace names to include objects from. If empty, all namespaces are included.
             */
            includedNamespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IncludedResources is a slice of resource names to include in the restore. If empty, all resources in the backup are included.
             */
            includedResources?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * LabelSelector is a metav1.LabelSelector to filter with when restoring individual objects from the backup. If empty or nil, all objects are included. Optional.
             */
            labelSelector?: pulumi.Input<inputs.velero.v1.RestoreSpecLabelSelector>;
            /**
             * NamespaceMapping is a map of source namespace names to target namespace names to restore into. Any source namespaces not included in the map will be restored into namespaces of the same name.
             */
            namespaceMapping?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * RestorePVs specifies whether to restore all included PVs from snapshot (via the cloudprovider).
             */
            restorePVs?: pulumi.Input<boolean>;
            /**
             * ScheduleName is the unique name of the Velero schedule to restore from. If specified, and BackupName is empty, Velero will restore from the most recent successful backup created from this schedule.
             */
            scheduleName?: pulumi.Input<string>;
        }

        /**
         * LabelSelector is a metav1.LabelSelector to filter with when restoring individual objects from the backup. If empty or nil, all objects are included. Optional.
         */
        export interface RestoreSpecLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.velero.v1.RestoreSpecLabelSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface RestoreSpecLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * RestoreStatus captures the current status of a Velero restore
         */
        export interface RestoreStatus {
            /**
             * Errors is a count of all error messages that were generated during execution of the restore. The actual errors are stored in object storage.
             */
            errors?: pulumi.Input<number>;
            /**
             * FailureReason is an error that caused the entire restore to fail.
             */
            failureReason?: pulumi.Input<string>;
            /**
             * Phase is the current state of the Restore
             */
            phase?: pulumi.Input<string>;
            /**
             * PodVolumeRestoreErrors is a slice of all PodVolumeRestores with errors (errors encountered by restic when restoring a pod) (if applicable)
             */
            podVolumeRestoreErrors?: pulumi.Input<pulumi.Input<inputs.velero.v1.RestoreStatusPodVolumeRestoreErrors>[]>;
            /**
             * PodVolumeRestoreVerifyErrors is a slice of all PodVolumeRestore errors from restore verification (errors encountered by restic when verifying a pod restore) (if applicable)
             */
            podVolumeRestoreVerifyErrors?: pulumi.Input<pulumi.Input<inputs.velero.v1.RestoreStatusPodVolumeRestoreVerifyErrors>[]>;
            /**
             * ValidationErrors is a slice of all validation errors (if applicable)
             */
            validationErrors?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Warnings is a count of all warning messages that were generated during execution of the restore. The actual warnings are stored in object storage.
             */
            warnings?: pulumi.Input<number>;
        }

        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object.
         */
        export interface RestoreStatusPodVolumeRestoreErrors {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object.
         */
        export interface RestoreStatusPodVolumeRestoreVerifyErrors {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: pulumi.Input<string>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: pulumi.Input<string>;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * ScheduleSpec defines the specification for a Velero schedule
         */
        export interface ScheduleSpec {
            /**
             * Schedule is a Cron expression defining when to run the Backup.
             */
            schedule: pulumi.Input<string>;
            /**
             * Template is the definition of the Backup to be run on the provided schedule
             */
            template: pulumi.Input<inputs.velero.v1.ScheduleSpecTemplate>;
        }

        /**
         * Template is the definition of the Backup to be run on the provided schedule
         */
        export interface ScheduleSpecTemplate {
            /**
             * ExcludedNamespaces contains a list of namespaces that are not included in the backup.
             */
            excludedNamespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * ExcludedResources is a slice of resource names that are not included in the backup.
             */
            excludedResources?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Hooks represent custom behaviors that should be executed at different phases of the backup.
             */
            hooks?: pulumi.Input<inputs.velero.v1.ScheduleSpecTemplateHooks>;
            /**
             * IncludeClusterResources specifies whether cluster-scoped resources should be included for consideration in the backup.
             */
            includeClusterResources?: pulumi.Input<boolean>;
            /**
             * IncludedNamespaces is a slice of namespace names to include objects from. If empty, all namespaces are included.
             */
            includedNamespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IncludedResources is a slice of resource names to include in the backup. If empty, all resources are included.
             */
            includedResources?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * LabelSelector is a metav1.LabelSelector to filter with when adding individual objects to the backup. If empty or nil, all objects are included. Optional.
             */
            labelSelector?: pulumi.Input<inputs.velero.v1.ScheduleSpecTemplateLabelSelector>;
            /**
             * SnapshotVolumes specifies whether to take cloud snapshots of any PV's referenced in the set of objects included in the Backup.
             */
            snapshotVolumes?: pulumi.Input<boolean>;
            /**
             * StorageLocation is a string containing the name of a BackupStorageLocation where the backup should be stored.
             */
            storageLocation?: pulumi.Input<string>;
            /**
             * TTL is a time.Duration-parseable string describing how long the Backup should be retained for.
             */
            ttl?: pulumi.Input<string>;
            /**
             * VolumeSnapshotLocations is a list containing names of VolumeSnapshotLocations associated with this backup.
             */
            volumeSnapshotLocations?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Hooks represent custom behaviors that should be executed at different phases of the backup.
         */
        export interface ScheduleSpecTemplateHooks {
            /**
             * Resources are hooks that should be executed when backing up individual instances of a resource.
             */
            resources?: pulumi.Input<pulumi.Input<inputs.velero.v1.ScheduleSpecTemplateHooksResources>[]>;
        }

        /**
         * BackupResourceHookSpec defines one or more BackupResourceHooks that should be executed based on the rules defined for namespaces, resources, and label selector.
         */
        export interface ScheduleSpecTemplateHooksResources {
            /**
             * ExcludedNamespaces specifies the namespaces to which this hook spec does not apply.
             */
            excludedNamespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * ExcludedResources specifies the resources to which this hook spec does not apply.
             */
            excludedResources?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IncludedNamespaces specifies the namespaces to which this hook spec applies. If empty, it applies to all namespaces.
             */
            includedNamespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IncludedResources specifies the resources to which this hook spec applies. If empty, it applies to all resources.
             */
            includedResources?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * LabelSelector, if specified, filters the resources to which this hook spec applies.
             */
            labelSelector?: pulumi.Input<inputs.velero.v1.ScheduleSpecTemplateHooksResourcesLabelSelector>;
            /**
             * Name is the name of this hook.
             */
            name: pulumi.Input<string>;
            /**
             * PostHooks is a list of BackupResourceHooks to execute after storing the item in the backup. These are executed after all "additional items" from item actions are processed.
             */
            post?: pulumi.Input<pulumi.Input<inputs.velero.v1.ScheduleSpecTemplateHooksResourcesPost>[]>;
            /**
             * PreHooks is a list of BackupResourceHooks to execute prior to storing the item in the backup. These are executed before any "additional items" from item actions are processed.
             */
            pre?: pulumi.Input<pulumi.Input<inputs.velero.v1.ScheduleSpecTemplateHooksResourcesPre>[]>;
        }

        /**
         * LabelSelector, if specified, filters the resources to which this hook spec applies.
         */
        export interface ScheduleSpecTemplateHooksResourcesLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.velero.v1.ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ScheduleSpecTemplateHooksResourcesLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * BackupResourceHook defines a hook for a resource.
         */
        export interface ScheduleSpecTemplateHooksResourcesPost {
            /**
             * Exec defines an exec hook.
             */
            exec: pulumi.Input<inputs.velero.v1.ScheduleSpecTemplateHooksResourcesPostExec>;
        }

        /**
         * Exec defines an exec hook.
         */
        export interface ScheduleSpecTemplateHooksResourcesPostExec {
            /**
             * Command is the command and arguments to execute.
             */
            command: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Container is the container in the pod where the command should be executed. If not specified, the pod's first container is used.
             */
            container?: pulumi.Input<string>;
            /**
             * OnError specifies how Velero should behave if it encounters an error executing this hook.
             */
            onError?: pulumi.Input<string>;
            /**
             * Timeout defines the maximum amount of time Velero should wait for the hook to complete before considering the execution a failure.
             */
            timeout?: pulumi.Input<string>;
        }

        /**
         * BackupResourceHook defines a hook for a resource.
         */
        export interface ScheduleSpecTemplateHooksResourcesPre {
            /**
             * Exec defines an exec hook.
             */
            exec: pulumi.Input<inputs.velero.v1.ScheduleSpecTemplateHooksResourcesPreExec>;
        }

        /**
         * Exec defines an exec hook.
         */
        export interface ScheduleSpecTemplateHooksResourcesPreExec {
            /**
             * Command is the command and arguments to execute.
             */
            command: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Container is the container in the pod where the command should be executed. If not specified, the pod's first container is used.
             */
            container?: pulumi.Input<string>;
            /**
             * OnError specifies how Velero should behave if it encounters an error executing this hook.
             */
            onError?: pulumi.Input<string>;
            /**
             * Timeout defines the maximum amount of time Velero should wait for the hook to complete before considering the execution a failure.
             */
            timeout?: pulumi.Input<string>;
        }

        /**
         * LabelSelector is a metav1.LabelSelector to filter with when adding individual objects to the backup. If empty or nil, all objects are included. Optional.
         */
        export interface ScheduleSpecTemplateLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.velero.v1.ScheduleSpecTemplateLabelSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ScheduleSpecTemplateLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * ScheduleStatus captures the current state of a Velero schedule
         */
        export interface ScheduleStatus {
            /**
             * LastBackup is the last time a Backup was run for this Schedule schedule
             */
            lastBackup?: pulumi.Input<string>;
            /**
             * Phase is the current phase of the Schedule
             */
            phase?: pulumi.Input<string>;
            /**
             * ValidationErrors is a slice of all validation errors (if applicable)
             */
            validationErrors?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * ServerStatusRequestStatus is the current status of a ServerStatusRequest.
         */
        export interface ServerStatusRequestStatus {
            /**
             * Phase is the current lifecycle phase of the ServerStatusRequest.
             */
            phase?: pulumi.Input<string>;
            /**
             * Plugins list information about the plugins running on the Velero server
             */
            plugins?: pulumi.Input<pulumi.Input<inputs.velero.v1.ServerStatusRequestStatusPlugins>[]>;
            /**
             * ProcessedTimestamp is when the ServerStatusRequest was processed by the ServerStatusRequestController.
             */
            processedTimestamp?: pulumi.Input<string>;
            /**
             * ServerVersion is the Velero server version.
             */
            serverVersion?: pulumi.Input<string>;
        }

        /**
         * PluginInfo contains attributes of a Velero plugin
         */
        export interface ServerStatusRequestStatusPlugins {
            kind: pulumi.Input<string>;
            name: pulumi.Input<string>;
        }

        /**
         * VolumeSnapshotLocationSpec defines the specification for a Velero VolumeSnapshotLocation.
         */
        export interface VolumeSnapshotLocationSpec {
            /**
             * Config is for provider-specific configuration fields.
             */
            config?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Provider is the provider of the volume storage.
             */
            provider: pulumi.Input<string>;
        }

        /**
         * VolumeSnapshotLocationStatus describes the current status of a Velero VolumeSnapshotLocation.
         */
        export interface VolumeSnapshotLocationStatus {
            /**
             * VolumeSnapshotLocationPhase is the lifecyle phase of a Velero VolumeSnapshotLocation.
             */
            phase?: pulumi.Input<string>;
        }
    }
}

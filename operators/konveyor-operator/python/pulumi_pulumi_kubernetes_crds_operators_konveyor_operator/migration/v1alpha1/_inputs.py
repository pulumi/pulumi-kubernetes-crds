# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'MigAnalyticSpecArgs',
    'MigAnalyticStatusArgs',
    'MigAnalyticStatusAnalyticsArgs',
    'MigAnalyticStatusAnalyticsNamespacesArgs',
    'MigAnalyticStatusAnalyticsNamespacesExcludedK8SResourcesArgs',
    'MigAnalyticStatusAnalyticsNamespacesImagesArgs',
    'MigAnalyticStatusAnalyticsNamespacesIncompatibleK8SResourcesArgs',
    'MigAnalyticStatusAnalyticsNamespacesK8sResourcesArgs',
    'MigClusterSpecArgs',
    'MigClusterSpecStorageClassesArgs',
    'MigClusterStatusArgs',
    'MigHookSpecArgs',
    'MigHookStatusArgs',
    'MigMigrationSpecArgs',
    'MigMigrationStatusArgs',
    'MigPlanSpecArgs',
    'MigPlanSpecHooksArgs',
    'MigPlanSpecPersistentVolumesArgs',
    'MigPlanSpecPersistentVolumesPvcArgs',
    'MigPlanSpecPersistentVolumesSelectionArgs',
    'MigPlanSpecPersistentVolumesSupportedArgs',
    'MigPlanStatusArgs',
    'MigPlanStatusIncompatibleNamespacesArgs',
    'MigPlanStatusIncompatibleNamespacesGvksArgs',
    'MigStorageSpecArgs',
    'MigStorageSpecBackupStorageConfigArgs',
    'MigStorageSpecVolumeSnapshotConfigArgs',
    'MigStorageStatusArgs',
]

@pulumi.input_type
class MigAnalyticSpecArgs:
    def __init__(__self__, *,
                 analyze_image_count: pulumi.Input[bool],
                 analyze_k8_s_resources: pulumi.Input[bool],
                 analyze_pv_capacity: pulumi.Input[bool],
                 mig_plan_ref: pulumi.Input[Mapping[str, Any]],
                 list_images: Optional[pulumi.Input[bool]] = None,
                 list_images_limit: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "analyze_image_count", analyze_image_count)
        pulumi.set(__self__, "analyze_k8_s_resources", analyze_k8_s_resources)
        pulumi.set(__self__, "analyze_pv_capacity", analyze_pv_capacity)
        pulumi.set(__self__, "mig_plan_ref", mig_plan_ref)
        if list_images is not None:
            pulumi.set(__self__, "list_images", list_images)
        if list_images_limit is not None:
            pulumi.set(__self__, "list_images_limit", list_images_limit)

    @property
    @pulumi.getter(name="analyzeImageCount")
    def analyze_image_count(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "analyze_image_count")

    @analyze_image_count.setter
    def analyze_image_count(self, value: pulumi.Input[bool]):
        pulumi.set(self, "analyze_image_count", value)

    @property
    @pulumi.getter(name="analyzeK8SResources")
    def analyze_k8_s_resources(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "analyze_k8_s_resources")

    @analyze_k8_s_resources.setter
    def analyze_k8_s_resources(self, value: pulumi.Input[bool]):
        pulumi.set(self, "analyze_k8_s_resources", value)

    @property
    @pulumi.getter(name="analyzePVCapacity")
    def analyze_pv_capacity(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "analyze_pv_capacity")

    @analyze_pv_capacity.setter
    def analyze_pv_capacity(self, value: pulumi.Input[bool]):
        pulumi.set(self, "analyze_pv_capacity", value)

    @property
    @pulumi.getter(name="migPlanRef")
    def mig_plan_ref(self) -> pulumi.Input[Mapping[str, Any]]:
        return pulumi.get(self, "mig_plan_ref")

    @mig_plan_ref.setter
    def mig_plan_ref(self, value: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(self, "mig_plan_ref", value)

    @property
    @pulumi.getter(name="listImages")
    def list_images(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "list_images")

    @list_images.setter
    def list_images(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "list_images", value)

    @property
    @pulumi.getter(name="listImagesLimit")
    def list_images_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "list_images_limit")

    @list_images_limit.setter
    def list_images_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "list_images_limit", value)


@pulumi.input_type
class MigAnalyticStatusArgs:
    def __init__(__self__, *,
                 analytics: Optional[pulumi.Input['MigAnalyticStatusAnalyticsArgs']] = None,
                 observed_generation: Optional[pulumi.Input[int]] = None):
        if analytics is not None:
            pulumi.set(__self__, "analytics", analytics)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)

    @property
    @pulumi.getter
    def analytics(self) -> Optional[pulumi.Input['MigAnalyticStatusAnalyticsArgs']]:
        return pulumi.get(self, "analytics")

    @analytics.setter
    def analytics(self, value: Optional[pulumi.Input['MigAnalyticStatusAnalyticsArgs']]):
        pulumi.set(self, "analytics", value)

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "observed_generation")

    @observed_generation.setter
    def observed_generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "observed_generation", value)


@pulumi.input_type
class MigAnalyticStatusAnalyticsArgs:
    def __init__(__self__, *,
                 excludedk8s_resource_total: pulumi.Input[int],
                 image_count: pulumi.Input[int],
                 image_size_total: pulumi.Input[str],
                 incompatiblek8s_resource_total: pulumi.Input[int],
                 k8s_resource_total: pulumi.Input[int],
                 percent_complete: pulumi.Input[int],
                 plan: pulumi.Input[str],
                 pv_capacity: pulumi.Input[str],
                 pv_count: pulumi.Input[int],
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input['MigAnalyticStatusAnalyticsNamespacesArgs']]]] = None):
        pulumi.set(__self__, "excludedk8s_resource_total", excludedk8s_resource_total)
        pulumi.set(__self__, "image_count", image_count)
        pulumi.set(__self__, "image_size_total", image_size_total)
        pulumi.set(__self__, "incompatiblek8s_resource_total", incompatiblek8s_resource_total)
        pulumi.set(__self__, "k8s_resource_total", k8s_resource_total)
        pulumi.set(__self__, "percent_complete", percent_complete)
        pulumi.set(__self__, "plan", plan)
        pulumi.set(__self__, "pv_capacity", pv_capacity)
        pulumi.set(__self__, "pv_count", pv_count)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="excludedk8sResourceTotal")
    def excludedk8s_resource_total(self) -> pulumi.Input[int]:
        return pulumi.get(self, "excludedk8s_resource_total")

    @excludedk8s_resource_total.setter
    def excludedk8s_resource_total(self, value: pulumi.Input[int]):
        pulumi.set(self, "excludedk8s_resource_total", value)

    @property
    @pulumi.getter(name="imageCount")
    def image_count(self) -> pulumi.Input[int]:
        return pulumi.get(self, "image_count")

    @image_count.setter
    def image_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "image_count", value)

    @property
    @pulumi.getter(name="imageSizeTotal")
    def image_size_total(self) -> pulumi.Input[str]:
        return pulumi.get(self, "image_size_total")

    @image_size_total.setter
    def image_size_total(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_size_total", value)

    @property
    @pulumi.getter(name="incompatiblek8sResourceTotal")
    def incompatiblek8s_resource_total(self) -> pulumi.Input[int]:
        return pulumi.get(self, "incompatiblek8s_resource_total")

    @incompatiblek8s_resource_total.setter
    def incompatiblek8s_resource_total(self, value: pulumi.Input[int]):
        pulumi.set(self, "incompatiblek8s_resource_total", value)

    @property
    @pulumi.getter(name="k8sResourceTotal")
    def k8s_resource_total(self) -> pulumi.Input[int]:
        return pulumi.get(self, "k8s_resource_total")

    @k8s_resource_total.setter
    def k8s_resource_total(self, value: pulumi.Input[int]):
        pulumi.set(self, "k8s_resource_total", value)

    @property
    @pulumi.getter(name="percentComplete")
    def percent_complete(self) -> pulumi.Input[int]:
        return pulumi.get(self, "percent_complete")

    @percent_complete.setter
    def percent_complete(self, value: pulumi.Input[int]):
        pulumi.set(self, "percent_complete", value)

    @property
    @pulumi.getter
    def plan(self) -> pulumi.Input[str]:
        return pulumi.get(self, "plan")

    @plan.setter
    def plan(self, value: pulumi.Input[str]):
        pulumi.set(self, "plan", value)

    @property
    @pulumi.getter(name="pvCapacity")
    def pv_capacity(self) -> pulumi.Input[str]:
        return pulumi.get(self, "pv_capacity")

    @pv_capacity.setter
    def pv_capacity(self, value: pulumi.Input[str]):
        pulumi.set(self, "pv_capacity", value)

    @property
    @pulumi.getter(name="pvCount")
    def pv_count(self) -> pulumi.Input[int]:
        return pulumi.get(self, "pv_count")

    @pv_count.setter
    def pv_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "pv_count", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MigAnalyticStatusAnalyticsNamespacesArgs']]]]:
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MigAnalyticStatusAnalyticsNamespacesArgs']]]]):
        pulumi.set(self, "namespaces", value)


@pulumi.input_type
class MigAnalyticStatusAnalyticsNamespacesArgs:
    def __init__(__self__, *,
                 excluded_k8_s_resource_total: pulumi.Input[int],
                 image_count: pulumi.Input[int],
                 image_size_total: pulumi.Input[str],
                 incompatible_k8_s_resource_total: pulumi.Input[int],
                 k8s_resource_total: pulumi.Input[int],
                 namespace: pulumi.Input[str],
                 pv_capacity: pulumi.Input[str],
                 pv_count: pulumi.Input[int],
                 excluded_k8_s_resources: Optional[pulumi.Input[Sequence[pulumi.Input['MigAnalyticStatusAnalyticsNamespacesExcludedK8SResourcesArgs']]]] = None,
                 images: Optional[pulumi.Input[Sequence[pulumi.Input['MigAnalyticStatusAnalyticsNamespacesImagesArgs']]]] = None,
                 incompatible_k8_s_resources: Optional[pulumi.Input[Sequence[pulumi.Input['MigAnalyticStatusAnalyticsNamespacesIncompatibleK8SResourcesArgs']]]] = None,
                 k8s_resources: Optional[pulumi.Input[Sequence[pulumi.Input['MigAnalyticStatusAnalyticsNamespacesK8sResourcesArgs']]]] = None):
        pulumi.set(__self__, "excluded_k8_s_resource_total", excluded_k8_s_resource_total)
        pulumi.set(__self__, "image_count", image_count)
        pulumi.set(__self__, "image_size_total", image_size_total)
        pulumi.set(__self__, "incompatible_k8_s_resource_total", incompatible_k8_s_resource_total)
        pulumi.set(__self__, "k8s_resource_total", k8s_resource_total)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "pv_capacity", pv_capacity)
        pulumi.set(__self__, "pv_count", pv_count)
        if excluded_k8_s_resources is not None:
            pulumi.set(__self__, "excluded_k8_s_resources", excluded_k8_s_resources)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if incompatible_k8_s_resources is not None:
            pulumi.set(__self__, "incompatible_k8_s_resources", incompatible_k8_s_resources)
        if k8s_resources is not None:
            pulumi.set(__self__, "k8s_resources", k8s_resources)

    @property
    @pulumi.getter(name="excludedK8SResourceTotal")
    def excluded_k8_s_resource_total(self) -> pulumi.Input[int]:
        return pulumi.get(self, "excluded_k8_s_resource_total")

    @excluded_k8_s_resource_total.setter
    def excluded_k8_s_resource_total(self, value: pulumi.Input[int]):
        pulumi.set(self, "excluded_k8_s_resource_total", value)

    @property
    @pulumi.getter(name="imageCount")
    def image_count(self) -> pulumi.Input[int]:
        return pulumi.get(self, "image_count")

    @image_count.setter
    def image_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "image_count", value)

    @property
    @pulumi.getter(name="imageSizeTotal")
    def image_size_total(self) -> pulumi.Input[str]:
        return pulumi.get(self, "image_size_total")

    @image_size_total.setter
    def image_size_total(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_size_total", value)

    @property
    @pulumi.getter(name="incompatibleK8SResourceTotal")
    def incompatible_k8_s_resource_total(self) -> pulumi.Input[int]:
        return pulumi.get(self, "incompatible_k8_s_resource_total")

    @incompatible_k8_s_resource_total.setter
    def incompatible_k8_s_resource_total(self, value: pulumi.Input[int]):
        pulumi.set(self, "incompatible_k8_s_resource_total", value)

    @property
    @pulumi.getter(name="k8sResourceTotal")
    def k8s_resource_total(self) -> pulumi.Input[int]:
        return pulumi.get(self, "k8s_resource_total")

    @k8s_resource_total.setter
    def k8s_resource_total(self, value: pulumi.Input[int]):
        pulumi.set(self, "k8s_resource_total", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="pvCapacity")
    def pv_capacity(self) -> pulumi.Input[str]:
        return pulumi.get(self, "pv_capacity")

    @pv_capacity.setter
    def pv_capacity(self, value: pulumi.Input[str]):
        pulumi.set(self, "pv_capacity", value)

    @property
    @pulumi.getter(name="pvCount")
    def pv_count(self) -> pulumi.Input[int]:
        return pulumi.get(self, "pv_count")

    @pv_count.setter
    def pv_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "pv_count", value)

    @property
    @pulumi.getter(name="excludedK8SResources")
    def excluded_k8_s_resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MigAnalyticStatusAnalyticsNamespacesExcludedK8SResourcesArgs']]]]:
        return pulumi.get(self, "excluded_k8_s_resources")

    @excluded_k8_s_resources.setter
    def excluded_k8_s_resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MigAnalyticStatusAnalyticsNamespacesExcludedK8SResourcesArgs']]]]):
        pulumi.set(self, "excluded_k8_s_resources", value)

    @property
    @pulumi.getter
    def images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MigAnalyticStatusAnalyticsNamespacesImagesArgs']]]]:
        return pulumi.get(self, "images")

    @images.setter
    def images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MigAnalyticStatusAnalyticsNamespacesImagesArgs']]]]):
        pulumi.set(self, "images", value)

    @property
    @pulumi.getter(name="incompatibleK8SResources")
    def incompatible_k8_s_resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MigAnalyticStatusAnalyticsNamespacesIncompatibleK8SResourcesArgs']]]]:
        return pulumi.get(self, "incompatible_k8_s_resources")

    @incompatible_k8_s_resources.setter
    def incompatible_k8_s_resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MigAnalyticStatusAnalyticsNamespacesIncompatibleK8SResourcesArgs']]]]):
        pulumi.set(self, "incompatible_k8_s_resources", value)

    @property
    @pulumi.getter(name="k8sResources")
    def k8s_resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MigAnalyticStatusAnalyticsNamespacesK8sResourcesArgs']]]]:
        return pulumi.get(self, "k8s_resources")

    @k8s_resources.setter
    def k8s_resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MigAnalyticStatusAnalyticsNamespacesK8sResourcesArgs']]]]):
        pulumi.set(self, "k8s_resources", value)


@pulumi.input_type
class MigAnalyticStatusAnalyticsNamespacesExcludedK8SResourcesArgs:
    def __init__(__self__, *,
                 count: pulumi.Input[int],
                 group: pulumi.Input[str],
                 kind: pulumi.Input[str],
                 version: pulumi.Input[str]):
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def count(self) -> pulumi.Input[int]:
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: pulumi.Input[int]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: pulumi.Input[str]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[str]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[str]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class MigAnalyticStatusAnalyticsNamespacesImagesArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 reference: pulumi.Input[str],
                 size: pulumi.Input[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "reference", reference)
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def reference(self) -> pulumi.Input[str]:
        return pulumi.get(self, "reference")

    @reference.setter
    def reference(self, value: pulumi.Input[str]):
        pulumi.set(self, "reference", value)

    @property
    @pulumi.getter
    def size(self) -> pulumi.Input[str]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: pulumi.Input[str]):
        pulumi.set(self, "size", value)


@pulumi.input_type
class MigAnalyticStatusAnalyticsNamespacesIncompatibleK8SResourcesArgs:
    def __init__(__self__, *,
                 count: pulumi.Input[int],
                 group: pulumi.Input[str],
                 kind: pulumi.Input[str],
                 version: pulumi.Input[str]):
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def count(self) -> pulumi.Input[int]:
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: pulumi.Input[int]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: pulumi.Input[str]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[str]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[str]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class MigAnalyticStatusAnalyticsNamespacesK8sResourcesArgs:
    def __init__(__self__, *,
                 count: pulumi.Input[int],
                 group: pulumi.Input[str],
                 kind: pulumi.Input[str],
                 version: pulumi.Input[str]):
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def count(self) -> pulumi.Input[int]:
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: pulumi.Input[int]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: pulumi.Input[str]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[str]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[str]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class MigClusterSpecArgs:
    def __init__(__self__, *,
                 is_host_cluster: pulumi.Input[bool],
                 azure_resource_group: Optional[pulumi.Input[str]] = None,
                 ca_bundle: Optional[pulumi.Input[str]] = None,
                 insecure: Optional[pulumi.Input[bool]] = None,
                 restart_restic: Optional[pulumi.Input[bool]] = None,
                 service_account_secret_ref: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 storage_classes: Optional[pulumi.Input[Sequence[pulumi.Input['MigClusterSpecStorageClassesArgs']]]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "is_host_cluster", is_host_cluster)
        if azure_resource_group is not None:
            pulumi.set(__self__, "azure_resource_group", azure_resource_group)
        if ca_bundle is not None:
            pulumi.set(__self__, "ca_bundle", ca_bundle)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if restart_restic is not None:
            pulumi.set(__self__, "restart_restic", restart_restic)
        if service_account_secret_ref is not None:
            pulumi.set(__self__, "service_account_secret_ref", service_account_secret_ref)
        if storage_classes is not None:
            pulumi.set(__self__, "storage_classes", storage_classes)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="isHostCluster")
    def is_host_cluster(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "is_host_cluster")

    @is_host_cluster.setter
    def is_host_cluster(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_host_cluster", value)

    @property
    @pulumi.getter(name="azureResourceGroup")
    def azure_resource_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "azure_resource_group")

    @azure_resource_group.setter
    def azure_resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_resource_group", value)

    @property
    @pulumi.getter(name="caBundle")
    def ca_bundle(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ca_bundle")

    @ca_bundle.setter
    def ca_bundle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_bundle", value)

    @property
    @pulumi.getter
    def insecure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "insecure")

    @insecure.setter
    def insecure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insecure", value)

    @property
    @pulumi.getter(name="restartRestic")
    def restart_restic(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "restart_restic")

    @restart_restic.setter
    def restart_restic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "restart_restic", value)

    @property
    @pulumi.getter(name="serviceAccountSecretRef")
    def service_account_secret_ref(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "service_account_secret_ref")

    @service_account_secret_ref.setter
    def service_account_secret_ref(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "service_account_secret_ref", value)

    @property
    @pulumi.getter(name="storageClasses")
    def storage_classes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MigClusterSpecStorageClassesArgs']]]]:
        return pulumi.get(self, "storage_classes")

    @storage_classes.setter
    def storage_classes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MigClusterSpecStorageClassesArgs']]]]):
        pulumi.set(self, "storage_classes", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class MigClusterSpecStorageClassesArgs:
    def __init__(__self__, *,
                 access_modes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 default: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 provisioner: Optional[pulumi.Input[str]] = None):
        if access_modes is not None:
            pulumi.set(__self__, "access_modes", access_modes)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if provisioner is not None:
            pulumi.set(__self__, "provisioner", provisioner)

    @property
    @pulumi.getter(name="accessModes")
    def access_modes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "access_modes")

    @access_modes.setter
    def access_modes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "access_modes", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def provisioner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "provisioner")

    @provisioner.setter
    def provisioner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provisioner", value)


@pulumi.input_type
class MigClusterStatusArgs:
    def __init__(__self__, *,
                 observed_digest: Optional[pulumi.Input[str]] = None):
        if observed_digest is not None:
            pulumi.set(__self__, "observed_digest", observed_digest)

    @property
    @pulumi.getter(name="observedDigest")
    def observed_digest(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "observed_digest")

    @observed_digest.setter
    def observed_digest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "observed_digest", value)


@pulumi.input_type
class MigHookSpecArgs:
    def __init__(__self__, *,
                 custom: pulumi.Input[bool],
                 image: pulumi.Input[str],
                 target_cluster: pulumi.Input[str],
                 active_deadline_seconds: Optional[pulumi.Input[int]] = None,
                 playbook: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "custom", custom)
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "target_cluster", target_cluster)
        if active_deadline_seconds is not None:
            pulumi.set(__self__, "active_deadline_seconds", active_deadline_seconds)
        if playbook is not None:
            pulumi.set(__self__, "playbook", playbook)

    @property
    @pulumi.getter
    def custom(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "custom")

    @custom.setter
    def custom(self, value: pulumi.Input[bool]):
        pulumi.set(self, "custom", value)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input[str]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[str]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="targetCluster")
    def target_cluster(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target_cluster")

    @target_cluster.setter
    def target_cluster(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_cluster", value)

    @property
    @pulumi.getter(name="activeDeadlineSeconds")
    def active_deadline_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "active_deadline_seconds")

    @active_deadline_seconds.setter
    def active_deadline_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "active_deadline_seconds", value)

    @property
    @pulumi.getter
    def playbook(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "playbook")

    @playbook.setter
    def playbook(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "playbook", value)


@pulumi.input_type
class MigHookStatusArgs:
    def __init__(__self__, *,
                 observed_generation: Optional[pulumi.Input[int]] = None):
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "observed_generation")

    @observed_generation.setter
    def observed_generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "observed_generation", value)


@pulumi.input_type
class MigMigrationSpecArgs:
    def __init__(__self__, *,
                 stage: pulumi.Input[bool],
                 canceled: Optional[pulumi.Input[bool]] = None,
                 keep_annotations: Optional[pulumi.Input[bool]] = None,
                 mig_plan_ref: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 quiesce_pods: Optional[pulumi.Input[bool]] = None,
                 verify: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "stage", stage)
        if canceled is not None:
            pulumi.set(__self__, "canceled", canceled)
        if keep_annotations is not None:
            pulumi.set(__self__, "keep_annotations", keep_annotations)
        if mig_plan_ref is not None:
            pulumi.set(__self__, "mig_plan_ref", mig_plan_ref)
        if quiesce_pods is not None:
            pulumi.set(__self__, "quiesce_pods", quiesce_pods)
        if verify is not None:
            pulumi.set(__self__, "verify", verify)

    @property
    @pulumi.getter
    def stage(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "stage")

    @stage.setter
    def stage(self, value: pulumi.Input[bool]):
        pulumi.set(self, "stage", value)

    @property
    @pulumi.getter
    def canceled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "canceled")

    @canceled.setter
    def canceled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "canceled", value)

    @property
    @pulumi.getter(name="keepAnnotations")
    def keep_annotations(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "keep_annotations")

    @keep_annotations.setter
    def keep_annotations(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "keep_annotations", value)

    @property
    @pulumi.getter(name="migPlanRef")
    def mig_plan_ref(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "mig_plan_ref")

    @mig_plan_ref.setter
    def mig_plan_ref(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "mig_plan_ref", value)

    @property
    @pulumi.getter(name="quiescePods")
    def quiesce_pods(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "quiesce_pods")

    @quiesce_pods.setter
    def quiesce_pods(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "quiesce_pods", value)

    @property
    @pulumi.getter
    def verify(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "verify")

    @verify.setter
    def verify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "verify", value)


@pulumi.input_type
class MigMigrationStatusArgs:
    def __init__(__self__, *,
                 errors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 itinerary: Optional[pulumi.Input[str]] = None,
                 observed_digest: Optional[pulumi.Input[str]] = None,
                 phase: Optional[pulumi.Input[str]] = None,
                 start_timestamp: Optional[pulumi.Input[str]] = None):
        if errors is not None:
            pulumi.set(__self__, "errors", errors)
        if itinerary is not None:
            pulumi.set(__self__, "itinerary", itinerary)
        if observed_digest is not None:
            pulumi.set(__self__, "observed_digest", observed_digest)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)
        if start_timestamp is not None:
            pulumi.set(__self__, "start_timestamp", start_timestamp)

    @property
    @pulumi.getter
    def errors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "errors")

    @errors.setter
    def errors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "errors", value)

    @property
    @pulumi.getter
    def itinerary(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "itinerary")

    @itinerary.setter
    def itinerary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "itinerary", value)

    @property
    @pulumi.getter(name="observedDigest")
    def observed_digest(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "observed_digest")

    @observed_digest.setter
    def observed_digest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "observed_digest", value)

    @property
    @pulumi.getter
    def phase(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "phase")

    @phase.setter
    def phase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "phase", value)

    @property
    @pulumi.getter(name="startTimestamp")
    def start_timestamp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_timestamp")

    @start_timestamp.setter
    def start_timestamp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_timestamp", value)


@pulumi.input_type
class MigPlanSpecArgs:
    def __init__(__self__, *,
                 closed: Optional[pulumi.Input[bool]] = None,
                 dest_mig_cluster_ref: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 hooks: Optional[pulumi.Input[Sequence[pulumi.Input['MigPlanSpecHooksArgs']]]] = None,
                 mig_storage_ref: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 persistent_volumes: Optional[pulumi.Input[Sequence[pulumi.Input['MigPlanSpecPersistentVolumesArgs']]]] = None,
                 src_mig_cluster_ref: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        if closed is not None:
            pulumi.set(__self__, "closed", closed)
        if dest_mig_cluster_ref is not None:
            pulumi.set(__self__, "dest_mig_cluster_ref", dest_mig_cluster_ref)
        if hooks is not None:
            pulumi.set(__self__, "hooks", hooks)
        if mig_storage_ref is not None:
            pulumi.set(__self__, "mig_storage_ref", mig_storage_ref)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if persistent_volumes is not None:
            pulumi.set(__self__, "persistent_volumes", persistent_volumes)
        if src_mig_cluster_ref is not None:
            pulumi.set(__self__, "src_mig_cluster_ref", src_mig_cluster_ref)

    @property
    @pulumi.getter
    def closed(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "closed")

    @closed.setter
    def closed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "closed", value)

    @property
    @pulumi.getter(name="destMigClusterRef")
    def dest_mig_cluster_ref(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "dest_mig_cluster_ref")

    @dest_mig_cluster_ref.setter
    def dest_mig_cluster_ref(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "dest_mig_cluster_ref", value)

    @property
    @pulumi.getter
    def hooks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MigPlanSpecHooksArgs']]]]:
        return pulumi.get(self, "hooks")

    @hooks.setter
    def hooks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MigPlanSpecHooksArgs']]]]):
        pulumi.set(self, "hooks", value)

    @property
    @pulumi.getter(name="migStorageRef")
    def mig_storage_ref(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "mig_storage_ref")

    @mig_storage_ref.setter
    def mig_storage_ref(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "mig_storage_ref", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)

    @property
    @pulumi.getter(name="persistentVolumes")
    def persistent_volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MigPlanSpecPersistentVolumesArgs']]]]:
        return pulumi.get(self, "persistent_volumes")

    @persistent_volumes.setter
    def persistent_volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MigPlanSpecPersistentVolumesArgs']]]]):
        pulumi.set(self, "persistent_volumes", value)

    @property
    @pulumi.getter(name="srcMigClusterRef")
    def src_mig_cluster_ref(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "src_mig_cluster_ref")

    @src_mig_cluster_ref.setter
    def src_mig_cluster_ref(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "src_mig_cluster_ref", value)


@pulumi.input_type
class MigPlanSpecHooksArgs:
    def __init__(__self__, *,
                 execution_namespace: pulumi.Input[str],
                 phase: pulumi.Input[str],
                 reference: pulumi.Input[Mapping[str, Any]],
                 service_account: pulumi.Input[str]):
        pulumi.set(__self__, "execution_namespace", execution_namespace)
        pulumi.set(__self__, "phase", phase)
        pulumi.set(__self__, "reference", reference)
        pulumi.set(__self__, "service_account", service_account)

    @property
    @pulumi.getter(name="executionNamespace")
    def execution_namespace(self) -> pulumi.Input[str]:
        return pulumi.get(self, "execution_namespace")

    @execution_namespace.setter
    def execution_namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "execution_namespace", value)

    @property
    @pulumi.getter
    def phase(self) -> pulumi.Input[str]:
        return pulumi.get(self, "phase")

    @phase.setter
    def phase(self, value: pulumi.Input[str]):
        pulumi.set(self, "phase", value)

    @property
    @pulumi.getter
    def reference(self) -> pulumi.Input[Mapping[str, Any]]:
        return pulumi.get(self, "reference")

    @reference.setter
    def reference(self, value: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(self, "reference", value)

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service_account")

    @service_account.setter
    def service_account(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_account", value)


@pulumi.input_type
class MigPlanSpecPersistentVolumesArgs:
    def __init__(__self__, *,
                 selection: pulumi.Input['MigPlanSpecPersistentVolumesSelectionArgs'],
                 supported: pulumi.Input['MigPlanSpecPersistentVolumesSupportedArgs'],
                 capacity: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pvc: Optional[pulumi.Input['MigPlanSpecPersistentVolumesPvcArgs']] = None,
                 storage_class: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "selection", selection)
        pulumi.set(__self__, "supported", supported)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pvc is not None:
            pulumi.set(__self__, "pvc", pvc)
        if storage_class is not None:
            pulumi.set(__self__, "storage_class", storage_class)

    @property
    @pulumi.getter
    def selection(self) -> pulumi.Input['MigPlanSpecPersistentVolumesSelectionArgs']:
        return pulumi.get(self, "selection")

    @selection.setter
    def selection(self, value: pulumi.Input['MigPlanSpecPersistentVolumesSelectionArgs']):
        pulumi.set(self, "selection", value)

    @property
    @pulumi.getter
    def supported(self) -> pulumi.Input['MigPlanSpecPersistentVolumesSupportedArgs']:
        return pulumi.get(self, "supported")

    @supported.setter
    def supported(self, value: pulumi.Input['MigPlanSpecPersistentVolumesSupportedArgs']):
        pulumi.set(self, "supported", value)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def pvc(self) -> Optional[pulumi.Input['MigPlanSpecPersistentVolumesPvcArgs']]:
        return pulumi.get(self, "pvc")

    @pvc.setter
    def pvc(self, value: Optional[pulumi.Input['MigPlanSpecPersistentVolumesPvcArgs']]):
        pulumi.set(self, "pvc", value)

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage_class")

    @storage_class.setter
    def storage_class(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_class", value)


@pulumi.input_type
class MigPlanSpecPersistentVolumesPvcArgs:
    def __init__(__self__, *,
                 access_modes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 has_reference: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        if access_modes is not None:
            pulumi.set(__self__, "access_modes", access_modes)
        if has_reference is not None:
            pulumi.set(__self__, "has_reference", has_reference)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter(name="accessModes")
    def access_modes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "access_modes")

    @access_modes.setter
    def access_modes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "access_modes", value)

    @property
    @pulumi.getter(name="hasReference")
    def has_reference(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "has_reference")

    @has_reference.setter
    def has_reference(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "has_reference", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class MigPlanSpecPersistentVolumesSelectionArgs:
    def __init__(__self__, *,
                 access_mode: Optional[pulumi.Input[str]] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 copy_method: Optional[pulumi.Input[str]] = None,
                 storage_class: Optional[pulumi.Input[str]] = None,
                 verify: Optional[pulumi.Input[bool]] = None):
        if access_mode is not None:
            pulumi.set(__self__, "access_mode", access_mode)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if copy_method is not None:
            pulumi.set(__self__, "copy_method", copy_method)
        if storage_class is not None:
            pulumi.set(__self__, "storage_class", storage_class)
        if verify is not None:
            pulumi.set(__self__, "verify", verify)

    @property
    @pulumi.getter(name="accessMode")
    def access_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_mode")

    @access_mode.setter
    def access_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_mode", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="copyMethod")
    def copy_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "copy_method")

    @copy_method.setter
    def copy_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "copy_method", value)

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage_class")

    @storage_class.setter
    def storage_class(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_class", value)

    @property
    @pulumi.getter
    def verify(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "verify")

    @verify.setter
    def verify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "verify", value)


@pulumi.input_type
class MigPlanSpecPersistentVolumesSupportedArgs:
    def __init__(__self__, *,
                 actions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 copy_methods: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "copy_methods", copy_methods)

    @property
    @pulumi.getter
    def actions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="copyMethods")
    def copy_methods(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "copy_methods")

    @copy_methods.setter
    def copy_methods(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "copy_methods", value)


@pulumi.input_type
class MigPlanStatusArgs:
    def __init__(__self__, *,
                 excluded_resources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 incompatible_namespaces: Optional[pulumi.Input[Sequence[pulumi.Input['MigPlanStatusIncompatibleNamespacesArgs']]]] = None,
                 observed_digest: Optional[pulumi.Input[str]] = None):
        if excluded_resources is not None:
            pulumi.set(__self__, "excluded_resources", excluded_resources)
        if incompatible_namespaces is not None:
            pulumi.set(__self__, "incompatible_namespaces", incompatible_namespaces)
        if observed_digest is not None:
            pulumi.set(__self__, "observed_digest", observed_digest)

    @property
    @pulumi.getter(name="excludedResources")
    def excluded_resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "excluded_resources")

    @excluded_resources.setter
    def excluded_resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_resources", value)

    @property
    @pulumi.getter(name="incompatibleNamespaces")
    def incompatible_namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MigPlanStatusIncompatibleNamespacesArgs']]]]:
        return pulumi.get(self, "incompatible_namespaces")

    @incompatible_namespaces.setter
    def incompatible_namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MigPlanStatusIncompatibleNamespacesArgs']]]]):
        pulumi.set(self, "incompatible_namespaces", value)

    @property
    @pulumi.getter(name="observedDigest")
    def observed_digest(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "observed_digest")

    @observed_digest.setter
    def observed_digest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "observed_digest", value)


@pulumi.input_type
class MigPlanStatusIncompatibleNamespacesArgs:
    def __init__(__self__, *,
                 gvks: pulumi.Input[Sequence[pulumi.Input['MigPlanStatusIncompatibleNamespacesGvksArgs']]],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "gvks", gvks)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def gvks(self) -> pulumi.Input[Sequence[pulumi.Input['MigPlanStatusIncompatibleNamespacesGvksArgs']]]:
        return pulumi.get(self, "gvks")

    @gvks.setter
    def gvks(self, value: pulumi.Input[Sequence[pulumi.Input['MigPlanStatusIncompatibleNamespacesGvksArgs']]]):
        pulumi.set(self, "gvks", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class MigPlanStatusIncompatibleNamespacesGvksArgs:
    def __init__(__self__, *,
                 group: pulumi.Input[str],
                 kind: pulumi.Input[str],
                 version: pulumi.Input[str]):
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: pulumi.Input[str]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[str]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[str]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class MigStorageSpecArgs:
    def __init__(__self__, *,
                 backup_storage_config: pulumi.Input['MigStorageSpecBackupStorageConfigArgs'],
                 backup_storage_provider: pulumi.Input[str],
                 volume_snapshot_config: Optional[pulumi.Input['MigStorageSpecVolumeSnapshotConfigArgs']] = None,
                 volume_snapshot_provider: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "backup_storage_config", backup_storage_config)
        pulumi.set(__self__, "backup_storage_provider", backup_storage_provider)
        if volume_snapshot_config is not None:
            pulumi.set(__self__, "volume_snapshot_config", volume_snapshot_config)
        if volume_snapshot_provider is not None:
            pulumi.set(__self__, "volume_snapshot_provider", volume_snapshot_provider)

    @property
    @pulumi.getter(name="backupStorageConfig")
    def backup_storage_config(self) -> pulumi.Input['MigStorageSpecBackupStorageConfigArgs']:
        return pulumi.get(self, "backup_storage_config")

    @backup_storage_config.setter
    def backup_storage_config(self, value: pulumi.Input['MigStorageSpecBackupStorageConfigArgs']):
        pulumi.set(self, "backup_storage_config", value)

    @property
    @pulumi.getter(name="backupStorageProvider")
    def backup_storage_provider(self) -> pulumi.Input[str]:
        return pulumi.get(self, "backup_storage_provider")

    @backup_storage_provider.setter
    def backup_storage_provider(self, value: pulumi.Input[str]):
        pulumi.set(self, "backup_storage_provider", value)

    @property
    @pulumi.getter(name="volumeSnapshotConfig")
    def volume_snapshot_config(self) -> Optional[pulumi.Input['MigStorageSpecVolumeSnapshotConfigArgs']]:
        return pulumi.get(self, "volume_snapshot_config")

    @volume_snapshot_config.setter
    def volume_snapshot_config(self, value: Optional[pulumi.Input['MigStorageSpecVolumeSnapshotConfigArgs']]):
        pulumi.set(self, "volume_snapshot_config", value)

    @property
    @pulumi.getter(name="volumeSnapshotProvider")
    def volume_snapshot_provider(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "volume_snapshot_provider")

    @volume_snapshot_provider.setter
    def volume_snapshot_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_snapshot_provider", value)


@pulumi.input_type
class MigStorageSpecBackupStorageConfigArgs:
    def __init__(__self__, *,
                 aws_bucket_name: Optional[pulumi.Input[str]] = None,
                 aws_kms_key_id: Optional[pulumi.Input[str]] = None,
                 aws_public_url: Optional[pulumi.Input[str]] = None,
                 aws_region: Optional[pulumi.Input[str]] = None,
                 aws_s3_force_path_style: Optional[pulumi.Input[bool]] = None,
                 aws_s3_url: Optional[pulumi.Input[str]] = None,
                 aws_signature_version: Optional[pulumi.Input[str]] = None,
                 azure_resource_group: Optional[pulumi.Input[str]] = None,
                 azure_storage_account: Optional[pulumi.Input[str]] = None,
                 azure_storage_container: Optional[pulumi.Input[str]] = None,
                 creds_secret_ref: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 gcp_bucket: Optional[pulumi.Input[str]] = None,
                 insecure: Optional[pulumi.Input[bool]] = None,
                 s3_custom_ca_bundle: Optional[pulumi.Input[str]] = None):
        if aws_bucket_name is not None:
            pulumi.set(__self__, "aws_bucket_name", aws_bucket_name)
        if aws_kms_key_id is not None:
            pulumi.set(__self__, "aws_kms_key_id", aws_kms_key_id)
        if aws_public_url is not None:
            pulumi.set(__self__, "aws_public_url", aws_public_url)
        if aws_region is not None:
            pulumi.set(__self__, "aws_region", aws_region)
        if aws_s3_force_path_style is not None:
            pulumi.set(__self__, "aws_s3_force_path_style", aws_s3_force_path_style)
        if aws_s3_url is not None:
            pulumi.set(__self__, "aws_s3_url", aws_s3_url)
        if aws_signature_version is not None:
            pulumi.set(__self__, "aws_signature_version", aws_signature_version)
        if azure_resource_group is not None:
            pulumi.set(__self__, "azure_resource_group", azure_resource_group)
        if azure_storage_account is not None:
            pulumi.set(__self__, "azure_storage_account", azure_storage_account)
        if azure_storage_container is not None:
            pulumi.set(__self__, "azure_storage_container", azure_storage_container)
        if creds_secret_ref is not None:
            pulumi.set(__self__, "creds_secret_ref", creds_secret_ref)
        if gcp_bucket is not None:
            pulumi.set(__self__, "gcp_bucket", gcp_bucket)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if s3_custom_ca_bundle is not None:
            pulumi.set(__self__, "s3_custom_ca_bundle", s3_custom_ca_bundle)

    @property
    @pulumi.getter(name="awsBucketName")
    def aws_bucket_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aws_bucket_name")

    @aws_bucket_name.setter
    def aws_bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_bucket_name", value)

    @property
    @pulumi.getter(name="awsKmsKeyId")
    def aws_kms_key_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aws_kms_key_id")

    @aws_kms_key_id.setter
    def aws_kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_kms_key_id", value)

    @property
    @pulumi.getter(name="awsPublicUrl")
    def aws_public_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aws_public_url")

    @aws_public_url.setter
    def aws_public_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_public_url", value)

    @property
    @pulumi.getter(name="awsRegion")
    def aws_region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aws_region")

    @aws_region.setter
    def aws_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_region", value)

    @property
    @pulumi.getter(name="awsS3ForcePathStyle")
    def aws_s3_force_path_style(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "aws_s3_force_path_style")

    @aws_s3_force_path_style.setter
    def aws_s3_force_path_style(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "aws_s3_force_path_style", value)

    @property
    @pulumi.getter(name="awsS3Url")
    def aws_s3_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aws_s3_url")

    @aws_s3_url.setter
    def aws_s3_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_s3_url", value)

    @property
    @pulumi.getter(name="awsSignatureVersion")
    def aws_signature_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aws_signature_version")

    @aws_signature_version.setter
    def aws_signature_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_signature_version", value)

    @property
    @pulumi.getter(name="azureResourceGroup")
    def azure_resource_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "azure_resource_group")

    @azure_resource_group.setter
    def azure_resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_resource_group", value)

    @property
    @pulumi.getter(name="azureStorageAccount")
    def azure_storage_account(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "azure_storage_account")

    @azure_storage_account.setter
    def azure_storage_account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_storage_account", value)

    @property
    @pulumi.getter(name="azureStorageContainer")
    def azure_storage_container(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "azure_storage_container")

    @azure_storage_container.setter
    def azure_storage_container(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_storage_container", value)

    @property
    @pulumi.getter(name="credsSecretRef")
    def creds_secret_ref(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "creds_secret_ref")

    @creds_secret_ref.setter
    def creds_secret_ref(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "creds_secret_ref", value)

    @property
    @pulumi.getter(name="gcpBucket")
    def gcp_bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gcp_bucket")

    @gcp_bucket.setter
    def gcp_bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gcp_bucket", value)

    @property
    @pulumi.getter
    def insecure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "insecure")

    @insecure.setter
    def insecure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insecure", value)

    @property
    @pulumi.getter(name="s3CustomCABundle")
    def s3_custom_ca_bundle(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_custom_ca_bundle")

    @s3_custom_ca_bundle.setter
    def s3_custom_ca_bundle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_custom_ca_bundle", value)


@pulumi.input_type
class MigStorageSpecVolumeSnapshotConfigArgs:
    def __init__(__self__, *,
                 aws_region: Optional[pulumi.Input[str]] = None,
                 azure_api_timeout: Optional[pulumi.Input[str]] = None,
                 azure_resource_group: Optional[pulumi.Input[str]] = None,
                 creds_secret_ref: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 snapshot_creation_timeout: Optional[pulumi.Input[str]] = None):
        if aws_region is not None:
            pulumi.set(__self__, "aws_region", aws_region)
        if azure_api_timeout is not None:
            pulumi.set(__self__, "azure_api_timeout", azure_api_timeout)
        if azure_resource_group is not None:
            pulumi.set(__self__, "azure_resource_group", azure_resource_group)
        if creds_secret_ref is not None:
            pulumi.set(__self__, "creds_secret_ref", creds_secret_ref)
        if snapshot_creation_timeout is not None:
            pulumi.set(__self__, "snapshot_creation_timeout", snapshot_creation_timeout)

    @property
    @pulumi.getter(name="awsRegion")
    def aws_region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aws_region")

    @aws_region.setter
    def aws_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_region", value)

    @property
    @pulumi.getter(name="azureApiTimeout")
    def azure_api_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "azure_api_timeout")

    @azure_api_timeout.setter
    def azure_api_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_api_timeout", value)

    @property
    @pulumi.getter(name="azureResourceGroup")
    def azure_resource_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "azure_resource_group")

    @azure_resource_group.setter
    def azure_resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_resource_group", value)

    @property
    @pulumi.getter(name="credsSecretRef")
    def creds_secret_ref(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "creds_secret_ref")

    @creds_secret_ref.setter
    def creds_secret_ref(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "creds_secret_ref", value)

    @property
    @pulumi.getter(name="snapshotCreationTimeout")
    def snapshot_creation_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snapshot_creation_timeout")

    @snapshot_creation_timeout.setter
    def snapshot_creation_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_creation_timeout", value)


@pulumi.input_type
class MigStorageStatusArgs:
    def __init__(__self__, *,
                 observed_digest: Optional[pulumi.Input[str]] = None):
        if observed_digest is not None:
            pulumi.set(__self__, "observed_digest", observed_digest)

    @property
    @pulumi.getter(name="observedDigest")
    def observed_digest(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "observed_digest")

    @observed_digest.setter
    def observed_digest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "observed_digest", value)



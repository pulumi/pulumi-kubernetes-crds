// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Inputs.Enterprise.V1Alpha2
{

    /// <summary>
    /// SearchHeadClusterStatus defines the observed state of a Splunk Enterprise search head cluster
    /// </summary>
    public class SearchHeadClusterStatusArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// name or label of the search head captain
        /// </summary>
        [Input("captain")]
        public Input<string>? Captain { get; set; }

        /// <summary>
        /// true if the search head cluster's captain is ready to service requests
        /// </summary>
        [Input("captainReady")]
        public Input<bool>? CaptainReady { get; set; }

        /// <summary>
        /// current phase of the deployer
        /// </summary>
        [Input("deployerPhase")]
        public Input<string>? DeployerPhase { get; set; }

        /// <summary>
        /// true if the search head cluster has finished initialization
        /// </summary>
        [Input("initialized")]
        public Input<bool>? Initialized { get; set; }

        /// <summary>
        /// true if the search head cluster is in maintenance mode
        /// </summary>
        [Input("maintenanceMode")]
        public Input<bool>? MaintenanceMode { get; set; }

        [Input("members")]
        private InputList<Pulumi.Kubernetes.Types.Inputs.Enterprise.V1Alpha2.SearchHeadClusterStatusMembersArgs>? _members;

        /// <summary>
        /// status of each search head cluster member
        /// </summary>
        public InputList<Pulumi.Kubernetes.Types.Inputs.Enterprise.V1Alpha2.SearchHeadClusterStatusMembersArgs> Members
        {
            get => _members ?? (_members = new InputList<Pulumi.Kubernetes.Types.Inputs.Enterprise.V1Alpha2.SearchHeadClusterStatusMembersArgs>());
            set => _members = value;
        }

        /// <summary>
        /// true if the minimum number of search head cluster members have joined
        /// </summary>
        [Input("minPeersJoined")]
        public Input<bool>? MinPeersJoined { get; set; }

        /// <summary>
        /// current phase of the search head cluster
        /// </summary>
        [Input("phase")]
        public Input<string>? Phase { get; set; }

        /// <summary>
        /// current number of ready search head cluster members
        /// </summary>
        [Input("readyReplicas")]
        public Input<int>? ReadyReplicas { get; set; }

        /// <summary>
        /// desired number of search head cluster members
        /// </summary>
        [Input("replicas")]
        public Input<int>? Replicas { get; set; }

        /// <summary>
        /// selector for pods, used by HorizontalPodAutoscaler
        /// </summary>
        [Input("selector")]
        public Input<string>? Selector { get; set; }

        public SearchHeadClusterStatusArgs()
        {
        }
    }
}

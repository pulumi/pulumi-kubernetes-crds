// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha2

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// LicenseMaster is the Schema for a Splunk Enterprise license master.
type LicenseMaster struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// LicenseMasterSpec defines the desired state of a Splunk Enterprise license master.
	Spec LicenseMasterSpecPtrOutput `pulumi:"spec"`
	// LicenseMasterStatus defines the observed state of a Splunk Enterprise license master.
	Status LicenseMasterStatusPtrOutput `pulumi:"status"`
}

// NewLicenseMaster registers a new resource with the given unique name, arguments, and options.
func NewLicenseMaster(ctx *pulumi.Context,
	name string, args *LicenseMasterArgs, opts ...pulumi.ResourceOption) (*LicenseMaster, error) {
	if args == nil {
		args = &LicenseMasterArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("enterprise.splunk.com/v1alpha2")
	args.Kind = pulumi.StringPtr("LicenseMaster")
	var resource LicenseMaster
	err := ctx.RegisterResource("kubernetes:enterprise.splunk.com/v1alpha2:LicenseMaster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLicenseMaster gets an existing LicenseMaster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLicenseMaster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LicenseMasterState, opts ...pulumi.ResourceOption) (*LicenseMaster, error) {
	var resource LicenseMaster
	err := ctx.ReadResource("kubernetes:enterprise.splunk.com/v1alpha2:LicenseMaster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LicenseMaster resources.
type licenseMasterState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// LicenseMasterSpec defines the desired state of a Splunk Enterprise license master.
	Spec *LicenseMasterSpec `pulumi:"spec"`
	// LicenseMasterStatus defines the observed state of a Splunk Enterprise license master.
	Status *LicenseMasterStatus `pulumi:"status"`
}

type LicenseMasterState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// LicenseMasterSpec defines the desired state of a Splunk Enterprise license master.
	Spec LicenseMasterSpecPtrInput
	// LicenseMasterStatus defines the observed state of a Splunk Enterprise license master.
	Status LicenseMasterStatusPtrInput
}

func (LicenseMasterState) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseMasterState)(nil)).Elem()
}

type licenseMasterArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// LicenseMasterSpec defines the desired state of a Splunk Enterprise license master.
	Spec *LicenseMasterSpec `pulumi:"spec"`
	// LicenseMasterStatus defines the observed state of a Splunk Enterprise license master.
	Status *LicenseMasterStatus `pulumi:"status"`
}

// The set of arguments for constructing a LicenseMaster resource.
type LicenseMasterArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// LicenseMasterSpec defines the desired state of a Splunk Enterprise license master.
	Spec LicenseMasterSpecPtrInput
	// LicenseMasterStatus defines the observed state of a Splunk Enterprise license master.
	Status LicenseMasterStatusPtrInput
}

func (LicenseMasterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseMasterArgs)(nil)).Elem()
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha2

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Standalone is the Schema for a Splunk Enterprise standalone instances.
type Standalone struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// StandaloneSpec defines the desired state of a Splunk Enterprise standalone instances.
	Spec StandaloneSpecPtrOutput `pulumi:"spec"`
	// StandaloneStatus defines the observed state of a Splunk Enterprise standalone instances.
	Status StandaloneStatusPtrOutput `pulumi:"status"`
}

// NewStandalone registers a new resource with the given unique name, arguments, and options.
func NewStandalone(ctx *pulumi.Context,
	name string, args *StandaloneArgs, opts ...pulumi.ResourceOption) (*Standalone, error) {
	if args == nil {
		args = &StandaloneArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("enterprise.splunk.com/v1alpha2")
	args.Kind = pulumi.StringPtr("Standalone")
	var resource Standalone
	err := ctx.RegisterResource("kubernetes:enterprise.splunk.com/v1alpha2:Standalone", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStandalone gets an existing Standalone resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStandalone(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StandaloneState, opts ...pulumi.ResourceOption) (*Standalone, error) {
	var resource Standalone
	err := ctx.ReadResource("kubernetes:enterprise.splunk.com/v1alpha2:Standalone", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Standalone resources.
type standaloneState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// StandaloneSpec defines the desired state of a Splunk Enterprise standalone instances.
	Spec *StandaloneSpec `pulumi:"spec"`
	// StandaloneStatus defines the observed state of a Splunk Enterprise standalone instances.
	Status *StandaloneStatus `pulumi:"status"`
}

type StandaloneState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// StandaloneSpec defines the desired state of a Splunk Enterprise standalone instances.
	Spec StandaloneSpecPtrInput
	// StandaloneStatus defines the observed state of a Splunk Enterprise standalone instances.
	Status StandaloneStatusPtrInput
}

func (StandaloneState) ElementType() reflect.Type {
	return reflect.TypeOf((*standaloneState)(nil)).Elem()
}

type standaloneArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// StandaloneSpec defines the desired state of a Splunk Enterprise standalone instances.
	Spec *StandaloneSpec `pulumi:"spec"`
	// StandaloneStatus defines the observed state of a Splunk Enterprise standalone instances.
	Status *StandaloneStatus `pulumi:"status"`
}

// The set of arguments for constructing a Standalone resource.
type StandaloneArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// StandaloneSpec defines the desired state of a Splunk Enterprise standalone instances.
	Spec StandaloneSpecPtrInput
	// StandaloneStatus defines the observed state of a Splunk Enterprise standalone instances.
	Status StandaloneStatusPtrInput
}

func (StandaloneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*standaloneArgs)(nil)).Elem()
}

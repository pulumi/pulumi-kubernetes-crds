# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'KnativeEventingKafkaSpecArgs',
    'KnativeEventingKafkaStatusArgs',
    'KnativeEventingKafkaStatusConditionsArgs',
]

@pulumi.input_type
class KnativeEventingKafkaSpecArgs:
    def __init__(__self__, *,
                 bootstrap_servers: pulumi.Input[str],
                 set_as_default_channel_provisioner: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] bootstrap_servers: URI(s) of Apache Kafka broker(s)
        :param pulumi.Input[bool] set_as_default_channel_provisioner: Flag that controls whether Kafka channel provisioner is configured as the cluster default. Defaults to false.
        """
        pulumi.set(__self__, "bootstrap_servers", bootstrap_servers)
        if set_as_default_channel_provisioner is not None:
            pulumi.set(__self__, "set_as_default_channel_provisioner", set_as_default_channel_provisioner)

    @property
    @pulumi.getter(name="bootstrapServers")
    def bootstrap_servers(self) -> pulumi.Input[str]:
        """
        URI(s) of Apache Kafka broker(s)
        """
        return pulumi.get(self, "bootstrap_servers")

    @bootstrap_servers.setter
    def bootstrap_servers(self, value: pulumi.Input[str]):
        pulumi.set(self, "bootstrap_servers", value)

    @property
    @pulumi.getter(name="setAsDefaultChannelProvisioner")
    def set_as_default_channel_provisioner(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag that controls whether Kafka channel provisioner is configured as the cluster default. Defaults to false.
        """
        return pulumi.get(self, "set_as_default_channel_provisioner")

    @set_as_default_channel_provisioner.setter
    def set_as_default_channel_provisioner(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "set_as_default_channel_provisioner", value)


@pulumi.input_type
class KnativeEventingKafkaStatusArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['KnativeEventingKafkaStatusConditionsArgs']]]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['KnativeEventingKafkaStatusConditionsArgs']]] conditions: The latest available observations of a resource's current state. +patchMergeKey=type +patchStrategy=merge
        :param pulumi.Input[str] version: The version of the installed release
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KnativeEventingKafkaStatusConditionsArgs']]]]:
        """
        The latest available observations of a resource's current state. +patchMergeKey=type +patchStrategy=merge
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KnativeEventingKafkaStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        The version of the installed release
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class KnativeEventingKafkaStatusConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] status: Status of the condition, one of True, False, Unknown. +required
        :param pulumi.Input[str] type: Type of condition. +required
        :param pulumi.Input[str] last_transition_time: LastTransitionTime is the last time the condition transitioned from one status to another. We use VolatileTime in place of metav1.Time to exclude this from creating equality.Semantic differences (all other things held constant).
        :param pulumi.Input[str] message: A human readable message indicating details about the transition.
        :param pulumi.Input[str] reason: The reason for the condition's last transition.
        :param pulumi.Input[str] severity: Severity with which to treat failures of this type of condition. When this is not specified, it defaults to Error.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status of the condition, one of True, False, Unknown. +required
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of condition. +required
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        """
        LastTransitionTime is the last time the condition transitioned from one status to another. We use VolatileTime in place of metav1.Time to exclude this from creating equality.Semantic differences (all other things held constant).
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        A human readable message indicating details about the transition.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        The reason for the condition's last transition.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity with which to treat failures of this type of condition. When this is not specified, it defaults to Error.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)



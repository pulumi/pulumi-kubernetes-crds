// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Hyperfoil is the Schema for the hyperfoils API
type HyperfoilType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// HyperfoilSpec Configures Hyperfoil Controller and related resources.
	Spec *HyperfoilSpec `pulumi:"spec"`
	// HyperfoilStatus defines the observed state of Hyperfoil.
	Status *HyperfoilStatus `pulumi:"status"`
}

// HyperfoilTypeInput is an input type that accepts HyperfoilTypeArgs and HyperfoilTypeOutput values.
// You can construct a concrete instance of `HyperfoilTypeInput` via:
//
//          HyperfoilTypeArgs{...}
type HyperfoilTypeInput interface {
	pulumi.Input

	ToHyperfoilTypeOutput() HyperfoilTypeOutput
	ToHyperfoilTypeOutputWithContext(context.Context) HyperfoilTypeOutput
}

// Hyperfoil is the Schema for the hyperfoils API
type HyperfoilTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// HyperfoilSpec Configures Hyperfoil Controller and related resources.
	Spec HyperfoilSpecPtrInput `pulumi:"spec"`
	// HyperfoilStatus defines the observed state of Hyperfoil.
	Status HyperfoilStatusPtrInput `pulumi:"status"`
}

func (HyperfoilTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HyperfoilType)(nil)).Elem()
}

func (i HyperfoilTypeArgs) ToHyperfoilTypeOutput() HyperfoilTypeOutput {
	return i.ToHyperfoilTypeOutputWithContext(context.Background())
}

func (i HyperfoilTypeArgs) ToHyperfoilTypeOutputWithContext(ctx context.Context) HyperfoilTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HyperfoilTypeOutput)
}

// Hyperfoil is the Schema for the hyperfoils API
type HyperfoilTypeOutput struct{ *pulumi.OutputState }

func (HyperfoilTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HyperfoilType)(nil)).Elem()
}

func (o HyperfoilTypeOutput) ToHyperfoilTypeOutput() HyperfoilTypeOutput {
	return o
}

func (o HyperfoilTypeOutput) ToHyperfoilTypeOutputWithContext(ctx context.Context) HyperfoilTypeOutput {
	return o
}

func (o HyperfoilTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HyperfoilType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o HyperfoilTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HyperfoilType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o HyperfoilTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v HyperfoilType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// HyperfoilSpec Configures Hyperfoil Controller and related resources.
func (o HyperfoilTypeOutput) Spec() HyperfoilSpecPtrOutput {
	return o.ApplyT(func(v HyperfoilType) *HyperfoilSpec { return v.Spec }).(HyperfoilSpecPtrOutput)
}

// HyperfoilStatus defines the observed state of Hyperfoil.
func (o HyperfoilTypeOutput) Status() HyperfoilStatusPtrOutput {
	return o.ApplyT(func(v HyperfoilType) *HyperfoilStatus { return v.Status }).(HyperfoilStatusPtrOutput)
}

type HyperfoilMetadata struct {
}

// HyperfoilMetadataInput is an input type that accepts HyperfoilMetadataArgs and HyperfoilMetadataOutput values.
// You can construct a concrete instance of `HyperfoilMetadataInput` via:
//
//          HyperfoilMetadataArgs{...}
type HyperfoilMetadataInput interface {
	pulumi.Input

	ToHyperfoilMetadataOutput() HyperfoilMetadataOutput
	ToHyperfoilMetadataOutputWithContext(context.Context) HyperfoilMetadataOutput
}

type HyperfoilMetadataArgs struct {
}

func (HyperfoilMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HyperfoilMetadata)(nil)).Elem()
}

func (i HyperfoilMetadataArgs) ToHyperfoilMetadataOutput() HyperfoilMetadataOutput {
	return i.ToHyperfoilMetadataOutputWithContext(context.Background())
}

func (i HyperfoilMetadataArgs) ToHyperfoilMetadataOutputWithContext(ctx context.Context) HyperfoilMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HyperfoilMetadataOutput)
}

type HyperfoilMetadataOutput struct{ *pulumi.OutputState }

func (HyperfoilMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HyperfoilMetadata)(nil)).Elem()
}

func (o HyperfoilMetadataOutput) ToHyperfoilMetadataOutput() HyperfoilMetadataOutput {
	return o
}

func (o HyperfoilMetadataOutput) ToHyperfoilMetadataOutputWithContext(ctx context.Context) HyperfoilMetadataOutput {
	return o
}

// HyperfoilSpec Configures Hyperfoil Controller and related resources.
type HyperfoilSpec struct {
	// Deploy timeout for agents, in milliseconds.
	AgentDeployTimeout *int `pulumi:"agentDeployTimeout"`
	// Authentication/authorization settings.
	Auth *HyperfoilSpecAuth `pulumi:"auth"`
	// Controller image. If 'version' is defined, too, the tag is replaced (or appended). Defaults to 'quay.io/hyperfoil/hyperfoil'
	Image *string `pulumi:"image"`
	// Name of the config map and optionally its entry (separated by '/': e.g myconfigmap/log4j2-superverbose.xml) storing Log4j2 configuration file. By default the Controller uses its embedded configuration.
	Log *string `pulumi:"log"`
	// Name of the PVC hyperfoil should mount for its workdir.
	PersistentVolumeClaim *string `pulumi:"persistentVolumeClaim"`
	// Names of config maps and optionally keys (separated by '/') holding hooks that run after the run finishes.
	PostHooks []string `pulumi:"postHooks"`
	// Names of config maps and optionally keys (separated by '/') holding hooks that run before the run starts.
	PreHooks []string `pulumi:"preHooks"`
	// Specification of the exposed route.
	Route *HyperfoilSpecRoute `pulumi:"route"`
	// List of secrets in this namespace; each entry from those secrets will be mapped as environment variable, using the key as variable name.
	SecretEnvVars []string `pulumi:"secretEnvVars"`
	// If this is set the controller does not start benchmark run right away after hitting /benchmark/my-benchmark/start ; instead it responds with status 301 and header Location set to concatenation of this string and 'BENCHMARK=my-benchmark&RUN_ID=xxxx'. CLI interprets that response as a request to hit CI instance on this URL, assuming that CI will trigger a new job that will eventually call /benchmark/my-benchmark/start?runId=xxxx with header 'x-trigger-job'. This is useful if the the CI has to synchronize Hyperfoil to other benchmarks that don't use this controller instance.
	TriggerUrl *string `pulumi:"triggerUrl"`
	// Tag for controller image. Defaults to version matching the operator version.
	Version *string `pulumi:"version"`
}

// HyperfoilSpecInput is an input type that accepts HyperfoilSpecArgs and HyperfoilSpecOutput values.
// You can construct a concrete instance of `HyperfoilSpecInput` via:
//
//          HyperfoilSpecArgs{...}
type HyperfoilSpecInput interface {
	pulumi.Input

	ToHyperfoilSpecOutput() HyperfoilSpecOutput
	ToHyperfoilSpecOutputWithContext(context.Context) HyperfoilSpecOutput
}

// HyperfoilSpec Configures Hyperfoil Controller and related resources.
type HyperfoilSpecArgs struct {
	// Deploy timeout for agents, in milliseconds.
	AgentDeployTimeout pulumi.IntPtrInput `pulumi:"agentDeployTimeout"`
	// Authentication/authorization settings.
	Auth HyperfoilSpecAuthPtrInput `pulumi:"auth"`
	// Controller image. If 'version' is defined, too, the tag is replaced (or appended). Defaults to 'quay.io/hyperfoil/hyperfoil'
	Image pulumi.StringPtrInput `pulumi:"image"`
	// Name of the config map and optionally its entry (separated by '/': e.g myconfigmap/log4j2-superverbose.xml) storing Log4j2 configuration file. By default the Controller uses its embedded configuration.
	Log pulumi.StringPtrInput `pulumi:"log"`
	// Name of the PVC hyperfoil should mount for its workdir.
	PersistentVolumeClaim pulumi.StringPtrInput `pulumi:"persistentVolumeClaim"`
	// Names of config maps and optionally keys (separated by '/') holding hooks that run after the run finishes.
	PostHooks pulumi.StringArrayInput `pulumi:"postHooks"`
	// Names of config maps and optionally keys (separated by '/') holding hooks that run before the run starts.
	PreHooks pulumi.StringArrayInput `pulumi:"preHooks"`
	// Specification of the exposed route.
	Route HyperfoilSpecRoutePtrInput `pulumi:"route"`
	// List of secrets in this namespace; each entry from those secrets will be mapped as environment variable, using the key as variable name.
	SecretEnvVars pulumi.StringArrayInput `pulumi:"secretEnvVars"`
	// If this is set the controller does not start benchmark run right away after hitting /benchmark/my-benchmark/start ; instead it responds with status 301 and header Location set to concatenation of this string and 'BENCHMARK=my-benchmark&RUN_ID=xxxx'. CLI interprets that response as a request to hit CI instance on this URL, assuming that CI will trigger a new job that will eventually call /benchmark/my-benchmark/start?runId=xxxx with header 'x-trigger-job'. This is useful if the the CI has to synchronize Hyperfoil to other benchmarks that don't use this controller instance.
	TriggerUrl pulumi.StringPtrInput `pulumi:"triggerUrl"`
	// Tag for controller image. Defaults to version matching the operator version.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (HyperfoilSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HyperfoilSpec)(nil)).Elem()
}

func (i HyperfoilSpecArgs) ToHyperfoilSpecOutput() HyperfoilSpecOutput {
	return i.ToHyperfoilSpecOutputWithContext(context.Background())
}

func (i HyperfoilSpecArgs) ToHyperfoilSpecOutputWithContext(ctx context.Context) HyperfoilSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HyperfoilSpecOutput)
}

func (i HyperfoilSpecArgs) ToHyperfoilSpecPtrOutput() HyperfoilSpecPtrOutput {
	return i.ToHyperfoilSpecPtrOutputWithContext(context.Background())
}

func (i HyperfoilSpecArgs) ToHyperfoilSpecPtrOutputWithContext(ctx context.Context) HyperfoilSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HyperfoilSpecOutput).ToHyperfoilSpecPtrOutputWithContext(ctx)
}

// HyperfoilSpecPtrInput is an input type that accepts HyperfoilSpecArgs, HyperfoilSpecPtr and HyperfoilSpecPtrOutput values.
// You can construct a concrete instance of `HyperfoilSpecPtrInput` via:
//
//          HyperfoilSpecArgs{...}
//
//  or:
//
//          nil
type HyperfoilSpecPtrInput interface {
	pulumi.Input

	ToHyperfoilSpecPtrOutput() HyperfoilSpecPtrOutput
	ToHyperfoilSpecPtrOutputWithContext(context.Context) HyperfoilSpecPtrOutput
}

type hyperfoilSpecPtrType HyperfoilSpecArgs

func HyperfoilSpecPtr(v *HyperfoilSpecArgs) HyperfoilSpecPtrInput {
	return (*hyperfoilSpecPtrType)(v)
}

func (*hyperfoilSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HyperfoilSpec)(nil)).Elem()
}

func (i *hyperfoilSpecPtrType) ToHyperfoilSpecPtrOutput() HyperfoilSpecPtrOutput {
	return i.ToHyperfoilSpecPtrOutputWithContext(context.Background())
}

func (i *hyperfoilSpecPtrType) ToHyperfoilSpecPtrOutputWithContext(ctx context.Context) HyperfoilSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HyperfoilSpecPtrOutput)
}

// HyperfoilSpec Configures Hyperfoil Controller and related resources.
type HyperfoilSpecOutput struct{ *pulumi.OutputState }

func (HyperfoilSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HyperfoilSpec)(nil)).Elem()
}

func (o HyperfoilSpecOutput) ToHyperfoilSpecOutput() HyperfoilSpecOutput {
	return o
}

func (o HyperfoilSpecOutput) ToHyperfoilSpecOutputWithContext(ctx context.Context) HyperfoilSpecOutput {
	return o
}

func (o HyperfoilSpecOutput) ToHyperfoilSpecPtrOutput() HyperfoilSpecPtrOutput {
	return o.ToHyperfoilSpecPtrOutputWithContext(context.Background())
}

func (o HyperfoilSpecOutput) ToHyperfoilSpecPtrOutputWithContext(ctx context.Context) HyperfoilSpecPtrOutput {
	return o.ApplyT(func(v HyperfoilSpec) *HyperfoilSpec {
		return &v
	}).(HyperfoilSpecPtrOutput)
}

// Deploy timeout for agents, in milliseconds.
func (o HyperfoilSpecOutput) AgentDeployTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HyperfoilSpec) *int { return v.AgentDeployTimeout }).(pulumi.IntPtrOutput)
}

// Authentication/authorization settings.
func (o HyperfoilSpecOutput) Auth() HyperfoilSpecAuthPtrOutput {
	return o.ApplyT(func(v HyperfoilSpec) *HyperfoilSpecAuth { return v.Auth }).(HyperfoilSpecAuthPtrOutput)
}

// Controller image. If 'version' is defined, too, the tag is replaced (or appended). Defaults to 'quay.io/hyperfoil/hyperfoil'
func (o HyperfoilSpecOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HyperfoilSpec) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// Name of the config map and optionally its entry (separated by '/': e.g myconfigmap/log4j2-superverbose.xml) storing Log4j2 configuration file. By default the Controller uses its embedded configuration.
func (o HyperfoilSpecOutput) Log() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HyperfoilSpec) *string { return v.Log }).(pulumi.StringPtrOutput)
}

// Name of the PVC hyperfoil should mount for its workdir.
func (o HyperfoilSpecOutput) PersistentVolumeClaim() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HyperfoilSpec) *string { return v.PersistentVolumeClaim }).(pulumi.StringPtrOutput)
}

// Names of config maps and optionally keys (separated by '/') holding hooks that run after the run finishes.
func (o HyperfoilSpecOutput) PostHooks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HyperfoilSpec) []string { return v.PostHooks }).(pulumi.StringArrayOutput)
}

// Names of config maps and optionally keys (separated by '/') holding hooks that run before the run starts.
func (o HyperfoilSpecOutput) PreHooks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HyperfoilSpec) []string { return v.PreHooks }).(pulumi.StringArrayOutput)
}

// Specification of the exposed route.
func (o HyperfoilSpecOutput) Route() HyperfoilSpecRoutePtrOutput {
	return o.ApplyT(func(v HyperfoilSpec) *HyperfoilSpecRoute { return v.Route }).(HyperfoilSpecRoutePtrOutput)
}

// List of secrets in this namespace; each entry from those secrets will be mapped as environment variable, using the key as variable name.
func (o HyperfoilSpecOutput) SecretEnvVars() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HyperfoilSpec) []string { return v.SecretEnvVars }).(pulumi.StringArrayOutput)
}

// If this is set the controller does not start benchmark run right away after hitting /benchmark/my-benchmark/start ; instead it responds with status 301 and header Location set to concatenation of this string and 'BENCHMARK=my-benchmark&RUN_ID=xxxx'. CLI interprets that response as a request to hit CI instance on this URL, assuming that CI will trigger a new job that will eventually call /benchmark/my-benchmark/start?runId=xxxx with header 'x-trigger-job'. This is useful if the the CI has to synchronize Hyperfoil to other benchmarks that don't use this controller instance.
func (o HyperfoilSpecOutput) TriggerUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HyperfoilSpec) *string { return v.TriggerUrl }).(pulumi.StringPtrOutput)
}

// Tag for controller image. Defaults to version matching the operator version.
func (o HyperfoilSpecOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HyperfoilSpec) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type HyperfoilSpecPtrOutput struct{ *pulumi.OutputState }

func (HyperfoilSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HyperfoilSpec)(nil)).Elem()
}

func (o HyperfoilSpecPtrOutput) ToHyperfoilSpecPtrOutput() HyperfoilSpecPtrOutput {
	return o
}

func (o HyperfoilSpecPtrOutput) ToHyperfoilSpecPtrOutputWithContext(ctx context.Context) HyperfoilSpecPtrOutput {
	return o
}

func (o HyperfoilSpecPtrOutput) Elem() HyperfoilSpecOutput {
	return o.ApplyT(func(v *HyperfoilSpec) HyperfoilSpec { return *v }).(HyperfoilSpecOutput)
}

// Deploy timeout for agents, in milliseconds.
func (o HyperfoilSpecPtrOutput) AgentDeployTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HyperfoilSpec) *int {
		if v == nil {
			return nil
		}
		return v.AgentDeployTimeout
	}).(pulumi.IntPtrOutput)
}

// Authentication/authorization settings.
func (o HyperfoilSpecPtrOutput) Auth() HyperfoilSpecAuthPtrOutput {
	return o.ApplyT(func(v *HyperfoilSpec) *HyperfoilSpecAuth {
		if v == nil {
			return nil
		}
		return v.Auth
	}).(HyperfoilSpecAuthPtrOutput)
}

// Controller image. If 'version' is defined, too, the tag is replaced (or appended). Defaults to 'quay.io/hyperfoil/hyperfoil'
func (o HyperfoilSpecPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HyperfoilSpec) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// Name of the config map and optionally its entry (separated by '/': e.g myconfigmap/log4j2-superverbose.xml) storing Log4j2 configuration file. By default the Controller uses its embedded configuration.
func (o HyperfoilSpecPtrOutput) Log() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HyperfoilSpec) *string {
		if v == nil {
			return nil
		}
		return v.Log
	}).(pulumi.StringPtrOutput)
}

// Name of the PVC hyperfoil should mount for its workdir.
func (o HyperfoilSpecPtrOutput) PersistentVolumeClaim() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HyperfoilSpec) *string {
		if v == nil {
			return nil
		}
		return v.PersistentVolumeClaim
	}).(pulumi.StringPtrOutput)
}

// Names of config maps and optionally keys (separated by '/') holding hooks that run after the run finishes.
func (o HyperfoilSpecPtrOutput) PostHooks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HyperfoilSpec) []string {
		if v == nil {
			return nil
		}
		return v.PostHooks
	}).(pulumi.StringArrayOutput)
}

// Names of config maps and optionally keys (separated by '/') holding hooks that run before the run starts.
func (o HyperfoilSpecPtrOutput) PreHooks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HyperfoilSpec) []string {
		if v == nil {
			return nil
		}
		return v.PreHooks
	}).(pulumi.StringArrayOutput)
}

// Specification of the exposed route.
func (o HyperfoilSpecPtrOutput) Route() HyperfoilSpecRoutePtrOutput {
	return o.ApplyT(func(v *HyperfoilSpec) *HyperfoilSpecRoute {
		if v == nil {
			return nil
		}
		return v.Route
	}).(HyperfoilSpecRoutePtrOutput)
}

// List of secrets in this namespace; each entry from those secrets will be mapped as environment variable, using the key as variable name.
func (o HyperfoilSpecPtrOutput) SecretEnvVars() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HyperfoilSpec) []string {
		if v == nil {
			return nil
		}
		return v.SecretEnvVars
	}).(pulumi.StringArrayOutput)
}

// If this is set the controller does not start benchmark run right away after hitting /benchmark/my-benchmark/start ; instead it responds with status 301 and header Location set to concatenation of this string and 'BENCHMARK=my-benchmark&RUN_ID=xxxx'. CLI interprets that response as a request to hit CI instance on this URL, assuming that CI will trigger a new job that will eventually call /benchmark/my-benchmark/start?runId=xxxx with header 'x-trigger-job'. This is useful if the the CI has to synchronize Hyperfoil to other benchmarks that don't use this controller instance.
func (o HyperfoilSpecPtrOutput) TriggerUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HyperfoilSpec) *string {
		if v == nil {
			return nil
		}
		return v.TriggerUrl
	}).(pulumi.StringPtrOutput)
}

// Tag for controller image. Defaults to version matching the operator version.
func (o HyperfoilSpecPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HyperfoilSpec) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Authentication/authorization settings.
type HyperfoilSpecAuth struct {
	// Optional; Name of secret used for basic authentication. Must contain key 'password'.
	Secret *string `pulumi:"secret"`
}

// HyperfoilSpecAuthInput is an input type that accepts HyperfoilSpecAuthArgs and HyperfoilSpecAuthOutput values.
// You can construct a concrete instance of `HyperfoilSpecAuthInput` via:
//
//          HyperfoilSpecAuthArgs{...}
type HyperfoilSpecAuthInput interface {
	pulumi.Input

	ToHyperfoilSpecAuthOutput() HyperfoilSpecAuthOutput
	ToHyperfoilSpecAuthOutputWithContext(context.Context) HyperfoilSpecAuthOutput
}

// Authentication/authorization settings.
type HyperfoilSpecAuthArgs struct {
	// Optional; Name of secret used for basic authentication. Must contain key 'password'.
	Secret pulumi.StringPtrInput `pulumi:"secret"`
}

func (HyperfoilSpecAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HyperfoilSpecAuth)(nil)).Elem()
}

func (i HyperfoilSpecAuthArgs) ToHyperfoilSpecAuthOutput() HyperfoilSpecAuthOutput {
	return i.ToHyperfoilSpecAuthOutputWithContext(context.Background())
}

func (i HyperfoilSpecAuthArgs) ToHyperfoilSpecAuthOutputWithContext(ctx context.Context) HyperfoilSpecAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HyperfoilSpecAuthOutput)
}

func (i HyperfoilSpecAuthArgs) ToHyperfoilSpecAuthPtrOutput() HyperfoilSpecAuthPtrOutput {
	return i.ToHyperfoilSpecAuthPtrOutputWithContext(context.Background())
}

func (i HyperfoilSpecAuthArgs) ToHyperfoilSpecAuthPtrOutputWithContext(ctx context.Context) HyperfoilSpecAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HyperfoilSpecAuthOutput).ToHyperfoilSpecAuthPtrOutputWithContext(ctx)
}

// HyperfoilSpecAuthPtrInput is an input type that accepts HyperfoilSpecAuthArgs, HyperfoilSpecAuthPtr and HyperfoilSpecAuthPtrOutput values.
// You can construct a concrete instance of `HyperfoilSpecAuthPtrInput` via:
//
//          HyperfoilSpecAuthArgs{...}
//
//  or:
//
//          nil
type HyperfoilSpecAuthPtrInput interface {
	pulumi.Input

	ToHyperfoilSpecAuthPtrOutput() HyperfoilSpecAuthPtrOutput
	ToHyperfoilSpecAuthPtrOutputWithContext(context.Context) HyperfoilSpecAuthPtrOutput
}

type hyperfoilSpecAuthPtrType HyperfoilSpecAuthArgs

func HyperfoilSpecAuthPtr(v *HyperfoilSpecAuthArgs) HyperfoilSpecAuthPtrInput {
	return (*hyperfoilSpecAuthPtrType)(v)
}

func (*hyperfoilSpecAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HyperfoilSpecAuth)(nil)).Elem()
}

func (i *hyperfoilSpecAuthPtrType) ToHyperfoilSpecAuthPtrOutput() HyperfoilSpecAuthPtrOutput {
	return i.ToHyperfoilSpecAuthPtrOutputWithContext(context.Background())
}

func (i *hyperfoilSpecAuthPtrType) ToHyperfoilSpecAuthPtrOutputWithContext(ctx context.Context) HyperfoilSpecAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HyperfoilSpecAuthPtrOutput)
}

// Authentication/authorization settings.
type HyperfoilSpecAuthOutput struct{ *pulumi.OutputState }

func (HyperfoilSpecAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HyperfoilSpecAuth)(nil)).Elem()
}

func (o HyperfoilSpecAuthOutput) ToHyperfoilSpecAuthOutput() HyperfoilSpecAuthOutput {
	return o
}

func (o HyperfoilSpecAuthOutput) ToHyperfoilSpecAuthOutputWithContext(ctx context.Context) HyperfoilSpecAuthOutput {
	return o
}

func (o HyperfoilSpecAuthOutput) ToHyperfoilSpecAuthPtrOutput() HyperfoilSpecAuthPtrOutput {
	return o.ToHyperfoilSpecAuthPtrOutputWithContext(context.Background())
}

func (o HyperfoilSpecAuthOutput) ToHyperfoilSpecAuthPtrOutputWithContext(ctx context.Context) HyperfoilSpecAuthPtrOutput {
	return o.ApplyT(func(v HyperfoilSpecAuth) *HyperfoilSpecAuth {
		return &v
	}).(HyperfoilSpecAuthPtrOutput)
}

// Optional; Name of secret used for basic authentication. Must contain key 'password'.
func (o HyperfoilSpecAuthOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HyperfoilSpecAuth) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

type HyperfoilSpecAuthPtrOutput struct{ *pulumi.OutputState }

func (HyperfoilSpecAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HyperfoilSpecAuth)(nil)).Elem()
}

func (o HyperfoilSpecAuthPtrOutput) ToHyperfoilSpecAuthPtrOutput() HyperfoilSpecAuthPtrOutput {
	return o
}

func (o HyperfoilSpecAuthPtrOutput) ToHyperfoilSpecAuthPtrOutputWithContext(ctx context.Context) HyperfoilSpecAuthPtrOutput {
	return o
}

func (o HyperfoilSpecAuthPtrOutput) Elem() HyperfoilSpecAuthOutput {
	return o.ApplyT(func(v *HyperfoilSpecAuth) HyperfoilSpecAuth { return *v }).(HyperfoilSpecAuthOutput)
}

// Optional; Name of secret used for basic authentication. Must contain key 'password'.
func (o HyperfoilSpecAuthPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HyperfoilSpecAuth) *string {
		if v == nil {
			return nil
		}
		return v.Secret
	}).(pulumi.StringPtrOutput)
}

// Specification of the exposed route.
type HyperfoilSpecRoute struct {
	// Host for the route leading to Controller REST endpoint. Example: hyperfoil.apps.cloud.example.com
	Host *string `pulumi:"host"`
	// Optional for edge and reencrypt routes, required for passthrough; Name of the secret hosting `tls.crt`, `tls.key` and optionally `ca.crt`
	Tls *string `pulumi:"tls"`
	// Either 'http' (for plain-text routes - not recommended), 'edge', 'reencrypt' or 'passthrough'
	Type *string `pulumi:"type"`
}

// HyperfoilSpecRouteInput is an input type that accepts HyperfoilSpecRouteArgs and HyperfoilSpecRouteOutput values.
// You can construct a concrete instance of `HyperfoilSpecRouteInput` via:
//
//          HyperfoilSpecRouteArgs{...}
type HyperfoilSpecRouteInput interface {
	pulumi.Input

	ToHyperfoilSpecRouteOutput() HyperfoilSpecRouteOutput
	ToHyperfoilSpecRouteOutputWithContext(context.Context) HyperfoilSpecRouteOutput
}

// Specification of the exposed route.
type HyperfoilSpecRouteArgs struct {
	// Host for the route leading to Controller REST endpoint. Example: hyperfoil.apps.cloud.example.com
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Optional for edge and reencrypt routes, required for passthrough; Name of the secret hosting `tls.crt`, `tls.key` and optionally `ca.crt`
	Tls pulumi.StringPtrInput `pulumi:"tls"`
	// Either 'http' (for plain-text routes - not recommended), 'edge', 'reencrypt' or 'passthrough'
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (HyperfoilSpecRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HyperfoilSpecRoute)(nil)).Elem()
}

func (i HyperfoilSpecRouteArgs) ToHyperfoilSpecRouteOutput() HyperfoilSpecRouteOutput {
	return i.ToHyperfoilSpecRouteOutputWithContext(context.Background())
}

func (i HyperfoilSpecRouteArgs) ToHyperfoilSpecRouteOutputWithContext(ctx context.Context) HyperfoilSpecRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HyperfoilSpecRouteOutput)
}

func (i HyperfoilSpecRouteArgs) ToHyperfoilSpecRoutePtrOutput() HyperfoilSpecRoutePtrOutput {
	return i.ToHyperfoilSpecRoutePtrOutputWithContext(context.Background())
}

func (i HyperfoilSpecRouteArgs) ToHyperfoilSpecRoutePtrOutputWithContext(ctx context.Context) HyperfoilSpecRoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HyperfoilSpecRouteOutput).ToHyperfoilSpecRoutePtrOutputWithContext(ctx)
}

// HyperfoilSpecRoutePtrInput is an input type that accepts HyperfoilSpecRouteArgs, HyperfoilSpecRoutePtr and HyperfoilSpecRoutePtrOutput values.
// You can construct a concrete instance of `HyperfoilSpecRoutePtrInput` via:
//
//          HyperfoilSpecRouteArgs{...}
//
//  or:
//
//          nil
type HyperfoilSpecRoutePtrInput interface {
	pulumi.Input

	ToHyperfoilSpecRoutePtrOutput() HyperfoilSpecRoutePtrOutput
	ToHyperfoilSpecRoutePtrOutputWithContext(context.Context) HyperfoilSpecRoutePtrOutput
}

type hyperfoilSpecRoutePtrType HyperfoilSpecRouteArgs

func HyperfoilSpecRoutePtr(v *HyperfoilSpecRouteArgs) HyperfoilSpecRoutePtrInput {
	return (*hyperfoilSpecRoutePtrType)(v)
}

func (*hyperfoilSpecRoutePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HyperfoilSpecRoute)(nil)).Elem()
}

func (i *hyperfoilSpecRoutePtrType) ToHyperfoilSpecRoutePtrOutput() HyperfoilSpecRoutePtrOutput {
	return i.ToHyperfoilSpecRoutePtrOutputWithContext(context.Background())
}

func (i *hyperfoilSpecRoutePtrType) ToHyperfoilSpecRoutePtrOutputWithContext(ctx context.Context) HyperfoilSpecRoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HyperfoilSpecRoutePtrOutput)
}

// Specification of the exposed route.
type HyperfoilSpecRouteOutput struct{ *pulumi.OutputState }

func (HyperfoilSpecRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HyperfoilSpecRoute)(nil)).Elem()
}

func (o HyperfoilSpecRouteOutput) ToHyperfoilSpecRouteOutput() HyperfoilSpecRouteOutput {
	return o
}

func (o HyperfoilSpecRouteOutput) ToHyperfoilSpecRouteOutputWithContext(ctx context.Context) HyperfoilSpecRouteOutput {
	return o
}

func (o HyperfoilSpecRouteOutput) ToHyperfoilSpecRoutePtrOutput() HyperfoilSpecRoutePtrOutput {
	return o.ToHyperfoilSpecRoutePtrOutputWithContext(context.Background())
}

func (o HyperfoilSpecRouteOutput) ToHyperfoilSpecRoutePtrOutputWithContext(ctx context.Context) HyperfoilSpecRoutePtrOutput {
	return o.ApplyT(func(v HyperfoilSpecRoute) *HyperfoilSpecRoute {
		return &v
	}).(HyperfoilSpecRoutePtrOutput)
}

// Host for the route leading to Controller REST endpoint. Example: hyperfoil.apps.cloud.example.com
func (o HyperfoilSpecRouteOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HyperfoilSpecRoute) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Optional for edge and reencrypt routes, required for passthrough; Name of the secret hosting `tls.crt`, `tls.key` and optionally `ca.crt`
func (o HyperfoilSpecRouteOutput) Tls() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HyperfoilSpecRoute) *string { return v.Tls }).(pulumi.StringPtrOutput)
}

// Either 'http' (for plain-text routes - not recommended), 'edge', 'reencrypt' or 'passthrough'
func (o HyperfoilSpecRouteOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HyperfoilSpecRoute) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type HyperfoilSpecRoutePtrOutput struct{ *pulumi.OutputState }

func (HyperfoilSpecRoutePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HyperfoilSpecRoute)(nil)).Elem()
}

func (o HyperfoilSpecRoutePtrOutput) ToHyperfoilSpecRoutePtrOutput() HyperfoilSpecRoutePtrOutput {
	return o
}

func (o HyperfoilSpecRoutePtrOutput) ToHyperfoilSpecRoutePtrOutputWithContext(ctx context.Context) HyperfoilSpecRoutePtrOutput {
	return o
}

func (o HyperfoilSpecRoutePtrOutput) Elem() HyperfoilSpecRouteOutput {
	return o.ApplyT(func(v *HyperfoilSpecRoute) HyperfoilSpecRoute { return *v }).(HyperfoilSpecRouteOutput)
}

// Host for the route leading to Controller REST endpoint. Example: hyperfoil.apps.cloud.example.com
func (o HyperfoilSpecRoutePtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HyperfoilSpecRoute) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Optional for edge and reencrypt routes, required for passthrough; Name of the secret hosting `tls.crt`, `tls.key` and optionally `ca.crt`
func (o HyperfoilSpecRoutePtrOutput) Tls() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HyperfoilSpecRoute) *string {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(pulumi.StringPtrOutput)
}

// Either 'http' (for plain-text routes - not recommended), 'edge', 'reencrypt' or 'passthrough'
func (o HyperfoilSpecRoutePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HyperfoilSpecRoute) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// HyperfoilStatus defines the observed state of Hyperfoil.
type HyperfoilStatus struct {
	// RFC 3339 date and time of the last update.
	LastUpdate *string `pulumi:"lastUpdate"`
	// Human readable explanation for the status.
	Reason *string `pulumi:"reason"`
	// "One of: 'Ready', 'Pending' or 'Error'"
	Status *string `pulumi:"status"`
}

// HyperfoilStatusInput is an input type that accepts HyperfoilStatusArgs and HyperfoilStatusOutput values.
// You can construct a concrete instance of `HyperfoilStatusInput` via:
//
//          HyperfoilStatusArgs{...}
type HyperfoilStatusInput interface {
	pulumi.Input

	ToHyperfoilStatusOutput() HyperfoilStatusOutput
	ToHyperfoilStatusOutputWithContext(context.Context) HyperfoilStatusOutput
}

// HyperfoilStatus defines the observed state of Hyperfoil.
type HyperfoilStatusArgs struct {
	// RFC 3339 date and time of the last update.
	LastUpdate pulumi.StringPtrInput `pulumi:"lastUpdate"`
	// Human readable explanation for the status.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// "One of: 'Ready', 'Pending' or 'Error'"
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (HyperfoilStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HyperfoilStatus)(nil)).Elem()
}

func (i HyperfoilStatusArgs) ToHyperfoilStatusOutput() HyperfoilStatusOutput {
	return i.ToHyperfoilStatusOutputWithContext(context.Background())
}

func (i HyperfoilStatusArgs) ToHyperfoilStatusOutputWithContext(ctx context.Context) HyperfoilStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HyperfoilStatusOutput)
}

func (i HyperfoilStatusArgs) ToHyperfoilStatusPtrOutput() HyperfoilStatusPtrOutput {
	return i.ToHyperfoilStatusPtrOutputWithContext(context.Background())
}

func (i HyperfoilStatusArgs) ToHyperfoilStatusPtrOutputWithContext(ctx context.Context) HyperfoilStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HyperfoilStatusOutput).ToHyperfoilStatusPtrOutputWithContext(ctx)
}

// HyperfoilStatusPtrInput is an input type that accepts HyperfoilStatusArgs, HyperfoilStatusPtr and HyperfoilStatusPtrOutput values.
// You can construct a concrete instance of `HyperfoilStatusPtrInput` via:
//
//          HyperfoilStatusArgs{...}
//
//  or:
//
//          nil
type HyperfoilStatusPtrInput interface {
	pulumi.Input

	ToHyperfoilStatusPtrOutput() HyperfoilStatusPtrOutput
	ToHyperfoilStatusPtrOutputWithContext(context.Context) HyperfoilStatusPtrOutput
}

type hyperfoilStatusPtrType HyperfoilStatusArgs

func HyperfoilStatusPtr(v *HyperfoilStatusArgs) HyperfoilStatusPtrInput {
	return (*hyperfoilStatusPtrType)(v)
}

func (*hyperfoilStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HyperfoilStatus)(nil)).Elem()
}

func (i *hyperfoilStatusPtrType) ToHyperfoilStatusPtrOutput() HyperfoilStatusPtrOutput {
	return i.ToHyperfoilStatusPtrOutputWithContext(context.Background())
}

func (i *hyperfoilStatusPtrType) ToHyperfoilStatusPtrOutputWithContext(ctx context.Context) HyperfoilStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HyperfoilStatusPtrOutput)
}

// HyperfoilStatus defines the observed state of Hyperfoil.
type HyperfoilStatusOutput struct{ *pulumi.OutputState }

func (HyperfoilStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HyperfoilStatus)(nil)).Elem()
}

func (o HyperfoilStatusOutput) ToHyperfoilStatusOutput() HyperfoilStatusOutput {
	return o
}

func (o HyperfoilStatusOutput) ToHyperfoilStatusOutputWithContext(ctx context.Context) HyperfoilStatusOutput {
	return o
}

func (o HyperfoilStatusOutput) ToHyperfoilStatusPtrOutput() HyperfoilStatusPtrOutput {
	return o.ToHyperfoilStatusPtrOutputWithContext(context.Background())
}

func (o HyperfoilStatusOutput) ToHyperfoilStatusPtrOutputWithContext(ctx context.Context) HyperfoilStatusPtrOutput {
	return o.ApplyT(func(v HyperfoilStatus) *HyperfoilStatus {
		return &v
	}).(HyperfoilStatusPtrOutput)
}

// RFC 3339 date and time of the last update.
func (o HyperfoilStatusOutput) LastUpdate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HyperfoilStatus) *string { return v.LastUpdate }).(pulumi.StringPtrOutput)
}

// Human readable explanation for the status.
func (o HyperfoilStatusOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HyperfoilStatus) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// "One of: 'Ready', 'Pending' or 'Error'"
func (o HyperfoilStatusOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HyperfoilStatus) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type HyperfoilStatusPtrOutput struct{ *pulumi.OutputState }

func (HyperfoilStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HyperfoilStatus)(nil)).Elem()
}

func (o HyperfoilStatusPtrOutput) ToHyperfoilStatusPtrOutput() HyperfoilStatusPtrOutput {
	return o
}

func (o HyperfoilStatusPtrOutput) ToHyperfoilStatusPtrOutputWithContext(ctx context.Context) HyperfoilStatusPtrOutput {
	return o
}

func (o HyperfoilStatusPtrOutput) Elem() HyperfoilStatusOutput {
	return o.ApplyT(func(v *HyperfoilStatus) HyperfoilStatus { return *v }).(HyperfoilStatusOutput)
}

// RFC 3339 date and time of the last update.
func (o HyperfoilStatusPtrOutput) LastUpdate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HyperfoilStatus) *string {
		if v == nil {
			return nil
		}
		return v.LastUpdate
	}).(pulumi.StringPtrOutput)
}

// Human readable explanation for the status.
func (o HyperfoilStatusPtrOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HyperfoilStatus) *string {
		if v == nil {
			return nil
		}
		return v.Reason
	}).(pulumi.StringPtrOutput)
}

// "One of: 'Ready', 'Pending' or 'Error'"
func (o HyperfoilStatusPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HyperfoilStatus) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(HyperfoilTypeOutput{})
	pulumi.RegisterOutputType(HyperfoilMetadataOutput{})
	pulumi.RegisterOutputType(HyperfoilSpecOutput{})
	pulumi.RegisterOutputType(HyperfoilSpecPtrOutput{})
	pulumi.RegisterOutputType(HyperfoilSpecAuthOutput{})
	pulumi.RegisterOutputType(HyperfoilSpecAuthPtrOutput{})
	pulumi.RegisterOutputType(HyperfoilSpecRouteOutput{})
	pulumi.RegisterOutputType(HyperfoilSpecRoutePtrOutput{})
	pulumi.RegisterOutputType(HyperfoilStatusOutput{})
	pulumi.RegisterOutputType(HyperfoilStatusPtrOutput{})
}

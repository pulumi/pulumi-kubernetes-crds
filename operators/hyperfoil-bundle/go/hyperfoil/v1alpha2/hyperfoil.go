// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha2

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Hyperfoil is the Schema for the hyperfoils API
type Hyperfoil struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// HyperfoilSpec Configures Hyperfoil Controller and related resources.
	Spec HyperfoilSpecPtrOutput `pulumi:"spec"`
	// HyperfoilStatus defines the observed state of Hyperfoil.
	Status HyperfoilStatusPtrOutput `pulumi:"status"`
}

// NewHyperfoil registers a new resource with the given unique name, arguments, and options.
func NewHyperfoil(ctx *pulumi.Context,
	name string, args *HyperfoilArgs, opts ...pulumi.ResourceOption) (*Hyperfoil, error) {
	if args == nil {
		args = &HyperfoilArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("hyperfoil.io/v1alpha2")
	args.Kind = pulumi.StringPtr("Hyperfoil")
	var resource Hyperfoil
	err := ctx.RegisterResource("kubernetes:hyperfoil.io/v1alpha2:Hyperfoil", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHyperfoil gets an existing Hyperfoil resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHyperfoil(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HyperfoilState, opts ...pulumi.ResourceOption) (*Hyperfoil, error) {
	var resource Hyperfoil
	err := ctx.ReadResource("kubernetes:hyperfoil.io/v1alpha2:Hyperfoil", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Hyperfoil resources.
type hyperfoilState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// HyperfoilSpec Configures Hyperfoil Controller and related resources.
	Spec *HyperfoilSpec `pulumi:"spec"`
	// HyperfoilStatus defines the observed state of Hyperfoil.
	Status *HyperfoilStatus `pulumi:"status"`
}

type HyperfoilState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// HyperfoilSpec Configures Hyperfoil Controller and related resources.
	Spec HyperfoilSpecPtrInput
	// HyperfoilStatus defines the observed state of Hyperfoil.
	Status HyperfoilStatusPtrInput
}

func (HyperfoilState) ElementType() reflect.Type {
	return reflect.TypeOf((*hyperfoilState)(nil)).Elem()
}

type hyperfoilArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// HyperfoilSpec Configures Hyperfoil Controller and related resources.
	Spec *HyperfoilSpec `pulumi:"spec"`
	// HyperfoilStatus defines the observed state of Hyperfoil.
	Status *HyperfoilStatus `pulumi:"status"`
}

// The set of arguments for constructing a Hyperfoil resource.
type HyperfoilArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// HyperfoilSpec Configures Hyperfoil Controller and related resources.
	Spec HyperfoilSpecPtrInput
	// HyperfoilStatus defines the observed state of Hyperfoil.
	Status HyperfoilStatusPtrInput
}

func (HyperfoilArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hyperfoilArgs)(nil)).Elem()
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Inputs.Hyperfoil.V1Alpha2
{

    /// <summary>
    /// HyperfoilSpec Configures Hyperfoil Controller and related resources.
    /// </summary>
    public class HyperfoilSpecArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Deploy timeout for agents, in milliseconds.
        /// </summary>
        [Input("agentDeployTimeout")]
        public Input<int>? AgentDeployTimeout { get; set; }

        /// <summary>
        /// Authentication/authorization settings.
        /// </summary>
        [Input("auth")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Hyperfoil.V1Alpha2.HyperfoilSpecAuthArgs>? Auth { get; set; }

        /// <summary>
        /// Controller image. If 'version' is defined, too, the tag is replaced (or appended). Defaults to 'quay.io/hyperfoil/hyperfoil'
        /// </summary>
        [Input("image")]
        public Input<string>? Image { get; set; }

        /// <summary>
        /// Name of the config map and optionally its entry (separated by '/': e.g myconfigmap/log4j2-superverbose.xml) storing Log4j2 configuration file. By default the Controller uses its embedded configuration.
        /// </summary>
        [Input("log")]
        public Input<string>? Log { get; set; }

        /// <summary>
        /// Name of the PVC hyperfoil should mount for its workdir.
        /// </summary>
        [Input("persistentVolumeClaim")]
        public Input<string>? PersistentVolumeClaim { get; set; }

        [Input("postHooks")]
        private InputList<string>? _postHooks;

        /// <summary>
        /// Names of config maps and optionally keys (separated by '/') holding hooks that run after the run finishes.
        /// </summary>
        public InputList<string> PostHooks
        {
            get => _postHooks ?? (_postHooks = new InputList<string>());
            set => _postHooks = value;
        }

        [Input("preHooks")]
        private InputList<string>? _preHooks;

        /// <summary>
        /// Names of config maps and optionally keys (separated by '/') holding hooks that run before the run starts.
        /// </summary>
        public InputList<string> PreHooks
        {
            get => _preHooks ?? (_preHooks = new InputList<string>());
            set => _preHooks = value;
        }

        /// <summary>
        /// Specification of the exposed route.
        /// </summary>
        [Input("route")]
        public Input<Pulumi.Kubernetes.Types.Inputs.Hyperfoil.V1Alpha2.HyperfoilSpecRouteArgs>? Route { get; set; }

        [Input("secretEnvVars")]
        private InputList<string>? _secretEnvVars;

        /// <summary>
        /// List of secrets in this namespace; each entry from those secrets will be mapped as environment variable, using the key as variable name.
        /// </summary>
        public InputList<string> SecretEnvVars
        {
            get => _secretEnvVars ?? (_secretEnvVars = new InputList<string>());
            set => _secretEnvVars = value;
        }

        /// <summary>
        /// If this is set the controller does not start benchmark run right away after hitting /benchmark/my-benchmark/start ; instead it responds with status 301 and header Location set to concatenation of this string and 'BENCHMARK=my-benchmark&amp;RUN_ID=xxxx'. CLI interprets that response as a request to hit CI instance on this URL, assuming that CI will trigger a new job that will eventually call /benchmark/my-benchmark/start?runId=xxxx with header 'x-trigger-job'. This is useful if the the CI has to synchronize Hyperfoil to other benchmarks that don't use this controller instance.
        /// </summary>
        [Input("triggerUrl")]
        public Input<string>? TriggerUrl { get; set; }

        /// <summary>
        /// Tag for controller image. Defaults to version matching the operator version.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public HyperfoilSpecArgs()
        {
        }
    }
}

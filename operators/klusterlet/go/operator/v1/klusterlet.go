// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Klusterlet represents controllers on the managed cluster. When configured, the Klusterlet requires a secret named of bootstrap-hub-kubeconfig in the same namespace to allow API requests to the hub for the registration protocol.
type Klusterlet struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// Spec represents the desired deployment configuration of Klusterlet agent.
	Spec KlusterletSpecPtrOutput `pulumi:"spec"`
	// Status represents the current status of Klusterlet agent.
	Status KlusterletStatusPtrOutput `pulumi:"status"`
}

// NewKlusterlet registers a new resource with the given unique name, arguments, and options.
func NewKlusterlet(ctx *pulumi.Context,
	name string, args *KlusterletArgs, opts ...pulumi.ResourceOption) (*Klusterlet, error) {
	if args == nil {
		args = &KlusterletArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("operator.open-cluster-management.io/v1")
	args.Kind = pulumi.StringPtr("Klusterlet")
	var resource Klusterlet
	err := ctx.RegisterResource("kubernetes:operator.open-cluster-management.io/v1:Klusterlet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKlusterlet gets an existing Klusterlet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKlusterlet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KlusterletState, opts ...pulumi.ResourceOption) (*Klusterlet, error) {
	var resource Klusterlet
	err := ctx.ReadResource("kubernetes:operator.open-cluster-management.io/v1:Klusterlet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Klusterlet resources.
type klusterletState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec represents the desired deployment configuration of Klusterlet agent.
	Spec *KlusterletSpec `pulumi:"spec"`
	// Status represents the current status of Klusterlet agent.
	Status *KlusterletStatus `pulumi:"status"`
}

type KlusterletState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// Spec represents the desired deployment configuration of Klusterlet agent.
	Spec KlusterletSpecPtrInput
	// Status represents the current status of Klusterlet agent.
	Status KlusterletStatusPtrInput
}

func (KlusterletState) ElementType() reflect.Type {
	return reflect.TypeOf((*klusterletState)(nil)).Elem()
}

type klusterletArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec represents the desired deployment configuration of Klusterlet agent.
	Spec *KlusterletSpec `pulumi:"spec"`
	// Status represents the current status of Klusterlet agent.
	Status *KlusterletStatus `pulumi:"status"`
}

// The set of arguments for constructing a Klusterlet resource.
type KlusterletArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// Spec represents the desired deployment configuration of Klusterlet agent.
	Spec KlusterletSpecPtrInput
	// Status represents the current status of Klusterlet agent.
	Status KlusterletStatusPtrInput
}

func (KlusterletArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*klusterletArgs)(nil)).Elem()
}

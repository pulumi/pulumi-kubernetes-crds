// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Klusterlet represents controllers on the managed cluster. When configured, the Klusterlet requires a secret named of bootstrap-hub-kubeconfig in the same namespace to allow API requests to the hub for the registration protocol.
type KlusterletType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec represents the desired deployment configuration of Klusterlet agent.
	Spec *KlusterletSpec `pulumi:"spec"`
	// Status represents the current status of Klusterlet agent.
	Status *KlusterletStatus `pulumi:"status"`
}

// KlusterletTypeInput is an input type that accepts KlusterletTypeArgs and KlusterletTypeOutput values.
// You can construct a concrete instance of `KlusterletTypeInput` via:
//
//          KlusterletTypeArgs{...}
type KlusterletTypeInput interface {
	pulumi.Input

	ToKlusterletTypeOutput() KlusterletTypeOutput
	ToKlusterletTypeOutputWithContext(context.Context) KlusterletTypeOutput
}

// Klusterlet represents controllers on the managed cluster. When configured, the Klusterlet requires a secret named of bootstrap-hub-kubeconfig in the same namespace to allow API requests to the hub for the registration protocol.
type KlusterletTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Spec represents the desired deployment configuration of Klusterlet agent.
	Spec KlusterletSpecPtrInput `pulumi:"spec"`
	// Status represents the current status of Klusterlet agent.
	Status KlusterletStatusPtrInput `pulumi:"status"`
}

func (KlusterletTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KlusterletType)(nil)).Elem()
}

func (i KlusterletTypeArgs) ToKlusterletTypeOutput() KlusterletTypeOutput {
	return i.ToKlusterletTypeOutputWithContext(context.Background())
}

func (i KlusterletTypeArgs) ToKlusterletTypeOutputWithContext(ctx context.Context) KlusterletTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KlusterletTypeOutput)
}

// Klusterlet represents controllers on the managed cluster. When configured, the Klusterlet requires a secret named of bootstrap-hub-kubeconfig in the same namespace to allow API requests to the hub for the registration protocol.
type KlusterletTypeOutput struct{ *pulumi.OutputState }

func (KlusterletTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KlusterletType)(nil)).Elem()
}

func (o KlusterletTypeOutput) ToKlusterletTypeOutput() KlusterletTypeOutput {
	return o
}

func (o KlusterletTypeOutput) ToKlusterletTypeOutputWithContext(ctx context.Context) KlusterletTypeOutput {
	return o
}

func (o KlusterletTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KlusterletType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o KlusterletTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KlusterletType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o KlusterletTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v KlusterletType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Spec represents the desired deployment configuration of Klusterlet agent.
func (o KlusterletTypeOutput) Spec() KlusterletSpecPtrOutput {
	return o.ApplyT(func(v KlusterletType) *KlusterletSpec { return v.Spec }).(KlusterletSpecPtrOutput)
}

// Status represents the current status of Klusterlet agent.
func (o KlusterletTypeOutput) Status() KlusterletStatusPtrOutput {
	return o.ApplyT(func(v KlusterletType) *KlusterletStatus { return v.Status }).(KlusterletStatusPtrOutput)
}

type KlusterletMetadata struct {
}

// KlusterletMetadataInput is an input type that accepts KlusterletMetadataArgs and KlusterletMetadataOutput values.
// You can construct a concrete instance of `KlusterletMetadataInput` via:
//
//          KlusterletMetadataArgs{...}
type KlusterletMetadataInput interface {
	pulumi.Input

	ToKlusterletMetadataOutput() KlusterletMetadataOutput
	ToKlusterletMetadataOutputWithContext(context.Context) KlusterletMetadataOutput
}

type KlusterletMetadataArgs struct {
}

func (KlusterletMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KlusterletMetadata)(nil)).Elem()
}

func (i KlusterletMetadataArgs) ToKlusterletMetadataOutput() KlusterletMetadataOutput {
	return i.ToKlusterletMetadataOutputWithContext(context.Background())
}

func (i KlusterletMetadataArgs) ToKlusterletMetadataOutputWithContext(ctx context.Context) KlusterletMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KlusterletMetadataOutput)
}

type KlusterletMetadataOutput struct{ *pulumi.OutputState }

func (KlusterletMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KlusterletMetadata)(nil)).Elem()
}

func (o KlusterletMetadataOutput) ToKlusterletMetadataOutput() KlusterletMetadataOutput {
	return o
}

func (o KlusterletMetadataOutput) ToKlusterletMetadataOutputWithContext(ctx context.Context) KlusterletMetadataOutput {
	return o
}

// Spec represents the desired deployment configuration of Klusterlet agent.
type KlusterletSpec struct {
	// ClusterName is the name of the managed cluster to be created on hub. The Klusterlet agent generates a random name if it is not set, or discovers the appropriate cluster name on openshift.
	ClusterName *string `pulumi:"clusterName"`
	// ExternalServerURLs represents the a list of apiserver urls and ca bundles that is accessible externally If it is set empty, managed cluster has no externally accessible url that hub cluster can visit.
	ExternalServerURLs []KlusterletSpecExternalServerURLs `pulumi:"externalServerURLs"`
	// Namespace is the namespace to deploy the agent. The namespace must have a prefix of "open-cluster-management-", and if it is not set, the namespace of "open-cluster-management-agent" is used to deploy agent.
	Namespace *string `pulumi:"namespace"`
	// RegistrationImagePullSpec represents the desired image configuration of registration agent.
	RegistrationImagePullSpec *string `pulumi:"registrationImagePullSpec"`
	// WorkImagePullSpec represents the desired image configuration of work agent.
	WorkImagePullSpec *string `pulumi:"workImagePullSpec"`
}

// KlusterletSpecInput is an input type that accepts KlusterletSpecArgs and KlusterletSpecOutput values.
// You can construct a concrete instance of `KlusterletSpecInput` via:
//
//          KlusterletSpecArgs{...}
type KlusterletSpecInput interface {
	pulumi.Input

	ToKlusterletSpecOutput() KlusterletSpecOutput
	ToKlusterletSpecOutputWithContext(context.Context) KlusterletSpecOutput
}

// Spec represents the desired deployment configuration of Klusterlet agent.
type KlusterletSpecArgs struct {
	// ClusterName is the name of the managed cluster to be created on hub. The Klusterlet agent generates a random name if it is not set, or discovers the appropriate cluster name on openshift.
	ClusterName pulumi.StringPtrInput `pulumi:"clusterName"`
	// ExternalServerURLs represents the a list of apiserver urls and ca bundles that is accessible externally If it is set empty, managed cluster has no externally accessible url that hub cluster can visit.
	ExternalServerURLs KlusterletSpecExternalServerURLsArrayInput `pulumi:"externalServerURLs"`
	// Namespace is the namespace to deploy the agent. The namespace must have a prefix of "open-cluster-management-", and if it is not set, the namespace of "open-cluster-management-agent" is used to deploy agent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// RegistrationImagePullSpec represents the desired image configuration of registration agent.
	RegistrationImagePullSpec pulumi.StringPtrInput `pulumi:"registrationImagePullSpec"`
	// WorkImagePullSpec represents the desired image configuration of work agent.
	WorkImagePullSpec pulumi.StringPtrInput `pulumi:"workImagePullSpec"`
}

func (KlusterletSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KlusterletSpec)(nil)).Elem()
}

func (i KlusterletSpecArgs) ToKlusterletSpecOutput() KlusterletSpecOutput {
	return i.ToKlusterletSpecOutputWithContext(context.Background())
}

func (i KlusterletSpecArgs) ToKlusterletSpecOutputWithContext(ctx context.Context) KlusterletSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KlusterletSpecOutput)
}

func (i KlusterletSpecArgs) ToKlusterletSpecPtrOutput() KlusterletSpecPtrOutput {
	return i.ToKlusterletSpecPtrOutputWithContext(context.Background())
}

func (i KlusterletSpecArgs) ToKlusterletSpecPtrOutputWithContext(ctx context.Context) KlusterletSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KlusterletSpecOutput).ToKlusterletSpecPtrOutputWithContext(ctx)
}

// KlusterletSpecPtrInput is an input type that accepts KlusterletSpecArgs, KlusterletSpecPtr and KlusterletSpecPtrOutput values.
// You can construct a concrete instance of `KlusterletSpecPtrInput` via:
//
//          KlusterletSpecArgs{...}
//
//  or:
//
//          nil
type KlusterletSpecPtrInput interface {
	pulumi.Input

	ToKlusterletSpecPtrOutput() KlusterletSpecPtrOutput
	ToKlusterletSpecPtrOutputWithContext(context.Context) KlusterletSpecPtrOutput
}

type klusterletSpecPtrType KlusterletSpecArgs

func KlusterletSpecPtr(v *KlusterletSpecArgs) KlusterletSpecPtrInput {
	return (*klusterletSpecPtrType)(v)
}

func (*klusterletSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KlusterletSpec)(nil)).Elem()
}

func (i *klusterletSpecPtrType) ToKlusterletSpecPtrOutput() KlusterletSpecPtrOutput {
	return i.ToKlusterletSpecPtrOutputWithContext(context.Background())
}

func (i *klusterletSpecPtrType) ToKlusterletSpecPtrOutputWithContext(ctx context.Context) KlusterletSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KlusterletSpecPtrOutput)
}

// Spec represents the desired deployment configuration of Klusterlet agent.
type KlusterletSpecOutput struct{ *pulumi.OutputState }

func (KlusterletSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KlusterletSpec)(nil)).Elem()
}

func (o KlusterletSpecOutput) ToKlusterletSpecOutput() KlusterletSpecOutput {
	return o
}

func (o KlusterletSpecOutput) ToKlusterletSpecOutputWithContext(ctx context.Context) KlusterletSpecOutput {
	return o
}

func (o KlusterletSpecOutput) ToKlusterletSpecPtrOutput() KlusterletSpecPtrOutput {
	return o.ToKlusterletSpecPtrOutputWithContext(context.Background())
}

func (o KlusterletSpecOutput) ToKlusterletSpecPtrOutputWithContext(ctx context.Context) KlusterletSpecPtrOutput {
	return o.ApplyT(func(v KlusterletSpec) *KlusterletSpec {
		return &v
	}).(KlusterletSpecPtrOutput)
}

// ClusterName is the name of the managed cluster to be created on hub. The Klusterlet agent generates a random name if it is not set, or discovers the appropriate cluster name on openshift.
func (o KlusterletSpecOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KlusterletSpec) *string { return v.ClusterName }).(pulumi.StringPtrOutput)
}

// ExternalServerURLs represents the a list of apiserver urls and ca bundles that is accessible externally If it is set empty, managed cluster has no externally accessible url that hub cluster can visit.
func (o KlusterletSpecOutput) ExternalServerURLs() KlusterletSpecExternalServerURLsArrayOutput {
	return o.ApplyT(func(v KlusterletSpec) []KlusterletSpecExternalServerURLs { return v.ExternalServerURLs }).(KlusterletSpecExternalServerURLsArrayOutput)
}

// Namespace is the namespace to deploy the agent. The namespace must have a prefix of "open-cluster-management-", and if it is not set, the namespace of "open-cluster-management-agent" is used to deploy agent.
func (o KlusterletSpecOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KlusterletSpec) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// RegistrationImagePullSpec represents the desired image configuration of registration agent.
func (o KlusterletSpecOutput) RegistrationImagePullSpec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KlusterletSpec) *string { return v.RegistrationImagePullSpec }).(pulumi.StringPtrOutput)
}

// WorkImagePullSpec represents the desired image configuration of work agent.
func (o KlusterletSpecOutput) WorkImagePullSpec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KlusterletSpec) *string { return v.WorkImagePullSpec }).(pulumi.StringPtrOutput)
}

type KlusterletSpecPtrOutput struct{ *pulumi.OutputState }

func (KlusterletSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KlusterletSpec)(nil)).Elem()
}

func (o KlusterletSpecPtrOutput) ToKlusterletSpecPtrOutput() KlusterletSpecPtrOutput {
	return o
}

func (o KlusterletSpecPtrOutput) ToKlusterletSpecPtrOutputWithContext(ctx context.Context) KlusterletSpecPtrOutput {
	return o
}

func (o KlusterletSpecPtrOutput) Elem() KlusterletSpecOutput {
	return o.ApplyT(func(v *KlusterletSpec) KlusterletSpec { return *v }).(KlusterletSpecOutput)
}

// ClusterName is the name of the managed cluster to be created on hub. The Klusterlet agent generates a random name if it is not set, or discovers the appropriate cluster name on openshift.
func (o KlusterletSpecPtrOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KlusterletSpec) *string {
		if v == nil {
			return nil
		}
		return v.ClusterName
	}).(pulumi.StringPtrOutput)
}

// ExternalServerURLs represents the a list of apiserver urls and ca bundles that is accessible externally If it is set empty, managed cluster has no externally accessible url that hub cluster can visit.
func (o KlusterletSpecPtrOutput) ExternalServerURLs() KlusterletSpecExternalServerURLsArrayOutput {
	return o.ApplyT(func(v *KlusterletSpec) []KlusterletSpecExternalServerURLs {
		if v == nil {
			return nil
		}
		return v.ExternalServerURLs
	}).(KlusterletSpecExternalServerURLsArrayOutput)
}

// Namespace is the namespace to deploy the agent. The namespace must have a prefix of "open-cluster-management-", and if it is not set, the namespace of "open-cluster-management-agent" is used to deploy agent.
func (o KlusterletSpecPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KlusterletSpec) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// RegistrationImagePullSpec represents the desired image configuration of registration agent.
func (o KlusterletSpecPtrOutput) RegistrationImagePullSpec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KlusterletSpec) *string {
		if v == nil {
			return nil
		}
		return v.RegistrationImagePullSpec
	}).(pulumi.StringPtrOutput)
}

// WorkImagePullSpec represents the desired image configuration of work agent.
func (o KlusterletSpecPtrOutput) WorkImagePullSpec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KlusterletSpec) *string {
		if v == nil {
			return nil
		}
		return v.WorkImagePullSpec
	}).(pulumi.StringPtrOutput)
}

// ServerURL represents the apiserver url and ca bundle that is accessible externally
type KlusterletSpecExternalServerURLs struct {
	// CABundle is the ca bundle to connect to apiserver of the managed cluster. System certs are used if it is not set.
	CaBundle *string `pulumi:"caBundle"`
	// URL is the url of apiserver endpoint of the managed cluster.
	Url *string `pulumi:"url"`
}

// KlusterletSpecExternalServerURLsInput is an input type that accepts KlusterletSpecExternalServerURLsArgs and KlusterletSpecExternalServerURLsOutput values.
// You can construct a concrete instance of `KlusterletSpecExternalServerURLsInput` via:
//
//          KlusterletSpecExternalServerURLsArgs{...}
type KlusterletSpecExternalServerURLsInput interface {
	pulumi.Input

	ToKlusterletSpecExternalServerURLsOutput() KlusterletSpecExternalServerURLsOutput
	ToKlusterletSpecExternalServerURLsOutputWithContext(context.Context) KlusterletSpecExternalServerURLsOutput
}

// ServerURL represents the apiserver url and ca bundle that is accessible externally
type KlusterletSpecExternalServerURLsArgs struct {
	// CABundle is the ca bundle to connect to apiserver of the managed cluster. System certs are used if it is not set.
	CaBundle pulumi.StringPtrInput `pulumi:"caBundle"`
	// URL is the url of apiserver endpoint of the managed cluster.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (KlusterletSpecExternalServerURLsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KlusterletSpecExternalServerURLs)(nil)).Elem()
}

func (i KlusterletSpecExternalServerURLsArgs) ToKlusterletSpecExternalServerURLsOutput() KlusterletSpecExternalServerURLsOutput {
	return i.ToKlusterletSpecExternalServerURLsOutputWithContext(context.Background())
}

func (i KlusterletSpecExternalServerURLsArgs) ToKlusterletSpecExternalServerURLsOutputWithContext(ctx context.Context) KlusterletSpecExternalServerURLsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KlusterletSpecExternalServerURLsOutput)
}

// KlusterletSpecExternalServerURLsArrayInput is an input type that accepts KlusterletSpecExternalServerURLsArray and KlusterletSpecExternalServerURLsArrayOutput values.
// You can construct a concrete instance of `KlusterletSpecExternalServerURLsArrayInput` via:
//
//          KlusterletSpecExternalServerURLsArray{ KlusterletSpecExternalServerURLsArgs{...} }
type KlusterletSpecExternalServerURLsArrayInput interface {
	pulumi.Input

	ToKlusterletSpecExternalServerURLsArrayOutput() KlusterletSpecExternalServerURLsArrayOutput
	ToKlusterletSpecExternalServerURLsArrayOutputWithContext(context.Context) KlusterletSpecExternalServerURLsArrayOutput
}

type KlusterletSpecExternalServerURLsArray []KlusterletSpecExternalServerURLsInput

func (KlusterletSpecExternalServerURLsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KlusterletSpecExternalServerURLs)(nil)).Elem()
}

func (i KlusterletSpecExternalServerURLsArray) ToKlusterletSpecExternalServerURLsArrayOutput() KlusterletSpecExternalServerURLsArrayOutput {
	return i.ToKlusterletSpecExternalServerURLsArrayOutputWithContext(context.Background())
}

func (i KlusterletSpecExternalServerURLsArray) ToKlusterletSpecExternalServerURLsArrayOutputWithContext(ctx context.Context) KlusterletSpecExternalServerURLsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KlusterletSpecExternalServerURLsArrayOutput)
}

// ServerURL represents the apiserver url and ca bundle that is accessible externally
type KlusterletSpecExternalServerURLsOutput struct{ *pulumi.OutputState }

func (KlusterletSpecExternalServerURLsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KlusterletSpecExternalServerURLs)(nil)).Elem()
}

func (o KlusterletSpecExternalServerURLsOutput) ToKlusterletSpecExternalServerURLsOutput() KlusterletSpecExternalServerURLsOutput {
	return o
}

func (o KlusterletSpecExternalServerURLsOutput) ToKlusterletSpecExternalServerURLsOutputWithContext(ctx context.Context) KlusterletSpecExternalServerURLsOutput {
	return o
}

// CABundle is the ca bundle to connect to apiserver of the managed cluster. System certs are used if it is not set.
func (o KlusterletSpecExternalServerURLsOutput) CaBundle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KlusterletSpecExternalServerURLs) *string { return v.CaBundle }).(pulumi.StringPtrOutput)
}

// URL is the url of apiserver endpoint of the managed cluster.
func (o KlusterletSpecExternalServerURLsOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KlusterletSpecExternalServerURLs) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type KlusterletSpecExternalServerURLsArrayOutput struct{ *pulumi.OutputState }

func (KlusterletSpecExternalServerURLsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KlusterletSpecExternalServerURLs)(nil)).Elem()
}

func (o KlusterletSpecExternalServerURLsArrayOutput) ToKlusterletSpecExternalServerURLsArrayOutput() KlusterletSpecExternalServerURLsArrayOutput {
	return o
}

func (o KlusterletSpecExternalServerURLsArrayOutput) ToKlusterletSpecExternalServerURLsArrayOutputWithContext(ctx context.Context) KlusterletSpecExternalServerURLsArrayOutput {
	return o
}

func (o KlusterletSpecExternalServerURLsArrayOutput) Index(i pulumi.IntInput) KlusterletSpecExternalServerURLsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KlusterletSpecExternalServerURLs {
		return vs[0].([]KlusterletSpecExternalServerURLs)[vs[1].(int)]
	}).(KlusterletSpecExternalServerURLsOutput)
}

// Status represents the current status of Klusterlet agent.
type KlusterletStatus struct {
	// Conditions contain the different condition statuses for this Klusterlet. Valid condition types are: Applied: components have been applied in the managed cluster. Available: components in the managed cluster are available and ready to serve. Progressing: components in the managed cluster are in a transitioning state. Degraded: components in the managed cluster do not match the desired configuration and only provide degraded service.
	Conditions []KlusterletStatusConditions `pulumi:"conditions"`
	// Generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.
	Generations []KlusterletStatusGenerations `pulumi:"generations"`
	// ObservedGeneration is the last generation change you've dealt with
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// RelatedResources are used to track the resources that are related to this Klusterlet
	RelatedResources []KlusterletStatusRelatedResources `pulumi:"relatedResources"`
}

// KlusterletStatusInput is an input type that accepts KlusterletStatusArgs and KlusterletStatusOutput values.
// You can construct a concrete instance of `KlusterletStatusInput` via:
//
//          KlusterletStatusArgs{...}
type KlusterletStatusInput interface {
	pulumi.Input

	ToKlusterletStatusOutput() KlusterletStatusOutput
	ToKlusterletStatusOutputWithContext(context.Context) KlusterletStatusOutput
}

// Status represents the current status of Klusterlet agent.
type KlusterletStatusArgs struct {
	// Conditions contain the different condition statuses for this Klusterlet. Valid condition types are: Applied: components have been applied in the managed cluster. Available: components in the managed cluster are available and ready to serve. Progressing: components in the managed cluster are in a transitioning state. Degraded: components in the managed cluster do not match the desired configuration and only provide degraded service.
	Conditions KlusterletStatusConditionsArrayInput `pulumi:"conditions"`
	// Generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.
	Generations KlusterletStatusGenerationsArrayInput `pulumi:"generations"`
	// ObservedGeneration is the last generation change you've dealt with
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// RelatedResources are used to track the resources that are related to this Klusterlet
	RelatedResources KlusterletStatusRelatedResourcesArrayInput `pulumi:"relatedResources"`
}

func (KlusterletStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KlusterletStatus)(nil)).Elem()
}

func (i KlusterletStatusArgs) ToKlusterletStatusOutput() KlusterletStatusOutput {
	return i.ToKlusterletStatusOutputWithContext(context.Background())
}

func (i KlusterletStatusArgs) ToKlusterletStatusOutputWithContext(ctx context.Context) KlusterletStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KlusterletStatusOutput)
}

func (i KlusterletStatusArgs) ToKlusterletStatusPtrOutput() KlusterletStatusPtrOutput {
	return i.ToKlusterletStatusPtrOutputWithContext(context.Background())
}

func (i KlusterletStatusArgs) ToKlusterletStatusPtrOutputWithContext(ctx context.Context) KlusterletStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KlusterletStatusOutput).ToKlusterletStatusPtrOutputWithContext(ctx)
}

// KlusterletStatusPtrInput is an input type that accepts KlusterletStatusArgs, KlusterletStatusPtr and KlusterletStatusPtrOutput values.
// You can construct a concrete instance of `KlusterletStatusPtrInput` via:
//
//          KlusterletStatusArgs{...}
//
//  or:
//
//          nil
type KlusterletStatusPtrInput interface {
	pulumi.Input

	ToKlusterletStatusPtrOutput() KlusterletStatusPtrOutput
	ToKlusterletStatusPtrOutputWithContext(context.Context) KlusterletStatusPtrOutput
}

type klusterletStatusPtrType KlusterletStatusArgs

func KlusterletStatusPtr(v *KlusterletStatusArgs) KlusterletStatusPtrInput {
	return (*klusterletStatusPtrType)(v)
}

func (*klusterletStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KlusterletStatus)(nil)).Elem()
}

func (i *klusterletStatusPtrType) ToKlusterletStatusPtrOutput() KlusterletStatusPtrOutput {
	return i.ToKlusterletStatusPtrOutputWithContext(context.Background())
}

func (i *klusterletStatusPtrType) ToKlusterletStatusPtrOutputWithContext(ctx context.Context) KlusterletStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KlusterletStatusPtrOutput)
}

// Status represents the current status of Klusterlet agent.
type KlusterletStatusOutput struct{ *pulumi.OutputState }

func (KlusterletStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KlusterletStatus)(nil)).Elem()
}

func (o KlusterletStatusOutput) ToKlusterletStatusOutput() KlusterletStatusOutput {
	return o
}

func (o KlusterletStatusOutput) ToKlusterletStatusOutputWithContext(ctx context.Context) KlusterletStatusOutput {
	return o
}

func (o KlusterletStatusOutput) ToKlusterletStatusPtrOutput() KlusterletStatusPtrOutput {
	return o.ToKlusterletStatusPtrOutputWithContext(context.Background())
}

func (o KlusterletStatusOutput) ToKlusterletStatusPtrOutputWithContext(ctx context.Context) KlusterletStatusPtrOutput {
	return o.ApplyT(func(v KlusterletStatus) *KlusterletStatus {
		return &v
	}).(KlusterletStatusPtrOutput)
}

// Conditions contain the different condition statuses for this Klusterlet. Valid condition types are: Applied: components have been applied in the managed cluster. Available: components in the managed cluster are available and ready to serve. Progressing: components in the managed cluster are in a transitioning state. Degraded: components in the managed cluster do not match the desired configuration and only provide degraded service.
func (o KlusterletStatusOutput) Conditions() KlusterletStatusConditionsArrayOutput {
	return o.ApplyT(func(v KlusterletStatus) []KlusterletStatusConditions { return v.Conditions }).(KlusterletStatusConditionsArrayOutput)
}

// Generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.
func (o KlusterletStatusOutput) Generations() KlusterletStatusGenerationsArrayOutput {
	return o.ApplyT(func(v KlusterletStatus) []KlusterletStatusGenerations { return v.Generations }).(KlusterletStatusGenerationsArrayOutput)
}

// ObservedGeneration is the last generation change you've dealt with
func (o KlusterletStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KlusterletStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// RelatedResources are used to track the resources that are related to this Klusterlet
func (o KlusterletStatusOutput) RelatedResources() KlusterletStatusRelatedResourcesArrayOutput {
	return o.ApplyT(func(v KlusterletStatus) []KlusterletStatusRelatedResources { return v.RelatedResources }).(KlusterletStatusRelatedResourcesArrayOutput)
}

type KlusterletStatusPtrOutput struct{ *pulumi.OutputState }

func (KlusterletStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KlusterletStatus)(nil)).Elem()
}

func (o KlusterletStatusPtrOutput) ToKlusterletStatusPtrOutput() KlusterletStatusPtrOutput {
	return o
}

func (o KlusterletStatusPtrOutput) ToKlusterletStatusPtrOutputWithContext(ctx context.Context) KlusterletStatusPtrOutput {
	return o
}

func (o KlusterletStatusPtrOutput) Elem() KlusterletStatusOutput {
	return o.ApplyT(func(v *KlusterletStatus) KlusterletStatus { return *v }).(KlusterletStatusOutput)
}

// Conditions contain the different condition statuses for this Klusterlet. Valid condition types are: Applied: components have been applied in the managed cluster. Available: components in the managed cluster are available and ready to serve. Progressing: components in the managed cluster are in a transitioning state. Degraded: components in the managed cluster do not match the desired configuration and only provide degraded service.
func (o KlusterletStatusPtrOutput) Conditions() KlusterletStatusConditionsArrayOutput {
	return o.ApplyT(func(v *KlusterletStatus) []KlusterletStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(KlusterletStatusConditionsArrayOutput)
}

// Generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.
func (o KlusterletStatusPtrOutput) Generations() KlusterletStatusGenerationsArrayOutput {
	return o.ApplyT(func(v *KlusterletStatus) []KlusterletStatusGenerations {
		if v == nil {
			return nil
		}
		return v.Generations
	}).(KlusterletStatusGenerationsArrayOutput)
}

// ObservedGeneration is the last generation change you've dealt with
func (o KlusterletStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KlusterletStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// RelatedResources are used to track the resources that are related to this Klusterlet
func (o KlusterletStatusPtrOutput) RelatedResources() KlusterletStatusRelatedResourcesArrayOutput {
	return o.ApplyT(func(v *KlusterletStatus) []KlusterletStatusRelatedResources {
		if v == nil {
			return nil
		}
		return v.RelatedResources
	}).(KlusterletStatusRelatedResourcesArrayOutput)
}

// Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: "Available", "Progressing", and "Degraded"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"`
//      // other fields }
type KlusterletStatusConditions struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime string `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition. This may be an empty string.
	Message string `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
	Reason string `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status string `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
	Type string `pulumi:"type"`
}

// KlusterletStatusConditionsInput is an input type that accepts KlusterletStatusConditionsArgs and KlusterletStatusConditionsOutput values.
// You can construct a concrete instance of `KlusterletStatusConditionsInput` via:
//
//          KlusterletStatusConditionsArgs{...}
type KlusterletStatusConditionsInput interface {
	pulumi.Input

	ToKlusterletStatusConditionsOutput() KlusterletStatusConditionsOutput
	ToKlusterletStatusConditionsOutputWithContext(context.Context) KlusterletStatusConditionsOutput
}

// Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: "Available", "Progressing", and "Degraded"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"`
//      // other fields }
type KlusterletStatusConditionsArgs struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime pulumi.StringInput `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition. This may be an empty string.
	Message pulumi.StringInput `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
	Reason pulumi.StringInput `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status pulumi.StringInput `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
	Type pulumi.StringInput `pulumi:"type"`
}

func (KlusterletStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KlusterletStatusConditions)(nil)).Elem()
}

func (i KlusterletStatusConditionsArgs) ToKlusterletStatusConditionsOutput() KlusterletStatusConditionsOutput {
	return i.ToKlusterletStatusConditionsOutputWithContext(context.Background())
}

func (i KlusterletStatusConditionsArgs) ToKlusterletStatusConditionsOutputWithContext(ctx context.Context) KlusterletStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KlusterletStatusConditionsOutput)
}

// KlusterletStatusConditionsArrayInput is an input type that accepts KlusterletStatusConditionsArray and KlusterletStatusConditionsArrayOutput values.
// You can construct a concrete instance of `KlusterletStatusConditionsArrayInput` via:
//
//          KlusterletStatusConditionsArray{ KlusterletStatusConditionsArgs{...} }
type KlusterletStatusConditionsArrayInput interface {
	pulumi.Input

	ToKlusterletStatusConditionsArrayOutput() KlusterletStatusConditionsArrayOutput
	ToKlusterletStatusConditionsArrayOutputWithContext(context.Context) KlusterletStatusConditionsArrayOutput
}

type KlusterletStatusConditionsArray []KlusterletStatusConditionsInput

func (KlusterletStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KlusterletStatusConditions)(nil)).Elem()
}

func (i KlusterletStatusConditionsArray) ToKlusterletStatusConditionsArrayOutput() KlusterletStatusConditionsArrayOutput {
	return i.ToKlusterletStatusConditionsArrayOutputWithContext(context.Background())
}

func (i KlusterletStatusConditionsArray) ToKlusterletStatusConditionsArrayOutputWithContext(ctx context.Context) KlusterletStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KlusterletStatusConditionsArrayOutput)
}

// Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: "Available", "Progressing", and "Degraded"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"`
//      // other fields }
type KlusterletStatusConditionsOutput struct{ *pulumi.OutputState }

func (KlusterletStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KlusterletStatusConditions)(nil)).Elem()
}

func (o KlusterletStatusConditionsOutput) ToKlusterletStatusConditionsOutput() KlusterletStatusConditionsOutput {
	return o
}

func (o KlusterletStatusConditionsOutput) ToKlusterletStatusConditionsOutputWithContext(ctx context.Context) KlusterletStatusConditionsOutput {
	return o
}

// lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
func (o KlusterletStatusConditionsOutput) LastTransitionTime() pulumi.StringOutput {
	return o.ApplyT(func(v KlusterletStatusConditions) string { return v.LastTransitionTime }).(pulumi.StringOutput)
}

// message is a human readable message indicating details about the transition. This may be an empty string.
func (o KlusterletStatusConditionsOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v KlusterletStatusConditions) string { return v.Message }).(pulumi.StringOutput)
}

// observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
func (o KlusterletStatusConditionsOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KlusterletStatusConditions) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
func (o KlusterletStatusConditionsOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v KlusterletStatusConditions) string { return v.Reason }).(pulumi.StringOutput)
}

// status of the condition, one of True, False, Unknown.
func (o KlusterletStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v KlusterletStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
func (o KlusterletStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KlusterletStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type KlusterletStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (KlusterletStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KlusterletStatusConditions)(nil)).Elem()
}

func (o KlusterletStatusConditionsArrayOutput) ToKlusterletStatusConditionsArrayOutput() KlusterletStatusConditionsArrayOutput {
	return o
}

func (o KlusterletStatusConditionsArrayOutput) ToKlusterletStatusConditionsArrayOutputWithContext(ctx context.Context) KlusterletStatusConditionsArrayOutput {
	return o
}

func (o KlusterletStatusConditionsArrayOutput) Index(i pulumi.IntInput) KlusterletStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KlusterletStatusConditions {
		return vs[0].([]KlusterletStatusConditions)[vs[1].(int)]
	}).(KlusterletStatusConditionsOutput)
}

// GenerationStatus keeps track of the generation for a given resource so that decisions about forced updates can be made. the definition matches the GenerationStatus defined in github.com/openshift/api/v1
type KlusterletStatusGenerations struct {
	// group is the group of the thing you're tracking
	Group *string `pulumi:"group"`
	// lastGeneration is the last generation of the thing that controller applies
	LastGeneration *int `pulumi:"lastGeneration"`
	// name is the name of the thing you're tracking
	Name *string `pulumi:"name"`
	// namespace is where the thing you're tracking is
	Namespace *string `pulumi:"namespace"`
	// resource is the resource type of the thing you're tracking
	Resource *string `pulumi:"resource"`
	// version is the version of the thing you're tracking
	Version *string `pulumi:"version"`
}

// KlusterletStatusGenerationsInput is an input type that accepts KlusterletStatusGenerationsArgs and KlusterletStatusGenerationsOutput values.
// You can construct a concrete instance of `KlusterletStatusGenerationsInput` via:
//
//          KlusterletStatusGenerationsArgs{...}
type KlusterletStatusGenerationsInput interface {
	pulumi.Input

	ToKlusterletStatusGenerationsOutput() KlusterletStatusGenerationsOutput
	ToKlusterletStatusGenerationsOutputWithContext(context.Context) KlusterletStatusGenerationsOutput
}

// GenerationStatus keeps track of the generation for a given resource so that decisions about forced updates can be made. the definition matches the GenerationStatus defined in github.com/openshift/api/v1
type KlusterletStatusGenerationsArgs struct {
	// group is the group of the thing you're tracking
	Group pulumi.StringPtrInput `pulumi:"group"`
	// lastGeneration is the last generation of the thing that controller applies
	LastGeneration pulumi.IntPtrInput `pulumi:"lastGeneration"`
	// name is the name of the thing you're tracking
	Name pulumi.StringPtrInput `pulumi:"name"`
	// namespace is where the thing you're tracking is
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// resource is the resource type of the thing you're tracking
	Resource pulumi.StringPtrInput `pulumi:"resource"`
	// version is the version of the thing you're tracking
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (KlusterletStatusGenerationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KlusterletStatusGenerations)(nil)).Elem()
}

func (i KlusterletStatusGenerationsArgs) ToKlusterletStatusGenerationsOutput() KlusterletStatusGenerationsOutput {
	return i.ToKlusterletStatusGenerationsOutputWithContext(context.Background())
}

func (i KlusterletStatusGenerationsArgs) ToKlusterletStatusGenerationsOutputWithContext(ctx context.Context) KlusterletStatusGenerationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KlusterletStatusGenerationsOutput)
}

// KlusterletStatusGenerationsArrayInput is an input type that accepts KlusterletStatusGenerationsArray and KlusterletStatusGenerationsArrayOutput values.
// You can construct a concrete instance of `KlusterletStatusGenerationsArrayInput` via:
//
//          KlusterletStatusGenerationsArray{ KlusterletStatusGenerationsArgs{...} }
type KlusterletStatusGenerationsArrayInput interface {
	pulumi.Input

	ToKlusterletStatusGenerationsArrayOutput() KlusterletStatusGenerationsArrayOutput
	ToKlusterletStatusGenerationsArrayOutputWithContext(context.Context) KlusterletStatusGenerationsArrayOutput
}

type KlusterletStatusGenerationsArray []KlusterletStatusGenerationsInput

func (KlusterletStatusGenerationsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KlusterletStatusGenerations)(nil)).Elem()
}

func (i KlusterletStatusGenerationsArray) ToKlusterletStatusGenerationsArrayOutput() KlusterletStatusGenerationsArrayOutput {
	return i.ToKlusterletStatusGenerationsArrayOutputWithContext(context.Background())
}

func (i KlusterletStatusGenerationsArray) ToKlusterletStatusGenerationsArrayOutputWithContext(ctx context.Context) KlusterletStatusGenerationsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KlusterletStatusGenerationsArrayOutput)
}

// GenerationStatus keeps track of the generation for a given resource so that decisions about forced updates can be made. the definition matches the GenerationStatus defined in github.com/openshift/api/v1
type KlusterletStatusGenerationsOutput struct{ *pulumi.OutputState }

func (KlusterletStatusGenerationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KlusterletStatusGenerations)(nil)).Elem()
}

func (o KlusterletStatusGenerationsOutput) ToKlusterletStatusGenerationsOutput() KlusterletStatusGenerationsOutput {
	return o
}

func (o KlusterletStatusGenerationsOutput) ToKlusterletStatusGenerationsOutputWithContext(ctx context.Context) KlusterletStatusGenerationsOutput {
	return o
}

// group is the group of the thing you're tracking
func (o KlusterletStatusGenerationsOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KlusterletStatusGenerations) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// lastGeneration is the last generation of the thing that controller applies
func (o KlusterletStatusGenerationsOutput) LastGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KlusterletStatusGenerations) *int { return v.LastGeneration }).(pulumi.IntPtrOutput)
}

// name is the name of the thing you're tracking
func (o KlusterletStatusGenerationsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KlusterletStatusGenerations) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// namespace is where the thing you're tracking is
func (o KlusterletStatusGenerationsOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KlusterletStatusGenerations) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// resource is the resource type of the thing you're tracking
func (o KlusterletStatusGenerationsOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KlusterletStatusGenerations) *string { return v.Resource }).(pulumi.StringPtrOutput)
}

// version is the version of the thing you're tracking
func (o KlusterletStatusGenerationsOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KlusterletStatusGenerations) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type KlusterletStatusGenerationsArrayOutput struct{ *pulumi.OutputState }

func (KlusterletStatusGenerationsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KlusterletStatusGenerations)(nil)).Elem()
}

func (o KlusterletStatusGenerationsArrayOutput) ToKlusterletStatusGenerationsArrayOutput() KlusterletStatusGenerationsArrayOutput {
	return o
}

func (o KlusterletStatusGenerationsArrayOutput) ToKlusterletStatusGenerationsArrayOutputWithContext(ctx context.Context) KlusterletStatusGenerationsArrayOutput {
	return o
}

func (o KlusterletStatusGenerationsArrayOutput) Index(i pulumi.IntInput) KlusterletStatusGenerationsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KlusterletStatusGenerations {
		return vs[0].([]KlusterletStatusGenerations)[vs[1].(int)]
	}).(KlusterletStatusGenerationsOutput)
}

// RelatedResourceMeta represents the resource that is managed by an operator
type KlusterletStatusRelatedResources struct {
	// group is the group of the thing you're tracking
	Group *string `pulumi:"group"`
	// name is the name of the thing you're tracking
	Name *string `pulumi:"name"`
	// namespace is where the thing you're tracking is
	Namespace *string `pulumi:"namespace"`
	// resource is the resource type of the thing you're tracking
	Resource *string `pulumi:"resource"`
	// version is the version of the thing you're tracking
	Version *string `pulumi:"version"`
}

// KlusterletStatusRelatedResourcesInput is an input type that accepts KlusterletStatusRelatedResourcesArgs and KlusterletStatusRelatedResourcesOutput values.
// You can construct a concrete instance of `KlusterletStatusRelatedResourcesInput` via:
//
//          KlusterletStatusRelatedResourcesArgs{...}
type KlusterletStatusRelatedResourcesInput interface {
	pulumi.Input

	ToKlusterletStatusRelatedResourcesOutput() KlusterletStatusRelatedResourcesOutput
	ToKlusterletStatusRelatedResourcesOutputWithContext(context.Context) KlusterletStatusRelatedResourcesOutput
}

// RelatedResourceMeta represents the resource that is managed by an operator
type KlusterletStatusRelatedResourcesArgs struct {
	// group is the group of the thing you're tracking
	Group pulumi.StringPtrInput `pulumi:"group"`
	// name is the name of the thing you're tracking
	Name pulumi.StringPtrInput `pulumi:"name"`
	// namespace is where the thing you're tracking is
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// resource is the resource type of the thing you're tracking
	Resource pulumi.StringPtrInput `pulumi:"resource"`
	// version is the version of the thing you're tracking
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (KlusterletStatusRelatedResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KlusterletStatusRelatedResources)(nil)).Elem()
}

func (i KlusterletStatusRelatedResourcesArgs) ToKlusterletStatusRelatedResourcesOutput() KlusterletStatusRelatedResourcesOutput {
	return i.ToKlusterletStatusRelatedResourcesOutputWithContext(context.Background())
}

func (i KlusterletStatusRelatedResourcesArgs) ToKlusterletStatusRelatedResourcesOutputWithContext(ctx context.Context) KlusterletStatusRelatedResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KlusterletStatusRelatedResourcesOutput)
}

// KlusterletStatusRelatedResourcesArrayInput is an input type that accepts KlusterletStatusRelatedResourcesArray and KlusterletStatusRelatedResourcesArrayOutput values.
// You can construct a concrete instance of `KlusterletStatusRelatedResourcesArrayInput` via:
//
//          KlusterletStatusRelatedResourcesArray{ KlusterletStatusRelatedResourcesArgs{...} }
type KlusterletStatusRelatedResourcesArrayInput interface {
	pulumi.Input

	ToKlusterletStatusRelatedResourcesArrayOutput() KlusterletStatusRelatedResourcesArrayOutput
	ToKlusterletStatusRelatedResourcesArrayOutputWithContext(context.Context) KlusterletStatusRelatedResourcesArrayOutput
}

type KlusterletStatusRelatedResourcesArray []KlusterletStatusRelatedResourcesInput

func (KlusterletStatusRelatedResourcesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KlusterletStatusRelatedResources)(nil)).Elem()
}

func (i KlusterletStatusRelatedResourcesArray) ToKlusterletStatusRelatedResourcesArrayOutput() KlusterletStatusRelatedResourcesArrayOutput {
	return i.ToKlusterletStatusRelatedResourcesArrayOutputWithContext(context.Background())
}

func (i KlusterletStatusRelatedResourcesArray) ToKlusterletStatusRelatedResourcesArrayOutputWithContext(ctx context.Context) KlusterletStatusRelatedResourcesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KlusterletStatusRelatedResourcesArrayOutput)
}

// RelatedResourceMeta represents the resource that is managed by an operator
type KlusterletStatusRelatedResourcesOutput struct{ *pulumi.OutputState }

func (KlusterletStatusRelatedResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KlusterletStatusRelatedResources)(nil)).Elem()
}

func (o KlusterletStatusRelatedResourcesOutput) ToKlusterletStatusRelatedResourcesOutput() KlusterletStatusRelatedResourcesOutput {
	return o
}

func (o KlusterletStatusRelatedResourcesOutput) ToKlusterletStatusRelatedResourcesOutputWithContext(ctx context.Context) KlusterletStatusRelatedResourcesOutput {
	return o
}

// group is the group of the thing you're tracking
func (o KlusterletStatusRelatedResourcesOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KlusterletStatusRelatedResources) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// name is the name of the thing you're tracking
func (o KlusterletStatusRelatedResourcesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KlusterletStatusRelatedResources) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// namespace is where the thing you're tracking is
func (o KlusterletStatusRelatedResourcesOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KlusterletStatusRelatedResources) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// resource is the resource type of the thing you're tracking
func (o KlusterletStatusRelatedResourcesOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KlusterletStatusRelatedResources) *string { return v.Resource }).(pulumi.StringPtrOutput)
}

// version is the version of the thing you're tracking
func (o KlusterletStatusRelatedResourcesOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KlusterletStatusRelatedResources) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type KlusterletStatusRelatedResourcesArrayOutput struct{ *pulumi.OutputState }

func (KlusterletStatusRelatedResourcesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KlusterletStatusRelatedResources)(nil)).Elem()
}

func (o KlusterletStatusRelatedResourcesArrayOutput) ToKlusterletStatusRelatedResourcesArrayOutput() KlusterletStatusRelatedResourcesArrayOutput {
	return o
}

func (o KlusterletStatusRelatedResourcesArrayOutput) ToKlusterletStatusRelatedResourcesArrayOutputWithContext(ctx context.Context) KlusterletStatusRelatedResourcesArrayOutput {
	return o
}

func (o KlusterletStatusRelatedResourcesArrayOutput) Index(i pulumi.IntInput) KlusterletStatusRelatedResourcesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KlusterletStatusRelatedResources {
		return vs[0].([]KlusterletStatusRelatedResources)[vs[1].(int)]
	}).(KlusterletStatusRelatedResourcesOutput)
}

func init() {
	pulumi.RegisterOutputType(KlusterletTypeOutput{})
	pulumi.RegisterOutputType(KlusterletMetadataOutput{})
	pulumi.RegisterOutputType(KlusterletSpecOutput{})
	pulumi.RegisterOutputType(KlusterletSpecPtrOutput{})
	pulumi.RegisterOutputType(KlusterletSpecExternalServerURLsOutput{})
	pulumi.RegisterOutputType(KlusterletSpecExternalServerURLsArrayOutput{})
	pulumi.RegisterOutputType(KlusterletStatusOutput{})
	pulumi.RegisterOutputType(KlusterletStatusPtrOutput{})
	pulumi.RegisterOutputType(KlusterletStatusConditionsOutput{})
	pulumi.RegisterOutputType(KlusterletStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(KlusterletStatusGenerationsOutput{})
	pulumi.RegisterOutputType(KlusterletStatusGenerationsArrayOutput{})
	pulumi.RegisterOutputType(KlusterletStatusRelatedResourcesOutput{})
	pulumi.RegisterOutputType(KlusterletStatusRelatedResourcesArrayOutput{})
}

# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'APIcastSpec',
    'APIcastStatus',
    'APIcastStatusConditions',
]

@pulumi.output_type
class APIcastSpec(dict):
    def __init__(__self__, *,
                 admin_portal_credentials_ref: Optional[Mapping[str, Any]] = None,
                 embedded_configuration_secret_ref: Optional[Mapping[str, Any]] = None):
        if admin_portal_credentials_ref is not None:
            pulumi.set(__self__, "admin_portal_credentials_ref", admin_portal_credentials_ref)
        if embedded_configuration_secret_ref is not None:
            pulumi.set(__self__, "embedded_configuration_secret_ref", embedded_configuration_secret_ref)

    @property
    @pulumi.getter(name="adminPortalCredentialsRef")
    def admin_portal_credentials_ref(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "admin_portal_credentials_ref")

    @property
    @pulumi.getter(name="embeddedConfigurationSecretRef")
    def embedded_configuration_secret_ref(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "embedded_configuration_secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APIcastStatus(dict):
    """
    APIcastStatus defines the observed state of APIcast
    """
    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.APIcastStatusConditions']] = None,
                 image: Optional[str] = None):
        """
        APIcastStatus defines the observed state of APIcast
        :param Sequence['APIcastStatusConditionsArgs'] conditions: Represents the latest available observations of a replica set's current state.
        :param str image: The image being used in the APIcast deployment
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.APIcastStatusConditions']]:
        """
        Represents the latest available observations of a replica set's current state.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        """
        The image being used in the APIcast deployment
        """
        return pulumi.get(self, "image")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class APIcastStatusConditions(dict):
    def __init__(__self__, *,
                 status: str,
                 type: str):
        """
        :param str status: Status of the condition, one of True, False, Unknown.
        :param str type: Type of replica set condition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the condition, one of True, False, Unknown.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of replica set condition.
        """
        return pulumi.get(self, "type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'BindingSpecArgs',
    'BindingSpecParametersArgs',
    'BindingSpecParametersValueFromArgs',
    'BindingStatusArgs',
    'ServiceSpecArgs',
    'ServiceSpecContextArgs',
    'ServiceSpecParametersArgs',
    'ServiceSpecParametersValueFromArgs',
    'ServiceStatusArgs',
    'ServiceStatusContextArgs',
    'ServiceStatusParametersArgs',
    'ServiceStatusParametersValueFromArgs',
]

@pulumi.input_type
class BindingSpecArgs:
    def __init__(__self__, *,
                 service_name: pulumi.Input[str],
                 alias: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['BindingSpecParametersArgs']]]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None,
                 service_namespace: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "service_name", service_name)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)
        if service_namespace is not None:
            pulumi.set(__self__, "service_namespace", service_namespace)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BindingSpecParametersArgs']]]]:
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BindingSpecParametersArgs']]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_name", value)

    @property
    @pulumi.getter(name="serviceNamespace")
    def service_namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_namespace")

    @service_namespace.setter
    def service_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_namespace", value)


@pulumi.input_type
class BindingSpecParametersArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 attributes: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 value: Optional[Any] = None,
                 value_from: Optional[pulumi.Input['BindingSpecParametersValueFromArgs']] = None):
        """
        :param pulumi.Input[str] name: Name representing the key.
        :param pulumi.Input[Mapping[str, Any]] attributes: A parameter may have attributes (e.g. message hub topic might have partitions)
        :param Any value: Defaults to null.
        :param pulumi.Input['BindingSpecParametersValueFromArgs'] value_from: Source for the value. Cannot be used if value is not empty.
        """
        pulumi.set(__self__, "name", name)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name representing the key.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        A parameter may have attributes (e.g. message hub topic might have partitions)
        """
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "attributes", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[Any]:
        """
        Defaults to null.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[Any]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional[pulumi.Input['BindingSpecParametersValueFromArgs']]:
        """
        Source for the value. Cannot be used if value is not empty.
        """
        return pulumi.get(self, "value_from")

    @value_from.setter
    def value_from(self, value: Optional[pulumi.Input['BindingSpecParametersValueFromArgs']]):
        pulumi.set(self, "value_from", value)


@pulumi.input_type
class BindingSpecParametersValueFromArgs:
    def __init__(__self__, *,
                 config_map_key_ref: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 secret_key_ref: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        Source for the value. Cannot be used if value is not empty.
        :param pulumi.Input[Mapping[str, Any]] config_map_key_ref: Selects a key of a ConfigMap.
        :param pulumi.Input[Mapping[str, Any]] secret_key_ref: Selects a key of a secret in the resource namespace
        """
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Selects a key of a ConfigMap.
        """
        return pulumi.get(self, "config_map_key_ref")

    @config_map_key_ref.setter
    def config_map_key_ref(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "config_map_key_ref", value)

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Selects a key of a secret in the resource namespace
        """
        return pulumi.get(self, "secret_key_ref")

    @secret_key_ref.setter
    def secret_key_ref(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "secret_key_ref", value)


@pulumi.input_type
class BindingStatusArgs:
    def __init__(__self__, *,
                 generation: Optional[pulumi.Input[int]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 key_instance_id: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        if generation is not None:
            pulumi.set(__self__, "generation", generation)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if key_instance_id is not None:
            pulumi.set(__self__, "key_instance_id", key_instance_id)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def generation(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "generation")

    @generation.setter
    def generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "generation", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="keyInstanceId")
    def key_instance_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_instance_id")

    @key_instance_id.setter
    def key_instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_instance_id", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_name", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class ServiceSpecArgs:
    def __init__(__self__, *,
                 plan: pulumi.Input[str],
                 service_class: pulumi.Input[str],
                 context: Optional[pulumi.Input['ServiceSpecContextArgs']] = None,
                 external_name: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceSpecParametersArgs']]]] = None,
                 service_class_type: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "plan", plan)
        pulumi.set(__self__, "service_class", service_class)
        if context is not None:
            pulumi.set(__self__, "context", context)
        if external_name is not None:
            pulumi.set(__self__, "external_name", external_name)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if service_class_type is not None:
            pulumi.set(__self__, "service_class_type", service_class_type)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def plan(self) -> pulumi.Input[str]:
        return pulumi.get(self, "plan")

    @plan.setter
    def plan(self, value: pulumi.Input[str]):
        pulumi.set(self, "plan", value)

    @property
    @pulumi.getter(name="serviceClass")
    def service_class(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service_class")

    @service_class.setter
    def service_class(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_class", value)

    @property
    @pulumi.getter
    def context(self) -> Optional[pulumi.Input['ServiceSpecContextArgs']]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: Optional[pulumi.Input['ServiceSpecContextArgs']]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter(name="externalName")
    def external_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_name")

    @external_name.setter
    def external_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_name", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceSpecParametersArgs']]]]:
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceSpecParametersArgs']]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="serviceClassType")
    def service_class_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_class_type")

    @service_class_type.setter
    def service_class_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_class_type", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class ServiceSpecContextArgs:
    def __init__(__self__, *,
                 org: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 resourcegroup: Optional[pulumi.Input[str]] = None,
                 resourcegroupid: Optional[pulumi.Input[str]] = None,
                 resourcelocation: Optional[pulumi.Input[str]] = None,
                 space: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        if org is not None:
            pulumi.set(__self__, "org", org)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resourcegroup is not None:
            pulumi.set(__self__, "resourcegroup", resourcegroup)
        if resourcegroupid is not None:
            pulumi.set(__self__, "resourcegroupid", resourcegroupid)
        if resourcelocation is not None:
            pulumi.set(__self__, "resourcelocation", resourcelocation)
        if space is not None:
            pulumi.set(__self__, "space", space)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def resourcegroup(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resourcegroup")

    @resourcegroup.setter
    def resourcegroup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resourcegroup", value)

    @property
    @pulumi.getter
    def resourcegroupid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resourcegroupid")

    @resourcegroupid.setter
    def resourcegroupid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resourcegroupid", value)

    @property
    @pulumi.getter
    def resourcelocation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resourcelocation")

    @resourcelocation.setter
    def resourcelocation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resourcelocation", value)

    @property
    @pulumi.getter
    def space(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "space")

    @space.setter
    def space(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "space", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class ServiceSpecParametersArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 attributes: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 value: Optional[Any] = None,
                 value_from: Optional[pulumi.Input['ServiceSpecParametersValueFromArgs']] = None):
        """
        :param pulumi.Input[str] name: Name representing the key.
        :param pulumi.Input[Mapping[str, Any]] attributes: A parameter may have attributes (e.g. message hub topic might have partitions)
        :param Any value: Defaults to null.
        :param pulumi.Input['ServiceSpecParametersValueFromArgs'] value_from: Source for the value. Cannot be used if value is not empty.
        """
        pulumi.set(__self__, "name", name)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name representing the key.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        A parameter may have attributes (e.g. message hub topic might have partitions)
        """
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "attributes", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[Any]:
        """
        Defaults to null.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[Any]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional[pulumi.Input['ServiceSpecParametersValueFromArgs']]:
        """
        Source for the value. Cannot be used if value is not empty.
        """
        return pulumi.get(self, "value_from")

    @value_from.setter
    def value_from(self, value: Optional[pulumi.Input['ServiceSpecParametersValueFromArgs']]):
        pulumi.set(self, "value_from", value)


@pulumi.input_type
class ServiceSpecParametersValueFromArgs:
    def __init__(__self__, *,
                 config_map_key_ref: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 secret_key_ref: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        Source for the value. Cannot be used if value is not empty.
        :param pulumi.Input[Mapping[str, Any]] config_map_key_ref: Selects a key of a ConfigMap.
        :param pulumi.Input[Mapping[str, Any]] secret_key_ref: Selects a key of a secret in the resource namespace
        """
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Selects a key of a ConfigMap.
        """
        return pulumi.get(self, "config_map_key_ref")

    @config_map_key_ref.setter
    def config_map_key_ref(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "config_map_key_ref", value)

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Selects a key of a secret in the resource namespace
        """
        return pulumi.get(self, "secret_key_ref")

    @secret_key_ref.setter
    def secret_key_ref(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "secret_key_ref", value)


@pulumi.input_type
class ServiceStatusArgs:
    def __init__(__self__, *,
                 plan: pulumi.Input[str],
                 service_class: pulumi.Input[str],
                 service_class_type: pulumi.Input[str],
                 context: Optional[pulumi.Input['ServiceStatusContextArgs']] = None,
                 dashboard_url: Optional[pulumi.Input[str]] = None,
                 external_name: Optional[pulumi.Input[str]] = None,
                 generation: Optional[pulumi.Input[int]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceStatusParametersArgs']]]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "plan", plan)
        pulumi.set(__self__, "service_class", service_class)
        pulumi.set(__self__, "service_class_type", service_class_type)
        if context is not None:
            pulumi.set(__self__, "context", context)
        if dashboard_url is not None:
            pulumi.set(__self__, "dashboard_url", dashboard_url)
        if external_name is not None:
            pulumi.set(__self__, "external_name", external_name)
        if generation is not None:
            pulumi.set(__self__, "generation", generation)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def plan(self) -> pulumi.Input[str]:
        return pulumi.get(self, "plan")

    @plan.setter
    def plan(self, value: pulumi.Input[str]):
        pulumi.set(self, "plan", value)

    @property
    @pulumi.getter(name="serviceClass")
    def service_class(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service_class")

    @service_class.setter
    def service_class(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_class", value)

    @property
    @pulumi.getter(name="serviceClassType")
    def service_class_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service_class_type")

    @service_class_type.setter
    def service_class_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_class_type", value)

    @property
    @pulumi.getter
    def context(self) -> Optional[pulumi.Input['ServiceStatusContextArgs']]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: Optional[pulumi.Input['ServiceStatusContextArgs']]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter(name="dashboardURL")
    def dashboard_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dashboard_url")

    @dashboard_url.setter
    def dashboard_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dashboard_url", value)

    @property
    @pulumi.getter(name="externalName")
    def external_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_name")

    @external_name.setter
    def external_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_name", value)

    @property
    @pulumi.getter
    def generation(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "generation")

    @generation.setter
    def generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "generation", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceStatusParametersArgs']]]]:
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceStatusParametersArgs']]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class ServiceStatusContextArgs:
    def __init__(__self__, *,
                 org: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 resourcegroup: Optional[pulumi.Input[str]] = None,
                 resourcegroupid: Optional[pulumi.Input[str]] = None,
                 resourcelocation: Optional[pulumi.Input[str]] = None,
                 space: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        if org is not None:
            pulumi.set(__self__, "org", org)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resourcegroup is not None:
            pulumi.set(__self__, "resourcegroup", resourcegroup)
        if resourcegroupid is not None:
            pulumi.set(__self__, "resourcegroupid", resourcegroupid)
        if resourcelocation is not None:
            pulumi.set(__self__, "resourcelocation", resourcelocation)
        if space is not None:
            pulumi.set(__self__, "space", space)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def org(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def resourcegroup(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resourcegroup")

    @resourcegroup.setter
    def resourcegroup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resourcegroup", value)

    @property
    @pulumi.getter
    def resourcegroupid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resourcegroupid")

    @resourcegroupid.setter
    def resourcegroupid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resourcegroupid", value)

    @property
    @pulumi.getter
    def resourcelocation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resourcelocation")

    @resourcelocation.setter
    def resourcelocation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resourcelocation", value)

    @property
    @pulumi.getter
    def space(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "space")

    @space.setter
    def space(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "space", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class ServiceStatusParametersArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 attributes: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 value: Optional[Any] = None,
                 value_from: Optional[pulumi.Input['ServiceStatusParametersValueFromArgs']] = None):
        """
        :param pulumi.Input[str] name: Name representing the key.
        :param pulumi.Input[Mapping[str, Any]] attributes: A parameter may have attributes (e.g. message hub topic might have partitions)
        :param Any value: Defaults to null.
        :param pulumi.Input['ServiceStatusParametersValueFromArgs'] value_from: Source for the value. Cannot be used if value is not empty.
        """
        pulumi.set(__self__, "name", name)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name representing the key.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        A parameter may have attributes (e.g. message hub topic might have partitions)
        """
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "attributes", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[Any]:
        """
        Defaults to null.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[Any]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional[pulumi.Input['ServiceStatusParametersValueFromArgs']]:
        """
        Source for the value. Cannot be used if value is not empty.
        """
        return pulumi.get(self, "value_from")

    @value_from.setter
    def value_from(self, value: Optional[pulumi.Input['ServiceStatusParametersValueFromArgs']]):
        pulumi.set(self, "value_from", value)


@pulumi.input_type
class ServiceStatusParametersValueFromArgs:
    def __init__(__self__, *,
                 config_map_key_ref: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 secret_key_ref: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        Source for the value. Cannot be used if value is not empty.
        :param pulumi.Input[Mapping[str, Any]] config_map_key_ref: Selects a key of a ConfigMap.
        :param pulumi.Input[Mapping[str, Any]] secret_key_ref: Selects a key of a secret in the resource namespace
        """
        if config_map_key_ref is not None:
            pulumi.set(__self__, "config_map_key_ref", config_map_key_ref)
        if secret_key_ref is not None:
            pulumi.set(__self__, "secret_key_ref", secret_key_ref)

    @property
    @pulumi.getter(name="configMapKeyRef")
    def config_map_key_ref(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Selects a key of a ConfigMap.
        """
        return pulumi.get(self, "config_map_key_ref")

    @config_map_key_ref.setter
    def config_map_key_ref(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "config_map_key_ref", value)

    @property
    @pulumi.getter(name="secretKeyRef")
    def secret_key_ref(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Selects a key of a secret in the resource namespace
        """
        return pulumi.get(self, "secret_key_ref")

    @secret_key_ref.setter
    def secret_key_ref(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "secret_key_ref", value)



// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import {ObjectMeta} from "../meta/v1";

export namespace ibmcloud {
    export namespace v1 {
        /**
         * BindingSpec defines the desired state of Binding
         */
        export interface BindingSpec {
            /**
             * Alias is the name for the credentials to be aliased
             */
            alias?: string;
            /**
             * Parameters pass configuration to the service during creation
             */
            parameters?: outputs.ibmcloud.v1.BindingSpecParameters[];
            /**
             * Role is the role for the credentials
             */
            role?: string;
            /**
             * SecretName is the name of the secret where credentials will be stored
             */
            secretName?: string;
            /**
             * ServiceClass is the name of the service resource to bind
             */
            serviceName: string;
            /**
             * ServiceNamespace is the namespace of the service resource to bind
             */
            serviceNamespace?: string;
        }

        /**
         * Param represents a key-value pair
         */
        export interface BindingSpecParameters {
            /**
             * A parameter may have attributes (e.g. message hub topic might have partitions)
             */
            attributes?: {[key: string]: {[key: string]: any}};
            /**
             * Name representing the key.
             */
            name: string;
            /**
             * Defaults to null.
             */
            value?: any;
            /**
             * Source for the value. Cannot be used if value is not empty.
             */
            valueFrom?: outputs.ibmcloud.v1.BindingSpecParametersValueFrom;
        }

        /**
         * Source for the value. Cannot be used if value is not empty.
         */
        export interface BindingSpecParametersValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: outputs.ibmcloud.v1.BindingSpecParametersValueFromConfigMapKeyRef;
            /**
             * Selects a key of a secret in the resource namespace
             */
            secretKeyRef?: outputs.ibmcloud.v1.BindingSpecParametersValueFromSecretKeyRef;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface BindingSpecParametersValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Selects a key of a secret in the resource namespace
         */
        export interface BindingSpecParametersValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * BindingStatus defines the observed state of Binding
         */
        export interface BindingStatus {
            generation?: number;
            /**
             * InstanceID is the instance ID for the service
             */
            instanceId?: string;
            /**
             * KeyInstanceID is the key instance ID for the credentials
             */
            keyInstanceId?: string;
            /**
             * Message is a detailed message on current status
             */
            message?: string;
            /**
             * SecretName is the name of the generated secret with service credentials
             */
            secretName?: string;
            /**
             * State is a short name for the current status
             */
            state?: string;
        }

        /**
         * ServiceSpec defines the desired state of Service
         */
        export interface ServiceSpec {
            /**
             * ResourceContext defines the CloudFoundry context and resource group
             */
            context?: outputs.ibmcloud.v1.ServiceSpecContext;
            /**
             * ExternalName is the name for the service as it appears on IBM Cloud
             */
            externalName?: string;
            /**
             * Parameters pass configuration to the service during creation
             */
            parameters?: outputs.ibmcloud.v1.ServiceSpecParameters[];
            /**
             * Plan for the service from the IBM Cloud Catalog
             */
            plan: string;
            /**
             * ServiceClass is the name of the service from the IBM Cloud Catalog
             */
            serviceClass: string;
            /**
             * ServiceClassType is set to CF if the service is CloundFoundry
             */
            serviceClassType?: string;
            tags?: string[];
        }

        /**
         * ResourceContext defines the CloudFoundry context and resource group
         */
        export interface ServiceSpecContext {
            org?: string;
            region?: string;
            resourcegroupid?: string;
            resourcelocation?: string;
            space?: string;
            user?: string;
        }

        /**
         * Param represents a key-value pair
         */
        export interface ServiceSpecParameters {
            /**
             * A parameter may have attributes (e.g. message hub topic might have partitions)
             */
            attributes?: {[key: string]: {[key: string]: any}};
            /**
             * Name representing the key.
             */
            name: string;
            /**
             * Defaults to null.
             */
            value?: any;
            /**
             * Source for the value. Cannot be used if value is not empty.
             */
            valueFrom?: outputs.ibmcloud.v1.ServiceSpecParametersValueFrom;
        }

        /**
         * Source for the value. Cannot be used if value is not empty.
         */
        export interface ServiceSpecParametersValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: outputs.ibmcloud.v1.ServiceSpecParametersValueFromConfigMapKeyRef;
            /**
             * Selects a key of a secret in the resource namespace
             */
            secretKeyRef?: outputs.ibmcloud.v1.ServiceSpecParametersValueFromSecretKeyRef;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface ServiceSpecParametersValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Selects a key of a secret in the resource namespace
         */
        export interface ServiceSpecParametersValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * ServiceStatus defines the observed state of Service
         */
        export interface ServiceStatus {
            /**
             * ResourceContext defines the CloudFoundry context and resource group
             */
            context?: outputs.ibmcloud.v1.ServiceStatusContext;
            /**
             * DashboardURL is the dashboard URL for the service
             */
            dashboardURL?: string;
            /**
             * ExternalName is the name for the service as it appears on IBM Cloud
             */
            externalName?: string;
            generation?: number;
            /**
             * InstanceID is the instance ID for the service
             */
            instanceId?: string;
            /**
             * Message is a detailed message on current status
             */
            message?: string;
            /**
             * Parameters pass configuration to the service during creation
             */
            parameters?: outputs.ibmcloud.v1.ServiceStatusParameters[];
            /**
             * Plan for the service from the IBM Cloud Catalog
             */
            plan: string;
            /**
             * ServiceClass is the name of the service from the IBM Cloud Catalog
             */
            serviceClass: string;
            /**
             * ServiceClassType is set to CF if the service is CloundFoundry
             */
            serviceClassType: string;
            /**
             * State is a short name for the current status
             */
            state?: string;
            tags?: string[];
        }

        /**
         * ResourceContext defines the CloudFoundry context and resource group
         */
        export interface ServiceStatusContext {
            org?: string;
            region?: string;
            resourcegroupid?: string;
            resourcelocation?: string;
            space?: string;
            user?: string;
        }

        /**
         * Param represents a key-value pair
         */
        export interface ServiceStatusParameters {
            /**
             * A parameter may have attributes (e.g. message hub topic might have partitions)
             */
            attributes?: {[key: string]: {[key: string]: any}};
            /**
             * Name representing the key.
             */
            name: string;
            /**
             * Defaults to null.
             */
            value?: any;
            /**
             * Source for the value. Cannot be used if value is not empty.
             */
            valueFrom?: outputs.ibmcloud.v1.ServiceStatusParametersValueFrom;
        }

        /**
         * Source for the value. Cannot be used if value is not empty.
         */
        export interface ServiceStatusParametersValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: outputs.ibmcloud.v1.ServiceStatusParametersValueFromConfigMapKeyRef;
            /**
             * Selects a key of a secret in the resource namespace
             */
            secretKeyRef?: outputs.ibmcloud.v1.ServiceStatusParametersValueFromSecretKeyRef;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface ServiceStatusParametersValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Selects a key of a secret in the resource namespace
         */
        export interface ServiceStatusParametersValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }
    }

    export namespace v1alpha1 {
        /**
         * BindingSpec defines the desired state of Binding
         */
        export interface BindingSpec {
            alias?: string;
            parameters?: outputs.ibmcloud.v1alpha1.BindingSpecParameters[];
            role?: string;
            secretName?: string;
            serviceName: string;
            serviceNamespace?: string;
        }

        /**
         * Param represents a key-value pair
         */
        export interface BindingSpecParameters {
            /**
             * A parameter may have attributes (e.g. message hub topic might have partitions)
             */
            attributes?: {[key: string]: {[key: string]: any}};
            /**
             * Name representing the key.
             */
            name: string;
            /**
             * Defaults to null.
             */
            value?: any;
            /**
             * Source for the value. Cannot be used if value is not empty.
             */
            valueFrom?: outputs.ibmcloud.v1alpha1.BindingSpecParametersValueFrom;
        }

        /**
         * Source for the value. Cannot be used if value is not empty.
         */
        export interface BindingSpecParametersValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: outputs.ibmcloud.v1alpha1.BindingSpecParametersValueFromConfigMapKeyRef;
            /**
             * Selects a key of a secret in the resource namespace
             */
            secretKeyRef?: outputs.ibmcloud.v1alpha1.BindingSpecParametersValueFromSecretKeyRef;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface BindingSpecParametersValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Selects a key of a secret in the resource namespace
         */
        export interface BindingSpecParametersValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * BindingStatus defines the observed state of Binding
         */
        export interface BindingStatus {
            generation?: number;
            instanceId?: string;
            keyInstanceId?: string;
            message?: string;
            secretName?: string;
            state?: string;
        }

        /**
         * ServiceSpec defines the desired state of Service
         */
        export interface ServiceSpec {
            /**
             * ResourceContext defines the CloudFoundry context and resource group
             */
            context?: outputs.ibmcloud.v1alpha1.ServiceSpecContext;
            externalName?: string;
            parameters?: outputs.ibmcloud.v1alpha1.ServiceSpecParameters[];
            plan: string;
            serviceClass: string;
            serviceClassType?: string;
            tags?: string[];
        }

        /**
         * ResourceContext defines the CloudFoundry context and resource group
         */
        export interface ServiceSpecContext {
            org?: string;
            region?: string;
            resourcegroup?: string;
            resourcegroupid?: string;
            resourcelocation?: string;
            space?: string;
            user?: string;
        }

        /**
         * Param represents a key-value pair
         */
        export interface ServiceSpecParameters {
            /**
             * A parameter may have attributes (e.g. message hub topic might have partitions)
             */
            attributes?: {[key: string]: {[key: string]: any}};
            /**
             * Name representing the key.
             */
            name: string;
            /**
             * Defaults to null.
             */
            value?: any;
            /**
             * Source for the value. Cannot be used if value is not empty.
             */
            valueFrom?: outputs.ibmcloud.v1alpha1.ServiceSpecParametersValueFrom;
        }

        /**
         * Source for the value. Cannot be used if value is not empty.
         */
        export interface ServiceSpecParametersValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: outputs.ibmcloud.v1alpha1.ServiceSpecParametersValueFromConfigMapKeyRef;
            /**
             * Selects a key of a secret in the resource namespace
             */
            secretKeyRef?: outputs.ibmcloud.v1alpha1.ServiceSpecParametersValueFromSecretKeyRef;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface ServiceSpecParametersValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Selects a key of a secret in the resource namespace
         */
        export interface ServiceSpecParametersValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * ServiceStatus defines the observed state of Service
         */
        export interface ServiceStatus {
            /**
             * ResourceContext defines the CloudFoundry context and resource group
             */
            context?: outputs.ibmcloud.v1alpha1.ServiceStatusContext;
            dashboardURL?: string;
            externalName?: string;
            generation?: number;
            instanceId?: string;
            message?: string;
            parameters?: outputs.ibmcloud.v1alpha1.ServiceStatusParameters[];
            plan: string;
            serviceClass: string;
            serviceClassType: string;
            state?: string;
            tags?: string[];
        }

        /**
         * ResourceContext defines the CloudFoundry context and resource group
         */
        export interface ServiceStatusContext {
            org?: string;
            region?: string;
            resourcegroup?: string;
            resourcegroupid?: string;
            resourcelocation?: string;
            space?: string;
            user?: string;
        }

        /**
         * Param represents a key-value pair
         */
        export interface ServiceStatusParameters {
            /**
             * A parameter may have attributes (e.g. message hub topic might have partitions)
             */
            attributes?: {[key: string]: {[key: string]: any}};
            /**
             * Name representing the key.
             */
            name: string;
            /**
             * Defaults to null.
             */
            value?: any;
            /**
             * Source for the value. Cannot be used if value is not empty.
             */
            valueFrom?: outputs.ibmcloud.v1alpha1.ServiceStatusParametersValueFrom;
        }

        /**
         * Source for the value. Cannot be used if value is not empty.
         */
        export interface ServiceStatusParametersValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: outputs.ibmcloud.v1alpha1.ServiceStatusParametersValueFromConfigMapKeyRef;
            /**
             * Selects a key of a secret in the resource namespace
             */
            secretKeyRef?: outputs.ibmcloud.v1alpha1.ServiceStatusParametersValueFromSecretKeyRef;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface ServiceStatusParametersValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Selects a key of a secret in the resource namespace
         */
        export interface ServiceStatusParametersValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }
    }

    export namespace v1beta1 {
        /**
         * BindingSpec defines the desired state of Binding
         */
        export interface BindingSpec {
            /**
             * Alias is the name for the credentials to be aliased
             */
            alias?: string;
            /**
             * Parameters pass configuration to the service during creation
             */
            parameters?: outputs.ibmcloud.v1beta1.BindingSpecParameters[];
            /**
             * Role is the role for the credentials
             */
            role?: string;
            /**
             * SecretName is the name of the secret where credentials will be stored
             */
            secretName?: string;
            /**
             * ServiceClass is the name of the service resource to bind
             */
            serviceName: string;
            /**
             * ServiceNamespace is the namespace of the service resource to bind
             */
            serviceNamespace?: string;
        }

        /**
         * Param represents a key-value pair
         */
        export interface BindingSpecParameters {
            /**
             * A parameter may have attributes (e.g. message hub topic might have partitions)
             */
            attributes?: {[key: string]: {[key: string]: any}};
            /**
             * Name representing the key.
             */
            name: string;
            /**
             * Defaults to null.
             */
            value?: any;
            /**
             * Source for the value. Cannot be used if value is not empty.
             */
            valueFrom?: outputs.ibmcloud.v1beta1.BindingSpecParametersValueFrom;
        }

        /**
         * Source for the value. Cannot be used if value is not empty.
         */
        export interface BindingSpecParametersValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: outputs.ibmcloud.v1beta1.BindingSpecParametersValueFromConfigMapKeyRef;
            /**
             * Selects a key of a secret in the resource namespace
             */
            secretKeyRef?: outputs.ibmcloud.v1beta1.BindingSpecParametersValueFromSecretKeyRef;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface BindingSpecParametersValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Selects a key of a secret in the resource namespace
         */
        export interface BindingSpecParametersValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * BindingStatus defines the observed state of Binding
         */
        export interface BindingStatus {
            generation?: number;
            /**
             * InstanceID is the instance ID for the service
             */
            instanceId?: string;
            /**
             * KeyInstanceID is the key instance ID for the credentials
             */
            keyInstanceId?: string;
            /**
             * Message is a detailed message on current status
             */
            message?: string;
            /**
             * SecretName is the name of the generated secret with service credentials
             */
            secretName?: string;
            /**
             * State is a short name for the current status
             */
            state?: string;
        }

        /**
         * ServiceSpec defines the desired state of Service
         */
        export interface ServiceSpec {
            /**
             * ResourceContext defines the CloudFoundry context and resource group
             */
            context?: outputs.ibmcloud.v1beta1.ServiceSpecContext;
            /**
             * ExternalName is the name for the service as it appears on IBM Cloud
             */
            externalName?: string;
            /**
             * Parameters pass configuration to the service during creation
             */
            parameters?: outputs.ibmcloud.v1beta1.ServiceSpecParameters[];
            /**
             * Plan for the service from the IBM Cloud Catalog
             */
            plan: string;
            /**
             * ServiceClass is the name of the service from the IBM Cloud Catalog
             */
            serviceClass: string;
            /**
             * ServiceClassType is set to CF if the service is CloundFoundry
             */
            serviceClassType?: string;
            tags?: string[];
        }

        /**
         * ResourceContext defines the CloudFoundry context and resource group
         */
        export interface ServiceSpecContext {
            org?: string;
            region?: string;
            resourcegroupid?: string;
            resourcelocation?: string;
            space?: string;
            user?: string;
        }

        /**
         * Param represents a key-value pair
         */
        export interface ServiceSpecParameters {
            /**
             * A parameter may have attributes (e.g. message hub topic might have partitions)
             */
            attributes?: {[key: string]: {[key: string]: any}};
            /**
             * Name representing the key.
             */
            name: string;
            /**
             * Defaults to null.
             */
            value?: any;
            /**
             * Source for the value. Cannot be used if value is not empty.
             */
            valueFrom?: outputs.ibmcloud.v1beta1.ServiceSpecParametersValueFrom;
        }

        /**
         * Source for the value. Cannot be used if value is not empty.
         */
        export interface ServiceSpecParametersValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: outputs.ibmcloud.v1beta1.ServiceSpecParametersValueFromConfigMapKeyRef;
            /**
             * Selects a key of a secret in the resource namespace
             */
            secretKeyRef?: outputs.ibmcloud.v1beta1.ServiceSpecParametersValueFromSecretKeyRef;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface ServiceSpecParametersValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Selects a key of a secret in the resource namespace
         */
        export interface ServiceSpecParametersValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * ServiceStatus defines the observed state of Service
         */
        export interface ServiceStatus {
            /**
             * ResourceContext defines the CloudFoundry context and resource group
             */
            context?: outputs.ibmcloud.v1beta1.ServiceStatusContext;
            /**
             * DashboardURL is the dashboard URL for the service
             */
            dashboardURL?: string;
            /**
             * ExternalName is the name for the service as it appears on IBM Cloud
             */
            externalName?: string;
            generation?: number;
            /**
             * InstanceID is the instance ID for the service
             */
            instanceId?: string;
            /**
             * Message is a detailed message on current status
             */
            message?: string;
            /**
             * Parameters pass configuration to the service during creation
             */
            parameters?: outputs.ibmcloud.v1beta1.ServiceStatusParameters[];
            /**
             * Plan for the service from the IBM Cloud Catalog
             */
            plan: string;
            /**
             * ServiceClass is the name of the service from the IBM Cloud Catalog
             */
            serviceClass: string;
            /**
             * ServiceClassType is set to CF if the service is CloundFoundry
             */
            serviceClassType: string;
            /**
             * State is a short name for the current status
             */
            state?: string;
            tags?: string[];
        }

        /**
         * ResourceContext defines the CloudFoundry context and resource group
         */
        export interface ServiceStatusContext {
            org?: string;
            region?: string;
            resourcegroupid?: string;
            resourcelocation?: string;
            space?: string;
            user?: string;
        }

        /**
         * Param represents a key-value pair
         */
        export interface ServiceStatusParameters {
            /**
             * A parameter may have attributes (e.g. message hub topic might have partitions)
             */
            attributes?: {[key: string]: {[key: string]: any}};
            /**
             * Name representing the key.
             */
            name: string;
            /**
             * Defaults to null.
             */
            value?: any;
            /**
             * Source for the value. Cannot be used if value is not empty.
             */
            valueFrom?: outputs.ibmcloud.v1beta1.ServiceStatusParametersValueFrom;
        }

        /**
         * Source for the value. Cannot be used if value is not empty.
         */
        export interface ServiceStatusParametersValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: outputs.ibmcloud.v1beta1.ServiceStatusParametersValueFromConfigMapKeyRef;
            /**
             * Selects a key of a secret in the resource namespace
             */
            secretKeyRef?: outputs.ibmcloud.v1beta1.ServiceStatusParametersValueFromSecretKeyRef;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface ServiceStatusParametersValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: boolean;
        }

        /**
         * Selects a key of a secret in the resource namespace
         */
        export interface ServiceStatusParametersValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: boolean;
        }
    }
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type GrafanaType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	Spec       interface{}        `pulumi:"spec"`
}

// GrafanaTypeInput is an input type that accepts GrafanaTypeArgs and GrafanaTypeOutput values.
// You can construct a concrete instance of `GrafanaTypeInput` via:
//
//          GrafanaTypeArgs{...}
type GrafanaTypeInput interface {
	pulumi.Input

	ToGrafanaTypeOutput() GrafanaTypeOutput
	ToGrafanaTypeOutputWithContext(context.Context) GrafanaTypeOutput
}

type GrafanaTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Spec       pulumi.Input              `pulumi:"spec"`
}

func (GrafanaTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafanaType)(nil)).Elem()
}

func (i GrafanaTypeArgs) ToGrafanaTypeOutput() GrafanaTypeOutput {
	return i.ToGrafanaTypeOutputWithContext(context.Background())
}

func (i GrafanaTypeArgs) ToGrafanaTypeOutputWithContext(ctx context.Context) GrafanaTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafanaTypeOutput)
}

type GrafanaTypeOutput struct{ *pulumi.OutputState }

func (GrafanaTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafanaType)(nil)).Elem()
}

func (o GrafanaTypeOutput) ToGrafanaTypeOutput() GrafanaTypeOutput {
	return o
}

func (o GrafanaTypeOutput) ToGrafanaTypeOutputWithContext(ctx context.Context) GrafanaTypeOutput {
	return o
}

func (o GrafanaTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GrafanaType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o GrafanaTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GrafanaType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o GrafanaTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v GrafanaType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o GrafanaTypeOutput) Spec() pulumi.AnyOutput {
	return o.ApplyT(func(v GrafanaType) interface{} { return v.Spec }).(pulumi.AnyOutput)
}

type GrafanaDashboardType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	Spec       interface{}        `pulumi:"spec"`
}

// GrafanaDashboardTypeInput is an input type that accepts GrafanaDashboardTypeArgs and GrafanaDashboardTypeOutput values.
// You can construct a concrete instance of `GrafanaDashboardTypeInput` via:
//
//          GrafanaDashboardTypeArgs{...}
type GrafanaDashboardTypeInput interface {
	pulumi.Input

	ToGrafanaDashboardTypeOutput() GrafanaDashboardTypeOutput
	ToGrafanaDashboardTypeOutputWithContext(context.Context) GrafanaDashboardTypeOutput
}

type GrafanaDashboardTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Spec       pulumi.Input              `pulumi:"spec"`
}

func (GrafanaDashboardTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafanaDashboardType)(nil)).Elem()
}

func (i GrafanaDashboardTypeArgs) ToGrafanaDashboardTypeOutput() GrafanaDashboardTypeOutput {
	return i.ToGrafanaDashboardTypeOutputWithContext(context.Background())
}

func (i GrafanaDashboardTypeArgs) ToGrafanaDashboardTypeOutputWithContext(ctx context.Context) GrafanaDashboardTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafanaDashboardTypeOutput)
}

type GrafanaDashboardTypeOutput struct{ *pulumi.OutputState }

func (GrafanaDashboardTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafanaDashboardType)(nil)).Elem()
}

func (o GrafanaDashboardTypeOutput) ToGrafanaDashboardTypeOutput() GrafanaDashboardTypeOutput {
	return o
}

func (o GrafanaDashboardTypeOutput) ToGrafanaDashboardTypeOutputWithContext(ctx context.Context) GrafanaDashboardTypeOutput {
	return o
}

func (o GrafanaDashboardTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GrafanaDashboardType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o GrafanaDashboardTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GrafanaDashboardType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o GrafanaDashboardTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v GrafanaDashboardType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o GrafanaDashboardTypeOutput) Spec() pulumi.AnyOutput {
	return o.ApplyT(func(v GrafanaDashboardType) interface{} { return v.Spec }).(pulumi.AnyOutput)
}

type GrafanaDataSourceType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	Spec       interface{}        `pulumi:"spec"`
}

// GrafanaDataSourceTypeInput is an input type that accepts GrafanaDataSourceTypeArgs and GrafanaDataSourceTypeOutput values.
// You can construct a concrete instance of `GrafanaDataSourceTypeInput` via:
//
//          GrafanaDataSourceTypeArgs{...}
type GrafanaDataSourceTypeInput interface {
	pulumi.Input

	ToGrafanaDataSourceTypeOutput() GrafanaDataSourceTypeOutput
	ToGrafanaDataSourceTypeOutputWithContext(context.Context) GrafanaDataSourceTypeOutput
}

type GrafanaDataSourceTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Spec       pulumi.Input              `pulumi:"spec"`
}

func (GrafanaDataSourceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafanaDataSourceType)(nil)).Elem()
}

func (i GrafanaDataSourceTypeArgs) ToGrafanaDataSourceTypeOutput() GrafanaDataSourceTypeOutput {
	return i.ToGrafanaDataSourceTypeOutputWithContext(context.Background())
}

func (i GrafanaDataSourceTypeArgs) ToGrafanaDataSourceTypeOutputWithContext(ctx context.Context) GrafanaDataSourceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafanaDataSourceTypeOutput)
}

type GrafanaDataSourceTypeOutput struct{ *pulumi.OutputState }

func (GrafanaDataSourceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafanaDataSourceType)(nil)).Elem()
}

func (o GrafanaDataSourceTypeOutput) ToGrafanaDataSourceTypeOutput() GrafanaDataSourceTypeOutput {
	return o
}

func (o GrafanaDataSourceTypeOutput) ToGrafanaDataSourceTypeOutputWithContext(ctx context.Context) GrafanaDataSourceTypeOutput {
	return o
}

func (o GrafanaDataSourceTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GrafanaDataSourceType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o GrafanaDataSourceTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GrafanaDataSourceType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o GrafanaDataSourceTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v GrafanaDataSourceType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o GrafanaDataSourceTypeOutput) Spec() pulumi.AnyOutput {
	return o.ApplyT(func(v GrafanaDataSourceType) interface{} { return v.Spec }).(pulumi.AnyOutput)
}

type GrafanaDataSourceMetadata struct {
}

// GrafanaDataSourceMetadataInput is an input type that accepts GrafanaDataSourceMetadataArgs and GrafanaDataSourceMetadataOutput values.
// You can construct a concrete instance of `GrafanaDataSourceMetadataInput` via:
//
//          GrafanaDataSourceMetadataArgs{...}
type GrafanaDataSourceMetadataInput interface {
	pulumi.Input

	ToGrafanaDataSourceMetadataOutput() GrafanaDataSourceMetadataOutput
	ToGrafanaDataSourceMetadataOutputWithContext(context.Context) GrafanaDataSourceMetadataOutput
}

type GrafanaDataSourceMetadataArgs struct {
}

func (GrafanaDataSourceMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafanaDataSourceMetadata)(nil)).Elem()
}

func (i GrafanaDataSourceMetadataArgs) ToGrafanaDataSourceMetadataOutput() GrafanaDataSourceMetadataOutput {
	return i.ToGrafanaDataSourceMetadataOutputWithContext(context.Background())
}

func (i GrafanaDataSourceMetadataArgs) ToGrafanaDataSourceMetadataOutputWithContext(ctx context.Context) GrafanaDataSourceMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafanaDataSourceMetadataOutput)
}

type GrafanaDataSourceMetadataOutput struct{ *pulumi.OutputState }

func (GrafanaDataSourceMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrafanaDataSourceMetadata)(nil)).Elem()
}

func (o GrafanaDataSourceMetadataOutput) ToGrafanaDataSourceMetadataOutput() GrafanaDataSourceMetadataOutput {
	return o
}

func (o GrafanaDataSourceMetadataOutput) ToGrafanaDataSourceMetadataOutputWithContext(ctx context.Context) GrafanaDataSourceMetadataOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(GrafanaTypeOutput{})
	pulumi.RegisterOutputType(GrafanaDashboardTypeOutput{})
	pulumi.RegisterOutputType(GrafanaDataSourceTypeOutput{})
	pulumi.RegisterOutputType(GrafanaDataSourceMetadataOutput{})
}

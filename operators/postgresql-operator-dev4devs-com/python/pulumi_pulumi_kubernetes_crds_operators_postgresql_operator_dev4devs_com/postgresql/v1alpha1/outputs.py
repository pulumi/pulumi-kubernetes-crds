# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'BackupSpec',
    'BackupStatus',
    'DatabaseSpec',
    'DatabaseStatus',
]

@pulumi.output_type
class BackupSpec(dict):
    def __init__(__self__, *,
                 aws_access_key_id: Optional[str] = None,
                 aws_s3_bucket_name: Optional[str] = None,
                 aws_secret_access_key: Optional[str] = None,
                 aws_secret_name: Optional[str] = None,
                 aws_secret_namespace: Optional[str] = None,
                 database_cr_name: Optional[str] = None,
                 database_version: Optional[str] = None,
                 encrypt_key_secret_name: Optional[str] = None,
                 encrypt_key_secret_namespace: Optional[str] = None,
                 gpg_email: Optional[str] = None,
                 gpg_public_key: Optional[str] = None,
                 gpg_trust_model: Optional[str] = None,
                 image: Optional[str] = None,
                 product_name: Optional[str] = None,
                 schedule: Optional[str] = None):
        """
        :param str aws_access_key_id: Key ID of AWS S3 storage. Default Value: nil Required to create the Secret with the data to allow send the backup files to AWS S3 storage.
        :param str aws_s3_bucket_name: Name of AWS S3 storage. Default Value: nil Required to create the Secret with the AWS data to allow send the backup files to AWS S3 storage. 
        :param str aws_secret_access_key: Secret/Token of AWS S3 storage. Default Value: nil Required to create the Secret with the data to allow send the backup files to AWS S3 storage.
        :param str aws_secret_name: Name of the secret with the AWS data credentials pre-existing in the cluster Default Value: nil See here the template: https://github.com/integr8ly/backup-container-image/blob/master/templates/openshift/sample-config/s3-secret.yaml 
        :param str aws_secret_namespace: Namespace of the secret with the AWS data credentials pre-existing in the cluster Default Value: nil NOTE: If the namespace be not informed then the operator will try to find it in the same namespace where it is applied 
        :param str database_cr_name: Name of the Database CR applied which this backup will work with Default Value: database
        :param str database_version: Database version. (E.g 9.6). Default Value: <9.6> IMPORTANT: Just the first 2 digits should be used.
        :param str encrypt_key_secret_name: Name of the secret with the Encrypt data pre-existing in the cluster Default Value: nil See here the template: https://github.com/integr8ly/backup-container-image/blob/master/templates/openshift/sample-config/gpg-secret.yaml
        :param str encrypt_key_secret_namespace: Namespace of the secret with the Encrypt data pre-existing in the cluster Default Value: nil NOTE: If the namespace be not informed then the operator will try to find it in the same namespace where it is applied
        :param str gpg_email: GPG email to create the EncryptionKeySecret with this data Default Value: nil See here how to create this key : https://help.github.com/en/articles/generating-a-new-gpg-key
        :param str gpg_public_key: GPG public key to create the EncryptionKeySecret with this data Default Value: nil See here how to create this key : https://help.github.com/en/articles/generating-a-new-gpg-key
        :param str gpg_trust_model: GPG trust model to create the EncryptionKeySecret with this data. the default value is true when it is empty. Default Value: nil See here how to create this key : https://help.github.com/en/articles/generating-a-new-gpg-key
        :param str image: Image:tag used to do the backup. Default Value: <quay.io/integreatly/backup-container:1.0.8> More Info: https://github.com/integr8ly/backup-container-image
        :param str product_name: Used to create the directory where the files will be stored Default Value: <postgresql> 
        :param str schedule: Schedule period for the CronJob. Default Value: <0 0 * * *> daily at 00:00
        """
        if aws_access_key_id is not None:
            pulumi.set(__self__, "aws_access_key_id", aws_access_key_id)
        if aws_s3_bucket_name is not None:
            pulumi.set(__self__, "aws_s3_bucket_name", aws_s3_bucket_name)
        if aws_secret_access_key is not None:
            pulumi.set(__self__, "aws_secret_access_key", aws_secret_access_key)
        if aws_secret_name is not None:
            pulumi.set(__self__, "aws_secret_name", aws_secret_name)
        if aws_secret_namespace is not None:
            pulumi.set(__self__, "aws_secret_namespace", aws_secret_namespace)
        if database_cr_name is not None:
            pulumi.set(__self__, "database_cr_name", database_cr_name)
        if database_version is not None:
            pulumi.set(__self__, "database_version", database_version)
        if encrypt_key_secret_name is not None:
            pulumi.set(__self__, "encrypt_key_secret_name", encrypt_key_secret_name)
        if encrypt_key_secret_namespace is not None:
            pulumi.set(__self__, "encrypt_key_secret_namespace", encrypt_key_secret_namespace)
        if gpg_email is not None:
            pulumi.set(__self__, "gpg_email", gpg_email)
        if gpg_public_key is not None:
            pulumi.set(__self__, "gpg_public_key", gpg_public_key)
        if gpg_trust_model is not None:
            pulumi.set(__self__, "gpg_trust_model", gpg_trust_model)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if product_name is not None:
            pulumi.set(__self__, "product_name", product_name)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)

    @property
    @pulumi.getter(name="awsAccessKeyId")
    def aws_access_key_id(self) -> Optional[str]:
        """
        Key ID of AWS S3 storage. Default Value: nil Required to create the Secret with the data to allow send the backup files to AWS S3 storage.
        """
        return pulumi.get(self, "aws_access_key_id")

    @property
    @pulumi.getter(name="awsS3BucketName")
    def aws_s3_bucket_name(self) -> Optional[str]:
        """
        Name of AWS S3 storage. Default Value: nil Required to create the Secret with the AWS data to allow send the backup files to AWS S3 storage. 
        """
        return pulumi.get(self, "aws_s3_bucket_name")

    @property
    @pulumi.getter(name="awsSecretAccessKey")
    def aws_secret_access_key(self) -> Optional[str]:
        """
        Secret/Token of AWS S3 storage. Default Value: nil Required to create the Secret with the data to allow send the backup files to AWS S3 storage.
        """
        return pulumi.get(self, "aws_secret_access_key")

    @property
    @pulumi.getter(name="awsSecretName")
    def aws_secret_name(self) -> Optional[str]:
        """
        Name of the secret with the AWS data credentials pre-existing in the cluster Default Value: nil See here the template: https://github.com/integr8ly/backup-container-image/blob/master/templates/openshift/sample-config/s3-secret.yaml 
        """
        return pulumi.get(self, "aws_secret_name")

    @property
    @pulumi.getter(name="awsSecretNamespace")
    def aws_secret_namespace(self) -> Optional[str]:
        """
        Namespace of the secret with the AWS data credentials pre-existing in the cluster Default Value: nil NOTE: If the namespace be not informed then the operator will try to find it in the same namespace where it is applied 
        """
        return pulumi.get(self, "aws_secret_namespace")

    @property
    @pulumi.getter(name="databaseCRName")
    def database_cr_name(self) -> Optional[str]:
        """
        Name of the Database CR applied which this backup will work with Default Value: database
        """
        return pulumi.get(self, "database_cr_name")

    @property
    @pulumi.getter(name="databaseVersion")
    def database_version(self) -> Optional[str]:
        """
        Database version. (E.g 9.6). Default Value: <9.6> IMPORTANT: Just the first 2 digits should be used.
        """
        return pulumi.get(self, "database_version")

    @property
    @pulumi.getter(name="encryptKeySecretName")
    def encrypt_key_secret_name(self) -> Optional[str]:
        """
        Name of the secret with the Encrypt data pre-existing in the cluster Default Value: nil See here the template: https://github.com/integr8ly/backup-container-image/blob/master/templates/openshift/sample-config/gpg-secret.yaml
        """
        return pulumi.get(self, "encrypt_key_secret_name")

    @property
    @pulumi.getter(name="encryptKeySecretNamespace")
    def encrypt_key_secret_namespace(self) -> Optional[str]:
        """
        Namespace of the secret with the Encrypt data pre-existing in the cluster Default Value: nil NOTE: If the namespace be not informed then the operator will try to find it in the same namespace where it is applied
        """
        return pulumi.get(self, "encrypt_key_secret_namespace")

    @property
    @pulumi.getter(name="gpgEmail")
    def gpg_email(self) -> Optional[str]:
        """
        GPG email to create the EncryptionKeySecret with this data Default Value: nil See here how to create this key : https://help.github.com/en/articles/generating-a-new-gpg-key
        """
        return pulumi.get(self, "gpg_email")

    @property
    @pulumi.getter(name="gpgPublicKey")
    def gpg_public_key(self) -> Optional[str]:
        """
        GPG public key to create the EncryptionKeySecret with this data Default Value: nil See here how to create this key : https://help.github.com/en/articles/generating-a-new-gpg-key
        """
        return pulumi.get(self, "gpg_public_key")

    @property
    @pulumi.getter(name="gpgTrustModel")
    def gpg_trust_model(self) -> Optional[str]:
        """
        GPG trust model to create the EncryptionKeySecret with this data. the default value is true when it is empty. Default Value: nil See here how to create this key : https://help.github.com/en/articles/generating-a-new-gpg-key
        """
        return pulumi.get(self, "gpg_trust_model")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        """
        Image:tag used to do the backup. Default Value: <quay.io/integreatly/backup-container:1.0.8> More Info: https://github.com/integr8ly/backup-container-image
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> Optional[str]:
        """
        Used to create the directory where the files will be stored Default Value: <postgresql> 
        """
        return pulumi.get(self, "product_name")

    @property
    @pulumi.getter
    def schedule(self) -> Optional[str]:
        """
        Schedule period for the CronJob. Default Value: <0 0 * * *> daily at 00:00
        """
        return pulumi.get(self, "schedule")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class BackupStatus(dict):
    def __init__(__self__, *,
                 aws_credentials_secret_namespace: str,
                 aws_secret_name: str,
                 backup_status: str,
                 cron_job_name: str,
                 cron_job_status: Mapping[str, Any],
                 db_secret_name: str,
                 encrypt_key_secret_name: str,
                 encrypt_key_secret_namespace: str,
                 has_encrypt_key: bool,
                 is_database_pod_found: bool,
                 is_database_service_found: bool):
        """
        :param str aws_credentials_secret_namespace: Namespace  of the secret object with the Aws data to allow send the backup files to the AWS storage
        :param str aws_secret_name: Name  of the secret object with the Aws data to allow send the backup files to the AWS storage
        :param str backup_status: Will be as "OK when all objects are created successfully
        :param str cron_job_name: Name of the CronJob object created and managed by it to schedule the backup job
        :param Mapping[str, Any] cron_job_status: Status of the CronJob object
        :param str db_secret_name: Name of the secret object created with the database data to allow the backup image connect to the database
        :param str encrypt_key_secret_name: Name  of the secret object with the Encryption GPG Key
        :param str encrypt_key_secret_namespace: Namespace of the secret object with the Encryption GPG Key
        :param bool has_encrypt_key: Boolean value which has true when it has an EncryptionKey to be used to send the backup files
        :param bool is_database_pod_found: Boolean value which has true when the Database Pod was found in order to create the secret with the database data to allow the backup image connect into it. 
        :param bool is_database_service_found: Boolean value which has true when the Service Database Pod was found in order to create the secret with the database data to allow the backup image connect into it.
        """
        pulumi.set(__self__, "aws_credentials_secret_namespace", aws_credentials_secret_namespace)
        pulumi.set(__self__, "aws_secret_name", aws_secret_name)
        pulumi.set(__self__, "backup_status", backup_status)
        pulumi.set(__self__, "cron_job_name", cron_job_name)
        pulumi.set(__self__, "cron_job_status", cron_job_status)
        pulumi.set(__self__, "db_secret_name", db_secret_name)
        pulumi.set(__self__, "encrypt_key_secret_name", encrypt_key_secret_name)
        pulumi.set(__self__, "encrypt_key_secret_namespace", encrypt_key_secret_namespace)
        pulumi.set(__self__, "has_encrypt_key", has_encrypt_key)
        pulumi.set(__self__, "is_database_pod_found", is_database_pod_found)
        pulumi.set(__self__, "is_database_service_found", is_database_service_found)

    @property
    @pulumi.getter(name="awsCredentialsSecretNamespace")
    def aws_credentials_secret_namespace(self) -> str:
        """
        Namespace  of the secret object with the Aws data to allow send the backup files to the AWS storage
        """
        return pulumi.get(self, "aws_credentials_secret_namespace")

    @property
    @pulumi.getter(name="awsSecretName")
    def aws_secret_name(self) -> str:
        """
        Name  of the secret object with the Aws data to allow send the backup files to the AWS storage
        """
        return pulumi.get(self, "aws_secret_name")

    @property
    @pulumi.getter(name="backupStatus")
    def backup_status(self) -> str:
        """
        Will be as "OK when all objects are created successfully
        """
        return pulumi.get(self, "backup_status")

    @property
    @pulumi.getter(name="cronJobName")
    def cron_job_name(self) -> str:
        """
        Name of the CronJob object created and managed by it to schedule the backup job
        """
        return pulumi.get(self, "cron_job_name")

    @property
    @pulumi.getter(name="cronJobStatus")
    def cron_job_status(self) -> Mapping[str, Any]:
        """
        Status of the CronJob object
        """
        return pulumi.get(self, "cron_job_status")

    @property
    @pulumi.getter(name="dbSecretName")
    def db_secret_name(self) -> str:
        """
        Name of the secret object created with the database data to allow the backup image connect to the database
        """
        return pulumi.get(self, "db_secret_name")

    @property
    @pulumi.getter(name="encryptKeySecretName")
    def encrypt_key_secret_name(self) -> str:
        """
        Name  of the secret object with the Encryption GPG Key
        """
        return pulumi.get(self, "encrypt_key_secret_name")

    @property
    @pulumi.getter(name="encryptKeySecretNamespace")
    def encrypt_key_secret_namespace(self) -> str:
        """
        Namespace of the secret object with the Encryption GPG Key
        """
        return pulumi.get(self, "encrypt_key_secret_namespace")

    @property
    @pulumi.getter(name="hasEncryptKey")
    def has_encrypt_key(self) -> bool:
        """
        Boolean value which has true when it has an EncryptionKey to be used to send the backup files
        """
        return pulumi.get(self, "has_encrypt_key")

    @property
    @pulumi.getter(name="isDatabasePodFound")
    def is_database_pod_found(self) -> bool:
        """
        Boolean value which has true when the Database Pod was found in order to create the secret with the database data to allow the backup image connect into it. 
        """
        return pulumi.get(self, "is_database_pod_found")

    @property
    @pulumi.getter(name="isDatabaseServiceFound")
    def is_database_service_found(self) -> bool:
        """
        Boolean value which has true when the Service Database Pod was found in order to create the secret with the database data to allow the backup image connect into it.
        """
        return pulumi.get(self, "is_database_service_found")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DatabaseSpec(dict):
    def __init__(__self__, *,
                 config_map_database_name_key: Optional[str] = None,
                 config_map_database_password_key: Optional[str] = None,
                 config_map_database_user_key: Optional[str] = None,
                 config_map_name: Optional[str] = None,
                 container_image_pull_policy: Optional[str] = None,
                 container_name: Optional[str] = None,
                 database_cpu: Optional[str] = None,
                 database_cpu_limit: Optional[str] = None,
                 database_memory_limit: Optional[str] = None,
                 database_memory_request: Optional[str] = None,
                 database_name: Optional[str] = None,
                 database_name_key_env_var: Optional[str] = None,
                 database_password: Optional[str] = None,
                 database_password_key_env_var: Optional[str] = None,
                 database_port: Optional[int] = None,
                 database_storage_request: Optional[str] = None,
                 database_user: Optional[str] = None,
                 database_user_key_env_var: Optional[str] = None,
                 image: Optional[str] = None,
                 size: Optional[int] = None):
        """
        :param str config_map_database_name_key: Name of the configMap key where the operator should looking for the value for the database name for its env var Default value: nil
        :param str config_map_database_password_key: Name of the configMap key where the operator should looking for the value for the database user for its env var Default value: nil
        :param str config_map_database_user_key: Name of the configMap key where the operator should looking for the value for the database password for its env var Default value: nil
        :param str config_map_name: Name of the ConfigMap where the operator should looking for the EnvVars keys and/or values only Default value: nil
        :param str container_image_pull_policy: Policy definition to pull the Database Image More info: https://kubernetes.io/docs/concepts/containers/images/
        :param str container_name: Name to create the Database container
        :param str database_cpu: CPU resource request which will be available for the database container Default value: 10Mi
        :param str database_cpu_limit: Limit of CPU request which will be available for the database container Default value: 20Mi
        :param str database_memory_limit: Limit of Memory which will be available for the database container Default value: 512Mi
        :param str database_memory_request: Limit of Memory Request which will be available for the database container Default value: 128Mi
        :param str database_name: Value for the Database Environment Variable (spec.databaseNameKeyEnvVar). Default value: example
        :param str database_name_key_env_var: Key Value for the Database Environment Variable in order to inform the database mame Note that each database version/image can expected a different value for it. Default value: nil
        :param str database_password: Value for the Database Environment Variable (spec.databasePasswordKeyEnvVar). Default value: postgres
        :param str database_password_key_env_var: Key Value for the Database Environment Variable in order to inform the database password Note that each database version/image can expected a different value for it. Default value: nil
        :param int database_port: Value for the Database Environment Variable in order to define the port which it should use. It will be used in its container as well
        :param str database_storage_request: Limit of Storage Request which will be available for the database container Default value: 1Gi
        :param str database_user: Value for the Database Environment Variable (spec.databaseUserKeyEnvVar). Default value: postgres
        :param str database_user_key_env_var: Key Value for the Database Environment Variable in order to inform the database user Note that each database version/image can expected a different value for it. Default value: nil
        :param str image: Database image:tag Default value: centos/postgresql-96-centos7
        :param int size: Quantity of instances Default value: 1 +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
        """
        if config_map_database_name_key is not None:
            pulumi.set(__self__, "config_map_database_name_key", config_map_database_name_key)
        if config_map_database_password_key is not None:
            pulumi.set(__self__, "config_map_database_password_key", config_map_database_password_key)
        if config_map_database_user_key is not None:
            pulumi.set(__self__, "config_map_database_user_key", config_map_database_user_key)
        if config_map_name is not None:
            pulumi.set(__self__, "config_map_name", config_map_name)
        if container_image_pull_policy is not None:
            pulumi.set(__self__, "container_image_pull_policy", container_image_pull_policy)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if database_cpu is not None:
            pulumi.set(__self__, "database_cpu", database_cpu)
        if database_cpu_limit is not None:
            pulumi.set(__self__, "database_cpu_limit", database_cpu_limit)
        if database_memory_limit is not None:
            pulumi.set(__self__, "database_memory_limit", database_memory_limit)
        if database_memory_request is not None:
            pulumi.set(__self__, "database_memory_request", database_memory_request)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if database_name_key_env_var is not None:
            pulumi.set(__self__, "database_name_key_env_var", database_name_key_env_var)
        if database_password is not None:
            pulumi.set(__self__, "database_password", database_password)
        if database_password_key_env_var is not None:
            pulumi.set(__self__, "database_password_key_env_var", database_password_key_env_var)
        if database_port is not None:
            pulumi.set(__self__, "database_port", database_port)
        if database_storage_request is not None:
            pulumi.set(__self__, "database_storage_request", database_storage_request)
        if database_user is not None:
            pulumi.set(__self__, "database_user", database_user)
        if database_user_key_env_var is not None:
            pulumi.set(__self__, "database_user_key_env_var", database_user_key_env_var)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter(name="configMapDatabaseNameKey")
    def config_map_database_name_key(self) -> Optional[str]:
        """
        Name of the configMap key where the operator should looking for the value for the database name for its env var Default value: nil
        """
        return pulumi.get(self, "config_map_database_name_key")

    @property
    @pulumi.getter(name="configMapDatabasePasswordKey")
    def config_map_database_password_key(self) -> Optional[str]:
        """
        Name of the configMap key where the operator should looking for the value for the database user for its env var Default value: nil
        """
        return pulumi.get(self, "config_map_database_password_key")

    @property
    @pulumi.getter(name="configMapDatabaseUserKey")
    def config_map_database_user_key(self) -> Optional[str]:
        """
        Name of the configMap key where the operator should looking for the value for the database password for its env var Default value: nil
        """
        return pulumi.get(self, "config_map_database_user_key")

    @property
    @pulumi.getter(name="configMapName")
    def config_map_name(self) -> Optional[str]:
        """
        Name of the ConfigMap where the operator should looking for the EnvVars keys and/or values only Default value: nil
        """
        return pulumi.get(self, "config_map_name")

    @property
    @pulumi.getter(name="containerImagePullPolicy")
    def container_image_pull_policy(self) -> Optional[str]:
        """
        Policy definition to pull the Database Image More info: https://kubernetes.io/docs/concepts/containers/images/
        """
        return pulumi.get(self, "container_image_pull_policy")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        """
        Name to create the Database container
        """
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter(name="databaseCpu")
    def database_cpu(self) -> Optional[str]:
        """
        CPU resource request which will be available for the database container Default value: 10Mi
        """
        return pulumi.get(self, "database_cpu")

    @property
    @pulumi.getter(name="databaseCpuLimit")
    def database_cpu_limit(self) -> Optional[str]:
        """
        Limit of CPU request which will be available for the database container Default value: 20Mi
        """
        return pulumi.get(self, "database_cpu_limit")

    @property
    @pulumi.getter(name="databaseMemoryLimit")
    def database_memory_limit(self) -> Optional[str]:
        """
        Limit of Memory which will be available for the database container Default value: 512Mi
        """
        return pulumi.get(self, "database_memory_limit")

    @property
    @pulumi.getter(name="databaseMemoryRequest")
    def database_memory_request(self) -> Optional[str]:
        """
        Limit of Memory Request which will be available for the database container Default value: 128Mi
        """
        return pulumi.get(self, "database_memory_request")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        """
        Value for the Database Environment Variable (spec.databaseNameKeyEnvVar). Default value: example
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="databaseNameKeyEnvVar")
    def database_name_key_env_var(self) -> Optional[str]:
        """
        Key Value for the Database Environment Variable in order to inform the database mame Note that each database version/image can expected a different value for it. Default value: nil
        """
        return pulumi.get(self, "database_name_key_env_var")

    @property
    @pulumi.getter(name="databasePassword")
    def database_password(self) -> Optional[str]:
        """
        Value for the Database Environment Variable (spec.databasePasswordKeyEnvVar). Default value: postgres
        """
        return pulumi.get(self, "database_password")

    @property
    @pulumi.getter(name="databasePasswordKeyEnvVar")
    def database_password_key_env_var(self) -> Optional[str]:
        """
        Key Value for the Database Environment Variable in order to inform the database password Note that each database version/image can expected a different value for it. Default value: nil
        """
        return pulumi.get(self, "database_password_key_env_var")

    @property
    @pulumi.getter(name="databasePort")
    def database_port(self) -> Optional[int]:
        """
        Value for the Database Environment Variable in order to define the port which it should use. It will be used in its container as well
        """
        return pulumi.get(self, "database_port")

    @property
    @pulumi.getter(name="databaseStorageRequest")
    def database_storage_request(self) -> Optional[str]:
        """
        Limit of Storage Request which will be available for the database container Default value: 1Gi
        """
        return pulumi.get(self, "database_storage_request")

    @property
    @pulumi.getter(name="databaseUser")
    def database_user(self) -> Optional[str]:
        """
        Value for the Database Environment Variable (spec.databaseUserKeyEnvVar). Default value: postgres
        """
        return pulumi.get(self, "database_user")

    @property
    @pulumi.getter(name="databaseUserKeyEnvVar")
    def database_user_key_env_var(self) -> Optional[str]:
        """
        Key Value for the Database Environment Variable in order to inform the database user Note that each database version/image can expected a different value for it. Default value: nil
        """
        return pulumi.get(self, "database_user_key_env_var")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        """
        Database image:tag Default value: centos/postgresql-96-centos7
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        """
        Quantity of instances Default value: 1 +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
        """
        return pulumi.get(self, "size")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DatabaseStatus(dict):
    def __init__(__self__, *,
                 database_status: str,
                 deployment_status: Mapping[str, Any],
                 pvc_status: Mapping[str, Any],
                 service_status: Mapping[str, Any]):
        """
        :param str database_status: It will be as "OK when all objects are created successfully
        :param Mapping[str, Any] deployment_status: Status of the Database Deployment created and managed by it
        :param Mapping[str, Any] pvc_status: Name of the PersistentVolumeClaim created and managed by it
        :param Mapping[str, Any] service_status: Status of the Database Service created and managed by it
        """
        pulumi.set(__self__, "database_status", database_status)
        pulumi.set(__self__, "deployment_status", deployment_status)
        pulumi.set(__self__, "pvc_status", pvc_status)
        pulumi.set(__self__, "service_status", service_status)

    @property
    @pulumi.getter(name="databaseStatus")
    def database_status(self) -> str:
        """
        It will be as "OK when all objects are created successfully
        """
        return pulumi.get(self, "database_status")

    @property
    @pulumi.getter(name="deploymentStatus")
    def deployment_status(self) -> Mapping[str, Any]:
        """
        Status of the Database Deployment created and managed by it
        """
        return pulumi.get(self, "deployment_status")

    @property
    @pulumi.getter(name="pvcStatus")
    def pvc_status(self) -> Mapping[str, Any]:
        """
        Name of the PersistentVolumeClaim created and managed by it
        """
        return pulumi.get(self, "pvc_status")

    @property
    @pulumi.getter(name="serviceStatus")
    def service_status(self) -> Mapping[str, Any]:
        """
        Status of the Database Service created and managed by it
        """
        return pulumi.get(self, "service_status")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



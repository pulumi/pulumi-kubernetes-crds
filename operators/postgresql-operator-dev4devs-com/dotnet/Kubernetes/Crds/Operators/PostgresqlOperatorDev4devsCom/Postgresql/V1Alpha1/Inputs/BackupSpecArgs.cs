// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Inputs.Postgresql.V1Alpha1
{

    public class BackupSpecArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Key ID of AWS S3 storage. Default Value: nil Required to create the Secret with the data to allow send the backup files to AWS S3 storage.
        /// </summary>
        [Input("awsAccessKeyId")]
        public Input<string>? AwsAccessKeyId { get; set; }

        /// <summary>
        /// Name of AWS S3 storage. Default Value: nil Required to create the Secret with the AWS data to allow send the backup files to AWS S3 storage. 
        /// </summary>
        [Input("awsS3BucketName")]
        public Input<string>? AwsS3BucketName { get; set; }

        /// <summary>
        /// Secret/Token of AWS S3 storage. Default Value: nil Required to create the Secret with the data to allow send the backup files to AWS S3 storage.
        /// </summary>
        [Input("awsSecretAccessKey")]
        public Input<string>? AwsSecretAccessKey { get; set; }

        /// <summary>
        /// Name of the secret with the AWS data credentials pre-existing in the cluster Default Value: nil See here the template: https://github.com/integr8ly/backup-container-image/blob/master/templates/openshift/sample-config/s3-secret.yaml 
        /// </summary>
        [Input("awsSecretName")]
        public Input<string>? AwsSecretName { get; set; }

        /// <summary>
        /// Namespace of the secret with the AWS data credentials pre-existing in the cluster Default Value: nil NOTE: If the namespace be not informed then the operator will try to find it in the same namespace where it is applied 
        /// </summary>
        [Input("awsSecretNamespace")]
        public Input<string>? AwsSecretNamespace { get; set; }

        /// <summary>
        /// Name of the Database CR applied which this backup will work with Default Value: database
        /// </summary>
        [Input("databaseCRName")]
        public Input<string>? DatabaseCRName { get; set; }

        /// <summary>
        /// Database version. (E.g 9.6). Default Value: &lt;9.6&gt; IMPORTANT: Just the first 2 digits should be used.
        /// </summary>
        [Input("databaseVersion")]
        public Input<string>? DatabaseVersion { get; set; }

        /// <summary>
        /// Name of the secret with the Encrypt data pre-existing in the cluster Default Value: nil See here the template: https://github.com/integr8ly/backup-container-image/blob/master/templates/openshift/sample-config/gpg-secret.yaml
        /// </summary>
        [Input("encryptKeySecretName")]
        public Input<string>? EncryptKeySecretName { get; set; }

        /// <summary>
        /// Namespace of the secret with the Encrypt data pre-existing in the cluster Default Value: nil NOTE: If the namespace be not informed then the operator will try to find it in the same namespace where it is applied
        /// </summary>
        [Input("encryptKeySecretNamespace")]
        public Input<string>? EncryptKeySecretNamespace { get; set; }

        /// <summary>
        /// GPG email to create the EncryptionKeySecret with this data Default Value: nil See here how to create this key : https://help.github.com/en/articles/generating-a-new-gpg-key
        /// </summary>
        [Input("gpgEmail")]
        public Input<string>? GpgEmail { get; set; }

        /// <summary>
        /// GPG public key to create the EncryptionKeySecret with this data Default Value: nil See here how to create this key : https://help.github.com/en/articles/generating-a-new-gpg-key
        /// </summary>
        [Input("gpgPublicKey")]
        public Input<string>? GpgPublicKey { get; set; }

        /// <summary>
        /// GPG trust model to create the EncryptionKeySecret with this data. the default value is true when it is empty. Default Value: nil See here how to create this key : https://help.github.com/en/articles/generating-a-new-gpg-key
        /// </summary>
        [Input("gpgTrustModel")]
        public Input<string>? GpgTrustModel { get; set; }

        /// <summary>
        /// Image:tag used to do the backup. Default Value: &lt;quay.io/integreatly/backup-container:1.0.8&gt; More Info: https://github.com/integr8ly/backup-container-image
        /// </summary>
        [Input("image")]
        public Input<string>? Image { get; set; }

        /// <summary>
        /// Used to create the directory where the files will be stored Default Value: &lt;postgresql&gt; 
        /// </summary>
        [Input("productName")]
        public Input<string>? ProductName { get; set; }

        /// <summary>
        /// Schedule period for the CronJob. Default Value: &lt;0 0 * * *&gt; daily at 00:00
        /// </summary>
        [Input("schedule")]
        public Input<string>? Schedule { get; set; }

        public BackupSpecArgs()
        {
        }
    }
}

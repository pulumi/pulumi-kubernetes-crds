// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Inputs.Postgresql.V1Alpha1
{

    public class BackupStatusArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Namespace  of the secret object with the Aws data to allow send the backup files to the AWS storage
        /// </summary>
        [Input("awsCredentialsSecretNamespace", required: true)]
        public Input<string> AwsCredentialsSecretNamespace { get; set; } = null!;

        /// <summary>
        /// Name  of the secret object with the Aws data to allow send the backup files to the AWS storage
        /// </summary>
        [Input("awsSecretName", required: true)]
        public Input<string> AwsSecretName { get; set; } = null!;

        /// <summary>
        /// Will be as "OK when all objects are created successfully
        /// </summary>
        [Input("backupStatus", required: true)]
        public Input<string> BackupStatus { get; set; } = null!;

        /// <summary>
        /// Name of the CronJob object created and managed by it to schedule the backup job
        /// </summary>
        [Input("cronJobName", required: true)]
        public Input<string> CronJobName { get; set; } = null!;

        [Input("cronJobStatus", required: true)]
        private InputMap<object>? _cronJobStatus;

        /// <summary>
        /// Status of the CronJob object
        /// </summary>
        public InputMap<object> CronJobStatus
        {
            get => _cronJobStatus ?? (_cronJobStatus = new InputMap<object>());
            set => _cronJobStatus = value;
        }

        /// <summary>
        /// Name of the secret object created with the database data to allow the backup image connect to the database
        /// </summary>
        [Input("dbSecretName", required: true)]
        public Input<string> DbSecretName { get; set; } = null!;

        /// <summary>
        /// Name  of the secret object with the Encryption GPG Key
        /// </summary>
        [Input("encryptKeySecretName", required: true)]
        public Input<string> EncryptKeySecretName { get; set; } = null!;

        /// <summary>
        /// Namespace of the secret object with the Encryption GPG Key
        /// </summary>
        [Input("encryptKeySecretNamespace", required: true)]
        public Input<string> EncryptKeySecretNamespace { get; set; } = null!;

        /// <summary>
        /// Boolean value which has true when it has an EncryptionKey to be used to send the backup files
        /// </summary>
        [Input("hasEncryptKey", required: true)]
        public Input<bool> HasEncryptKey { get; set; } = null!;

        /// <summary>
        /// Boolean value which has true when the Database Pod was found in order to create the secret with the database data to allow the backup image connect into it. 
        /// </summary>
        [Input("isDatabasePodFound", required: true)]
        public Input<bool> IsDatabasePodFound { get; set; } = null!;

        /// <summary>
        /// Boolean value which has true when the Service Database Pod was found in order to create the secret with the database data to allow the backup image connect into it.
        /// </summary>
        [Input("isDatabaseServiceFound", required: true)]
        public Input<bool> IsDatabaseServiceFound { get; set; } = null!;

        public BackupStatusArgs()
        {
        }
    }
}

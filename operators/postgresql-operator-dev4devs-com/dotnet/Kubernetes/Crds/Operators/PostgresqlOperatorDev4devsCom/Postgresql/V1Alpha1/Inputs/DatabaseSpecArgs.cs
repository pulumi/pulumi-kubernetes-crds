// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Inputs.Postgresql.V1Alpha1
{

    public class DatabaseSpecArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the configMap key where the operator should looking for the value for the database name for its env var Default value: nil
        /// </summary>
        [Input("configMapDatabaseNameKey")]
        public Input<string>? ConfigMapDatabaseNameKey { get; set; }

        /// <summary>
        /// Name of the configMap key where the operator should looking for the value for the database user for its env var Default value: nil
        /// </summary>
        [Input("configMapDatabasePasswordKey")]
        public Input<string>? ConfigMapDatabasePasswordKey { get; set; }

        /// <summary>
        /// Name of the configMap key where the operator should looking for the value for the database password for its env var Default value: nil
        /// </summary>
        [Input("configMapDatabaseUserKey")]
        public Input<string>? ConfigMapDatabaseUserKey { get; set; }

        /// <summary>
        /// Name of the ConfigMap where the operator should looking for the EnvVars keys and/or values only Default value: nil
        /// </summary>
        [Input("configMapName")]
        public Input<string>? ConfigMapName { get; set; }

        /// <summary>
        /// Policy definition to pull the Database Image More info: https://kubernetes.io/docs/concepts/containers/images/
        /// </summary>
        [Input("containerImagePullPolicy")]
        public Input<string>? ContainerImagePullPolicy { get; set; }

        /// <summary>
        /// Name to create the Database container
        /// </summary>
        [Input("containerName")]
        public Input<string>? ContainerName { get; set; }

        /// <summary>
        /// CPU resource request which will be available for the database container Default value: 10Mi
        /// </summary>
        [Input("databaseCpu")]
        public Input<string>? DatabaseCpu { get; set; }

        /// <summary>
        /// Limit of CPU request which will be available for the database container Default value: 20Mi
        /// </summary>
        [Input("databaseCpuLimit")]
        public Input<string>? DatabaseCpuLimit { get; set; }

        /// <summary>
        /// Limit of Memory which will be available for the database container Default value: 512Mi
        /// </summary>
        [Input("databaseMemoryLimit")]
        public Input<string>? DatabaseMemoryLimit { get; set; }

        /// <summary>
        /// Limit of Memory Request which will be available for the database container Default value: 128Mi
        /// </summary>
        [Input("databaseMemoryRequest")]
        public Input<string>? DatabaseMemoryRequest { get; set; }

        /// <summary>
        /// Value for the Database Environment Variable (spec.databaseNameKeyEnvVar). Default value: example
        /// </summary>
        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        /// <summary>
        /// Key Value for the Database Environment Variable in order to inform the database mame Note that each database version/image can expected a different value for it. Default value: nil
        /// </summary>
        [Input("databaseNameKeyEnvVar")]
        public Input<string>? DatabaseNameKeyEnvVar { get; set; }

        /// <summary>
        /// Value for the Database Environment Variable (spec.databasePasswordKeyEnvVar). Default value: postgres
        /// </summary>
        [Input("databasePassword")]
        public Input<string>? DatabasePassword { get; set; }

        /// <summary>
        /// Key Value for the Database Environment Variable in order to inform the database password Note that each database version/image can expected a different value for it. Default value: nil
        /// </summary>
        [Input("databasePasswordKeyEnvVar")]
        public Input<string>? DatabasePasswordKeyEnvVar { get; set; }

        /// <summary>
        /// Value for the Database Environment Variable in order to define the port which it should use. It will be used in its container as well
        /// </summary>
        [Input("databasePort")]
        public Input<int>? DatabasePort { get; set; }

        /// <summary>
        /// Limit of Storage Request which will be available for the database container Default value: 1Gi
        /// </summary>
        [Input("databaseStorageRequest")]
        public Input<string>? DatabaseStorageRequest { get; set; }

        /// <summary>
        /// Value for the Database Environment Variable (spec.databaseUserKeyEnvVar). Default value: postgres
        /// </summary>
        [Input("databaseUser")]
        public Input<string>? DatabaseUser { get; set; }

        /// <summary>
        /// Key Value for the Database Environment Variable in order to inform the database user Note that each database version/image can expected a different value for it. Default value: nil
        /// </summary>
        [Input("databaseUserKeyEnvVar")]
        public Input<string>? DatabaseUserKeyEnvVar { get; set; }

        /// <summary>
        /// Database image:tag Default value: centos/postgresql-96-centos7
        /// </summary>
        [Input("image")]
        public Input<string>? Image { get; set; }

        /// <summary>
        /// Quantity of instances Default value: 1 +operator-sdk:gen-csv:customresourcedefinitions.specDescriptors=true
        /// </summary>
        [Input("size")]
        public Input<int>? Size { get; set; }

        public DatabaseSpecArgs()
        {
        }
    }
}

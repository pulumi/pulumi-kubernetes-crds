// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Postgresql.V1Alpha1
{

    [OutputType]
    public sealed class BackupSpec
    {
        /// <summary>
        /// Key ID of AWS S3 storage. Default Value: nil Required to create the Secret with the data to allow send the backup files to AWS S3 storage.
        /// </summary>
        public readonly string AwsAccessKeyId;
        /// <summary>
        /// Name of AWS S3 storage. Default Value: nil Required to create the Secret with the AWS data to allow send the backup files to AWS S3 storage. 
        /// </summary>
        public readonly string AwsS3BucketName;
        /// <summary>
        /// Secret/Token of AWS S3 storage. Default Value: nil Required to create the Secret with the data to allow send the backup files to AWS S3 storage.
        /// </summary>
        public readonly string AwsSecretAccessKey;
        /// <summary>
        /// Name of the secret with the AWS data credentials pre-existing in the cluster Default Value: nil See here the template: https://github.com/integr8ly/backup-container-image/blob/master/templates/openshift/sample-config/s3-secret.yaml 
        /// </summary>
        public readonly string AwsSecretName;
        /// <summary>
        /// Namespace of the secret with the AWS data credentials pre-existing in the cluster Default Value: nil NOTE: If the namespace be not informed then the operator will try to find it in the same namespace where it is applied 
        /// </summary>
        public readonly string AwsSecretNamespace;
        /// <summary>
        /// Name of the Database CR applied which this backup will work with Default Value: database
        /// </summary>
        public readonly string DatabaseCRName;
        /// <summary>
        /// Database version. (E.g 9.6). Default Value: &lt;9.6&gt; IMPORTANT: Just the first 2 digits should be used.
        /// </summary>
        public readonly string DatabaseVersion;
        /// <summary>
        /// Name of the secret with the Encrypt data pre-existing in the cluster Default Value: nil See here the template: https://github.com/integr8ly/backup-container-image/blob/master/templates/openshift/sample-config/gpg-secret.yaml
        /// </summary>
        public readonly string EncryptKeySecretName;
        /// <summary>
        /// Namespace of the secret with the Encrypt data pre-existing in the cluster Default Value: nil NOTE: If the namespace be not informed then the operator will try to find it in the same namespace where it is applied
        /// </summary>
        public readonly string EncryptKeySecretNamespace;
        /// <summary>
        /// GPG email to create the EncryptionKeySecret with this data Default Value: nil See here how to create this key : https://help.github.com/en/articles/generating-a-new-gpg-key
        /// </summary>
        public readonly string GpgEmail;
        /// <summary>
        /// GPG public key to create the EncryptionKeySecret with this data Default Value: nil See here how to create this key : https://help.github.com/en/articles/generating-a-new-gpg-key
        /// </summary>
        public readonly string GpgPublicKey;
        /// <summary>
        /// GPG trust model to create the EncryptionKeySecret with this data. the default value is true when it is empty. Default Value: nil See here how to create this key : https://help.github.com/en/articles/generating-a-new-gpg-key
        /// </summary>
        public readonly string GpgTrustModel;
        /// <summary>
        /// Image:tag used to do the backup. Default Value: &lt;quay.io/integreatly/backup-container:1.0.8&gt; More Info: https://github.com/integr8ly/backup-container-image
        /// </summary>
        public readonly string Image;
        /// <summary>
        /// Used to create the directory where the files will be stored Default Value: &lt;postgresql&gt; 
        /// </summary>
        public readonly string ProductName;
        /// <summary>
        /// Schedule period for the CronJob. Default Value: &lt;0 0 * * *&gt; daily at 00:00
        /// </summary>
        public readonly string Schedule;

        [OutputConstructor]
        private BackupSpec(
            string awsAccessKeyId,

            string awsS3BucketName,

            string awsSecretAccessKey,

            string awsSecretName,

            string awsSecretNamespace,

            string databaseCRName,

            string databaseVersion,

            string encryptKeySecretName,

            string encryptKeySecretNamespace,

            string gpgEmail,

            string gpgPublicKey,

            string gpgTrustModel,

            string image,

            string productName,

            string schedule)
        {
            AwsAccessKeyId = awsAccessKeyId;
            AwsS3BucketName = awsS3BucketName;
            AwsSecretAccessKey = awsSecretAccessKey;
            AwsSecretName = awsSecretName;
            AwsSecretNamespace = awsSecretNamespace;
            DatabaseCRName = databaseCRName;
            DatabaseVersion = databaseVersion;
            EncryptKeySecretName = encryptKeySecretName;
            EncryptKeySecretNamespace = encryptKeySecretNamespace;
            GpgEmail = gpgEmail;
            GpgPublicKey = gpgPublicKey;
            GpgTrustModel = gpgTrustModel;
            Image = image;
            ProductName = productName;
            Schedule = schedule;
        }
    }
}

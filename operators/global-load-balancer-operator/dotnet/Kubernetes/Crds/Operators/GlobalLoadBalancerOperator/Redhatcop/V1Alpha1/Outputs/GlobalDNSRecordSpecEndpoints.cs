// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Redhatcop.V1Alpha1
{

    [OutputType]
    public sealed class GlobalDNSRecordSpecEndpoints
    {
        /// <summary>
        /// CredentialsSecretRef is a reference to a secret containing the credentials to access the cluster a key called "kubeconfig" containing a valid kubeconfig file for connecting to the cluster must exist in this secret.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Redhatcop.V1Alpha1.GlobalDNSRecordSpecEndpointsClusterCredentialRef ClusterCredentialRef;
        /// <summary>
        /// ClusterName name of the cluster to connect to.
        /// </summary>
        public readonly string ClusterName;
        /// <summary>
        /// LoadBalancerServiceRef contains a reference to the load balancer service that will receive the traffic, if using a router, put here the service created by the ingress controller.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Redhatcop.V1Alpha1.GlobalDNSRecordSpecEndpointsLoadBalancerServiceRef LoadBalancerServiceRef;

        [OutputConstructor]
        private GlobalDNSRecordSpecEndpoints(
            Pulumi.Kubernetes.Types.Outputs.Redhatcop.V1Alpha1.GlobalDNSRecordSpecEndpointsClusterCredentialRef clusterCredentialRef,

            string clusterName,

            Pulumi.Kubernetes.Types.Outputs.Redhatcop.V1Alpha1.GlobalDNSRecordSpecEndpointsLoadBalancerServiceRef loadBalancerServiceRef)
        {
            ClusterCredentialRef = clusterCredentialRef;
            ClusterName = clusterName;
            LoadBalancerServiceRef = loadBalancerServiceRef;
        }
    }
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// GlobalDNSZone is the Schema for the globaldnszones API
type GlobalDNSZone struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// GlobalDNSZoneSpec defines the desired state of GlobalDNSZone
	Spec GlobalDNSZoneSpecPtrOutput `pulumi:"spec"`
	// GlobalDNSZoneStatus defines the observed state of GlobalDNSZone
	Status GlobalDNSZoneStatusPtrOutput `pulumi:"status"`
}

// NewGlobalDNSZone registers a new resource with the given unique name, arguments, and options.
func NewGlobalDNSZone(ctx *pulumi.Context,
	name string, args *GlobalDNSZoneArgs, opts ...pulumi.ResourceOption) (*GlobalDNSZone, error) {
	if args == nil {
		args = &GlobalDNSZoneArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("redhatcop.redhat.io/v1alpha1")
	args.Kind = pulumi.StringPtr("GlobalDNSZone")
	var resource GlobalDNSZone
	err := ctx.RegisterResource("kubernetes:redhatcop.redhat.io/v1alpha1:GlobalDNSZone", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGlobalDNSZone gets an existing GlobalDNSZone resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGlobalDNSZone(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GlobalDNSZoneState, opts ...pulumi.ResourceOption) (*GlobalDNSZone, error) {
	var resource GlobalDNSZone
	err := ctx.ReadResource("kubernetes:redhatcop.redhat.io/v1alpha1:GlobalDNSZone", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GlobalDNSZone resources.
type globalDNSZoneState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// GlobalDNSZoneSpec defines the desired state of GlobalDNSZone
	Spec *GlobalDNSZoneSpec `pulumi:"spec"`
	// GlobalDNSZoneStatus defines the observed state of GlobalDNSZone
	Status *GlobalDNSZoneStatus `pulumi:"status"`
}

type GlobalDNSZoneState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// GlobalDNSZoneSpec defines the desired state of GlobalDNSZone
	Spec GlobalDNSZoneSpecPtrInput
	// GlobalDNSZoneStatus defines the observed state of GlobalDNSZone
	Status GlobalDNSZoneStatusPtrInput
}

func (GlobalDNSZoneState) ElementType() reflect.Type {
	return reflect.TypeOf((*globalDNSZoneState)(nil)).Elem()
}

type globalDNSZoneArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// GlobalDNSZoneSpec defines the desired state of GlobalDNSZone
	Spec *GlobalDNSZoneSpec `pulumi:"spec"`
	// GlobalDNSZoneStatus defines the observed state of GlobalDNSZone
	Status *GlobalDNSZoneStatus `pulumi:"status"`
}

// The set of arguments for constructing a GlobalDNSZone resource.
type GlobalDNSZoneArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// GlobalDNSZoneSpec defines the desired state of GlobalDNSZone
	Spec GlobalDNSZoneSpecPtrInput
	// GlobalDNSZoneStatus defines the observed state of GlobalDNSZone
	Status GlobalDNSZoneStatusPtrInput
}

func (GlobalDNSZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*globalDNSZoneArgs)(nil)).Elem()
}

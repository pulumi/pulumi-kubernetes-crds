// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// GlobalDNSRecord is the Schema for the globaldnsrecords API
type GlobalDNSRecordType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// GlobalDNSRecordSpec defines the desired state of GlobalDNSRecord
	Spec *GlobalDNSRecordSpec `pulumi:"spec"`
	// GlobalDNSRecordStatus defines the observed state of GlobalDNSRecord
	Status *GlobalDNSRecordStatus `pulumi:"status"`
}

// GlobalDNSRecordTypeInput is an input type that accepts GlobalDNSRecordTypeArgs and GlobalDNSRecordTypeOutput values.
// You can construct a concrete instance of `GlobalDNSRecordTypeInput` via:
//
//          GlobalDNSRecordTypeArgs{...}
type GlobalDNSRecordTypeInput interface {
	pulumi.Input

	ToGlobalDNSRecordTypeOutput() GlobalDNSRecordTypeOutput
	ToGlobalDNSRecordTypeOutputWithContext(context.Context) GlobalDNSRecordTypeOutput
}

// GlobalDNSRecord is the Schema for the globaldnsrecords API
type GlobalDNSRecordTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// GlobalDNSRecordSpec defines the desired state of GlobalDNSRecord
	Spec GlobalDNSRecordSpecPtrInput `pulumi:"spec"`
	// GlobalDNSRecordStatus defines the observed state of GlobalDNSRecord
	Status GlobalDNSRecordStatusPtrInput `pulumi:"status"`
}

func (GlobalDNSRecordTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSRecordType)(nil)).Elem()
}

func (i GlobalDNSRecordTypeArgs) ToGlobalDNSRecordTypeOutput() GlobalDNSRecordTypeOutput {
	return i.ToGlobalDNSRecordTypeOutputWithContext(context.Background())
}

func (i GlobalDNSRecordTypeArgs) ToGlobalDNSRecordTypeOutputWithContext(ctx context.Context) GlobalDNSRecordTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordTypeOutput)
}

// GlobalDNSRecord is the Schema for the globaldnsrecords API
type GlobalDNSRecordTypeOutput struct{ *pulumi.OutputState }

func (GlobalDNSRecordTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSRecordType)(nil)).Elem()
}

func (o GlobalDNSRecordTypeOutput) ToGlobalDNSRecordTypeOutput() GlobalDNSRecordTypeOutput {
	return o
}

func (o GlobalDNSRecordTypeOutput) ToGlobalDNSRecordTypeOutputWithContext(ctx context.Context) GlobalDNSRecordTypeOutput {
	return o
}

func (o GlobalDNSRecordTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o GlobalDNSRecordTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o GlobalDNSRecordTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// GlobalDNSRecordSpec defines the desired state of GlobalDNSRecord
func (o GlobalDNSRecordTypeOutput) Spec() GlobalDNSRecordSpecPtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordType) *GlobalDNSRecordSpec { return v.Spec }).(GlobalDNSRecordSpecPtrOutput)
}

// GlobalDNSRecordStatus defines the observed state of GlobalDNSRecord
func (o GlobalDNSRecordTypeOutput) Status() GlobalDNSRecordStatusPtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordType) *GlobalDNSRecordStatus { return v.Status }).(GlobalDNSRecordStatusPtrOutput)
}

type GlobalDNSRecordMetadata struct {
}

// GlobalDNSRecordMetadataInput is an input type that accepts GlobalDNSRecordMetadataArgs and GlobalDNSRecordMetadataOutput values.
// You can construct a concrete instance of `GlobalDNSRecordMetadataInput` via:
//
//          GlobalDNSRecordMetadataArgs{...}
type GlobalDNSRecordMetadataInput interface {
	pulumi.Input

	ToGlobalDNSRecordMetadataOutput() GlobalDNSRecordMetadataOutput
	ToGlobalDNSRecordMetadataOutputWithContext(context.Context) GlobalDNSRecordMetadataOutput
}

type GlobalDNSRecordMetadataArgs struct {
}

func (GlobalDNSRecordMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSRecordMetadata)(nil)).Elem()
}

func (i GlobalDNSRecordMetadataArgs) ToGlobalDNSRecordMetadataOutput() GlobalDNSRecordMetadataOutput {
	return i.ToGlobalDNSRecordMetadataOutputWithContext(context.Background())
}

func (i GlobalDNSRecordMetadataArgs) ToGlobalDNSRecordMetadataOutputWithContext(ctx context.Context) GlobalDNSRecordMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordMetadataOutput)
}

type GlobalDNSRecordMetadataOutput struct{ *pulumi.OutputState }

func (GlobalDNSRecordMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSRecordMetadata)(nil)).Elem()
}

func (o GlobalDNSRecordMetadataOutput) ToGlobalDNSRecordMetadataOutput() GlobalDNSRecordMetadataOutput {
	return o
}

func (o GlobalDNSRecordMetadataOutput) ToGlobalDNSRecordMetadataOutputWithContext(ctx context.Context) GlobalDNSRecordMetadataOutput {
	return o
}

// GlobalDNSRecordSpec defines the desired state of GlobalDNSRecord
type GlobalDNSRecordSpec struct {
	// Enpoints is the list of the cluster endpoitns that need to be considered for this dns record
	Endpoints []GlobalDNSRecordSpecEndpoints `pulumi:"endpoints"`
	// GlobalZoneRef represents the global zone that will be used to host this record
	GlobalZoneRef GlobalDNSRecordSpecGlobalZoneRef `pulumi:"globalZoneRef"`
	// Probe is the health check used to probe the health of the applications and decide which IPs to return Only HttpAction is supported
	HealthCheck *GlobalDNSRecordSpecHealthCheck `pulumi:"healthCheck"`
	// LoadBalancingPolicy describes the policy used to loadbalance the results of the DNS queries.
	LoadBalancingPolicy string `pulumi:"loadBalancingPolicy"`
	// Name is the fqdn that will be used for this record.
	Name string `pulumi:"name"`
	// TTL is the TTL for this dns record kubebuilder:default:60
	Ttl *int `pulumi:"ttl"`
}

// GlobalDNSRecordSpecInput is an input type that accepts GlobalDNSRecordSpecArgs and GlobalDNSRecordSpecOutput values.
// You can construct a concrete instance of `GlobalDNSRecordSpecInput` via:
//
//          GlobalDNSRecordSpecArgs{...}
type GlobalDNSRecordSpecInput interface {
	pulumi.Input

	ToGlobalDNSRecordSpecOutput() GlobalDNSRecordSpecOutput
	ToGlobalDNSRecordSpecOutputWithContext(context.Context) GlobalDNSRecordSpecOutput
}

// GlobalDNSRecordSpec defines the desired state of GlobalDNSRecord
type GlobalDNSRecordSpecArgs struct {
	// Enpoints is the list of the cluster endpoitns that need to be considered for this dns record
	Endpoints GlobalDNSRecordSpecEndpointsArrayInput `pulumi:"endpoints"`
	// GlobalZoneRef represents the global zone that will be used to host this record
	GlobalZoneRef GlobalDNSRecordSpecGlobalZoneRefInput `pulumi:"globalZoneRef"`
	// Probe is the health check used to probe the health of the applications and decide which IPs to return Only HttpAction is supported
	HealthCheck GlobalDNSRecordSpecHealthCheckPtrInput `pulumi:"healthCheck"`
	// LoadBalancingPolicy describes the policy used to loadbalance the results of the DNS queries.
	LoadBalancingPolicy pulumi.StringInput `pulumi:"loadBalancingPolicy"`
	// Name is the fqdn that will be used for this record.
	Name pulumi.StringInput `pulumi:"name"`
	// TTL is the TTL for this dns record kubebuilder:default:60
	Ttl pulumi.IntPtrInput `pulumi:"ttl"`
}

func (GlobalDNSRecordSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSRecordSpec)(nil)).Elem()
}

func (i GlobalDNSRecordSpecArgs) ToGlobalDNSRecordSpecOutput() GlobalDNSRecordSpecOutput {
	return i.ToGlobalDNSRecordSpecOutputWithContext(context.Background())
}

func (i GlobalDNSRecordSpecArgs) ToGlobalDNSRecordSpecOutputWithContext(ctx context.Context) GlobalDNSRecordSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordSpecOutput)
}

func (i GlobalDNSRecordSpecArgs) ToGlobalDNSRecordSpecPtrOutput() GlobalDNSRecordSpecPtrOutput {
	return i.ToGlobalDNSRecordSpecPtrOutputWithContext(context.Background())
}

func (i GlobalDNSRecordSpecArgs) ToGlobalDNSRecordSpecPtrOutputWithContext(ctx context.Context) GlobalDNSRecordSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordSpecOutput).ToGlobalDNSRecordSpecPtrOutputWithContext(ctx)
}

// GlobalDNSRecordSpecPtrInput is an input type that accepts GlobalDNSRecordSpecArgs, GlobalDNSRecordSpecPtr and GlobalDNSRecordSpecPtrOutput values.
// You can construct a concrete instance of `GlobalDNSRecordSpecPtrInput` via:
//
//          GlobalDNSRecordSpecArgs{...}
//
//  or:
//
//          nil
type GlobalDNSRecordSpecPtrInput interface {
	pulumi.Input

	ToGlobalDNSRecordSpecPtrOutput() GlobalDNSRecordSpecPtrOutput
	ToGlobalDNSRecordSpecPtrOutputWithContext(context.Context) GlobalDNSRecordSpecPtrOutput
}

type globalDNSRecordSpecPtrType GlobalDNSRecordSpecArgs

func GlobalDNSRecordSpecPtr(v *GlobalDNSRecordSpecArgs) GlobalDNSRecordSpecPtrInput {
	return (*globalDNSRecordSpecPtrType)(v)
}

func (*globalDNSRecordSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalDNSRecordSpec)(nil)).Elem()
}

func (i *globalDNSRecordSpecPtrType) ToGlobalDNSRecordSpecPtrOutput() GlobalDNSRecordSpecPtrOutput {
	return i.ToGlobalDNSRecordSpecPtrOutputWithContext(context.Background())
}

func (i *globalDNSRecordSpecPtrType) ToGlobalDNSRecordSpecPtrOutputWithContext(ctx context.Context) GlobalDNSRecordSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordSpecPtrOutput)
}

// GlobalDNSRecordSpec defines the desired state of GlobalDNSRecord
type GlobalDNSRecordSpecOutput struct{ *pulumi.OutputState }

func (GlobalDNSRecordSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSRecordSpec)(nil)).Elem()
}

func (o GlobalDNSRecordSpecOutput) ToGlobalDNSRecordSpecOutput() GlobalDNSRecordSpecOutput {
	return o
}

func (o GlobalDNSRecordSpecOutput) ToGlobalDNSRecordSpecOutputWithContext(ctx context.Context) GlobalDNSRecordSpecOutput {
	return o
}

func (o GlobalDNSRecordSpecOutput) ToGlobalDNSRecordSpecPtrOutput() GlobalDNSRecordSpecPtrOutput {
	return o.ToGlobalDNSRecordSpecPtrOutputWithContext(context.Background())
}

func (o GlobalDNSRecordSpecOutput) ToGlobalDNSRecordSpecPtrOutputWithContext(ctx context.Context) GlobalDNSRecordSpecPtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordSpec) *GlobalDNSRecordSpec {
		return &v
	}).(GlobalDNSRecordSpecPtrOutput)
}

// Enpoints is the list of the cluster endpoitns that need to be considered for this dns record
func (o GlobalDNSRecordSpecOutput) Endpoints() GlobalDNSRecordSpecEndpointsArrayOutput {
	return o.ApplyT(func(v GlobalDNSRecordSpec) []GlobalDNSRecordSpecEndpoints { return v.Endpoints }).(GlobalDNSRecordSpecEndpointsArrayOutput)
}

// GlobalZoneRef represents the global zone that will be used to host this record
func (o GlobalDNSRecordSpecOutput) GlobalZoneRef() GlobalDNSRecordSpecGlobalZoneRefOutput {
	return o.ApplyT(func(v GlobalDNSRecordSpec) GlobalDNSRecordSpecGlobalZoneRef { return v.GlobalZoneRef }).(GlobalDNSRecordSpecGlobalZoneRefOutput)
}

// Probe is the health check used to probe the health of the applications and decide which IPs to return Only HttpAction is supported
func (o GlobalDNSRecordSpecOutput) HealthCheck() GlobalDNSRecordSpecHealthCheckPtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordSpec) *GlobalDNSRecordSpecHealthCheck { return v.HealthCheck }).(GlobalDNSRecordSpecHealthCheckPtrOutput)
}

// LoadBalancingPolicy describes the policy used to loadbalance the results of the DNS queries.
func (o GlobalDNSRecordSpecOutput) LoadBalancingPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalDNSRecordSpec) string { return v.LoadBalancingPolicy }).(pulumi.StringOutput)
}

// Name is the fqdn that will be used for this record.
func (o GlobalDNSRecordSpecOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalDNSRecordSpec) string { return v.Name }).(pulumi.StringOutput)
}

// TTL is the TTL for this dns record kubebuilder:default:60
func (o GlobalDNSRecordSpecOutput) Ttl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordSpec) *int { return v.Ttl }).(pulumi.IntPtrOutput)
}

type GlobalDNSRecordSpecPtrOutput struct{ *pulumi.OutputState }

func (GlobalDNSRecordSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalDNSRecordSpec)(nil)).Elem()
}

func (o GlobalDNSRecordSpecPtrOutput) ToGlobalDNSRecordSpecPtrOutput() GlobalDNSRecordSpecPtrOutput {
	return o
}

func (o GlobalDNSRecordSpecPtrOutput) ToGlobalDNSRecordSpecPtrOutputWithContext(ctx context.Context) GlobalDNSRecordSpecPtrOutput {
	return o
}

func (o GlobalDNSRecordSpecPtrOutput) Elem() GlobalDNSRecordSpecOutput {
	return o.ApplyT(func(v *GlobalDNSRecordSpec) GlobalDNSRecordSpec { return *v }).(GlobalDNSRecordSpecOutput)
}

// Enpoints is the list of the cluster endpoitns that need to be considered for this dns record
func (o GlobalDNSRecordSpecPtrOutput) Endpoints() GlobalDNSRecordSpecEndpointsArrayOutput {
	return o.ApplyT(func(v *GlobalDNSRecordSpec) []GlobalDNSRecordSpecEndpoints {
		if v == nil {
			return nil
		}
		return v.Endpoints
	}).(GlobalDNSRecordSpecEndpointsArrayOutput)
}

// GlobalZoneRef represents the global zone that will be used to host this record
func (o GlobalDNSRecordSpecPtrOutput) GlobalZoneRef() GlobalDNSRecordSpecGlobalZoneRefPtrOutput {
	return o.ApplyT(func(v *GlobalDNSRecordSpec) *GlobalDNSRecordSpecGlobalZoneRef {
		if v == nil {
			return nil
		}
		return &v.GlobalZoneRef
	}).(GlobalDNSRecordSpecGlobalZoneRefPtrOutput)
}

// Probe is the health check used to probe the health of the applications and decide which IPs to return Only HttpAction is supported
func (o GlobalDNSRecordSpecPtrOutput) HealthCheck() GlobalDNSRecordSpecHealthCheckPtrOutput {
	return o.ApplyT(func(v *GlobalDNSRecordSpec) *GlobalDNSRecordSpecHealthCheck {
		if v == nil {
			return nil
		}
		return v.HealthCheck
	}).(GlobalDNSRecordSpecHealthCheckPtrOutput)
}

// LoadBalancingPolicy describes the policy used to loadbalance the results of the DNS queries.
func (o GlobalDNSRecordSpecPtrOutput) LoadBalancingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalDNSRecordSpec) *string {
		if v == nil {
			return nil
		}
		return &v.LoadBalancingPolicy
	}).(pulumi.StringPtrOutput)
}

// Name is the fqdn that will be used for this record.
func (o GlobalDNSRecordSpecPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalDNSRecordSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// TTL is the TTL for this dns record kubebuilder:default:60
func (o GlobalDNSRecordSpecPtrOutput) Ttl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GlobalDNSRecordSpec) *int {
		if v == nil {
			return nil
		}
		return v.Ttl
	}).(pulumi.IntPtrOutput)
}

// Endpoint represents a traffic ingress point to the cluster. Currently only LoadBalancer service is supported.
type GlobalDNSRecordSpecEndpoints struct {
	// CredentialsSecretRef is a reference to a secret containing the credentials to access the cluster a key called "kubeconfig" containing a valid kubeconfig file for connecting to the cluster must exist in this secret.
	ClusterCredentialRef GlobalDNSRecordSpecEndpointsClusterCredentialRef `pulumi:"clusterCredentialRef"`
	// ClusterName name of the cluster to connect to.
	ClusterName string `pulumi:"clusterName"`
	// LoadBalancerServiceRef contains a reference to the load balancer service that will receive the traffic, if using a router, put here the service created by the ingress controller.
	LoadBalancerServiceRef GlobalDNSRecordSpecEndpointsLoadBalancerServiceRef `pulumi:"loadBalancerServiceRef"`
}

// GlobalDNSRecordSpecEndpointsInput is an input type that accepts GlobalDNSRecordSpecEndpointsArgs and GlobalDNSRecordSpecEndpointsOutput values.
// You can construct a concrete instance of `GlobalDNSRecordSpecEndpointsInput` via:
//
//          GlobalDNSRecordSpecEndpointsArgs{...}
type GlobalDNSRecordSpecEndpointsInput interface {
	pulumi.Input

	ToGlobalDNSRecordSpecEndpointsOutput() GlobalDNSRecordSpecEndpointsOutput
	ToGlobalDNSRecordSpecEndpointsOutputWithContext(context.Context) GlobalDNSRecordSpecEndpointsOutput
}

// Endpoint represents a traffic ingress point to the cluster. Currently only LoadBalancer service is supported.
type GlobalDNSRecordSpecEndpointsArgs struct {
	// CredentialsSecretRef is a reference to a secret containing the credentials to access the cluster a key called "kubeconfig" containing a valid kubeconfig file for connecting to the cluster must exist in this secret.
	ClusterCredentialRef GlobalDNSRecordSpecEndpointsClusterCredentialRefInput `pulumi:"clusterCredentialRef"`
	// ClusterName name of the cluster to connect to.
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// LoadBalancerServiceRef contains a reference to the load balancer service that will receive the traffic, if using a router, put here the service created by the ingress controller.
	LoadBalancerServiceRef GlobalDNSRecordSpecEndpointsLoadBalancerServiceRefInput `pulumi:"loadBalancerServiceRef"`
}

func (GlobalDNSRecordSpecEndpointsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSRecordSpecEndpoints)(nil)).Elem()
}

func (i GlobalDNSRecordSpecEndpointsArgs) ToGlobalDNSRecordSpecEndpointsOutput() GlobalDNSRecordSpecEndpointsOutput {
	return i.ToGlobalDNSRecordSpecEndpointsOutputWithContext(context.Background())
}

func (i GlobalDNSRecordSpecEndpointsArgs) ToGlobalDNSRecordSpecEndpointsOutputWithContext(ctx context.Context) GlobalDNSRecordSpecEndpointsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordSpecEndpointsOutput)
}

// GlobalDNSRecordSpecEndpointsArrayInput is an input type that accepts GlobalDNSRecordSpecEndpointsArray and GlobalDNSRecordSpecEndpointsArrayOutput values.
// You can construct a concrete instance of `GlobalDNSRecordSpecEndpointsArrayInput` via:
//
//          GlobalDNSRecordSpecEndpointsArray{ GlobalDNSRecordSpecEndpointsArgs{...} }
type GlobalDNSRecordSpecEndpointsArrayInput interface {
	pulumi.Input

	ToGlobalDNSRecordSpecEndpointsArrayOutput() GlobalDNSRecordSpecEndpointsArrayOutput
	ToGlobalDNSRecordSpecEndpointsArrayOutputWithContext(context.Context) GlobalDNSRecordSpecEndpointsArrayOutput
}

type GlobalDNSRecordSpecEndpointsArray []GlobalDNSRecordSpecEndpointsInput

func (GlobalDNSRecordSpecEndpointsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GlobalDNSRecordSpecEndpoints)(nil)).Elem()
}

func (i GlobalDNSRecordSpecEndpointsArray) ToGlobalDNSRecordSpecEndpointsArrayOutput() GlobalDNSRecordSpecEndpointsArrayOutput {
	return i.ToGlobalDNSRecordSpecEndpointsArrayOutputWithContext(context.Background())
}

func (i GlobalDNSRecordSpecEndpointsArray) ToGlobalDNSRecordSpecEndpointsArrayOutputWithContext(ctx context.Context) GlobalDNSRecordSpecEndpointsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordSpecEndpointsArrayOutput)
}

// Endpoint represents a traffic ingress point to the cluster. Currently only LoadBalancer service is supported.
type GlobalDNSRecordSpecEndpointsOutput struct{ *pulumi.OutputState }

func (GlobalDNSRecordSpecEndpointsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSRecordSpecEndpoints)(nil)).Elem()
}

func (o GlobalDNSRecordSpecEndpointsOutput) ToGlobalDNSRecordSpecEndpointsOutput() GlobalDNSRecordSpecEndpointsOutput {
	return o
}

func (o GlobalDNSRecordSpecEndpointsOutput) ToGlobalDNSRecordSpecEndpointsOutputWithContext(ctx context.Context) GlobalDNSRecordSpecEndpointsOutput {
	return o
}

// CredentialsSecretRef is a reference to a secret containing the credentials to access the cluster a key called "kubeconfig" containing a valid kubeconfig file for connecting to the cluster must exist in this secret.
func (o GlobalDNSRecordSpecEndpointsOutput) ClusterCredentialRef() GlobalDNSRecordSpecEndpointsClusterCredentialRefOutput {
	return o.ApplyT(func(v GlobalDNSRecordSpecEndpoints) GlobalDNSRecordSpecEndpointsClusterCredentialRef {
		return v.ClusterCredentialRef
	}).(GlobalDNSRecordSpecEndpointsClusterCredentialRefOutput)
}

// ClusterName name of the cluster to connect to.
func (o GlobalDNSRecordSpecEndpointsOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalDNSRecordSpecEndpoints) string { return v.ClusterName }).(pulumi.StringOutput)
}

// LoadBalancerServiceRef contains a reference to the load balancer service that will receive the traffic, if using a router, put here the service created by the ingress controller.
func (o GlobalDNSRecordSpecEndpointsOutput) LoadBalancerServiceRef() GlobalDNSRecordSpecEndpointsLoadBalancerServiceRefOutput {
	return o.ApplyT(func(v GlobalDNSRecordSpecEndpoints) GlobalDNSRecordSpecEndpointsLoadBalancerServiceRef {
		return v.LoadBalancerServiceRef
	}).(GlobalDNSRecordSpecEndpointsLoadBalancerServiceRefOutput)
}

type GlobalDNSRecordSpecEndpointsArrayOutput struct{ *pulumi.OutputState }

func (GlobalDNSRecordSpecEndpointsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GlobalDNSRecordSpecEndpoints)(nil)).Elem()
}

func (o GlobalDNSRecordSpecEndpointsArrayOutput) ToGlobalDNSRecordSpecEndpointsArrayOutput() GlobalDNSRecordSpecEndpointsArrayOutput {
	return o
}

func (o GlobalDNSRecordSpecEndpointsArrayOutput) ToGlobalDNSRecordSpecEndpointsArrayOutputWithContext(ctx context.Context) GlobalDNSRecordSpecEndpointsArrayOutput {
	return o
}

func (o GlobalDNSRecordSpecEndpointsArrayOutput) Index(i pulumi.IntInput) GlobalDNSRecordSpecEndpointsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GlobalDNSRecordSpecEndpoints {
		return vs[0].([]GlobalDNSRecordSpecEndpoints)[vs[1].(int)]
	}).(GlobalDNSRecordSpecEndpointsOutput)
}

// CredentialsSecretRef is a reference to a secret containing the credentials to access the cluster a key called "kubeconfig" containing a valid kubeconfig file for connecting to the cluster must exist in this secret.
type GlobalDNSRecordSpecEndpointsClusterCredentialRef struct {
	Name      string `pulumi:"name"`
	Namespace string `pulumi:"namespace"`
}

// GlobalDNSRecordSpecEndpointsClusterCredentialRefInput is an input type that accepts GlobalDNSRecordSpecEndpointsClusterCredentialRefArgs and GlobalDNSRecordSpecEndpointsClusterCredentialRefOutput values.
// You can construct a concrete instance of `GlobalDNSRecordSpecEndpointsClusterCredentialRefInput` via:
//
//          GlobalDNSRecordSpecEndpointsClusterCredentialRefArgs{...}
type GlobalDNSRecordSpecEndpointsClusterCredentialRefInput interface {
	pulumi.Input

	ToGlobalDNSRecordSpecEndpointsClusterCredentialRefOutput() GlobalDNSRecordSpecEndpointsClusterCredentialRefOutput
	ToGlobalDNSRecordSpecEndpointsClusterCredentialRefOutputWithContext(context.Context) GlobalDNSRecordSpecEndpointsClusterCredentialRefOutput
}

// CredentialsSecretRef is a reference to a secret containing the credentials to access the cluster a key called "kubeconfig" containing a valid kubeconfig file for connecting to the cluster must exist in this secret.
type GlobalDNSRecordSpecEndpointsClusterCredentialRefArgs struct {
	Name      pulumi.StringInput `pulumi:"name"`
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (GlobalDNSRecordSpecEndpointsClusterCredentialRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSRecordSpecEndpointsClusterCredentialRef)(nil)).Elem()
}

func (i GlobalDNSRecordSpecEndpointsClusterCredentialRefArgs) ToGlobalDNSRecordSpecEndpointsClusterCredentialRefOutput() GlobalDNSRecordSpecEndpointsClusterCredentialRefOutput {
	return i.ToGlobalDNSRecordSpecEndpointsClusterCredentialRefOutputWithContext(context.Background())
}

func (i GlobalDNSRecordSpecEndpointsClusterCredentialRefArgs) ToGlobalDNSRecordSpecEndpointsClusterCredentialRefOutputWithContext(ctx context.Context) GlobalDNSRecordSpecEndpointsClusterCredentialRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordSpecEndpointsClusterCredentialRefOutput)
}

// CredentialsSecretRef is a reference to a secret containing the credentials to access the cluster a key called "kubeconfig" containing a valid kubeconfig file for connecting to the cluster must exist in this secret.
type GlobalDNSRecordSpecEndpointsClusterCredentialRefOutput struct{ *pulumi.OutputState }

func (GlobalDNSRecordSpecEndpointsClusterCredentialRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSRecordSpecEndpointsClusterCredentialRef)(nil)).Elem()
}

func (o GlobalDNSRecordSpecEndpointsClusterCredentialRefOutput) ToGlobalDNSRecordSpecEndpointsClusterCredentialRefOutput() GlobalDNSRecordSpecEndpointsClusterCredentialRefOutput {
	return o
}

func (o GlobalDNSRecordSpecEndpointsClusterCredentialRefOutput) ToGlobalDNSRecordSpecEndpointsClusterCredentialRefOutputWithContext(ctx context.Context) GlobalDNSRecordSpecEndpointsClusterCredentialRefOutput {
	return o
}

func (o GlobalDNSRecordSpecEndpointsClusterCredentialRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalDNSRecordSpecEndpointsClusterCredentialRef) string { return v.Name }).(pulumi.StringOutput)
}

func (o GlobalDNSRecordSpecEndpointsClusterCredentialRefOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalDNSRecordSpecEndpointsClusterCredentialRef) string { return v.Namespace }).(pulumi.StringOutput)
}

// LoadBalancerServiceRef contains a reference to the load balancer service that will receive the traffic, if using a router, put here the service created by the ingress controller.
type GlobalDNSRecordSpecEndpointsLoadBalancerServiceRef struct {
	Name      string `pulumi:"name"`
	Namespace string `pulumi:"namespace"`
}

// GlobalDNSRecordSpecEndpointsLoadBalancerServiceRefInput is an input type that accepts GlobalDNSRecordSpecEndpointsLoadBalancerServiceRefArgs and GlobalDNSRecordSpecEndpointsLoadBalancerServiceRefOutput values.
// You can construct a concrete instance of `GlobalDNSRecordSpecEndpointsLoadBalancerServiceRefInput` via:
//
//          GlobalDNSRecordSpecEndpointsLoadBalancerServiceRefArgs{...}
type GlobalDNSRecordSpecEndpointsLoadBalancerServiceRefInput interface {
	pulumi.Input

	ToGlobalDNSRecordSpecEndpointsLoadBalancerServiceRefOutput() GlobalDNSRecordSpecEndpointsLoadBalancerServiceRefOutput
	ToGlobalDNSRecordSpecEndpointsLoadBalancerServiceRefOutputWithContext(context.Context) GlobalDNSRecordSpecEndpointsLoadBalancerServiceRefOutput
}

// LoadBalancerServiceRef contains a reference to the load balancer service that will receive the traffic, if using a router, put here the service created by the ingress controller.
type GlobalDNSRecordSpecEndpointsLoadBalancerServiceRefArgs struct {
	Name      pulumi.StringInput `pulumi:"name"`
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (GlobalDNSRecordSpecEndpointsLoadBalancerServiceRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSRecordSpecEndpointsLoadBalancerServiceRef)(nil)).Elem()
}

func (i GlobalDNSRecordSpecEndpointsLoadBalancerServiceRefArgs) ToGlobalDNSRecordSpecEndpointsLoadBalancerServiceRefOutput() GlobalDNSRecordSpecEndpointsLoadBalancerServiceRefOutput {
	return i.ToGlobalDNSRecordSpecEndpointsLoadBalancerServiceRefOutputWithContext(context.Background())
}

func (i GlobalDNSRecordSpecEndpointsLoadBalancerServiceRefArgs) ToGlobalDNSRecordSpecEndpointsLoadBalancerServiceRefOutputWithContext(ctx context.Context) GlobalDNSRecordSpecEndpointsLoadBalancerServiceRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordSpecEndpointsLoadBalancerServiceRefOutput)
}

// LoadBalancerServiceRef contains a reference to the load balancer service that will receive the traffic, if using a router, put here the service created by the ingress controller.
type GlobalDNSRecordSpecEndpointsLoadBalancerServiceRefOutput struct{ *pulumi.OutputState }

func (GlobalDNSRecordSpecEndpointsLoadBalancerServiceRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSRecordSpecEndpointsLoadBalancerServiceRef)(nil)).Elem()
}

func (o GlobalDNSRecordSpecEndpointsLoadBalancerServiceRefOutput) ToGlobalDNSRecordSpecEndpointsLoadBalancerServiceRefOutput() GlobalDNSRecordSpecEndpointsLoadBalancerServiceRefOutput {
	return o
}

func (o GlobalDNSRecordSpecEndpointsLoadBalancerServiceRefOutput) ToGlobalDNSRecordSpecEndpointsLoadBalancerServiceRefOutputWithContext(ctx context.Context) GlobalDNSRecordSpecEndpointsLoadBalancerServiceRefOutput {
	return o
}

func (o GlobalDNSRecordSpecEndpointsLoadBalancerServiceRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalDNSRecordSpecEndpointsLoadBalancerServiceRef) string { return v.Name }).(pulumi.StringOutput)
}

func (o GlobalDNSRecordSpecEndpointsLoadBalancerServiceRefOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalDNSRecordSpecEndpointsLoadBalancerServiceRef) string { return v.Namespace }).(pulumi.StringOutput)
}

// GlobalZoneRef represents the global zone that will be used to host this record
type GlobalDNSRecordSpecGlobalZoneRef struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
}

// GlobalDNSRecordSpecGlobalZoneRefInput is an input type that accepts GlobalDNSRecordSpecGlobalZoneRefArgs and GlobalDNSRecordSpecGlobalZoneRefOutput values.
// You can construct a concrete instance of `GlobalDNSRecordSpecGlobalZoneRefInput` via:
//
//          GlobalDNSRecordSpecGlobalZoneRefArgs{...}
type GlobalDNSRecordSpecGlobalZoneRefInput interface {
	pulumi.Input

	ToGlobalDNSRecordSpecGlobalZoneRefOutput() GlobalDNSRecordSpecGlobalZoneRefOutput
	ToGlobalDNSRecordSpecGlobalZoneRefOutputWithContext(context.Context) GlobalDNSRecordSpecGlobalZoneRefOutput
}

// GlobalZoneRef represents the global zone that will be used to host this record
type GlobalDNSRecordSpecGlobalZoneRefArgs struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GlobalDNSRecordSpecGlobalZoneRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSRecordSpecGlobalZoneRef)(nil)).Elem()
}

func (i GlobalDNSRecordSpecGlobalZoneRefArgs) ToGlobalDNSRecordSpecGlobalZoneRefOutput() GlobalDNSRecordSpecGlobalZoneRefOutput {
	return i.ToGlobalDNSRecordSpecGlobalZoneRefOutputWithContext(context.Background())
}

func (i GlobalDNSRecordSpecGlobalZoneRefArgs) ToGlobalDNSRecordSpecGlobalZoneRefOutputWithContext(ctx context.Context) GlobalDNSRecordSpecGlobalZoneRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordSpecGlobalZoneRefOutput)
}

func (i GlobalDNSRecordSpecGlobalZoneRefArgs) ToGlobalDNSRecordSpecGlobalZoneRefPtrOutput() GlobalDNSRecordSpecGlobalZoneRefPtrOutput {
	return i.ToGlobalDNSRecordSpecGlobalZoneRefPtrOutputWithContext(context.Background())
}

func (i GlobalDNSRecordSpecGlobalZoneRefArgs) ToGlobalDNSRecordSpecGlobalZoneRefPtrOutputWithContext(ctx context.Context) GlobalDNSRecordSpecGlobalZoneRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordSpecGlobalZoneRefOutput).ToGlobalDNSRecordSpecGlobalZoneRefPtrOutputWithContext(ctx)
}

// GlobalDNSRecordSpecGlobalZoneRefPtrInput is an input type that accepts GlobalDNSRecordSpecGlobalZoneRefArgs, GlobalDNSRecordSpecGlobalZoneRefPtr and GlobalDNSRecordSpecGlobalZoneRefPtrOutput values.
// You can construct a concrete instance of `GlobalDNSRecordSpecGlobalZoneRefPtrInput` via:
//
//          GlobalDNSRecordSpecGlobalZoneRefArgs{...}
//
//  or:
//
//          nil
type GlobalDNSRecordSpecGlobalZoneRefPtrInput interface {
	pulumi.Input

	ToGlobalDNSRecordSpecGlobalZoneRefPtrOutput() GlobalDNSRecordSpecGlobalZoneRefPtrOutput
	ToGlobalDNSRecordSpecGlobalZoneRefPtrOutputWithContext(context.Context) GlobalDNSRecordSpecGlobalZoneRefPtrOutput
}

type globalDNSRecordSpecGlobalZoneRefPtrType GlobalDNSRecordSpecGlobalZoneRefArgs

func GlobalDNSRecordSpecGlobalZoneRefPtr(v *GlobalDNSRecordSpecGlobalZoneRefArgs) GlobalDNSRecordSpecGlobalZoneRefPtrInput {
	return (*globalDNSRecordSpecGlobalZoneRefPtrType)(v)
}

func (*globalDNSRecordSpecGlobalZoneRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalDNSRecordSpecGlobalZoneRef)(nil)).Elem()
}

func (i *globalDNSRecordSpecGlobalZoneRefPtrType) ToGlobalDNSRecordSpecGlobalZoneRefPtrOutput() GlobalDNSRecordSpecGlobalZoneRefPtrOutput {
	return i.ToGlobalDNSRecordSpecGlobalZoneRefPtrOutputWithContext(context.Background())
}

func (i *globalDNSRecordSpecGlobalZoneRefPtrType) ToGlobalDNSRecordSpecGlobalZoneRefPtrOutputWithContext(ctx context.Context) GlobalDNSRecordSpecGlobalZoneRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordSpecGlobalZoneRefPtrOutput)
}

// GlobalZoneRef represents the global zone that will be used to host this record
type GlobalDNSRecordSpecGlobalZoneRefOutput struct{ *pulumi.OutputState }

func (GlobalDNSRecordSpecGlobalZoneRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSRecordSpecGlobalZoneRef)(nil)).Elem()
}

func (o GlobalDNSRecordSpecGlobalZoneRefOutput) ToGlobalDNSRecordSpecGlobalZoneRefOutput() GlobalDNSRecordSpecGlobalZoneRefOutput {
	return o
}

func (o GlobalDNSRecordSpecGlobalZoneRefOutput) ToGlobalDNSRecordSpecGlobalZoneRefOutputWithContext(ctx context.Context) GlobalDNSRecordSpecGlobalZoneRefOutput {
	return o
}

func (o GlobalDNSRecordSpecGlobalZoneRefOutput) ToGlobalDNSRecordSpecGlobalZoneRefPtrOutput() GlobalDNSRecordSpecGlobalZoneRefPtrOutput {
	return o.ToGlobalDNSRecordSpecGlobalZoneRefPtrOutputWithContext(context.Background())
}

func (o GlobalDNSRecordSpecGlobalZoneRefOutput) ToGlobalDNSRecordSpecGlobalZoneRefPtrOutputWithContext(ctx context.Context) GlobalDNSRecordSpecGlobalZoneRefPtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordSpecGlobalZoneRef) *GlobalDNSRecordSpecGlobalZoneRef {
		return &v
	}).(GlobalDNSRecordSpecGlobalZoneRefPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o GlobalDNSRecordSpecGlobalZoneRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordSpecGlobalZoneRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type GlobalDNSRecordSpecGlobalZoneRefPtrOutput struct{ *pulumi.OutputState }

func (GlobalDNSRecordSpecGlobalZoneRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalDNSRecordSpecGlobalZoneRef)(nil)).Elem()
}

func (o GlobalDNSRecordSpecGlobalZoneRefPtrOutput) ToGlobalDNSRecordSpecGlobalZoneRefPtrOutput() GlobalDNSRecordSpecGlobalZoneRefPtrOutput {
	return o
}

func (o GlobalDNSRecordSpecGlobalZoneRefPtrOutput) ToGlobalDNSRecordSpecGlobalZoneRefPtrOutputWithContext(ctx context.Context) GlobalDNSRecordSpecGlobalZoneRefPtrOutput {
	return o
}

func (o GlobalDNSRecordSpecGlobalZoneRefPtrOutput) Elem() GlobalDNSRecordSpecGlobalZoneRefOutput {
	return o.ApplyT(func(v *GlobalDNSRecordSpecGlobalZoneRef) GlobalDNSRecordSpecGlobalZoneRef { return *v }).(GlobalDNSRecordSpecGlobalZoneRefOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o GlobalDNSRecordSpecGlobalZoneRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalDNSRecordSpecGlobalZoneRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Probe is the health check used to probe the health of the applications and decide which IPs to return Only HttpAction is supported
type GlobalDNSRecordSpecHealthCheck struct {
	// One and only one of the following should be specified. Exec specifies the action to take.
	Exec *GlobalDNSRecordSpecHealthCheckExec `pulumi:"exec"`
	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold *int `pulumi:"failureThreshold"`
	// HTTPGet specifies the http request to perform.
	HttpGet *GlobalDNSRecordSpecHealthCheckHttpGet `pulumi:"httpGet"`
	// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	InitialDelaySeconds *int `pulumi:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
	PeriodSeconds *int `pulumi:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
	SuccessThreshold *int `pulumi:"successThreshold"`
	// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
	TcpSocket *GlobalDNSRecordSpecHealthCheckTcpSocket `pulumi:"tcpSocket"`
	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// GlobalDNSRecordSpecHealthCheckInput is an input type that accepts GlobalDNSRecordSpecHealthCheckArgs and GlobalDNSRecordSpecHealthCheckOutput values.
// You can construct a concrete instance of `GlobalDNSRecordSpecHealthCheckInput` via:
//
//          GlobalDNSRecordSpecHealthCheckArgs{...}
type GlobalDNSRecordSpecHealthCheckInput interface {
	pulumi.Input

	ToGlobalDNSRecordSpecHealthCheckOutput() GlobalDNSRecordSpecHealthCheckOutput
	ToGlobalDNSRecordSpecHealthCheckOutputWithContext(context.Context) GlobalDNSRecordSpecHealthCheckOutput
}

// Probe is the health check used to probe the health of the applications and decide which IPs to return Only HttpAction is supported
type GlobalDNSRecordSpecHealthCheckArgs struct {
	// One and only one of the following should be specified. Exec specifies the action to take.
	Exec GlobalDNSRecordSpecHealthCheckExecPtrInput `pulumi:"exec"`
	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
	FailureThreshold pulumi.IntPtrInput `pulumi:"failureThreshold"`
	// HTTPGet specifies the http request to perform.
	HttpGet GlobalDNSRecordSpecHealthCheckHttpGetPtrInput `pulumi:"httpGet"`
	// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	InitialDelaySeconds pulumi.IntPtrInput `pulumi:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
	PeriodSeconds pulumi.IntPtrInput `pulumi:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
	SuccessThreshold pulumi.IntPtrInput `pulumi:"successThreshold"`
	// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
	TcpSocket GlobalDNSRecordSpecHealthCheckTcpSocketPtrInput `pulumi:"tcpSocket"`
	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (GlobalDNSRecordSpecHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSRecordSpecHealthCheck)(nil)).Elem()
}

func (i GlobalDNSRecordSpecHealthCheckArgs) ToGlobalDNSRecordSpecHealthCheckOutput() GlobalDNSRecordSpecHealthCheckOutput {
	return i.ToGlobalDNSRecordSpecHealthCheckOutputWithContext(context.Background())
}

func (i GlobalDNSRecordSpecHealthCheckArgs) ToGlobalDNSRecordSpecHealthCheckOutputWithContext(ctx context.Context) GlobalDNSRecordSpecHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordSpecHealthCheckOutput)
}

func (i GlobalDNSRecordSpecHealthCheckArgs) ToGlobalDNSRecordSpecHealthCheckPtrOutput() GlobalDNSRecordSpecHealthCheckPtrOutput {
	return i.ToGlobalDNSRecordSpecHealthCheckPtrOutputWithContext(context.Background())
}

func (i GlobalDNSRecordSpecHealthCheckArgs) ToGlobalDNSRecordSpecHealthCheckPtrOutputWithContext(ctx context.Context) GlobalDNSRecordSpecHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordSpecHealthCheckOutput).ToGlobalDNSRecordSpecHealthCheckPtrOutputWithContext(ctx)
}

// GlobalDNSRecordSpecHealthCheckPtrInput is an input type that accepts GlobalDNSRecordSpecHealthCheckArgs, GlobalDNSRecordSpecHealthCheckPtr and GlobalDNSRecordSpecHealthCheckPtrOutput values.
// You can construct a concrete instance of `GlobalDNSRecordSpecHealthCheckPtrInput` via:
//
//          GlobalDNSRecordSpecHealthCheckArgs{...}
//
//  or:
//
//          nil
type GlobalDNSRecordSpecHealthCheckPtrInput interface {
	pulumi.Input

	ToGlobalDNSRecordSpecHealthCheckPtrOutput() GlobalDNSRecordSpecHealthCheckPtrOutput
	ToGlobalDNSRecordSpecHealthCheckPtrOutputWithContext(context.Context) GlobalDNSRecordSpecHealthCheckPtrOutput
}

type globalDNSRecordSpecHealthCheckPtrType GlobalDNSRecordSpecHealthCheckArgs

func GlobalDNSRecordSpecHealthCheckPtr(v *GlobalDNSRecordSpecHealthCheckArgs) GlobalDNSRecordSpecHealthCheckPtrInput {
	return (*globalDNSRecordSpecHealthCheckPtrType)(v)
}

func (*globalDNSRecordSpecHealthCheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalDNSRecordSpecHealthCheck)(nil)).Elem()
}

func (i *globalDNSRecordSpecHealthCheckPtrType) ToGlobalDNSRecordSpecHealthCheckPtrOutput() GlobalDNSRecordSpecHealthCheckPtrOutput {
	return i.ToGlobalDNSRecordSpecHealthCheckPtrOutputWithContext(context.Background())
}

func (i *globalDNSRecordSpecHealthCheckPtrType) ToGlobalDNSRecordSpecHealthCheckPtrOutputWithContext(ctx context.Context) GlobalDNSRecordSpecHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordSpecHealthCheckPtrOutput)
}

// Probe is the health check used to probe the health of the applications and decide which IPs to return Only HttpAction is supported
type GlobalDNSRecordSpecHealthCheckOutput struct{ *pulumi.OutputState }

func (GlobalDNSRecordSpecHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSRecordSpecHealthCheck)(nil)).Elem()
}

func (o GlobalDNSRecordSpecHealthCheckOutput) ToGlobalDNSRecordSpecHealthCheckOutput() GlobalDNSRecordSpecHealthCheckOutput {
	return o
}

func (o GlobalDNSRecordSpecHealthCheckOutput) ToGlobalDNSRecordSpecHealthCheckOutputWithContext(ctx context.Context) GlobalDNSRecordSpecHealthCheckOutput {
	return o
}

func (o GlobalDNSRecordSpecHealthCheckOutput) ToGlobalDNSRecordSpecHealthCheckPtrOutput() GlobalDNSRecordSpecHealthCheckPtrOutput {
	return o.ToGlobalDNSRecordSpecHealthCheckPtrOutputWithContext(context.Background())
}

func (o GlobalDNSRecordSpecHealthCheckOutput) ToGlobalDNSRecordSpecHealthCheckPtrOutputWithContext(ctx context.Context) GlobalDNSRecordSpecHealthCheckPtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordSpecHealthCheck) *GlobalDNSRecordSpecHealthCheck {
		return &v
	}).(GlobalDNSRecordSpecHealthCheckPtrOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
func (o GlobalDNSRecordSpecHealthCheckOutput) Exec() GlobalDNSRecordSpecHealthCheckExecPtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordSpecHealthCheck) *GlobalDNSRecordSpecHealthCheckExec { return v.Exec }).(GlobalDNSRecordSpecHealthCheckExecPtrOutput)
}

// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
func (o GlobalDNSRecordSpecHealthCheckOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordSpecHealthCheck) *int { return v.FailureThreshold }).(pulumi.IntPtrOutput)
}

// HTTPGet specifies the http request to perform.
func (o GlobalDNSRecordSpecHealthCheckOutput) HttpGet() GlobalDNSRecordSpecHealthCheckHttpGetPtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordSpecHealthCheck) *GlobalDNSRecordSpecHealthCheckHttpGet { return v.HttpGet }).(GlobalDNSRecordSpecHealthCheckHttpGetPtrOutput)
}

// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o GlobalDNSRecordSpecHealthCheckOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordSpecHealthCheck) *int { return v.InitialDelaySeconds }).(pulumi.IntPtrOutput)
}

// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
func (o GlobalDNSRecordSpecHealthCheckOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordSpecHealthCheck) *int { return v.PeriodSeconds }).(pulumi.IntPtrOutput)
}

// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
func (o GlobalDNSRecordSpecHealthCheckOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordSpecHealthCheck) *int { return v.SuccessThreshold }).(pulumi.IntPtrOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
func (o GlobalDNSRecordSpecHealthCheckOutput) TcpSocket() GlobalDNSRecordSpecHealthCheckTcpSocketPtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordSpecHealthCheck) *GlobalDNSRecordSpecHealthCheckTcpSocket { return v.TcpSocket }).(GlobalDNSRecordSpecHealthCheckTcpSocketPtrOutput)
}

// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o GlobalDNSRecordSpecHealthCheckOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordSpecHealthCheck) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type GlobalDNSRecordSpecHealthCheckPtrOutput struct{ *pulumi.OutputState }

func (GlobalDNSRecordSpecHealthCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalDNSRecordSpecHealthCheck)(nil)).Elem()
}

func (o GlobalDNSRecordSpecHealthCheckPtrOutput) ToGlobalDNSRecordSpecHealthCheckPtrOutput() GlobalDNSRecordSpecHealthCheckPtrOutput {
	return o
}

func (o GlobalDNSRecordSpecHealthCheckPtrOutput) ToGlobalDNSRecordSpecHealthCheckPtrOutputWithContext(ctx context.Context) GlobalDNSRecordSpecHealthCheckPtrOutput {
	return o
}

func (o GlobalDNSRecordSpecHealthCheckPtrOutput) Elem() GlobalDNSRecordSpecHealthCheckOutput {
	return o.ApplyT(func(v *GlobalDNSRecordSpecHealthCheck) GlobalDNSRecordSpecHealthCheck { return *v }).(GlobalDNSRecordSpecHealthCheckOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
func (o GlobalDNSRecordSpecHealthCheckPtrOutput) Exec() GlobalDNSRecordSpecHealthCheckExecPtrOutput {
	return o.ApplyT(func(v *GlobalDNSRecordSpecHealthCheck) *GlobalDNSRecordSpecHealthCheckExec {
		if v == nil {
			return nil
		}
		return v.Exec
	}).(GlobalDNSRecordSpecHealthCheckExecPtrOutput)
}

// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
func (o GlobalDNSRecordSpecHealthCheckPtrOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GlobalDNSRecordSpecHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.FailureThreshold
	}).(pulumi.IntPtrOutput)
}

// HTTPGet specifies the http request to perform.
func (o GlobalDNSRecordSpecHealthCheckPtrOutput) HttpGet() GlobalDNSRecordSpecHealthCheckHttpGetPtrOutput {
	return o.ApplyT(func(v *GlobalDNSRecordSpecHealthCheck) *GlobalDNSRecordSpecHealthCheckHttpGet {
		if v == nil {
			return nil
		}
		return v.HttpGet
	}).(GlobalDNSRecordSpecHealthCheckHttpGetPtrOutput)
}

// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o GlobalDNSRecordSpecHealthCheckPtrOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GlobalDNSRecordSpecHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.InitialDelaySeconds
	}).(pulumi.IntPtrOutput)
}

// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
func (o GlobalDNSRecordSpecHealthCheckPtrOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GlobalDNSRecordSpecHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.PeriodSeconds
	}).(pulumi.IntPtrOutput)
}

// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
func (o GlobalDNSRecordSpecHealthCheckPtrOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GlobalDNSRecordSpecHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.SuccessThreshold
	}).(pulumi.IntPtrOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
func (o GlobalDNSRecordSpecHealthCheckPtrOutput) TcpSocket() GlobalDNSRecordSpecHealthCheckTcpSocketPtrOutput {
	return o.ApplyT(func(v *GlobalDNSRecordSpecHealthCheck) *GlobalDNSRecordSpecHealthCheckTcpSocket {
		if v == nil {
			return nil
		}
		return v.TcpSocket
	}).(GlobalDNSRecordSpecHealthCheckTcpSocketPtrOutput)
}

// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o GlobalDNSRecordSpecHealthCheckPtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GlobalDNSRecordSpecHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
type GlobalDNSRecordSpecHealthCheckExec struct {
	// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command []string `pulumi:"command"`
}

// GlobalDNSRecordSpecHealthCheckExecInput is an input type that accepts GlobalDNSRecordSpecHealthCheckExecArgs and GlobalDNSRecordSpecHealthCheckExecOutput values.
// You can construct a concrete instance of `GlobalDNSRecordSpecHealthCheckExecInput` via:
//
//          GlobalDNSRecordSpecHealthCheckExecArgs{...}
type GlobalDNSRecordSpecHealthCheckExecInput interface {
	pulumi.Input

	ToGlobalDNSRecordSpecHealthCheckExecOutput() GlobalDNSRecordSpecHealthCheckExecOutput
	ToGlobalDNSRecordSpecHealthCheckExecOutputWithContext(context.Context) GlobalDNSRecordSpecHealthCheckExecOutput
}

// One and only one of the following should be specified. Exec specifies the action to take.
type GlobalDNSRecordSpecHealthCheckExecArgs struct {
	// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command pulumi.StringArrayInput `pulumi:"command"`
}

func (GlobalDNSRecordSpecHealthCheckExecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSRecordSpecHealthCheckExec)(nil)).Elem()
}

func (i GlobalDNSRecordSpecHealthCheckExecArgs) ToGlobalDNSRecordSpecHealthCheckExecOutput() GlobalDNSRecordSpecHealthCheckExecOutput {
	return i.ToGlobalDNSRecordSpecHealthCheckExecOutputWithContext(context.Background())
}

func (i GlobalDNSRecordSpecHealthCheckExecArgs) ToGlobalDNSRecordSpecHealthCheckExecOutputWithContext(ctx context.Context) GlobalDNSRecordSpecHealthCheckExecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordSpecHealthCheckExecOutput)
}

func (i GlobalDNSRecordSpecHealthCheckExecArgs) ToGlobalDNSRecordSpecHealthCheckExecPtrOutput() GlobalDNSRecordSpecHealthCheckExecPtrOutput {
	return i.ToGlobalDNSRecordSpecHealthCheckExecPtrOutputWithContext(context.Background())
}

func (i GlobalDNSRecordSpecHealthCheckExecArgs) ToGlobalDNSRecordSpecHealthCheckExecPtrOutputWithContext(ctx context.Context) GlobalDNSRecordSpecHealthCheckExecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordSpecHealthCheckExecOutput).ToGlobalDNSRecordSpecHealthCheckExecPtrOutputWithContext(ctx)
}

// GlobalDNSRecordSpecHealthCheckExecPtrInput is an input type that accepts GlobalDNSRecordSpecHealthCheckExecArgs, GlobalDNSRecordSpecHealthCheckExecPtr and GlobalDNSRecordSpecHealthCheckExecPtrOutput values.
// You can construct a concrete instance of `GlobalDNSRecordSpecHealthCheckExecPtrInput` via:
//
//          GlobalDNSRecordSpecHealthCheckExecArgs{...}
//
//  or:
//
//          nil
type GlobalDNSRecordSpecHealthCheckExecPtrInput interface {
	pulumi.Input

	ToGlobalDNSRecordSpecHealthCheckExecPtrOutput() GlobalDNSRecordSpecHealthCheckExecPtrOutput
	ToGlobalDNSRecordSpecHealthCheckExecPtrOutputWithContext(context.Context) GlobalDNSRecordSpecHealthCheckExecPtrOutput
}

type globalDNSRecordSpecHealthCheckExecPtrType GlobalDNSRecordSpecHealthCheckExecArgs

func GlobalDNSRecordSpecHealthCheckExecPtr(v *GlobalDNSRecordSpecHealthCheckExecArgs) GlobalDNSRecordSpecHealthCheckExecPtrInput {
	return (*globalDNSRecordSpecHealthCheckExecPtrType)(v)
}

func (*globalDNSRecordSpecHealthCheckExecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalDNSRecordSpecHealthCheckExec)(nil)).Elem()
}

func (i *globalDNSRecordSpecHealthCheckExecPtrType) ToGlobalDNSRecordSpecHealthCheckExecPtrOutput() GlobalDNSRecordSpecHealthCheckExecPtrOutput {
	return i.ToGlobalDNSRecordSpecHealthCheckExecPtrOutputWithContext(context.Background())
}

func (i *globalDNSRecordSpecHealthCheckExecPtrType) ToGlobalDNSRecordSpecHealthCheckExecPtrOutputWithContext(ctx context.Context) GlobalDNSRecordSpecHealthCheckExecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordSpecHealthCheckExecPtrOutput)
}

// One and only one of the following should be specified. Exec specifies the action to take.
type GlobalDNSRecordSpecHealthCheckExecOutput struct{ *pulumi.OutputState }

func (GlobalDNSRecordSpecHealthCheckExecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSRecordSpecHealthCheckExec)(nil)).Elem()
}

func (o GlobalDNSRecordSpecHealthCheckExecOutput) ToGlobalDNSRecordSpecHealthCheckExecOutput() GlobalDNSRecordSpecHealthCheckExecOutput {
	return o
}

func (o GlobalDNSRecordSpecHealthCheckExecOutput) ToGlobalDNSRecordSpecHealthCheckExecOutputWithContext(ctx context.Context) GlobalDNSRecordSpecHealthCheckExecOutput {
	return o
}

func (o GlobalDNSRecordSpecHealthCheckExecOutput) ToGlobalDNSRecordSpecHealthCheckExecPtrOutput() GlobalDNSRecordSpecHealthCheckExecPtrOutput {
	return o.ToGlobalDNSRecordSpecHealthCheckExecPtrOutputWithContext(context.Background())
}

func (o GlobalDNSRecordSpecHealthCheckExecOutput) ToGlobalDNSRecordSpecHealthCheckExecPtrOutputWithContext(ctx context.Context) GlobalDNSRecordSpecHealthCheckExecPtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordSpecHealthCheckExec) *GlobalDNSRecordSpecHealthCheckExec {
		return &v
	}).(GlobalDNSRecordSpecHealthCheckExecPtrOutput)
}

// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
func (o GlobalDNSRecordSpecHealthCheckExecOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GlobalDNSRecordSpecHealthCheckExec) []string { return v.Command }).(pulumi.StringArrayOutput)
}

type GlobalDNSRecordSpecHealthCheckExecPtrOutput struct{ *pulumi.OutputState }

func (GlobalDNSRecordSpecHealthCheckExecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalDNSRecordSpecHealthCheckExec)(nil)).Elem()
}

func (o GlobalDNSRecordSpecHealthCheckExecPtrOutput) ToGlobalDNSRecordSpecHealthCheckExecPtrOutput() GlobalDNSRecordSpecHealthCheckExecPtrOutput {
	return o
}

func (o GlobalDNSRecordSpecHealthCheckExecPtrOutput) ToGlobalDNSRecordSpecHealthCheckExecPtrOutputWithContext(ctx context.Context) GlobalDNSRecordSpecHealthCheckExecPtrOutput {
	return o
}

func (o GlobalDNSRecordSpecHealthCheckExecPtrOutput) Elem() GlobalDNSRecordSpecHealthCheckExecOutput {
	return o.ApplyT(func(v *GlobalDNSRecordSpecHealthCheckExec) GlobalDNSRecordSpecHealthCheckExec { return *v }).(GlobalDNSRecordSpecHealthCheckExecOutput)
}

// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
func (o GlobalDNSRecordSpecHealthCheckExecPtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GlobalDNSRecordSpecHealthCheckExec) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

// HTTPGet specifies the http request to perform.
type GlobalDNSRecordSpecHealthCheckHttpGet struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host *string `pulumi:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders []GlobalDNSRecordSpecHealthCheckHttpGetHttpHeaders `pulumi:"httpHeaders"`
	// Path to access on the HTTP server.
	Path *string `pulumi:"path"`
	// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port GlobalDNSRecordSpecHealthCheckHttpGetPort `pulumi:"port"`
	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme *string `pulumi:"scheme"`
}

// GlobalDNSRecordSpecHealthCheckHttpGetInput is an input type that accepts GlobalDNSRecordSpecHealthCheckHttpGetArgs and GlobalDNSRecordSpecHealthCheckHttpGetOutput values.
// You can construct a concrete instance of `GlobalDNSRecordSpecHealthCheckHttpGetInput` via:
//
//          GlobalDNSRecordSpecHealthCheckHttpGetArgs{...}
type GlobalDNSRecordSpecHealthCheckHttpGetInput interface {
	pulumi.Input

	ToGlobalDNSRecordSpecHealthCheckHttpGetOutput() GlobalDNSRecordSpecHealthCheckHttpGetOutput
	ToGlobalDNSRecordSpecHealthCheckHttpGetOutputWithContext(context.Context) GlobalDNSRecordSpecHealthCheckHttpGetOutput
}

// HTTPGet specifies the http request to perform.
type GlobalDNSRecordSpecHealthCheckHttpGetArgs struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersArrayInput `pulumi:"httpHeaders"`
	// Path to access on the HTTP server.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port GlobalDNSRecordSpecHealthCheckHttpGetPortInput `pulumi:"port"`
	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme pulumi.StringPtrInput `pulumi:"scheme"`
}

func (GlobalDNSRecordSpecHealthCheckHttpGetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSRecordSpecHealthCheckHttpGet)(nil)).Elem()
}

func (i GlobalDNSRecordSpecHealthCheckHttpGetArgs) ToGlobalDNSRecordSpecHealthCheckHttpGetOutput() GlobalDNSRecordSpecHealthCheckHttpGetOutput {
	return i.ToGlobalDNSRecordSpecHealthCheckHttpGetOutputWithContext(context.Background())
}

func (i GlobalDNSRecordSpecHealthCheckHttpGetArgs) ToGlobalDNSRecordSpecHealthCheckHttpGetOutputWithContext(ctx context.Context) GlobalDNSRecordSpecHealthCheckHttpGetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordSpecHealthCheckHttpGetOutput)
}

func (i GlobalDNSRecordSpecHealthCheckHttpGetArgs) ToGlobalDNSRecordSpecHealthCheckHttpGetPtrOutput() GlobalDNSRecordSpecHealthCheckHttpGetPtrOutput {
	return i.ToGlobalDNSRecordSpecHealthCheckHttpGetPtrOutputWithContext(context.Background())
}

func (i GlobalDNSRecordSpecHealthCheckHttpGetArgs) ToGlobalDNSRecordSpecHealthCheckHttpGetPtrOutputWithContext(ctx context.Context) GlobalDNSRecordSpecHealthCheckHttpGetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordSpecHealthCheckHttpGetOutput).ToGlobalDNSRecordSpecHealthCheckHttpGetPtrOutputWithContext(ctx)
}

// GlobalDNSRecordSpecHealthCheckHttpGetPtrInput is an input type that accepts GlobalDNSRecordSpecHealthCheckHttpGetArgs, GlobalDNSRecordSpecHealthCheckHttpGetPtr and GlobalDNSRecordSpecHealthCheckHttpGetPtrOutput values.
// You can construct a concrete instance of `GlobalDNSRecordSpecHealthCheckHttpGetPtrInput` via:
//
//          GlobalDNSRecordSpecHealthCheckHttpGetArgs{...}
//
//  or:
//
//          nil
type GlobalDNSRecordSpecHealthCheckHttpGetPtrInput interface {
	pulumi.Input

	ToGlobalDNSRecordSpecHealthCheckHttpGetPtrOutput() GlobalDNSRecordSpecHealthCheckHttpGetPtrOutput
	ToGlobalDNSRecordSpecHealthCheckHttpGetPtrOutputWithContext(context.Context) GlobalDNSRecordSpecHealthCheckHttpGetPtrOutput
}

type globalDNSRecordSpecHealthCheckHttpGetPtrType GlobalDNSRecordSpecHealthCheckHttpGetArgs

func GlobalDNSRecordSpecHealthCheckHttpGetPtr(v *GlobalDNSRecordSpecHealthCheckHttpGetArgs) GlobalDNSRecordSpecHealthCheckHttpGetPtrInput {
	return (*globalDNSRecordSpecHealthCheckHttpGetPtrType)(v)
}

func (*globalDNSRecordSpecHealthCheckHttpGetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalDNSRecordSpecHealthCheckHttpGet)(nil)).Elem()
}

func (i *globalDNSRecordSpecHealthCheckHttpGetPtrType) ToGlobalDNSRecordSpecHealthCheckHttpGetPtrOutput() GlobalDNSRecordSpecHealthCheckHttpGetPtrOutput {
	return i.ToGlobalDNSRecordSpecHealthCheckHttpGetPtrOutputWithContext(context.Background())
}

func (i *globalDNSRecordSpecHealthCheckHttpGetPtrType) ToGlobalDNSRecordSpecHealthCheckHttpGetPtrOutputWithContext(ctx context.Context) GlobalDNSRecordSpecHealthCheckHttpGetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordSpecHealthCheckHttpGetPtrOutput)
}

// HTTPGet specifies the http request to perform.
type GlobalDNSRecordSpecHealthCheckHttpGetOutput struct{ *pulumi.OutputState }

func (GlobalDNSRecordSpecHealthCheckHttpGetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSRecordSpecHealthCheckHttpGet)(nil)).Elem()
}

func (o GlobalDNSRecordSpecHealthCheckHttpGetOutput) ToGlobalDNSRecordSpecHealthCheckHttpGetOutput() GlobalDNSRecordSpecHealthCheckHttpGetOutput {
	return o
}

func (o GlobalDNSRecordSpecHealthCheckHttpGetOutput) ToGlobalDNSRecordSpecHealthCheckHttpGetOutputWithContext(ctx context.Context) GlobalDNSRecordSpecHealthCheckHttpGetOutput {
	return o
}

func (o GlobalDNSRecordSpecHealthCheckHttpGetOutput) ToGlobalDNSRecordSpecHealthCheckHttpGetPtrOutput() GlobalDNSRecordSpecHealthCheckHttpGetPtrOutput {
	return o.ToGlobalDNSRecordSpecHealthCheckHttpGetPtrOutputWithContext(context.Background())
}

func (o GlobalDNSRecordSpecHealthCheckHttpGetOutput) ToGlobalDNSRecordSpecHealthCheckHttpGetPtrOutputWithContext(ctx context.Context) GlobalDNSRecordSpecHealthCheckHttpGetPtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordSpecHealthCheckHttpGet) *GlobalDNSRecordSpecHealthCheckHttpGet {
		return &v
	}).(GlobalDNSRecordSpecHealthCheckHttpGetPtrOutput)
}

// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
func (o GlobalDNSRecordSpecHealthCheckHttpGetOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordSpecHealthCheckHttpGet) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o GlobalDNSRecordSpecHealthCheckHttpGetOutput) HttpHeaders() GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersArrayOutput {
	return o.ApplyT(func(v GlobalDNSRecordSpecHealthCheckHttpGet) []GlobalDNSRecordSpecHealthCheckHttpGetHttpHeaders {
		return v.HttpHeaders
	}).(GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersArrayOutput)
}

// Path to access on the HTTP server.
func (o GlobalDNSRecordSpecHealthCheckHttpGetOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordSpecHealthCheckHttpGet) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o GlobalDNSRecordSpecHealthCheckHttpGetOutput) Port() GlobalDNSRecordSpecHealthCheckHttpGetPortOutput {
	return o.ApplyT(func(v GlobalDNSRecordSpecHealthCheckHttpGet) GlobalDNSRecordSpecHealthCheckHttpGetPort { return v.Port }).(GlobalDNSRecordSpecHealthCheckHttpGetPortOutput)
}

// Scheme to use for connecting to the host. Defaults to HTTP.
func (o GlobalDNSRecordSpecHealthCheckHttpGetOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordSpecHealthCheckHttpGet) *string { return v.Scheme }).(pulumi.StringPtrOutput)
}

type GlobalDNSRecordSpecHealthCheckHttpGetPtrOutput struct{ *pulumi.OutputState }

func (GlobalDNSRecordSpecHealthCheckHttpGetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalDNSRecordSpecHealthCheckHttpGet)(nil)).Elem()
}

func (o GlobalDNSRecordSpecHealthCheckHttpGetPtrOutput) ToGlobalDNSRecordSpecHealthCheckHttpGetPtrOutput() GlobalDNSRecordSpecHealthCheckHttpGetPtrOutput {
	return o
}

func (o GlobalDNSRecordSpecHealthCheckHttpGetPtrOutput) ToGlobalDNSRecordSpecHealthCheckHttpGetPtrOutputWithContext(ctx context.Context) GlobalDNSRecordSpecHealthCheckHttpGetPtrOutput {
	return o
}

func (o GlobalDNSRecordSpecHealthCheckHttpGetPtrOutput) Elem() GlobalDNSRecordSpecHealthCheckHttpGetOutput {
	return o.ApplyT(func(v *GlobalDNSRecordSpecHealthCheckHttpGet) GlobalDNSRecordSpecHealthCheckHttpGet { return *v }).(GlobalDNSRecordSpecHealthCheckHttpGetOutput)
}

// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
func (o GlobalDNSRecordSpecHealthCheckHttpGetPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalDNSRecordSpecHealthCheckHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o GlobalDNSRecordSpecHealthCheckHttpGetPtrOutput) HttpHeaders() GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersArrayOutput {
	return o.ApplyT(func(v *GlobalDNSRecordSpecHealthCheckHttpGet) []GlobalDNSRecordSpecHealthCheckHttpGetHttpHeaders {
		if v == nil {
			return nil
		}
		return v.HttpHeaders
	}).(GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersArrayOutput)
}

// Path to access on the HTTP server.
func (o GlobalDNSRecordSpecHealthCheckHttpGetPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalDNSRecordSpecHealthCheckHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o GlobalDNSRecordSpecHealthCheckHttpGetPtrOutput) Port() GlobalDNSRecordSpecHealthCheckHttpGetPortPtrOutput {
	return o.ApplyT(func(v *GlobalDNSRecordSpecHealthCheckHttpGet) *GlobalDNSRecordSpecHealthCheckHttpGetPort {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(GlobalDNSRecordSpecHealthCheckHttpGetPortPtrOutput)
}

// Scheme to use for connecting to the host. Defaults to HTTP.
func (o GlobalDNSRecordSpecHealthCheckHttpGetPtrOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalDNSRecordSpecHealthCheckHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Scheme
	}).(pulumi.StringPtrOutput)
}

// HTTPHeader describes a custom header to be used in HTTP probes
type GlobalDNSRecordSpecHealthCheckHttpGetHttpHeaders struct {
	// The header field name
	Name string `pulumi:"name"`
	// The header field value
	Value string `pulumi:"value"`
}

// GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersInput is an input type that accepts GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersArgs and GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersOutput values.
// You can construct a concrete instance of `GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersInput` via:
//
//          GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersArgs{...}
type GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersInput interface {
	pulumi.Input

	ToGlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersOutput() GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersOutput
	ToGlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersOutputWithContext(context.Context) GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersOutput
}

// HTTPHeader describes a custom header to be used in HTTP probes
type GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersArgs struct {
	// The header field name
	Name pulumi.StringInput `pulumi:"name"`
	// The header field value
	Value pulumi.StringInput `pulumi:"value"`
}

func (GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSRecordSpecHealthCheckHttpGetHttpHeaders)(nil)).Elem()
}

func (i GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersArgs) ToGlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersOutput() GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersOutput {
	return i.ToGlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersOutputWithContext(context.Background())
}

func (i GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersArgs) ToGlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersOutputWithContext(ctx context.Context) GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersOutput)
}

// GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersArrayInput is an input type that accepts GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersArray and GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersArrayOutput values.
// You can construct a concrete instance of `GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersArrayInput` via:
//
//          GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersArray{ GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersArgs{...} }
type GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersArrayInput interface {
	pulumi.Input

	ToGlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersArrayOutput() GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersArrayOutput
	ToGlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersArrayOutputWithContext(context.Context) GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersArrayOutput
}

type GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersArray []GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersInput

func (GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GlobalDNSRecordSpecHealthCheckHttpGetHttpHeaders)(nil)).Elem()
}

func (i GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersArray) ToGlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersArrayOutput() GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersArrayOutput {
	return i.ToGlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersArrayOutputWithContext(context.Background())
}

func (i GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersArray) ToGlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersArrayOutputWithContext(ctx context.Context) GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersArrayOutput)
}

// HTTPHeader describes a custom header to be used in HTTP probes
type GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersOutput struct{ *pulumi.OutputState }

func (GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSRecordSpecHealthCheckHttpGetHttpHeaders)(nil)).Elem()
}

func (o GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersOutput) ToGlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersOutput() GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersOutput {
	return o
}

func (o GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersOutput) ToGlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersOutputWithContext(ctx context.Context) GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersOutput {
	return o
}

// The header field name
func (o GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalDNSRecordSpecHealthCheckHttpGetHttpHeaders) string { return v.Name }).(pulumi.StringOutput)
}

// The header field value
func (o GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalDNSRecordSpecHealthCheckHttpGetHttpHeaders) string { return v.Value }).(pulumi.StringOutput)
}

type GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersArrayOutput struct{ *pulumi.OutputState }

func (GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GlobalDNSRecordSpecHealthCheckHttpGetHttpHeaders)(nil)).Elem()
}

func (o GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersArrayOutput) ToGlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersArrayOutput() GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersArrayOutput {
	return o
}

func (o GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersArrayOutput) ToGlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersArrayOutputWithContext(ctx context.Context) GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersArrayOutput {
	return o
}

func (o GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersArrayOutput) Index(i pulumi.IntInput) GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GlobalDNSRecordSpecHealthCheckHttpGetHttpHeaders {
		return vs[0].([]GlobalDNSRecordSpecHealthCheckHttpGetHttpHeaders)[vs[1].(int)]
	}).(GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersOutput)
}

type GlobalDNSRecordSpecHealthCheckHttpGetPort struct {
}

// GlobalDNSRecordSpecHealthCheckHttpGetPortInput is an input type that accepts GlobalDNSRecordSpecHealthCheckHttpGetPortArgs and GlobalDNSRecordSpecHealthCheckHttpGetPortOutput values.
// You can construct a concrete instance of `GlobalDNSRecordSpecHealthCheckHttpGetPortInput` via:
//
//          GlobalDNSRecordSpecHealthCheckHttpGetPortArgs{...}
type GlobalDNSRecordSpecHealthCheckHttpGetPortInput interface {
	pulumi.Input

	ToGlobalDNSRecordSpecHealthCheckHttpGetPortOutput() GlobalDNSRecordSpecHealthCheckHttpGetPortOutput
	ToGlobalDNSRecordSpecHealthCheckHttpGetPortOutputWithContext(context.Context) GlobalDNSRecordSpecHealthCheckHttpGetPortOutput
}

type GlobalDNSRecordSpecHealthCheckHttpGetPortArgs struct {
}

func (GlobalDNSRecordSpecHealthCheckHttpGetPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSRecordSpecHealthCheckHttpGetPort)(nil)).Elem()
}

func (i GlobalDNSRecordSpecHealthCheckHttpGetPortArgs) ToGlobalDNSRecordSpecHealthCheckHttpGetPortOutput() GlobalDNSRecordSpecHealthCheckHttpGetPortOutput {
	return i.ToGlobalDNSRecordSpecHealthCheckHttpGetPortOutputWithContext(context.Background())
}

func (i GlobalDNSRecordSpecHealthCheckHttpGetPortArgs) ToGlobalDNSRecordSpecHealthCheckHttpGetPortOutputWithContext(ctx context.Context) GlobalDNSRecordSpecHealthCheckHttpGetPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordSpecHealthCheckHttpGetPortOutput)
}

func (i GlobalDNSRecordSpecHealthCheckHttpGetPortArgs) ToGlobalDNSRecordSpecHealthCheckHttpGetPortPtrOutput() GlobalDNSRecordSpecHealthCheckHttpGetPortPtrOutput {
	return i.ToGlobalDNSRecordSpecHealthCheckHttpGetPortPtrOutputWithContext(context.Background())
}

func (i GlobalDNSRecordSpecHealthCheckHttpGetPortArgs) ToGlobalDNSRecordSpecHealthCheckHttpGetPortPtrOutputWithContext(ctx context.Context) GlobalDNSRecordSpecHealthCheckHttpGetPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordSpecHealthCheckHttpGetPortOutput).ToGlobalDNSRecordSpecHealthCheckHttpGetPortPtrOutputWithContext(ctx)
}

// GlobalDNSRecordSpecHealthCheckHttpGetPortPtrInput is an input type that accepts GlobalDNSRecordSpecHealthCheckHttpGetPortArgs, GlobalDNSRecordSpecHealthCheckHttpGetPortPtr and GlobalDNSRecordSpecHealthCheckHttpGetPortPtrOutput values.
// You can construct a concrete instance of `GlobalDNSRecordSpecHealthCheckHttpGetPortPtrInput` via:
//
//          GlobalDNSRecordSpecHealthCheckHttpGetPortArgs{...}
//
//  or:
//
//          nil
type GlobalDNSRecordSpecHealthCheckHttpGetPortPtrInput interface {
	pulumi.Input

	ToGlobalDNSRecordSpecHealthCheckHttpGetPortPtrOutput() GlobalDNSRecordSpecHealthCheckHttpGetPortPtrOutput
	ToGlobalDNSRecordSpecHealthCheckHttpGetPortPtrOutputWithContext(context.Context) GlobalDNSRecordSpecHealthCheckHttpGetPortPtrOutput
}

type globalDNSRecordSpecHealthCheckHttpGetPortPtrType GlobalDNSRecordSpecHealthCheckHttpGetPortArgs

func GlobalDNSRecordSpecHealthCheckHttpGetPortPtr(v *GlobalDNSRecordSpecHealthCheckHttpGetPortArgs) GlobalDNSRecordSpecHealthCheckHttpGetPortPtrInput {
	return (*globalDNSRecordSpecHealthCheckHttpGetPortPtrType)(v)
}

func (*globalDNSRecordSpecHealthCheckHttpGetPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalDNSRecordSpecHealthCheckHttpGetPort)(nil)).Elem()
}

func (i *globalDNSRecordSpecHealthCheckHttpGetPortPtrType) ToGlobalDNSRecordSpecHealthCheckHttpGetPortPtrOutput() GlobalDNSRecordSpecHealthCheckHttpGetPortPtrOutput {
	return i.ToGlobalDNSRecordSpecHealthCheckHttpGetPortPtrOutputWithContext(context.Background())
}

func (i *globalDNSRecordSpecHealthCheckHttpGetPortPtrType) ToGlobalDNSRecordSpecHealthCheckHttpGetPortPtrOutputWithContext(ctx context.Context) GlobalDNSRecordSpecHealthCheckHttpGetPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordSpecHealthCheckHttpGetPortPtrOutput)
}

type GlobalDNSRecordSpecHealthCheckHttpGetPortOutput struct{ *pulumi.OutputState }

func (GlobalDNSRecordSpecHealthCheckHttpGetPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSRecordSpecHealthCheckHttpGetPort)(nil)).Elem()
}

func (o GlobalDNSRecordSpecHealthCheckHttpGetPortOutput) ToGlobalDNSRecordSpecHealthCheckHttpGetPortOutput() GlobalDNSRecordSpecHealthCheckHttpGetPortOutput {
	return o
}

func (o GlobalDNSRecordSpecHealthCheckHttpGetPortOutput) ToGlobalDNSRecordSpecHealthCheckHttpGetPortOutputWithContext(ctx context.Context) GlobalDNSRecordSpecHealthCheckHttpGetPortOutput {
	return o
}

func (o GlobalDNSRecordSpecHealthCheckHttpGetPortOutput) ToGlobalDNSRecordSpecHealthCheckHttpGetPortPtrOutput() GlobalDNSRecordSpecHealthCheckHttpGetPortPtrOutput {
	return o.ToGlobalDNSRecordSpecHealthCheckHttpGetPortPtrOutputWithContext(context.Background())
}

func (o GlobalDNSRecordSpecHealthCheckHttpGetPortOutput) ToGlobalDNSRecordSpecHealthCheckHttpGetPortPtrOutputWithContext(ctx context.Context) GlobalDNSRecordSpecHealthCheckHttpGetPortPtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordSpecHealthCheckHttpGetPort) *GlobalDNSRecordSpecHealthCheckHttpGetPort {
		return &v
	}).(GlobalDNSRecordSpecHealthCheckHttpGetPortPtrOutput)
}

type GlobalDNSRecordSpecHealthCheckHttpGetPortPtrOutput struct{ *pulumi.OutputState }

func (GlobalDNSRecordSpecHealthCheckHttpGetPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalDNSRecordSpecHealthCheckHttpGetPort)(nil)).Elem()
}

func (o GlobalDNSRecordSpecHealthCheckHttpGetPortPtrOutput) ToGlobalDNSRecordSpecHealthCheckHttpGetPortPtrOutput() GlobalDNSRecordSpecHealthCheckHttpGetPortPtrOutput {
	return o
}

func (o GlobalDNSRecordSpecHealthCheckHttpGetPortPtrOutput) ToGlobalDNSRecordSpecHealthCheckHttpGetPortPtrOutputWithContext(ctx context.Context) GlobalDNSRecordSpecHealthCheckHttpGetPortPtrOutput {
	return o
}

func (o GlobalDNSRecordSpecHealthCheckHttpGetPortPtrOutput) Elem() GlobalDNSRecordSpecHealthCheckHttpGetPortOutput {
	return o.ApplyT(func(v *GlobalDNSRecordSpecHealthCheckHttpGetPort) GlobalDNSRecordSpecHealthCheckHttpGetPort {
		return *v
	}).(GlobalDNSRecordSpecHealthCheckHttpGetPortOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
type GlobalDNSRecordSpecHealthCheckTcpSocket struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host *string `pulumi:"host"`
	// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port GlobalDNSRecordSpecHealthCheckTcpSocketPort `pulumi:"port"`
}

// GlobalDNSRecordSpecHealthCheckTcpSocketInput is an input type that accepts GlobalDNSRecordSpecHealthCheckTcpSocketArgs and GlobalDNSRecordSpecHealthCheckTcpSocketOutput values.
// You can construct a concrete instance of `GlobalDNSRecordSpecHealthCheckTcpSocketInput` via:
//
//          GlobalDNSRecordSpecHealthCheckTcpSocketArgs{...}
type GlobalDNSRecordSpecHealthCheckTcpSocketInput interface {
	pulumi.Input

	ToGlobalDNSRecordSpecHealthCheckTcpSocketOutput() GlobalDNSRecordSpecHealthCheckTcpSocketOutput
	ToGlobalDNSRecordSpecHealthCheckTcpSocketOutputWithContext(context.Context) GlobalDNSRecordSpecHealthCheckTcpSocketOutput
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
type GlobalDNSRecordSpecHealthCheckTcpSocketArgs struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port GlobalDNSRecordSpecHealthCheckTcpSocketPortInput `pulumi:"port"`
}

func (GlobalDNSRecordSpecHealthCheckTcpSocketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSRecordSpecHealthCheckTcpSocket)(nil)).Elem()
}

func (i GlobalDNSRecordSpecHealthCheckTcpSocketArgs) ToGlobalDNSRecordSpecHealthCheckTcpSocketOutput() GlobalDNSRecordSpecHealthCheckTcpSocketOutput {
	return i.ToGlobalDNSRecordSpecHealthCheckTcpSocketOutputWithContext(context.Background())
}

func (i GlobalDNSRecordSpecHealthCheckTcpSocketArgs) ToGlobalDNSRecordSpecHealthCheckTcpSocketOutputWithContext(ctx context.Context) GlobalDNSRecordSpecHealthCheckTcpSocketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordSpecHealthCheckTcpSocketOutput)
}

func (i GlobalDNSRecordSpecHealthCheckTcpSocketArgs) ToGlobalDNSRecordSpecHealthCheckTcpSocketPtrOutput() GlobalDNSRecordSpecHealthCheckTcpSocketPtrOutput {
	return i.ToGlobalDNSRecordSpecHealthCheckTcpSocketPtrOutputWithContext(context.Background())
}

func (i GlobalDNSRecordSpecHealthCheckTcpSocketArgs) ToGlobalDNSRecordSpecHealthCheckTcpSocketPtrOutputWithContext(ctx context.Context) GlobalDNSRecordSpecHealthCheckTcpSocketPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordSpecHealthCheckTcpSocketOutput).ToGlobalDNSRecordSpecHealthCheckTcpSocketPtrOutputWithContext(ctx)
}

// GlobalDNSRecordSpecHealthCheckTcpSocketPtrInput is an input type that accepts GlobalDNSRecordSpecHealthCheckTcpSocketArgs, GlobalDNSRecordSpecHealthCheckTcpSocketPtr and GlobalDNSRecordSpecHealthCheckTcpSocketPtrOutput values.
// You can construct a concrete instance of `GlobalDNSRecordSpecHealthCheckTcpSocketPtrInput` via:
//
//          GlobalDNSRecordSpecHealthCheckTcpSocketArgs{...}
//
//  or:
//
//          nil
type GlobalDNSRecordSpecHealthCheckTcpSocketPtrInput interface {
	pulumi.Input

	ToGlobalDNSRecordSpecHealthCheckTcpSocketPtrOutput() GlobalDNSRecordSpecHealthCheckTcpSocketPtrOutput
	ToGlobalDNSRecordSpecHealthCheckTcpSocketPtrOutputWithContext(context.Context) GlobalDNSRecordSpecHealthCheckTcpSocketPtrOutput
}

type globalDNSRecordSpecHealthCheckTcpSocketPtrType GlobalDNSRecordSpecHealthCheckTcpSocketArgs

func GlobalDNSRecordSpecHealthCheckTcpSocketPtr(v *GlobalDNSRecordSpecHealthCheckTcpSocketArgs) GlobalDNSRecordSpecHealthCheckTcpSocketPtrInput {
	return (*globalDNSRecordSpecHealthCheckTcpSocketPtrType)(v)
}

func (*globalDNSRecordSpecHealthCheckTcpSocketPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalDNSRecordSpecHealthCheckTcpSocket)(nil)).Elem()
}

func (i *globalDNSRecordSpecHealthCheckTcpSocketPtrType) ToGlobalDNSRecordSpecHealthCheckTcpSocketPtrOutput() GlobalDNSRecordSpecHealthCheckTcpSocketPtrOutput {
	return i.ToGlobalDNSRecordSpecHealthCheckTcpSocketPtrOutputWithContext(context.Background())
}

func (i *globalDNSRecordSpecHealthCheckTcpSocketPtrType) ToGlobalDNSRecordSpecHealthCheckTcpSocketPtrOutputWithContext(ctx context.Context) GlobalDNSRecordSpecHealthCheckTcpSocketPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordSpecHealthCheckTcpSocketPtrOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
type GlobalDNSRecordSpecHealthCheckTcpSocketOutput struct{ *pulumi.OutputState }

func (GlobalDNSRecordSpecHealthCheckTcpSocketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSRecordSpecHealthCheckTcpSocket)(nil)).Elem()
}

func (o GlobalDNSRecordSpecHealthCheckTcpSocketOutput) ToGlobalDNSRecordSpecHealthCheckTcpSocketOutput() GlobalDNSRecordSpecHealthCheckTcpSocketOutput {
	return o
}

func (o GlobalDNSRecordSpecHealthCheckTcpSocketOutput) ToGlobalDNSRecordSpecHealthCheckTcpSocketOutputWithContext(ctx context.Context) GlobalDNSRecordSpecHealthCheckTcpSocketOutput {
	return o
}

func (o GlobalDNSRecordSpecHealthCheckTcpSocketOutput) ToGlobalDNSRecordSpecHealthCheckTcpSocketPtrOutput() GlobalDNSRecordSpecHealthCheckTcpSocketPtrOutput {
	return o.ToGlobalDNSRecordSpecHealthCheckTcpSocketPtrOutputWithContext(context.Background())
}

func (o GlobalDNSRecordSpecHealthCheckTcpSocketOutput) ToGlobalDNSRecordSpecHealthCheckTcpSocketPtrOutputWithContext(ctx context.Context) GlobalDNSRecordSpecHealthCheckTcpSocketPtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordSpecHealthCheckTcpSocket) *GlobalDNSRecordSpecHealthCheckTcpSocket {
		return &v
	}).(GlobalDNSRecordSpecHealthCheckTcpSocketPtrOutput)
}

// Optional: Host name to connect to, defaults to the pod IP.
func (o GlobalDNSRecordSpecHealthCheckTcpSocketOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordSpecHealthCheckTcpSocket) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o GlobalDNSRecordSpecHealthCheckTcpSocketOutput) Port() GlobalDNSRecordSpecHealthCheckTcpSocketPortOutput {
	return o.ApplyT(func(v GlobalDNSRecordSpecHealthCheckTcpSocket) GlobalDNSRecordSpecHealthCheckTcpSocketPort {
		return v.Port
	}).(GlobalDNSRecordSpecHealthCheckTcpSocketPortOutput)
}

type GlobalDNSRecordSpecHealthCheckTcpSocketPtrOutput struct{ *pulumi.OutputState }

func (GlobalDNSRecordSpecHealthCheckTcpSocketPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalDNSRecordSpecHealthCheckTcpSocket)(nil)).Elem()
}

func (o GlobalDNSRecordSpecHealthCheckTcpSocketPtrOutput) ToGlobalDNSRecordSpecHealthCheckTcpSocketPtrOutput() GlobalDNSRecordSpecHealthCheckTcpSocketPtrOutput {
	return o
}

func (o GlobalDNSRecordSpecHealthCheckTcpSocketPtrOutput) ToGlobalDNSRecordSpecHealthCheckTcpSocketPtrOutputWithContext(ctx context.Context) GlobalDNSRecordSpecHealthCheckTcpSocketPtrOutput {
	return o
}

func (o GlobalDNSRecordSpecHealthCheckTcpSocketPtrOutput) Elem() GlobalDNSRecordSpecHealthCheckTcpSocketOutput {
	return o.ApplyT(func(v *GlobalDNSRecordSpecHealthCheckTcpSocket) GlobalDNSRecordSpecHealthCheckTcpSocket { return *v }).(GlobalDNSRecordSpecHealthCheckTcpSocketOutput)
}

// Optional: Host name to connect to, defaults to the pod IP.
func (o GlobalDNSRecordSpecHealthCheckTcpSocketPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalDNSRecordSpecHealthCheckTcpSocket) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o GlobalDNSRecordSpecHealthCheckTcpSocketPtrOutput) Port() GlobalDNSRecordSpecHealthCheckTcpSocketPortPtrOutput {
	return o.ApplyT(func(v *GlobalDNSRecordSpecHealthCheckTcpSocket) *GlobalDNSRecordSpecHealthCheckTcpSocketPort {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(GlobalDNSRecordSpecHealthCheckTcpSocketPortPtrOutput)
}

type GlobalDNSRecordSpecHealthCheckTcpSocketPort struct {
}

// GlobalDNSRecordSpecHealthCheckTcpSocketPortInput is an input type that accepts GlobalDNSRecordSpecHealthCheckTcpSocketPortArgs and GlobalDNSRecordSpecHealthCheckTcpSocketPortOutput values.
// You can construct a concrete instance of `GlobalDNSRecordSpecHealthCheckTcpSocketPortInput` via:
//
//          GlobalDNSRecordSpecHealthCheckTcpSocketPortArgs{...}
type GlobalDNSRecordSpecHealthCheckTcpSocketPortInput interface {
	pulumi.Input

	ToGlobalDNSRecordSpecHealthCheckTcpSocketPortOutput() GlobalDNSRecordSpecHealthCheckTcpSocketPortOutput
	ToGlobalDNSRecordSpecHealthCheckTcpSocketPortOutputWithContext(context.Context) GlobalDNSRecordSpecHealthCheckTcpSocketPortOutput
}

type GlobalDNSRecordSpecHealthCheckTcpSocketPortArgs struct {
}

func (GlobalDNSRecordSpecHealthCheckTcpSocketPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSRecordSpecHealthCheckTcpSocketPort)(nil)).Elem()
}

func (i GlobalDNSRecordSpecHealthCheckTcpSocketPortArgs) ToGlobalDNSRecordSpecHealthCheckTcpSocketPortOutput() GlobalDNSRecordSpecHealthCheckTcpSocketPortOutput {
	return i.ToGlobalDNSRecordSpecHealthCheckTcpSocketPortOutputWithContext(context.Background())
}

func (i GlobalDNSRecordSpecHealthCheckTcpSocketPortArgs) ToGlobalDNSRecordSpecHealthCheckTcpSocketPortOutputWithContext(ctx context.Context) GlobalDNSRecordSpecHealthCheckTcpSocketPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordSpecHealthCheckTcpSocketPortOutput)
}

func (i GlobalDNSRecordSpecHealthCheckTcpSocketPortArgs) ToGlobalDNSRecordSpecHealthCheckTcpSocketPortPtrOutput() GlobalDNSRecordSpecHealthCheckTcpSocketPortPtrOutput {
	return i.ToGlobalDNSRecordSpecHealthCheckTcpSocketPortPtrOutputWithContext(context.Background())
}

func (i GlobalDNSRecordSpecHealthCheckTcpSocketPortArgs) ToGlobalDNSRecordSpecHealthCheckTcpSocketPortPtrOutputWithContext(ctx context.Context) GlobalDNSRecordSpecHealthCheckTcpSocketPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordSpecHealthCheckTcpSocketPortOutput).ToGlobalDNSRecordSpecHealthCheckTcpSocketPortPtrOutputWithContext(ctx)
}

// GlobalDNSRecordSpecHealthCheckTcpSocketPortPtrInput is an input type that accepts GlobalDNSRecordSpecHealthCheckTcpSocketPortArgs, GlobalDNSRecordSpecHealthCheckTcpSocketPortPtr and GlobalDNSRecordSpecHealthCheckTcpSocketPortPtrOutput values.
// You can construct a concrete instance of `GlobalDNSRecordSpecHealthCheckTcpSocketPortPtrInput` via:
//
//          GlobalDNSRecordSpecHealthCheckTcpSocketPortArgs{...}
//
//  or:
//
//          nil
type GlobalDNSRecordSpecHealthCheckTcpSocketPortPtrInput interface {
	pulumi.Input

	ToGlobalDNSRecordSpecHealthCheckTcpSocketPortPtrOutput() GlobalDNSRecordSpecHealthCheckTcpSocketPortPtrOutput
	ToGlobalDNSRecordSpecHealthCheckTcpSocketPortPtrOutputWithContext(context.Context) GlobalDNSRecordSpecHealthCheckTcpSocketPortPtrOutput
}

type globalDNSRecordSpecHealthCheckTcpSocketPortPtrType GlobalDNSRecordSpecHealthCheckTcpSocketPortArgs

func GlobalDNSRecordSpecHealthCheckTcpSocketPortPtr(v *GlobalDNSRecordSpecHealthCheckTcpSocketPortArgs) GlobalDNSRecordSpecHealthCheckTcpSocketPortPtrInput {
	return (*globalDNSRecordSpecHealthCheckTcpSocketPortPtrType)(v)
}

func (*globalDNSRecordSpecHealthCheckTcpSocketPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalDNSRecordSpecHealthCheckTcpSocketPort)(nil)).Elem()
}

func (i *globalDNSRecordSpecHealthCheckTcpSocketPortPtrType) ToGlobalDNSRecordSpecHealthCheckTcpSocketPortPtrOutput() GlobalDNSRecordSpecHealthCheckTcpSocketPortPtrOutput {
	return i.ToGlobalDNSRecordSpecHealthCheckTcpSocketPortPtrOutputWithContext(context.Background())
}

func (i *globalDNSRecordSpecHealthCheckTcpSocketPortPtrType) ToGlobalDNSRecordSpecHealthCheckTcpSocketPortPtrOutputWithContext(ctx context.Context) GlobalDNSRecordSpecHealthCheckTcpSocketPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordSpecHealthCheckTcpSocketPortPtrOutput)
}

type GlobalDNSRecordSpecHealthCheckTcpSocketPortOutput struct{ *pulumi.OutputState }

func (GlobalDNSRecordSpecHealthCheckTcpSocketPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSRecordSpecHealthCheckTcpSocketPort)(nil)).Elem()
}

func (o GlobalDNSRecordSpecHealthCheckTcpSocketPortOutput) ToGlobalDNSRecordSpecHealthCheckTcpSocketPortOutput() GlobalDNSRecordSpecHealthCheckTcpSocketPortOutput {
	return o
}

func (o GlobalDNSRecordSpecHealthCheckTcpSocketPortOutput) ToGlobalDNSRecordSpecHealthCheckTcpSocketPortOutputWithContext(ctx context.Context) GlobalDNSRecordSpecHealthCheckTcpSocketPortOutput {
	return o
}

func (o GlobalDNSRecordSpecHealthCheckTcpSocketPortOutput) ToGlobalDNSRecordSpecHealthCheckTcpSocketPortPtrOutput() GlobalDNSRecordSpecHealthCheckTcpSocketPortPtrOutput {
	return o.ToGlobalDNSRecordSpecHealthCheckTcpSocketPortPtrOutputWithContext(context.Background())
}

func (o GlobalDNSRecordSpecHealthCheckTcpSocketPortOutput) ToGlobalDNSRecordSpecHealthCheckTcpSocketPortPtrOutputWithContext(ctx context.Context) GlobalDNSRecordSpecHealthCheckTcpSocketPortPtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordSpecHealthCheckTcpSocketPort) *GlobalDNSRecordSpecHealthCheckTcpSocketPort {
		return &v
	}).(GlobalDNSRecordSpecHealthCheckTcpSocketPortPtrOutput)
}

type GlobalDNSRecordSpecHealthCheckTcpSocketPortPtrOutput struct{ *pulumi.OutputState }

func (GlobalDNSRecordSpecHealthCheckTcpSocketPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalDNSRecordSpecHealthCheckTcpSocketPort)(nil)).Elem()
}

func (o GlobalDNSRecordSpecHealthCheckTcpSocketPortPtrOutput) ToGlobalDNSRecordSpecHealthCheckTcpSocketPortPtrOutput() GlobalDNSRecordSpecHealthCheckTcpSocketPortPtrOutput {
	return o
}

func (o GlobalDNSRecordSpecHealthCheckTcpSocketPortPtrOutput) ToGlobalDNSRecordSpecHealthCheckTcpSocketPortPtrOutputWithContext(ctx context.Context) GlobalDNSRecordSpecHealthCheckTcpSocketPortPtrOutput {
	return o
}

func (o GlobalDNSRecordSpecHealthCheckTcpSocketPortPtrOutput) Elem() GlobalDNSRecordSpecHealthCheckTcpSocketPortOutput {
	return o.ApplyT(func(v *GlobalDNSRecordSpecHealthCheckTcpSocketPort) GlobalDNSRecordSpecHealthCheckTcpSocketPort {
		return *v
	}).(GlobalDNSRecordSpecHealthCheckTcpSocketPortOutput)
}

// GlobalDNSRecordStatus defines the observed state of GlobalDNSRecord
type GlobalDNSRecordStatus struct {
	// ReconcileStatus this is the general status of the main reconciler
	Conditions []GlobalDNSRecordStatusConditions `pulumi:"conditions"`
	// EndpointStatuses contains the status of the endpoint as they were looked up during the latest reconcile. We don't fail when an endpoint look up fails, but we need to tarck its status.
	EndpointStatuses map[string][]GlobalDNSRecordStatusEndpointStatuses `pulumi:"endpointStatuses"`
	// MonitoredServiceStatuses contains the reconcile status of each of the monitored services in the remote clusters
	MonitoredServiceStatuses map[string][]GlobalDNSRecordStatusMonitoredServiceStatuses `pulumi:"monitoredServiceStatuses"`
	// ProviderStatus contains provider specific status information
	ProviderStatus *GlobalDNSRecordStatusProviderStatus `pulumi:"providerStatus"`
}

// GlobalDNSRecordStatusInput is an input type that accepts GlobalDNSRecordStatusArgs and GlobalDNSRecordStatusOutput values.
// You can construct a concrete instance of `GlobalDNSRecordStatusInput` via:
//
//          GlobalDNSRecordStatusArgs{...}
type GlobalDNSRecordStatusInput interface {
	pulumi.Input

	ToGlobalDNSRecordStatusOutput() GlobalDNSRecordStatusOutput
	ToGlobalDNSRecordStatusOutputWithContext(context.Context) GlobalDNSRecordStatusOutput
}

// GlobalDNSRecordStatus defines the observed state of GlobalDNSRecord
type GlobalDNSRecordStatusArgs struct {
	// ReconcileStatus this is the general status of the main reconciler
	Conditions GlobalDNSRecordStatusConditionsArrayInput `pulumi:"conditions"`
	// EndpointStatuses contains the status of the endpoint as they were looked up during the latest reconcile. We don't fail when an endpoint look up fails, but we need to tarck its status.
	EndpointStatuses GlobalDNSRecordStatusEndpointStatusesArrayMapInput `pulumi:"endpointStatuses"`
	// MonitoredServiceStatuses contains the reconcile status of each of the monitored services in the remote clusters
	MonitoredServiceStatuses GlobalDNSRecordStatusMonitoredServiceStatusesArrayMapInput `pulumi:"monitoredServiceStatuses"`
	// ProviderStatus contains provider specific status information
	ProviderStatus GlobalDNSRecordStatusProviderStatusPtrInput `pulumi:"providerStatus"`
}

func (GlobalDNSRecordStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSRecordStatus)(nil)).Elem()
}

func (i GlobalDNSRecordStatusArgs) ToGlobalDNSRecordStatusOutput() GlobalDNSRecordStatusOutput {
	return i.ToGlobalDNSRecordStatusOutputWithContext(context.Background())
}

func (i GlobalDNSRecordStatusArgs) ToGlobalDNSRecordStatusOutputWithContext(ctx context.Context) GlobalDNSRecordStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordStatusOutput)
}

func (i GlobalDNSRecordStatusArgs) ToGlobalDNSRecordStatusPtrOutput() GlobalDNSRecordStatusPtrOutput {
	return i.ToGlobalDNSRecordStatusPtrOutputWithContext(context.Background())
}

func (i GlobalDNSRecordStatusArgs) ToGlobalDNSRecordStatusPtrOutputWithContext(ctx context.Context) GlobalDNSRecordStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordStatusOutput).ToGlobalDNSRecordStatusPtrOutputWithContext(ctx)
}

// GlobalDNSRecordStatusPtrInput is an input type that accepts GlobalDNSRecordStatusArgs, GlobalDNSRecordStatusPtr and GlobalDNSRecordStatusPtrOutput values.
// You can construct a concrete instance of `GlobalDNSRecordStatusPtrInput` via:
//
//          GlobalDNSRecordStatusArgs{...}
//
//  or:
//
//          nil
type GlobalDNSRecordStatusPtrInput interface {
	pulumi.Input

	ToGlobalDNSRecordStatusPtrOutput() GlobalDNSRecordStatusPtrOutput
	ToGlobalDNSRecordStatusPtrOutputWithContext(context.Context) GlobalDNSRecordStatusPtrOutput
}

type globalDNSRecordStatusPtrType GlobalDNSRecordStatusArgs

func GlobalDNSRecordStatusPtr(v *GlobalDNSRecordStatusArgs) GlobalDNSRecordStatusPtrInput {
	return (*globalDNSRecordStatusPtrType)(v)
}

func (*globalDNSRecordStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalDNSRecordStatus)(nil)).Elem()
}

func (i *globalDNSRecordStatusPtrType) ToGlobalDNSRecordStatusPtrOutput() GlobalDNSRecordStatusPtrOutput {
	return i.ToGlobalDNSRecordStatusPtrOutputWithContext(context.Background())
}

func (i *globalDNSRecordStatusPtrType) ToGlobalDNSRecordStatusPtrOutputWithContext(ctx context.Context) GlobalDNSRecordStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordStatusPtrOutput)
}

// GlobalDNSRecordStatus defines the observed state of GlobalDNSRecord
type GlobalDNSRecordStatusOutput struct{ *pulumi.OutputState }

func (GlobalDNSRecordStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSRecordStatus)(nil)).Elem()
}

func (o GlobalDNSRecordStatusOutput) ToGlobalDNSRecordStatusOutput() GlobalDNSRecordStatusOutput {
	return o
}

func (o GlobalDNSRecordStatusOutput) ToGlobalDNSRecordStatusOutputWithContext(ctx context.Context) GlobalDNSRecordStatusOutput {
	return o
}

func (o GlobalDNSRecordStatusOutput) ToGlobalDNSRecordStatusPtrOutput() GlobalDNSRecordStatusPtrOutput {
	return o.ToGlobalDNSRecordStatusPtrOutputWithContext(context.Background())
}

func (o GlobalDNSRecordStatusOutput) ToGlobalDNSRecordStatusPtrOutputWithContext(ctx context.Context) GlobalDNSRecordStatusPtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordStatus) *GlobalDNSRecordStatus {
		return &v
	}).(GlobalDNSRecordStatusPtrOutput)
}

// ReconcileStatus this is the general status of the main reconciler
func (o GlobalDNSRecordStatusOutput) Conditions() GlobalDNSRecordStatusConditionsArrayOutput {
	return o.ApplyT(func(v GlobalDNSRecordStatus) []GlobalDNSRecordStatusConditions { return v.Conditions }).(GlobalDNSRecordStatusConditionsArrayOutput)
}

// EndpointStatuses contains the status of the endpoint as they were looked up during the latest reconcile. We don't fail when an endpoint look up fails, but we need to tarck its status.
func (o GlobalDNSRecordStatusOutput) EndpointStatuses() GlobalDNSRecordStatusEndpointStatusesArrayMapOutput {
	return o.ApplyT(func(v GlobalDNSRecordStatus) map[string][]GlobalDNSRecordStatusEndpointStatuses {
		return v.EndpointStatuses
	}).(GlobalDNSRecordStatusEndpointStatusesArrayMapOutput)
}

// MonitoredServiceStatuses contains the reconcile status of each of the monitored services in the remote clusters
func (o GlobalDNSRecordStatusOutput) MonitoredServiceStatuses() GlobalDNSRecordStatusMonitoredServiceStatusesArrayMapOutput {
	return o.ApplyT(func(v GlobalDNSRecordStatus) map[string][]GlobalDNSRecordStatusMonitoredServiceStatuses {
		return v.MonitoredServiceStatuses
	}).(GlobalDNSRecordStatusMonitoredServiceStatusesArrayMapOutput)
}

// ProviderStatus contains provider specific status information
func (o GlobalDNSRecordStatusOutput) ProviderStatus() GlobalDNSRecordStatusProviderStatusPtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordStatus) *GlobalDNSRecordStatusProviderStatus { return v.ProviderStatus }).(GlobalDNSRecordStatusProviderStatusPtrOutput)
}

type GlobalDNSRecordStatusPtrOutput struct{ *pulumi.OutputState }

func (GlobalDNSRecordStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalDNSRecordStatus)(nil)).Elem()
}

func (o GlobalDNSRecordStatusPtrOutput) ToGlobalDNSRecordStatusPtrOutput() GlobalDNSRecordStatusPtrOutput {
	return o
}

func (o GlobalDNSRecordStatusPtrOutput) ToGlobalDNSRecordStatusPtrOutputWithContext(ctx context.Context) GlobalDNSRecordStatusPtrOutput {
	return o
}

func (o GlobalDNSRecordStatusPtrOutput) Elem() GlobalDNSRecordStatusOutput {
	return o.ApplyT(func(v *GlobalDNSRecordStatus) GlobalDNSRecordStatus { return *v }).(GlobalDNSRecordStatusOutput)
}

// ReconcileStatus this is the general status of the main reconciler
func (o GlobalDNSRecordStatusPtrOutput) Conditions() GlobalDNSRecordStatusConditionsArrayOutput {
	return o.ApplyT(func(v *GlobalDNSRecordStatus) []GlobalDNSRecordStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(GlobalDNSRecordStatusConditionsArrayOutput)
}

// EndpointStatuses contains the status of the endpoint as they were looked up during the latest reconcile. We don't fail when an endpoint look up fails, but we need to tarck its status.
func (o GlobalDNSRecordStatusPtrOutput) EndpointStatuses() GlobalDNSRecordStatusEndpointStatusesArrayMapOutput {
	return o.ApplyT(func(v *GlobalDNSRecordStatus) map[string][]GlobalDNSRecordStatusEndpointStatuses {
		if v == nil {
			return nil
		}
		return v.EndpointStatuses
	}).(GlobalDNSRecordStatusEndpointStatusesArrayMapOutput)
}

// MonitoredServiceStatuses contains the reconcile status of each of the monitored services in the remote clusters
func (o GlobalDNSRecordStatusPtrOutput) MonitoredServiceStatuses() GlobalDNSRecordStatusMonitoredServiceStatusesArrayMapOutput {
	return o.ApplyT(func(v *GlobalDNSRecordStatus) map[string][]GlobalDNSRecordStatusMonitoredServiceStatuses {
		if v == nil {
			return nil
		}
		return v.MonitoredServiceStatuses
	}).(GlobalDNSRecordStatusMonitoredServiceStatusesArrayMapOutput)
}

// ProviderStatus contains provider specific status information
func (o GlobalDNSRecordStatusPtrOutput) ProviderStatus() GlobalDNSRecordStatusProviderStatusPtrOutput {
	return o.ApplyT(func(v *GlobalDNSRecordStatus) *GlobalDNSRecordStatusProviderStatus {
		if v == nil {
			return nil
		}
		return v.ProviderStatus
	}).(GlobalDNSRecordStatusProviderStatusPtrOutput)
}

// Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind.
//  Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API.
type GlobalDNSRecordStatusConditions struct {
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	Message            *string `pulumi:"message"`
	// ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.
	Reason *string `pulumi:"reason"`
	Status string  `pulumi:"status"`
	// ConditionType is the type of the condition and is typically a CamelCased word or short phrase.
	//  Condition types should indicate state in the "abnormal-true" polarity. For example, if the condition indicates when a policy is invalid, the "is valid" case is probably the norm, so the condition should be called "Invalid".
	Type string `pulumi:"type"`
}

// GlobalDNSRecordStatusConditionsInput is an input type that accepts GlobalDNSRecordStatusConditionsArgs and GlobalDNSRecordStatusConditionsOutput values.
// You can construct a concrete instance of `GlobalDNSRecordStatusConditionsInput` via:
//
//          GlobalDNSRecordStatusConditionsArgs{...}
type GlobalDNSRecordStatusConditionsInput interface {
	pulumi.Input

	ToGlobalDNSRecordStatusConditionsOutput() GlobalDNSRecordStatusConditionsOutput
	ToGlobalDNSRecordStatusConditionsOutputWithContext(context.Context) GlobalDNSRecordStatusConditionsOutput
}

// Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind.
//  Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API.
type GlobalDNSRecordStatusConditionsArgs struct {
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	Message            pulumi.StringPtrInput `pulumi:"message"`
	// ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	Status pulumi.StringInput    `pulumi:"status"`
	// ConditionType is the type of the condition and is typically a CamelCased word or short phrase.
	//  Condition types should indicate state in the "abnormal-true" polarity. For example, if the condition indicates when a policy is invalid, the "is valid" case is probably the norm, so the condition should be called "Invalid".
	Type pulumi.StringInput `pulumi:"type"`
}

func (GlobalDNSRecordStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSRecordStatusConditions)(nil)).Elem()
}

func (i GlobalDNSRecordStatusConditionsArgs) ToGlobalDNSRecordStatusConditionsOutput() GlobalDNSRecordStatusConditionsOutput {
	return i.ToGlobalDNSRecordStatusConditionsOutputWithContext(context.Background())
}

func (i GlobalDNSRecordStatusConditionsArgs) ToGlobalDNSRecordStatusConditionsOutputWithContext(ctx context.Context) GlobalDNSRecordStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordStatusConditionsOutput)
}

// GlobalDNSRecordStatusConditionsArrayInput is an input type that accepts GlobalDNSRecordStatusConditionsArray and GlobalDNSRecordStatusConditionsArrayOutput values.
// You can construct a concrete instance of `GlobalDNSRecordStatusConditionsArrayInput` via:
//
//          GlobalDNSRecordStatusConditionsArray{ GlobalDNSRecordStatusConditionsArgs{...} }
type GlobalDNSRecordStatusConditionsArrayInput interface {
	pulumi.Input

	ToGlobalDNSRecordStatusConditionsArrayOutput() GlobalDNSRecordStatusConditionsArrayOutput
	ToGlobalDNSRecordStatusConditionsArrayOutputWithContext(context.Context) GlobalDNSRecordStatusConditionsArrayOutput
}

type GlobalDNSRecordStatusConditionsArray []GlobalDNSRecordStatusConditionsInput

func (GlobalDNSRecordStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GlobalDNSRecordStatusConditions)(nil)).Elem()
}

func (i GlobalDNSRecordStatusConditionsArray) ToGlobalDNSRecordStatusConditionsArrayOutput() GlobalDNSRecordStatusConditionsArrayOutput {
	return i.ToGlobalDNSRecordStatusConditionsArrayOutputWithContext(context.Background())
}

func (i GlobalDNSRecordStatusConditionsArray) ToGlobalDNSRecordStatusConditionsArrayOutputWithContext(ctx context.Context) GlobalDNSRecordStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordStatusConditionsArrayOutput)
}

// Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind.
//  Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API.
type GlobalDNSRecordStatusConditionsOutput struct{ *pulumi.OutputState }

func (GlobalDNSRecordStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSRecordStatusConditions)(nil)).Elem()
}

func (o GlobalDNSRecordStatusConditionsOutput) ToGlobalDNSRecordStatusConditionsOutput() GlobalDNSRecordStatusConditionsOutput {
	return o
}

func (o GlobalDNSRecordStatusConditionsOutput) ToGlobalDNSRecordStatusConditionsOutputWithContext(ctx context.Context) GlobalDNSRecordStatusConditionsOutput {
	return o
}

func (o GlobalDNSRecordStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

func (o GlobalDNSRecordStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.
func (o GlobalDNSRecordStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

func (o GlobalDNSRecordStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalDNSRecordStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// ConditionType is the type of the condition and is typically a CamelCased word or short phrase.
//  Condition types should indicate state in the "abnormal-true" polarity. For example, if the condition indicates when a policy is invalid, the "is valid" case is probably the norm, so the condition should be called "Invalid".
func (o GlobalDNSRecordStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalDNSRecordStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type GlobalDNSRecordStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (GlobalDNSRecordStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GlobalDNSRecordStatusConditions)(nil)).Elem()
}

func (o GlobalDNSRecordStatusConditionsArrayOutput) ToGlobalDNSRecordStatusConditionsArrayOutput() GlobalDNSRecordStatusConditionsArrayOutput {
	return o
}

func (o GlobalDNSRecordStatusConditionsArrayOutput) ToGlobalDNSRecordStatusConditionsArrayOutputWithContext(ctx context.Context) GlobalDNSRecordStatusConditionsArrayOutput {
	return o
}

func (o GlobalDNSRecordStatusConditionsArrayOutput) Index(i pulumi.IntInput) GlobalDNSRecordStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GlobalDNSRecordStatusConditions {
		return vs[0].([]GlobalDNSRecordStatusConditions)[vs[1].(int)]
	}).(GlobalDNSRecordStatusConditionsOutput)
}

// Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind.
//  Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API.
type GlobalDNSRecordStatusEndpointStatuses struct {
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	Message            *string `pulumi:"message"`
	// ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.
	Reason *string `pulumi:"reason"`
	Status string  `pulumi:"status"`
	// ConditionType is the type of the condition and is typically a CamelCased word or short phrase.
	//  Condition types should indicate state in the "abnormal-true" polarity. For example, if the condition indicates when a policy is invalid, the "is valid" case is probably the norm, so the condition should be called "Invalid".
	Type string `pulumi:"type"`
}

// GlobalDNSRecordStatusEndpointStatusesInput is an input type that accepts GlobalDNSRecordStatusEndpointStatusesArgs and GlobalDNSRecordStatusEndpointStatusesOutput values.
// You can construct a concrete instance of `GlobalDNSRecordStatusEndpointStatusesInput` via:
//
//          GlobalDNSRecordStatusEndpointStatusesArgs{...}
type GlobalDNSRecordStatusEndpointStatusesInput interface {
	pulumi.Input

	ToGlobalDNSRecordStatusEndpointStatusesOutput() GlobalDNSRecordStatusEndpointStatusesOutput
	ToGlobalDNSRecordStatusEndpointStatusesOutputWithContext(context.Context) GlobalDNSRecordStatusEndpointStatusesOutput
}

// Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind.
//  Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API.
type GlobalDNSRecordStatusEndpointStatusesArgs struct {
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	Message            pulumi.StringPtrInput `pulumi:"message"`
	// ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	Status pulumi.StringInput    `pulumi:"status"`
	// ConditionType is the type of the condition and is typically a CamelCased word or short phrase.
	//  Condition types should indicate state in the "abnormal-true" polarity. For example, if the condition indicates when a policy is invalid, the "is valid" case is probably the norm, so the condition should be called "Invalid".
	Type pulumi.StringInput `pulumi:"type"`
}

func (GlobalDNSRecordStatusEndpointStatusesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSRecordStatusEndpointStatuses)(nil)).Elem()
}

func (i GlobalDNSRecordStatusEndpointStatusesArgs) ToGlobalDNSRecordStatusEndpointStatusesOutput() GlobalDNSRecordStatusEndpointStatusesOutput {
	return i.ToGlobalDNSRecordStatusEndpointStatusesOutputWithContext(context.Background())
}

func (i GlobalDNSRecordStatusEndpointStatusesArgs) ToGlobalDNSRecordStatusEndpointStatusesOutputWithContext(ctx context.Context) GlobalDNSRecordStatusEndpointStatusesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordStatusEndpointStatusesOutput)
}

// GlobalDNSRecordStatusEndpointStatusesArrayInput is an input type that accepts GlobalDNSRecordStatusEndpointStatusesArray and GlobalDNSRecordStatusEndpointStatusesArrayOutput values.
// You can construct a concrete instance of `GlobalDNSRecordStatusEndpointStatusesArrayInput` via:
//
//          GlobalDNSRecordStatusEndpointStatusesArray{ GlobalDNSRecordStatusEndpointStatusesArgs{...} }
type GlobalDNSRecordStatusEndpointStatusesArrayInput interface {
	pulumi.Input

	ToGlobalDNSRecordStatusEndpointStatusesArrayOutput() GlobalDNSRecordStatusEndpointStatusesArrayOutput
	ToGlobalDNSRecordStatusEndpointStatusesArrayOutputWithContext(context.Context) GlobalDNSRecordStatusEndpointStatusesArrayOutput
}

type GlobalDNSRecordStatusEndpointStatusesArray []GlobalDNSRecordStatusEndpointStatusesInput

func (GlobalDNSRecordStatusEndpointStatusesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GlobalDNSRecordStatusEndpointStatuses)(nil)).Elem()
}

func (i GlobalDNSRecordStatusEndpointStatusesArray) ToGlobalDNSRecordStatusEndpointStatusesArrayOutput() GlobalDNSRecordStatusEndpointStatusesArrayOutput {
	return i.ToGlobalDNSRecordStatusEndpointStatusesArrayOutputWithContext(context.Background())
}

func (i GlobalDNSRecordStatusEndpointStatusesArray) ToGlobalDNSRecordStatusEndpointStatusesArrayOutputWithContext(ctx context.Context) GlobalDNSRecordStatusEndpointStatusesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordStatusEndpointStatusesArrayOutput)
}

// Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind.
//  Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API.
type GlobalDNSRecordStatusEndpointStatusesOutput struct{ *pulumi.OutputState }

func (GlobalDNSRecordStatusEndpointStatusesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSRecordStatusEndpointStatuses)(nil)).Elem()
}

func (o GlobalDNSRecordStatusEndpointStatusesOutput) ToGlobalDNSRecordStatusEndpointStatusesOutput() GlobalDNSRecordStatusEndpointStatusesOutput {
	return o
}

func (o GlobalDNSRecordStatusEndpointStatusesOutput) ToGlobalDNSRecordStatusEndpointStatusesOutputWithContext(ctx context.Context) GlobalDNSRecordStatusEndpointStatusesOutput {
	return o
}

func (o GlobalDNSRecordStatusEndpointStatusesOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordStatusEndpointStatuses) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

func (o GlobalDNSRecordStatusEndpointStatusesOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordStatusEndpointStatuses) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.
func (o GlobalDNSRecordStatusEndpointStatusesOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordStatusEndpointStatuses) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

func (o GlobalDNSRecordStatusEndpointStatusesOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalDNSRecordStatusEndpointStatuses) string { return v.Status }).(pulumi.StringOutput)
}

// ConditionType is the type of the condition and is typically a CamelCased word or short phrase.
//  Condition types should indicate state in the "abnormal-true" polarity. For example, if the condition indicates when a policy is invalid, the "is valid" case is probably the norm, so the condition should be called "Invalid".
func (o GlobalDNSRecordStatusEndpointStatusesOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalDNSRecordStatusEndpointStatuses) string { return v.Type }).(pulumi.StringOutput)
}

type GlobalDNSRecordStatusEndpointStatusesArrayOutput struct{ *pulumi.OutputState }

func (GlobalDNSRecordStatusEndpointStatusesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GlobalDNSRecordStatusEndpointStatuses)(nil)).Elem()
}

func (o GlobalDNSRecordStatusEndpointStatusesArrayOutput) ToGlobalDNSRecordStatusEndpointStatusesArrayOutput() GlobalDNSRecordStatusEndpointStatusesArrayOutput {
	return o
}

func (o GlobalDNSRecordStatusEndpointStatusesArrayOutput) ToGlobalDNSRecordStatusEndpointStatusesArrayOutputWithContext(ctx context.Context) GlobalDNSRecordStatusEndpointStatusesArrayOutput {
	return o
}

func (o GlobalDNSRecordStatusEndpointStatusesArrayOutput) Index(i pulumi.IntInput) GlobalDNSRecordStatusEndpointStatusesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GlobalDNSRecordStatusEndpointStatuses {
		return vs[0].([]GlobalDNSRecordStatusEndpointStatuses)[vs[1].(int)]
	}).(GlobalDNSRecordStatusEndpointStatusesOutput)
}

// Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind.
//  Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API.
type GlobalDNSRecordStatusMonitoredServiceStatuses struct {
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	Message            *string `pulumi:"message"`
	// ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.
	Reason *string `pulumi:"reason"`
	Status string  `pulumi:"status"`
	// ConditionType is the type of the condition and is typically a CamelCased word or short phrase.
	//  Condition types should indicate state in the "abnormal-true" polarity. For example, if the condition indicates when a policy is invalid, the "is valid" case is probably the norm, so the condition should be called "Invalid".
	Type string `pulumi:"type"`
}

// GlobalDNSRecordStatusMonitoredServiceStatusesInput is an input type that accepts GlobalDNSRecordStatusMonitoredServiceStatusesArgs and GlobalDNSRecordStatusMonitoredServiceStatusesOutput values.
// You can construct a concrete instance of `GlobalDNSRecordStatusMonitoredServiceStatusesInput` via:
//
//          GlobalDNSRecordStatusMonitoredServiceStatusesArgs{...}
type GlobalDNSRecordStatusMonitoredServiceStatusesInput interface {
	pulumi.Input

	ToGlobalDNSRecordStatusMonitoredServiceStatusesOutput() GlobalDNSRecordStatusMonitoredServiceStatusesOutput
	ToGlobalDNSRecordStatusMonitoredServiceStatusesOutputWithContext(context.Context) GlobalDNSRecordStatusMonitoredServiceStatusesOutput
}

// Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind.
//  Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API.
type GlobalDNSRecordStatusMonitoredServiceStatusesArgs struct {
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	Message            pulumi.StringPtrInput `pulumi:"message"`
	// ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	Status pulumi.StringInput    `pulumi:"status"`
	// ConditionType is the type of the condition and is typically a CamelCased word or short phrase.
	//  Condition types should indicate state in the "abnormal-true" polarity. For example, if the condition indicates when a policy is invalid, the "is valid" case is probably the norm, so the condition should be called "Invalid".
	Type pulumi.StringInput `pulumi:"type"`
}

func (GlobalDNSRecordStatusMonitoredServiceStatusesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSRecordStatusMonitoredServiceStatuses)(nil)).Elem()
}

func (i GlobalDNSRecordStatusMonitoredServiceStatusesArgs) ToGlobalDNSRecordStatusMonitoredServiceStatusesOutput() GlobalDNSRecordStatusMonitoredServiceStatusesOutput {
	return i.ToGlobalDNSRecordStatusMonitoredServiceStatusesOutputWithContext(context.Background())
}

func (i GlobalDNSRecordStatusMonitoredServiceStatusesArgs) ToGlobalDNSRecordStatusMonitoredServiceStatusesOutputWithContext(ctx context.Context) GlobalDNSRecordStatusMonitoredServiceStatusesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordStatusMonitoredServiceStatusesOutput)
}

// GlobalDNSRecordStatusMonitoredServiceStatusesArrayInput is an input type that accepts GlobalDNSRecordStatusMonitoredServiceStatusesArray and GlobalDNSRecordStatusMonitoredServiceStatusesArrayOutput values.
// You can construct a concrete instance of `GlobalDNSRecordStatusMonitoredServiceStatusesArrayInput` via:
//
//          GlobalDNSRecordStatusMonitoredServiceStatusesArray{ GlobalDNSRecordStatusMonitoredServiceStatusesArgs{...} }
type GlobalDNSRecordStatusMonitoredServiceStatusesArrayInput interface {
	pulumi.Input

	ToGlobalDNSRecordStatusMonitoredServiceStatusesArrayOutput() GlobalDNSRecordStatusMonitoredServiceStatusesArrayOutput
	ToGlobalDNSRecordStatusMonitoredServiceStatusesArrayOutputWithContext(context.Context) GlobalDNSRecordStatusMonitoredServiceStatusesArrayOutput
}

type GlobalDNSRecordStatusMonitoredServiceStatusesArray []GlobalDNSRecordStatusMonitoredServiceStatusesInput

func (GlobalDNSRecordStatusMonitoredServiceStatusesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GlobalDNSRecordStatusMonitoredServiceStatuses)(nil)).Elem()
}

func (i GlobalDNSRecordStatusMonitoredServiceStatusesArray) ToGlobalDNSRecordStatusMonitoredServiceStatusesArrayOutput() GlobalDNSRecordStatusMonitoredServiceStatusesArrayOutput {
	return i.ToGlobalDNSRecordStatusMonitoredServiceStatusesArrayOutputWithContext(context.Background())
}

func (i GlobalDNSRecordStatusMonitoredServiceStatusesArray) ToGlobalDNSRecordStatusMonitoredServiceStatusesArrayOutputWithContext(ctx context.Context) GlobalDNSRecordStatusMonitoredServiceStatusesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordStatusMonitoredServiceStatusesArrayOutput)
}

// Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind.
//  Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API.
type GlobalDNSRecordStatusMonitoredServiceStatusesOutput struct{ *pulumi.OutputState }

func (GlobalDNSRecordStatusMonitoredServiceStatusesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSRecordStatusMonitoredServiceStatuses)(nil)).Elem()
}

func (o GlobalDNSRecordStatusMonitoredServiceStatusesOutput) ToGlobalDNSRecordStatusMonitoredServiceStatusesOutput() GlobalDNSRecordStatusMonitoredServiceStatusesOutput {
	return o
}

func (o GlobalDNSRecordStatusMonitoredServiceStatusesOutput) ToGlobalDNSRecordStatusMonitoredServiceStatusesOutputWithContext(ctx context.Context) GlobalDNSRecordStatusMonitoredServiceStatusesOutput {
	return o
}

func (o GlobalDNSRecordStatusMonitoredServiceStatusesOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordStatusMonitoredServiceStatuses) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

func (o GlobalDNSRecordStatusMonitoredServiceStatusesOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordStatusMonitoredServiceStatuses) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.
func (o GlobalDNSRecordStatusMonitoredServiceStatusesOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordStatusMonitoredServiceStatuses) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

func (o GlobalDNSRecordStatusMonitoredServiceStatusesOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalDNSRecordStatusMonitoredServiceStatuses) string { return v.Status }).(pulumi.StringOutput)
}

// ConditionType is the type of the condition and is typically a CamelCased word or short phrase.
//  Condition types should indicate state in the "abnormal-true" polarity. For example, if the condition indicates when a policy is invalid, the "is valid" case is probably the norm, so the condition should be called "Invalid".
func (o GlobalDNSRecordStatusMonitoredServiceStatusesOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalDNSRecordStatusMonitoredServiceStatuses) string { return v.Type }).(pulumi.StringOutput)
}

type GlobalDNSRecordStatusMonitoredServiceStatusesArrayOutput struct{ *pulumi.OutputState }

func (GlobalDNSRecordStatusMonitoredServiceStatusesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GlobalDNSRecordStatusMonitoredServiceStatuses)(nil)).Elem()
}

func (o GlobalDNSRecordStatusMonitoredServiceStatusesArrayOutput) ToGlobalDNSRecordStatusMonitoredServiceStatusesArrayOutput() GlobalDNSRecordStatusMonitoredServiceStatusesArrayOutput {
	return o
}

func (o GlobalDNSRecordStatusMonitoredServiceStatusesArrayOutput) ToGlobalDNSRecordStatusMonitoredServiceStatusesArrayOutputWithContext(ctx context.Context) GlobalDNSRecordStatusMonitoredServiceStatusesArrayOutput {
	return o
}

func (o GlobalDNSRecordStatusMonitoredServiceStatusesArrayOutput) Index(i pulumi.IntInput) GlobalDNSRecordStatusMonitoredServiceStatusesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GlobalDNSRecordStatusMonitoredServiceStatuses {
		return vs[0].([]GlobalDNSRecordStatusMonitoredServiceStatuses)[vs[1].(int)]
	}).(GlobalDNSRecordStatusMonitoredServiceStatusesOutput)
}

// ProviderStatus contains provider specific status information
type GlobalDNSRecordStatusProviderStatus struct {
	Route53 *GlobalDNSRecordStatusProviderStatusRoute53 `pulumi:"route53"`
}

// GlobalDNSRecordStatusProviderStatusInput is an input type that accepts GlobalDNSRecordStatusProviderStatusArgs and GlobalDNSRecordStatusProviderStatusOutput values.
// You can construct a concrete instance of `GlobalDNSRecordStatusProviderStatusInput` via:
//
//          GlobalDNSRecordStatusProviderStatusArgs{...}
type GlobalDNSRecordStatusProviderStatusInput interface {
	pulumi.Input

	ToGlobalDNSRecordStatusProviderStatusOutput() GlobalDNSRecordStatusProviderStatusOutput
	ToGlobalDNSRecordStatusProviderStatusOutputWithContext(context.Context) GlobalDNSRecordStatusProviderStatusOutput
}

// ProviderStatus contains provider specific status information
type GlobalDNSRecordStatusProviderStatusArgs struct {
	Route53 GlobalDNSRecordStatusProviderStatusRoute53PtrInput `pulumi:"route53"`
}

func (GlobalDNSRecordStatusProviderStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSRecordStatusProviderStatus)(nil)).Elem()
}

func (i GlobalDNSRecordStatusProviderStatusArgs) ToGlobalDNSRecordStatusProviderStatusOutput() GlobalDNSRecordStatusProviderStatusOutput {
	return i.ToGlobalDNSRecordStatusProviderStatusOutputWithContext(context.Background())
}

func (i GlobalDNSRecordStatusProviderStatusArgs) ToGlobalDNSRecordStatusProviderStatusOutputWithContext(ctx context.Context) GlobalDNSRecordStatusProviderStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordStatusProviderStatusOutput)
}

func (i GlobalDNSRecordStatusProviderStatusArgs) ToGlobalDNSRecordStatusProviderStatusPtrOutput() GlobalDNSRecordStatusProviderStatusPtrOutput {
	return i.ToGlobalDNSRecordStatusProviderStatusPtrOutputWithContext(context.Background())
}

func (i GlobalDNSRecordStatusProviderStatusArgs) ToGlobalDNSRecordStatusProviderStatusPtrOutputWithContext(ctx context.Context) GlobalDNSRecordStatusProviderStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordStatusProviderStatusOutput).ToGlobalDNSRecordStatusProviderStatusPtrOutputWithContext(ctx)
}

// GlobalDNSRecordStatusProviderStatusPtrInput is an input type that accepts GlobalDNSRecordStatusProviderStatusArgs, GlobalDNSRecordStatusProviderStatusPtr and GlobalDNSRecordStatusProviderStatusPtrOutput values.
// You can construct a concrete instance of `GlobalDNSRecordStatusProviderStatusPtrInput` via:
//
//          GlobalDNSRecordStatusProviderStatusArgs{...}
//
//  or:
//
//          nil
type GlobalDNSRecordStatusProviderStatusPtrInput interface {
	pulumi.Input

	ToGlobalDNSRecordStatusProviderStatusPtrOutput() GlobalDNSRecordStatusProviderStatusPtrOutput
	ToGlobalDNSRecordStatusProviderStatusPtrOutputWithContext(context.Context) GlobalDNSRecordStatusProviderStatusPtrOutput
}

type globalDNSRecordStatusProviderStatusPtrType GlobalDNSRecordStatusProviderStatusArgs

func GlobalDNSRecordStatusProviderStatusPtr(v *GlobalDNSRecordStatusProviderStatusArgs) GlobalDNSRecordStatusProviderStatusPtrInput {
	return (*globalDNSRecordStatusProviderStatusPtrType)(v)
}

func (*globalDNSRecordStatusProviderStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalDNSRecordStatusProviderStatus)(nil)).Elem()
}

func (i *globalDNSRecordStatusProviderStatusPtrType) ToGlobalDNSRecordStatusProviderStatusPtrOutput() GlobalDNSRecordStatusProviderStatusPtrOutput {
	return i.ToGlobalDNSRecordStatusProviderStatusPtrOutputWithContext(context.Background())
}

func (i *globalDNSRecordStatusProviderStatusPtrType) ToGlobalDNSRecordStatusProviderStatusPtrOutputWithContext(ctx context.Context) GlobalDNSRecordStatusProviderStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordStatusProviderStatusPtrOutput)
}

// ProviderStatus contains provider specific status information
type GlobalDNSRecordStatusProviderStatusOutput struct{ *pulumi.OutputState }

func (GlobalDNSRecordStatusProviderStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSRecordStatusProviderStatus)(nil)).Elem()
}

func (o GlobalDNSRecordStatusProviderStatusOutput) ToGlobalDNSRecordStatusProviderStatusOutput() GlobalDNSRecordStatusProviderStatusOutput {
	return o
}

func (o GlobalDNSRecordStatusProviderStatusOutput) ToGlobalDNSRecordStatusProviderStatusOutputWithContext(ctx context.Context) GlobalDNSRecordStatusProviderStatusOutput {
	return o
}

func (o GlobalDNSRecordStatusProviderStatusOutput) ToGlobalDNSRecordStatusProviderStatusPtrOutput() GlobalDNSRecordStatusProviderStatusPtrOutput {
	return o.ToGlobalDNSRecordStatusProviderStatusPtrOutputWithContext(context.Background())
}

func (o GlobalDNSRecordStatusProviderStatusOutput) ToGlobalDNSRecordStatusProviderStatusPtrOutputWithContext(ctx context.Context) GlobalDNSRecordStatusProviderStatusPtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordStatusProviderStatus) *GlobalDNSRecordStatusProviderStatus {
		return &v
	}).(GlobalDNSRecordStatusProviderStatusPtrOutput)
}
func (o GlobalDNSRecordStatusProviderStatusOutput) Route53() GlobalDNSRecordStatusProviderStatusRoute53PtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordStatusProviderStatus) *GlobalDNSRecordStatusProviderStatusRoute53 {
		return v.Route53
	}).(GlobalDNSRecordStatusProviderStatusRoute53PtrOutput)
}

type GlobalDNSRecordStatusProviderStatusPtrOutput struct{ *pulumi.OutputState }

func (GlobalDNSRecordStatusProviderStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalDNSRecordStatusProviderStatus)(nil)).Elem()
}

func (o GlobalDNSRecordStatusProviderStatusPtrOutput) ToGlobalDNSRecordStatusProviderStatusPtrOutput() GlobalDNSRecordStatusProviderStatusPtrOutput {
	return o
}

func (o GlobalDNSRecordStatusProviderStatusPtrOutput) ToGlobalDNSRecordStatusProviderStatusPtrOutputWithContext(ctx context.Context) GlobalDNSRecordStatusProviderStatusPtrOutput {
	return o
}

func (o GlobalDNSRecordStatusProviderStatusPtrOutput) Elem() GlobalDNSRecordStatusProviderStatusOutput {
	return o.ApplyT(func(v *GlobalDNSRecordStatusProviderStatus) GlobalDNSRecordStatusProviderStatus { return *v }).(GlobalDNSRecordStatusProviderStatusOutput)
}

func (o GlobalDNSRecordStatusProviderStatusPtrOutput) Route53() GlobalDNSRecordStatusProviderStatusRoute53PtrOutput {
	return o.ApplyT(func(v *GlobalDNSRecordStatusProviderStatus) *GlobalDNSRecordStatusProviderStatusRoute53 {
		if v == nil {
			return nil
		}
		return v.Route53
	}).(GlobalDNSRecordStatusProviderStatusRoute53PtrOutput)
}

type GlobalDNSRecordStatusProviderStatusRoute53 struct {
	// HealthCheckID represents the route53 healthcheck created for this record
	HealthCheckID map[string]string `pulumi:"healthCheckID"`
	// PolicyID represents the route53 routing policy created for this record
	PolicyID *string `pulumi:"policyID"`
	// PolicyInstanceID represents the ID of the DNSRecord
	PolicyInstanceID *string `pulumi:"policyInstanceID"`
}

// GlobalDNSRecordStatusProviderStatusRoute53Input is an input type that accepts GlobalDNSRecordStatusProviderStatusRoute53Args and GlobalDNSRecordStatusProviderStatusRoute53Output values.
// You can construct a concrete instance of `GlobalDNSRecordStatusProviderStatusRoute53Input` via:
//
//          GlobalDNSRecordStatusProviderStatusRoute53Args{...}
type GlobalDNSRecordStatusProviderStatusRoute53Input interface {
	pulumi.Input

	ToGlobalDNSRecordStatusProviderStatusRoute53Output() GlobalDNSRecordStatusProviderStatusRoute53Output
	ToGlobalDNSRecordStatusProviderStatusRoute53OutputWithContext(context.Context) GlobalDNSRecordStatusProviderStatusRoute53Output
}

type GlobalDNSRecordStatusProviderStatusRoute53Args struct {
	// HealthCheckID represents the route53 healthcheck created for this record
	HealthCheckID pulumi.StringMapInput `pulumi:"healthCheckID"`
	// PolicyID represents the route53 routing policy created for this record
	PolicyID pulumi.StringPtrInput `pulumi:"policyID"`
	// PolicyInstanceID represents the ID of the DNSRecord
	PolicyInstanceID pulumi.StringPtrInput `pulumi:"policyInstanceID"`
}

func (GlobalDNSRecordStatusProviderStatusRoute53Args) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSRecordStatusProviderStatusRoute53)(nil)).Elem()
}

func (i GlobalDNSRecordStatusProviderStatusRoute53Args) ToGlobalDNSRecordStatusProviderStatusRoute53Output() GlobalDNSRecordStatusProviderStatusRoute53Output {
	return i.ToGlobalDNSRecordStatusProviderStatusRoute53OutputWithContext(context.Background())
}

func (i GlobalDNSRecordStatusProviderStatusRoute53Args) ToGlobalDNSRecordStatusProviderStatusRoute53OutputWithContext(ctx context.Context) GlobalDNSRecordStatusProviderStatusRoute53Output {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordStatusProviderStatusRoute53Output)
}

func (i GlobalDNSRecordStatusProviderStatusRoute53Args) ToGlobalDNSRecordStatusProviderStatusRoute53PtrOutput() GlobalDNSRecordStatusProviderStatusRoute53PtrOutput {
	return i.ToGlobalDNSRecordStatusProviderStatusRoute53PtrOutputWithContext(context.Background())
}

func (i GlobalDNSRecordStatusProviderStatusRoute53Args) ToGlobalDNSRecordStatusProviderStatusRoute53PtrOutputWithContext(ctx context.Context) GlobalDNSRecordStatusProviderStatusRoute53PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordStatusProviderStatusRoute53Output).ToGlobalDNSRecordStatusProviderStatusRoute53PtrOutputWithContext(ctx)
}

// GlobalDNSRecordStatusProviderStatusRoute53PtrInput is an input type that accepts GlobalDNSRecordStatusProviderStatusRoute53Args, GlobalDNSRecordStatusProviderStatusRoute53Ptr and GlobalDNSRecordStatusProviderStatusRoute53PtrOutput values.
// You can construct a concrete instance of `GlobalDNSRecordStatusProviderStatusRoute53PtrInput` via:
//
//          GlobalDNSRecordStatusProviderStatusRoute53Args{...}
//
//  or:
//
//          nil
type GlobalDNSRecordStatusProviderStatusRoute53PtrInput interface {
	pulumi.Input

	ToGlobalDNSRecordStatusProviderStatusRoute53PtrOutput() GlobalDNSRecordStatusProviderStatusRoute53PtrOutput
	ToGlobalDNSRecordStatusProviderStatusRoute53PtrOutputWithContext(context.Context) GlobalDNSRecordStatusProviderStatusRoute53PtrOutput
}

type globalDNSRecordStatusProviderStatusRoute53PtrType GlobalDNSRecordStatusProviderStatusRoute53Args

func GlobalDNSRecordStatusProviderStatusRoute53Ptr(v *GlobalDNSRecordStatusProviderStatusRoute53Args) GlobalDNSRecordStatusProviderStatusRoute53PtrInput {
	return (*globalDNSRecordStatusProviderStatusRoute53PtrType)(v)
}

func (*globalDNSRecordStatusProviderStatusRoute53PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalDNSRecordStatusProviderStatusRoute53)(nil)).Elem()
}

func (i *globalDNSRecordStatusProviderStatusRoute53PtrType) ToGlobalDNSRecordStatusProviderStatusRoute53PtrOutput() GlobalDNSRecordStatusProviderStatusRoute53PtrOutput {
	return i.ToGlobalDNSRecordStatusProviderStatusRoute53PtrOutputWithContext(context.Background())
}

func (i *globalDNSRecordStatusProviderStatusRoute53PtrType) ToGlobalDNSRecordStatusProviderStatusRoute53PtrOutputWithContext(ctx context.Context) GlobalDNSRecordStatusProviderStatusRoute53PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordStatusProviderStatusRoute53PtrOutput)
}

type GlobalDNSRecordStatusProviderStatusRoute53Output struct{ *pulumi.OutputState }

func (GlobalDNSRecordStatusProviderStatusRoute53Output) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSRecordStatusProviderStatusRoute53)(nil)).Elem()
}

func (o GlobalDNSRecordStatusProviderStatusRoute53Output) ToGlobalDNSRecordStatusProviderStatusRoute53Output() GlobalDNSRecordStatusProviderStatusRoute53Output {
	return o
}

func (o GlobalDNSRecordStatusProviderStatusRoute53Output) ToGlobalDNSRecordStatusProviderStatusRoute53OutputWithContext(ctx context.Context) GlobalDNSRecordStatusProviderStatusRoute53Output {
	return o
}

func (o GlobalDNSRecordStatusProviderStatusRoute53Output) ToGlobalDNSRecordStatusProviderStatusRoute53PtrOutput() GlobalDNSRecordStatusProviderStatusRoute53PtrOutput {
	return o.ToGlobalDNSRecordStatusProviderStatusRoute53PtrOutputWithContext(context.Background())
}

func (o GlobalDNSRecordStatusProviderStatusRoute53Output) ToGlobalDNSRecordStatusProviderStatusRoute53PtrOutputWithContext(ctx context.Context) GlobalDNSRecordStatusProviderStatusRoute53PtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordStatusProviderStatusRoute53) *GlobalDNSRecordStatusProviderStatusRoute53 {
		return &v
	}).(GlobalDNSRecordStatusProviderStatusRoute53PtrOutput)
}

// HealthCheckID represents the route53 healthcheck created for this record
func (o GlobalDNSRecordStatusProviderStatusRoute53Output) HealthCheckID() pulumi.StringMapOutput {
	return o.ApplyT(func(v GlobalDNSRecordStatusProviderStatusRoute53) map[string]string { return v.HealthCheckID }).(pulumi.StringMapOutput)
}

// PolicyID represents the route53 routing policy created for this record
func (o GlobalDNSRecordStatusProviderStatusRoute53Output) PolicyID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordStatusProviderStatusRoute53) *string { return v.PolicyID }).(pulumi.StringPtrOutput)
}

// PolicyInstanceID represents the ID of the DNSRecord
func (o GlobalDNSRecordStatusProviderStatusRoute53Output) PolicyInstanceID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalDNSRecordStatusProviderStatusRoute53) *string { return v.PolicyInstanceID }).(pulumi.StringPtrOutput)
}

type GlobalDNSRecordStatusProviderStatusRoute53PtrOutput struct{ *pulumi.OutputState }

func (GlobalDNSRecordStatusProviderStatusRoute53PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalDNSRecordStatusProviderStatusRoute53)(nil)).Elem()
}

func (o GlobalDNSRecordStatusProviderStatusRoute53PtrOutput) ToGlobalDNSRecordStatusProviderStatusRoute53PtrOutput() GlobalDNSRecordStatusProviderStatusRoute53PtrOutput {
	return o
}

func (o GlobalDNSRecordStatusProviderStatusRoute53PtrOutput) ToGlobalDNSRecordStatusProviderStatusRoute53PtrOutputWithContext(ctx context.Context) GlobalDNSRecordStatusProviderStatusRoute53PtrOutput {
	return o
}

func (o GlobalDNSRecordStatusProviderStatusRoute53PtrOutput) Elem() GlobalDNSRecordStatusProviderStatusRoute53Output {
	return o.ApplyT(func(v *GlobalDNSRecordStatusProviderStatusRoute53) GlobalDNSRecordStatusProviderStatusRoute53 {
		return *v
	}).(GlobalDNSRecordStatusProviderStatusRoute53Output)
}

// HealthCheckID represents the route53 healthcheck created for this record
func (o GlobalDNSRecordStatusProviderStatusRoute53PtrOutput) HealthCheckID() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GlobalDNSRecordStatusProviderStatusRoute53) map[string]string {
		if v == nil {
			return nil
		}
		return v.HealthCheckID
	}).(pulumi.StringMapOutput)
}

// PolicyID represents the route53 routing policy created for this record
func (o GlobalDNSRecordStatusProviderStatusRoute53PtrOutput) PolicyID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalDNSRecordStatusProviderStatusRoute53) *string {
		if v == nil {
			return nil
		}
		return v.PolicyID
	}).(pulumi.StringPtrOutput)
}

// PolicyInstanceID represents the ID of the DNSRecord
func (o GlobalDNSRecordStatusProviderStatusRoute53PtrOutput) PolicyInstanceID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalDNSRecordStatusProviderStatusRoute53) *string {
		if v == nil {
			return nil
		}
		return v.PolicyInstanceID
	}).(pulumi.StringPtrOutput)
}

// HealthCheckID represents the route53 healthcheck created for this record
type GlobalDNSRecordStatusProviderStatusRoute53HealthCheckID struct {
}

// GlobalDNSRecordStatusProviderStatusRoute53HealthCheckIDInput is an input type that accepts GlobalDNSRecordStatusProviderStatusRoute53HealthCheckIDArgs and GlobalDNSRecordStatusProviderStatusRoute53HealthCheckIDOutput values.
// You can construct a concrete instance of `GlobalDNSRecordStatusProviderStatusRoute53HealthCheckIDInput` via:
//
//          GlobalDNSRecordStatusProviderStatusRoute53HealthCheckIDArgs{...}
type GlobalDNSRecordStatusProviderStatusRoute53HealthCheckIDInput interface {
	pulumi.Input

	ToGlobalDNSRecordStatusProviderStatusRoute53HealthCheckIDOutput() GlobalDNSRecordStatusProviderStatusRoute53HealthCheckIDOutput
	ToGlobalDNSRecordStatusProviderStatusRoute53HealthCheckIDOutputWithContext(context.Context) GlobalDNSRecordStatusProviderStatusRoute53HealthCheckIDOutput
}

// HealthCheckID represents the route53 healthcheck created for this record
type GlobalDNSRecordStatusProviderStatusRoute53HealthCheckIDArgs struct {
}

func (GlobalDNSRecordStatusProviderStatusRoute53HealthCheckIDArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSRecordStatusProviderStatusRoute53HealthCheckID)(nil)).Elem()
}

func (i GlobalDNSRecordStatusProviderStatusRoute53HealthCheckIDArgs) ToGlobalDNSRecordStatusProviderStatusRoute53HealthCheckIDOutput() GlobalDNSRecordStatusProviderStatusRoute53HealthCheckIDOutput {
	return i.ToGlobalDNSRecordStatusProviderStatusRoute53HealthCheckIDOutputWithContext(context.Background())
}

func (i GlobalDNSRecordStatusProviderStatusRoute53HealthCheckIDArgs) ToGlobalDNSRecordStatusProviderStatusRoute53HealthCheckIDOutputWithContext(ctx context.Context) GlobalDNSRecordStatusProviderStatusRoute53HealthCheckIDOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSRecordStatusProviderStatusRoute53HealthCheckIDOutput)
}

// HealthCheckID represents the route53 healthcheck created for this record
type GlobalDNSRecordStatusProviderStatusRoute53HealthCheckIDOutput struct{ *pulumi.OutputState }

func (GlobalDNSRecordStatusProviderStatusRoute53HealthCheckIDOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSRecordStatusProviderStatusRoute53HealthCheckID)(nil)).Elem()
}

func (o GlobalDNSRecordStatusProviderStatusRoute53HealthCheckIDOutput) ToGlobalDNSRecordStatusProviderStatusRoute53HealthCheckIDOutput() GlobalDNSRecordStatusProviderStatusRoute53HealthCheckIDOutput {
	return o
}

func (o GlobalDNSRecordStatusProviderStatusRoute53HealthCheckIDOutput) ToGlobalDNSRecordStatusProviderStatusRoute53HealthCheckIDOutputWithContext(ctx context.Context) GlobalDNSRecordStatusProviderStatusRoute53HealthCheckIDOutput {
	return o
}

// GlobalDNSZone is the Schema for the globaldnszones API
type GlobalDNSZoneType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// GlobalDNSZoneSpec defines the desired state of GlobalDNSZone
	Spec *GlobalDNSZoneSpec `pulumi:"spec"`
	// GlobalDNSZoneStatus defines the observed state of GlobalDNSZone
	Status *GlobalDNSZoneStatus `pulumi:"status"`
}

// GlobalDNSZoneTypeInput is an input type that accepts GlobalDNSZoneTypeArgs and GlobalDNSZoneTypeOutput values.
// You can construct a concrete instance of `GlobalDNSZoneTypeInput` via:
//
//          GlobalDNSZoneTypeArgs{...}
type GlobalDNSZoneTypeInput interface {
	pulumi.Input

	ToGlobalDNSZoneTypeOutput() GlobalDNSZoneTypeOutput
	ToGlobalDNSZoneTypeOutputWithContext(context.Context) GlobalDNSZoneTypeOutput
}

// GlobalDNSZone is the Schema for the globaldnszones API
type GlobalDNSZoneTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// GlobalDNSZoneSpec defines the desired state of GlobalDNSZone
	Spec GlobalDNSZoneSpecPtrInput `pulumi:"spec"`
	// GlobalDNSZoneStatus defines the observed state of GlobalDNSZone
	Status GlobalDNSZoneStatusPtrInput `pulumi:"status"`
}

func (GlobalDNSZoneTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSZoneType)(nil)).Elem()
}

func (i GlobalDNSZoneTypeArgs) ToGlobalDNSZoneTypeOutput() GlobalDNSZoneTypeOutput {
	return i.ToGlobalDNSZoneTypeOutputWithContext(context.Background())
}

func (i GlobalDNSZoneTypeArgs) ToGlobalDNSZoneTypeOutputWithContext(ctx context.Context) GlobalDNSZoneTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSZoneTypeOutput)
}

// GlobalDNSZone is the Schema for the globaldnszones API
type GlobalDNSZoneTypeOutput struct{ *pulumi.OutputState }

func (GlobalDNSZoneTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSZoneType)(nil)).Elem()
}

func (o GlobalDNSZoneTypeOutput) ToGlobalDNSZoneTypeOutput() GlobalDNSZoneTypeOutput {
	return o
}

func (o GlobalDNSZoneTypeOutput) ToGlobalDNSZoneTypeOutputWithContext(ctx context.Context) GlobalDNSZoneTypeOutput {
	return o
}

func (o GlobalDNSZoneTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalDNSZoneType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o GlobalDNSZoneTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalDNSZoneType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o GlobalDNSZoneTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v GlobalDNSZoneType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// GlobalDNSZoneSpec defines the desired state of GlobalDNSZone
func (o GlobalDNSZoneTypeOutput) Spec() GlobalDNSZoneSpecPtrOutput {
	return o.ApplyT(func(v GlobalDNSZoneType) *GlobalDNSZoneSpec { return v.Spec }).(GlobalDNSZoneSpecPtrOutput)
}

// GlobalDNSZoneStatus defines the observed state of GlobalDNSZone
func (o GlobalDNSZoneTypeOutput) Status() GlobalDNSZoneStatusPtrOutput {
	return o.ApplyT(func(v GlobalDNSZoneType) *GlobalDNSZoneStatus { return v.Status }).(GlobalDNSZoneStatusPtrOutput)
}

type GlobalDNSZoneMetadata struct {
}

// GlobalDNSZoneMetadataInput is an input type that accepts GlobalDNSZoneMetadataArgs and GlobalDNSZoneMetadataOutput values.
// You can construct a concrete instance of `GlobalDNSZoneMetadataInput` via:
//
//          GlobalDNSZoneMetadataArgs{...}
type GlobalDNSZoneMetadataInput interface {
	pulumi.Input

	ToGlobalDNSZoneMetadataOutput() GlobalDNSZoneMetadataOutput
	ToGlobalDNSZoneMetadataOutputWithContext(context.Context) GlobalDNSZoneMetadataOutput
}

type GlobalDNSZoneMetadataArgs struct {
}

func (GlobalDNSZoneMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSZoneMetadata)(nil)).Elem()
}

func (i GlobalDNSZoneMetadataArgs) ToGlobalDNSZoneMetadataOutput() GlobalDNSZoneMetadataOutput {
	return i.ToGlobalDNSZoneMetadataOutputWithContext(context.Background())
}

func (i GlobalDNSZoneMetadataArgs) ToGlobalDNSZoneMetadataOutputWithContext(ctx context.Context) GlobalDNSZoneMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSZoneMetadataOutput)
}

type GlobalDNSZoneMetadataOutput struct{ *pulumi.OutputState }

func (GlobalDNSZoneMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSZoneMetadata)(nil)).Elem()
}

func (o GlobalDNSZoneMetadataOutput) ToGlobalDNSZoneMetadataOutput() GlobalDNSZoneMetadataOutput {
	return o
}

func (o GlobalDNSZoneMetadataOutput) ToGlobalDNSZoneMetadataOutputWithContext(ctx context.Context) GlobalDNSZoneMetadataOutput {
	return o
}

// GlobalDNSZoneSpec defines the desired state of GlobalDNSZone
type GlobalDNSZoneSpec struct {
	Domain string `pulumi:"domain"`
	// ProviderConfig configures kind and access to the DNS Zone. Exactly one of its members must be set.
	Provider GlobalDNSZoneSpecProvider `pulumi:"provider"`
}

// GlobalDNSZoneSpecInput is an input type that accepts GlobalDNSZoneSpecArgs and GlobalDNSZoneSpecOutput values.
// You can construct a concrete instance of `GlobalDNSZoneSpecInput` via:
//
//          GlobalDNSZoneSpecArgs{...}
type GlobalDNSZoneSpecInput interface {
	pulumi.Input

	ToGlobalDNSZoneSpecOutput() GlobalDNSZoneSpecOutput
	ToGlobalDNSZoneSpecOutputWithContext(context.Context) GlobalDNSZoneSpecOutput
}

// GlobalDNSZoneSpec defines the desired state of GlobalDNSZone
type GlobalDNSZoneSpecArgs struct {
	Domain pulumi.StringInput `pulumi:"domain"`
	// ProviderConfig configures kind and access to the DNS Zone. Exactly one of its members must be set.
	Provider GlobalDNSZoneSpecProviderInput `pulumi:"provider"`
}

func (GlobalDNSZoneSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSZoneSpec)(nil)).Elem()
}

func (i GlobalDNSZoneSpecArgs) ToGlobalDNSZoneSpecOutput() GlobalDNSZoneSpecOutput {
	return i.ToGlobalDNSZoneSpecOutputWithContext(context.Background())
}

func (i GlobalDNSZoneSpecArgs) ToGlobalDNSZoneSpecOutputWithContext(ctx context.Context) GlobalDNSZoneSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSZoneSpecOutput)
}

func (i GlobalDNSZoneSpecArgs) ToGlobalDNSZoneSpecPtrOutput() GlobalDNSZoneSpecPtrOutput {
	return i.ToGlobalDNSZoneSpecPtrOutputWithContext(context.Background())
}

func (i GlobalDNSZoneSpecArgs) ToGlobalDNSZoneSpecPtrOutputWithContext(ctx context.Context) GlobalDNSZoneSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSZoneSpecOutput).ToGlobalDNSZoneSpecPtrOutputWithContext(ctx)
}

// GlobalDNSZoneSpecPtrInput is an input type that accepts GlobalDNSZoneSpecArgs, GlobalDNSZoneSpecPtr and GlobalDNSZoneSpecPtrOutput values.
// You can construct a concrete instance of `GlobalDNSZoneSpecPtrInput` via:
//
//          GlobalDNSZoneSpecArgs{...}
//
//  or:
//
//          nil
type GlobalDNSZoneSpecPtrInput interface {
	pulumi.Input

	ToGlobalDNSZoneSpecPtrOutput() GlobalDNSZoneSpecPtrOutput
	ToGlobalDNSZoneSpecPtrOutputWithContext(context.Context) GlobalDNSZoneSpecPtrOutput
}

type globalDNSZoneSpecPtrType GlobalDNSZoneSpecArgs

func GlobalDNSZoneSpecPtr(v *GlobalDNSZoneSpecArgs) GlobalDNSZoneSpecPtrInput {
	return (*globalDNSZoneSpecPtrType)(v)
}

func (*globalDNSZoneSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalDNSZoneSpec)(nil)).Elem()
}

func (i *globalDNSZoneSpecPtrType) ToGlobalDNSZoneSpecPtrOutput() GlobalDNSZoneSpecPtrOutput {
	return i.ToGlobalDNSZoneSpecPtrOutputWithContext(context.Background())
}

func (i *globalDNSZoneSpecPtrType) ToGlobalDNSZoneSpecPtrOutputWithContext(ctx context.Context) GlobalDNSZoneSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSZoneSpecPtrOutput)
}

// GlobalDNSZoneSpec defines the desired state of GlobalDNSZone
type GlobalDNSZoneSpecOutput struct{ *pulumi.OutputState }

func (GlobalDNSZoneSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSZoneSpec)(nil)).Elem()
}

func (o GlobalDNSZoneSpecOutput) ToGlobalDNSZoneSpecOutput() GlobalDNSZoneSpecOutput {
	return o
}

func (o GlobalDNSZoneSpecOutput) ToGlobalDNSZoneSpecOutputWithContext(ctx context.Context) GlobalDNSZoneSpecOutput {
	return o
}

func (o GlobalDNSZoneSpecOutput) ToGlobalDNSZoneSpecPtrOutput() GlobalDNSZoneSpecPtrOutput {
	return o.ToGlobalDNSZoneSpecPtrOutputWithContext(context.Background())
}

func (o GlobalDNSZoneSpecOutput) ToGlobalDNSZoneSpecPtrOutputWithContext(ctx context.Context) GlobalDNSZoneSpecPtrOutput {
	return o.ApplyT(func(v GlobalDNSZoneSpec) *GlobalDNSZoneSpec {
		return &v
	}).(GlobalDNSZoneSpecPtrOutput)
}
func (o GlobalDNSZoneSpecOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalDNSZoneSpec) string { return v.Domain }).(pulumi.StringOutput)
}

// ProviderConfig configures kind and access to the DNS Zone. Exactly one of its members must be set.
func (o GlobalDNSZoneSpecOutput) Provider() GlobalDNSZoneSpecProviderOutput {
	return o.ApplyT(func(v GlobalDNSZoneSpec) GlobalDNSZoneSpecProvider { return v.Provider }).(GlobalDNSZoneSpecProviderOutput)
}

type GlobalDNSZoneSpecPtrOutput struct{ *pulumi.OutputState }

func (GlobalDNSZoneSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalDNSZoneSpec)(nil)).Elem()
}

func (o GlobalDNSZoneSpecPtrOutput) ToGlobalDNSZoneSpecPtrOutput() GlobalDNSZoneSpecPtrOutput {
	return o
}

func (o GlobalDNSZoneSpecPtrOutput) ToGlobalDNSZoneSpecPtrOutputWithContext(ctx context.Context) GlobalDNSZoneSpecPtrOutput {
	return o
}

func (o GlobalDNSZoneSpecPtrOutput) Elem() GlobalDNSZoneSpecOutput {
	return o.ApplyT(func(v *GlobalDNSZoneSpec) GlobalDNSZoneSpec { return *v }).(GlobalDNSZoneSpecOutput)
}

func (o GlobalDNSZoneSpecPtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalDNSZoneSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Domain
	}).(pulumi.StringPtrOutput)
}

// ProviderConfig configures kind and access to the DNS Zone. Exactly one of its members must be set.
func (o GlobalDNSZoneSpecPtrOutput) Provider() GlobalDNSZoneSpecProviderPtrOutput {
	return o.ApplyT(func(v *GlobalDNSZoneSpec) *GlobalDNSZoneSpecProvider {
		if v == nil {
			return nil
		}
		return &v.Provider
	}).(GlobalDNSZoneSpecProviderPtrOutput)
}

// ProviderConfig configures kind and access to the DNS Zone. Exactly one of its members must be set.
type GlobalDNSZoneSpecProvider struct {
	// ExternalDNSProviderConfig contains configuration on how configure the external DNS provider
	ExternalDNS *GlobalDNSZoneSpecProviderExternalDNS `pulumi:"externalDNS"`
	// Route53ProviderConfig contains configuration on how to access the route53 API
	Route53 *GlobalDNSZoneSpecProviderRoute53 `pulumi:"route53"`
}

// GlobalDNSZoneSpecProviderInput is an input type that accepts GlobalDNSZoneSpecProviderArgs and GlobalDNSZoneSpecProviderOutput values.
// You can construct a concrete instance of `GlobalDNSZoneSpecProviderInput` via:
//
//          GlobalDNSZoneSpecProviderArgs{...}
type GlobalDNSZoneSpecProviderInput interface {
	pulumi.Input

	ToGlobalDNSZoneSpecProviderOutput() GlobalDNSZoneSpecProviderOutput
	ToGlobalDNSZoneSpecProviderOutputWithContext(context.Context) GlobalDNSZoneSpecProviderOutput
}

// ProviderConfig configures kind and access to the DNS Zone. Exactly one of its members must be set.
type GlobalDNSZoneSpecProviderArgs struct {
	// ExternalDNSProviderConfig contains configuration on how configure the external DNS provider
	ExternalDNS GlobalDNSZoneSpecProviderExternalDNSPtrInput `pulumi:"externalDNS"`
	// Route53ProviderConfig contains configuration on how to access the route53 API
	Route53 GlobalDNSZoneSpecProviderRoute53PtrInput `pulumi:"route53"`
}

func (GlobalDNSZoneSpecProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSZoneSpecProvider)(nil)).Elem()
}

func (i GlobalDNSZoneSpecProviderArgs) ToGlobalDNSZoneSpecProviderOutput() GlobalDNSZoneSpecProviderOutput {
	return i.ToGlobalDNSZoneSpecProviderOutputWithContext(context.Background())
}

func (i GlobalDNSZoneSpecProviderArgs) ToGlobalDNSZoneSpecProviderOutputWithContext(ctx context.Context) GlobalDNSZoneSpecProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSZoneSpecProviderOutput)
}

func (i GlobalDNSZoneSpecProviderArgs) ToGlobalDNSZoneSpecProviderPtrOutput() GlobalDNSZoneSpecProviderPtrOutput {
	return i.ToGlobalDNSZoneSpecProviderPtrOutputWithContext(context.Background())
}

func (i GlobalDNSZoneSpecProviderArgs) ToGlobalDNSZoneSpecProviderPtrOutputWithContext(ctx context.Context) GlobalDNSZoneSpecProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSZoneSpecProviderOutput).ToGlobalDNSZoneSpecProviderPtrOutputWithContext(ctx)
}

// GlobalDNSZoneSpecProviderPtrInput is an input type that accepts GlobalDNSZoneSpecProviderArgs, GlobalDNSZoneSpecProviderPtr and GlobalDNSZoneSpecProviderPtrOutput values.
// You can construct a concrete instance of `GlobalDNSZoneSpecProviderPtrInput` via:
//
//          GlobalDNSZoneSpecProviderArgs{...}
//
//  or:
//
//          nil
type GlobalDNSZoneSpecProviderPtrInput interface {
	pulumi.Input

	ToGlobalDNSZoneSpecProviderPtrOutput() GlobalDNSZoneSpecProviderPtrOutput
	ToGlobalDNSZoneSpecProviderPtrOutputWithContext(context.Context) GlobalDNSZoneSpecProviderPtrOutput
}

type globalDNSZoneSpecProviderPtrType GlobalDNSZoneSpecProviderArgs

func GlobalDNSZoneSpecProviderPtr(v *GlobalDNSZoneSpecProviderArgs) GlobalDNSZoneSpecProviderPtrInput {
	return (*globalDNSZoneSpecProviderPtrType)(v)
}

func (*globalDNSZoneSpecProviderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalDNSZoneSpecProvider)(nil)).Elem()
}

func (i *globalDNSZoneSpecProviderPtrType) ToGlobalDNSZoneSpecProviderPtrOutput() GlobalDNSZoneSpecProviderPtrOutput {
	return i.ToGlobalDNSZoneSpecProviderPtrOutputWithContext(context.Background())
}

func (i *globalDNSZoneSpecProviderPtrType) ToGlobalDNSZoneSpecProviderPtrOutputWithContext(ctx context.Context) GlobalDNSZoneSpecProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSZoneSpecProviderPtrOutput)
}

// ProviderConfig configures kind and access to the DNS Zone. Exactly one of its members must be set.
type GlobalDNSZoneSpecProviderOutput struct{ *pulumi.OutputState }

func (GlobalDNSZoneSpecProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSZoneSpecProvider)(nil)).Elem()
}

func (o GlobalDNSZoneSpecProviderOutput) ToGlobalDNSZoneSpecProviderOutput() GlobalDNSZoneSpecProviderOutput {
	return o
}

func (o GlobalDNSZoneSpecProviderOutput) ToGlobalDNSZoneSpecProviderOutputWithContext(ctx context.Context) GlobalDNSZoneSpecProviderOutput {
	return o
}

func (o GlobalDNSZoneSpecProviderOutput) ToGlobalDNSZoneSpecProviderPtrOutput() GlobalDNSZoneSpecProviderPtrOutput {
	return o.ToGlobalDNSZoneSpecProviderPtrOutputWithContext(context.Background())
}

func (o GlobalDNSZoneSpecProviderOutput) ToGlobalDNSZoneSpecProviderPtrOutputWithContext(ctx context.Context) GlobalDNSZoneSpecProviderPtrOutput {
	return o.ApplyT(func(v GlobalDNSZoneSpecProvider) *GlobalDNSZoneSpecProvider {
		return &v
	}).(GlobalDNSZoneSpecProviderPtrOutput)
}

// ExternalDNSProviderConfig contains configuration on how configure the external DNS provider
func (o GlobalDNSZoneSpecProviderOutput) ExternalDNS() GlobalDNSZoneSpecProviderExternalDNSPtrOutput {
	return o.ApplyT(func(v GlobalDNSZoneSpecProvider) *GlobalDNSZoneSpecProviderExternalDNS { return v.ExternalDNS }).(GlobalDNSZoneSpecProviderExternalDNSPtrOutput)
}

// Route53ProviderConfig contains configuration on how to access the route53 API
func (o GlobalDNSZoneSpecProviderOutput) Route53() GlobalDNSZoneSpecProviderRoute53PtrOutput {
	return o.ApplyT(func(v GlobalDNSZoneSpecProvider) *GlobalDNSZoneSpecProviderRoute53 { return v.Route53 }).(GlobalDNSZoneSpecProviderRoute53PtrOutput)
}

type GlobalDNSZoneSpecProviderPtrOutput struct{ *pulumi.OutputState }

func (GlobalDNSZoneSpecProviderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalDNSZoneSpecProvider)(nil)).Elem()
}

func (o GlobalDNSZoneSpecProviderPtrOutput) ToGlobalDNSZoneSpecProviderPtrOutput() GlobalDNSZoneSpecProviderPtrOutput {
	return o
}

func (o GlobalDNSZoneSpecProviderPtrOutput) ToGlobalDNSZoneSpecProviderPtrOutputWithContext(ctx context.Context) GlobalDNSZoneSpecProviderPtrOutput {
	return o
}

func (o GlobalDNSZoneSpecProviderPtrOutput) Elem() GlobalDNSZoneSpecProviderOutput {
	return o.ApplyT(func(v *GlobalDNSZoneSpecProvider) GlobalDNSZoneSpecProvider { return *v }).(GlobalDNSZoneSpecProviderOutput)
}

// ExternalDNSProviderConfig contains configuration on how configure the external DNS provider
func (o GlobalDNSZoneSpecProviderPtrOutput) ExternalDNS() GlobalDNSZoneSpecProviderExternalDNSPtrOutput {
	return o.ApplyT(func(v *GlobalDNSZoneSpecProvider) *GlobalDNSZoneSpecProviderExternalDNS {
		if v == nil {
			return nil
		}
		return v.ExternalDNS
	}).(GlobalDNSZoneSpecProviderExternalDNSPtrOutput)
}

// Route53ProviderConfig contains configuration on how to access the route53 API
func (o GlobalDNSZoneSpecProviderPtrOutput) Route53() GlobalDNSZoneSpecProviderRoute53PtrOutput {
	return o.ApplyT(func(v *GlobalDNSZoneSpecProvider) *GlobalDNSZoneSpecProviderRoute53 {
		if v == nil {
			return nil
		}
		return v.Route53
	}).(GlobalDNSZoneSpecProviderRoute53PtrOutput)
}

// ExternalDNSProviderConfig contains configuration on how configure the external DNS provider
type GlobalDNSZoneSpecProviderExternalDNS struct {
	// Annotations is a map of annotations to be added to the created DNSEndpoint records.
	Annotations map[string]string `pulumi:"annotations"`
}

// GlobalDNSZoneSpecProviderExternalDNSInput is an input type that accepts GlobalDNSZoneSpecProviderExternalDNSArgs and GlobalDNSZoneSpecProviderExternalDNSOutput values.
// You can construct a concrete instance of `GlobalDNSZoneSpecProviderExternalDNSInput` via:
//
//          GlobalDNSZoneSpecProviderExternalDNSArgs{...}
type GlobalDNSZoneSpecProviderExternalDNSInput interface {
	pulumi.Input

	ToGlobalDNSZoneSpecProviderExternalDNSOutput() GlobalDNSZoneSpecProviderExternalDNSOutput
	ToGlobalDNSZoneSpecProviderExternalDNSOutputWithContext(context.Context) GlobalDNSZoneSpecProviderExternalDNSOutput
}

// ExternalDNSProviderConfig contains configuration on how configure the external DNS provider
type GlobalDNSZoneSpecProviderExternalDNSArgs struct {
	// Annotations is a map of annotations to be added to the created DNSEndpoint records.
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
}

func (GlobalDNSZoneSpecProviderExternalDNSArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSZoneSpecProviderExternalDNS)(nil)).Elem()
}

func (i GlobalDNSZoneSpecProviderExternalDNSArgs) ToGlobalDNSZoneSpecProviderExternalDNSOutput() GlobalDNSZoneSpecProviderExternalDNSOutput {
	return i.ToGlobalDNSZoneSpecProviderExternalDNSOutputWithContext(context.Background())
}

func (i GlobalDNSZoneSpecProviderExternalDNSArgs) ToGlobalDNSZoneSpecProviderExternalDNSOutputWithContext(ctx context.Context) GlobalDNSZoneSpecProviderExternalDNSOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSZoneSpecProviderExternalDNSOutput)
}

func (i GlobalDNSZoneSpecProviderExternalDNSArgs) ToGlobalDNSZoneSpecProviderExternalDNSPtrOutput() GlobalDNSZoneSpecProviderExternalDNSPtrOutput {
	return i.ToGlobalDNSZoneSpecProviderExternalDNSPtrOutputWithContext(context.Background())
}

func (i GlobalDNSZoneSpecProviderExternalDNSArgs) ToGlobalDNSZoneSpecProviderExternalDNSPtrOutputWithContext(ctx context.Context) GlobalDNSZoneSpecProviderExternalDNSPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSZoneSpecProviderExternalDNSOutput).ToGlobalDNSZoneSpecProviderExternalDNSPtrOutputWithContext(ctx)
}

// GlobalDNSZoneSpecProviderExternalDNSPtrInput is an input type that accepts GlobalDNSZoneSpecProviderExternalDNSArgs, GlobalDNSZoneSpecProviderExternalDNSPtr and GlobalDNSZoneSpecProviderExternalDNSPtrOutput values.
// You can construct a concrete instance of `GlobalDNSZoneSpecProviderExternalDNSPtrInput` via:
//
//          GlobalDNSZoneSpecProviderExternalDNSArgs{...}
//
//  or:
//
//          nil
type GlobalDNSZoneSpecProviderExternalDNSPtrInput interface {
	pulumi.Input

	ToGlobalDNSZoneSpecProviderExternalDNSPtrOutput() GlobalDNSZoneSpecProviderExternalDNSPtrOutput
	ToGlobalDNSZoneSpecProviderExternalDNSPtrOutputWithContext(context.Context) GlobalDNSZoneSpecProviderExternalDNSPtrOutput
}

type globalDNSZoneSpecProviderExternalDNSPtrType GlobalDNSZoneSpecProviderExternalDNSArgs

func GlobalDNSZoneSpecProviderExternalDNSPtr(v *GlobalDNSZoneSpecProviderExternalDNSArgs) GlobalDNSZoneSpecProviderExternalDNSPtrInput {
	return (*globalDNSZoneSpecProviderExternalDNSPtrType)(v)
}

func (*globalDNSZoneSpecProviderExternalDNSPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalDNSZoneSpecProviderExternalDNS)(nil)).Elem()
}

func (i *globalDNSZoneSpecProviderExternalDNSPtrType) ToGlobalDNSZoneSpecProviderExternalDNSPtrOutput() GlobalDNSZoneSpecProviderExternalDNSPtrOutput {
	return i.ToGlobalDNSZoneSpecProviderExternalDNSPtrOutputWithContext(context.Background())
}

func (i *globalDNSZoneSpecProviderExternalDNSPtrType) ToGlobalDNSZoneSpecProviderExternalDNSPtrOutputWithContext(ctx context.Context) GlobalDNSZoneSpecProviderExternalDNSPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSZoneSpecProviderExternalDNSPtrOutput)
}

// ExternalDNSProviderConfig contains configuration on how configure the external DNS provider
type GlobalDNSZoneSpecProviderExternalDNSOutput struct{ *pulumi.OutputState }

func (GlobalDNSZoneSpecProviderExternalDNSOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSZoneSpecProviderExternalDNS)(nil)).Elem()
}

func (o GlobalDNSZoneSpecProviderExternalDNSOutput) ToGlobalDNSZoneSpecProviderExternalDNSOutput() GlobalDNSZoneSpecProviderExternalDNSOutput {
	return o
}

func (o GlobalDNSZoneSpecProviderExternalDNSOutput) ToGlobalDNSZoneSpecProviderExternalDNSOutputWithContext(ctx context.Context) GlobalDNSZoneSpecProviderExternalDNSOutput {
	return o
}

func (o GlobalDNSZoneSpecProviderExternalDNSOutput) ToGlobalDNSZoneSpecProviderExternalDNSPtrOutput() GlobalDNSZoneSpecProviderExternalDNSPtrOutput {
	return o.ToGlobalDNSZoneSpecProviderExternalDNSPtrOutputWithContext(context.Background())
}

func (o GlobalDNSZoneSpecProviderExternalDNSOutput) ToGlobalDNSZoneSpecProviderExternalDNSPtrOutputWithContext(ctx context.Context) GlobalDNSZoneSpecProviderExternalDNSPtrOutput {
	return o.ApplyT(func(v GlobalDNSZoneSpecProviderExternalDNS) *GlobalDNSZoneSpecProviderExternalDNS {
		return &v
	}).(GlobalDNSZoneSpecProviderExternalDNSPtrOutput)
}

// Annotations is a map of annotations to be added to the created DNSEndpoint records.
func (o GlobalDNSZoneSpecProviderExternalDNSOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v GlobalDNSZoneSpecProviderExternalDNS) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

type GlobalDNSZoneSpecProviderExternalDNSPtrOutput struct{ *pulumi.OutputState }

func (GlobalDNSZoneSpecProviderExternalDNSPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalDNSZoneSpecProviderExternalDNS)(nil)).Elem()
}

func (o GlobalDNSZoneSpecProviderExternalDNSPtrOutput) ToGlobalDNSZoneSpecProviderExternalDNSPtrOutput() GlobalDNSZoneSpecProviderExternalDNSPtrOutput {
	return o
}

func (o GlobalDNSZoneSpecProviderExternalDNSPtrOutput) ToGlobalDNSZoneSpecProviderExternalDNSPtrOutputWithContext(ctx context.Context) GlobalDNSZoneSpecProviderExternalDNSPtrOutput {
	return o
}

func (o GlobalDNSZoneSpecProviderExternalDNSPtrOutput) Elem() GlobalDNSZoneSpecProviderExternalDNSOutput {
	return o.ApplyT(func(v *GlobalDNSZoneSpecProviderExternalDNS) GlobalDNSZoneSpecProviderExternalDNS { return *v }).(GlobalDNSZoneSpecProviderExternalDNSOutput)
}

// Annotations is a map of annotations to be added to the created DNSEndpoint records.
func (o GlobalDNSZoneSpecProviderExternalDNSPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GlobalDNSZoneSpecProviderExternalDNS) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

// Annotations is a map of annotations to be added to the created DNSEndpoint records.
type GlobalDNSZoneSpecProviderExternalDNSAnnotations struct {
}

// GlobalDNSZoneSpecProviderExternalDNSAnnotationsInput is an input type that accepts GlobalDNSZoneSpecProviderExternalDNSAnnotationsArgs and GlobalDNSZoneSpecProviderExternalDNSAnnotationsOutput values.
// You can construct a concrete instance of `GlobalDNSZoneSpecProviderExternalDNSAnnotationsInput` via:
//
//          GlobalDNSZoneSpecProviderExternalDNSAnnotationsArgs{...}
type GlobalDNSZoneSpecProviderExternalDNSAnnotationsInput interface {
	pulumi.Input

	ToGlobalDNSZoneSpecProviderExternalDNSAnnotationsOutput() GlobalDNSZoneSpecProviderExternalDNSAnnotationsOutput
	ToGlobalDNSZoneSpecProviderExternalDNSAnnotationsOutputWithContext(context.Context) GlobalDNSZoneSpecProviderExternalDNSAnnotationsOutput
}

// Annotations is a map of annotations to be added to the created DNSEndpoint records.
type GlobalDNSZoneSpecProviderExternalDNSAnnotationsArgs struct {
}

func (GlobalDNSZoneSpecProviderExternalDNSAnnotationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSZoneSpecProviderExternalDNSAnnotations)(nil)).Elem()
}

func (i GlobalDNSZoneSpecProviderExternalDNSAnnotationsArgs) ToGlobalDNSZoneSpecProviderExternalDNSAnnotationsOutput() GlobalDNSZoneSpecProviderExternalDNSAnnotationsOutput {
	return i.ToGlobalDNSZoneSpecProviderExternalDNSAnnotationsOutputWithContext(context.Background())
}

func (i GlobalDNSZoneSpecProviderExternalDNSAnnotationsArgs) ToGlobalDNSZoneSpecProviderExternalDNSAnnotationsOutputWithContext(ctx context.Context) GlobalDNSZoneSpecProviderExternalDNSAnnotationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSZoneSpecProviderExternalDNSAnnotationsOutput)
}

// Annotations is a map of annotations to be added to the created DNSEndpoint records.
type GlobalDNSZoneSpecProviderExternalDNSAnnotationsOutput struct{ *pulumi.OutputState }

func (GlobalDNSZoneSpecProviderExternalDNSAnnotationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSZoneSpecProviderExternalDNSAnnotations)(nil)).Elem()
}

func (o GlobalDNSZoneSpecProviderExternalDNSAnnotationsOutput) ToGlobalDNSZoneSpecProviderExternalDNSAnnotationsOutput() GlobalDNSZoneSpecProviderExternalDNSAnnotationsOutput {
	return o
}

func (o GlobalDNSZoneSpecProviderExternalDNSAnnotationsOutput) ToGlobalDNSZoneSpecProviderExternalDNSAnnotationsOutputWithContext(ctx context.Context) GlobalDNSZoneSpecProviderExternalDNSAnnotationsOutput {
	return o
}

// Route53ProviderConfig contains configuration on how to access the route53 API
type GlobalDNSZoneSpecProviderRoute53 struct {
	// CredentialsSecretRef is a reference to a secret containing the credentials to access the AWS API //TODO (content and needed permissions) expected secret keys are "aws_access_key_id" and "aws_secret_access_key"
	CredentialsSecretRef GlobalDNSZoneSpecProviderRoute53CredentialsSecretRef `pulumi:"credentialsSecretRef"`
	// ZoneID is the AWS route53 zone ID.
	ZoneID string `pulumi:"zoneID"`
}

// GlobalDNSZoneSpecProviderRoute53Input is an input type that accepts GlobalDNSZoneSpecProviderRoute53Args and GlobalDNSZoneSpecProviderRoute53Output values.
// You can construct a concrete instance of `GlobalDNSZoneSpecProviderRoute53Input` via:
//
//          GlobalDNSZoneSpecProviderRoute53Args{...}
type GlobalDNSZoneSpecProviderRoute53Input interface {
	pulumi.Input

	ToGlobalDNSZoneSpecProviderRoute53Output() GlobalDNSZoneSpecProviderRoute53Output
	ToGlobalDNSZoneSpecProviderRoute53OutputWithContext(context.Context) GlobalDNSZoneSpecProviderRoute53Output
}

// Route53ProviderConfig contains configuration on how to access the route53 API
type GlobalDNSZoneSpecProviderRoute53Args struct {
	// CredentialsSecretRef is a reference to a secret containing the credentials to access the AWS API //TODO (content and needed permissions) expected secret keys are "aws_access_key_id" and "aws_secret_access_key"
	CredentialsSecretRef GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefInput `pulumi:"credentialsSecretRef"`
	// ZoneID is the AWS route53 zone ID.
	ZoneID pulumi.StringInput `pulumi:"zoneID"`
}

func (GlobalDNSZoneSpecProviderRoute53Args) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSZoneSpecProviderRoute53)(nil)).Elem()
}

func (i GlobalDNSZoneSpecProviderRoute53Args) ToGlobalDNSZoneSpecProviderRoute53Output() GlobalDNSZoneSpecProviderRoute53Output {
	return i.ToGlobalDNSZoneSpecProviderRoute53OutputWithContext(context.Background())
}

func (i GlobalDNSZoneSpecProviderRoute53Args) ToGlobalDNSZoneSpecProviderRoute53OutputWithContext(ctx context.Context) GlobalDNSZoneSpecProviderRoute53Output {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSZoneSpecProviderRoute53Output)
}

func (i GlobalDNSZoneSpecProviderRoute53Args) ToGlobalDNSZoneSpecProviderRoute53PtrOutput() GlobalDNSZoneSpecProviderRoute53PtrOutput {
	return i.ToGlobalDNSZoneSpecProviderRoute53PtrOutputWithContext(context.Background())
}

func (i GlobalDNSZoneSpecProviderRoute53Args) ToGlobalDNSZoneSpecProviderRoute53PtrOutputWithContext(ctx context.Context) GlobalDNSZoneSpecProviderRoute53PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSZoneSpecProviderRoute53Output).ToGlobalDNSZoneSpecProviderRoute53PtrOutputWithContext(ctx)
}

// GlobalDNSZoneSpecProviderRoute53PtrInput is an input type that accepts GlobalDNSZoneSpecProviderRoute53Args, GlobalDNSZoneSpecProviderRoute53Ptr and GlobalDNSZoneSpecProviderRoute53PtrOutput values.
// You can construct a concrete instance of `GlobalDNSZoneSpecProviderRoute53PtrInput` via:
//
//          GlobalDNSZoneSpecProviderRoute53Args{...}
//
//  or:
//
//          nil
type GlobalDNSZoneSpecProviderRoute53PtrInput interface {
	pulumi.Input

	ToGlobalDNSZoneSpecProviderRoute53PtrOutput() GlobalDNSZoneSpecProviderRoute53PtrOutput
	ToGlobalDNSZoneSpecProviderRoute53PtrOutputWithContext(context.Context) GlobalDNSZoneSpecProviderRoute53PtrOutput
}

type globalDNSZoneSpecProviderRoute53PtrType GlobalDNSZoneSpecProviderRoute53Args

func GlobalDNSZoneSpecProviderRoute53Ptr(v *GlobalDNSZoneSpecProviderRoute53Args) GlobalDNSZoneSpecProviderRoute53PtrInput {
	return (*globalDNSZoneSpecProviderRoute53PtrType)(v)
}

func (*globalDNSZoneSpecProviderRoute53PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalDNSZoneSpecProviderRoute53)(nil)).Elem()
}

func (i *globalDNSZoneSpecProviderRoute53PtrType) ToGlobalDNSZoneSpecProviderRoute53PtrOutput() GlobalDNSZoneSpecProviderRoute53PtrOutput {
	return i.ToGlobalDNSZoneSpecProviderRoute53PtrOutputWithContext(context.Background())
}

func (i *globalDNSZoneSpecProviderRoute53PtrType) ToGlobalDNSZoneSpecProviderRoute53PtrOutputWithContext(ctx context.Context) GlobalDNSZoneSpecProviderRoute53PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSZoneSpecProviderRoute53PtrOutput)
}

// Route53ProviderConfig contains configuration on how to access the route53 API
type GlobalDNSZoneSpecProviderRoute53Output struct{ *pulumi.OutputState }

func (GlobalDNSZoneSpecProviderRoute53Output) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSZoneSpecProviderRoute53)(nil)).Elem()
}

func (o GlobalDNSZoneSpecProviderRoute53Output) ToGlobalDNSZoneSpecProviderRoute53Output() GlobalDNSZoneSpecProviderRoute53Output {
	return o
}

func (o GlobalDNSZoneSpecProviderRoute53Output) ToGlobalDNSZoneSpecProviderRoute53OutputWithContext(ctx context.Context) GlobalDNSZoneSpecProviderRoute53Output {
	return o
}

func (o GlobalDNSZoneSpecProviderRoute53Output) ToGlobalDNSZoneSpecProviderRoute53PtrOutput() GlobalDNSZoneSpecProviderRoute53PtrOutput {
	return o.ToGlobalDNSZoneSpecProviderRoute53PtrOutputWithContext(context.Background())
}

func (o GlobalDNSZoneSpecProviderRoute53Output) ToGlobalDNSZoneSpecProviderRoute53PtrOutputWithContext(ctx context.Context) GlobalDNSZoneSpecProviderRoute53PtrOutput {
	return o.ApplyT(func(v GlobalDNSZoneSpecProviderRoute53) *GlobalDNSZoneSpecProviderRoute53 {
		return &v
	}).(GlobalDNSZoneSpecProviderRoute53PtrOutput)
}

// CredentialsSecretRef is a reference to a secret containing the credentials to access the AWS API //TODO (content and needed permissions) expected secret keys are "aws_access_key_id" and "aws_secret_access_key"
func (o GlobalDNSZoneSpecProviderRoute53Output) CredentialsSecretRef() GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefOutput {
	return o.ApplyT(func(v GlobalDNSZoneSpecProviderRoute53) GlobalDNSZoneSpecProviderRoute53CredentialsSecretRef {
		return v.CredentialsSecretRef
	}).(GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefOutput)
}

// ZoneID is the AWS route53 zone ID.
func (o GlobalDNSZoneSpecProviderRoute53Output) ZoneID() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalDNSZoneSpecProviderRoute53) string { return v.ZoneID }).(pulumi.StringOutput)
}

type GlobalDNSZoneSpecProviderRoute53PtrOutput struct{ *pulumi.OutputState }

func (GlobalDNSZoneSpecProviderRoute53PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalDNSZoneSpecProviderRoute53)(nil)).Elem()
}

func (o GlobalDNSZoneSpecProviderRoute53PtrOutput) ToGlobalDNSZoneSpecProviderRoute53PtrOutput() GlobalDNSZoneSpecProviderRoute53PtrOutput {
	return o
}

func (o GlobalDNSZoneSpecProviderRoute53PtrOutput) ToGlobalDNSZoneSpecProviderRoute53PtrOutputWithContext(ctx context.Context) GlobalDNSZoneSpecProviderRoute53PtrOutput {
	return o
}

func (o GlobalDNSZoneSpecProviderRoute53PtrOutput) Elem() GlobalDNSZoneSpecProviderRoute53Output {
	return o.ApplyT(func(v *GlobalDNSZoneSpecProviderRoute53) GlobalDNSZoneSpecProviderRoute53 { return *v }).(GlobalDNSZoneSpecProviderRoute53Output)
}

// CredentialsSecretRef is a reference to a secret containing the credentials to access the AWS API //TODO (content and needed permissions) expected secret keys are "aws_access_key_id" and "aws_secret_access_key"
func (o GlobalDNSZoneSpecProviderRoute53PtrOutput) CredentialsSecretRef() GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrOutput {
	return o.ApplyT(func(v *GlobalDNSZoneSpecProviderRoute53) *GlobalDNSZoneSpecProviderRoute53CredentialsSecretRef {
		if v == nil {
			return nil
		}
		return &v.CredentialsSecretRef
	}).(GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrOutput)
}

// ZoneID is the AWS route53 zone ID.
func (o GlobalDNSZoneSpecProviderRoute53PtrOutput) ZoneID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalDNSZoneSpecProviderRoute53) *string {
		if v == nil {
			return nil
		}
		return &v.ZoneID
	}).(pulumi.StringPtrOutput)
}

// CredentialsSecretRef is a reference to a secret containing the credentials to access the AWS API //TODO (content and needed permissions) expected secret keys are "aws_access_key_id" and "aws_secret_access_key"
type GlobalDNSZoneSpecProviderRoute53CredentialsSecretRef struct {
	Name      string `pulumi:"name"`
	Namespace string `pulumi:"namespace"`
}

// GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefInput is an input type that accepts GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefArgs and GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefOutput values.
// You can construct a concrete instance of `GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefInput` via:
//
//          GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefArgs{...}
type GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefInput interface {
	pulumi.Input

	ToGlobalDNSZoneSpecProviderRoute53CredentialsSecretRefOutput() GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefOutput
	ToGlobalDNSZoneSpecProviderRoute53CredentialsSecretRefOutputWithContext(context.Context) GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefOutput
}

// CredentialsSecretRef is a reference to a secret containing the credentials to access the AWS API //TODO (content and needed permissions) expected secret keys are "aws_access_key_id" and "aws_secret_access_key"
type GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefArgs struct {
	Name      pulumi.StringInput `pulumi:"name"`
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSZoneSpecProviderRoute53CredentialsSecretRef)(nil)).Elem()
}

func (i GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefArgs) ToGlobalDNSZoneSpecProviderRoute53CredentialsSecretRefOutput() GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefOutput {
	return i.ToGlobalDNSZoneSpecProviderRoute53CredentialsSecretRefOutputWithContext(context.Background())
}

func (i GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefArgs) ToGlobalDNSZoneSpecProviderRoute53CredentialsSecretRefOutputWithContext(ctx context.Context) GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefOutput)
}

func (i GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefArgs) ToGlobalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrOutput() GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrOutput {
	return i.ToGlobalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrOutputWithContext(context.Background())
}

func (i GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefArgs) ToGlobalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrOutputWithContext(ctx context.Context) GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefOutput).ToGlobalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrOutputWithContext(ctx)
}

// GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrInput is an input type that accepts GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefArgs, GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefPtr and GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrOutput values.
// You can construct a concrete instance of `GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrInput` via:
//
//          GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefArgs{...}
//
//  or:
//
//          nil
type GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrInput interface {
	pulumi.Input

	ToGlobalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrOutput() GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrOutput
	ToGlobalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrOutputWithContext(context.Context) GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrOutput
}

type globalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrType GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefArgs

func GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefPtr(v *GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefArgs) GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrInput {
	return (*globalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrType)(v)
}

func (*globalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalDNSZoneSpecProviderRoute53CredentialsSecretRef)(nil)).Elem()
}

func (i *globalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrType) ToGlobalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrOutput() GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrOutput {
	return i.ToGlobalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrOutputWithContext(context.Background())
}

func (i *globalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrType) ToGlobalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrOutputWithContext(ctx context.Context) GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrOutput)
}

// CredentialsSecretRef is a reference to a secret containing the credentials to access the AWS API //TODO (content and needed permissions) expected secret keys are "aws_access_key_id" and "aws_secret_access_key"
type GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefOutput struct{ *pulumi.OutputState }

func (GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSZoneSpecProviderRoute53CredentialsSecretRef)(nil)).Elem()
}

func (o GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefOutput) ToGlobalDNSZoneSpecProviderRoute53CredentialsSecretRefOutput() GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefOutput {
	return o
}

func (o GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefOutput) ToGlobalDNSZoneSpecProviderRoute53CredentialsSecretRefOutputWithContext(ctx context.Context) GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefOutput {
	return o
}

func (o GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefOutput) ToGlobalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrOutput() GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrOutput {
	return o.ToGlobalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrOutputWithContext(context.Background())
}

func (o GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefOutput) ToGlobalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrOutputWithContext(ctx context.Context) GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrOutput {
	return o.ApplyT(func(v GlobalDNSZoneSpecProviderRoute53CredentialsSecretRef) *GlobalDNSZoneSpecProviderRoute53CredentialsSecretRef {
		return &v
	}).(GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrOutput)
}
func (o GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalDNSZoneSpecProviderRoute53CredentialsSecretRef) string { return v.Name }).(pulumi.StringOutput)
}

func (o GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalDNSZoneSpecProviderRoute53CredentialsSecretRef) string { return v.Namespace }).(pulumi.StringOutput)
}

type GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrOutput struct{ *pulumi.OutputState }

func (GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalDNSZoneSpecProviderRoute53CredentialsSecretRef)(nil)).Elem()
}

func (o GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrOutput) ToGlobalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrOutput() GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrOutput {
	return o
}

func (o GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrOutput) ToGlobalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrOutputWithContext(ctx context.Context) GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrOutput {
	return o
}

func (o GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrOutput) Elem() GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefOutput {
	return o.ApplyT(func(v *GlobalDNSZoneSpecProviderRoute53CredentialsSecretRef) GlobalDNSZoneSpecProviderRoute53CredentialsSecretRef {
		return *v
	}).(GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefOutput)
}

func (o GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalDNSZoneSpecProviderRoute53CredentialsSecretRef) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

func (o GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalDNSZoneSpecProviderRoute53CredentialsSecretRef) *string {
		if v == nil {
			return nil
		}
		return &v.Namespace
	}).(pulumi.StringPtrOutput)
}

// GlobalDNSZoneStatus defines the observed state of GlobalDNSZone
type GlobalDNSZoneStatus struct {
	// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html
	Conditions []GlobalDNSZoneStatusConditions `pulumi:"conditions"`
}

// GlobalDNSZoneStatusInput is an input type that accepts GlobalDNSZoneStatusArgs and GlobalDNSZoneStatusOutput values.
// You can construct a concrete instance of `GlobalDNSZoneStatusInput` via:
//
//          GlobalDNSZoneStatusArgs{...}
type GlobalDNSZoneStatusInput interface {
	pulumi.Input

	ToGlobalDNSZoneStatusOutput() GlobalDNSZoneStatusOutput
	ToGlobalDNSZoneStatusOutputWithContext(context.Context) GlobalDNSZoneStatusOutput
}

// GlobalDNSZoneStatus defines the observed state of GlobalDNSZone
type GlobalDNSZoneStatusArgs struct {
	// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html
	Conditions GlobalDNSZoneStatusConditionsArrayInput `pulumi:"conditions"`
}

func (GlobalDNSZoneStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSZoneStatus)(nil)).Elem()
}

func (i GlobalDNSZoneStatusArgs) ToGlobalDNSZoneStatusOutput() GlobalDNSZoneStatusOutput {
	return i.ToGlobalDNSZoneStatusOutputWithContext(context.Background())
}

func (i GlobalDNSZoneStatusArgs) ToGlobalDNSZoneStatusOutputWithContext(ctx context.Context) GlobalDNSZoneStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSZoneStatusOutput)
}

func (i GlobalDNSZoneStatusArgs) ToGlobalDNSZoneStatusPtrOutput() GlobalDNSZoneStatusPtrOutput {
	return i.ToGlobalDNSZoneStatusPtrOutputWithContext(context.Background())
}

func (i GlobalDNSZoneStatusArgs) ToGlobalDNSZoneStatusPtrOutputWithContext(ctx context.Context) GlobalDNSZoneStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSZoneStatusOutput).ToGlobalDNSZoneStatusPtrOutputWithContext(ctx)
}

// GlobalDNSZoneStatusPtrInput is an input type that accepts GlobalDNSZoneStatusArgs, GlobalDNSZoneStatusPtr and GlobalDNSZoneStatusPtrOutput values.
// You can construct a concrete instance of `GlobalDNSZoneStatusPtrInput` via:
//
//          GlobalDNSZoneStatusArgs{...}
//
//  or:
//
//          nil
type GlobalDNSZoneStatusPtrInput interface {
	pulumi.Input

	ToGlobalDNSZoneStatusPtrOutput() GlobalDNSZoneStatusPtrOutput
	ToGlobalDNSZoneStatusPtrOutputWithContext(context.Context) GlobalDNSZoneStatusPtrOutput
}

type globalDNSZoneStatusPtrType GlobalDNSZoneStatusArgs

func GlobalDNSZoneStatusPtr(v *GlobalDNSZoneStatusArgs) GlobalDNSZoneStatusPtrInput {
	return (*globalDNSZoneStatusPtrType)(v)
}

func (*globalDNSZoneStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalDNSZoneStatus)(nil)).Elem()
}

func (i *globalDNSZoneStatusPtrType) ToGlobalDNSZoneStatusPtrOutput() GlobalDNSZoneStatusPtrOutput {
	return i.ToGlobalDNSZoneStatusPtrOutputWithContext(context.Background())
}

func (i *globalDNSZoneStatusPtrType) ToGlobalDNSZoneStatusPtrOutputWithContext(ctx context.Context) GlobalDNSZoneStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSZoneStatusPtrOutput)
}

// GlobalDNSZoneStatus defines the observed state of GlobalDNSZone
type GlobalDNSZoneStatusOutput struct{ *pulumi.OutputState }

func (GlobalDNSZoneStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSZoneStatus)(nil)).Elem()
}

func (o GlobalDNSZoneStatusOutput) ToGlobalDNSZoneStatusOutput() GlobalDNSZoneStatusOutput {
	return o
}

func (o GlobalDNSZoneStatusOutput) ToGlobalDNSZoneStatusOutputWithContext(ctx context.Context) GlobalDNSZoneStatusOutput {
	return o
}

func (o GlobalDNSZoneStatusOutput) ToGlobalDNSZoneStatusPtrOutput() GlobalDNSZoneStatusPtrOutput {
	return o.ToGlobalDNSZoneStatusPtrOutputWithContext(context.Background())
}

func (o GlobalDNSZoneStatusOutput) ToGlobalDNSZoneStatusPtrOutputWithContext(ctx context.Context) GlobalDNSZoneStatusPtrOutput {
	return o.ApplyT(func(v GlobalDNSZoneStatus) *GlobalDNSZoneStatus {
		return &v
	}).(GlobalDNSZoneStatusPtrOutput)
}

// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html
func (o GlobalDNSZoneStatusOutput) Conditions() GlobalDNSZoneStatusConditionsArrayOutput {
	return o.ApplyT(func(v GlobalDNSZoneStatus) []GlobalDNSZoneStatusConditions { return v.Conditions }).(GlobalDNSZoneStatusConditionsArrayOutput)
}

type GlobalDNSZoneStatusPtrOutput struct{ *pulumi.OutputState }

func (GlobalDNSZoneStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalDNSZoneStatus)(nil)).Elem()
}

func (o GlobalDNSZoneStatusPtrOutput) ToGlobalDNSZoneStatusPtrOutput() GlobalDNSZoneStatusPtrOutput {
	return o
}

func (o GlobalDNSZoneStatusPtrOutput) ToGlobalDNSZoneStatusPtrOutputWithContext(ctx context.Context) GlobalDNSZoneStatusPtrOutput {
	return o
}

func (o GlobalDNSZoneStatusPtrOutput) Elem() GlobalDNSZoneStatusOutput {
	return o.ApplyT(func(v *GlobalDNSZoneStatus) GlobalDNSZoneStatus { return *v }).(GlobalDNSZoneStatusOutput)
}

// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html
func (o GlobalDNSZoneStatusPtrOutput) Conditions() GlobalDNSZoneStatusConditionsArrayOutput {
	return o.ApplyT(func(v *GlobalDNSZoneStatus) []GlobalDNSZoneStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(GlobalDNSZoneStatusConditionsArrayOutput)
}

// Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind.
//  Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API.
type GlobalDNSZoneStatusConditions struct {
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	Message            *string `pulumi:"message"`
	// ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.
	Reason *string `pulumi:"reason"`
	Status string  `pulumi:"status"`
	// ConditionType is the type of the condition and is typically a CamelCased word or short phrase.
	//  Condition types should indicate state in the "abnormal-true" polarity. For example, if the condition indicates when a policy is invalid, the "is valid" case is probably the norm, so the condition should be called "Invalid".
	Type string `pulumi:"type"`
}

// GlobalDNSZoneStatusConditionsInput is an input type that accepts GlobalDNSZoneStatusConditionsArgs and GlobalDNSZoneStatusConditionsOutput values.
// You can construct a concrete instance of `GlobalDNSZoneStatusConditionsInput` via:
//
//          GlobalDNSZoneStatusConditionsArgs{...}
type GlobalDNSZoneStatusConditionsInput interface {
	pulumi.Input

	ToGlobalDNSZoneStatusConditionsOutput() GlobalDNSZoneStatusConditionsOutput
	ToGlobalDNSZoneStatusConditionsOutputWithContext(context.Context) GlobalDNSZoneStatusConditionsOutput
}

// Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind.
//  Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API.
type GlobalDNSZoneStatusConditionsArgs struct {
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	Message            pulumi.StringPtrInput `pulumi:"message"`
	// ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	Status pulumi.StringInput    `pulumi:"status"`
	// ConditionType is the type of the condition and is typically a CamelCased word or short phrase.
	//  Condition types should indicate state in the "abnormal-true" polarity. For example, if the condition indicates when a policy is invalid, the "is valid" case is probably the norm, so the condition should be called "Invalid".
	Type pulumi.StringInput `pulumi:"type"`
}

func (GlobalDNSZoneStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSZoneStatusConditions)(nil)).Elem()
}

func (i GlobalDNSZoneStatusConditionsArgs) ToGlobalDNSZoneStatusConditionsOutput() GlobalDNSZoneStatusConditionsOutput {
	return i.ToGlobalDNSZoneStatusConditionsOutputWithContext(context.Background())
}

func (i GlobalDNSZoneStatusConditionsArgs) ToGlobalDNSZoneStatusConditionsOutputWithContext(ctx context.Context) GlobalDNSZoneStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSZoneStatusConditionsOutput)
}

// GlobalDNSZoneStatusConditionsArrayInput is an input type that accepts GlobalDNSZoneStatusConditionsArray and GlobalDNSZoneStatusConditionsArrayOutput values.
// You can construct a concrete instance of `GlobalDNSZoneStatusConditionsArrayInput` via:
//
//          GlobalDNSZoneStatusConditionsArray{ GlobalDNSZoneStatusConditionsArgs{...} }
type GlobalDNSZoneStatusConditionsArrayInput interface {
	pulumi.Input

	ToGlobalDNSZoneStatusConditionsArrayOutput() GlobalDNSZoneStatusConditionsArrayOutput
	ToGlobalDNSZoneStatusConditionsArrayOutputWithContext(context.Context) GlobalDNSZoneStatusConditionsArrayOutput
}

type GlobalDNSZoneStatusConditionsArray []GlobalDNSZoneStatusConditionsInput

func (GlobalDNSZoneStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GlobalDNSZoneStatusConditions)(nil)).Elem()
}

func (i GlobalDNSZoneStatusConditionsArray) ToGlobalDNSZoneStatusConditionsArrayOutput() GlobalDNSZoneStatusConditionsArrayOutput {
	return i.ToGlobalDNSZoneStatusConditionsArrayOutputWithContext(context.Background())
}

func (i GlobalDNSZoneStatusConditionsArray) ToGlobalDNSZoneStatusConditionsArrayOutputWithContext(ctx context.Context) GlobalDNSZoneStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDNSZoneStatusConditionsArrayOutput)
}

// Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind.
//  Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API.
type GlobalDNSZoneStatusConditionsOutput struct{ *pulumi.OutputState }

func (GlobalDNSZoneStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalDNSZoneStatusConditions)(nil)).Elem()
}

func (o GlobalDNSZoneStatusConditionsOutput) ToGlobalDNSZoneStatusConditionsOutput() GlobalDNSZoneStatusConditionsOutput {
	return o
}

func (o GlobalDNSZoneStatusConditionsOutput) ToGlobalDNSZoneStatusConditionsOutputWithContext(ctx context.Context) GlobalDNSZoneStatusConditionsOutput {
	return o
}

func (o GlobalDNSZoneStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalDNSZoneStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

func (o GlobalDNSZoneStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalDNSZoneStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.
func (o GlobalDNSZoneStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalDNSZoneStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

func (o GlobalDNSZoneStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalDNSZoneStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// ConditionType is the type of the condition and is typically a CamelCased word or short phrase.
//  Condition types should indicate state in the "abnormal-true" polarity. For example, if the condition indicates when a policy is invalid, the "is valid" case is probably the norm, so the condition should be called "Invalid".
func (o GlobalDNSZoneStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalDNSZoneStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type GlobalDNSZoneStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (GlobalDNSZoneStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GlobalDNSZoneStatusConditions)(nil)).Elem()
}

func (o GlobalDNSZoneStatusConditionsArrayOutput) ToGlobalDNSZoneStatusConditionsArrayOutput() GlobalDNSZoneStatusConditionsArrayOutput {
	return o
}

func (o GlobalDNSZoneStatusConditionsArrayOutput) ToGlobalDNSZoneStatusConditionsArrayOutputWithContext(ctx context.Context) GlobalDNSZoneStatusConditionsArrayOutput {
	return o
}

func (o GlobalDNSZoneStatusConditionsArrayOutput) Index(i pulumi.IntInput) GlobalDNSZoneStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GlobalDNSZoneStatusConditions {
		return vs[0].([]GlobalDNSZoneStatusConditions)[vs[1].(int)]
	}).(GlobalDNSZoneStatusConditionsOutput)
}

// GlobalRouteDiscovery is the Schema for the globalroutediscoveries API
type GlobalRouteDiscoveryType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// GlobalRouteDiscoverySpec defines the desired state of GlobalRouteDiscovery
	Spec *GlobalRouteDiscoverySpec `pulumi:"spec"`
	// GlobalRouteDiscoveryStatus defines the observed state of GlobalRouteDiscovery
	Status *GlobalRouteDiscoveryStatus `pulumi:"status"`
}

// GlobalRouteDiscoveryTypeInput is an input type that accepts GlobalRouteDiscoveryTypeArgs and GlobalRouteDiscoveryTypeOutput values.
// You can construct a concrete instance of `GlobalRouteDiscoveryTypeInput` via:
//
//          GlobalRouteDiscoveryTypeArgs{...}
type GlobalRouteDiscoveryTypeInput interface {
	pulumi.Input

	ToGlobalRouteDiscoveryTypeOutput() GlobalRouteDiscoveryTypeOutput
	ToGlobalRouteDiscoveryTypeOutputWithContext(context.Context) GlobalRouteDiscoveryTypeOutput
}

// GlobalRouteDiscovery is the Schema for the globalroutediscoveries API
type GlobalRouteDiscoveryTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// GlobalRouteDiscoverySpec defines the desired state of GlobalRouteDiscovery
	Spec GlobalRouteDiscoverySpecPtrInput `pulumi:"spec"`
	// GlobalRouteDiscoveryStatus defines the observed state of GlobalRouteDiscovery
	Status GlobalRouteDiscoveryStatusPtrInput `pulumi:"status"`
}

func (GlobalRouteDiscoveryTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalRouteDiscoveryType)(nil)).Elem()
}

func (i GlobalRouteDiscoveryTypeArgs) ToGlobalRouteDiscoveryTypeOutput() GlobalRouteDiscoveryTypeOutput {
	return i.ToGlobalRouteDiscoveryTypeOutputWithContext(context.Background())
}

func (i GlobalRouteDiscoveryTypeArgs) ToGlobalRouteDiscoveryTypeOutputWithContext(ctx context.Context) GlobalRouteDiscoveryTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalRouteDiscoveryTypeOutput)
}

// GlobalRouteDiscovery is the Schema for the globalroutediscoveries API
type GlobalRouteDiscoveryTypeOutput struct{ *pulumi.OutputState }

func (GlobalRouteDiscoveryTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalRouteDiscoveryType)(nil)).Elem()
}

func (o GlobalRouteDiscoveryTypeOutput) ToGlobalRouteDiscoveryTypeOutput() GlobalRouteDiscoveryTypeOutput {
	return o
}

func (o GlobalRouteDiscoveryTypeOutput) ToGlobalRouteDiscoveryTypeOutputWithContext(ctx context.Context) GlobalRouteDiscoveryTypeOutput {
	return o
}

func (o GlobalRouteDiscoveryTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalRouteDiscoveryType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o GlobalRouteDiscoveryTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalRouteDiscoveryType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o GlobalRouteDiscoveryTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v GlobalRouteDiscoveryType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// GlobalRouteDiscoverySpec defines the desired state of GlobalRouteDiscovery
func (o GlobalRouteDiscoveryTypeOutput) Spec() GlobalRouteDiscoverySpecPtrOutput {
	return o.ApplyT(func(v GlobalRouteDiscoveryType) *GlobalRouteDiscoverySpec { return v.Spec }).(GlobalRouteDiscoverySpecPtrOutput)
}

// GlobalRouteDiscoveryStatus defines the observed state of GlobalRouteDiscovery
func (o GlobalRouteDiscoveryTypeOutput) Status() GlobalRouteDiscoveryStatusPtrOutput {
	return o.ApplyT(func(v GlobalRouteDiscoveryType) *GlobalRouteDiscoveryStatus { return v.Status }).(GlobalRouteDiscoveryStatusPtrOutput)
}

type GlobalRouteDiscoveryMetadata struct {
}

// GlobalRouteDiscoveryMetadataInput is an input type that accepts GlobalRouteDiscoveryMetadataArgs and GlobalRouteDiscoveryMetadataOutput values.
// You can construct a concrete instance of `GlobalRouteDiscoveryMetadataInput` via:
//
//          GlobalRouteDiscoveryMetadataArgs{...}
type GlobalRouteDiscoveryMetadataInput interface {
	pulumi.Input

	ToGlobalRouteDiscoveryMetadataOutput() GlobalRouteDiscoveryMetadataOutput
	ToGlobalRouteDiscoveryMetadataOutputWithContext(context.Context) GlobalRouteDiscoveryMetadataOutput
}

type GlobalRouteDiscoveryMetadataArgs struct {
}

func (GlobalRouteDiscoveryMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalRouteDiscoveryMetadata)(nil)).Elem()
}

func (i GlobalRouteDiscoveryMetadataArgs) ToGlobalRouteDiscoveryMetadataOutput() GlobalRouteDiscoveryMetadataOutput {
	return i.ToGlobalRouteDiscoveryMetadataOutputWithContext(context.Background())
}

func (i GlobalRouteDiscoveryMetadataArgs) ToGlobalRouteDiscoveryMetadataOutputWithContext(ctx context.Context) GlobalRouteDiscoveryMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalRouteDiscoveryMetadataOutput)
}

type GlobalRouteDiscoveryMetadataOutput struct{ *pulumi.OutputState }

func (GlobalRouteDiscoveryMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalRouteDiscoveryMetadata)(nil)).Elem()
}

func (o GlobalRouteDiscoveryMetadataOutput) ToGlobalRouteDiscoveryMetadataOutput() GlobalRouteDiscoveryMetadataOutput {
	return o
}

func (o GlobalRouteDiscoveryMetadataOutput) ToGlobalRouteDiscoveryMetadataOutputWithContext(ctx context.Context) GlobalRouteDiscoveryMetadataOutput {
	return o
}

// GlobalRouteDiscoverySpec defines the desired state of GlobalRouteDiscovery
type GlobalRouteDiscoverySpec struct {
	// Cluster is an arrays with the list of clusters in which global routes will be discovered
	Clusters []GlobalRouteDiscoverySpecClusters `pulumi:"clusters"`
	// DefaultLoadBalancingPolicy defines the load balancing policy to be used by default. This can be overridden with a route annotation TODO which? -kubebuilder:default:="Multivalue"
	DefaultLoadBalancingPolicy *string `pulumi:"defaultLoadBalancingPolicy"`
	// Dfeault TTL is the TTL for this dns record -kubebuilder:default:60
	DefaultTTL *int `pulumi:"defaultTTL"`
	// GlobalZoneRef represents the global zone that will be used to host this record
	GlobalZoneRef GlobalRouteDiscoverySpecGlobalZoneRef `pulumi:"globalZoneRef"`
	// RouteSelector is the selector that selects the global routes, this allows you to define also local routes.
	RouteSelector *GlobalRouteDiscoverySpecRouteSelector `pulumi:"routeSelector"`
}

// GlobalRouteDiscoverySpecInput is an input type that accepts GlobalRouteDiscoverySpecArgs and GlobalRouteDiscoverySpecOutput values.
// You can construct a concrete instance of `GlobalRouteDiscoverySpecInput` via:
//
//          GlobalRouteDiscoverySpecArgs{...}
type GlobalRouteDiscoverySpecInput interface {
	pulumi.Input

	ToGlobalRouteDiscoverySpecOutput() GlobalRouteDiscoverySpecOutput
	ToGlobalRouteDiscoverySpecOutputWithContext(context.Context) GlobalRouteDiscoverySpecOutput
}

// GlobalRouteDiscoverySpec defines the desired state of GlobalRouteDiscovery
type GlobalRouteDiscoverySpecArgs struct {
	// Cluster is an arrays with the list of clusters in which global routes will be discovered
	Clusters GlobalRouteDiscoverySpecClustersArrayInput `pulumi:"clusters"`
	// DefaultLoadBalancingPolicy defines the load balancing policy to be used by default. This can be overridden with a route annotation TODO which? -kubebuilder:default:="Multivalue"
	DefaultLoadBalancingPolicy pulumi.StringPtrInput `pulumi:"defaultLoadBalancingPolicy"`
	// Dfeault TTL is the TTL for this dns record -kubebuilder:default:60
	DefaultTTL pulumi.IntPtrInput `pulumi:"defaultTTL"`
	// GlobalZoneRef represents the global zone that will be used to host this record
	GlobalZoneRef GlobalRouteDiscoverySpecGlobalZoneRefInput `pulumi:"globalZoneRef"`
	// RouteSelector is the selector that selects the global routes, this allows you to define also local routes.
	RouteSelector GlobalRouteDiscoverySpecRouteSelectorPtrInput `pulumi:"routeSelector"`
}

func (GlobalRouteDiscoverySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalRouteDiscoverySpec)(nil)).Elem()
}

func (i GlobalRouteDiscoverySpecArgs) ToGlobalRouteDiscoverySpecOutput() GlobalRouteDiscoverySpecOutput {
	return i.ToGlobalRouteDiscoverySpecOutputWithContext(context.Background())
}

func (i GlobalRouteDiscoverySpecArgs) ToGlobalRouteDiscoverySpecOutputWithContext(ctx context.Context) GlobalRouteDiscoverySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalRouteDiscoverySpecOutput)
}

func (i GlobalRouteDiscoverySpecArgs) ToGlobalRouteDiscoverySpecPtrOutput() GlobalRouteDiscoverySpecPtrOutput {
	return i.ToGlobalRouteDiscoverySpecPtrOutputWithContext(context.Background())
}

func (i GlobalRouteDiscoverySpecArgs) ToGlobalRouteDiscoverySpecPtrOutputWithContext(ctx context.Context) GlobalRouteDiscoverySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalRouteDiscoverySpecOutput).ToGlobalRouteDiscoverySpecPtrOutputWithContext(ctx)
}

// GlobalRouteDiscoverySpecPtrInput is an input type that accepts GlobalRouteDiscoverySpecArgs, GlobalRouteDiscoverySpecPtr and GlobalRouteDiscoverySpecPtrOutput values.
// You can construct a concrete instance of `GlobalRouteDiscoverySpecPtrInput` via:
//
//          GlobalRouteDiscoverySpecArgs{...}
//
//  or:
//
//          nil
type GlobalRouteDiscoverySpecPtrInput interface {
	pulumi.Input

	ToGlobalRouteDiscoverySpecPtrOutput() GlobalRouteDiscoverySpecPtrOutput
	ToGlobalRouteDiscoverySpecPtrOutputWithContext(context.Context) GlobalRouteDiscoverySpecPtrOutput
}

type globalRouteDiscoverySpecPtrType GlobalRouteDiscoverySpecArgs

func GlobalRouteDiscoverySpecPtr(v *GlobalRouteDiscoverySpecArgs) GlobalRouteDiscoverySpecPtrInput {
	return (*globalRouteDiscoverySpecPtrType)(v)
}

func (*globalRouteDiscoverySpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalRouteDiscoverySpec)(nil)).Elem()
}

func (i *globalRouteDiscoverySpecPtrType) ToGlobalRouteDiscoverySpecPtrOutput() GlobalRouteDiscoverySpecPtrOutput {
	return i.ToGlobalRouteDiscoverySpecPtrOutputWithContext(context.Background())
}

func (i *globalRouteDiscoverySpecPtrType) ToGlobalRouteDiscoverySpecPtrOutputWithContext(ctx context.Context) GlobalRouteDiscoverySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalRouteDiscoverySpecPtrOutput)
}

// GlobalRouteDiscoverySpec defines the desired state of GlobalRouteDiscovery
type GlobalRouteDiscoverySpecOutput struct{ *pulumi.OutputState }

func (GlobalRouteDiscoverySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalRouteDiscoverySpec)(nil)).Elem()
}

func (o GlobalRouteDiscoverySpecOutput) ToGlobalRouteDiscoverySpecOutput() GlobalRouteDiscoverySpecOutput {
	return o
}

func (o GlobalRouteDiscoverySpecOutput) ToGlobalRouteDiscoverySpecOutputWithContext(ctx context.Context) GlobalRouteDiscoverySpecOutput {
	return o
}

func (o GlobalRouteDiscoverySpecOutput) ToGlobalRouteDiscoverySpecPtrOutput() GlobalRouteDiscoverySpecPtrOutput {
	return o.ToGlobalRouteDiscoverySpecPtrOutputWithContext(context.Background())
}

func (o GlobalRouteDiscoverySpecOutput) ToGlobalRouteDiscoverySpecPtrOutputWithContext(ctx context.Context) GlobalRouteDiscoverySpecPtrOutput {
	return o.ApplyT(func(v GlobalRouteDiscoverySpec) *GlobalRouteDiscoverySpec {
		return &v
	}).(GlobalRouteDiscoverySpecPtrOutput)
}

// Cluster is an arrays with the list of clusters in which global routes will be discovered
func (o GlobalRouteDiscoverySpecOutput) Clusters() GlobalRouteDiscoverySpecClustersArrayOutput {
	return o.ApplyT(func(v GlobalRouteDiscoverySpec) []GlobalRouteDiscoverySpecClusters { return v.Clusters }).(GlobalRouteDiscoverySpecClustersArrayOutput)
}

// DefaultLoadBalancingPolicy defines the load balancing policy to be used by default. This can be overridden with a route annotation TODO which? -kubebuilder:default:="Multivalue"
func (o GlobalRouteDiscoverySpecOutput) DefaultLoadBalancingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalRouteDiscoverySpec) *string { return v.DefaultLoadBalancingPolicy }).(pulumi.StringPtrOutput)
}

// Dfeault TTL is the TTL for this dns record -kubebuilder:default:60
func (o GlobalRouteDiscoverySpecOutput) DefaultTTL() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GlobalRouteDiscoverySpec) *int { return v.DefaultTTL }).(pulumi.IntPtrOutput)
}

// GlobalZoneRef represents the global zone that will be used to host this record
func (o GlobalRouteDiscoverySpecOutput) GlobalZoneRef() GlobalRouteDiscoverySpecGlobalZoneRefOutput {
	return o.ApplyT(func(v GlobalRouteDiscoverySpec) GlobalRouteDiscoverySpecGlobalZoneRef { return v.GlobalZoneRef }).(GlobalRouteDiscoverySpecGlobalZoneRefOutput)
}

// RouteSelector is the selector that selects the global routes, this allows you to define also local routes.
func (o GlobalRouteDiscoverySpecOutput) RouteSelector() GlobalRouteDiscoverySpecRouteSelectorPtrOutput {
	return o.ApplyT(func(v GlobalRouteDiscoverySpec) *GlobalRouteDiscoverySpecRouteSelector { return v.RouteSelector }).(GlobalRouteDiscoverySpecRouteSelectorPtrOutput)
}

type GlobalRouteDiscoverySpecPtrOutput struct{ *pulumi.OutputState }

func (GlobalRouteDiscoverySpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalRouteDiscoverySpec)(nil)).Elem()
}

func (o GlobalRouteDiscoverySpecPtrOutput) ToGlobalRouteDiscoverySpecPtrOutput() GlobalRouteDiscoverySpecPtrOutput {
	return o
}

func (o GlobalRouteDiscoverySpecPtrOutput) ToGlobalRouteDiscoverySpecPtrOutputWithContext(ctx context.Context) GlobalRouteDiscoverySpecPtrOutput {
	return o
}

func (o GlobalRouteDiscoverySpecPtrOutput) Elem() GlobalRouteDiscoverySpecOutput {
	return o.ApplyT(func(v *GlobalRouteDiscoverySpec) GlobalRouteDiscoverySpec { return *v }).(GlobalRouteDiscoverySpecOutput)
}

// Cluster is an arrays with the list of clusters in which global routes will be discovered
func (o GlobalRouteDiscoverySpecPtrOutput) Clusters() GlobalRouteDiscoverySpecClustersArrayOutput {
	return o.ApplyT(func(v *GlobalRouteDiscoverySpec) []GlobalRouteDiscoverySpecClusters {
		if v == nil {
			return nil
		}
		return v.Clusters
	}).(GlobalRouteDiscoverySpecClustersArrayOutput)
}

// DefaultLoadBalancingPolicy defines the load balancing policy to be used by default. This can be overridden with a route annotation TODO which? -kubebuilder:default:="Multivalue"
func (o GlobalRouteDiscoverySpecPtrOutput) DefaultLoadBalancingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalRouteDiscoverySpec) *string {
		if v == nil {
			return nil
		}
		return v.DefaultLoadBalancingPolicy
	}).(pulumi.StringPtrOutput)
}

// Dfeault TTL is the TTL for this dns record -kubebuilder:default:60
func (o GlobalRouteDiscoverySpecPtrOutput) DefaultTTL() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GlobalRouteDiscoverySpec) *int {
		if v == nil {
			return nil
		}
		return v.DefaultTTL
	}).(pulumi.IntPtrOutput)
}

// GlobalZoneRef represents the global zone that will be used to host this record
func (o GlobalRouteDiscoverySpecPtrOutput) GlobalZoneRef() GlobalRouteDiscoverySpecGlobalZoneRefPtrOutput {
	return o.ApplyT(func(v *GlobalRouteDiscoverySpec) *GlobalRouteDiscoverySpecGlobalZoneRef {
		if v == nil {
			return nil
		}
		return &v.GlobalZoneRef
	}).(GlobalRouteDiscoverySpecGlobalZoneRefPtrOutput)
}

// RouteSelector is the selector that selects the global routes, this allows you to define also local routes.
func (o GlobalRouteDiscoverySpecPtrOutput) RouteSelector() GlobalRouteDiscoverySpecRouteSelectorPtrOutput {
	return o.ApplyT(func(v *GlobalRouteDiscoverySpec) *GlobalRouteDiscoverySpecRouteSelector {
		if v == nil {
			return nil
		}
		return v.RouteSelector
	}).(GlobalRouteDiscoverySpecRouteSelectorPtrOutput)
}

// ClusterReference contains the infomation necessary to connect to a cluster
type GlobalRouteDiscoverySpecClusters struct {
	// CredentialsSecretRef is a reference to a secret containing the credentials to access the cluster a key called "kubeconfig" containing a valid kubeconfig file for connecting to the cluster must exist in this secret.
	ClusterCredentialRef GlobalRouteDiscoverySpecClustersClusterCredentialRef `pulumi:"clusterCredentialRef"`
	// ClusterName name of the cluster to connect to.
	ClusterName string `pulumi:"clusterName"`
}

// GlobalRouteDiscoverySpecClustersInput is an input type that accepts GlobalRouteDiscoverySpecClustersArgs and GlobalRouteDiscoverySpecClustersOutput values.
// You can construct a concrete instance of `GlobalRouteDiscoverySpecClustersInput` via:
//
//          GlobalRouteDiscoverySpecClustersArgs{...}
type GlobalRouteDiscoverySpecClustersInput interface {
	pulumi.Input

	ToGlobalRouteDiscoverySpecClustersOutput() GlobalRouteDiscoverySpecClustersOutput
	ToGlobalRouteDiscoverySpecClustersOutputWithContext(context.Context) GlobalRouteDiscoverySpecClustersOutput
}

// ClusterReference contains the infomation necessary to connect to a cluster
type GlobalRouteDiscoverySpecClustersArgs struct {
	// CredentialsSecretRef is a reference to a secret containing the credentials to access the cluster a key called "kubeconfig" containing a valid kubeconfig file for connecting to the cluster must exist in this secret.
	ClusterCredentialRef GlobalRouteDiscoverySpecClustersClusterCredentialRefInput `pulumi:"clusterCredentialRef"`
	// ClusterName name of the cluster to connect to.
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
}

func (GlobalRouteDiscoverySpecClustersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalRouteDiscoverySpecClusters)(nil)).Elem()
}

func (i GlobalRouteDiscoverySpecClustersArgs) ToGlobalRouteDiscoverySpecClustersOutput() GlobalRouteDiscoverySpecClustersOutput {
	return i.ToGlobalRouteDiscoverySpecClustersOutputWithContext(context.Background())
}

func (i GlobalRouteDiscoverySpecClustersArgs) ToGlobalRouteDiscoverySpecClustersOutputWithContext(ctx context.Context) GlobalRouteDiscoverySpecClustersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalRouteDiscoverySpecClustersOutput)
}

// GlobalRouteDiscoverySpecClustersArrayInput is an input type that accepts GlobalRouteDiscoverySpecClustersArray and GlobalRouteDiscoverySpecClustersArrayOutput values.
// You can construct a concrete instance of `GlobalRouteDiscoverySpecClustersArrayInput` via:
//
//          GlobalRouteDiscoverySpecClustersArray{ GlobalRouteDiscoverySpecClustersArgs{...} }
type GlobalRouteDiscoverySpecClustersArrayInput interface {
	pulumi.Input

	ToGlobalRouteDiscoverySpecClustersArrayOutput() GlobalRouteDiscoverySpecClustersArrayOutput
	ToGlobalRouteDiscoverySpecClustersArrayOutputWithContext(context.Context) GlobalRouteDiscoverySpecClustersArrayOutput
}

type GlobalRouteDiscoverySpecClustersArray []GlobalRouteDiscoverySpecClustersInput

func (GlobalRouteDiscoverySpecClustersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GlobalRouteDiscoverySpecClusters)(nil)).Elem()
}

func (i GlobalRouteDiscoverySpecClustersArray) ToGlobalRouteDiscoverySpecClustersArrayOutput() GlobalRouteDiscoverySpecClustersArrayOutput {
	return i.ToGlobalRouteDiscoverySpecClustersArrayOutputWithContext(context.Background())
}

func (i GlobalRouteDiscoverySpecClustersArray) ToGlobalRouteDiscoverySpecClustersArrayOutputWithContext(ctx context.Context) GlobalRouteDiscoverySpecClustersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalRouteDiscoverySpecClustersArrayOutput)
}

// ClusterReference contains the infomation necessary to connect to a cluster
type GlobalRouteDiscoverySpecClustersOutput struct{ *pulumi.OutputState }

func (GlobalRouteDiscoverySpecClustersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalRouteDiscoverySpecClusters)(nil)).Elem()
}

func (o GlobalRouteDiscoverySpecClustersOutput) ToGlobalRouteDiscoverySpecClustersOutput() GlobalRouteDiscoverySpecClustersOutput {
	return o
}

func (o GlobalRouteDiscoverySpecClustersOutput) ToGlobalRouteDiscoverySpecClustersOutputWithContext(ctx context.Context) GlobalRouteDiscoverySpecClustersOutput {
	return o
}

// CredentialsSecretRef is a reference to a secret containing the credentials to access the cluster a key called "kubeconfig" containing a valid kubeconfig file for connecting to the cluster must exist in this secret.
func (o GlobalRouteDiscoverySpecClustersOutput) ClusterCredentialRef() GlobalRouteDiscoverySpecClustersClusterCredentialRefOutput {
	return o.ApplyT(func(v GlobalRouteDiscoverySpecClusters) GlobalRouteDiscoverySpecClustersClusterCredentialRef {
		return v.ClusterCredentialRef
	}).(GlobalRouteDiscoverySpecClustersClusterCredentialRefOutput)
}

// ClusterName name of the cluster to connect to.
func (o GlobalRouteDiscoverySpecClustersOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalRouteDiscoverySpecClusters) string { return v.ClusterName }).(pulumi.StringOutput)
}

type GlobalRouteDiscoverySpecClustersArrayOutput struct{ *pulumi.OutputState }

func (GlobalRouteDiscoverySpecClustersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GlobalRouteDiscoverySpecClusters)(nil)).Elem()
}

func (o GlobalRouteDiscoverySpecClustersArrayOutput) ToGlobalRouteDiscoverySpecClustersArrayOutput() GlobalRouteDiscoverySpecClustersArrayOutput {
	return o
}

func (o GlobalRouteDiscoverySpecClustersArrayOutput) ToGlobalRouteDiscoverySpecClustersArrayOutputWithContext(ctx context.Context) GlobalRouteDiscoverySpecClustersArrayOutput {
	return o
}

func (o GlobalRouteDiscoverySpecClustersArrayOutput) Index(i pulumi.IntInput) GlobalRouteDiscoverySpecClustersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GlobalRouteDiscoverySpecClusters {
		return vs[0].([]GlobalRouteDiscoverySpecClusters)[vs[1].(int)]
	}).(GlobalRouteDiscoverySpecClustersOutput)
}

// CredentialsSecretRef is a reference to a secret containing the credentials to access the cluster a key called "kubeconfig" containing a valid kubeconfig file for connecting to the cluster must exist in this secret.
type GlobalRouteDiscoverySpecClustersClusterCredentialRef struct {
	Name      string `pulumi:"name"`
	Namespace string `pulumi:"namespace"`
}

// GlobalRouteDiscoverySpecClustersClusterCredentialRefInput is an input type that accepts GlobalRouteDiscoverySpecClustersClusterCredentialRefArgs and GlobalRouteDiscoverySpecClustersClusterCredentialRefOutput values.
// You can construct a concrete instance of `GlobalRouteDiscoverySpecClustersClusterCredentialRefInput` via:
//
//          GlobalRouteDiscoverySpecClustersClusterCredentialRefArgs{...}
type GlobalRouteDiscoverySpecClustersClusterCredentialRefInput interface {
	pulumi.Input

	ToGlobalRouteDiscoverySpecClustersClusterCredentialRefOutput() GlobalRouteDiscoverySpecClustersClusterCredentialRefOutput
	ToGlobalRouteDiscoverySpecClustersClusterCredentialRefOutputWithContext(context.Context) GlobalRouteDiscoverySpecClustersClusterCredentialRefOutput
}

// CredentialsSecretRef is a reference to a secret containing the credentials to access the cluster a key called "kubeconfig" containing a valid kubeconfig file for connecting to the cluster must exist in this secret.
type GlobalRouteDiscoverySpecClustersClusterCredentialRefArgs struct {
	Name      pulumi.StringInput `pulumi:"name"`
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (GlobalRouteDiscoverySpecClustersClusterCredentialRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalRouteDiscoverySpecClustersClusterCredentialRef)(nil)).Elem()
}

func (i GlobalRouteDiscoverySpecClustersClusterCredentialRefArgs) ToGlobalRouteDiscoverySpecClustersClusterCredentialRefOutput() GlobalRouteDiscoverySpecClustersClusterCredentialRefOutput {
	return i.ToGlobalRouteDiscoverySpecClustersClusterCredentialRefOutputWithContext(context.Background())
}

func (i GlobalRouteDiscoverySpecClustersClusterCredentialRefArgs) ToGlobalRouteDiscoverySpecClustersClusterCredentialRefOutputWithContext(ctx context.Context) GlobalRouteDiscoverySpecClustersClusterCredentialRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalRouteDiscoverySpecClustersClusterCredentialRefOutput)
}

// CredentialsSecretRef is a reference to a secret containing the credentials to access the cluster a key called "kubeconfig" containing a valid kubeconfig file for connecting to the cluster must exist in this secret.
type GlobalRouteDiscoverySpecClustersClusterCredentialRefOutput struct{ *pulumi.OutputState }

func (GlobalRouteDiscoverySpecClustersClusterCredentialRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalRouteDiscoverySpecClustersClusterCredentialRef)(nil)).Elem()
}

func (o GlobalRouteDiscoverySpecClustersClusterCredentialRefOutput) ToGlobalRouteDiscoverySpecClustersClusterCredentialRefOutput() GlobalRouteDiscoverySpecClustersClusterCredentialRefOutput {
	return o
}

func (o GlobalRouteDiscoverySpecClustersClusterCredentialRefOutput) ToGlobalRouteDiscoverySpecClustersClusterCredentialRefOutputWithContext(ctx context.Context) GlobalRouteDiscoverySpecClustersClusterCredentialRefOutput {
	return o
}

func (o GlobalRouteDiscoverySpecClustersClusterCredentialRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalRouteDiscoverySpecClustersClusterCredentialRef) string { return v.Name }).(pulumi.StringOutput)
}

func (o GlobalRouteDiscoverySpecClustersClusterCredentialRefOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalRouteDiscoverySpecClustersClusterCredentialRef) string { return v.Namespace }).(pulumi.StringOutput)
}

// GlobalZoneRef represents the global zone that will be used to host this record
type GlobalRouteDiscoverySpecGlobalZoneRef struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
}

// GlobalRouteDiscoverySpecGlobalZoneRefInput is an input type that accepts GlobalRouteDiscoverySpecGlobalZoneRefArgs and GlobalRouteDiscoverySpecGlobalZoneRefOutput values.
// You can construct a concrete instance of `GlobalRouteDiscoverySpecGlobalZoneRefInput` via:
//
//          GlobalRouteDiscoverySpecGlobalZoneRefArgs{...}
type GlobalRouteDiscoverySpecGlobalZoneRefInput interface {
	pulumi.Input

	ToGlobalRouteDiscoverySpecGlobalZoneRefOutput() GlobalRouteDiscoverySpecGlobalZoneRefOutput
	ToGlobalRouteDiscoverySpecGlobalZoneRefOutputWithContext(context.Context) GlobalRouteDiscoverySpecGlobalZoneRefOutput
}

// GlobalZoneRef represents the global zone that will be used to host this record
type GlobalRouteDiscoverySpecGlobalZoneRefArgs struct {
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GlobalRouteDiscoverySpecGlobalZoneRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalRouteDiscoverySpecGlobalZoneRef)(nil)).Elem()
}

func (i GlobalRouteDiscoverySpecGlobalZoneRefArgs) ToGlobalRouteDiscoverySpecGlobalZoneRefOutput() GlobalRouteDiscoverySpecGlobalZoneRefOutput {
	return i.ToGlobalRouteDiscoverySpecGlobalZoneRefOutputWithContext(context.Background())
}

func (i GlobalRouteDiscoverySpecGlobalZoneRefArgs) ToGlobalRouteDiscoverySpecGlobalZoneRefOutputWithContext(ctx context.Context) GlobalRouteDiscoverySpecGlobalZoneRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalRouteDiscoverySpecGlobalZoneRefOutput)
}

func (i GlobalRouteDiscoverySpecGlobalZoneRefArgs) ToGlobalRouteDiscoverySpecGlobalZoneRefPtrOutput() GlobalRouteDiscoverySpecGlobalZoneRefPtrOutput {
	return i.ToGlobalRouteDiscoverySpecGlobalZoneRefPtrOutputWithContext(context.Background())
}

func (i GlobalRouteDiscoverySpecGlobalZoneRefArgs) ToGlobalRouteDiscoverySpecGlobalZoneRefPtrOutputWithContext(ctx context.Context) GlobalRouteDiscoverySpecGlobalZoneRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalRouteDiscoverySpecGlobalZoneRefOutput).ToGlobalRouteDiscoverySpecGlobalZoneRefPtrOutputWithContext(ctx)
}

// GlobalRouteDiscoverySpecGlobalZoneRefPtrInput is an input type that accepts GlobalRouteDiscoverySpecGlobalZoneRefArgs, GlobalRouteDiscoverySpecGlobalZoneRefPtr and GlobalRouteDiscoverySpecGlobalZoneRefPtrOutput values.
// You can construct a concrete instance of `GlobalRouteDiscoverySpecGlobalZoneRefPtrInput` via:
//
//          GlobalRouteDiscoverySpecGlobalZoneRefArgs{...}
//
//  or:
//
//          nil
type GlobalRouteDiscoverySpecGlobalZoneRefPtrInput interface {
	pulumi.Input

	ToGlobalRouteDiscoverySpecGlobalZoneRefPtrOutput() GlobalRouteDiscoverySpecGlobalZoneRefPtrOutput
	ToGlobalRouteDiscoverySpecGlobalZoneRefPtrOutputWithContext(context.Context) GlobalRouteDiscoverySpecGlobalZoneRefPtrOutput
}

type globalRouteDiscoverySpecGlobalZoneRefPtrType GlobalRouteDiscoverySpecGlobalZoneRefArgs

func GlobalRouteDiscoverySpecGlobalZoneRefPtr(v *GlobalRouteDiscoverySpecGlobalZoneRefArgs) GlobalRouteDiscoverySpecGlobalZoneRefPtrInput {
	return (*globalRouteDiscoverySpecGlobalZoneRefPtrType)(v)
}

func (*globalRouteDiscoverySpecGlobalZoneRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalRouteDiscoverySpecGlobalZoneRef)(nil)).Elem()
}

func (i *globalRouteDiscoverySpecGlobalZoneRefPtrType) ToGlobalRouteDiscoverySpecGlobalZoneRefPtrOutput() GlobalRouteDiscoverySpecGlobalZoneRefPtrOutput {
	return i.ToGlobalRouteDiscoverySpecGlobalZoneRefPtrOutputWithContext(context.Background())
}

func (i *globalRouteDiscoverySpecGlobalZoneRefPtrType) ToGlobalRouteDiscoverySpecGlobalZoneRefPtrOutputWithContext(ctx context.Context) GlobalRouteDiscoverySpecGlobalZoneRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalRouteDiscoverySpecGlobalZoneRefPtrOutput)
}

// GlobalZoneRef represents the global zone that will be used to host this record
type GlobalRouteDiscoverySpecGlobalZoneRefOutput struct{ *pulumi.OutputState }

func (GlobalRouteDiscoverySpecGlobalZoneRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalRouteDiscoverySpecGlobalZoneRef)(nil)).Elem()
}

func (o GlobalRouteDiscoverySpecGlobalZoneRefOutput) ToGlobalRouteDiscoverySpecGlobalZoneRefOutput() GlobalRouteDiscoverySpecGlobalZoneRefOutput {
	return o
}

func (o GlobalRouteDiscoverySpecGlobalZoneRefOutput) ToGlobalRouteDiscoverySpecGlobalZoneRefOutputWithContext(ctx context.Context) GlobalRouteDiscoverySpecGlobalZoneRefOutput {
	return o
}

func (o GlobalRouteDiscoverySpecGlobalZoneRefOutput) ToGlobalRouteDiscoverySpecGlobalZoneRefPtrOutput() GlobalRouteDiscoverySpecGlobalZoneRefPtrOutput {
	return o.ToGlobalRouteDiscoverySpecGlobalZoneRefPtrOutputWithContext(context.Background())
}

func (o GlobalRouteDiscoverySpecGlobalZoneRefOutput) ToGlobalRouteDiscoverySpecGlobalZoneRefPtrOutputWithContext(ctx context.Context) GlobalRouteDiscoverySpecGlobalZoneRefPtrOutput {
	return o.ApplyT(func(v GlobalRouteDiscoverySpecGlobalZoneRef) *GlobalRouteDiscoverySpecGlobalZoneRef {
		return &v
	}).(GlobalRouteDiscoverySpecGlobalZoneRefPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o GlobalRouteDiscoverySpecGlobalZoneRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalRouteDiscoverySpecGlobalZoneRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type GlobalRouteDiscoverySpecGlobalZoneRefPtrOutput struct{ *pulumi.OutputState }

func (GlobalRouteDiscoverySpecGlobalZoneRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalRouteDiscoverySpecGlobalZoneRef)(nil)).Elem()
}

func (o GlobalRouteDiscoverySpecGlobalZoneRefPtrOutput) ToGlobalRouteDiscoverySpecGlobalZoneRefPtrOutput() GlobalRouteDiscoverySpecGlobalZoneRefPtrOutput {
	return o
}

func (o GlobalRouteDiscoverySpecGlobalZoneRefPtrOutput) ToGlobalRouteDiscoverySpecGlobalZoneRefPtrOutputWithContext(ctx context.Context) GlobalRouteDiscoverySpecGlobalZoneRefPtrOutput {
	return o
}

func (o GlobalRouteDiscoverySpecGlobalZoneRefPtrOutput) Elem() GlobalRouteDiscoverySpecGlobalZoneRefOutput {
	return o.ApplyT(func(v *GlobalRouteDiscoverySpecGlobalZoneRef) GlobalRouteDiscoverySpecGlobalZoneRef { return *v }).(GlobalRouteDiscoverySpecGlobalZoneRefOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o GlobalRouteDiscoverySpecGlobalZoneRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalRouteDiscoverySpecGlobalZoneRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// RouteSelector is the selector that selects the global routes, this allows you to define also local routes.
type GlobalRouteDiscoverySpecRouteSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []GlobalRouteDiscoverySpecRouteSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// GlobalRouteDiscoverySpecRouteSelectorInput is an input type that accepts GlobalRouteDiscoverySpecRouteSelectorArgs and GlobalRouteDiscoverySpecRouteSelectorOutput values.
// You can construct a concrete instance of `GlobalRouteDiscoverySpecRouteSelectorInput` via:
//
//          GlobalRouteDiscoverySpecRouteSelectorArgs{...}
type GlobalRouteDiscoverySpecRouteSelectorInput interface {
	pulumi.Input

	ToGlobalRouteDiscoverySpecRouteSelectorOutput() GlobalRouteDiscoverySpecRouteSelectorOutput
	ToGlobalRouteDiscoverySpecRouteSelectorOutputWithContext(context.Context) GlobalRouteDiscoverySpecRouteSelectorOutput
}

// RouteSelector is the selector that selects the global routes, this allows you to define also local routes.
type GlobalRouteDiscoverySpecRouteSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (GlobalRouteDiscoverySpecRouteSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalRouteDiscoverySpecRouteSelector)(nil)).Elem()
}

func (i GlobalRouteDiscoverySpecRouteSelectorArgs) ToGlobalRouteDiscoverySpecRouteSelectorOutput() GlobalRouteDiscoverySpecRouteSelectorOutput {
	return i.ToGlobalRouteDiscoverySpecRouteSelectorOutputWithContext(context.Background())
}

func (i GlobalRouteDiscoverySpecRouteSelectorArgs) ToGlobalRouteDiscoverySpecRouteSelectorOutputWithContext(ctx context.Context) GlobalRouteDiscoverySpecRouteSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalRouteDiscoverySpecRouteSelectorOutput)
}

func (i GlobalRouteDiscoverySpecRouteSelectorArgs) ToGlobalRouteDiscoverySpecRouteSelectorPtrOutput() GlobalRouteDiscoverySpecRouteSelectorPtrOutput {
	return i.ToGlobalRouteDiscoverySpecRouteSelectorPtrOutputWithContext(context.Background())
}

func (i GlobalRouteDiscoverySpecRouteSelectorArgs) ToGlobalRouteDiscoverySpecRouteSelectorPtrOutputWithContext(ctx context.Context) GlobalRouteDiscoverySpecRouteSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalRouteDiscoverySpecRouteSelectorOutput).ToGlobalRouteDiscoverySpecRouteSelectorPtrOutputWithContext(ctx)
}

// GlobalRouteDiscoverySpecRouteSelectorPtrInput is an input type that accepts GlobalRouteDiscoverySpecRouteSelectorArgs, GlobalRouteDiscoverySpecRouteSelectorPtr and GlobalRouteDiscoverySpecRouteSelectorPtrOutput values.
// You can construct a concrete instance of `GlobalRouteDiscoverySpecRouteSelectorPtrInput` via:
//
//          GlobalRouteDiscoverySpecRouteSelectorArgs{...}
//
//  or:
//
//          nil
type GlobalRouteDiscoverySpecRouteSelectorPtrInput interface {
	pulumi.Input

	ToGlobalRouteDiscoverySpecRouteSelectorPtrOutput() GlobalRouteDiscoverySpecRouteSelectorPtrOutput
	ToGlobalRouteDiscoverySpecRouteSelectorPtrOutputWithContext(context.Context) GlobalRouteDiscoverySpecRouteSelectorPtrOutput
}

type globalRouteDiscoverySpecRouteSelectorPtrType GlobalRouteDiscoverySpecRouteSelectorArgs

func GlobalRouteDiscoverySpecRouteSelectorPtr(v *GlobalRouteDiscoverySpecRouteSelectorArgs) GlobalRouteDiscoverySpecRouteSelectorPtrInput {
	return (*globalRouteDiscoverySpecRouteSelectorPtrType)(v)
}

func (*globalRouteDiscoverySpecRouteSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalRouteDiscoverySpecRouteSelector)(nil)).Elem()
}

func (i *globalRouteDiscoverySpecRouteSelectorPtrType) ToGlobalRouteDiscoverySpecRouteSelectorPtrOutput() GlobalRouteDiscoverySpecRouteSelectorPtrOutput {
	return i.ToGlobalRouteDiscoverySpecRouteSelectorPtrOutputWithContext(context.Background())
}

func (i *globalRouteDiscoverySpecRouteSelectorPtrType) ToGlobalRouteDiscoverySpecRouteSelectorPtrOutputWithContext(ctx context.Context) GlobalRouteDiscoverySpecRouteSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalRouteDiscoverySpecRouteSelectorPtrOutput)
}

// RouteSelector is the selector that selects the global routes, this allows you to define also local routes.
type GlobalRouteDiscoverySpecRouteSelectorOutput struct{ *pulumi.OutputState }

func (GlobalRouteDiscoverySpecRouteSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalRouteDiscoverySpecRouteSelector)(nil)).Elem()
}

func (o GlobalRouteDiscoverySpecRouteSelectorOutput) ToGlobalRouteDiscoverySpecRouteSelectorOutput() GlobalRouteDiscoverySpecRouteSelectorOutput {
	return o
}

func (o GlobalRouteDiscoverySpecRouteSelectorOutput) ToGlobalRouteDiscoverySpecRouteSelectorOutputWithContext(ctx context.Context) GlobalRouteDiscoverySpecRouteSelectorOutput {
	return o
}

func (o GlobalRouteDiscoverySpecRouteSelectorOutput) ToGlobalRouteDiscoverySpecRouteSelectorPtrOutput() GlobalRouteDiscoverySpecRouteSelectorPtrOutput {
	return o.ToGlobalRouteDiscoverySpecRouteSelectorPtrOutputWithContext(context.Background())
}

func (o GlobalRouteDiscoverySpecRouteSelectorOutput) ToGlobalRouteDiscoverySpecRouteSelectorPtrOutputWithContext(ctx context.Context) GlobalRouteDiscoverySpecRouteSelectorPtrOutput {
	return o.ApplyT(func(v GlobalRouteDiscoverySpecRouteSelector) *GlobalRouteDiscoverySpecRouteSelector {
		return &v
	}).(GlobalRouteDiscoverySpecRouteSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o GlobalRouteDiscoverySpecRouteSelectorOutput) MatchExpressions() GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v GlobalRouteDiscoverySpecRouteSelector) []GlobalRouteDiscoverySpecRouteSelectorMatchExpressions {
		return v.MatchExpressions
	}).(GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o GlobalRouteDiscoverySpecRouteSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v GlobalRouteDiscoverySpecRouteSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type GlobalRouteDiscoverySpecRouteSelectorPtrOutput struct{ *pulumi.OutputState }

func (GlobalRouteDiscoverySpecRouteSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalRouteDiscoverySpecRouteSelector)(nil)).Elem()
}

func (o GlobalRouteDiscoverySpecRouteSelectorPtrOutput) ToGlobalRouteDiscoverySpecRouteSelectorPtrOutput() GlobalRouteDiscoverySpecRouteSelectorPtrOutput {
	return o
}

func (o GlobalRouteDiscoverySpecRouteSelectorPtrOutput) ToGlobalRouteDiscoverySpecRouteSelectorPtrOutputWithContext(ctx context.Context) GlobalRouteDiscoverySpecRouteSelectorPtrOutput {
	return o
}

func (o GlobalRouteDiscoverySpecRouteSelectorPtrOutput) Elem() GlobalRouteDiscoverySpecRouteSelectorOutput {
	return o.ApplyT(func(v *GlobalRouteDiscoverySpecRouteSelector) GlobalRouteDiscoverySpecRouteSelector { return *v }).(GlobalRouteDiscoverySpecRouteSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o GlobalRouteDiscoverySpecRouteSelectorPtrOutput) MatchExpressions() GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *GlobalRouteDiscoverySpecRouteSelector) []GlobalRouteDiscoverySpecRouteSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o GlobalRouteDiscoverySpecRouteSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GlobalRouteDiscoverySpecRouteSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type GlobalRouteDiscoverySpecRouteSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `pulumi:"values"`
}

// GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsInput is an input type that accepts GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsArgs and GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsInput` via:
//
//          GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsArgs{...}
type GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToGlobalRouteDiscoverySpecRouteSelectorMatchExpressionsOutput() GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsOutput
	ToGlobalRouteDiscoverySpecRouteSelectorMatchExpressionsOutputWithContext(context.Context) GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalRouteDiscoverySpecRouteSelectorMatchExpressions)(nil)).Elem()
}

func (i GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsArgs) ToGlobalRouteDiscoverySpecRouteSelectorMatchExpressionsOutput() GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsOutput {
	return i.ToGlobalRouteDiscoverySpecRouteSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsArgs) ToGlobalRouteDiscoverySpecRouteSelectorMatchExpressionsOutputWithContext(ctx context.Context) GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsOutput)
}

// GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsArrayInput is an input type that accepts GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsArray and GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsArrayInput` via:
//
//          GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsArray{ GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsArgs{...} }
type GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToGlobalRouteDiscoverySpecRouteSelectorMatchExpressionsArrayOutput() GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsArrayOutput
	ToGlobalRouteDiscoverySpecRouteSelectorMatchExpressionsArrayOutputWithContext(context.Context) GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsArrayOutput
}

type GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsArray []GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsInput

func (GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GlobalRouteDiscoverySpecRouteSelectorMatchExpressions)(nil)).Elem()
}

func (i GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsArray) ToGlobalRouteDiscoverySpecRouteSelectorMatchExpressionsArrayOutput() GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsArrayOutput {
	return i.ToGlobalRouteDiscoverySpecRouteSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsArray) ToGlobalRouteDiscoverySpecRouteSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalRouteDiscoverySpecRouteSelectorMatchExpressions)(nil)).Elem()
}

func (o GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsOutput) ToGlobalRouteDiscoverySpecRouteSelectorMatchExpressionsOutput() GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsOutput {
	return o
}

func (o GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsOutput) ToGlobalRouteDiscoverySpecRouteSelectorMatchExpressionsOutputWithContext(ctx context.Context) GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalRouteDiscoverySpecRouteSelectorMatchExpressions) string { return v.Key }).(pulumi.StringOutput)
}

// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
func (o GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalRouteDiscoverySpecRouteSelectorMatchExpressions) string { return v.Operator }).(pulumi.StringOutput)
}

// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
func (o GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GlobalRouteDiscoverySpecRouteSelectorMatchExpressions) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GlobalRouteDiscoverySpecRouteSelectorMatchExpressions)(nil)).Elem()
}

func (o GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsArrayOutput) ToGlobalRouteDiscoverySpecRouteSelectorMatchExpressionsArrayOutput() GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsArrayOutput {
	return o
}

func (o GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsArrayOutput) ToGlobalRouteDiscoverySpecRouteSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsArrayOutput {
	return o
}

func (o GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GlobalRouteDiscoverySpecRouteSelectorMatchExpressions {
		return vs[0].([]GlobalRouteDiscoverySpecRouteSelectorMatchExpressions)[vs[1].(int)]
	}).(GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type GlobalRouteDiscoverySpecRouteSelectorMatchLabels struct {
}

// GlobalRouteDiscoverySpecRouteSelectorMatchLabelsInput is an input type that accepts GlobalRouteDiscoverySpecRouteSelectorMatchLabelsArgs and GlobalRouteDiscoverySpecRouteSelectorMatchLabelsOutput values.
// You can construct a concrete instance of `GlobalRouteDiscoverySpecRouteSelectorMatchLabelsInput` via:
//
//          GlobalRouteDiscoverySpecRouteSelectorMatchLabelsArgs{...}
type GlobalRouteDiscoverySpecRouteSelectorMatchLabelsInput interface {
	pulumi.Input

	ToGlobalRouteDiscoverySpecRouteSelectorMatchLabelsOutput() GlobalRouteDiscoverySpecRouteSelectorMatchLabelsOutput
	ToGlobalRouteDiscoverySpecRouteSelectorMatchLabelsOutputWithContext(context.Context) GlobalRouteDiscoverySpecRouteSelectorMatchLabelsOutput
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type GlobalRouteDiscoverySpecRouteSelectorMatchLabelsArgs struct {
}

func (GlobalRouteDiscoverySpecRouteSelectorMatchLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalRouteDiscoverySpecRouteSelectorMatchLabels)(nil)).Elem()
}

func (i GlobalRouteDiscoverySpecRouteSelectorMatchLabelsArgs) ToGlobalRouteDiscoverySpecRouteSelectorMatchLabelsOutput() GlobalRouteDiscoverySpecRouteSelectorMatchLabelsOutput {
	return i.ToGlobalRouteDiscoverySpecRouteSelectorMatchLabelsOutputWithContext(context.Background())
}

func (i GlobalRouteDiscoverySpecRouteSelectorMatchLabelsArgs) ToGlobalRouteDiscoverySpecRouteSelectorMatchLabelsOutputWithContext(ctx context.Context) GlobalRouteDiscoverySpecRouteSelectorMatchLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalRouteDiscoverySpecRouteSelectorMatchLabelsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
type GlobalRouteDiscoverySpecRouteSelectorMatchLabelsOutput struct{ *pulumi.OutputState }

func (GlobalRouteDiscoverySpecRouteSelectorMatchLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalRouteDiscoverySpecRouteSelectorMatchLabels)(nil)).Elem()
}

func (o GlobalRouteDiscoverySpecRouteSelectorMatchLabelsOutput) ToGlobalRouteDiscoverySpecRouteSelectorMatchLabelsOutput() GlobalRouteDiscoverySpecRouteSelectorMatchLabelsOutput {
	return o
}

func (o GlobalRouteDiscoverySpecRouteSelectorMatchLabelsOutput) ToGlobalRouteDiscoverySpecRouteSelectorMatchLabelsOutputWithContext(ctx context.Context) GlobalRouteDiscoverySpecRouteSelectorMatchLabelsOutput {
	return o
}

// GlobalRouteDiscoveryStatus defines the observed state of GlobalRouteDiscovery
type GlobalRouteDiscoveryStatus struct {
	// ClusterReferenceStatuses contains the status of the cluster refence connections and their latest reconcile.
	ClusterReferenceStatuses map[string][]GlobalRouteDiscoveryStatusClusterReferenceStatuses `pulumi:"clusterReferenceStatuses"`
	// ReconcileStatus this is the general status of the main reconciler
	Conditions []GlobalRouteDiscoveryStatusConditions `pulumi:"conditions"`
}

// GlobalRouteDiscoveryStatusInput is an input type that accepts GlobalRouteDiscoveryStatusArgs and GlobalRouteDiscoveryStatusOutput values.
// You can construct a concrete instance of `GlobalRouteDiscoveryStatusInput` via:
//
//          GlobalRouteDiscoveryStatusArgs{...}
type GlobalRouteDiscoveryStatusInput interface {
	pulumi.Input

	ToGlobalRouteDiscoveryStatusOutput() GlobalRouteDiscoveryStatusOutput
	ToGlobalRouteDiscoveryStatusOutputWithContext(context.Context) GlobalRouteDiscoveryStatusOutput
}

// GlobalRouteDiscoveryStatus defines the observed state of GlobalRouteDiscovery
type GlobalRouteDiscoveryStatusArgs struct {
	// ClusterReferenceStatuses contains the status of the cluster refence connections and their latest reconcile.
	ClusterReferenceStatuses GlobalRouteDiscoveryStatusClusterReferenceStatusesArrayMapInput `pulumi:"clusterReferenceStatuses"`
	// ReconcileStatus this is the general status of the main reconciler
	Conditions GlobalRouteDiscoveryStatusConditionsArrayInput `pulumi:"conditions"`
}

func (GlobalRouteDiscoveryStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalRouteDiscoveryStatus)(nil)).Elem()
}

func (i GlobalRouteDiscoveryStatusArgs) ToGlobalRouteDiscoveryStatusOutput() GlobalRouteDiscoveryStatusOutput {
	return i.ToGlobalRouteDiscoveryStatusOutputWithContext(context.Background())
}

func (i GlobalRouteDiscoveryStatusArgs) ToGlobalRouteDiscoveryStatusOutputWithContext(ctx context.Context) GlobalRouteDiscoveryStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalRouteDiscoveryStatusOutput)
}

func (i GlobalRouteDiscoveryStatusArgs) ToGlobalRouteDiscoveryStatusPtrOutput() GlobalRouteDiscoveryStatusPtrOutput {
	return i.ToGlobalRouteDiscoveryStatusPtrOutputWithContext(context.Background())
}

func (i GlobalRouteDiscoveryStatusArgs) ToGlobalRouteDiscoveryStatusPtrOutputWithContext(ctx context.Context) GlobalRouteDiscoveryStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalRouteDiscoveryStatusOutput).ToGlobalRouteDiscoveryStatusPtrOutputWithContext(ctx)
}

// GlobalRouteDiscoveryStatusPtrInput is an input type that accepts GlobalRouteDiscoveryStatusArgs, GlobalRouteDiscoveryStatusPtr and GlobalRouteDiscoveryStatusPtrOutput values.
// You can construct a concrete instance of `GlobalRouteDiscoveryStatusPtrInput` via:
//
//          GlobalRouteDiscoveryStatusArgs{...}
//
//  or:
//
//          nil
type GlobalRouteDiscoveryStatusPtrInput interface {
	pulumi.Input

	ToGlobalRouteDiscoveryStatusPtrOutput() GlobalRouteDiscoveryStatusPtrOutput
	ToGlobalRouteDiscoveryStatusPtrOutputWithContext(context.Context) GlobalRouteDiscoveryStatusPtrOutput
}

type globalRouteDiscoveryStatusPtrType GlobalRouteDiscoveryStatusArgs

func GlobalRouteDiscoveryStatusPtr(v *GlobalRouteDiscoveryStatusArgs) GlobalRouteDiscoveryStatusPtrInput {
	return (*globalRouteDiscoveryStatusPtrType)(v)
}

func (*globalRouteDiscoveryStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalRouteDiscoveryStatus)(nil)).Elem()
}

func (i *globalRouteDiscoveryStatusPtrType) ToGlobalRouteDiscoveryStatusPtrOutput() GlobalRouteDiscoveryStatusPtrOutput {
	return i.ToGlobalRouteDiscoveryStatusPtrOutputWithContext(context.Background())
}

func (i *globalRouteDiscoveryStatusPtrType) ToGlobalRouteDiscoveryStatusPtrOutputWithContext(ctx context.Context) GlobalRouteDiscoveryStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalRouteDiscoveryStatusPtrOutput)
}

// GlobalRouteDiscoveryStatus defines the observed state of GlobalRouteDiscovery
type GlobalRouteDiscoveryStatusOutput struct{ *pulumi.OutputState }

func (GlobalRouteDiscoveryStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalRouteDiscoveryStatus)(nil)).Elem()
}

func (o GlobalRouteDiscoveryStatusOutput) ToGlobalRouteDiscoveryStatusOutput() GlobalRouteDiscoveryStatusOutput {
	return o
}

func (o GlobalRouteDiscoveryStatusOutput) ToGlobalRouteDiscoveryStatusOutputWithContext(ctx context.Context) GlobalRouteDiscoveryStatusOutput {
	return o
}

func (o GlobalRouteDiscoveryStatusOutput) ToGlobalRouteDiscoveryStatusPtrOutput() GlobalRouteDiscoveryStatusPtrOutput {
	return o.ToGlobalRouteDiscoveryStatusPtrOutputWithContext(context.Background())
}

func (o GlobalRouteDiscoveryStatusOutput) ToGlobalRouteDiscoveryStatusPtrOutputWithContext(ctx context.Context) GlobalRouteDiscoveryStatusPtrOutput {
	return o.ApplyT(func(v GlobalRouteDiscoveryStatus) *GlobalRouteDiscoveryStatus {
		return &v
	}).(GlobalRouteDiscoveryStatusPtrOutput)
}

// ClusterReferenceStatuses contains the status of the cluster refence connections and their latest reconcile.
func (o GlobalRouteDiscoveryStatusOutput) ClusterReferenceStatuses() GlobalRouteDiscoveryStatusClusterReferenceStatusesArrayMapOutput {
	return o.ApplyT(func(v GlobalRouteDiscoveryStatus) map[string][]GlobalRouteDiscoveryStatusClusterReferenceStatuses {
		return v.ClusterReferenceStatuses
	}).(GlobalRouteDiscoveryStatusClusterReferenceStatusesArrayMapOutput)
}

// ReconcileStatus this is the general status of the main reconciler
func (o GlobalRouteDiscoveryStatusOutput) Conditions() GlobalRouteDiscoveryStatusConditionsArrayOutput {
	return o.ApplyT(func(v GlobalRouteDiscoveryStatus) []GlobalRouteDiscoveryStatusConditions { return v.Conditions }).(GlobalRouteDiscoveryStatusConditionsArrayOutput)
}

type GlobalRouteDiscoveryStatusPtrOutput struct{ *pulumi.OutputState }

func (GlobalRouteDiscoveryStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalRouteDiscoveryStatus)(nil)).Elem()
}

func (o GlobalRouteDiscoveryStatusPtrOutput) ToGlobalRouteDiscoveryStatusPtrOutput() GlobalRouteDiscoveryStatusPtrOutput {
	return o
}

func (o GlobalRouteDiscoveryStatusPtrOutput) ToGlobalRouteDiscoveryStatusPtrOutputWithContext(ctx context.Context) GlobalRouteDiscoveryStatusPtrOutput {
	return o
}

func (o GlobalRouteDiscoveryStatusPtrOutput) Elem() GlobalRouteDiscoveryStatusOutput {
	return o.ApplyT(func(v *GlobalRouteDiscoveryStatus) GlobalRouteDiscoveryStatus { return *v }).(GlobalRouteDiscoveryStatusOutput)
}

// ClusterReferenceStatuses contains the status of the cluster refence connections and their latest reconcile.
func (o GlobalRouteDiscoveryStatusPtrOutput) ClusterReferenceStatuses() GlobalRouteDiscoveryStatusClusterReferenceStatusesArrayMapOutput {
	return o.ApplyT(func(v *GlobalRouteDiscoveryStatus) map[string][]GlobalRouteDiscoveryStatusClusterReferenceStatuses {
		if v == nil {
			return nil
		}
		return v.ClusterReferenceStatuses
	}).(GlobalRouteDiscoveryStatusClusterReferenceStatusesArrayMapOutput)
}

// ReconcileStatus this is the general status of the main reconciler
func (o GlobalRouteDiscoveryStatusPtrOutput) Conditions() GlobalRouteDiscoveryStatusConditionsArrayOutput {
	return o.ApplyT(func(v *GlobalRouteDiscoveryStatus) []GlobalRouteDiscoveryStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(GlobalRouteDiscoveryStatusConditionsArrayOutput)
}

// Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind.
//  Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API.
type GlobalRouteDiscoveryStatusClusterReferenceStatuses struct {
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	Message            *string `pulumi:"message"`
	// ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.
	Reason *string `pulumi:"reason"`
	Status string  `pulumi:"status"`
	// ConditionType is the type of the condition and is typically a CamelCased word or short phrase.
	//  Condition types should indicate state in the "abnormal-true" polarity. For example, if the condition indicates when a policy is invalid, the "is valid" case is probably the norm, so the condition should be called "Invalid".
	Type string `pulumi:"type"`
}

// GlobalRouteDiscoveryStatusClusterReferenceStatusesInput is an input type that accepts GlobalRouteDiscoveryStatusClusterReferenceStatusesArgs and GlobalRouteDiscoveryStatusClusterReferenceStatusesOutput values.
// You can construct a concrete instance of `GlobalRouteDiscoveryStatusClusterReferenceStatusesInput` via:
//
//          GlobalRouteDiscoveryStatusClusterReferenceStatusesArgs{...}
type GlobalRouteDiscoveryStatusClusterReferenceStatusesInput interface {
	pulumi.Input

	ToGlobalRouteDiscoveryStatusClusterReferenceStatusesOutput() GlobalRouteDiscoveryStatusClusterReferenceStatusesOutput
	ToGlobalRouteDiscoveryStatusClusterReferenceStatusesOutputWithContext(context.Context) GlobalRouteDiscoveryStatusClusterReferenceStatusesOutput
}

// Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind.
//  Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API.
type GlobalRouteDiscoveryStatusClusterReferenceStatusesArgs struct {
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	Message            pulumi.StringPtrInput `pulumi:"message"`
	// ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	Status pulumi.StringInput    `pulumi:"status"`
	// ConditionType is the type of the condition and is typically a CamelCased word or short phrase.
	//  Condition types should indicate state in the "abnormal-true" polarity. For example, if the condition indicates when a policy is invalid, the "is valid" case is probably the norm, so the condition should be called "Invalid".
	Type pulumi.StringInput `pulumi:"type"`
}

func (GlobalRouteDiscoveryStatusClusterReferenceStatusesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalRouteDiscoveryStatusClusterReferenceStatuses)(nil)).Elem()
}

func (i GlobalRouteDiscoveryStatusClusterReferenceStatusesArgs) ToGlobalRouteDiscoveryStatusClusterReferenceStatusesOutput() GlobalRouteDiscoveryStatusClusterReferenceStatusesOutput {
	return i.ToGlobalRouteDiscoveryStatusClusterReferenceStatusesOutputWithContext(context.Background())
}

func (i GlobalRouteDiscoveryStatusClusterReferenceStatusesArgs) ToGlobalRouteDiscoveryStatusClusterReferenceStatusesOutputWithContext(ctx context.Context) GlobalRouteDiscoveryStatusClusterReferenceStatusesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalRouteDiscoveryStatusClusterReferenceStatusesOutput)
}

// GlobalRouteDiscoveryStatusClusterReferenceStatusesArrayInput is an input type that accepts GlobalRouteDiscoveryStatusClusterReferenceStatusesArray and GlobalRouteDiscoveryStatusClusterReferenceStatusesArrayOutput values.
// You can construct a concrete instance of `GlobalRouteDiscoveryStatusClusterReferenceStatusesArrayInput` via:
//
//          GlobalRouteDiscoveryStatusClusterReferenceStatusesArray{ GlobalRouteDiscoveryStatusClusterReferenceStatusesArgs{...} }
type GlobalRouteDiscoveryStatusClusterReferenceStatusesArrayInput interface {
	pulumi.Input

	ToGlobalRouteDiscoveryStatusClusterReferenceStatusesArrayOutput() GlobalRouteDiscoveryStatusClusterReferenceStatusesArrayOutput
	ToGlobalRouteDiscoveryStatusClusterReferenceStatusesArrayOutputWithContext(context.Context) GlobalRouteDiscoveryStatusClusterReferenceStatusesArrayOutput
}

type GlobalRouteDiscoveryStatusClusterReferenceStatusesArray []GlobalRouteDiscoveryStatusClusterReferenceStatusesInput

func (GlobalRouteDiscoveryStatusClusterReferenceStatusesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GlobalRouteDiscoveryStatusClusterReferenceStatuses)(nil)).Elem()
}

func (i GlobalRouteDiscoveryStatusClusterReferenceStatusesArray) ToGlobalRouteDiscoveryStatusClusterReferenceStatusesArrayOutput() GlobalRouteDiscoveryStatusClusterReferenceStatusesArrayOutput {
	return i.ToGlobalRouteDiscoveryStatusClusterReferenceStatusesArrayOutputWithContext(context.Background())
}

func (i GlobalRouteDiscoveryStatusClusterReferenceStatusesArray) ToGlobalRouteDiscoveryStatusClusterReferenceStatusesArrayOutputWithContext(ctx context.Context) GlobalRouteDiscoveryStatusClusterReferenceStatusesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalRouteDiscoveryStatusClusterReferenceStatusesArrayOutput)
}

// Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind.
//  Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API.
type GlobalRouteDiscoveryStatusClusterReferenceStatusesOutput struct{ *pulumi.OutputState }

func (GlobalRouteDiscoveryStatusClusterReferenceStatusesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalRouteDiscoveryStatusClusterReferenceStatuses)(nil)).Elem()
}

func (o GlobalRouteDiscoveryStatusClusterReferenceStatusesOutput) ToGlobalRouteDiscoveryStatusClusterReferenceStatusesOutput() GlobalRouteDiscoveryStatusClusterReferenceStatusesOutput {
	return o
}

func (o GlobalRouteDiscoveryStatusClusterReferenceStatusesOutput) ToGlobalRouteDiscoveryStatusClusterReferenceStatusesOutputWithContext(ctx context.Context) GlobalRouteDiscoveryStatusClusterReferenceStatusesOutput {
	return o
}

func (o GlobalRouteDiscoveryStatusClusterReferenceStatusesOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalRouteDiscoveryStatusClusterReferenceStatuses) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

func (o GlobalRouteDiscoveryStatusClusterReferenceStatusesOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalRouteDiscoveryStatusClusterReferenceStatuses) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.
func (o GlobalRouteDiscoveryStatusClusterReferenceStatusesOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalRouteDiscoveryStatusClusterReferenceStatuses) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

func (o GlobalRouteDiscoveryStatusClusterReferenceStatusesOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalRouteDiscoveryStatusClusterReferenceStatuses) string { return v.Status }).(pulumi.StringOutput)
}

// ConditionType is the type of the condition and is typically a CamelCased word or short phrase.
//  Condition types should indicate state in the "abnormal-true" polarity. For example, if the condition indicates when a policy is invalid, the "is valid" case is probably the norm, so the condition should be called "Invalid".
func (o GlobalRouteDiscoveryStatusClusterReferenceStatusesOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalRouteDiscoveryStatusClusterReferenceStatuses) string { return v.Type }).(pulumi.StringOutput)
}

type GlobalRouteDiscoveryStatusClusterReferenceStatusesArrayOutput struct{ *pulumi.OutputState }

func (GlobalRouteDiscoveryStatusClusterReferenceStatusesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GlobalRouteDiscoveryStatusClusterReferenceStatuses)(nil)).Elem()
}

func (o GlobalRouteDiscoveryStatusClusterReferenceStatusesArrayOutput) ToGlobalRouteDiscoveryStatusClusterReferenceStatusesArrayOutput() GlobalRouteDiscoveryStatusClusterReferenceStatusesArrayOutput {
	return o
}

func (o GlobalRouteDiscoveryStatusClusterReferenceStatusesArrayOutput) ToGlobalRouteDiscoveryStatusClusterReferenceStatusesArrayOutputWithContext(ctx context.Context) GlobalRouteDiscoveryStatusClusterReferenceStatusesArrayOutput {
	return o
}

func (o GlobalRouteDiscoveryStatusClusterReferenceStatusesArrayOutput) Index(i pulumi.IntInput) GlobalRouteDiscoveryStatusClusterReferenceStatusesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GlobalRouteDiscoveryStatusClusterReferenceStatuses {
		return vs[0].([]GlobalRouteDiscoveryStatusClusterReferenceStatuses)[vs[1].(int)]
	}).(GlobalRouteDiscoveryStatusClusterReferenceStatusesOutput)
}

// Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind.
//  Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API.
type GlobalRouteDiscoveryStatusConditions struct {
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	Message            *string `pulumi:"message"`
	// ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.
	Reason *string `pulumi:"reason"`
	Status string  `pulumi:"status"`
	// ConditionType is the type of the condition and is typically a CamelCased word or short phrase.
	//  Condition types should indicate state in the "abnormal-true" polarity. For example, if the condition indicates when a policy is invalid, the "is valid" case is probably the norm, so the condition should be called "Invalid".
	Type string `pulumi:"type"`
}

// GlobalRouteDiscoveryStatusConditionsInput is an input type that accepts GlobalRouteDiscoveryStatusConditionsArgs and GlobalRouteDiscoveryStatusConditionsOutput values.
// You can construct a concrete instance of `GlobalRouteDiscoveryStatusConditionsInput` via:
//
//          GlobalRouteDiscoveryStatusConditionsArgs{...}
type GlobalRouteDiscoveryStatusConditionsInput interface {
	pulumi.Input

	ToGlobalRouteDiscoveryStatusConditionsOutput() GlobalRouteDiscoveryStatusConditionsOutput
	ToGlobalRouteDiscoveryStatusConditionsOutputWithContext(context.Context) GlobalRouteDiscoveryStatusConditionsOutput
}

// Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind.
//  Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API.
type GlobalRouteDiscoveryStatusConditionsArgs struct {
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	Message            pulumi.StringPtrInput `pulumi:"message"`
	// ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	Status pulumi.StringInput    `pulumi:"status"`
	// ConditionType is the type of the condition and is typically a CamelCased word or short phrase.
	//  Condition types should indicate state in the "abnormal-true" polarity. For example, if the condition indicates when a policy is invalid, the "is valid" case is probably the norm, so the condition should be called "Invalid".
	Type pulumi.StringInput `pulumi:"type"`
}

func (GlobalRouteDiscoveryStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalRouteDiscoveryStatusConditions)(nil)).Elem()
}

func (i GlobalRouteDiscoveryStatusConditionsArgs) ToGlobalRouteDiscoveryStatusConditionsOutput() GlobalRouteDiscoveryStatusConditionsOutput {
	return i.ToGlobalRouteDiscoveryStatusConditionsOutputWithContext(context.Background())
}

func (i GlobalRouteDiscoveryStatusConditionsArgs) ToGlobalRouteDiscoveryStatusConditionsOutputWithContext(ctx context.Context) GlobalRouteDiscoveryStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalRouteDiscoveryStatusConditionsOutput)
}

// GlobalRouteDiscoveryStatusConditionsArrayInput is an input type that accepts GlobalRouteDiscoveryStatusConditionsArray and GlobalRouteDiscoveryStatusConditionsArrayOutput values.
// You can construct a concrete instance of `GlobalRouteDiscoveryStatusConditionsArrayInput` via:
//
//          GlobalRouteDiscoveryStatusConditionsArray{ GlobalRouteDiscoveryStatusConditionsArgs{...} }
type GlobalRouteDiscoveryStatusConditionsArrayInput interface {
	pulumi.Input

	ToGlobalRouteDiscoveryStatusConditionsArrayOutput() GlobalRouteDiscoveryStatusConditionsArrayOutput
	ToGlobalRouteDiscoveryStatusConditionsArrayOutputWithContext(context.Context) GlobalRouteDiscoveryStatusConditionsArrayOutput
}

type GlobalRouteDiscoveryStatusConditionsArray []GlobalRouteDiscoveryStatusConditionsInput

func (GlobalRouteDiscoveryStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GlobalRouteDiscoveryStatusConditions)(nil)).Elem()
}

func (i GlobalRouteDiscoveryStatusConditionsArray) ToGlobalRouteDiscoveryStatusConditionsArrayOutput() GlobalRouteDiscoveryStatusConditionsArrayOutput {
	return i.ToGlobalRouteDiscoveryStatusConditionsArrayOutputWithContext(context.Background())
}

func (i GlobalRouteDiscoveryStatusConditionsArray) ToGlobalRouteDiscoveryStatusConditionsArrayOutputWithContext(ctx context.Context) GlobalRouteDiscoveryStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalRouteDiscoveryStatusConditionsArrayOutput)
}

// Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind.
//  Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API.
type GlobalRouteDiscoveryStatusConditionsOutput struct{ *pulumi.OutputState }

func (GlobalRouteDiscoveryStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalRouteDiscoveryStatusConditions)(nil)).Elem()
}

func (o GlobalRouteDiscoveryStatusConditionsOutput) ToGlobalRouteDiscoveryStatusConditionsOutput() GlobalRouteDiscoveryStatusConditionsOutput {
	return o
}

func (o GlobalRouteDiscoveryStatusConditionsOutput) ToGlobalRouteDiscoveryStatusConditionsOutputWithContext(ctx context.Context) GlobalRouteDiscoveryStatusConditionsOutput {
	return o
}

func (o GlobalRouteDiscoveryStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalRouteDiscoveryStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

func (o GlobalRouteDiscoveryStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalRouteDiscoveryStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.
func (o GlobalRouteDiscoveryStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalRouteDiscoveryStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

func (o GlobalRouteDiscoveryStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalRouteDiscoveryStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// ConditionType is the type of the condition and is typically a CamelCased word or short phrase.
//  Condition types should indicate state in the "abnormal-true" polarity. For example, if the condition indicates when a policy is invalid, the "is valid" case is probably the norm, so the condition should be called "Invalid".
func (o GlobalRouteDiscoveryStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GlobalRouteDiscoveryStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type GlobalRouteDiscoveryStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (GlobalRouteDiscoveryStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GlobalRouteDiscoveryStatusConditions)(nil)).Elem()
}

func (o GlobalRouteDiscoveryStatusConditionsArrayOutput) ToGlobalRouteDiscoveryStatusConditionsArrayOutput() GlobalRouteDiscoveryStatusConditionsArrayOutput {
	return o
}

func (o GlobalRouteDiscoveryStatusConditionsArrayOutput) ToGlobalRouteDiscoveryStatusConditionsArrayOutputWithContext(ctx context.Context) GlobalRouteDiscoveryStatusConditionsArrayOutput {
	return o
}

func (o GlobalRouteDiscoveryStatusConditionsArrayOutput) Index(i pulumi.IntInput) GlobalRouteDiscoveryStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GlobalRouteDiscoveryStatusConditions {
		return vs[0].([]GlobalRouteDiscoveryStatusConditions)[vs[1].(int)]
	}).(GlobalRouteDiscoveryStatusConditionsOutput)
}

func init() {
	pulumi.RegisterOutputType(GlobalDNSRecordTypeOutput{})
	pulumi.RegisterOutputType(GlobalDNSRecordMetadataOutput{})
	pulumi.RegisterOutputType(GlobalDNSRecordSpecOutput{})
	pulumi.RegisterOutputType(GlobalDNSRecordSpecPtrOutput{})
	pulumi.RegisterOutputType(GlobalDNSRecordSpecEndpointsOutput{})
	pulumi.RegisterOutputType(GlobalDNSRecordSpecEndpointsArrayOutput{})
	pulumi.RegisterOutputType(GlobalDNSRecordSpecEndpointsClusterCredentialRefOutput{})
	pulumi.RegisterOutputType(GlobalDNSRecordSpecEndpointsLoadBalancerServiceRefOutput{})
	pulumi.RegisterOutputType(GlobalDNSRecordSpecGlobalZoneRefOutput{})
	pulumi.RegisterOutputType(GlobalDNSRecordSpecGlobalZoneRefPtrOutput{})
	pulumi.RegisterOutputType(GlobalDNSRecordSpecHealthCheckOutput{})
	pulumi.RegisterOutputType(GlobalDNSRecordSpecHealthCheckPtrOutput{})
	pulumi.RegisterOutputType(GlobalDNSRecordSpecHealthCheckExecOutput{})
	pulumi.RegisterOutputType(GlobalDNSRecordSpecHealthCheckExecPtrOutput{})
	pulumi.RegisterOutputType(GlobalDNSRecordSpecHealthCheckHttpGetOutput{})
	pulumi.RegisterOutputType(GlobalDNSRecordSpecHealthCheckHttpGetPtrOutput{})
	pulumi.RegisterOutputType(GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersOutput{})
	pulumi.RegisterOutputType(GlobalDNSRecordSpecHealthCheckHttpGetHttpHeadersArrayOutput{})
	pulumi.RegisterOutputType(GlobalDNSRecordSpecHealthCheckHttpGetPortOutput{})
	pulumi.RegisterOutputType(GlobalDNSRecordSpecHealthCheckHttpGetPortPtrOutput{})
	pulumi.RegisterOutputType(GlobalDNSRecordSpecHealthCheckTcpSocketOutput{})
	pulumi.RegisterOutputType(GlobalDNSRecordSpecHealthCheckTcpSocketPtrOutput{})
	pulumi.RegisterOutputType(GlobalDNSRecordSpecHealthCheckTcpSocketPortOutput{})
	pulumi.RegisterOutputType(GlobalDNSRecordSpecHealthCheckTcpSocketPortPtrOutput{})
	pulumi.RegisterOutputType(GlobalDNSRecordStatusOutput{})
	pulumi.RegisterOutputType(GlobalDNSRecordStatusPtrOutput{})
	pulumi.RegisterOutputType(GlobalDNSRecordStatusConditionsOutput{})
	pulumi.RegisterOutputType(GlobalDNSRecordStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(GlobalDNSRecordStatusEndpointStatusesOutput{})
	pulumi.RegisterOutputType(GlobalDNSRecordStatusEndpointStatusesArrayOutput{})
	pulumi.RegisterOutputType(GlobalDNSRecordStatusMonitoredServiceStatusesOutput{})
	pulumi.RegisterOutputType(GlobalDNSRecordStatusMonitoredServiceStatusesArrayOutput{})
	pulumi.RegisterOutputType(GlobalDNSRecordStatusProviderStatusOutput{})
	pulumi.RegisterOutputType(GlobalDNSRecordStatusProviderStatusPtrOutput{})
	pulumi.RegisterOutputType(GlobalDNSRecordStatusProviderStatusRoute53Output{})
	pulumi.RegisterOutputType(GlobalDNSRecordStatusProviderStatusRoute53PtrOutput{})
	pulumi.RegisterOutputType(GlobalDNSRecordStatusProviderStatusRoute53HealthCheckIDOutput{})
	pulumi.RegisterOutputType(GlobalDNSZoneTypeOutput{})
	pulumi.RegisterOutputType(GlobalDNSZoneMetadataOutput{})
	pulumi.RegisterOutputType(GlobalDNSZoneSpecOutput{})
	pulumi.RegisterOutputType(GlobalDNSZoneSpecPtrOutput{})
	pulumi.RegisterOutputType(GlobalDNSZoneSpecProviderOutput{})
	pulumi.RegisterOutputType(GlobalDNSZoneSpecProviderPtrOutput{})
	pulumi.RegisterOutputType(GlobalDNSZoneSpecProviderExternalDNSOutput{})
	pulumi.RegisterOutputType(GlobalDNSZoneSpecProviderExternalDNSPtrOutput{})
	pulumi.RegisterOutputType(GlobalDNSZoneSpecProviderExternalDNSAnnotationsOutput{})
	pulumi.RegisterOutputType(GlobalDNSZoneSpecProviderRoute53Output{})
	pulumi.RegisterOutputType(GlobalDNSZoneSpecProviderRoute53PtrOutput{})
	pulumi.RegisterOutputType(GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefOutput{})
	pulumi.RegisterOutputType(GlobalDNSZoneSpecProviderRoute53CredentialsSecretRefPtrOutput{})
	pulumi.RegisterOutputType(GlobalDNSZoneStatusOutput{})
	pulumi.RegisterOutputType(GlobalDNSZoneStatusPtrOutput{})
	pulumi.RegisterOutputType(GlobalDNSZoneStatusConditionsOutput{})
	pulumi.RegisterOutputType(GlobalDNSZoneStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(GlobalRouteDiscoveryTypeOutput{})
	pulumi.RegisterOutputType(GlobalRouteDiscoveryMetadataOutput{})
	pulumi.RegisterOutputType(GlobalRouteDiscoverySpecOutput{})
	pulumi.RegisterOutputType(GlobalRouteDiscoverySpecPtrOutput{})
	pulumi.RegisterOutputType(GlobalRouteDiscoverySpecClustersOutput{})
	pulumi.RegisterOutputType(GlobalRouteDiscoverySpecClustersArrayOutput{})
	pulumi.RegisterOutputType(GlobalRouteDiscoverySpecClustersClusterCredentialRefOutput{})
	pulumi.RegisterOutputType(GlobalRouteDiscoverySpecGlobalZoneRefOutput{})
	pulumi.RegisterOutputType(GlobalRouteDiscoverySpecGlobalZoneRefPtrOutput{})
	pulumi.RegisterOutputType(GlobalRouteDiscoverySpecRouteSelectorOutput{})
	pulumi.RegisterOutputType(GlobalRouteDiscoverySpecRouteSelectorPtrOutput{})
	pulumi.RegisterOutputType(GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(GlobalRouteDiscoverySpecRouteSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(GlobalRouteDiscoverySpecRouteSelectorMatchLabelsOutput{})
	pulumi.RegisterOutputType(GlobalRouteDiscoveryStatusOutput{})
	pulumi.RegisterOutputType(GlobalRouteDiscoveryStatusPtrOutput{})
	pulumi.RegisterOutputType(GlobalRouteDiscoveryStatusClusterReferenceStatusesOutput{})
	pulumi.RegisterOutputType(GlobalRouteDiscoveryStatusClusterReferenceStatusesArrayOutput{})
	pulumi.RegisterOutputType(GlobalRouteDiscoveryStatusConditionsOutput{})
	pulumi.RegisterOutputType(GlobalRouteDiscoveryStatusConditionsArrayOutput{})
}

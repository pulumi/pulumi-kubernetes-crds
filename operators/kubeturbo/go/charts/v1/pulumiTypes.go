// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type KubeturboType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	Spec       interface{}        `pulumi:"spec"`
}

// KubeturboTypeInput is an input type that accepts KubeturboTypeArgs and KubeturboTypeOutput values.
// You can construct a concrete instance of `KubeturboTypeInput` via:
//
//          KubeturboTypeArgs{...}
type KubeturboTypeInput interface {
	pulumi.Input

	ToKubeturboTypeOutput() KubeturboTypeOutput
	ToKubeturboTypeOutputWithContext(context.Context) KubeturboTypeOutput
}

type KubeturboTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Spec       pulumi.Input              `pulumi:"spec"`
}

func (KubeturboTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeturboType)(nil)).Elem()
}

func (i KubeturboTypeArgs) ToKubeturboTypeOutput() KubeturboTypeOutput {
	return i.ToKubeturboTypeOutputWithContext(context.Background())
}

func (i KubeturboTypeArgs) ToKubeturboTypeOutputWithContext(ctx context.Context) KubeturboTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeturboTypeOutput)
}

type KubeturboTypeOutput struct{ *pulumi.OutputState }

func (KubeturboTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeturboType)(nil)).Elem()
}

func (o KubeturboTypeOutput) ToKubeturboTypeOutput() KubeturboTypeOutput {
	return o
}

func (o KubeturboTypeOutput) ToKubeturboTypeOutputWithContext(ctx context.Context) KubeturboTypeOutput {
	return o
}

func (o KubeturboTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubeturboType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o KubeturboTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubeturboType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o KubeturboTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v KubeturboType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o KubeturboTypeOutput) Spec() pulumi.AnyOutput {
	return o.ApplyT(func(v KubeturboType) interface{} { return v.Spec }).(pulumi.AnyOutput)
}

type KubeturboMetadata struct {
}

// KubeturboMetadataInput is an input type that accepts KubeturboMetadataArgs and KubeturboMetadataOutput values.
// You can construct a concrete instance of `KubeturboMetadataInput` via:
//
//          KubeturboMetadataArgs{...}
type KubeturboMetadataInput interface {
	pulumi.Input

	ToKubeturboMetadataOutput() KubeturboMetadataOutput
	ToKubeturboMetadataOutputWithContext(context.Context) KubeturboMetadataOutput
}

type KubeturboMetadataArgs struct {
}

func (KubeturboMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeturboMetadata)(nil)).Elem()
}

func (i KubeturboMetadataArgs) ToKubeturboMetadataOutput() KubeturboMetadataOutput {
	return i.ToKubeturboMetadataOutputWithContext(context.Background())
}

func (i KubeturboMetadataArgs) ToKubeturboMetadataOutputWithContext(ctx context.Context) KubeturboMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubeturboMetadataOutput)
}

type KubeturboMetadataOutput struct{ *pulumi.OutputState }

func (KubeturboMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubeturboMetadata)(nil)).Elem()
}

func (o KubeturboMetadataOutput) ToKubeturboMetadataOutput() KubeturboMetadataOutput {
	return o
}

func (o KubeturboMetadataOutput) ToKubeturboMetadataOutputWithContext(ctx context.Context) KubeturboMetadataOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(KubeturboTypeOutput{})
	pulumi.RegisterOutputType(KubeturboMetadataOutput{})
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// AquaCsp is the Schema for the aquacsps API
type AquaCspType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// AquaCspSpec defines the desired state of AquaCsp
	Spec map[string]interface{} `pulumi:"spec"`
	// AquaCspStatus defines the observed state of AquaCsp
	Status map[string]interface{} `pulumi:"status"`
}

// AquaCspTypeInput is an input type that accepts AquaCspTypeArgs and AquaCspTypeOutput values.
// You can construct a concrete instance of `AquaCspTypeInput` via:
//
//          AquaCspTypeArgs{...}
type AquaCspTypeInput interface {
	pulumi.Input

	ToAquaCspTypeOutput() AquaCspTypeOutput
	ToAquaCspTypeOutputWithContext(context.Context) AquaCspTypeOutput
}

// AquaCsp is the Schema for the aquacsps API
type AquaCspTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// AquaCspSpec defines the desired state of AquaCsp
	Spec pulumi.MapInput `pulumi:"spec"`
	// AquaCspStatus defines the observed state of AquaCsp
	Status pulumi.MapInput `pulumi:"status"`
}

func (AquaCspTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaCspType)(nil)).Elem()
}

func (i AquaCspTypeArgs) ToAquaCspTypeOutput() AquaCspTypeOutput {
	return i.ToAquaCspTypeOutputWithContext(context.Background())
}

func (i AquaCspTypeArgs) ToAquaCspTypeOutputWithContext(ctx context.Context) AquaCspTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AquaCspTypeOutput)
}

// AquaCsp is the Schema for the aquacsps API
type AquaCspTypeOutput struct{ *pulumi.OutputState }

func (AquaCspTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaCspType)(nil)).Elem()
}

func (o AquaCspTypeOutput) ToAquaCspTypeOutput() AquaCspTypeOutput {
	return o
}

func (o AquaCspTypeOutput) ToAquaCspTypeOutputWithContext(ctx context.Context) AquaCspTypeOutput {
	return o
}

func (o AquaCspTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AquaCspType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o AquaCspTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AquaCspType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o AquaCspTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v AquaCspType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// AquaCspSpec defines the desired state of AquaCsp
func (o AquaCspTypeOutput) Spec() pulumi.MapOutput {
	return o.ApplyT(func(v AquaCspType) map[string]interface{} { return v.Spec }).(pulumi.MapOutput)
}

// AquaCspStatus defines the observed state of AquaCsp
func (o AquaCspTypeOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v AquaCspType) map[string]interface{} { return v.Status }).(pulumi.MapOutput)
}

type AquaCspMetadata struct {
}

// AquaCspMetadataInput is an input type that accepts AquaCspMetadataArgs and AquaCspMetadataOutput values.
// You can construct a concrete instance of `AquaCspMetadataInput` via:
//
//          AquaCspMetadataArgs{...}
type AquaCspMetadataInput interface {
	pulumi.Input

	ToAquaCspMetadataOutput() AquaCspMetadataOutput
	ToAquaCspMetadataOutputWithContext(context.Context) AquaCspMetadataOutput
}

type AquaCspMetadataArgs struct {
}

func (AquaCspMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaCspMetadata)(nil)).Elem()
}

func (i AquaCspMetadataArgs) ToAquaCspMetadataOutput() AquaCspMetadataOutput {
	return i.ToAquaCspMetadataOutputWithContext(context.Background())
}

func (i AquaCspMetadataArgs) ToAquaCspMetadataOutputWithContext(ctx context.Context) AquaCspMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AquaCspMetadataOutput)
}

type AquaCspMetadataOutput struct{ *pulumi.OutputState }

func (AquaCspMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaCspMetadata)(nil)).Elem()
}

func (o AquaCspMetadataOutput) ToAquaCspMetadataOutput() AquaCspMetadataOutput {
	return o
}

func (o AquaCspMetadataOutput) ToAquaCspMetadataOutputWithContext(ctx context.Context) AquaCspMetadataOutput {
	return o
}

// AquaCspSpec defines the desired state of AquaCsp
type AquaCspSpec struct {
}

// AquaCspSpecInput is an input type that accepts AquaCspSpecArgs and AquaCspSpecOutput values.
// You can construct a concrete instance of `AquaCspSpecInput` via:
//
//          AquaCspSpecArgs{...}
type AquaCspSpecInput interface {
	pulumi.Input

	ToAquaCspSpecOutput() AquaCspSpecOutput
	ToAquaCspSpecOutputWithContext(context.Context) AquaCspSpecOutput
}

// AquaCspSpec defines the desired state of AquaCsp
type AquaCspSpecArgs struct {
}

func (AquaCspSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaCspSpec)(nil)).Elem()
}

func (i AquaCspSpecArgs) ToAquaCspSpecOutput() AquaCspSpecOutput {
	return i.ToAquaCspSpecOutputWithContext(context.Background())
}

func (i AquaCspSpecArgs) ToAquaCspSpecOutputWithContext(ctx context.Context) AquaCspSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AquaCspSpecOutput)
}

// AquaCspSpec defines the desired state of AquaCsp
type AquaCspSpecOutput struct{ *pulumi.OutputState }

func (AquaCspSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaCspSpec)(nil)).Elem()
}

func (o AquaCspSpecOutput) ToAquaCspSpecOutput() AquaCspSpecOutput {
	return o
}

func (o AquaCspSpecOutput) ToAquaCspSpecOutputWithContext(ctx context.Context) AquaCspSpecOutput {
	return o
}

// AquaCspStatus defines the observed state of AquaCsp
type AquaCspStatus struct {
}

// AquaCspStatusInput is an input type that accepts AquaCspStatusArgs and AquaCspStatusOutput values.
// You can construct a concrete instance of `AquaCspStatusInput` via:
//
//          AquaCspStatusArgs{...}
type AquaCspStatusInput interface {
	pulumi.Input

	ToAquaCspStatusOutput() AquaCspStatusOutput
	ToAquaCspStatusOutputWithContext(context.Context) AquaCspStatusOutput
}

// AquaCspStatus defines the observed state of AquaCsp
type AquaCspStatusArgs struct {
}

func (AquaCspStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaCspStatus)(nil)).Elem()
}

func (i AquaCspStatusArgs) ToAquaCspStatusOutput() AquaCspStatusOutput {
	return i.ToAquaCspStatusOutputWithContext(context.Background())
}

func (i AquaCspStatusArgs) ToAquaCspStatusOutputWithContext(ctx context.Context) AquaCspStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AquaCspStatusOutput)
}

// AquaCspStatus defines the observed state of AquaCsp
type AquaCspStatusOutput struct{ *pulumi.OutputState }

func (AquaCspStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaCspStatus)(nil)).Elem()
}

func (o AquaCspStatusOutput) ToAquaCspStatusOutput() AquaCspStatusOutput {
	return o
}

func (o AquaCspStatusOutput) ToAquaCspStatusOutputWithContext(ctx context.Context) AquaCspStatusOutput {
	return o
}

// AquaDatabase is the Schema for the aquadatabases API
type AquaDatabaseType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// AquaDatabaseSpec defines the desired state of AquaDatabase
	Spec map[string]interface{} `pulumi:"spec"`
	// AquaDatabaseStatus defines the observed state of AquaDatabase
	Status map[string]interface{} `pulumi:"status"`
}

// AquaDatabaseTypeInput is an input type that accepts AquaDatabaseTypeArgs and AquaDatabaseTypeOutput values.
// You can construct a concrete instance of `AquaDatabaseTypeInput` via:
//
//          AquaDatabaseTypeArgs{...}
type AquaDatabaseTypeInput interface {
	pulumi.Input

	ToAquaDatabaseTypeOutput() AquaDatabaseTypeOutput
	ToAquaDatabaseTypeOutputWithContext(context.Context) AquaDatabaseTypeOutput
}

// AquaDatabase is the Schema for the aquadatabases API
type AquaDatabaseTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// AquaDatabaseSpec defines the desired state of AquaDatabase
	Spec pulumi.MapInput `pulumi:"spec"`
	// AquaDatabaseStatus defines the observed state of AquaDatabase
	Status pulumi.MapInput `pulumi:"status"`
}

func (AquaDatabaseTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaDatabaseType)(nil)).Elem()
}

func (i AquaDatabaseTypeArgs) ToAquaDatabaseTypeOutput() AquaDatabaseTypeOutput {
	return i.ToAquaDatabaseTypeOutputWithContext(context.Background())
}

func (i AquaDatabaseTypeArgs) ToAquaDatabaseTypeOutputWithContext(ctx context.Context) AquaDatabaseTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AquaDatabaseTypeOutput)
}

// AquaDatabase is the Schema for the aquadatabases API
type AquaDatabaseTypeOutput struct{ *pulumi.OutputState }

func (AquaDatabaseTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaDatabaseType)(nil)).Elem()
}

func (o AquaDatabaseTypeOutput) ToAquaDatabaseTypeOutput() AquaDatabaseTypeOutput {
	return o
}

func (o AquaDatabaseTypeOutput) ToAquaDatabaseTypeOutputWithContext(ctx context.Context) AquaDatabaseTypeOutput {
	return o
}

func (o AquaDatabaseTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AquaDatabaseType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o AquaDatabaseTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AquaDatabaseType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o AquaDatabaseTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v AquaDatabaseType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// AquaDatabaseSpec defines the desired state of AquaDatabase
func (o AquaDatabaseTypeOutput) Spec() pulumi.MapOutput {
	return o.ApplyT(func(v AquaDatabaseType) map[string]interface{} { return v.Spec }).(pulumi.MapOutput)
}

// AquaDatabaseStatus defines the observed state of AquaDatabase
func (o AquaDatabaseTypeOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v AquaDatabaseType) map[string]interface{} { return v.Status }).(pulumi.MapOutput)
}

type AquaDatabaseMetadata struct {
}

// AquaDatabaseMetadataInput is an input type that accepts AquaDatabaseMetadataArgs and AquaDatabaseMetadataOutput values.
// You can construct a concrete instance of `AquaDatabaseMetadataInput` via:
//
//          AquaDatabaseMetadataArgs{...}
type AquaDatabaseMetadataInput interface {
	pulumi.Input

	ToAquaDatabaseMetadataOutput() AquaDatabaseMetadataOutput
	ToAquaDatabaseMetadataOutputWithContext(context.Context) AquaDatabaseMetadataOutput
}

type AquaDatabaseMetadataArgs struct {
}

func (AquaDatabaseMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaDatabaseMetadata)(nil)).Elem()
}

func (i AquaDatabaseMetadataArgs) ToAquaDatabaseMetadataOutput() AquaDatabaseMetadataOutput {
	return i.ToAquaDatabaseMetadataOutputWithContext(context.Background())
}

func (i AquaDatabaseMetadataArgs) ToAquaDatabaseMetadataOutputWithContext(ctx context.Context) AquaDatabaseMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AquaDatabaseMetadataOutput)
}

type AquaDatabaseMetadataOutput struct{ *pulumi.OutputState }

func (AquaDatabaseMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaDatabaseMetadata)(nil)).Elem()
}

func (o AquaDatabaseMetadataOutput) ToAquaDatabaseMetadataOutput() AquaDatabaseMetadataOutput {
	return o
}

func (o AquaDatabaseMetadataOutput) ToAquaDatabaseMetadataOutputWithContext(ctx context.Context) AquaDatabaseMetadataOutput {
	return o
}

// AquaDatabaseSpec defines the desired state of AquaDatabase
type AquaDatabaseSpec struct {
}

// AquaDatabaseSpecInput is an input type that accepts AquaDatabaseSpecArgs and AquaDatabaseSpecOutput values.
// You can construct a concrete instance of `AquaDatabaseSpecInput` via:
//
//          AquaDatabaseSpecArgs{...}
type AquaDatabaseSpecInput interface {
	pulumi.Input

	ToAquaDatabaseSpecOutput() AquaDatabaseSpecOutput
	ToAquaDatabaseSpecOutputWithContext(context.Context) AquaDatabaseSpecOutput
}

// AquaDatabaseSpec defines the desired state of AquaDatabase
type AquaDatabaseSpecArgs struct {
}

func (AquaDatabaseSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaDatabaseSpec)(nil)).Elem()
}

func (i AquaDatabaseSpecArgs) ToAquaDatabaseSpecOutput() AquaDatabaseSpecOutput {
	return i.ToAquaDatabaseSpecOutputWithContext(context.Background())
}

func (i AquaDatabaseSpecArgs) ToAquaDatabaseSpecOutputWithContext(ctx context.Context) AquaDatabaseSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AquaDatabaseSpecOutput)
}

// AquaDatabaseSpec defines the desired state of AquaDatabase
type AquaDatabaseSpecOutput struct{ *pulumi.OutputState }

func (AquaDatabaseSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaDatabaseSpec)(nil)).Elem()
}

func (o AquaDatabaseSpecOutput) ToAquaDatabaseSpecOutput() AquaDatabaseSpecOutput {
	return o
}

func (o AquaDatabaseSpecOutput) ToAquaDatabaseSpecOutputWithContext(ctx context.Context) AquaDatabaseSpecOutput {
	return o
}

// AquaDatabaseStatus defines the observed state of AquaDatabase
type AquaDatabaseStatus struct {
}

// AquaDatabaseStatusInput is an input type that accepts AquaDatabaseStatusArgs and AquaDatabaseStatusOutput values.
// You can construct a concrete instance of `AquaDatabaseStatusInput` via:
//
//          AquaDatabaseStatusArgs{...}
type AquaDatabaseStatusInput interface {
	pulumi.Input

	ToAquaDatabaseStatusOutput() AquaDatabaseStatusOutput
	ToAquaDatabaseStatusOutputWithContext(context.Context) AquaDatabaseStatusOutput
}

// AquaDatabaseStatus defines the observed state of AquaDatabase
type AquaDatabaseStatusArgs struct {
}

func (AquaDatabaseStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaDatabaseStatus)(nil)).Elem()
}

func (i AquaDatabaseStatusArgs) ToAquaDatabaseStatusOutput() AquaDatabaseStatusOutput {
	return i.ToAquaDatabaseStatusOutputWithContext(context.Background())
}

func (i AquaDatabaseStatusArgs) ToAquaDatabaseStatusOutputWithContext(ctx context.Context) AquaDatabaseStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AquaDatabaseStatusOutput)
}

// AquaDatabaseStatus defines the observed state of AquaDatabase
type AquaDatabaseStatusOutput struct{ *pulumi.OutputState }

func (AquaDatabaseStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaDatabaseStatus)(nil)).Elem()
}

func (o AquaDatabaseStatusOutput) ToAquaDatabaseStatusOutput() AquaDatabaseStatusOutput {
	return o
}

func (o AquaDatabaseStatusOutput) ToAquaDatabaseStatusOutputWithContext(ctx context.Context) AquaDatabaseStatusOutput {
	return o
}

// AquaEnforcer is the Schema for the aquaenforcers API
type AquaEnforcerType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// AquaEnforcerSpec defines the desired state of AquaEnforcer
	Spec map[string]interface{} `pulumi:"spec"`
	// AquaEnforcerStatus defines the observed state of AquaEnforcer
	Status map[string]interface{} `pulumi:"status"`
}

// AquaEnforcerTypeInput is an input type that accepts AquaEnforcerTypeArgs and AquaEnforcerTypeOutput values.
// You can construct a concrete instance of `AquaEnforcerTypeInput` via:
//
//          AquaEnforcerTypeArgs{...}
type AquaEnforcerTypeInput interface {
	pulumi.Input

	ToAquaEnforcerTypeOutput() AquaEnforcerTypeOutput
	ToAquaEnforcerTypeOutputWithContext(context.Context) AquaEnforcerTypeOutput
}

// AquaEnforcer is the Schema for the aquaenforcers API
type AquaEnforcerTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// AquaEnforcerSpec defines the desired state of AquaEnforcer
	Spec pulumi.MapInput `pulumi:"spec"`
	// AquaEnforcerStatus defines the observed state of AquaEnforcer
	Status pulumi.MapInput `pulumi:"status"`
}

func (AquaEnforcerTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaEnforcerType)(nil)).Elem()
}

func (i AquaEnforcerTypeArgs) ToAquaEnforcerTypeOutput() AquaEnforcerTypeOutput {
	return i.ToAquaEnforcerTypeOutputWithContext(context.Background())
}

func (i AquaEnforcerTypeArgs) ToAquaEnforcerTypeOutputWithContext(ctx context.Context) AquaEnforcerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AquaEnforcerTypeOutput)
}

// AquaEnforcer is the Schema for the aquaenforcers API
type AquaEnforcerTypeOutput struct{ *pulumi.OutputState }

func (AquaEnforcerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaEnforcerType)(nil)).Elem()
}

func (o AquaEnforcerTypeOutput) ToAquaEnforcerTypeOutput() AquaEnforcerTypeOutput {
	return o
}

func (o AquaEnforcerTypeOutput) ToAquaEnforcerTypeOutputWithContext(ctx context.Context) AquaEnforcerTypeOutput {
	return o
}

func (o AquaEnforcerTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AquaEnforcerType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o AquaEnforcerTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AquaEnforcerType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o AquaEnforcerTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v AquaEnforcerType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// AquaEnforcerSpec defines the desired state of AquaEnforcer
func (o AquaEnforcerTypeOutput) Spec() pulumi.MapOutput {
	return o.ApplyT(func(v AquaEnforcerType) map[string]interface{} { return v.Spec }).(pulumi.MapOutput)
}

// AquaEnforcerStatus defines the observed state of AquaEnforcer
func (o AquaEnforcerTypeOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v AquaEnforcerType) map[string]interface{} { return v.Status }).(pulumi.MapOutput)
}

type AquaEnforcerMetadata struct {
}

// AquaEnforcerMetadataInput is an input type that accepts AquaEnforcerMetadataArgs and AquaEnforcerMetadataOutput values.
// You can construct a concrete instance of `AquaEnforcerMetadataInput` via:
//
//          AquaEnforcerMetadataArgs{...}
type AquaEnforcerMetadataInput interface {
	pulumi.Input

	ToAquaEnforcerMetadataOutput() AquaEnforcerMetadataOutput
	ToAquaEnforcerMetadataOutputWithContext(context.Context) AquaEnforcerMetadataOutput
}

type AquaEnforcerMetadataArgs struct {
}

func (AquaEnforcerMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaEnforcerMetadata)(nil)).Elem()
}

func (i AquaEnforcerMetadataArgs) ToAquaEnforcerMetadataOutput() AquaEnforcerMetadataOutput {
	return i.ToAquaEnforcerMetadataOutputWithContext(context.Background())
}

func (i AquaEnforcerMetadataArgs) ToAquaEnforcerMetadataOutputWithContext(ctx context.Context) AquaEnforcerMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AquaEnforcerMetadataOutput)
}

type AquaEnforcerMetadataOutput struct{ *pulumi.OutputState }

func (AquaEnforcerMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaEnforcerMetadata)(nil)).Elem()
}

func (o AquaEnforcerMetadataOutput) ToAquaEnforcerMetadataOutput() AquaEnforcerMetadataOutput {
	return o
}

func (o AquaEnforcerMetadataOutput) ToAquaEnforcerMetadataOutputWithContext(ctx context.Context) AquaEnforcerMetadataOutput {
	return o
}

// AquaEnforcerSpec defines the desired state of AquaEnforcer
type AquaEnforcerSpec struct {
}

// AquaEnforcerSpecInput is an input type that accepts AquaEnforcerSpecArgs and AquaEnforcerSpecOutput values.
// You can construct a concrete instance of `AquaEnforcerSpecInput` via:
//
//          AquaEnforcerSpecArgs{...}
type AquaEnforcerSpecInput interface {
	pulumi.Input

	ToAquaEnforcerSpecOutput() AquaEnforcerSpecOutput
	ToAquaEnforcerSpecOutputWithContext(context.Context) AquaEnforcerSpecOutput
}

// AquaEnforcerSpec defines the desired state of AquaEnforcer
type AquaEnforcerSpecArgs struct {
}

func (AquaEnforcerSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaEnforcerSpec)(nil)).Elem()
}

func (i AquaEnforcerSpecArgs) ToAquaEnforcerSpecOutput() AquaEnforcerSpecOutput {
	return i.ToAquaEnforcerSpecOutputWithContext(context.Background())
}

func (i AquaEnforcerSpecArgs) ToAquaEnforcerSpecOutputWithContext(ctx context.Context) AquaEnforcerSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AquaEnforcerSpecOutput)
}

// AquaEnforcerSpec defines the desired state of AquaEnforcer
type AquaEnforcerSpecOutput struct{ *pulumi.OutputState }

func (AquaEnforcerSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaEnforcerSpec)(nil)).Elem()
}

func (o AquaEnforcerSpecOutput) ToAquaEnforcerSpecOutput() AquaEnforcerSpecOutput {
	return o
}

func (o AquaEnforcerSpecOutput) ToAquaEnforcerSpecOutputWithContext(ctx context.Context) AquaEnforcerSpecOutput {
	return o
}

// AquaEnforcerStatus defines the observed state of AquaEnforcer
type AquaEnforcerStatus struct {
}

// AquaEnforcerStatusInput is an input type that accepts AquaEnforcerStatusArgs and AquaEnforcerStatusOutput values.
// You can construct a concrete instance of `AquaEnforcerStatusInput` via:
//
//          AquaEnforcerStatusArgs{...}
type AquaEnforcerStatusInput interface {
	pulumi.Input

	ToAquaEnforcerStatusOutput() AquaEnforcerStatusOutput
	ToAquaEnforcerStatusOutputWithContext(context.Context) AquaEnforcerStatusOutput
}

// AquaEnforcerStatus defines the observed state of AquaEnforcer
type AquaEnforcerStatusArgs struct {
}

func (AquaEnforcerStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaEnforcerStatus)(nil)).Elem()
}

func (i AquaEnforcerStatusArgs) ToAquaEnforcerStatusOutput() AquaEnforcerStatusOutput {
	return i.ToAquaEnforcerStatusOutputWithContext(context.Background())
}

func (i AquaEnforcerStatusArgs) ToAquaEnforcerStatusOutputWithContext(ctx context.Context) AquaEnforcerStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AquaEnforcerStatusOutput)
}

// AquaEnforcerStatus defines the observed state of AquaEnforcer
type AquaEnforcerStatusOutput struct{ *pulumi.OutputState }

func (AquaEnforcerStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaEnforcerStatus)(nil)).Elem()
}

func (o AquaEnforcerStatusOutput) ToAquaEnforcerStatusOutput() AquaEnforcerStatusOutput {
	return o
}

func (o AquaEnforcerStatusOutput) ToAquaEnforcerStatusOutputWithContext(ctx context.Context) AquaEnforcerStatusOutput {
	return o
}

// AquaGateway is the Schema for the aquagateways API
type AquaGatewayType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// AquaGatewaySpec defines the desired state of AquaGateway
	Spec map[string]interface{} `pulumi:"spec"`
	// AquaGatewayStatus defines the observed state of AquaGateway
	Status map[string]interface{} `pulumi:"status"`
}

// AquaGatewayTypeInput is an input type that accepts AquaGatewayTypeArgs and AquaGatewayTypeOutput values.
// You can construct a concrete instance of `AquaGatewayTypeInput` via:
//
//          AquaGatewayTypeArgs{...}
type AquaGatewayTypeInput interface {
	pulumi.Input

	ToAquaGatewayTypeOutput() AquaGatewayTypeOutput
	ToAquaGatewayTypeOutputWithContext(context.Context) AquaGatewayTypeOutput
}

// AquaGateway is the Schema for the aquagateways API
type AquaGatewayTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// AquaGatewaySpec defines the desired state of AquaGateway
	Spec pulumi.MapInput `pulumi:"spec"`
	// AquaGatewayStatus defines the observed state of AquaGateway
	Status pulumi.MapInput `pulumi:"status"`
}

func (AquaGatewayTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaGatewayType)(nil)).Elem()
}

func (i AquaGatewayTypeArgs) ToAquaGatewayTypeOutput() AquaGatewayTypeOutput {
	return i.ToAquaGatewayTypeOutputWithContext(context.Background())
}

func (i AquaGatewayTypeArgs) ToAquaGatewayTypeOutputWithContext(ctx context.Context) AquaGatewayTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AquaGatewayTypeOutput)
}

// AquaGateway is the Schema for the aquagateways API
type AquaGatewayTypeOutput struct{ *pulumi.OutputState }

func (AquaGatewayTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaGatewayType)(nil)).Elem()
}

func (o AquaGatewayTypeOutput) ToAquaGatewayTypeOutput() AquaGatewayTypeOutput {
	return o
}

func (o AquaGatewayTypeOutput) ToAquaGatewayTypeOutputWithContext(ctx context.Context) AquaGatewayTypeOutput {
	return o
}

func (o AquaGatewayTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AquaGatewayType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o AquaGatewayTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AquaGatewayType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o AquaGatewayTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v AquaGatewayType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// AquaGatewaySpec defines the desired state of AquaGateway
func (o AquaGatewayTypeOutput) Spec() pulumi.MapOutput {
	return o.ApplyT(func(v AquaGatewayType) map[string]interface{} { return v.Spec }).(pulumi.MapOutput)
}

// AquaGatewayStatus defines the observed state of AquaGateway
func (o AquaGatewayTypeOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v AquaGatewayType) map[string]interface{} { return v.Status }).(pulumi.MapOutput)
}

type AquaGatewayMetadata struct {
}

// AquaGatewayMetadataInput is an input type that accepts AquaGatewayMetadataArgs and AquaGatewayMetadataOutput values.
// You can construct a concrete instance of `AquaGatewayMetadataInput` via:
//
//          AquaGatewayMetadataArgs{...}
type AquaGatewayMetadataInput interface {
	pulumi.Input

	ToAquaGatewayMetadataOutput() AquaGatewayMetadataOutput
	ToAquaGatewayMetadataOutputWithContext(context.Context) AquaGatewayMetadataOutput
}

type AquaGatewayMetadataArgs struct {
}

func (AquaGatewayMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaGatewayMetadata)(nil)).Elem()
}

func (i AquaGatewayMetadataArgs) ToAquaGatewayMetadataOutput() AquaGatewayMetadataOutput {
	return i.ToAquaGatewayMetadataOutputWithContext(context.Background())
}

func (i AquaGatewayMetadataArgs) ToAquaGatewayMetadataOutputWithContext(ctx context.Context) AquaGatewayMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AquaGatewayMetadataOutput)
}

type AquaGatewayMetadataOutput struct{ *pulumi.OutputState }

func (AquaGatewayMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaGatewayMetadata)(nil)).Elem()
}

func (o AquaGatewayMetadataOutput) ToAquaGatewayMetadataOutput() AquaGatewayMetadataOutput {
	return o
}

func (o AquaGatewayMetadataOutput) ToAquaGatewayMetadataOutputWithContext(ctx context.Context) AquaGatewayMetadataOutput {
	return o
}

// AquaGatewaySpec defines the desired state of AquaGateway
type AquaGatewaySpec struct {
}

// AquaGatewaySpecInput is an input type that accepts AquaGatewaySpecArgs and AquaGatewaySpecOutput values.
// You can construct a concrete instance of `AquaGatewaySpecInput` via:
//
//          AquaGatewaySpecArgs{...}
type AquaGatewaySpecInput interface {
	pulumi.Input

	ToAquaGatewaySpecOutput() AquaGatewaySpecOutput
	ToAquaGatewaySpecOutputWithContext(context.Context) AquaGatewaySpecOutput
}

// AquaGatewaySpec defines the desired state of AquaGateway
type AquaGatewaySpecArgs struct {
}

func (AquaGatewaySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaGatewaySpec)(nil)).Elem()
}

func (i AquaGatewaySpecArgs) ToAquaGatewaySpecOutput() AquaGatewaySpecOutput {
	return i.ToAquaGatewaySpecOutputWithContext(context.Background())
}

func (i AquaGatewaySpecArgs) ToAquaGatewaySpecOutputWithContext(ctx context.Context) AquaGatewaySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AquaGatewaySpecOutput)
}

// AquaGatewaySpec defines the desired state of AquaGateway
type AquaGatewaySpecOutput struct{ *pulumi.OutputState }

func (AquaGatewaySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaGatewaySpec)(nil)).Elem()
}

func (o AquaGatewaySpecOutput) ToAquaGatewaySpecOutput() AquaGatewaySpecOutput {
	return o
}

func (o AquaGatewaySpecOutput) ToAquaGatewaySpecOutputWithContext(ctx context.Context) AquaGatewaySpecOutput {
	return o
}

// AquaGatewayStatus defines the observed state of AquaGateway
type AquaGatewayStatus struct {
}

// AquaGatewayStatusInput is an input type that accepts AquaGatewayStatusArgs and AquaGatewayStatusOutput values.
// You can construct a concrete instance of `AquaGatewayStatusInput` via:
//
//          AquaGatewayStatusArgs{...}
type AquaGatewayStatusInput interface {
	pulumi.Input

	ToAquaGatewayStatusOutput() AquaGatewayStatusOutput
	ToAquaGatewayStatusOutputWithContext(context.Context) AquaGatewayStatusOutput
}

// AquaGatewayStatus defines the observed state of AquaGateway
type AquaGatewayStatusArgs struct {
}

func (AquaGatewayStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaGatewayStatus)(nil)).Elem()
}

func (i AquaGatewayStatusArgs) ToAquaGatewayStatusOutput() AquaGatewayStatusOutput {
	return i.ToAquaGatewayStatusOutputWithContext(context.Background())
}

func (i AquaGatewayStatusArgs) ToAquaGatewayStatusOutputWithContext(ctx context.Context) AquaGatewayStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AquaGatewayStatusOutput)
}

// AquaGatewayStatus defines the observed state of AquaGateway
type AquaGatewayStatusOutput struct{ *pulumi.OutputState }

func (AquaGatewayStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaGatewayStatus)(nil)).Elem()
}

func (o AquaGatewayStatusOutput) ToAquaGatewayStatusOutput() AquaGatewayStatusOutput {
	return o
}

func (o AquaGatewayStatusOutput) ToAquaGatewayStatusOutputWithContext(ctx context.Context) AquaGatewayStatusOutput {
	return o
}

// AquaScanner is the Schema for the aquascanners API
type AquaScannerType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// AquaScannerSpec defines the desired state of AquaScanner
	Spec map[string]interface{} `pulumi:"spec"`
	// AquaScannerStatus defines the observed state of AquaScanner
	Status map[string]interface{} `pulumi:"status"`
}

// AquaScannerTypeInput is an input type that accepts AquaScannerTypeArgs and AquaScannerTypeOutput values.
// You can construct a concrete instance of `AquaScannerTypeInput` via:
//
//          AquaScannerTypeArgs{...}
type AquaScannerTypeInput interface {
	pulumi.Input

	ToAquaScannerTypeOutput() AquaScannerTypeOutput
	ToAquaScannerTypeOutputWithContext(context.Context) AquaScannerTypeOutput
}

// AquaScanner is the Schema for the aquascanners API
type AquaScannerTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// AquaScannerSpec defines the desired state of AquaScanner
	Spec pulumi.MapInput `pulumi:"spec"`
	// AquaScannerStatus defines the observed state of AquaScanner
	Status pulumi.MapInput `pulumi:"status"`
}

func (AquaScannerTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaScannerType)(nil)).Elem()
}

func (i AquaScannerTypeArgs) ToAquaScannerTypeOutput() AquaScannerTypeOutput {
	return i.ToAquaScannerTypeOutputWithContext(context.Background())
}

func (i AquaScannerTypeArgs) ToAquaScannerTypeOutputWithContext(ctx context.Context) AquaScannerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AquaScannerTypeOutput)
}

// AquaScanner is the Schema for the aquascanners API
type AquaScannerTypeOutput struct{ *pulumi.OutputState }

func (AquaScannerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaScannerType)(nil)).Elem()
}

func (o AquaScannerTypeOutput) ToAquaScannerTypeOutput() AquaScannerTypeOutput {
	return o
}

func (o AquaScannerTypeOutput) ToAquaScannerTypeOutputWithContext(ctx context.Context) AquaScannerTypeOutput {
	return o
}

func (o AquaScannerTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AquaScannerType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o AquaScannerTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AquaScannerType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o AquaScannerTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v AquaScannerType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// AquaScannerSpec defines the desired state of AquaScanner
func (o AquaScannerTypeOutput) Spec() pulumi.MapOutput {
	return o.ApplyT(func(v AquaScannerType) map[string]interface{} { return v.Spec }).(pulumi.MapOutput)
}

// AquaScannerStatus defines the observed state of AquaScanner
func (o AquaScannerTypeOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v AquaScannerType) map[string]interface{} { return v.Status }).(pulumi.MapOutput)
}

type AquaScannerMetadata struct {
}

// AquaScannerMetadataInput is an input type that accepts AquaScannerMetadataArgs and AquaScannerMetadataOutput values.
// You can construct a concrete instance of `AquaScannerMetadataInput` via:
//
//          AquaScannerMetadataArgs{...}
type AquaScannerMetadataInput interface {
	pulumi.Input

	ToAquaScannerMetadataOutput() AquaScannerMetadataOutput
	ToAquaScannerMetadataOutputWithContext(context.Context) AquaScannerMetadataOutput
}

type AquaScannerMetadataArgs struct {
}

func (AquaScannerMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaScannerMetadata)(nil)).Elem()
}

func (i AquaScannerMetadataArgs) ToAquaScannerMetadataOutput() AquaScannerMetadataOutput {
	return i.ToAquaScannerMetadataOutputWithContext(context.Background())
}

func (i AquaScannerMetadataArgs) ToAquaScannerMetadataOutputWithContext(ctx context.Context) AquaScannerMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AquaScannerMetadataOutput)
}

type AquaScannerMetadataOutput struct{ *pulumi.OutputState }

func (AquaScannerMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaScannerMetadata)(nil)).Elem()
}

func (o AquaScannerMetadataOutput) ToAquaScannerMetadataOutput() AquaScannerMetadataOutput {
	return o
}

func (o AquaScannerMetadataOutput) ToAquaScannerMetadataOutputWithContext(ctx context.Context) AquaScannerMetadataOutput {
	return o
}

// AquaScannerSpec defines the desired state of AquaScanner
type AquaScannerSpec struct {
}

// AquaScannerSpecInput is an input type that accepts AquaScannerSpecArgs and AquaScannerSpecOutput values.
// You can construct a concrete instance of `AquaScannerSpecInput` via:
//
//          AquaScannerSpecArgs{...}
type AquaScannerSpecInput interface {
	pulumi.Input

	ToAquaScannerSpecOutput() AquaScannerSpecOutput
	ToAquaScannerSpecOutputWithContext(context.Context) AquaScannerSpecOutput
}

// AquaScannerSpec defines the desired state of AquaScanner
type AquaScannerSpecArgs struct {
}

func (AquaScannerSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaScannerSpec)(nil)).Elem()
}

func (i AquaScannerSpecArgs) ToAquaScannerSpecOutput() AquaScannerSpecOutput {
	return i.ToAquaScannerSpecOutputWithContext(context.Background())
}

func (i AquaScannerSpecArgs) ToAquaScannerSpecOutputWithContext(ctx context.Context) AquaScannerSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AquaScannerSpecOutput)
}

// AquaScannerSpec defines the desired state of AquaScanner
type AquaScannerSpecOutput struct{ *pulumi.OutputState }

func (AquaScannerSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaScannerSpec)(nil)).Elem()
}

func (o AquaScannerSpecOutput) ToAquaScannerSpecOutput() AquaScannerSpecOutput {
	return o
}

func (o AquaScannerSpecOutput) ToAquaScannerSpecOutputWithContext(ctx context.Context) AquaScannerSpecOutput {
	return o
}

// AquaScannerStatus defines the observed state of AquaScanner
type AquaScannerStatus struct {
}

// AquaScannerStatusInput is an input type that accepts AquaScannerStatusArgs and AquaScannerStatusOutput values.
// You can construct a concrete instance of `AquaScannerStatusInput` via:
//
//          AquaScannerStatusArgs{...}
type AquaScannerStatusInput interface {
	pulumi.Input

	ToAquaScannerStatusOutput() AquaScannerStatusOutput
	ToAquaScannerStatusOutputWithContext(context.Context) AquaScannerStatusOutput
}

// AquaScannerStatus defines the observed state of AquaScanner
type AquaScannerStatusArgs struct {
}

func (AquaScannerStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaScannerStatus)(nil)).Elem()
}

func (i AquaScannerStatusArgs) ToAquaScannerStatusOutput() AquaScannerStatusOutput {
	return i.ToAquaScannerStatusOutputWithContext(context.Background())
}

func (i AquaScannerStatusArgs) ToAquaScannerStatusOutputWithContext(ctx context.Context) AquaScannerStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AquaScannerStatusOutput)
}

// AquaScannerStatus defines the observed state of AquaScanner
type AquaScannerStatusOutput struct{ *pulumi.OutputState }

func (AquaScannerStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaScannerStatus)(nil)).Elem()
}

func (o AquaScannerStatusOutput) ToAquaScannerStatusOutput() AquaScannerStatusOutput {
	return o
}

func (o AquaScannerStatusOutput) ToAquaScannerStatusOutputWithContext(ctx context.Context) AquaScannerStatusOutput {
	return o
}

// AquaServer is the Schema for the aquaservers API
type AquaServerType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// AquaServerSpec defines the desired state of AquaServer
	Spec map[string]interface{} `pulumi:"spec"`
	// AquaServerStatus defines the observed state of AquaServer
	Status map[string]interface{} `pulumi:"status"`
}

// AquaServerTypeInput is an input type that accepts AquaServerTypeArgs and AquaServerTypeOutput values.
// You can construct a concrete instance of `AquaServerTypeInput` via:
//
//          AquaServerTypeArgs{...}
type AquaServerTypeInput interface {
	pulumi.Input

	ToAquaServerTypeOutput() AquaServerTypeOutput
	ToAquaServerTypeOutputWithContext(context.Context) AquaServerTypeOutput
}

// AquaServer is the Schema for the aquaservers API
type AquaServerTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// AquaServerSpec defines the desired state of AquaServer
	Spec pulumi.MapInput `pulumi:"spec"`
	// AquaServerStatus defines the observed state of AquaServer
	Status pulumi.MapInput `pulumi:"status"`
}

func (AquaServerTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaServerType)(nil)).Elem()
}

func (i AquaServerTypeArgs) ToAquaServerTypeOutput() AquaServerTypeOutput {
	return i.ToAquaServerTypeOutputWithContext(context.Background())
}

func (i AquaServerTypeArgs) ToAquaServerTypeOutputWithContext(ctx context.Context) AquaServerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AquaServerTypeOutput)
}

// AquaServer is the Schema for the aquaservers API
type AquaServerTypeOutput struct{ *pulumi.OutputState }

func (AquaServerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaServerType)(nil)).Elem()
}

func (o AquaServerTypeOutput) ToAquaServerTypeOutput() AquaServerTypeOutput {
	return o
}

func (o AquaServerTypeOutput) ToAquaServerTypeOutputWithContext(ctx context.Context) AquaServerTypeOutput {
	return o
}

func (o AquaServerTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AquaServerType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o AquaServerTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AquaServerType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o AquaServerTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v AquaServerType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// AquaServerSpec defines the desired state of AquaServer
func (o AquaServerTypeOutput) Spec() pulumi.MapOutput {
	return o.ApplyT(func(v AquaServerType) map[string]interface{} { return v.Spec }).(pulumi.MapOutput)
}

// AquaServerStatus defines the observed state of AquaServer
func (o AquaServerTypeOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v AquaServerType) map[string]interface{} { return v.Status }).(pulumi.MapOutput)
}

type AquaServerMetadata struct {
}

// AquaServerMetadataInput is an input type that accepts AquaServerMetadataArgs and AquaServerMetadataOutput values.
// You can construct a concrete instance of `AquaServerMetadataInput` via:
//
//          AquaServerMetadataArgs{...}
type AquaServerMetadataInput interface {
	pulumi.Input

	ToAquaServerMetadataOutput() AquaServerMetadataOutput
	ToAquaServerMetadataOutputWithContext(context.Context) AquaServerMetadataOutput
}

type AquaServerMetadataArgs struct {
}

func (AquaServerMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaServerMetadata)(nil)).Elem()
}

func (i AquaServerMetadataArgs) ToAquaServerMetadataOutput() AquaServerMetadataOutput {
	return i.ToAquaServerMetadataOutputWithContext(context.Background())
}

func (i AquaServerMetadataArgs) ToAquaServerMetadataOutputWithContext(ctx context.Context) AquaServerMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AquaServerMetadataOutput)
}

type AquaServerMetadataOutput struct{ *pulumi.OutputState }

func (AquaServerMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaServerMetadata)(nil)).Elem()
}

func (o AquaServerMetadataOutput) ToAquaServerMetadataOutput() AquaServerMetadataOutput {
	return o
}

func (o AquaServerMetadataOutput) ToAquaServerMetadataOutputWithContext(ctx context.Context) AquaServerMetadataOutput {
	return o
}

// AquaServerSpec defines the desired state of AquaServer
type AquaServerSpec struct {
}

// AquaServerSpecInput is an input type that accepts AquaServerSpecArgs and AquaServerSpecOutput values.
// You can construct a concrete instance of `AquaServerSpecInput` via:
//
//          AquaServerSpecArgs{...}
type AquaServerSpecInput interface {
	pulumi.Input

	ToAquaServerSpecOutput() AquaServerSpecOutput
	ToAquaServerSpecOutputWithContext(context.Context) AquaServerSpecOutput
}

// AquaServerSpec defines the desired state of AquaServer
type AquaServerSpecArgs struct {
}

func (AquaServerSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaServerSpec)(nil)).Elem()
}

func (i AquaServerSpecArgs) ToAquaServerSpecOutput() AquaServerSpecOutput {
	return i.ToAquaServerSpecOutputWithContext(context.Background())
}

func (i AquaServerSpecArgs) ToAquaServerSpecOutputWithContext(ctx context.Context) AquaServerSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AquaServerSpecOutput)
}

// AquaServerSpec defines the desired state of AquaServer
type AquaServerSpecOutput struct{ *pulumi.OutputState }

func (AquaServerSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaServerSpec)(nil)).Elem()
}

func (o AquaServerSpecOutput) ToAquaServerSpecOutput() AquaServerSpecOutput {
	return o
}

func (o AquaServerSpecOutput) ToAquaServerSpecOutputWithContext(ctx context.Context) AquaServerSpecOutput {
	return o
}

// AquaServerStatus defines the observed state of AquaServer
type AquaServerStatus struct {
}

// AquaServerStatusInput is an input type that accepts AquaServerStatusArgs and AquaServerStatusOutput values.
// You can construct a concrete instance of `AquaServerStatusInput` via:
//
//          AquaServerStatusArgs{...}
type AquaServerStatusInput interface {
	pulumi.Input

	ToAquaServerStatusOutput() AquaServerStatusOutput
	ToAquaServerStatusOutputWithContext(context.Context) AquaServerStatusOutput
}

// AquaServerStatus defines the observed state of AquaServer
type AquaServerStatusArgs struct {
}

func (AquaServerStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaServerStatus)(nil)).Elem()
}

func (i AquaServerStatusArgs) ToAquaServerStatusOutput() AquaServerStatusOutput {
	return i.ToAquaServerStatusOutputWithContext(context.Background())
}

func (i AquaServerStatusArgs) ToAquaServerStatusOutputWithContext(ctx context.Context) AquaServerStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AquaServerStatusOutput)
}

// AquaServerStatus defines the observed state of AquaServer
type AquaServerStatusOutput struct{ *pulumi.OutputState }

func (AquaServerStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AquaServerStatus)(nil)).Elem()
}

func (o AquaServerStatusOutput) ToAquaServerStatusOutput() AquaServerStatusOutput {
	return o
}

func (o AquaServerStatusOutput) ToAquaServerStatusOutputWithContext(ctx context.Context) AquaServerStatusOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(AquaCspTypeOutput{})
	pulumi.RegisterOutputType(AquaCspMetadataOutput{})
	pulumi.RegisterOutputType(AquaCspSpecOutput{})
	pulumi.RegisterOutputType(AquaCspStatusOutput{})
	pulumi.RegisterOutputType(AquaDatabaseTypeOutput{})
	pulumi.RegisterOutputType(AquaDatabaseMetadataOutput{})
	pulumi.RegisterOutputType(AquaDatabaseSpecOutput{})
	pulumi.RegisterOutputType(AquaDatabaseStatusOutput{})
	pulumi.RegisterOutputType(AquaEnforcerTypeOutput{})
	pulumi.RegisterOutputType(AquaEnforcerMetadataOutput{})
	pulumi.RegisterOutputType(AquaEnforcerSpecOutput{})
	pulumi.RegisterOutputType(AquaEnforcerStatusOutput{})
	pulumi.RegisterOutputType(AquaGatewayTypeOutput{})
	pulumi.RegisterOutputType(AquaGatewayMetadataOutput{})
	pulumi.RegisterOutputType(AquaGatewaySpecOutput{})
	pulumi.RegisterOutputType(AquaGatewayStatusOutput{})
	pulumi.RegisterOutputType(AquaScannerTypeOutput{})
	pulumi.RegisterOutputType(AquaScannerMetadataOutput{})
	pulumi.RegisterOutputType(AquaScannerSpecOutput{})
	pulumi.RegisterOutputType(AquaScannerStatusOutput{})
	pulumi.RegisterOutputType(AquaServerTypeOutput{})
	pulumi.RegisterOutputType(AquaServerMetadataOutput{})
	pulumi.RegisterOutputType(AquaServerSpecOutput{})
	pulumi.RegisterOutputType(AquaServerStatusOutput{})
}

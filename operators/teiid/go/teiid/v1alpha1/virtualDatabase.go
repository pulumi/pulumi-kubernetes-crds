// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// VirtualDatabase is the Schema for the virtualdatabases API
type VirtualDatabase struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// Virtual Database specification
	Spec VirtualDatabaseSpecPtrOutput `pulumi:"spec"`
	// Virtual Database Status
	Status VirtualDatabaseStatusPtrOutput `pulumi:"status"`
}

// NewVirtualDatabase registers a new resource with the given unique name, arguments, and options.
func NewVirtualDatabase(ctx *pulumi.Context,
	name string, args *VirtualDatabaseArgs, opts ...pulumi.ResourceOption) (*VirtualDatabase, error) {
	if args == nil {
		args = &VirtualDatabaseArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("teiid.io/v1alpha1")
	args.Kind = pulumi.StringPtr("VirtualDatabase")
	var resource VirtualDatabase
	err := ctx.RegisterResource("kubernetes:teiid.io/v1alpha1:VirtualDatabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualDatabase gets an existing VirtualDatabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualDatabaseState, opts ...pulumi.ResourceOption) (*VirtualDatabase, error) {
	var resource VirtualDatabase
	err := ctx.ReadResource("kubernetes:teiid.io/v1alpha1:VirtualDatabase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualDatabase resources.
type virtualDatabaseState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Virtual Database specification
	Spec *VirtualDatabaseSpec `pulumi:"spec"`
	// Virtual Database Status
	Status *VirtualDatabaseStatus `pulumi:"status"`
}

type VirtualDatabaseState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// Virtual Database specification
	Spec VirtualDatabaseSpecPtrInput
	// Virtual Database Status
	Status VirtualDatabaseStatusPtrInput
}

func (VirtualDatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualDatabaseState)(nil)).Elem()
}

type virtualDatabaseArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Virtual Database specification
	Spec *VirtualDatabaseSpec `pulumi:"spec"`
	// Virtual Database Status
	Status *VirtualDatabaseStatus `pulumi:"status"`
}

// The set of arguments for constructing a VirtualDatabase resource.
type VirtualDatabaseArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// Virtual Database specification
	Spec VirtualDatabaseSpecPtrInput
	// Virtual Database Status
	Status VirtualDatabaseStatusPtrInput
}

func (VirtualDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualDatabaseArgs)(nil)).Elem()
}

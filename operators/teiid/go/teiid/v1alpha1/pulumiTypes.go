// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// VirtualDatabase is the Schema for the virtualdatabases API
type VirtualDatabaseType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Virtual Database specification
	Spec *VirtualDatabaseSpec `pulumi:"spec"`
	// Virtual Database Status
	Status *VirtualDatabaseStatus `pulumi:"status"`
}

// VirtualDatabaseTypeInput is an input type that accepts VirtualDatabaseTypeArgs and VirtualDatabaseTypeOutput values.
// You can construct a concrete instance of `VirtualDatabaseTypeInput` via:
//
//          VirtualDatabaseTypeArgs{...}
type VirtualDatabaseTypeInput interface {
	pulumi.Input

	ToVirtualDatabaseTypeOutput() VirtualDatabaseTypeOutput
	ToVirtualDatabaseTypeOutputWithContext(context.Context) VirtualDatabaseTypeOutput
}

// VirtualDatabase is the Schema for the virtualdatabases API
type VirtualDatabaseTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// Virtual Database specification
	Spec VirtualDatabaseSpecPtrInput `pulumi:"spec"`
	// Virtual Database Status
	Status VirtualDatabaseStatusPtrInput `pulumi:"status"`
}

func (VirtualDatabaseTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseType)(nil)).Elem()
}

func (i VirtualDatabaseTypeArgs) ToVirtualDatabaseTypeOutput() VirtualDatabaseTypeOutput {
	return i.ToVirtualDatabaseTypeOutputWithContext(context.Background())
}

func (i VirtualDatabaseTypeArgs) ToVirtualDatabaseTypeOutputWithContext(ctx context.Context) VirtualDatabaseTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseTypeOutput)
}

// VirtualDatabase is the Schema for the virtualdatabases API
type VirtualDatabaseTypeOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseType)(nil)).Elem()
}

func (o VirtualDatabaseTypeOutput) ToVirtualDatabaseTypeOutput() VirtualDatabaseTypeOutput {
	return o
}

func (o VirtualDatabaseTypeOutput) ToVirtualDatabaseTypeOutputWithContext(ctx context.Context) VirtualDatabaseTypeOutput {
	return o
}

func (o VirtualDatabaseTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o VirtualDatabaseTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o VirtualDatabaseTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Virtual Database specification
func (o VirtualDatabaseTypeOutput) Spec() VirtualDatabaseSpecPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseType) *VirtualDatabaseSpec { return v.Spec }).(VirtualDatabaseSpecPtrOutput)
}

// Virtual Database Status
func (o VirtualDatabaseTypeOutput) Status() VirtualDatabaseStatusPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseType) *VirtualDatabaseStatus { return v.Status }).(VirtualDatabaseStatusPtrOutput)
}

type VirtualDatabaseMetadata struct {
}

// VirtualDatabaseMetadataInput is an input type that accepts VirtualDatabaseMetadataArgs and VirtualDatabaseMetadataOutput values.
// You can construct a concrete instance of `VirtualDatabaseMetadataInput` via:
//
//          VirtualDatabaseMetadataArgs{...}
type VirtualDatabaseMetadataInput interface {
	pulumi.Input

	ToVirtualDatabaseMetadataOutput() VirtualDatabaseMetadataOutput
	ToVirtualDatabaseMetadataOutputWithContext(context.Context) VirtualDatabaseMetadataOutput
}

type VirtualDatabaseMetadataArgs struct {
}

func (VirtualDatabaseMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseMetadata)(nil)).Elem()
}

func (i VirtualDatabaseMetadataArgs) ToVirtualDatabaseMetadataOutput() VirtualDatabaseMetadataOutput {
	return i.ToVirtualDatabaseMetadataOutputWithContext(context.Background())
}

func (i VirtualDatabaseMetadataArgs) ToVirtualDatabaseMetadataOutputWithContext(ctx context.Context) VirtualDatabaseMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseMetadataOutput)
}

type VirtualDatabaseMetadataOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseMetadata)(nil)).Elem()
}

func (o VirtualDatabaseMetadataOutput) ToVirtualDatabaseMetadataOutput() VirtualDatabaseMetadataOutput {
	return o
}

func (o VirtualDatabaseMetadataOutput) ToVirtualDatabaseMetadataOutputWithContext(ctx context.Context) VirtualDatabaseMetadataOutput {
	return o
}

// Virtual Database specification
type VirtualDatabaseSpec struct {
	// S2I Build configuration
	Build VirtualDatabaseSpecBuild `pulumi:"build"`
	// DataSources configuration for this Virtual Database
	Datasources []VirtualDatabaseSpecDatasources `pulumi:"datasources"`
	// Environment properties required for deployment
	Env []VirtualDatabaseSpecEnv `pulumi:"env"`
	// Defines the services (LoadBalancer, NodePort, 3scale) to expose
	Expose []string `pulumi:"expose"`
	// Jaeger instance to use to push the tracing information
	Jaeger *string `pulumi:"jaeger"`
	// Number Of deployment units required
	Replicas *int `pulumi:"replicas"`
	// memory, disk cpu requirements
	Resources *VirtualDatabaseSpecResources `pulumi:"resources"`
}

// VirtualDatabaseSpecInput is an input type that accepts VirtualDatabaseSpecArgs and VirtualDatabaseSpecOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecInput` via:
//
//          VirtualDatabaseSpecArgs{...}
type VirtualDatabaseSpecInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecOutput() VirtualDatabaseSpecOutput
	ToVirtualDatabaseSpecOutputWithContext(context.Context) VirtualDatabaseSpecOutput
}

// Virtual Database specification
type VirtualDatabaseSpecArgs struct {
	// S2I Build configuration
	Build VirtualDatabaseSpecBuildInput `pulumi:"build"`
	// DataSources configuration for this Virtual Database
	Datasources VirtualDatabaseSpecDatasourcesArrayInput `pulumi:"datasources"`
	// Environment properties required for deployment
	Env VirtualDatabaseSpecEnvArrayInput `pulumi:"env"`
	// Defines the services (LoadBalancer, NodePort, 3scale) to expose
	Expose pulumi.StringArrayInput `pulumi:"expose"`
	// Jaeger instance to use to push the tracing information
	Jaeger pulumi.StringPtrInput `pulumi:"jaeger"`
	// Number Of deployment units required
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// memory, disk cpu requirements
	Resources VirtualDatabaseSpecResourcesPtrInput `pulumi:"resources"`
}

func (VirtualDatabaseSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpec)(nil)).Elem()
}

func (i VirtualDatabaseSpecArgs) ToVirtualDatabaseSpecOutput() VirtualDatabaseSpecOutput {
	return i.ToVirtualDatabaseSpecOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecArgs) ToVirtualDatabaseSpecOutputWithContext(ctx context.Context) VirtualDatabaseSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecOutput)
}

func (i VirtualDatabaseSpecArgs) ToVirtualDatabaseSpecPtrOutput() VirtualDatabaseSpecPtrOutput {
	return i.ToVirtualDatabaseSpecPtrOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecArgs) ToVirtualDatabaseSpecPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecOutput).ToVirtualDatabaseSpecPtrOutputWithContext(ctx)
}

// VirtualDatabaseSpecPtrInput is an input type that accepts VirtualDatabaseSpecArgs, VirtualDatabaseSpecPtr and VirtualDatabaseSpecPtrOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecPtrInput` via:
//
//          VirtualDatabaseSpecArgs{...}
//
//  or:
//
//          nil
type VirtualDatabaseSpecPtrInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecPtrOutput() VirtualDatabaseSpecPtrOutput
	ToVirtualDatabaseSpecPtrOutputWithContext(context.Context) VirtualDatabaseSpecPtrOutput
}

type virtualDatabaseSpecPtrType VirtualDatabaseSpecArgs

func VirtualDatabaseSpecPtr(v *VirtualDatabaseSpecArgs) VirtualDatabaseSpecPtrInput {
	return (*virtualDatabaseSpecPtrType)(v)
}

func (*virtualDatabaseSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpec)(nil)).Elem()
}

func (i *virtualDatabaseSpecPtrType) ToVirtualDatabaseSpecPtrOutput() VirtualDatabaseSpecPtrOutput {
	return i.ToVirtualDatabaseSpecPtrOutputWithContext(context.Background())
}

func (i *virtualDatabaseSpecPtrType) ToVirtualDatabaseSpecPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecPtrOutput)
}

// Virtual Database specification
type VirtualDatabaseSpecOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpec)(nil)).Elem()
}

func (o VirtualDatabaseSpecOutput) ToVirtualDatabaseSpecOutput() VirtualDatabaseSpecOutput {
	return o
}

func (o VirtualDatabaseSpecOutput) ToVirtualDatabaseSpecOutputWithContext(ctx context.Context) VirtualDatabaseSpecOutput {
	return o
}

func (o VirtualDatabaseSpecOutput) ToVirtualDatabaseSpecPtrOutput() VirtualDatabaseSpecPtrOutput {
	return o.ToVirtualDatabaseSpecPtrOutputWithContext(context.Background())
}

func (o VirtualDatabaseSpecOutput) ToVirtualDatabaseSpecPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpec) *VirtualDatabaseSpec {
		return &v
	}).(VirtualDatabaseSpecPtrOutput)
}

// S2I Build configuration
func (o VirtualDatabaseSpecOutput) Build() VirtualDatabaseSpecBuildOutput {
	return o.ApplyT(func(v VirtualDatabaseSpec) VirtualDatabaseSpecBuild { return v.Build }).(VirtualDatabaseSpecBuildOutput)
}

// DataSources configuration for this Virtual Database
func (o VirtualDatabaseSpecOutput) Datasources() VirtualDatabaseSpecDatasourcesArrayOutput {
	return o.ApplyT(func(v VirtualDatabaseSpec) []VirtualDatabaseSpecDatasources { return v.Datasources }).(VirtualDatabaseSpecDatasourcesArrayOutput)
}

// Environment properties required for deployment
func (o VirtualDatabaseSpecOutput) Env() VirtualDatabaseSpecEnvArrayOutput {
	return o.ApplyT(func(v VirtualDatabaseSpec) []VirtualDatabaseSpecEnv { return v.Env }).(VirtualDatabaseSpecEnvArrayOutput)
}

// Defines the services (LoadBalancer, NodePort, 3scale) to expose
func (o VirtualDatabaseSpecOutput) Expose() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualDatabaseSpec) []string { return v.Expose }).(pulumi.StringArrayOutput)
}

// Jaeger instance to use to push the tracing information
func (o VirtualDatabaseSpecOutput) Jaeger() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpec) *string { return v.Jaeger }).(pulumi.StringPtrOutput)
}

// Number Of deployment units required
func (o VirtualDatabaseSpecOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpec) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// memory, disk cpu requirements
func (o VirtualDatabaseSpecOutput) Resources() VirtualDatabaseSpecResourcesPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpec) *VirtualDatabaseSpecResources { return v.Resources }).(VirtualDatabaseSpecResourcesPtrOutput)
}

type VirtualDatabaseSpecPtrOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpec)(nil)).Elem()
}

func (o VirtualDatabaseSpecPtrOutput) ToVirtualDatabaseSpecPtrOutput() VirtualDatabaseSpecPtrOutput {
	return o
}

func (o VirtualDatabaseSpecPtrOutput) ToVirtualDatabaseSpecPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecPtrOutput {
	return o
}

func (o VirtualDatabaseSpecPtrOutput) Elem() VirtualDatabaseSpecOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpec) VirtualDatabaseSpec { return *v }).(VirtualDatabaseSpecOutput)
}

// S2I Build configuration
func (o VirtualDatabaseSpecPtrOutput) Build() VirtualDatabaseSpecBuildPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpec) *VirtualDatabaseSpecBuild {
		if v == nil {
			return nil
		}
		return &v.Build
	}).(VirtualDatabaseSpecBuildPtrOutput)
}

// DataSources configuration for this Virtual Database
func (o VirtualDatabaseSpecPtrOutput) Datasources() VirtualDatabaseSpecDatasourcesArrayOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpec) []VirtualDatabaseSpecDatasources {
		if v == nil {
			return nil
		}
		return v.Datasources
	}).(VirtualDatabaseSpecDatasourcesArrayOutput)
}

// Environment properties required for deployment
func (o VirtualDatabaseSpecPtrOutput) Env() VirtualDatabaseSpecEnvArrayOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpec) []VirtualDatabaseSpecEnv {
		if v == nil {
			return nil
		}
		return v.Env
	}).(VirtualDatabaseSpecEnvArrayOutput)
}

// Defines the services (LoadBalancer, NodePort, 3scale) to expose
func (o VirtualDatabaseSpecPtrOutput) Expose() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpec) []string {
		if v == nil {
			return nil
		}
		return v.Expose
	}).(pulumi.StringArrayOutput)
}

// Jaeger instance to use to push the tracing information
func (o VirtualDatabaseSpecPtrOutput) Jaeger() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpec) *string {
		if v == nil {
			return nil
		}
		return v.Jaeger
	}).(pulumi.StringPtrOutput)
}

// Number Of deployment units required
func (o VirtualDatabaseSpecPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpec) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// memory, disk cpu requirements
func (o VirtualDatabaseSpecPtrOutput) Resources() VirtualDatabaseSpecResourcesPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpec) *VirtualDatabaseSpecResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(VirtualDatabaseSpecResourcesPtrOutput)
}

// S2I Build configuration
type VirtualDatabaseSpecBuild struct {
	// Environment properties set build purpose
	Env []VirtualDatabaseSpecBuildEnv `pulumi:"env"`
	// VDB Source details
	Source *VirtualDatabaseSpecBuildSource `pulumi:"source"`
}

// VirtualDatabaseSpecBuildInput is an input type that accepts VirtualDatabaseSpecBuildArgs and VirtualDatabaseSpecBuildOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecBuildInput` via:
//
//          VirtualDatabaseSpecBuildArgs{...}
type VirtualDatabaseSpecBuildInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecBuildOutput() VirtualDatabaseSpecBuildOutput
	ToVirtualDatabaseSpecBuildOutputWithContext(context.Context) VirtualDatabaseSpecBuildOutput
}

// S2I Build configuration
type VirtualDatabaseSpecBuildArgs struct {
	// Environment properties set build purpose
	Env VirtualDatabaseSpecBuildEnvArrayInput `pulumi:"env"`
	// VDB Source details
	Source VirtualDatabaseSpecBuildSourcePtrInput `pulumi:"source"`
}

func (VirtualDatabaseSpecBuildArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecBuild)(nil)).Elem()
}

func (i VirtualDatabaseSpecBuildArgs) ToVirtualDatabaseSpecBuildOutput() VirtualDatabaseSpecBuildOutput {
	return i.ToVirtualDatabaseSpecBuildOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecBuildArgs) ToVirtualDatabaseSpecBuildOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecBuildOutput)
}

func (i VirtualDatabaseSpecBuildArgs) ToVirtualDatabaseSpecBuildPtrOutput() VirtualDatabaseSpecBuildPtrOutput {
	return i.ToVirtualDatabaseSpecBuildPtrOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecBuildArgs) ToVirtualDatabaseSpecBuildPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecBuildOutput).ToVirtualDatabaseSpecBuildPtrOutputWithContext(ctx)
}

// VirtualDatabaseSpecBuildPtrInput is an input type that accepts VirtualDatabaseSpecBuildArgs, VirtualDatabaseSpecBuildPtr and VirtualDatabaseSpecBuildPtrOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecBuildPtrInput` via:
//
//          VirtualDatabaseSpecBuildArgs{...}
//
//  or:
//
//          nil
type VirtualDatabaseSpecBuildPtrInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecBuildPtrOutput() VirtualDatabaseSpecBuildPtrOutput
	ToVirtualDatabaseSpecBuildPtrOutputWithContext(context.Context) VirtualDatabaseSpecBuildPtrOutput
}

type virtualDatabaseSpecBuildPtrType VirtualDatabaseSpecBuildArgs

func VirtualDatabaseSpecBuildPtr(v *VirtualDatabaseSpecBuildArgs) VirtualDatabaseSpecBuildPtrInput {
	return (*virtualDatabaseSpecBuildPtrType)(v)
}

func (*virtualDatabaseSpecBuildPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpecBuild)(nil)).Elem()
}

func (i *virtualDatabaseSpecBuildPtrType) ToVirtualDatabaseSpecBuildPtrOutput() VirtualDatabaseSpecBuildPtrOutput {
	return i.ToVirtualDatabaseSpecBuildPtrOutputWithContext(context.Background())
}

func (i *virtualDatabaseSpecBuildPtrType) ToVirtualDatabaseSpecBuildPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecBuildPtrOutput)
}

// S2I Build configuration
type VirtualDatabaseSpecBuildOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecBuildOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecBuild)(nil)).Elem()
}

func (o VirtualDatabaseSpecBuildOutput) ToVirtualDatabaseSpecBuildOutput() VirtualDatabaseSpecBuildOutput {
	return o
}

func (o VirtualDatabaseSpecBuildOutput) ToVirtualDatabaseSpecBuildOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildOutput {
	return o
}

func (o VirtualDatabaseSpecBuildOutput) ToVirtualDatabaseSpecBuildPtrOutput() VirtualDatabaseSpecBuildPtrOutput {
	return o.ToVirtualDatabaseSpecBuildPtrOutputWithContext(context.Background())
}

func (o VirtualDatabaseSpecBuildOutput) ToVirtualDatabaseSpecBuildPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecBuild) *VirtualDatabaseSpecBuild {
		return &v
	}).(VirtualDatabaseSpecBuildPtrOutput)
}

// Environment properties set build purpose
func (o VirtualDatabaseSpecBuildOutput) Env() VirtualDatabaseSpecBuildEnvArrayOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecBuild) []VirtualDatabaseSpecBuildEnv { return v.Env }).(VirtualDatabaseSpecBuildEnvArrayOutput)
}

// VDB Source details
func (o VirtualDatabaseSpecBuildOutput) Source() VirtualDatabaseSpecBuildSourcePtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecBuild) *VirtualDatabaseSpecBuildSource { return v.Source }).(VirtualDatabaseSpecBuildSourcePtrOutput)
}

type VirtualDatabaseSpecBuildPtrOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecBuildPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpecBuild)(nil)).Elem()
}

func (o VirtualDatabaseSpecBuildPtrOutput) ToVirtualDatabaseSpecBuildPtrOutput() VirtualDatabaseSpecBuildPtrOutput {
	return o
}

func (o VirtualDatabaseSpecBuildPtrOutput) ToVirtualDatabaseSpecBuildPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildPtrOutput {
	return o
}

func (o VirtualDatabaseSpecBuildPtrOutput) Elem() VirtualDatabaseSpecBuildOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecBuild) VirtualDatabaseSpecBuild { return *v }).(VirtualDatabaseSpecBuildOutput)
}

// Environment properties set build purpose
func (o VirtualDatabaseSpecBuildPtrOutput) Env() VirtualDatabaseSpecBuildEnvArrayOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecBuild) []VirtualDatabaseSpecBuildEnv {
		if v == nil {
			return nil
		}
		return v.Env
	}).(VirtualDatabaseSpecBuildEnvArrayOutput)
}

// VDB Source details
func (o VirtualDatabaseSpecBuildPtrOutput) Source() VirtualDatabaseSpecBuildSourcePtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecBuild) *VirtualDatabaseSpecBuildSource {
		if v == nil {
			return nil
		}
		return v.Source
	}).(VirtualDatabaseSpecBuildSourcePtrOutput)
}

// EnvVar represents an environment variable present in a Container.
type VirtualDatabaseSpecBuildEnv struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *VirtualDatabaseSpecBuildEnvValueFrom `pulumi:"valueFrom"`
}

// VirtualDatabaseSpecBuildEnvInput is an input type that accepts VirtualDatabaseSpecBuildEnvArgs and VirtualDatabaseSpecBuildEnvOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecBuildEnvInput` via:
//
//          VirtualDatabaseSpecBuildEnvArgs{...}
type VirtualDatabaseSpecBuildEnvInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecBuildEnvOutput() VirtualDatabaseSpecBuildEnvOutput
	ToVirtualDatabaseSpecBuildEnvOutputWithContext(context.Context) VirtualDatabaseSpecBuildEnvOutput
}

// EnvVar represents an environment variable present in a Container.
type VirtualDatabaseSpecBuildEnvArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom VirtualDatabaseSpecBuildEnvValueFromPtrInput `pulumi:"valueFrom"`
}

func (VirtualDatabaseSpecBuildEnvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecBuildEnv)(nil)).Elem()
}

func (i VirtualDatabaseSpecBuildEnvArgs) ToVirtualDatabaseSpecBuildEnvOutput() VirtualDatabaseSpecBuildEnvOutput {
	return i.ToVirtualDatabaseSpecBuildEnvOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecBuildEnvArgs) ToVirtualDatabaseSpecBuildEnvOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildEnvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecBuildEnvOutput)
}

// VirtualDatabaseSpecBuildEnvArrayInput is an input type that accepts VirtualDatabaseSpecBuildEnvArray and VirtualDatabaseSpecBuildEnvArrayOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecBuildEnvArrayInput` via:
//
//          VirtualDatabaseSpecBuildEnvArray{ VirtualDatabaseSpecBuildEnvArgs{...} }
type VirtualDatabaseSpecBuildEnvArrayInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecBuildEnvArrayOutput() VirtualDatabaseSpecBuildEnvArrayOutput
	ToVirtualDatabaseSpecBuildEnvArrayOutputWithContext(context.Context) VirtualDatabaseSpecBuildEnvArrayOutput
}

type VirtualDatabaseSpecBuildEnvArray []VirtualDatabaseSpecBuildEnvInput

func (VirtualDatabaseSpecBuildEnvArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualDatabaseSpecBuildEnv)(nil)).Elem()
}

func (i VirtualDatabaseSpecBuildEnvArray) ToVirtualDatabaseSpecBuildEnvArrayOutput() VirtualDatabaseSpecBuildEnvArrayOutput {
	return i.ToVirtualDatabaseSpecBuildEnvArrayOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecBuildEnvArray) ToVirtualDatabaseSpecBuildEnvArrayOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildEnvArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecBuildEnvArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type VirtualDatabaseSpecBuildEnvOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecBuildEnvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecBuildEnv)(nil)).Elem()
}

func (o VirtualDatabaseSpecBuildEnvOutput) ToVirtualDatabaseSpecBuildEnvOutput() VirtualDatabaseSpecBuildEnvOutput {
	return o
}

func (o VirtualDatabaseSpecBuildEnvOutput) ToVirtualDatabaseSpecBuildEnvOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildEnvOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o VirtualDatabaseSpecBuildEnvOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecBuildEnv) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o VirtualDatabaseSpecBuildEnvOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecBuildEnv) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o VirtualDatabaseSpecBuildEnvOutput) ValueFrom() VirtualDatabaseSpecBuildEnvValueFromPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecBuildEnv) *VirtualDatabaseSpecBuildEnvValueFrom { return v.ValueFrom }).(VirtualDatabaseSpecBuildEnvValueFromPtrOutput)
}

type VirtualDatabaseSpecBuildEnvArrayOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecBuildEnvArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualDatabaseSpecBuildEnv)(nil)).Elem()
}

func (o VirtualDatabaseSpecBuildEnvArrayOutput) ToVirtualDatabaseSpecBuildEnvArrayOutput() VirtualDatabaseSpecBuildEnvArrayOutput {
	return o
}

func (o VirtualDatabaseSpecBuildEnvArrayOutput) ToVirtualDatabaseSpecBuildEnvArrayOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildEnvArrayOutput {
	return o
}

func (o VirtualDatabaseSpecBuildEnvArrayOutput) Index(i pulumi.IntInput) VirtualDatabaseSpecBuildEnvOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualDatabaseSpecBuildEnv {
		return vs[0].([]VirtualDatabaseSpecBuildEnv)[vs[1].(int)]
	}).(VirtualDatabaseSpecBuildEnvOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type VirtualDatabaseSpecBuildEnvValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef *VirtualDatabaseSpecBuildEnvValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *VirtualDatabaseSpecBuildEnvValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *VirtualDatabaseSpecBuildEnvValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// VirtualDatabaseSpecBuildEnvValueFromInput is an input type that accepts VirtualDatabaseSpecBuildEnvValueFromArgs and VirtualDatabaseSpecBuildEnvValueFromOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecBuildEnvValueFromInput` via:
//
//          VirtualDatabaseSpecBuildEnvValueFromArgs{...}
type VirtualDatabaseSpecBuildEnvValueFromInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecBuildEnvValueFromOutput() VirtualDatabaseSpecBuildEnvValueFromOutput
	ToVirtualDatabaseSpecBuildEnvValueFromOutputWithContext(context.Context) VirtualDatabaseSpecBuildEnvValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type VirtualDatabaseSpecBuildEnvValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef VirtualDatabaseSpecBuildEnvValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (VirtualDatabaseSpecBuildEnvValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecBuildEnvValueFrom)(nil)).Elem()
}

func (i VirtualDatabaseSpecBuildEnvValueFromArgs) ToVirtualDatabaseSpecBuildEnvValueFromOutput() VirtualDatabaseSpecBuildEnvValueFromOutput {
	return i.ToVirtualDatabaseSpecBuildEnvValueFromOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecBuildEnvValueFromArgs) ToVirtualDatabaseSpecBuildEnvValueFromOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildEnvValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecBuildEnvValueFromOutput)
}

func (i VirtualDatabaseSpecBuildEnvValueFromArgs) ToVirtualDatabaseSpecBuildEnvValueFromPtrOutput() VirtualDatabaseSpecBuildEnvValueFromPtrOutput {
	return i.ToVirtualDatabaseSpecBuildEnvValueFromPtrOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecBuildEnvValueFromArgs) ToVirtualDatabaseSpecBuildEnvValueFromPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildEnvValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecBuildEnvValueFromOutput).ToVirtualDatabaseSpecBuildEnvValueFromPtrOutputWithContext(ctx)
}

// VirtualDatabaseSpecBuildEnvValueFromPtrInput is an input type that accepts VirtualDatabaseSpecBuildEnvValueFromArgs, VirtualDatabaseSpecBuildEnvValueFromPtr and VirtualDatabaseSpecBuildEnvValueFromPtrOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecBuildEnvValueFromPtrInput` via:
//
//          VirtualDatabaseSpecBuildEnvValueFromArgs{...}
//
//  or:
//
//          nil
type VirtualDatabaseSpecBuildEnvValueFromPtrInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecBuildEnvValueFromPtrOutput() VirtualDatabaseSpecBuildEnvValueFromPtrOutput
	ToVirtualDatabaseSpecBuildEnvValueFromPtrOutputWithContext(context.Context) VirtualDatabaseSpecBuildEnvValueFromPtrOutput
}

type virtualDatabaseSpecBuildEnvValueFromPtrType VirtualDatabaseSpecBuildEnvValueFromArgs

func VirtualDatabaseSpecBuildEnvValueFromPtr(v *VirtualDatabaseSpecBuildEnvValueFromArgs) VirtualDatabaseSpecBuildEnvValueFromPtrInput {
	return (*virtualDatabaseSpecBuildEnvValueFromPtrType)(v)
}

func (*virtualDatabaseSpecBuildEnvValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpecBuildEnvValueFrom)(nil)).Elem()
}

func (i *virtualDatabaseSpecBuildEnvValueFromPtrType) ToVirtualDatabaseSpecBuildEnvValueFromPtrOutput() VirtualDatabaseSpecBuildEnvValueFromPtrOutput {
	return i.ToVirtualDatabaseSpecBuildEnvValueFromPtrOutputWithContext(context.Background())
}

func (i *virtualDatabaseSpecBuildEnvValueFromPtrType) ToVirtualDatabaseSpecBuildEnvValueFromPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildEnvValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecBuildEnvValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type VirtualDatabaseSpecBuildEnvValueFromOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecBuildEnvValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecBuildEnvValueFrom)(nil)).Elem()
}

func (o VirtualDatabaseSpecBuildEnvValueFromOutput) ToVirtualDatabaseSpecBuildEnvValueFromOutput() VirtualDatabaseSpecBuildEnvValueFromOutput {
	return o
}

func (o VirtualDatabaseSpecBuildEnvValueFromOutput) ToVirtualDatabaseSpecBuildEnvValueFromOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildEnvValueFromOutput {
	return o
}

func (o VirtualDatabaseSpecBuildEnvValueFromOutput) ToVirtualDatabaseSpecBuildEnvValueFromPtrOutput() VirtualDatabaseSpecBuildEnvValueFromPtrOutput {
	return o.ToVirtualDatabaseSpecBuildEnvValueFromPtrOutputWithContext(context.Background())
}

func (o VirtualDatabaseSpecBuildEnvValueFromOutput) ToVirtualDatabaseSpecBuildEnvValueFromPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildEnvValueFromPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecBuildEnvValueFrom) *VirtualDatabaseSpecBuildEnvValueFrom {
		return &v
	}).(VirtualDatabaseSpecBuildEnvValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o VirtualDatabaseSpecBuildEnvValueFromOutput) ConfigMapKeyRef() VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecBuildEnvValueFrom) *VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o VirtualDatabaseSpecBuildEnvValueFromOutput) FieldRef() VirtualDatabaseSpecBuildEnvValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecBuildEnvValueFrom) *VirtualDatabaseSpecBuildEnvValueFromFieldRef {
		return v.FieldRef
	}).(VirtualDatabaseSpecBuildEnvValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o VirtualDatabaseSpecBuildEnvValueFromOutput) ResourceFieldRef() VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecBuildEnvValueFrom) *VirtualDatabaseSpecBuildEnvValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o VirtualDatabaseSpecBuildEnvValueFromOutput) SecretKeyRef() VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecBuildEnvValueFrom) *VirtualDatabaseSpecBuildEnvValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrOutput)
}

type VirtualDatabaseSpecBuildEnvValueFromPtrOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecBuildEnvValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpecBuildEnvValueFrom)(nil)).Elem()
}

func (o VirtualDatabaseSpecBuildEnvValueFromPtrOutput) ToVirtualDatabaseSpecBuildEnvValueFromPtrOutput() VirtualDatabaseSpecBuildEnvValueFromPtrOutput {
	return o
}

func (o VirtualDatabaseSpecBuildEnvValueFromPtrOutput) ToVirtualDatabaseSpecBuildEnvValueFromPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildEnvValueFromPtrOutput {
	return o
}

func (o VirtualDatabaseSpecBuildEnvValueFromPtrOutput) Elem() VirtualDatabaseSpecBuildEnvValueFromOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecBuildEnvValueFrom) VirtualDatabaseSpecBuildEnvValueFrom { return *v }).(VirtualDatabaseSpecBuildEnvValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o VirtualDatabaseSpecBuildEnvValueFromPtrOutput) ConfigMapKeyRef() VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecBuildEnvValueFrom) *VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o VirtualDatabaseSpecBuildEnvValueFromPtrOutput) FieldRef() VirtualDatabaseSpecBuildEnvValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecBuildEnvValueFrom) *VirtualDatabaseSpecBuildEnvValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(VirtualDatabaseSpecBuildEnvValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o VirtualDatabaseSpecBuildEnvValueFromPtrOutput) ResourceFieldRef() VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecBuildEnvValueFrom) *VirtualDatabaseSpecBuildEnvValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o VirtualDatabaseSpecBuildEnvValueFromPtrOutput) SecretKeyRef() VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecBuildEnvValueFrom) *VirtualDatabaseSpecBuildEnvValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefInput is an input type that accepts VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefArgs and VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefInput` via:
//
//          VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefArgs{...}
type VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefOutput() VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefOutput
	ToVirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefOutputWithContext(context.Context) VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefArgs) ToVirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefOutput() VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefOutput {
	return i.ToVirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefArgs) ToVirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefOutput)
}

func (i VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefArgs) ToVirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrOutput() VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrOutput {
	return i.ToVirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefArgs) ToVirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefOutput).ToVirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrInput is an input type that accepts VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefArgs, VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtr and VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrInput` via:
//
//          VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrOutput() VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrOutput
	ToVirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrOutput
}

type virtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrType VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefArgs

func VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtr(v *VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefArgs) VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrInput {
	return (*virtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrType)(v)
}

func (*virtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *virtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrType) ToVirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrOutput() VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrOutput {
	return i.ToVirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *virtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrType) ToVirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefOutput) ToVirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefOutput() VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefOutput {
	return o
}

func (o VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefOutput) ToVirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefOutput {
	return o
}

func (o VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefOutput) ToVirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrOutput() VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ToVirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefOutput) ToVirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRef) *VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRef {
		return &v
	}).(VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrOutput) ToVirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrOutput() VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrOutput) ToVirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrOutput) Elem() VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRef) VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRef {
		return *v
	}).(VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type VirtualDatabaseSpecBuildEnvValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// VirtualDatabaseSpecBuildEnvValueFromFieldRefInput is an input type that accepts VirtualDatabaseSpecBuildEnvValueFromFieldRefArgs and VirtualDatabaseSpecBuildEnvValueFromFieldRefOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecBuildEnvValueFromFieldRefInput` via:
//
//          VirtualDatabaseSpecBuildEnvValueFromFieldRefArgs{...}
type VirtualDatabaseSpecBuildEnvValueFromFieldRefInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecBuildEnvValueFromFieldRefOutput() VirtualDatabaseSpecBuildEnvValueFromFieldRefOutput
	ToVirtualDatabaseSpecBuildEnvValueFromFieldRefOutputWithContext(context.Context) VirtualDatabaseSpecBuildEnvValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type VirtualDatabaseSpecBuildEnvValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (VirtualDatabaseSpecBuildEnvValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecBuildEnvValueFromFieldRef)(nil)).Elem()
}

func (i VirtualDatabaseSpecBuildEnvValueFromFieldRefArgs) ToVirtualDatabaseSpecBuildEnvValueFromFieldRefOutput() VirtualDatabaseSpecBuildEnvValueFromFieldRefOutput {
	return i.ToVirtualDatabaseSpecBuildEnvValueFromFieldRefOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecBuildEnvValueFromFieldRefArgs) ToVirtualDatabaseSpecBuildEnvValueFromFieldRefOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildEnvValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecBuildEnvValueFromFieldRefOutput)
}

func (i VirtualDatabaseSpecBuildEnvValueFromFieldRefArgs) ToVirtualDatabaseSpecBuildEnvValueFromFieldRefPtrOutput() VirtualDatabaseSpecBuildEnvValueFromFieldRefPtrOutput {
	return i.ToVirtualDatabaseSpecBuildEnvValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecBuildEnvValueFromFieldRefArgs) ToVirtualDatabaseSpecBuildEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildEnvValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecBuildEnvValueFromFieldRefOutput).ToVirtualDatabaseSpecBuildEnvValueFromFieldRefPtrOutputWithContext(ctx)
}

// VirtualDatabaseSpecBuildEnvValueFromFieldRefPtrInput is an input type that accepts VirtualDatabaseSpecBuildEnvValueFromFieldRefArgs, VirtualDatabaseSpecBuildEnvValueFromFieldRefPtr and VirtualDatabaseSpecBuildEnvValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecBuildEnvValueFromFieldRefPtrInput` via:
//
//          VirtualDatabaseSpecBuildEnvValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type VirtualDatabaseSpecBuildEnvValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecBuildEnvValueFromFieldRefPtrOutput() VirtualDatabaseSpecBuildEnvValueFromFieldRefPtrOutput
	ToVirtualDatabaseSpecBuildEnvValueFromFieldRefPtrOutputWithContext(context.Context) VirtualDatabaseSpecBuildEnvValueFromFieldRefPtrOutput
}

type virtualDatabaseSpecBuildEnvValueFromFieldRefPtrType VirtualDatabaseSpecBuildEnvValueFromFieldRefArgs

func VirtualDatabaseSpecBuildEnvValueFromFieldRefPtr(v *VirtualDatabaseSpecBuildEnvValueFromFieldRefArgs) VirtualDatabaseSpecBuildEnvValueFromFieldRefPtrInput {
	return (*virtualDatabaseSpecBuildEnvValueFromFieldRefPtrType)(v)
}

func (*virtualDatabaseSpecBuildEnvValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpecBuildEnvValueFromFieldRef)(nil)).Elem()
}

func (i *virtualDatabaseSpecBuildEnvValueFromFieldRefPtrType) ToVirtualDatabaseSpecBuildEnvValueFromFieldRefPtrOutput() VirtualDatabaseSpecBuildEnvValueFromFieldRefPtrOutput {
	return i.ToVirtualDatabaseSpecBuildEnvValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *virtualDatabaseSpecBuildEnvValueFromFieldRefPtrType) ToVirtualDatabaseSpecBuildEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildEnvValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecBuildEnvValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type VirtualDatabaseSpecBuildEnvValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecBuildEnvValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecBuildEnvValueFromFieldRef)(nil)).Elem()
}

func (o VirtualDatabaseSpecBuildEnvValueFromFieldRefOutput) ToVirtualDatabaseSpecBuildEnvValueFromFieldRefOutput() VirtualDatabaseSpecBuildEnvValueFromFieldRefOutput {
	return o
}

func (o VirtualDatabaseSpecBuildEnvValueFromFieldRefOutput) ToVirtualDatabaseSpecBuildEnvValueFromFieldRefOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildEnvValueFromFieldRefOutput {
	return o
}

func (o VirtualDatabaseSpecBuildEnvValueFromFieldRefOutput) ToVirtualDatabaseSpecBuildEnvValueFromFieldRefPtrOutput() VirtualDatabaseSpecBuildEnvValueFromFieldRefPtrOutput {
	return o.ToVirtualDatabaseSpecBuildEnvValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o VirtualDatabaseSpecBuildEnvValueFromFieldRefOutput) ToVirtualDatabaseSpecBuildEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildEnvValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecBuildEnvValueFromFieldRef) *VirtualDatabaseSpecBuildEnvValueFromFieldRef {
		return &v
	}).(VirtualDatabaseSpecBuildEnvValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o VirtualDatabaseSpecBuildEnvValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecBuildEnvValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o VirtualDatabaseSpecBuildEnvValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecBuildEnvValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type VirtualDatabaseSpecBuildEnvValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecBuildEnvValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpecBuildEnvValueFromFieldRef)(nil)).Elem()
}

func (o VirtualDatabaseSpecBuildEnvValueFromFieldRefPtrOutput) ToVirtualDatabaseSpecBuildEnvValueFromFieldRefPtrOutput() VirtualDatabaseSpecBuildEnvValueFromFieldRefPtrOutput {
	return o
}

func (o VirtualDatabaseSpecBuildEnvValueFromFieldRefPtrOutput) ToVirtualDatabaseSpecBuildEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildEnvValueFromFieldRefPtrOutput {
	return o
}

func (o VirtualDatabaseSpecBuildEnvValueFromFieldRefPtrOutput) Elem() VirtualDatabaseSpecBuildEnvValueFromFieldRefOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecBuildEnvValueFromFieldRef) VirtualDatabaseSpecBuildEnvValueFromFieldRef {
		return *v
	}).(VirtualDatabaseSpecBuildEnvValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o VirtualDatabaseSpecBuildEnvValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecBuildEnvValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o VirtualDatabaseSpecBuildEnvValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecBuildEnvValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type VirtualDatabaseSpecBuildEnvValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisor `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefInput is an input type that accepts VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefArgs and VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefInput` via:
//
//          VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefArgs{...}
type VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecBuildEnvValueFromResourceFieldRefOutput() VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefOutput
	ToVirtualDatabaseSpecBuildEnvValueFromResourceFieldRefOutputWithContext(context.Context) VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecBuildEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (i VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefArgs) ToVirtualDatabaseSpecBuildEnvValueFromResourceFieldRefOutput() VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefOutput {
	return i.ToVirtualDatabaseSpecBuildEnvValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefArgs) ToVirtualDatabaseSpecBuildEnvValueFromResourceFieldRefOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefOutput)
}

func (i VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefArgs) ToVirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrOutput() VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrOutput {
	return i.ToVirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefArgs) ToVirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefOutput).ToVirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrInput is an input type that accepts VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefArgs, VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtr and VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrInput` via:
//
//          VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrOutput() VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrOutput
	ToVirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrOutputWithContext(context.Context) VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrOutput
}

type virtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrType VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefArgs

func VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtr(v *VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefArgs) VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrInput {
	return (*virtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrType)(v)
}

func (*virtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpecBuildEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (i *virtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrType) ToVirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrOutput() VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrOutput {
	return i.ToVirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *virtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrType) ToVirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecBuildEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (o VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefOutput) ToVirtualDatabaseSpecBuildEnvValueFromResourceFieldRefOutput() VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefOutput {
	return o
}

func (o VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefOutput) ToVirtualDatabaseSpecBuildEnvValueFromResourceFieldRefOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefOutput {
	return o
}

func (o VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefOutput) ToVirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrOutput() VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrOutput {
	return o.ToVirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefOutput) ToVirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecBuildEnvValueFromResourceFieldRef) *VirtualDatabaseSpecBuildEnvValueFromResourceFieldRef {
		return &v
	}).(VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecBuildEnvValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefOutput) Divisor() VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecBuildEnvValueFromResourceFieldRef) *VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisor {
		return v.Divisor
	}).(VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecBuildEnvValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpecBuildEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (o VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrOutput) ToVirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrOutput() VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrOutput {
	return o
}

func (o VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrOutput) ToVirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrOutput {
	return o
}

func (o VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrOutput) Elem() VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecBuildEnvValueFromResourceFieldRef) VirtualDatabaseSpecBuildEnvValueFromResourceFieldRef {
		return *v
	}).(VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecBuildEnvValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrOutput) Divisor() VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecBuildEnvValueFromResourceFieldRef) *VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisor {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecBuildEnvValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

type VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisor struct {
}

// VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorInput is an input type that accepts VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorArgs and VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorInput` via:
//
//          VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorArgs{...}
type VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorOutput() VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorOutput
	ToVirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorOutputWithContext(context.Context) VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorOutput
}

type VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorArgs struct {
}

func (VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorArgs) ToVirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorOutput() VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorOutput {
	return i.ToVirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorArgs) ToVirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorOutput)
}

func (i VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorArgs) ToVirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrOutput() VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToVirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorArgs) ToVirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorOutput).ToVirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx)
}

// VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrInput is an input type that accepts VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorArgs, VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtr and VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrInput` via:
//
//          VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorArgs{...}
//
//  or:
//
//          nil
type VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrOutput() VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrOutput
	ToVirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Context) VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrOutput
}

type virtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrType VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorArgs

func VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtr(v *VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorArgs) VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrInput {
	return (*virtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrType)(v)
}

func (*virtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i *virtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrType) ToVirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrOutput() VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToVirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i *virtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrType) ToVirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrOutput)
}

type VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorOutput) ToVirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorOutput() VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorOutput) ToVirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorOutput) ToVirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrOutput() VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrOutput {
	return o.ToVirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (o VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorOutput) ToVirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisor) *VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisor {
		return &v
	}).(VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrOutput)
}

type VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrOutput) ToVirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrOutput() VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrOutput) ToVirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrOutput) Elem() VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisor) VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisor {
		return *v
	}).(VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorOutput)
}

// Selects a key of a secret in the pod's namespace
type VirtualDatabaseSpecBuildEnvValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefInput is an input type that accepts VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefArgs and VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefInput` via:
//
//          VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefArgs{...}
type VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecBuildEnvValueFromSecretKeyRefOutput() VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefOutput
	ToVirtualDatabaseSpecBuildEnvValueFromSecretKeyRefOutputWithContext(context.Context) VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecBuildEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (i VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefArgs) ToVirtualDatabaseSpecBuildEnvValueFromSecretKeyRefOutput() VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefOutput {
	return i.ToVirtualDatabaseSpecBuildEnvValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefArgs) ToVirtualDatabaseSpecBuildEnvValueFromSecretKeyRefOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefOutput)
}

func (i VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefArgs) ToVirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrOutput() VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrOutput {
	return i.ToVirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefArgs) ToVirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefOutput).ToVirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrInput is an input type that accepts VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefArgs, VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtr and VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrInput` via:
//
//          VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrOutput() VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrOutput
	ToVirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrOutputWithContext(context.Context) VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrOutput
}

type virtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrType VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefArgs

func VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtr(v *VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefArgs) VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrInput {
	return (*virtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrType)(v)
}

func (*virtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpecBuildEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (i *virtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrType) ToVirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrOutput() VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrOutput {
	return i.ToVirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *virtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrType) ToVirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecBuildEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (o VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefOutput) ToVirtualDatabaseSpecBuildEnvValueFromSecretKeyRefOutput() VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefOutput {
	return o
}

func (o VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefOutput) ToVirtualDatabaseSpecBuildEnvValueFromSecretKeyRefOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefOutput {
	return o
}

func (o VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefOutput) ToVirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrOutput() VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrOutput {
	return o.ToVirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefOutput) ToVirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecBuildEnvValueFromSecretKeyRef) *VirtualDatabaseSpecBuildEnvValueFromSecretKeyRef {
		return &v
	}).(VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecBuildEnvValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecBuildEnvValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecBuildEnvValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpecBuildEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (o VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrOutput) ToVirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrOutput() VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrOutput {
	return o
}

func (o VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrOutput) ToVirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrOutput {
	return o
}

func (o VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrOutput) Elem() VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecBuildEnvValueFromSecretKeyRef) VirtualDatabaseSpecBuildEnvValueFromSecretKeyRef {
		return *v
	}).(VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecBuildEnvValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecBuildEnvValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecBuildEnvValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// VDB Source details
type VirtualDatabaseSpecBuildSource struct {
	// DDL based VDB
	Ddl *string `pulumi:"ddl"`
	// List of maven dependencies for the build in GAV format
	Dependencies []string `pulumi:"dependencies"`
	// A VDB defined in GAV format
	Maven *string `pulumi:"maven"`
	// Custom maven repositories that need to be used for the S2I build
	MavenRepositories map[string]string `pulumi:"mavenRepositories"`
	// Open API contract that is exposed by the VDB
	Openapi *string `pulumi:"openapi"`
	// Deployed vdb version. For embedded DDL version this will be implicitly provided when ignored, for maven based vdb the maven version is always
	Version *string `pulumi:"version"`
}

// VirtualDatabaseSpecBuildSourceInput is an input type that accepts VirtualDatabaseSpecBuildSourceArgs and VirtualDatabaseSpecBuildSourceOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecBuildSourceInput` via:
//
//          VirtualDatabaseSpecBuildSourceArgs{...}
type VirtualDatabaseSpecBuildSourceInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecBuildSourceOutput() VirtualDatabaseSpecBuildSourceOutput
	ToVirtualDatabaseSpecBuildSourceOutputWithContext(context.Context) VirtualDatabaseSpecBuildSourceOutput
}

// VDB Source details
type VirtualDatabaseSpecBuildSourceArgs struct {
	// DDL based VDB
	Ddl pulumi.StringPtrInput `pulumi:"ddl"`
	// List of maven dependencies for the build in GAV format
	Dependencies pulumi.StringArrayInput `pulumi:"dependencies"`
	// A VDB defined in GAV format
	Maven pulumi.StringPtrInput `pulumi:"maven"`
	// Custom maven repositories that need to be used for the S2I build
	MavenRepositories pulumi.StringMapInput `pulumi:"mavenRepositories"`
	// Open API contract that is exposed by the VDB
	Openapi pulumi.StringPtrInput `pulumi:"openapi"`
	// Deployed vdb version. For embedded DDL version this will be implicitly provided when ignored, for maven based vdb the maven version is always
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (VirtualDatabaseSpecBuildSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecBuildSource)(nil)).Elem()
}

func (i VirtualDatabaseSpecBuildSourceArgs) ToVirtualDatabaseSpecBuildSourceOutput() VirtualDatabaseSpecBuildSourceOutput {
	return i.ToVirtualDatabaseSpecBuildSourceOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecBuildSourceArgs) ToVirtualDatabaseSpecBuildSourceOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecBuildSourceOutput)
}

func (i VirtualDatabaseSpecBuildSourceArgs) ToVirtualDatabaseSpecBuildSourcePtrOutput() VirtualDatabaseSpecBuildSourcePtrOutput {
	return i.ToVirtualDatabaseSpecBuildSourcePtrOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecBuildSourceArgs) ToVirtualDatabaseSpecBuildSourcePtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecBuildSourceOutput).ToVirtualDatabaseSpecBuildSourcePtrOutputWithContext(ctx)
}

// VirtualDatabaseSpecBuildSourcePtrInput is an input type that accepts VirtualDatabaseSpecBuildSourceArgs, VirtualDatabaseSpecBuildSourcePtr and VirtualDatabaseSpecBuildSourcePtrOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecBuildSourcePtrInput` via:
//
//          VirtualDatabaseSpecBuildSourceArgs{...}
//
//  or:
//
//          nil
type VirtualDatabaseSpecBuildSourcePtrInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecBuildSourcePtrOutput() VirtualDatabaseSpecBuildSourcePtrOutput
	ToVirtualDatabaseSpecBuildSourcePtrOutputWithContext(context.Context) VirtualDatabaseSpecBuildSourcePtrOutput
}

type virtualDatabaseSpecBuildSourcePtrType VirtualDatabaseSpecBuildSourceArgs

func VirtualDatabaseSpecBuildSourcePtr(v *VirtualDatabaseSpecBuildSourceArgs) VirtualDatabaseSpecBuildSourcePtrInput {
	return (*virtualDatabaseSpecBuildSourcePtrType)(v)
}

func (*virtualDatabaseSpecBuildSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpecBuildSource)(nil)).Elem()
}

func (i *virtualDatabaseSpecBuildSourcePtrType) ToVirtualDatabaseSpecBuildSourcePtrOutput() VirtualDatabaseSpecBuildSourcePtrOutput {
	return i.ToVirtualDatabaseSpecBuildSourcePtrOutputWithContext(context.Background())
}

func (i *virtualDatabaseSpecBuildSourcePtrType) ToVirtualDatabaseSpecBuildSourcePtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecBuildSourcePtrOutput)
}

// VDB Source details
type VirtualDatabaseSpecBuildSourceOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecBuildSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecBuildSource)(nil)).Elem()
}

func (o VirtualDatabaseSpecBuildSourceOutput) ToVirtualDatabaseSpecBuildSourceOutput() VirtualDatabaseSpecBuildSourceOutput {
	return o
}

func (o VirtualDatabaseSpecBuildSourceOutput) ToVirtualDatabaseSpecBuildSourceOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildSourceOutput {
	return o
}

func (o VirtualDatabaseSpecBuildSourceOutput) ToVirtualDatabaseSpecBuildSourcePtrOutput() VirtualDatabaseSpecBuildSourcePtrOutput {
	return o.ToVirtualDatabaseSpecBuildSourcePtrOutputWithContext(context.Background())
}

func (o VirtualDatabaseSpecBuildSourceOutput) ToVirtualDatabaseSpecBuildSourcePtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildSourcePtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecBuildSource) *VirtualDatabaseSpecBuildSource {
		return &v
	}).(VirtualDatabaseSpecBuildSourcePtrOutput)
}

// DDL based VDB
func (o VirtualDatabaseSpecBuildSourceOutput) Ddl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecBuildSource) *string { return v.Ddl }).(pulumi.StringPtrOutput)
}

// List of maven dependencies for the build in GAV format
func (o VirtualDatabaseSpecBuildSourceOutput) Dependencies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecBuildSource) []string { return v.Dependencies }).(pulumi.StringArrayOutput)
}

// A VDB defined in GAV format
func (o VirtualDatabaseSpecBuildSourceOutput) Maven() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecBuildSource) *string { return v.Maven }).(pulumi.StringPtrOutput)
}

// Custom maven repositories that need to be used for the S2I build
func (o VirtualDatabaseSpecBuildSourceOutput) MavenRepositories() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecBuildSource) map[string]string { return v.MavenRepositories }).(pulumi.StringMapOutput)
}

// Open API contract that is exposed by the VDB
func (o VirtualDatabaseSpecBuildSourceOutput) Openapi() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecBuildSource) *string { return v.Openapi }).(pulumi.StringPtrOutput)
}

// Deployed vdb version. For embedded DDL version this will be implicitly provided when ignored, for maven based vdb the maven version is always
func (o VirtualDatabaseSpecBuildSourceOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecBuildSource) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type VirtualDatabaseSpecBuildSourcePtrOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecBuildSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpecBuildSource)(nil)).Elem()
}

func (o VirtualDatabaseSpecBuildSourcePtrOutput) ToVirtualDatabaseSpecBuildSourcePtrOutput() VirtualDatabaseSpecBuildSourcePtrOutput {
	return o
}

func (o VirtualDatabaseSpecBuildSourcePtrOutput) ToVirtualDatabaseSpecBuildSourcePtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildSourcePtrOutput {
	return o
}

func (o VirtualDatabaseSpecBuildSourcePtrOutput) Elem() VirtualDatabaseSpecBuildSourceOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecBuildSource) VirtualDatabaseSpecBuildSource { return *v }).(VirtualDatabaseSpecBuildSourceOutput)
}

// DDL based VDB
func (o VirtualDatabaseSpecBuildSourcePtrOutput) Ddl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecBuildSource) *string {
		if v == nil {
			return nil
		}
		return v.Ddl
	}).(pulumi.StringPtrOutput)
}

// List of maven dependencies for the build in GAV format
func (o VirtualDatabaseSpecBuildSourcePtrOutput) Dependencies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecBuildSource) []string {
		if v == nil {
			return nil
		}
		return v.Dependencies
	}).(pulumi.StringArrayOutput)
}

// A VDB defined in GAV format
func (o VirtualDatabaseSpecBuildSourcePtrOutput) Maven() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecBuildSource) *string {
		if v == nil {
			return nil
		}
		return v.Maven
	}).(pulumi.StringPtrOutput)
}

// Custom maven repositories that need to be used for the S2I build
func (o VirtualDatabaseSpecBuildSourcePtrOutput) MavenRepositories() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecBuildSource) map[string]string {
		if v == nil {
			return nil
		}
		return v.MavenRepositories
	}).(pulumi.StringMapOutput)
}

// Open API contract that is exposed by the VDB
func (o VirtualDatabaseSpecBuildSourcePtrOutput) Openapi() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecBuildSource) *string {
		if v == nil {
			return nil
		}
		return v.Openapi
	}).(pulumi.StringPtrOutput)
}

// Deployed vdb version. For embedded DDL version this will be implicitly provided when ignored, for maven based vdb the maven version is always
func (o VirtualDatabaseSpecBuildSourcePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecBuildSource) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Custom maven repositories that need to be used for the S2I build
type VirtualDatabaseSpecBuildSourceMavenRepositories struct {
}

// VirtualDatabaseSpecBuildSourceMavenRepositoriesInput is an input type that accepts VirtualDatabaseSpecBuildSourceMavenRepositoriesArgs and VirtualDatabaseSpecBuildSourceMavenRepositoriesOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecBuildSourceMavenRepositoriesInput` via:
//
//          VirtualDatabaseSpecBuildSourceMavenRepositoriesArgs{...}
type VirtualDatabaseSpecBuildSourceMavenRepositoriesInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecBuildSourceMavenRepositoriesOutput() VirtualDatabaseSpecBuildSourceMavenRepositoriesOutput
	ToVirtualDatabaseSpecBuildSourceMavenRepositoriesOutputWithContext(context.Context) VirtualDatabaseSpecBuildSourceMavenRepositoriesOutput
}

// Custom maven repositories that need to be used for the S2I build
type VirtualDatabaseSpecBuildSourceMavenRepositoriesArgs struct {
}

func (VirtualDatabaseSpecBuildSourceMavenRepositoriesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecBuildSourceMavenRepositories)(nil)).Elem()
}

func (i VirtualDatabaseSpecBuildSourceMavenRepositoriesArgs) ToVirtualDatabaseSpecBuildSourceMavenRepositoriesOutput() VirtualDatabaseSpecBuildSourceMavenRepositoriesOutput {
	return i.ToVirtualDatabaseSpecBuildSourceMavenRepositoriesOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecBuildSourceMavenRepositoriesArgs) ToVirtualDatabaseSpecBuildSourceMavenRepositoriesOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildSourceMavenRepositoriesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecBuildSourceMavenRepositoriesOutput)
}

// Custom maven repositories that need to be used for the S2I build
type VirtualDatabaseSpecBuildSourceMavenRepositoriesOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecBuildSourceMavenRepositoriesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecBuildSourceMavenRepositories)(nil)).Elem()
}

func (o VirtualDatabaseSpecBuildSourceMavenRepositoriesOutput) ToVirtualDatabaseSpecBuildSourceMavenRepositoriesOutput() VirtualDatabaseSpecBuildSourceMavenRepositoriesOutput {
	return o
}

func (o VirtualDatabaseSpecBuildSourceMavenRepositoriesOutput) ToVirtualDatabaseSpecBuildSourceMavenRepositoriesOutputWithContext(ctx context.Context) VirtualDatabaseSpecBuildSourceMavenRepositoriesOutput {
	return o
}

// DataSourceObject - define the datasources that this Virtual Database integrates
type VirtualDatabaseSpecDatasources struct {
	// Name of the Data Source
	Name *string `pulumi:"name"`
	// Properties required for Data Source connection
	Properties []VirtualDatabaseSpecDatasourcesProperties `pulumi:"properties"`
	// Type of Data Source. ex: Oracle, PostgreSQL, MySQL, Salesforce etc.
	Type *string `pulumi:"type"`
}

// VirtualDatabaseSpecDatasourcesInput is an input type that accepts VirtualDatabaseSpecDatasourcesArgs and VirtualDatabaseSpecDatasourcesOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecDatasourcesInput` via:
//
//          VirtualDatabaseSpecDatasourcesArgs{...}
type VirtualDatabaseSpecDatasourcesInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecDatasourcesOutput() VirtualDatabaseSpecDatasourcesOutput
	ToVirtualDatabaseSpecDatasourcesOutputWithContext(context.Context) VirtualDatabaseSpecDatasourcesOutput
}

// DataSourceObject - define the datasources that this Virtual Database integrates
type VirtualDatabaseSpecDatasourcesArgs struct {
	// Name of the Data Source
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Properties required for Data Source connection
	Properties VirtualDatabaseSpecDatasourcesPropertiesArrayInput `pulumi:"properties"`
	// Type of Data Source. ex: Oracle, PostgreSQL, MySQL, Salesforce etc.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (VirtualDatabaseSpecDatasourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecDatasources)(nil)).Elem()
}

func (i VirtualDatabaseSpecDatasourcesArgs) ToVirtualDatabaseSpecDatasourcesOutput() VirtualDatabaseSpecDatasourcesOutput {
	return i.ToVirtualDatabaseSpecDatasourcesOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecDatasourcesArgs) ToVirtualDatabaseSpecDatasourcesOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecDatasourcesOutput)
}

// VirtualDatabaseSpecDatasourcesArrayInput is an input type that accepts VirtualDatabaseSpecDatasourcesArray and VirtualDatabaseSpecDatasourcesArrayOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecDatasourcesArrayInput` via:
//
//          VirtualDatabaseSpecDatasourcesArray{ VirtualDatabaseSpecDatasourcesArgs{...} }
type VirtualDatabaseSpecDatasourcesArrayInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecDatasourcesArrayOutput() VirtualDatabaseSpecDatasourcesArrayOutput
	ToVirtualDatabaseSpecDatasourcesArrayOutputWithContext(context.Context) VirtualDatabaseSpecDatasourcesArrayOutput
}

type VirtualDatabaseSpecDatasourcesArray []VirtualDatabaseSpecDatasourcesInput

func (VirtualDatabaseSpecDatasourcesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualDatabaseSpecDatasources)(nil)).Elem()
}

func (i VirtualDatabaseSpecDatasourcesArray) ToVirtualDatabaseSpecDatasourcesArrayOutput() VirtualDatabaseSpecDatasourcesArrayOutput {
	return i.ToVirtualDatabaseSpecDatasourcesArrayOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecDatasourcesArray) ToVirtualDatabaseSpecDatasourcesArrayOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecDatasourcesArrayOutput)
}

// DataSourceObject - define the datasources that this Virtual Database integrates
type VirtualDatabaseSpecDatasourcesOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecDatasourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecDatasources)(nil)).Elem()
}

func (o VirtualDatabaseSpecDatasourcesOutput) ToVirtualDatabaseSpecDatasourcesOutput() VirtualDatabaseSpecDatasourcesOutput {
	return o
}

func (o VirtualDatabaseSpecDatasourcesOutput) ToVirtualDatabaseSpecDatasourcesOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesOutput {
	return o
}

// Name of the Data Source
func (o VirtualDatabaseSpecDatasourcesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecDatasources) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Properties required for Data Source connection
func (o VirtualDatabaseSpecDatasourcesOutput) Properties() VirtualDatabaseSpecDatasourcesPropertiesArrayOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecDatasources) []VirtualDatabaseSpecDatasourcesProperties { return v.Properties }).(VirtualDatabaseSpecDatasourcesPropertiesArrayOutput)
}

// Type of Data Source. ex: Oracle, PostgreSQL, MySQL, Salesforce etc.
func (o VirtualDatabaseSpecDatasourcesOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecDatasources) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type VirtualDatabaseSpecDatasourcesArrayOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecDatasourcesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualDatabaseSpecDatasources)(nil)).Elem()
}

func (o VirtualDatabaseSpecDatasourcesArrayOutput) ToVirtualDatabaseSpecDatasourcesArrayOutput() VirtualDatabaseSpecDatasourcesArrayOutput {
	return o
}

func (o VirtualDatabaseSpecDatasourcesArrayOutput) ToVirtualDatabaseSpecDatasourcesArrayOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesArrayOutput {
	return o
}

func (o VirtualDatabaseSpecDatasourcesArrayOutput) Index(i pulumi.IntInput) VirtualDatabaseSpecDatasourcesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualDatabaseSpecDatasources {
		return vs[0].([]VirtualDatabaseSpecDatasources)[vs[1].(int)]
	}).(VirtualDatabaseSpecDatasourcesOutput)
}

// EnvVar represents an environment variable present in a Container.
type VirtualDatabaseSpecDatasourcesProperties struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *VirtualDatabaseSpecDatasourcesPropertiesValueFrom `pulumi:"valueFrom"`
}

// VirtualDatabaseSpecDatasourcesPropertiesInput is an input type that accepts VirtualDatabaseSpecDatasourcesPropertiesArgs and VirtualDatabaseSpecDatasourcesPropertiesOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecDatasourcesPropertiesInput` via:
//
//          VirtualDatabaseSpecDatasourcesPropertiesArgs{...}
type VirtualDatabaseSpecDatasourcesPropertiesInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecDatasourcesPropertiesOutput() VirtualDatabaseSpecDatasourcesPropertiesOutput
	ToVirtualDatabaseSpecDatasourcesPropertiesOutputWithContext(context.Context) VirtualDatabaseSpecDatasourcesPropertiesOutput
}

// EnvVar represents an environment variable present in a Container.
type VirtualDatabaseSpecDatasourcesPropertiesArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom VirtualDatabaseSpecDatasourcesPropertiesValueFromPtrInput `pulumi:"valueFrom"`
}

func (VirtualDatabaseSpecDatasourcesPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecDatasourcesProperties)(nil)).Elem()
}

func (i VirtualDatabaseSpecDatasourcesPropertiesArgs) ToVirtualDatabaseSpecDatasourcesPropertiesOutput() VirtualDatabaseSpecDatasourcesPropertiesOutput {
	return i.ToVirtualDatabaseSpecDatasourcesPropertiesOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecDatasourcesPropertiesArgs) ToVirtualDatabaseSpecDatasourcesPropertiesOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecDatasourcesPropertiesOutput)
}

// VirtualDatabaseSpecDatasourcesPropertiesArrayInput is an input type that accepts VirtualDatabaseSpecDatasourcesPropertiesArray and VirtualDatabaseSpecDatasourcesPropertiesArrayOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecDatasourcesPropertiesArrayInput` via:
//
//          VirtualDatabaseSpecDatasourcesPropertiesArray{ VirtualDatabaseSpecDatasourcesPropertiesArgs{...} }
type VirtualDatabaseSpecDatasourcesPropertiesArrayInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecDatasourcesPropertiesArrayOutput() VirtualDatabaseSpecDatasourcesPropertiesArrayOutput
	ToVirtualDatabaseSpecDatasourcesPropertiesArrayOutputWithContext(context.Context) VirtualDatabaseSpecDatasourcesPropertiesArrayOutput
}

type VirtualDatabaseSpecDatasourcesPropertiesArray []VirtualDatabaseSpecDatasourcesPropertiesInput

func (VirtualDatabaseSpecDatasourcesPropertiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualDatabaseSpecDatasourcesProperties)(nil)).Elem()
}

func (i VirtualDatabaseSpecDatasourcesPropertiesArray) ToVirtualDatabaseSpecDatasourcesPropertiesArrayOutput() VirtualDatabaseSpecDatasourcesPropertiesArrayOutput {
	return i.ToVirtualDatabaseSpecDatasourcesPropertiesArrayOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecDatasourcesPropertiesArray) ToVirtualDatabaseSpecDatasourcesPropertiesArrayOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesPropertiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecDatasourcesPropertiesArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type VirtualDatabaseSpecDatasourcesPropertiesOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecDatasourcesPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecDatasourcesProperties)(nil)).Elem()
}

func (o VirtualDatabaseSpecDatasourcesPropertiesOutput) ToVirtualDatabaseSpecDatasourcesPropertiesOutput() VirtualDatabaseSpecDatasourcesPropertiesOutput {
	return o
}

func (o VirtualDatabaseSpecDatasourcesPropertiesOutput) ToVirtualDatabaseSpecDatasourcesPropertiesOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesPropertiesOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o VirtualDatabaseSpecDatasourcesPropertiesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecDatasourcesProperties) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o VirtualDatabaseSpecDatasourcesPropertiesOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecDatasourcesProperties) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o VirtualDatabaseSpecDatasourcesPropertiesOutput) ValueFrom() VirtualDatabaseSpecDatasourcesPropertiesValueFromPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecDatasourcesProperties) *VirtualDatabaseSpecDatasourcesPropertiesValueFrom {
		return v.ValueFrom
	}).(VirtualDatabaseSpecDatasourcesPropertiesValueFromPtrOutput)
}

type VirtualDatabaseSpecDatasourcesPropertiesArrayOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecDatasourcesPropertiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualDatabaseSpecDatasourcesProperties)(nil)).Elem()
}

func (o VirtualDatabaseSpecDatasourcesPropertiesArrayOutput) ToVirtualDatabaseSpecDatasourcesPropertiesArrayOutput() VirtualDatabaseSpecDatasourcesPropertiesArrayOutput {
	return o
}

func (o VirtualDatabaseSpecDatasourcesPropertiesArrayOutput) ToVirtualDatabaseSpecDatasourcesPropertiesArrayOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesPropertiesArrayOutput {
	return o
}

func (o VirtualDatabaseSpecDatasourcesPropertiesArrayOutput) Index(i pulumi.IntInput) VirtualDatabaseSpecDatasourcesPropertiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualDatabaseSpecDatasourcesProperties {
		return vs[0].([]VirtualDatabaseSpecDatasourcesProperties)[vs[1].(int)]
	}).(VirtualDatabaseSpecDatasourcesPropertiesOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type VirtualDatabaseSpecDatasourcesPropertiesValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef *VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// VirtualDatabaseSpecDatasourcesPropertiesValueFromInput is an input type that accepts VirtualDatabaseSpecDatasourcesPropertiesValueFromArgs and VirtualDatabaseSpecDatasourcesPropertiesValueFromOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecDatasourcesPropertiesValueFromInput` via:
//
//          VirtualDatabaseSpecDatasourcesPropertiesValueFromArgs{...}
type VirtualDatabaseSpecDatasourcesPropertiesValueFromInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecDatasourcesPropertiesValueFromOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromOutput
	ToVirtualDatabaseSpecDatasourcesPropertiesValueFromOutputWithContext(context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type VirtualDatabaseSpecDatasourcesPropertiesValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (VirtualDatabaseSpecDatasourcesPropertiesValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecDatasourcesPropertiesValueFrom)(nil)).Elem()
}

func (i VirtualDatabaseSpecDatasourcesPropertiesValueFromArgs) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromOutput {
	return i.ToVirtualDatabaseSpecDatasourcesPropertiesValueFromOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecDatasourcesPropertiesValueFromArgs) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecDatasourcesPropertiesValueFromOutput)
}

func (i VirtualDatabaseSpecDatasourcesPropertiesValueFromArgs) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromPtrOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromPtrOutput {
	return i.ToVirtualDatabaseSpecDatasourcesPropertiesValueFromPtrOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecDatasourcesPropertiesValueFromArgs) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecDatasourcesPropertiesValueFromOutput).ToVirtualDatabaseSpecDatasourcesPropertiesValueFromPtrOutputWithContext(ctx)
}

// VirtualDatabaseSpecDatasourcesPropertiesValueFromPtrInput is an input type that accepts VirtualDatabaseSpecDatasourcesPropertiesValueFromArgs, VirtualDatabaseSpecDatasourcesPropertiesValueFromPtr and VirtualDatabaseSpecDatasourcesPropertiesValueFromPtrOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecDatasourcesPropertiesValueFromPtrInput` via:
//
//          VirtualDatabaseSpecDatasourcesPropertiesValueFromArgs{...}
//
//  or:
//
//          nil
type VirtualDatabaseSpecDatasourcesPropertiesValueFromPtrInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecDatasourcesPropertiesValueFromPtrOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromPtrOutput
	ToVirtualDatabaseSpecDatasourcesPropertiesValueFromPtrOutputWithContext(context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromPtrOutput
}

type virtualDatabaseSpecDatasourcesPropertiesValueFromPtrType VirtualDatabaseSpecDatasourcesPropertiesValueFromArgs

func VirtualDatabaseSpecDatasourcesPropertiesValueFromPtr(v *VirtualDatabaseSpecDatasourcesPropertiesValueFromArgs) VirtualDatabaseSpecDatasourcesPropertiesValueFromPtrInput {
	return (*virtualDatabaseSpecDatasourcesPropertiesValueFromPtrType)(v)
}

func (*virtualDatabaseSpecDatasourcesPropertiesValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpecDatasourcesPropertiesValueFrom)(nil)).Elem()
}

func (i *virtualDatabaseSpecDatasourcesPropertiesValueFromPtrType) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromPtrOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromPtrOutput {
	return i.ToVirtualDatabaseSpecDatasourcesPropertiesValueFromPtrOutputWithContext(context.Background())
}

func (i *virtualDatabaseSpecDatasourcesPropertiesValueFromPtrType) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecDatasourcesPropertiesValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type VirtualDatabaseSpecDatasourcesPropertiesValueFromOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecDatasourcesPropertiesValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecDatasourcesPropertiesValueFrom)(nil)).Elem()
}

func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromOutput) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromOutput {
	return o
}

func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromOutput) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromOutput {
	return o
}

func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromOutput) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromPtrOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromPtrOutput {
	return o.ToVirtualDatabaseSpecDatasourcesPropertiesValueFromPtrOutputWithContext(context.Background())
}

func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromOutput) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecDatasourcesPropertiesValueFrom) *VirtualDatabaseSpecDatasourcesPropertiesValueFrom {
		return &v
	}).(VirtualDatabaseSpecDatasourcesPropertiesValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromOutput) ConfigMapKeyRef() VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecDatasourcesPropertiesValueFrom) *VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromOutput) FieldRef() VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecDatasourcesPropertiesValueFrom) *VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRef {
		return v.FieldRef
	}).(VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromOutput) ResourceFieldRef() VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecDatasourcesPropertiesValueFrom) *VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromOutput) SecretKeyRef() VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecDatasourcesPropertiesValueFrom) *VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrOutput)
}

type VirtualDatabaseSpecDatasourcesPropertiesValueFromPtrOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecDatasourcesPropertiesValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpecDatasourcesPropertiesValueFrom)(nil)).Elem()
}

func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromPtrOutput) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromPtrOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromPtrOutput {
	return o
}

func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromPtrOutput) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromPtrOutput {
	return o
}

func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromPtrOutput) Elem() VirtualDatabaseSpecDatasourcesPropertiesValueFromOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecDatasourcesPropertiesValueFrom) VirtualDatabaseSpecDatasourcesPropertiesValueFrom {
		return *v
	}).(VirtualDatabaseSpecDatasourcesPropertiesValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromPtrOutput) ConfigMapKeyRef() VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecDatasourcesPropertiesValueFrom) *VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromPtrOutput) FieldRef() VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecDatasourcesPropertiesValueFrom) *VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromPtrOutput) ResourceFieldRef() VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecDatasourcesPropertiesValueFrom) *VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromPtrOutput) SecretKeyRef() VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecDatasourcesPropertiesValueFrom) *VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefInput is an input type that accepts VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefArgs and VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefInput` via:
//
//          VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefArgs{...}
type VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefOutput
	ToVirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefOutputWithContext(context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefArgs) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefOutput {
	return i.ToVirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefArgs) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefOutput)
}

func (i VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefArgs) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrOutput {
	return i.ToVirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefArgs) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefOutput).ToVirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrInput is an input type that accepts VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefArgs, VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtr and VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrInput` via:
//
//          VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrOutput
	ToVirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrOutput
}

type virtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrType VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefArgs

func VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtr(v *VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefArgs) VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrInput {
	return (*virtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrType)(v)
}

func (*virtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *virtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrType) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrOutput {
	return i.ToVirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *virtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrType) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefOutput) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefOutput {
	return o
}

func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefOutput) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefOutput {
	return o
}

func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefOutput) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrOutput {
	return o.ToVirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefOutput) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRef) *VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRef {
		return &v
	}).(VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrOutput) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrOutput) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrOutput) Elem() VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRef) VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRef {
		return *v
	}).(VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefInput is an input type that accepts VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefArgs and VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefInput` via:
//
//          VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefArgs{...}
type VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefOutput
	ToVirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefOutputWithContext(context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRef)(nil)).Elem()
}

func (i VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefArgs) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefOutput {
	return i.ToVirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefArgs) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefOutput)
}

func (i VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefArgs) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrOutput {
	return i.ToVirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefArgs) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefOutput).ToVirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrOutputWithContext(ctx)
}

// VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrInput is an input type that accepts VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefArgs, VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtr and VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrInput` via:
//
//          VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrOutput
	ToVirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrOutputWithContext(context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrOutput
}

type virtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrType VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefArgs

func VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtr(v *VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefArgs) VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrInput {
	return (*virtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrType)(v)
}

func (*virtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRef)(nil)).Elem()
}

func (i *virtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrType) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrOutput {
	return i.ToVirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *virtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrType) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRef)(nil)).Elem()
}

func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefOutput) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefOutput {
	return o
}

func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefOutput) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefOutput {
	return o
}

func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefOutput) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrOutput {
	return o.ToVirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefOutput) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRef) *VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRef {
		return &v
	}).(VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRef)(nil)).Elem()
}

func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrOutput) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrOutput {
	return o
}

func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrOutput) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrOutput {
	return o
}

func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrOutput) Elem() VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRef) VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRef {
		return *v
	}).(VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisor `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefInput is an input type that accepts VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefArgs and VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefInput` via:
//
//          VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefArgs{...}
type VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefOutput
	ToVirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefOutputWithContext(context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRef)(nil)).Elem()
}

func (i VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefArgs) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefOutput {
	return i.ToVirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefArgs) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefOutput)
}

func (i VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefArgs) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrOutput {
	return i.ToVirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefArgs) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefOutput).ToVirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrInput is an input type that accepts VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefArgs, VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtr and VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrInput` via:
//
//          VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrOutput
	ToVirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrOutputWithContext(context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrOutput
}

type virtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrType VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefArgs

func VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtr(v *VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefArgs) VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrInput {
	return (*virtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrType)(v)
}

func (*virtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRef)(nil)).Elem()
}

func (i *virtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrType) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrOutput {
	return i.ToVirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *virtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrType) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRef)(nil)).Elem()
}

func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefOutput) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefOutput {
	return o
}

func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefOutput) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefOutput {
	return o
}

func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefOutput) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrOutput {
	return o.ToVirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefOutput) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRef) *VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRef {
		return &v
	}).(VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRef) *string {
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefOutput) Divisor() VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRef) *VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisor {
		return v.Divisor
	}).(VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRef)(nil)).Elem()
}

func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrOutput) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrOutput {
	return o
}

func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrOutput) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrOutput {
	return o
}

func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrOutput) Elem() VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRef) VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRef {
		return *v
	}).(VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrOutput) Divisor() VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRef) *VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisor {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

type VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisor struct {
}

// VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorInput is an input type that accepts VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorArgs and VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorInput` via:
//
//          VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorArgs{...}
type VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorOutput
	ToVirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorOutputWithContext(context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorOutput
}

type VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorArgs struct {
}

func (VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorArgs) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorOutput {
	return i.ToVirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorArgs) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorOutput)
}

func (i VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorArgs) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToVirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorArgs) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorOutput).ToVirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx)
}

// VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrInput is an input type that accepts VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorArgs, VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtr and VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrInput` via:
//
//          VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorArgs{...}
//
//  or:
//
//          nil
type VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrOutput
	ToVirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrOutput
}

type virtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrType VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorArgs

func VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtr(v *VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorArgs) VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrInput {
	return (*virtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrType)(v)
}

func (*virtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i *virtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrType) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToVirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i *virtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrType) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrOutput)
}

type VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorOutput) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorOutput) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorOutput) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrOutput {
	return o.ToVirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorOutput) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisor) *VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisor {
		return &v
	}).(VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrOutput)
}

type VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrOutput) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrOutput) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrOutput) Elem() VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisor) VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisor {
		return *v
	}).(VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorOutput)
}

// Selects a key of a secret in the pod's namespace
type VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefInput is an input type that accepts VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefArgs and VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefInput` via:
//
//          VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefArgs{...}
type VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefOutput
	ToVirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefOutputWithContext(context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRef)(nil)).Elem()
}

func (i VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefArgs) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefOutput {
	return i.ToVirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefArgs) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefOutput)
}

func (i VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefArgs) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrOutput {
	return i.ToVirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefArgs) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefOutput).ToVirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrInput is an input type that accepts VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefArgs, VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtr and VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrInput` via:
//
//          VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrOutput
	ToVirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrOutputWithContext(context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrOutput
}

type virtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrType VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefArgs

func VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtr(v *VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefArgs) VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrInput {
	return (*virtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrType)(v)
}

func (*virtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRef)(nil)).Elem()
}

func (i *virtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrType) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrOutput {
	return i.ToVirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *virtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrType) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRef)(nil)).Elem()
}

func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefOutput) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefOutput {
	return o
}

func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefOutput) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefOutput {
	return o
}

func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefOutput) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrOutput {
	return o.ToVirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefOutput) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRef) *VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRef {
		return &v
	}).(VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRef)(nil)).Elem()
}

func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrOutput) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrOutput() VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrOutput {
	return o
}

func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrOutput) ToVirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrOutput {
	return o
}

func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrOutput) Elem() VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRef) VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRef {
		return *v
	}).(VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// EnvVar represents an environment variable present in a Container.
type VirtualDatabaseSpecEnv struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value *string `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom *VirtualDatabaseSpecEnvValueFrom `pulumi:"valueFrom"`
}

// VirtualDatabaseSpecEnvInput is an input type that accepts VirtualDatabaseSpecEnvArgs and VirtualDatabaseSpecEnvOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecEnvInput` via:
//
//          VirtualDatabaseSpecEnvArgs{...}
type VirtualDatabaseSpecEnvInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecEnvOutput() VirtualDatabaseSpecEnvOutput
	ToVirtualDatabaseSpecEnvOutputWithContext(context.Context) VirtualDatabaseSpecEnvOutput
}

// EnvVar represents an environment variable present in a Container.
type VirtualDatabaseSpecEnvArgs struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name pulumi.StringInput `pulumi:"name"`
	// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	ValueFrom VirtualDatabaseSpecEnvValueFromPtrInput `pulumi:"valueFrom"`
}

func (VirtualDatabaseSpecEnvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecEnv)(nil)).Elem()
}

func (i VirtualDatabaseSpecEnvArgs) ToVirtualDatabaseSpecEnvOutput() VirtualDatabaseSpecEnvOutput {
	return i.ToVirtualDatabaseSpecEnvOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecEnvArgs) ToVirtualDatabaseSpecEnvOutputWithContext(ctx context.Context) VirtualDatabaseSpecEnvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecEnvOutput)
}

// VirtualDatabaseSpecEnvArrayInput is an input type that accepts VirtualDatabaseSpecEnvArray and VirtualDatabaseSpecEnvArrayOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecEnvArrayInput` via:
//
//          VirtualDatabaseSpecEnvArray{ VirtualDatabaseSpecEnvArgs{...} }
type VirtualDatabaseSpecEnvArrayInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecEnvArrayOutput() VirtualDatabaseSpecEnvArrayOutput
	ToVirtualDatabaseSpecEnvArrayOutputWithContext(context.Context) VirtualDatabaseSpecEnvArrayOutput
}

type VirtualDatabaseSpecEnvArray []VirtualDatabaseSpecEnvInput

func (VirtualDatabaseSpecEnvArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualDatabaseSpecEnv)(nil)).Elem()
}

func (i VirtualDatabaseSpecEnvArray) ToVirtualDatabaseSpecEnvArrayOutput() VirtualDatabaseSpecEnvArrayOutput {
	return i.ToVirtualDatabaseSpecEnvArrayOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecEnvArray) ToVirtualDatabaseSpecEnvArrayOutputWithContext(ctx context.Context) VirtualDatabaseSpecEnvArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecEnvArrayOutput)
}

// EnvVar represents an environment variable present in a Container.
type VirtualDatabaseSpecEnvOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecEnvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecEnv)(nil)).Elem()
}

func (o VirtualDatabaseSpecEnvOutput) ToVirtualDatabaseSpecEnvOutput() VirtualDatabaseSpecEnvOutput {
	return o
}

func (o VirtualDatabaseSpecEnvOutput) ToVirtualDatabaseSpecEnvOutputWithContext(ctx context.Context) VirtualDatabaseSpecEnvOutput {
	return o
}

// Name of the environment variable. Must be a C_IDENTIFIER.
func (o VirtualDatabaseSpecEnvOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecEnv) string { return v.Name }).(pulumi.StringOutput)
}

// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
func (o VirtualDatabaseSpecEnvOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecEnv) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
func (o VirtualDatabaseSpecEnvOutput) ValueFrom() VirtualDatabaseSpecEnvValueFromPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecEnv) *VirtualDatabaseSpecEnvValueFrom { return v.ValueFrom }).(VirtualDatabaseSpecEnvValueFromPtrOutput)
}

type VirtualDatabaseSpecEnvArrayOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecEnvArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualDatabaseSpecEnv)(nil)).Elem()
}

func (o VirtualDatabaseSpecEnvArrayOutput) ToVirtualDatabaseSpecEnvArrayOutput() VirtualDatabaseSpecEnvArrayOutput {
	return o
}

func (o VirtualDatabaseSpecEnvArrayOutput) ToVirtualDatabaseSpecEnvArrayOutputWithContext(ctx context.Context) VirtualDatabaseSpecEnvArrayOutput {
	return o
}

func (o VirtualDatabaseSpecEnvArrayOutput) Index(i pulumi.IntInput) VirtualDatabaseSpecEnvOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualDatabaseSpecEnv {
		return vs[0].([]VirtualDatabaseSpecEnv)[vs[1].(int)]
	}).(VirtualDatabaseSpecEnvOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type VirtualDatabaseSpecEnvValueFrom struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *VirtualDatabaseSpecEnvValueFromConfigMapKeyRef `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef *VirtualDatabaseSpecEnvValueFromFieldRef `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef *VirtualDatabaseSpecEnvValueFromResourceFieldRef `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *VirtualDatabaseSpecEnvValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// VirtualDatabaseSpecEnvValueFromInput is an input type that accepts VirtualDatabaseSpecEnvValueFromArgs and VirtualDatabaseSpecEnvValueFromOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecEnvValueFromInput` via:
//
//          VirtualDatabaseSpecEnvValueFromArgs{...}
type VirtualDatabaseSpecEnvValueFromInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecEnvValueFromOutput() VirtualDatabaseSpecEnvValueFromOutput
	ToVirtualDatabaseSpecEnvValueFromOutputWithContext(context.Context) VirtualDatabaseSpecEnvValueFromOutput
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type VirtualDatabaseSpecEnvValueFromArgs struct {
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef VirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrInput `pulumi:"configMapKeyRef"`
	// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
	FieldRef VirtualDatabaseSpecEnvValueFromFieldRefPtrInput `pulumi:"fieldRef"`
	// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	ResourceFieldRef VirtualDatabaseSpecEnvValueFromResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef VirtualDatabaseSpecEnvValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (VirtualDatabaseSpecEnvValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecEnvValueFrom)(nil)).Elem()
}

func (i VirtualDatabaseSpecEnvValueFromArgs) ToVirtualDatabaseSpecEnvValueFromOutput() VirtualDatabaseSpecEnvValueFromOutput {
	return i.ToVirtualDatabaseSpecEnvValueFromOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecEnvValueFromArgs) ToVirtualDatabaseSpecEnvValueFromOutputWithContext(ctx context.Context) VirtualDatabaseSpecEnvValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecEnvValueFromOutput)
}

func (i VirtualDatabaseSpecEnvValueFromArgs) ToVirtualDatabaseSpecEnvValueFromPtrOutput() VirtualDatabaseSpecEnvValueFromPtrOutput {
	return i.ToVirtualDatabaseSpecEnvValueFromPtrOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecEnvValueFromArgs) ToVirtualDatabaseSpecEnvValueFromPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecEnvValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecEnvValueFromOutput).ToVirtualDatabaseSpecEnvValueFromPtrOutputWithContext(ctx)
}

// VirtualDatabaseSpecEnvValueFromPtrInput is an input type that accepts VirtualDatabaseSpecEnvValueFromArgs, VirtualDatabaseSpecEnvValueFromPtr and VirtualDatabaseSpecEnvValueFromPtrOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecEnvValueFromPtrInput` via:
//
//          VirtualDatabaseSpecEnvValueFromArgs{...}
//
//  or:
//
//          nil
type VirtualDatabaseSpecEnvValueFromPtrInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecEnvValueFromPtrOutput() VirtualDatabaseSpecEnvValueFromPtrOutput
	ToVirtualDatabaseSpecEnvValueFromPtrOutputWithContext(context.Context) VirtualDatabaseSpecEnvValueFromPtrOutput
}

type virtualDatabaseSpecEnvValueFromPtrType VirtualDatabaseSpecEnvValueFromArgs

func VirtualDatabaseSpecEnvValueFromPtr(v *VirtualDatabaseSpecEnvValueFromArgs) VirtualDatabaseSpecEnvValueFromPtrInput {
	return (*virtualDatabaseSpecEnvValueFromPtrType)(v)
}

func (*virtualDatabaseSpecEnvValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpecEnvValueFrom)(nil)).Elem()
}

func (i *virtualDatabaseSpecEnvValueFromPtrType) ToVirtualDatabaseSpecEnvValueFromPtrOutput() VirtualDatabaseSpecEnvValueFromPtrOutput {
	return i.ToVirtualDatabaseSpecEnvValueFromPtrOutputWithContext(context.Background())
}

func (i *virtualDatabaseSpecEnvValueFromPtrType) ToVirtualDatabaseSpecEnvValueFromPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecEnvValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecEnvValueFromPtrOutput)
}

// Source for the environment variable's value. Cannot be used if value is not empty.
type VirtualDatabaseSpecEnvValueFromOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecEnvValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecEnvValueFrom)(nil)).Elem()
}

func (o VirtualDatabaseSpecEnvValueFromOutput) ToVirtualDatabaseSpecEnvValueFromOutput() VirtualDatabaseSpecEnvValueFromOutput {
	return o
}

func (o VirtualDatabaseSpecEnvValueFromOutput) ToVirtualDatabaseSpecEnvValueFromOutputWithContext(ctx context.Context) VirtualDatabaseSpecEnvValueFromOutput {
	return o
}

func (o VirtualDatabaseSpecEnvValueFromOutput) ToVirtualDatabaseSpecEnvValueFromPtrOutput() VirtualDatabaseSpecEnvValueFromPtrOutput {
	return o.ToVirtualDatabaseSpecEnvValueFromPtrOutputWithContext(context.Background())
}

func (o VirtualDatabaseSpecEnvValueFromOutput) ToVirtualDatabaseSpecEnvValueFromPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecEnvValueFromPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecEnvValueFrom) *VirtualDatabaseSpecEnvValueFrom {
		return &v
	}).(VirtualDatabaseSpecEnvValueFromPtrOutput)
}

// Selects a key of a ConfigMap.
func (o VirtualDatabaseSpecEnvValueFromOutput) ConfigMapKeyRef() VirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecEnvValueFrom) *VirtualDatabaseSpecEnvValueFromConfigMapKeyRef {
		return v.ConfigMapKeyRef
	}).(VirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o VirtualDatabaseSpecEnvValueFromOutput) FieldRef() VirtualDatabaseSpecEnvValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecEnvValueFrom) *VirtualDatabaseSpecEnvValueFromFieldRef { return v.FieldRef }).(VirtualDatabaseSpecEnvValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o VirtualDatabaseSpecEnvValueFromOutput) ResourceFieldRef() VirtualDatabaseSpecEnvValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecEnvValueFrom) *VirtualDatabaseSpecEnvValueFromResourceFieldRef {
		return v.ResourceFieldRef
	}).(VirtualDatabaseSpecEnvValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o VirtualDatabaseSpecEnvValueFromOutput) SecretKeyRef() VirtualDatabaseSpecEnvValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecEnvValueFrom) *VirtualDatabaseSpecEnvValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(VirtualDatabaseSpecEnvValueFromSecretKeyRefPtrOutput)
}

type VirtualDatabaseSpecEnvValueFromPtrOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecEnvValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpecEnvValueFrom)(nil)).Elem()
}

func (o VirtualDatabaseSpecEnvValueFromPtrOutput) ToVirtualDatabaseSpecEnvValueFromPtrOutput() VirtualDatabaseSpecEnvValueFromPtrOutput {
	return o
}

func (o VirtualDatabaseSpecEnvValueFromPtrOutput) ToVirtualDatabaseSpecEnvValueFromPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecEnvValueFromPtrOutput {
	return o
}

func (o VirtualDatabaseSpecEnvValueFromPtrOutput) Elem() VirtualDatabaseSpecEnvValueFromOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecEnvValueFrom) VirtualDatabaseSpecEnvValueFrom { return *v }).(VirtualDatabaseSpecEnvValueFromOutput)
}

// Selects a key of a ConfigMap.
func (o VirtualDatabaseSpecEnvValueFromPtrOutput) ConfigMapKeyRef() VirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecEnvValueFrom) *VirtualDatabaseSpecEnvValueFromConfigMapKeyRef {
		if v == nil {
			return nil
		}
		return v.ConfigMapKeyRef
	}).(VirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
func (o VirtualDatabaseSpecEnvValueFromPtrOutput) FieldRef() VirtualDatabaseSpecEnvValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecEnvValueFrom) *VirtualDatabaseSpecEnvValueFromFieldRef {
		if v == nil {
			return nil
		}
		return v.FieldRef
	}).(VirtualDatabaseSpecEnvValueFromFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
func (o VirtualDatabaseSpecEnvValueFromPtrOutput) ResourceFieldRef() VirtualDatabaseSpecEnvValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecEnvValueFrom) *VirtualDatabaseSpecEnvValueFromResourceFieldRef {
		if v == nil {
			return nil
		}
		return v.ResourceFieldRef
	}).(VirtualDatabaseSpecEnvValueFromResourceFieldRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
func (o VirtualDatabaseSpecEnvValueFromPtrOutput) SecretKeyRef() VirtualDatabaseSpecEnvValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecEnvValueFrom) *VirtualDatabaseSpecEnvValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(VirtualDatabaseSpecEnvValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type VirtualDatabaseSpecEnvValueFromConfigMapKeyRef struct {
	// The key to select.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// VirtualDatabaseSpecEnvValueFromConfigMapKeyRefInput is an input type that accepts VirtualDatabaseSpecEnvValueFromConfigMapKeyRefArgs and VirtualDatabaseSpecEnvValueFromConfigMapKeyRefOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecEnvValueFromConfigMapKeyRefInput` via:
//
//          VirtualDatabaseSpecEnvValueFromConfigMapKeyRefArgs{...}
type VirtualDatabaseSpecEnvValueFromConfigMapKeyRefInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecEnvValueFromConfigMapKeyRefOutput() VirtualDatabaseSpecEnvValueFromConfigMapKeyRefOutput
	ToVirtualDatabaseSpecEnvValueFromConfigMapKeyRefOutputWithContext(context.Context) VirtualDatabaseSpecEnvValueFromConfigMapKeyRefOutput
}

// Selects a key of a ConfigMap.
type VirtualDatabaseSpecEnvValueFromConfigMapKeyRefArgs struct {
	// The key to select.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (VirtualDatabaseSpecEnvValueFromConfigMapKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i VirtualDatabaseSpecEnvValueFromConfigMapKeyRefArgs) ToVirtualDatabaseSpecEnvValueFromConfigMapKeyRefOutput() VirtualDatabaseSpecEnvValueFromConfigMapKeyRefOutput {
	return i.ToVirtualDatabaseSpecEnvValueFromConfigMapKeyRefOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecEnvValueFromConfigMapKeyRefArgs) ToVirtualDatabaseSpecEnvValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) VirtualDatabaseSpecEnvValueFromConfigMapKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecEnvValueFromConfigMapKeyRefOutput)
}

func (i VirtualDatabaseSpecEnvValueFromConfigMapKeyRefArgs) ToVirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrOutput() VirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return i.ToVirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecEnvValueFromConfigMapKeyRefArgs) ToVirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecEnvValueFromConfigMapKeyRefOutput).ToVirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx)
}

// VirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrInput is an input type that accepts VirtualDatabaseSpecEnvValueFromConfigMapKeyRefArgs, VirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtr and VirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrInput` via:
//
//          VirtualDatabaseSpecEnvValueFromConfigMapKeyRefArgs{...}
//
//  or:
//
//          nil
type VirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrOutput() VirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrOutput
	ToVirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Context) VirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrOutput
}

type virtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrType VirtualDatabaseSpecEnvValueFromConfigMapKeyRefArgs

func VirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtr(v *VirtualDatabaseSpecEnvValueFromConfigMapKeyRefArgs) VirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrInput {
	return (*virtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrType)(v)
}

func (*virtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpecEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (i *virtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrType) ToVirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrOutput() VirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return i.ToVirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (i *virtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrType) ToVirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrOutput)
}

// Selects a key of a ConfigMap.
type VirtualDatabaseSpecEnvValueFromConfigMapKeyRefOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecEnvValueFromConfigMapKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o VirtualDatabaseSpecEnvValueFromConfigMapKeyRefOutput) ToVirtualDatabaseSpecEnvValueFromConfigMapKeyRefOutput() VirtualDatabaseSpecEnvValueFromConfigMapKeyRefOutput {
	return o
}

func (o VirtualDatabaseSpecEnvValueFromConfigMapKeyRefOutput) ToVirtualDatabaseSpecEnvValueFromConfigMapKeyRefOutputWithContext(ctx context.Context) VirtualDatabaseSpecEnvValueFromConfigMapKeyRefOutput {
	return o
}

func (o VirtualDatabaseSpecEnvValueFromConfigMapKeyRefOutput) ToVirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrOutput() VirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ToVirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(context.Background())
}

func (o VirtualDatabaseSpecEnvValueFromConfigMapKeyRefOutput) ToVirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecEnvValueFromConfigMapKeyRef) *VirtualDatabaseSpecEnvValueFromConfigMapKeyRef {
		return &v
	}).(VirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrOutput)
}

// The key to select.
func (o VirtualDatabaseSpecEnvValueFromConfigMapKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecEnvValueFromConfigMapKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o VirtualDatabaseSpecEnvValueFromConfigMapKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecEnvValueFromConfigMapKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o VirtualDatabaseSpecEnvValueFromConfigMapKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecEnvValueFromConfigMapKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type VirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpecEnvValueFromConfigMapKeyRef)(nil)).Elem()
}

func (o VirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrOutput) ToVirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrOutput() VirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o VirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrOutput) ToVirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrOutput {
	return o
}

func (o VirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrOutput) Elem() VirtualDatabaseSpecEnvValueFromConfigMapKeyRefOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecEnvValueFromConfigMapKeyRef) VirtualDatabaseSpecEnvValueFromConfigMapKeyRef {
		return *v
	}).(VirtualDatabaseSpecEnvValueFromConfigMapKeyRefOutput)
}

// The key to select.
func (o VirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecEnvValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o VirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecEnvValueFromConfigMapKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o VirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecEnvValueFromConfigMapKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type VirtualDatabaseSpecEnvValueFromFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `pulumi:"fieldPath"`
}

// VirtualDatabaseSpecEnvValueFromFieldRefInput is an input type that accepts VirtualDatabaseSpecEnvValueFromFieldRefArgs and VirtualDatabaseSpecEnvValueFromFieldRefOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecEnvValueFromFieldRefInput` via:
//
//          VirtualDatabaseSpecEnvValueFromFieldRefArgs{...}
type VirtualDatabaseSpecEnvValueFromFieldRefInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecEnvValueFromFieldRefOutput() VirtualDatabaseSpecEnvValueFromFieldRefOutput
	ToVirtualDatabaseSpecEnvValueFromFieldRefOutputWithContext(context.Context) VirtualDatabaseSpecEnvValueFromFieldRefOutput
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type VirtualDatabaseSpecEnvValueFromFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringInput `pulumi:"fieldPath"`
}

func (VirtualDatabaseSpecEnvValueFromFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecEnvValueFromFieldRef)(nil)).Elem()
}

func (i VirtualDatabaseSpecEnvValueFromFieldRefArgs) ToVirtualDatabaseSpecEnvValueFromFieldRefOutput() VirtualDatabaseSpecEnvValueFromFieldRefOutput {
	return i.ToVirtualDatabaseSpecEnvValueFromFieldRefOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecEnvValueFromFieldRefArgs) ToVirtualDatabaseSpecEnvValueFromFieldRefOutputWithContext(ctx context.Context) VirtualDatabaseSpecEnvValueFromFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecEnvValueFromFieldRefOutput)
}

func (i VirtualDatabaseSpecEnvValueFromFieldRefArgs) ToVirtualDatabaseSpecEnvValueFromFieldRefPtrOutput() VirtualDatabaseSpecEnvValueFromFieldRefPtrOutput {
	return i.ToVirtualDatabaseSpecEnvValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecEnvValueFromFieldRefArgs) ToVirtualDatabaseSpecEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecEnvValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecEnvValueFromFieldRefOutput).ToVirtualDatabaseSpecEnvValueFromFieldRefPtrOutputWithContext(ctx)
}

// VirtualDatabaseSpecEnvValueFromFieldRefPtrInput is an input type that accepts VirtualDatabaseSpecEnvValueFromFieldRefArgs, VirtualDatabaseSpecEnvValueFromFieldRefPtr and VirtualDatabaseSpecEnvValueFromFieldRefPtrOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecEnvValueFromFieldRefPtrInput` via:
//
//          VirtualDatabaseSpecEnvValueFromFieldRefArgs{...}
//
//  or:
//
//          nil
type VirtualDatabaseSpecEnvValueFromFieldRefPtrInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecEnvValueFromFieldRefPtrOutput() VirtualDatabaseSpecEnvValueFromFieldRefPtrOutput
	ToVirtualDatabaseSpecEnvValueFromFieldRefPtrOutputWithContext(context.Context) VirtualDatabaseSpecEnvValueFromFieldRefPtrOutput
}

type virtualDatabaseSpecEnvValueFromFieldRefPtrType VirtualDatabaseSpecEnvValueFromFieldRefArgs

func VirtualDatabaseSpecEnvValueFromFieldRefPtr(v *VirtualDatabaseSpecEnvValueFromFieldRefArgs) VirtualDatabaseSpecEnvValueFromFieldRefPtrInput {
	return (*virtualDatabaseSpecEnvValueFromFieldRefPtrType)(v)
}

func (*virtualDatabaseSpecEnvValueFromFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpecEnvValueFromFieldRef)(nil)).Elem()
}

func (i *virtualDatabaseSpecEnvValueFromFieldRefPtrType) ToVirtualDatabaseSpecEnvValueFromFieldRefPtrOutput() VirtualDatabaseSpecEnvValueFromFieldRefPtrOutput {
	return i.ToVirtualDatabaseSpecEnvValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (i *virtualDatabaseSpecEnvValueFromFieldRefPtrType) ToVirtualDatabaseSpecEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecEnvValueFromFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecEnvValueFromFieldRefPtrOutput)
}

// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
type VirtualDatabaseSpecEnvValueFromFieldRefOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecEnvValueFromFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecEnvValueFromFieldRef)(nil)).Elem()
}

func (o VirtualDatabaseSpecEnvValueFromFieldRefOutput) ToVirtualDatabaseSpecEnvValueFromFieldRefOutput() VirtualDatabaseSpecEnvValueFromFieldRefOutput {
	return o
}

func (o VirtualDatabaseSpecEnvValueFromFieldRefOutput) ToVirtualDatabaseSpecEnvValueFromFieldRefOutputWithContext(ctx context.Context) VirtualDatabaseSpecEnvValueFromFieldRefOutput {
	return o
}

func (o VirtualDatabaseSpecEnvValueFromFieldRefOutput) ToVirtualDatabaseSpecEnvValueFromFieldRefPtrOutput() VirtualDatabaseSpecEnvValueFromFieldRefPtrOutput {
	return o.ToVirtualDatabaseSpecEnvValueFromFieldRefPtrOutputWithContext(context.Background())
}

func (o VirtualDatabaseSpecEnvValueFromFieldRefOutput) ToVirtualDatabaseSpecEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecEnvValueFromFieldRefPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecEnvValueFromFieldRef) *VirtualDatabaseSpecEnvValueFromFieldRef {
		return &v
	}).(VirtualDatabaseSpecEnvValueFromFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o VirtualDatabaseSpecEnvValueFromFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecEnvValueFromFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o VirtualDatabaseSpecEnvValueFromFieldRefOutput) FieldPath() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecEnvValueFromFieldRef) string { return v.FieldPath }).(pulumi.StringOutput)
}

type VirtualDatabaseSpecEnvValueFromFieldRefPtrOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecEnvValueFromFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpecEnvValueFromFieldRef)(nil)).Elem()
}

func (o VirtualDatabaseSpecEnvValueFromFieldRefPtrOutput) ToVirtualDatabaseSpecEnvValueFromFieldRefPtrOutput() VirtualDatabaseSpecEnvValueFromFieldRefPtrOutput {
	return o
}

func (o VirtualDatabaseSpecEnvValueFromFieldRefPtrOutput) ToVirtualDatabaseSpecEnvValueFromFieldRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecEnvValueFromFieldRefPtrOutput {
	return o
}

func (o VirtualDatabaseSpecEnvValueFromFieldRefPtrOutput) Elem() VirtualDatabaseSpecEnvValueFromFieldRefOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecEnvValueFromFieldRef) VirtualDatabaseSpecEnvValueFromFieldRef { return *v }).(VirtualDatabaseSpecEnvValueFromFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o VirtualDatabaseSpecEnvValueFromFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecEnvValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o VirtualDatabaseSpecEnvValueFromFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecEnvValueFromFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type VirtualDatabaseSpecEnvValueFromResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor *VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisor `pulumi:"divisor"`
	// Required: resource to select
	Resource string `pulumi:"resource"`
}

// VirtualDatabaseSpecEnvValueFromResourceFieldRefInput is an input type that accepts VirtualDatabaseSpecEnvValueFromResourceFieldRefArgs and VirtualDatabaseSpecEnvValueFromResourceFieldRefOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecEnvValueFromResourceFieldRefInput` via:
//
//          VirtualDatabaseSpecEnvValueFromResourceFieldRefArgs{...}
type VirtualDatabaseSpecEnvValueFromResourceFieldRefInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecEnvValueFromResourceFieldRefOutput() VirtualDatabaseSpecEnvValueFromResourceFieldRefOutput
	ToVirtualDatabaseSpecEnvValueFromResourceFieldRefOutputWithContext(context.Context) VirtualDatabaseSpecEnvValueFromResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type VirtualDatabaseSpecEnvValueFromResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrInput `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringInput `pulumi:"resource"`
}

func (VirtualDatabaseSpecEnvValueFromResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (i VirtualDatabaseSpecEnvValueFromResourceFieldRefArgs) ToVirtualDatabaseSpecEnvValueFromResourceFieldRefOutput() VirtualDatabaseSpecEnvValueFromResourceFieldRefOutput {
	return i.ToVirtualDatabaseSpecEnvValueFromResourceFieldRefOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecEnvValueFromResourceFieldRefArgs) ToVirtualDatabaseSpecEnvValueFromResourceFieldRefOutputWithContext(ctx context.Context) VirtualDatabaseSpecEnvValueFromResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecEnvValueFromResourceFieldRefOutput)
}

func (i VirtualDatabaseSpecEnvValueFromResourceFieldRefArgs) ToVirtualDatabaseSpecEnvValueFromResourceFieldRefPtrOutput() VirtualDatabaseSpecEnvValueFromResourceFieldRefPtrOutput {
	return i.ToVirtualDatabaseSpecEnvValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecEnvValueFromResourceFieldRefArgs) ToVirtualDatabaseSpecEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecEnvValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecEnvValueFromResourceFieldRefOutput).ToVirtualDatabaseSpecEnvValueFromResourceFieldRefPtrOutputWithContext(ctx)
}

// VirtualDatabaseSpecEnvValueFromResourceFieldRefPtrInput is an input type that accepts VirtualDatabaseSpecEnvValueFromResourceFieldRefArgs, VirtualDatabaseSpecEnvValueFromResourceFieldRefPtr and VirtualDatabaseSpecEnvValueFromResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecEnvValueFromResourceFieldRefPtrInput` via:
//
//          VirtualDatabaseSpecEnvValueFromResourceFieldRefArgs{...}
//
//  or:
//
//          nil
type VirtualDatabaseSpecEnvValueFromResourceFieldRefPtrInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecEnvValueFromResourceFieldRefPtrOutput() VirtualDatabaseSpecEnvValueFromResourceFieldRefPtrOutput
	ToVirtualDatabaseSpecEnvValueFromResourceFieldRefPtrOutputWithContext(context.Context) VirtualDatabaseSpecEnvValueFromResourceFieldRefPtrOutput
}

type virtualDatabaseSpecEnvValueFromResourceFieldRefPtrType VirtualDatabaseSpecEnvValueFromResourceFieldRefArgs

func VirtualDatabaseSpecEnvValueFromResourceFieldRefPtr(v *VirtualDatabaseSpecEnvValueFromResourceFieldRefArgs) VirtualDatabaseSpecEnvValueFromResourceFieldRefPtrInput {
	return (*virtualDatabaseSpecEnvValueFromResourceFieldRefPtrType)(v)
}

func (*virtualDatabaseSpecEnvValueFromResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpecEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (i *virtualDatabaseSpecEnvValueFromResourceFieldRefPtrType) ToVirtualDatabaseSpecEnvValueFromResourceFieldRefPtrOutput() VirtualDatabaseSpecEnvValueFromResourceFieldRefPtrOutput {
	return i.ToVirtualDatabaseSpecEnvValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *virtualDatabaseSpecEnvValueFromResourceFieldRefPtrType) ToVirtualDatabaseSpecEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecEnvValueFromResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecEnvValueFromResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
type VirtualDatabaseSpecEnvValueFromResourceFieldRefOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecEnvValueFromResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (o VirtualDatabaseSpecEnvValueFromResourceFieldRefOutput) ToVirtualDatabaseSpecEnvValueFromResourceFieldRefOutput() VirtualDatabaseSpecEnvValueFromResourceFieldRefOutput {
	return o
}

func (o VirtualDatabaseSpecEnvValueFromResourceFieldRefOutput) ToVirtualDatabaseSpecEnvValueFromResourceFieldRefOutputWithContext(ctx context.Context) VirtualDatabaseSpecEnvValueFromResourceFieldRefOutput {
	return o
}

func (o VirtualDatabaseSpecEnvValueFromResourceFieldRefOutput) ToVirtualDatabaseSpecEnvValueFromResourceFieldRefPtrOutput() VirtualDatabaseSpecEnvValueFromResourceFieldRefPtrOutput {
	return o.ToVirtualDatabaseSpecEnvValueFromResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o VirtualDatabaseSpecEnvValueFromResourceFieldRefOutput) ToVirtualDatabaseSpecEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecEnvValueFromResourceFieldRefPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecEnvValueFromResourceFieldRef) *VirtualDatabaseSpecEnvValueFromResourceFieldRef {
		return &v
	}).(VirtualDatabaseSpecEnvValueFromResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o VirtualDatabaseSpecEnvValueFromResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecEnvValueFromResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o VirtualDatabaseSpecEnvValueFromResourceFieldRefOutput) Divisor() VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecEnvValueFromResourceFieldRef) *VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisor {
		return v.Divisor
	}).(VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o VirtualDatabaseSpecEnvValueFromResourceFieldRefOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecEnvValueFromResourceFieldRef) string { return v.Resource }).(pulumi.StringOutput)
}

type VirtualDatabaseSpecEnvValueFromResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecEnvValueFromResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpecEnvValueFromResourceFieldRef)(nil)).Elem()
}

func (o VirtualDatabaseSpecEnvValueFromResourceFieldRefPtrOutput) ToVirtualDatabaseSpecEnvValueFromResourceFieldRefPtrOutput() VirtualDatabaseSpecEnvValueFromResourceFieldRefPtrOutput {
	return o
}

func (o VirtualDatabaseSpecEnvValueFromResourceFieldRefPtrOutput) ToVirtualDatabaseSpecEnvValueFromResourceFieldRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecEnvValueFromResourceFieldRefPtrOutput {
	return o
}

func (o VirtualDatabaseSpecEnvValueFromResourceFieldRefPtrOutput) Elem() VirtualDatabaseSpecEnvValueFromResourceFieldRefOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecEnvValueFromResourceFieldRef) VirtualDatabaseSpecEnvValueFromResourceFieldRef {
		return *v
	}).(VirtualDatabaseSpecEnvValueFromResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o VirtualDatabaseSpecEnvValueFromResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecEnvValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o VirtualDatabaseSpecEnvValueFromResourceFieldRefPtrOutput) Divisor() VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecEnvValueFromResourceFieldRef) *VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisor {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrOutput)
}

// Required: resource to select
func (o VirtualDatabaseSpecEnvValueFromResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecEnvValueFromResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return &v.Resource
	}).(pulumi.StringPtrOutput)
}

type VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisor struct {
}

// VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorInput is an input type that accepts VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorArgs and VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorInput` via:
//
//          VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorArgs{...}
type VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorOutput() VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorOutput
	ToVirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorOutputWithContext(context.Context) VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorOutput
}

type VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorArgs struct {
}

func (VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorArgs) ToVirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorOutput() VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorOutput {
	return i.ToVirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorArgs) ToVirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorOutput)
}

func (i VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorArgs) ToVirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrOutput() VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToVirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorArgs) ToVirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorOutput).ToVirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx)
}

// VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrInput is an input type that accepts VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorArgs, VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtr and VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrInput` via:
//
//          VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorArgs{...}
//
//  or:
//
//          nil
type VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrOutput() VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrOutput
	ToVirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Context) VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrOutput
}

type virtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrType VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorArgs

func VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtr(v *VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorArgs) VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrInput {
	return (*virtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrType)(v)
}

func (*virtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (i *virtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrType) ToVirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrOutput() VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrOutput {
	return i.ToVirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (i *virtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrType) ToVirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrOutput)
}

type VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorOutput) ToVirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorOutput() VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorOutput) ToVirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorOutputWithContext(ctx context.Context) VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorOutput {
	return o
}

func (o VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorOutput) ToVirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrOutput() VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrOutput {
	return o.ToVirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(context.Background())
}

func (o VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorOutput) ToVirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisor) *VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisor {
		return &v
	}).(VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrOutput)
}

type VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisor)(nil)).Elem()
}

func (o VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrOutput) ToVirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrOutput() VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrOutput) ToVirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrOutput {
	return o
}

func (o VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrOutput) Elem() VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisor) VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisor {
		return *v
	}).(VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorOutput)
}

// Selects a key of a secret in the pod's namespace
type VirtualDatabaseSpecEnvValueFromSecretKeyRef struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// VirtualDatabaseSpecEnvValueFromSecretKeyRefInput is an input type that accepts VirtualDatabaseSpecEnvValueFromSecretKeyRefArgs and VirtualDatabaseSpecEnvValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecEnvValueFromSecretKeyRefInput` via:
//
//          VirtualDatabaseSpecEnvValueFromSecretKeyRefArgs{...}
type VirtualDatabaseSpecEnvValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecEnvValueFromSecretKeyRefOutput() VirtualDatabaseSpecEnvValueFromSecretKeyRefOutput
	ToVirtualDatabaseSpecEnvValueFromSecretKeyRefOutputWithContext(context.Context) VirtualDatabaseSpecEnvValueFromSecretKeyRefOutput
}

// Selects a key of a secret in the pod's namespace
type VirtualDatabaseSpecEnvValueFromSecretKeyRefArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringInput `pulumi:"key"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (VirtualDatabaseSpecEnvValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (i VirtualDatabaseSpecEnvValueFromSecretKeyRefArgs) ToVirtualDatabaseSpecEnvValueFromSecretKeyRefOutput() VirtualDatabaseSpecEnvValueFromSecretKeyRefOutput {
	return i.ToVirtualDatabaseSpecEnvValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecEnvValueFromSecretKeyRefArgs) ToVirtualDatabaseSpecEnvValueFromSecretKeyRefOutputWithContext(ctx context.Context) VirtualDatabaseSpecEnvValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecEnvValueFromSecretKeyRefOutput)
}

func (i VirtualDatabaseSpecEnvValueFromSecretKeyRefArgs) ToVirtualDatabaseSpecEnvValueFromSecretKeyRefPtrOutput() VirtualDatabaseSpecEnvValueFromSecretKeyRefPtrOutput {
	return i.ToVirtualDatabaseSpecEnvValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecEnvValueFromSecretKeyRefArgs) ToVirtualDatabaseSpecEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecEnvValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecEnvValueFromSecretKeyRefOutput).ToVirtualDatabaseSpecEnvValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// VirtualDatabaseSpecEnvValueFromSecretKeyRefPtrInput is an input type that accepts VirtualDatabaseSpecEnvValueFromSecretKeyRefArgs, VirtualDatabaseSpecEnvValueFromSecretKeyRefPtr and VirtualDatabaseSpecEnvValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecEnvValueFromSecretKeyRefPtrInput` via:
//
//          VirtualDatabaseSpecEnvValueFromSecretKeyRefArgs{...}
//
//  or:
//
//          nil
type VirtualDatabaseSpecEnvValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecEnvValueFromSecretKeyRefPtrOutput() VirtualDatabaseSpecEnvValueFromSecretKeyRefPtrOutput
	ToVirtualDatabaseSpecEnvValueFromSecretKeyRefPtrOutputWithContext(context.Context) VirtualDatabaseSpecEnvValueFromSecretKeyRefPtrOutput
}

type virtualDatabaseSpecEnvValueFromSecretKeyRefPtrType VirtualDatabaseSpecEnvValueFromSecretKeyRefArgs

func VirtualDatabaseSpecEnvValueFromSecretKeyRefPtr(v *VirtualDatabaseSpecEnvValueFromSecretKeyRefArgs) VirtualDatabaseSpecEnvValueFromSecretKeyRefPtrInput {
	return (*virtualDatabaseSpecEnvValueFromSecretKeyRefPtrType)(v)
}

func (*virtualDatabaseSpecEnvValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpecEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (i *virtualDatabaseSpecEnvValueFromSecretKeyRefPtrType) ToVirtualDatabaseSpecEnvValueFromSecretKeyRefPtrOutput() VirtualDatabaseSpecEnvValueFromSecretKeyRefPtrOutput {
	return i.ToVirtualDatabaseSpecEnvValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *virtualDatabaseSpecEnvValueFromSecretKeyRefPtrType) ToVirtualDatabaseSpecEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecEnvValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecEnvValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a secret in the pod's namespace
type VirtualDatabaseSpecEnvValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecEnvValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (o VirtualDatabaseSpecEnvValueFromSecretKeyRefOutput) ToVirtualDatabaseSpecEnvValueFromSecretKeyRefOutput() VirtualDatabaseSpecEnvValueFromSecretKeyRefOutput {
	return o
}

func (o VirtualDatabaseSpecEnvValueFromSecretKeyRefOutput) ToVirtualDatabaseSpecEnvValueFromSecretKeyRefOutputWithContext(ctx context.Context) VirtualDatabaseSpecEnvValueFromSecretKeyRefOutput {
	return o
}

func (o VirtualDatabaseSpecEnvValueFromSecretKeyRefOutput) ToVirtualDatabaseSpecEnvValueFromSecretKeyRefPtrOutput() VirtualDatabaseSpecEnvValueFromSecretKeyRefPtrOutput {
	return o.ToVirtualDatabaseSpecEnvValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o VirtualDatabaseSpecEnvValueFromSecretKeyRefOutput) ToVirtualDatabaseSpecEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecEnvValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecEnvValueFromSecretKeyRef) *VirtualDatabaseSpecEnvValueFromSecretKeyRef {
		return &v
	}).(VirtualDatabaseSpecEnvValueFromSecretKeyRefPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o VirtualDatabaseSpecEnvValueFromSecretKeyRefOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecEnvValueFromSecretKeyRef) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o VirtualDatabaseSpecEnvValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecEnvValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o VirtualDatabaseSpecEnvValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecEnvValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type VirtualDatabaseSpecEnvValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecEnvValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpecEnvValueFromSecretKeyRef)(nil)).Elem()
}

func (o VirtualDatabaseSpecEnvValueFromSecretKeyRefPtrOutput) ToVirtualDatabaseSpecEnvValueFromSecretKeyRefPtrOutput() VirtualDatabaseSpecEnvValueFromSecretKeyRefPtrOutput {
	return o
}

func (o VirtualDatabaseSpecEnvValueFromSecretKeyRefPtrOutput) ToVirtualDatabaseSpecEnvValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecEnvValueFromSecretKeyRefPtrOutput {
	return o
}

func (o VirtualDatabaseSpecEnvValueFromSecretKeyRefPtrOutput) Elem() VirtualDatabaseSpecEnvValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecEnvValueFromSecretKeyRef) VirtualDatabaseSpecEnvValueFromSecretKeyRef {
		return *v
	}).(VirtualDatabaseSpecEnvValueFromSecretKeyRefOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o VirtualDatabaseSpecEnvValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecEnvValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
func (o VirtualDatabaseSpecEnvValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecEnvValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o VirtualDatabaseSpecEnvValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecEnvValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// memory, disk cpu requirements
type VirtualDatabaseSpecResources struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits map[string]VirtualDatabaseSpecResourcesLimits `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests map[string]VirtualDatabaseSpecResourcesRequests `pulumi:"requests"`
}

// VirtualDatabaseSpecResourcesInput is an input type that accepts VirtualDatabaseSpecResourcesArgs and VirtualDatabaseSpecResourcesOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecResourcesInput` via:
//
//          VirtualDatabaseSpecResourcesArgs{...}
type VirtualDatabaseSpecResourcesInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecResourcesOutput() VirtualDatabaseSpecResourcesOutput
	ToVirtualDatabaseSpecResourcesOutputWithContext(context.Context) VirtualDatabaseSpecResourcesOutput
}

// memory, disk cpu requirements
type VirtualDatabaseSpecResourcesArgs struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Limits VirtualDatabaseSpecResourcesLimitsMapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Requests VirtualDatabaseSpecResourcesRequestsMapInput `pulumi:"requests"`
}

func (VirtualDatabaseSpecResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecResources)(nil)).Elem()
}

func (i VirtualDatabaseSpecResourcesArgs) ToVirtualDatabaseSpecResourcesOutput() VirtualDatabaseSpecResourcesOutput {
	return i.ToVirtualDatabaseSpecResourcesOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecResourcesArgs) ToVirtualDatabaseSpecResourcesOutputWithContext(ctx context.Context) VirtualDatabaseSpecResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecResourcesOutput)
}

func (i VirtualDatabaseSpecResourcesArgs) ToVirtualDatabaseSpecResourcesPtrOutput() VirtualDatabaseSpecResourcesPtrOutput {
	return i.ToVirtualDatabaseSpecResourcesPtrOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecResourcesArgs) ToVirtualDatabaseSpecResourcesPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecResourcesOutput).ToVirtualDatabaseSpecResourcesPtrOutputWithContext(ctx)
}

// VirtualDatabaseSpecResourcesPtrInput is an input type that accepts VirtualDatabaseSpecResourcesArgs, VirtualDatabaseSpecResourcesPtr and VirtualDatabaseSpecResourcesPtrOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecResourcesPtrInput` via:
//
//          VirtualDatabaseSpecResourcesArgs{...}
//
//  or:
//
//          nil
type VirtualDatabaseSpecResourcesPtrInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecResourcesPtrOutput() VirtualDatabaseSpecResourcesPtrOutput
	ToVirtualDatabaseSpecResourcesPtrOutputWithContext(context.Context) VirtualDatabaseSpecResourcesPtrOutput
}

type virtualDatabaseSpecResourcesPtrType VirtualDatabaseSpecResourcesArgs

func VirtualDatabaseSpecResourcesPtr(v *VirtualDatabaseSpecResourcesArgs) VirtualDatabaseSpecResourcesPtrInput {
	return (*virtualDatabaseSpecResourcesPtrType)(v)
}

func (*virtualDatabaseSpecResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpecResources)(nil)).Elem()
}

func (i *virtualDatabaseSpecResourcesPtrType) ToVirtualDatabaseSpecResourcesPtrOutput() VirtualDatabaseSpecResourcesPtrOutput {
	return i.ToVirtualDatabaseSpecResourcesPtrOutputWithContext(context.Background())
}

func (i *virtualDatabaseSpecResourcesPtrType) ToVirtualDatabaseSpecResourcesPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecResourcesPtrOutput)
}

// memory, disk cpu requirements
type VirtualDatabaseSpecResourcesOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecResources)(nil)).Elem()
}

func (o VirtualDatabaseSpecResourcesOutput) ToVirtualDatabaseSpecResourcesOutput() VirtualDatabaseSpecResourcesOutput {
	return o
}

func (o VirtualDatabaseSpecResourcesOutput) ToVirtualDatabaseSpecResourcesOutputWithContext(ctx context.Context) VirtualDatabaseSpecResourcesOutput {
	return o
}

func (o VirtualDatabaseSpecResourcesOutput) ToVirtualDatabaseSpecResourcesPtrOutput() VirtualDatabaseSpecResourcesPtrOutput {
	return o.ToVirtualDatabaseSpecResourcesPtrOutputWithContext(context.Background())
}

func (o VirtualDatabaseSpecResourcesOutput) ToVirtualDatabaseSpecResourcesPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecResourcesPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecResources) *VirtualDatabaseSpecResources {
		return &v
	}).(VirtualDatabaseSpecResourcesPtrOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o VirtualDatabaseSpecResourcesOutput) Limits() VirtualDatabaseSpecResourcesLimitsMapOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecResources) map[string]VirtualDatabaseSpecResourcesLimits { return v.Limits }).(VirtualDatabaseSpecResourcesLimitsMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o VirtualDatabaseSpecResourcesOutput) Requests() VirtualDatabaseSpecResourcesRequestsMapOutput {
	return o.ApplyT(func(v VirtualDatabaseSpecResources) map[string]VirtualDatabaseSpecResourcesRequests {
		return v.Requests
	}).(VirtualDatabaseSpecResourcesRequestsMapOutput)
}

type VirtualDatabaseSpecResourcesPtrOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseSpecResources)(nil)).Elem()
}

func (o VirtualDatabaseSpecResourcesPtrOutput) ToVirtualDatabaseSpecResourcesPtrOutput() VirtualDatabaseSpecResourcesPtrOutput {
	return o
}

func (o VirtualDatabaseSpecResourcesPtrOutput) ToVirtualDatabaseSpecResourcesPtrOutputWithContext(ctx context.Context) VirtualDatabaseSpecResourcesPtrOutput {
	return o
}

func (o VirtualDatabaseSpecResourcesPtrOutput) Elem() VirtualDatabaseSpecResourcesOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecResources) VirtualDatabaseSpecResources { return *v }).(VirtualDatabaseSpecResourcesOutput)
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o VirtualDatabaseSpecResourcesPtrOutput) Limits() VirtualDatabaseSpecResourcesLimitsMapOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecResources) map[string]VirtualDatabaseSpecResourcesLimits {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(VirtualDatabaseSpecResourcesLimitsMapOutput)
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o VirtualDatabaseSpecResourcesPtrOutput) Requests() VirtualDatabaseSpecResourcesRequestsMapOutput {
	return o.ApplyT(func(v *VirtualDatabaseSpecResources) map[string]VirtualDatabaseSpecResourcesRequests {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(VirtualDatabaseSpecResourcesRequestsMapOutput)
}

type VirtualDatabaseSpecResourcesLimits struct {
}

// VirtualDatabaseSpecResourcesLimitsInput is an input type that accepts VirtualDatabaseSpecResourcesLimitsArgs and VirtualDatabaseSpecResourcesLimitsOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecResourcesLimitsInput` via:
//
//          VirtualDatabaseSpecResourcesLimitsArgs{...}
type VirtualDatabaseSpecResourcesLimitsInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecResourcesLimitsOutput() VirtualDatabaseSpecResourcesLimitsOutput
	ToVirtualDatabaseSpecResourcesLimitsOutputWithContext(context.Context) VirtualDatabaseSpecResourcesLimitsOutput
}

type VirtualDatabaseSpecResourcesLimitsArgs struct {
}

func (VirtualDatabaseSpecResourcesLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecResourcesLimits)(nil)).Elem()
}

func (i VirtualDatabaseSpecResourcesLimitsArgs) ToVirtualDatabaseSpecResourcesLimitsOutput() VirtualDatabaseSpecResourcesLimitsOutput {
	return i.ToVirtualDatabaseSpecResourcesLimitsOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecResourcesLimitsArgs) ToVirtualDatabaseSpecResourcesLimitsOutputWithContext(ctx context.Context) VirtualDatabaseSpecResourcesLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecResourcesLimitsOutput)
}

// VirtualDatabaseSpecResourcesLimitsMapInput is an input type that accepts VirtualDatabaseSpecResourcesLimitsMap and VirtualDatabaseSpecResourcesLimitsMapOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecResourcesLimitsMapInput` via:
//
//          VirtualDatabaseSpecResourcesLimitsMap{ "key": VirtualDatabaseSpecResourcesLimitsArgs{...} }
type VirtualDatabaseSpecResourcesLimitsMapInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecResourcesLimitsMapOutput() VirtualDatabaseSpecResourcesLimitsMapOutput
	ToVirtualDatabaseSpecResourcesLimitsMapOutputWithContext(context.Context) VirtualDatabaseSpecResourcesLimitsMapOutput
}

type VirtualDatabaseSpecResourcesLimitsMap map[string]VirtualDatabaseSpecResourcesLimitsInput

func (VirtualDatabaseSpecResourcesLimitsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]VirtualDatabaseSpecResourcesLimits)(nil)).Elem()
}

func (i VirtualDatabaseSpecResourcesLimitsMap) ToVirtualDatabaseSpecResourcesLimitsMapOutput() VirtualDatabaseSpecResourcesLimitsMapOutput {
	return i.ToVirtualDatabaseSpecResourcesLimitsMapOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecResourcesLimitsMap) ToVirtualDatabaseSpecResourcesLimitsMapOutputWithContext(ctx context.Context) VirtualDatabaseSpecResourcesLimitsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecResourcesLimitsMapOutput)
}

type VirtualDatabaseSpecResourcesLimitsOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecResourcesLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecResourcesLimits)(nil)).Elem()
}

func (o VirtualDatabaseSpecResourcesLimitsOutput) ToVirtualDatabaseSpecResourcesLimitsOutput() VirtualDatabaseSpecResourcesLimitsOutput {
	return o
}

func (o VirtualDatabaseSpecResourcesLimitsOutput) ToVirtualDatabaseSpecResourcesLimitsOutputWithContext(ctx context.Context) VirtualDatabaseSpecResourcesLimitsOutput {
	return o
}

type VirtualDatabaseSpecResourcesLimitsMapOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecResourcesLimitsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]VirtualDatabaseSpecResourcesLimits)(nil)).Elem()
}

func (o VirtualDatabaseSpecResourcesLimitsMapOutput) ToVirtualDatabaseSpecResourcesLimitsMapOutput() VirtualDatabaseSpecResourcesLimitsMapOutput {
	return o
}

func (o VirtualDatabaseSpecResourcesLimitsMapOutput) ToVirtualDatabaseSpecResourcesLimitsMapOutputWithContext(ctx context.Context) VirtualDatabaseSpecResourcesLimitsMapOutput {
	return o
}

func (o VirtualDatabaseSpecResourcesLimitsMapOutput) MapIndex(k pulumi.StringInput) VirtualDatabaseSpecResourcesLimitsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) VirtualDatabaseSpecResourcesLimits {
		return vs[0].(map[string]VirtualDatabaseSpecResourcesLimits)[vs[1].(string)]
	}).(VirtualDatabaseSpecResourcesLimitsOutput)
}

type VirtualDatabaseSpecResourcesRequests struct {
}

// VirtualDatabaseSpecResourcesRequestsInput is an input type that accepts VirtualDatabaseSpecResourcesRequestsArgs and VirtualDatabaseSpecResourcesRequestsOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecResourcesRequestsInput` via:
//
//          VirtualDatabaseSpecResourcesRequestsArgs{...}
type VirtualDatabaseSpecResourcesRequestsInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecResourcesRequestsOutput() VirtualDatabaseSpecResourcesRequestsOutput
	ToVirtualDatabaseSpecResourcesRequestsOutputWithContext(context.Context) VirtualDatabaseSpecResourcesRequestsOutput
}

type VirtualDatabaseSpecResourcesRequestsArgs struct {
}

func (VirtualDatabaseSpecResourcesRequestsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecResourcesRequests)(nil)).Elem()
}

func (i VirtualDatabaseSpecResourcesRequestsArgs) ToVirtualDatabaseSpecResourcesRequestsOutput() VirtualDatabaseSpecResourcesRequestsOutput {
	return i.ToVirtualDatabaseSpecResourcesRequestsOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecResourcesRequestsArgs) ToVirtualDatabaseSpecResourcesRequestsOutputWithContext(ctx context.Context) VirtualDatabaseSpecResourcesRequestsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecResourcesRequestsOutput)
}

// VirtualDatabaseSpecResourcesRequestsMapInput is an input type that accepts VirtualDatabaseSpecResourcesRequestsMap and VirtualDatabaseSpecResourcesRequestsMapOutput values.
// You can construct a concrete instance of `VirtualDatabaseSpecResourcesRequestsMapInput` via:
//
//          VirtualDatabaseSpecResourcesRequestsMap{ "key": VirtualDatabaseSpecResourcesRequestsArgs{...} }
type VirtualDatabaseSpecResourcesRequestsMapInput interface {
	pulumi.Input

	ToVirtualDatabaseSpecResourcesRequestsMapOutput() VirtualDatabaseSpecResourcesRequestsMapOutput
	ToVirtualDatabaseSpecResourcesRequestsMapOutputWithContext(context.Context) VirtualDatabaseSpecResourcesRequestsMapOutput
}

type VirtualDatabaseSpecResourcesRequestsMap map[string]VirtualDatabaseSpecResourcesRequestsInput

func (VirtualDatabaseSpecResourcesRequestsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]VirtualDatabaseSpecResourcesRequests)(nil)).Elem()
}

func (i VirtualDatabaseSpecResourcesRequestsMap) ToVirtualDatabaseSpecResourcesRequestsMapOutput() VirtualDatabaseSpecResourcesRequestsMapOutput {
	return i.ToVirtualDatabaseSpecResourcesRequestsMapOutputWithContext(context.Background())
}

func (i VirtualDatabaseSpecResourcesRequestsMap) ToVirtualDatabaseSpecResourcesRequestsMapOutputWithContext(ctx context.Context) VirtualDatabaseSpecResourcesRequestsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseSpecResourcesRequestsMapOutput)
}

type VirtualDatabaseSpecResourcesRequestsOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecResourcesRequestsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseSpecResourcesRequests)(nil)).Elem()
}

func (o VirtualDatabaseSpecResourcesRequestsOutput) ToVirtualDatabaseSpecResourcesRequestsOutput() VirtualDatabaseSpecResourcesRequestsOutput {
	return o
}

func (o VirtualDatabaseSpecResourcesRequestsOutput) ToVirtualDatabaseSpecResourcesRequestsOutputWithContext(ctx context.Context) VirtualDatabaseSpecResourcesRequestsOutput {
	return o
}

type VirtualDatabaseSpecResourcesRequestsMapOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseSpecResourcesRequestsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]VirtualDatabaseSpecResourcesRequests)(nil)).Elem()
}

func (o VirtualDatabaseSpecResourcesRequestsMapOutput) ToVirtualDatabaseSpecResourcesRequestsMapOutput() VirtualDatabaseSpecResourcesRequestsMapOutput {
	return o
}

func (o VirtualDatabaseSpecResourcesRequestsMapOutput) ToVirtualDatabaseSpecResourcesRequestsMapOutputWithContext(ctx context.Context) VirtualDatabaseSpecResourcesRequestsMapOutput {
	return o
}

func (o VirtualDatabaseSpecResourcesRequestsMapOutput) MapIndex(k pulumi.StringInput) VirtualDatabaseSpecResourcesRequestsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) VirtualDatabaseSpecResourcesRequests {
		return vs[0].(map[string]VirtualDatabaseSpecResourcesRequests)[vs[1].(string)]
	}).(VirtualDatabaseSpecResourcesRequestsOutput)
}

// Virtual Database Status
type VirtualDatabaseStatus struct {
	// Deployed vdb version.
	Cachestore *string `pulumi:"cachestore"`
	// ConfigDigest value of the vdb
	Configdigest *string `pulumi:"configdigest"`
	// Digest value of the vdb
	Digest *string `pulumi:"digest"`
	// Failure message if deployment ended in failure
	Failure *string `pulumi:"failure"`
	// The current phase of the build the operator deployment is running
	Phase *string `pulumi:"phase"`
	// Route information that is exposed for clients
	Route *string `pulumi:"route"`
	// Deployed vdb version.
	Version *string `pulumi:"version"`
}

// VirtualDatabaseStatusInput is an input type that accepts VirtualDatabaseStatusArgs and VirtualDatabaseStatusOutput values.
// You can construct a concrete instance of `VirtualDatabaseStatusInput` via:
//
//          VirtualDatabaseStatusArgs{...}
type VirtualDatabaseStatusInput interface {
	pulumi.Input

	ToVirtualDatabaseStatusOutput() VirtualDatabaseStatusOutput
	ToVirtualDatabaseStatusOutputWithContext(context.Context) VirtualDatabaseStatusOutput
}

// Virtual Database Status
type VirtualDatabaseStatusArgs struct {
	// Deployed vdb version.
	Cachestore pulumi.StringPtrInput `pulumi:"cachestore"`
	// ConfigDigest value of the vdb
	Configdigest pulumi.StringPtrInput `pulumi:"configdigest"`
	// Digest value of the vdb
	Digest pulumi.StringPtrInput `pulumi:"digest"`
	// Failure message if deployment ended in failure
	Failure pulumi.StringPtrInput `pulumi:"failure"`
	// The current phase of the build the operator deployment is running
	Phase pulumi.StringPtrInput `pulumi:"phase"`
	// Route information that is exposed for clients
	Route pulumi.StringPtrInput `pulumi:"route"`
	// Deployed vdb version.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (VirtualDatabaseStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseStatus)(nil)).Elem()
}

func (i VirtualDatabaseStatusArgs) ToVirtualDatabaseStatusOutput() VirtualDatabaseStatusOutput {
	return i.ToVirtualDatabaseStatusOutputWithContext(context.Background())
}

func (i VirtualDatabaseStatusArgs) ToVirtualDatabaseStatusOutputWithContext(ctx context.Context) VirtualDatabaseStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseStatusOutput)
}

func (i VirtualDatabaseStatusArgs) ToVirtualDatabaseStatusPtrOutput() VirtualDatabaseStatusPtrOutput {
	return i.ToVirtualDatabaseStatusPtrOutputWithContext(context.Background())
}

func (i VirtualDatabaseStatusArgs) ToVirtualDatabaseStatusPtrOutputWithContext(ctx context.Context) VirtualDatabaseStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseStatusOutput).ToVirtualDatabaseStatusPtrOutputWithContext(ctx)
}

// VirtualDatabaseStatusPtrInput is an input type that accepts VirtualDatabaseStatusArgs, VirtualDatabaseStatusPtr and VirtualDatabaseStatusPtrOutput values.
// You can construct a concrete instance of `VirtualDatabaseStatusPtrInput` via:
//
//          VirtualDatabaseStatusArgs{...}
//
//  or:
//
//          nil
type VirtualDatabaseStatusPtrInput interface {
	pulumi.Input

	ToVirtualDatabaseStatusPtrOutput() VirtualDatabaseStatusPtrOutput
	ToVirtualDatabaseStatusPtrOutputWithContext(context.Context) VirtualDatabaseStatusPtrOutput
}

type virtualDatabaseStatusPtrType VirtualDatabaseStatusArgs

func VirtualDatabaseStatusPtr(v *VirtualDatabaseStatusArgs) VirtualDatabaseStatusPtrInput {
	return (*virtualDatabaseStatusPtrType)(v)
}

func (*virtualDatabaseStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseStatus)(nil)).Elem()
}

func (i *virtualDatabaseStatusPtrType) ToVirtualDatabaseStatusPtrOutput() VirtualDatabaseStatusPtrOutput {
	return i.ToVirtualDatabaseStatusPtrOutputWithContext(context.Background())
}

func (i *virtualDatabaseStatusPtrType) ToVirtualDatabaseStatusPtrOutputWithContext(ctx context.Context) VirtualDatabaseStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDatabaseStatusPtrOutput)
}

// Virtual Database Status
type VirtualDatabaseStatusOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDatabaseStatus)(nil)).Elem()
}

func (o VirtualDatabaseStatusOutput) ToVirtualDatabaseStatusOutput() VirtualDatabaseStatusOutput {
	return o
}

func (o VirtualDatabaseStatusOutput) ToVirtualDatabaseStatusOutputWithContext(ctx context.Context) VirtualDatabaseStatusOutput {
	return o
}

func (o VirtualDatabaseStatusOutput) ToVirtualDatabaseStatusPtrOutput() VirtualDatabaseStatusPtrOutput {
	return o.ToVirtualDatabaseStatusPtrOutputWithContext(context.Background())
}

func (o VirtualDatabaseStatusOutput) ToVirtualDatabaseStatusPtrOutputWithContext(ctx context.Context) VirtualDatabaseStatusPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseStatus) *VirtualDatabaseStatus {
		return &v
	}).(VirtualDatabaseStatusPtrOutput)
}

// Deployed vdb version.
func (o VirtualDatabaseStatusOutput) Cachestore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseStatus) *string { return v.Cachestore }).(pulumi.StringPtrOutput)
}

// ConfigDigest value of the vdb
func (o VirtualDatabaseStatusOutput) Configdigest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseStatus) *string { return v.Configdigest }).(pulumi.StringPtrOutput)
}

// Digest value of the vdb
func (o VirtualDatabaseStatusOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseStatus) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

// Failure message if deployment ended in failure
func (o VirtualDatabaseStatusOutput) Failure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseStatus) *string { return v.Failure }).(pulumi.StringPtrOutput)
}

// The current phase of the build the operator deployment is running
func (o VirtualDatabaseStatusOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseStatus) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

// Route information that is exposed for clients
func (o VirtualDatabaseStatusOutput) Route() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseStatus) *string { return v.Route }).(pulumi.StringPtrOutput)
}

// Deployed vdb version.
func (o VirtualDatabaseStatusOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualDatabaseStatus) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type VirtualDatabaseStatusPtrOutput struct{ *pulumi.OutputState }

func (VirtualDatabaseStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDatabaseStatus)(nil)).Elem()
}

func (o VirtualDatabaseStatusPtrOutput) ToVirtualDatabaseStatusPtrOutput() VirtualDatabaseStatusPtrOutput {
	return o
}

func (o VirtualDatabaseStatusPtrOutput) ToVirtualDatabaseStatusPtrOutputWithContext(ctx context.Context) VirtualDatabaseStatusPtrOutput {
	return o
}

func (o VirtualDatabaseStatusPtrOutput) Elem() VirtualDatabaseStatusOutput {
	return o.ApplyT(func(v *VirtualDatabaseStatus) VirtualDatabaseStatus { return *v }).(VirtualDatabaseStatusOutput)
}

// Deployed vdb version.
func (o VirtualDatabaseStatusPtrOutput) Cachestore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseStatus) *string {
		if v == nil {
			return nil
		}
		return v.Cachestore
	}).(pulumi.StringPtrOutput)
}

// ConfigDigest value of the vdb
func (o VirtualDatabaseStatusPtrOutput) Configdigest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseStatus) *string {
		if v == nil {
			return nil
		}
		return v.Configdigest
	}).(pulumi.StringPtrOutput)
}

// Digest value of the vdb
func (o VirtualDatabaseStatusPtrOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseStatus) *string {
		if v == nil {
			return nil
		}
		return v.Digest
	}).(pulumi.StringPtrOutput)
}

// Failure message if deployment ended in failure
func (o VirtualDatabaseStatusPtrOutput) Failure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseStatus) *string {
		if v == nil {
			return nil
		}
		return v.Failure
	}).(pulumi.StringPtrOutput)
}

// The current phase of the build the operator deployment is running
func (o VirtualDatabaseStatusPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseStatus) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

// Route information that is exposed for clients
func (o VirtualDatabaseStatusPtrOutput) Route() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseStatus) *string {
		if v == nil {
			return nil
		}
		return v.Route
	}).(pulumi.StringPtrOutput)
}

// Deployed vdb version.
func (o VirtualDatabaseStatusPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualDatabaseStatus) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(VirtualDatabaseTypeOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseMetadataOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecPtrOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecBuildOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecBuildPtrOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecBuildEnvOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecBuildEnvArrayOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecBuildEnvValueFromOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecBuildEnvValueFromPtrOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecBuildEnvValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecBuildEnvValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisorPtrOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecBuildEnvValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecBuildSourceOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecBuildSourcePtrOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecBuildSourceMavenRepositoriesOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecDatasourcesOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecDatasourcesArrayOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecDatasourcesPropertiesOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecDatasourcesPropertiesArrayOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecDatasourcesPropertiesValueFromOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecDatasourcesPropertiesValueFromPtrOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisorPtrOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecEnvOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecEnvArrayOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecEnvValueFromOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecEnvValueFromPtrOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecEnvValueFromConfigMapKeyRefOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecEnvValueFromConfigMapKeyRefPtrOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecEnvValueFromFieldRefOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecEnvValueFromFieldRefPtrOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecEnvValueFromResourceFieldRefOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecEnvValueFromResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisorPtrOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecEnvValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecEnvValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecResourcesOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecResourcesPtrOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecResourcesLimitsOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecResourcesLimitsMapOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecResourcesRequestsOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseSpecResourcesRequestsMapOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseStatusOutput{})
	pulumi.RegisterOutputType(VirtualDatabaseStatusPtrOutput{})
}

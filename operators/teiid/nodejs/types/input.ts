// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import {ObjectMeta} from "../meta/v1";

export namespace teiid {
    export namespace v1alpha1 {
        /**
         * Virtual Database specification
         */
        export interface VirtualDatabaseSpec {
            /**
             * S2I Build configuration
             */
            build: pulumi.Input<inputs.teiid.v1alpha1.VirtualDatabaseSpecBuild>;
            /**
             * DataSources configuration for this Virtual Database
             */
            datasources?: pulumi.Input<pulumi.Input<inputs.teiid.v1alpha1.VirtualDatabaseSpecDatasources>[]>;
            /**
             * Environment properties required for deployment
             */
            env?: pulumi.Input<pulumi.Input<inputs.teiid.v1alpha1.VirtualDatabaseSpecEnv>[]>;
            /**
             * Defines the services (LoadBalancer, NodePort, 3scale) to expose
             */
            expose?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Jaeger instance to use to push the tracing information
             */
            jaeger?: pulumi.Input<string>;
            /**
             * Number Of deployment units required
             */
            replicas?: pulumi.Input<number>;
            /**
             * memory, disk cpu requirements
             */
            resources?: pulumi.Input<inputs.teiid.v1alpha1.VirtualDatabaseSpecResources>;
        }

        /**
         * S2I Build configuration
         */
        export interface VirtualDatabaseSpecBuild {
            /**
             * Environment properties set build purpose
             */
            env?: pulumi.Input<pulumi.Input<inputs.teiid.v1alpha1.VirtualDatabaseSpecBuildEnv>[]>;
            /**
             * VDB Source details
             */
            source?: pulumi.Input<inputs.teiid.v1alpha1.VirtualDatabaseSpecBuildSource>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface VirtualDatabaseSpecBuildEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.teiid.v1alpha1.VirtualDatabaseSpecBuildEnvValueFrom>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface VirtualDatabaseSpecBuildEnvValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.teiid.v1alpha1.VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRef>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
             */
            fieldRef?: pulumi.Input<inputs.teiid.v1alpha1.VirtualDatabaseSpecBuildEnvValueFromFieldRef>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.teiid.v1alpha1.VirtualDatabaseSpecBuildEnvValueFromResourceFieldRef>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.teiid.v1alpha1.VirtualDatabaseSpecBuildEnvValueFromSecretKeyRef>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface VirtualDatabaseSpecBuildEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
         */
        export interface VirtualDatabaseSpecBuildEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface VirtualDatabaseSpecBuildEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.teiid.v1alpha1.VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisor>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface VirtualDatabaseSpecBuildEnvValueFromResourceFieldRefDivisor {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface VirtualDatabaseSpecBuildEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * VDB Source details
         */
        export interface VirtualDatabaseSpecBuildSource {
            /**
             * DDL based VDB
             */
            ddl?: pulumi.Input<string>;
            /**
             * List of maven dependencies for the build in GAV format
             */
            dependencies?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * A VDB defined in GAV format
             */
            maven?: pulumi.Input<string>;
            /**
             * Custom maven repositories that need to be used for the S2I build
             */
            mavenRepositories?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Open API contract that is exposed by the VDB
             */
            openapi?: pulumi.Input<string>;
            /**
             * Deployed vdb version. For embedded DDL version this will be implicitly provided when ignored, for maven based vdb the maven version is always
             */
            version?: pulumi.Input<string>;
        }

        /**
         * DataSourceObject - define the datasources that this Virtual Database integrates
         */
        export interface VirtualDatabaseSpecDatasources {
            /**
             * Name of the Data Source
             */
            name?: pulumi.Input<string>;
            /**
             * Properties required for Data Source connection
             */
            properties?: pulumi.Input<pulumi.Input<inputs.teiid.v1alpha1.VirtualDatabaseSpecDatasourcesProperties>[]>;
            /**
             * Type of Data Source. ex: Oracle, PostgreSQL, MySQL, Salesforce etc.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface VirtualDatabaseSpecDatasourcesProperties {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.teiid.v1alpha1.VirtualDatabaseSpecDatasourcesPropertiesValueFrom>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface VirtualDatabaseSpecDatasourcesPropertiesValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.teiid.v1alpha1.VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRef>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
             */
            fieldRef?: pulumi.Input<inputs.teiid.v1alpha1.VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRef>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.teiid.v1alpha1.VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRef>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.teiid.v1alpha1.VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRef>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface VirtualDatabaseSpecDatasourcesPropertiesValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
         */
        export interface VirtualDatabaseSpecDatasourcesPropertiesValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.teiid.v1alpha1.VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisor>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface VirtualDatabaseSpecDatasourcesPropertiesValueFromResourceFieldRefDivisor {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface VirtualDatabaseSpecDatasourcesPropertiesValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface VirtualDatabaseSpecEnv {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.teiid.v1alpha1.VirtualDatabaseSpecEnvValueFrom>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface VirtualDatabaseSpecEnvValueFrom {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.teiid.v1alpha1.VirtualDatabaseSpecEnvValueFromConfigMapKeyRef>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
             */
            fieldRef?: pulumi.Input<inputs.teiid.v1alpha1.VirtualDatabaseSpecEnvValueFromFieldRef>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.teiid.v1alpha1.VirtualDatabaseSpecEnvValueFromResourceFieldRef>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.teiid.v1alpha1.VirtualDatabaseSpecEnvValueFromSecretKeyRef>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface VirtualDatabaseSpecEnvValueFromConfigMapKeyRef {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
         */
        export interface VirtualDatabaseSpecEnvValueFromFieldRef {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface VirtualDatabaseSpecEnvValueFromResourceFieldRef {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<inputs.teiid.v1alpha1.VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisor>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        export interface VirtualDatabaseSpecEnvValueFromResourceFieldRefDivisor {
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface VirtualDatabaseSpecEnvValueFromSecretKeyRef {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * memory, disk cpu requirements
         */
        export interface VirtualDatabaseSpecResources {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<inputs.teiid.v1alpha1.VirtualDatabaseSpecResourcesLimits>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<inputs.teiid.v1alpha1.VirtualDatabaseSpecResourcesRequests>}>;
        }

        export interface VirtualDatabaseSpecResourcesLimits {
        }

        export interface VirtualDatabaseSpecResourcesRequests {
        }

        /**
         * Virtual Database Status
         */
        export interface VirtualDatabaseStatus {
            /**
             * Deployed vdb version.
             */
            cachestore?: pulumi.Input<string>;
            /**
             * ConfigDigest value of the vdb
             */
            configdigest?: pulumi.Input<string>;
            /**
             * Digest value of the vdb
             */
            digest?: pulumi.Input<string>;
            /**
             * Failure message if deployment ended in failure
             */
            failure?: pulumi.Input<string>;
            /**
             * The current phase of the build the operator deployment is running
             */
            phase?: pulumi.Input<string>;
            /**
             * Route information that is exposed for clients
             */
            route?: pulumi.Input<string>;
            /**
             * Deployed vdb version.
             */
            version?: pulumi.Input<string>;
        }
    }
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import {ObjectMeta} from "../meta/v1";

export namespace monitoring {
    export namespace v1alpha1 {
        /**
         * PrometheusExporterSpec defines the desired state of PrometheusExporter
         */
        export interface PrometheusExporterSpec {
            /**
             * For cloudwatch exporter, the Secret name containing AWS IAM credentials (AWS_ACCESS_KEY_ID / AWS_SECRET_ACCESS_KEY)
             */
            awsCredentialsSecretName?: string;
            /**
             * For cloudwatch exporter, the ConfigMap name containing Cloudwatch config.yml (Services, Dimensions, Tags used for autodiscovery...)
             */
            configurationConfigmapName?: string;
            /**
             * For redis exporter, the optional redis keys to monitor (example: resque:queue:stats,resque:queue:priority,resque:queue:main,resque:failed)
             */
            dbCheckKeys?: string;
            /**
             * For mysql and postgresql exporters, the Secret name containing connection string definition (DSN)
             */
            dbConnectionStringSecretName?: string;
            /**
             * For redis, memcached, sphinx and es exporters, the db host to monitor
             */
            dbHost?: string;
            /**
             * For redis, memcached, sphinx and es exporters, the db port to monitor
             */
            dbPort?: number;
            extraLabel?: outputs.monitoring.v1alpha1.PrometheusExporterSpecExtraLabel;
            grafanaDashboard?: outputs.monitoring.v1alpha1.PrometheusExporterSpecGrafanaDashboard;
            image?: outputs.monitoring.v1alpha1.PrometheusExporterSpecImage;
            livenessProbe?: outputs.monitoring.v1alpha1.PrometheusExporterSpecLivenessProbe;
            /**
             * Prometheus exporter port where metrics are available (example 9150)
             */
            port?: number;
            readinessProbe?: outputs.monitoring.v1alpha1.PrometheusExporterSpecReadinessProbe;
            resources?: outputs.monitoring.v1alpha1.PrometheusExporterSpecResources;
            serviceMonitor?: outputs.monitoring.v1alpha1.PrometheusExporterSpecServiceMonitor;
            /**
             * Supported prometheus-exporter types: memcached, redis, mysql, postgresql, sphinx, es, cloudwatch
             */
            type: string;
        }

        export interface PrometheusExporterSpecExtraLabel {
            /**
             * Add extra label key to all created resources (example tier)
             */
            key?: string;
        }

        export interface PrometheusExporterSpecGrafanaDashboard {
            /**
             * Create (true) or not (false) GrafanaDashboard object
             */
            enabled?: boolean;
            label?: outputs.monitoring.v1alpha1.PrometheusExporterSpecGrafanaDashboardLabel;
        }

        export interface PrometheusExporterSpecGrafanaDashboardLabel {
            /**
             * Label key used by grafana-operator for dashboard discovery
             */
            key?: string;
            /**
             * Label value used by grafana-operator for dashboard discovery
             */
            value?: string;
        }

        export interface PrometheusExporterSpecImage {
            /**
             * Prometheus exporter image name (example prom/memcached-exporter)
             */
            name?: string;
            /**
             * Prometheus exporter image version (example v0.6.0)
             */
            version?: string;
        }

        export interface PrometheusExporterSpecLivenessProbe {
            /**
             * Override liveness probe failure threshold
             */
            failureThreshold?: number;
            /**
             * Override liveness probe period (seconds)
             */
            periodSeconds?: number;
            /**
             * Override liveness probe success threshold
             */
            successThreshold?: number;
            /**
             * Override liveness probe timeout (seconds)
             */
            timeoutSeconds?: number;
        }

        export interface PrometheusExporterSpecReadinessProbe {
            /**
             * Override readiness probe failure threshold
             */
            failureThreshold?: number;
            /**
             * Override readiness probe period (seconds)
             */
            periodSeconds?: number;
            /**
             * Override readiness probe success threshold
             */
            successThreshold?: number;
            /**
             * Override readiness probe timeout (seconds)
             */
            timeoutSeconds?: number;
        }

        export interface PrometheusExporterSpecResources {
            limits?: outputs.monitoring.v1alpha1.PrometheusExporterSpecResourcesLimits;
            requests?: outputs.monitoring.v1alpha1.PrometheusExporterSpecResourcesRequests;
        }

        export interface PrometheusExporterSpecResourcesLimits {
            /**
             * Override CPU limits (example 100m)
             */
            cpu?: any;
            /**
             * Override Memory limits (example 256Mi)
             */
            memory?: any;
        }

        export interface PrometheusExporterSpecResourcesRequests {
            /**
             * Override CPU requests (example 50m)
             */
            cpu?: any;
            /**
             * Override Memory requests (example 64Mi)
             */
            memory?: any;
        }

        export interface PrometheusExporterSpecServiceMonitor {
            /**
             * Create (true) or not (false) ServiceMonitor object
             */
            enabled?: boolean;
            /**
             * Prometheus scrape interval (example 30s)
             */
            interval?: string;
        }
    }
}

// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import {ObjectMeta} from "../meta/v1";

export namespace monitoring {
    export namespace v1alpha1 {
        /**
         * PrometheusExporterSpec defines the desired state of PrometheusExporter
         */
        export interface PrometheusExporterSpec {
            /**
             * For cloudwatch exporter, the Secret name containing AWS IAM credentials (AWS_ACCESS_KEY_ID / AWS_SECRET_ACCESS_KEY)
             */
            awsCredentialsSecretName?: pulumi.Input<string>;
            /**
             * For cloudwatch exporter, the ConfigMap name containing Cloudwatch config.yml (Services, Dimensions, Tags used for autodiscovery...)
             */
            configurationConfigmapName?: pulumi.Input<string>;
            /**
             * For redis exporter, the optional redis keys to monitor (example: resque:queue:stats,resque:queue:priority,resque:queue:main,resque:failed)
             */
            dbCheckKeys?: pulumi.Input<string>;
            /**
             * For mysql and postgresql exporters, the Secret name containing connection string definition (DSN)
             */
            dbConnectionStringSecretName?: pulumi.Input<string>;
            /**
             * For redis, memcached, sphinx and es exporters, the db host to monitor
             */
            dbHost?: pulumi.Input<string>;
            /**
             * For redis, memcached, sphinx and es exporters, the db port to monitor
             */
            dbPort?: pulumi.Input<number>;
            extraLabel?: pulumi.Input<inputs.monitoring.v1alpha1.PrometheusExporterSpecExtraLabel>;
            grafanaDashboard?: pulumi.Input<inputs.monitoring.v1alpha1.PrometheusExporterSpecGrafanaDashboard>;
            image?: pulumi.Input<inputs.monitoring.v1alpha1.PrometheusExporterSpecImage>;
            livenessProbe?: pulumi.Input<inputs.monitoring.v1alpha1.PrometheusExporterSpecLivenessProbe>;
            /**
             * Prometheus exporter port where metrics are available (example 9150)
             */
            port?: pulumi.Input<number>;
            readinessProbe?: pulumi.Input<inputs.monitoring.v1alpha1.PrometheusExporterSpecReadinessProbe>;
            resources?: pulumi.Input<inputs.monitoring.v1alpha1.PrometheusExporterSpecResources>;
            serviceMonitor?: pulumi.Input<inputs.monitoring.v1alpha1.PrometheusExporterSpecServiceMonitor>;
            /**
             * Supported prometheus-exporter types: memcached, redis, mysql, postgresql, sphinx, es, cloudwatch
             */
            type: pulumi.Input<string>;
        }

        export interface PrometheusExporterSpecExtraLabel {
            /**
             * Add extra label key to all created resources (example tier)
             */
            key?: pulumi.Input<string>;
        }

        export interface PrometheusExporterSpecGrafanaDashboard {
            /**
             * Create (true) or not (false) GrafanaDashboard object
             */
            enabled?: pulumi.Input<boolean>;
            label?: pulumi.Input<inputs.monitoring.v1alpha1.PrometheusExporterSpecGrafanaDashboardLabel>;
        }

        export interface PrometheusExporterSpecGrafanaDashboardLabel {
            /**
             * Label key used by grafana-operator for dashboard discovery
             */
            key?: pulumi.Input<string>;
            /**
             * Label value used by grafana-operator for dashboard discovery
             */
            value?: pulumi.Input<string>;
        }

        export interface PrometheusExporterSpecImage {
            /**
             * Prometheus exporter image name (example prom/memcached-exporter)
             */
            name?: pulumi.Input<string>;
            /**
             * Prometheus exporter image version (example v0.6.0)
             */
            version?: pulumi.Input<string>;
        }

        export interface PrometheusExporterSpecLivenessProbe {
            /**
             * Override liveness probe failure threshold
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * Override liveness probe period (seconds)
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Override liveness probe success threshold
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * Override liveness probe timeout (seconds)
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface PrometheusExporterSpecReadinessProbe {
            /**
             * Override readiness probe failure threshold
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * Override readiness probe period (seconds)
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Override readiness probe success threshold
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * Override readiness probe timeout (seconds)
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface PrometheusExporterSpecResources {
            limits?: pulumi.Input<inputs.monitoring.v1alpha1.PrometheusExporterSpecResourcesLimits>;
            requests?: pulumi.Input<inputs.monitoring.v1alpha1.PrometheusExporterSpecResourcesRequests>;
        }

        export interface PrometheusExporterSpecResourcesLimits {
            /**
             * Override CPU limits (example 100m)
             */
            cpu?: any;
            /**
             * Override Memory limits (example 256Mi)
             */
            memory?: any;
        }

        export interface PrometheusExporterSpecResourcesRequests {
            /**
             * Override CPU requests (example 50m)
             */
            cpu?: any;
            /**
             * Override Memory requests (example 64Mi)
             */
            memory?: any;
        }

        export interface PrometheusExporterSpecServiceMonitor {
            /**
             * Create (true) or not (false) ServiceMonitor object
             */
            enabled?: pulumi.Input<boolean>;
            /**
             * Prometheus scrape interval (example 30s)
             */
            interval?: pulumi.Input<string>;
        }
    }
}

# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'PrometheusExporterSpecArgs',
    'PrometheusExporterSpecExtraLabelArgs',
    'PrometheusExporterSpecGrafanaDashboardArgs',
    'PrometheusExporterSpecGrafanaDashboardLabelArgs',
    'PrometheusExporterSpecImageArgs',
    'PrometheusExporterSpecLivenessProbeArgs',
    'PrometheusExporterSpecReadinessProbeArgs',
    'PrometheusExporterSpecResourcesArgs',
    'PrometheusExporterSpecResourcesLimitsArgs',
    'PrometheusExporterSpecResourcesRequestsArgs',
    'PrometheusExporterSpecServiceMonitorArgs',
]

@pulumi.input_type
class PrometheusExporterSpecArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 aws_credentials_secret_name: Optional[pulumi.Input[str]] = None,
                 configuration_configmap_name: Optional[pulumi.Input[str]] = None,
                 db_check_keys: Optional[pulumi.Input[str]] = None,
                 db_connection_string_secret_name: Optional[pulumi.Input[str]] = None,
                 db_host: Optional[pulumi.Input[str]] = None,
                 db_port: Optional[pulumi.Input[int]] = None,
                 extra_label: Optional[pulumi.Input['PrometheusExporterSpecExtraLabelArgs']] = None,
                 grafana_dashboard: Optional[pulumi.Input['PrometheusExporterSpecGrafanaDashboardArgs']] = None,
                 image: Optional[pulumi.Input['PrometheusExporterSpecImageArgs']] = None,
                 liveness_probe: Optional[pulumi.Input['PrometheusExporterSpecLivenessProbeArgs']] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 readiness_probe: Optional[pulumi.Input['PrometheusExporterSpecReadinessProbeArgs']] = None,
                 resources: Optional[pulumi.Input['PrometheusExporterSpecResourcesArgs']] = None,
                 service_monitor: Optional[pulumi.Input['PrometheusExporterSpecServiceMonitorArgs']] = None):
        """
        PrometheusExporterSpec defines the desired state of PrometheusExporter
        :param pulumi.Input[str] type: Supported prometheus-exporter types: memcached, redis, mysql, postgresql, sphinx, es, cloudwatch
        :param pulumi.Input[str] aws_credentials_secret_name: For cloudwatch exporter, the Secret name containing AWS IAM credentials (AWS_ACCESS_KEY_ID / AWS_SECRET_ACCESS_KEY)
        :param pulumi.Input[str] configuration_configmap_name: For cloudwatch exporter, the ConfigMap name containing Cloudwatch config.yml (Services, Dimensions, Tags used for autodiscovery...)
        :param pulumi.Input[str] db_check_keys: For redis exporter, the optional redis keys to monitor (example: resque:queue:stats,resque:queue:priority,resque:queue:main,resque:failed)
        :param pulumi.Input[str] db_connection_string_secret_name: For mysql and postgresql exporters, the Secret name containing connection string definition (DSN)
        :param pulumi.Input[str] db_host: For redis, memcached, sphinx and es exporters, the db host to monitor
        :param pulumi.Input[int] db_port: For redis, memcached, sphinx and es exporters, the db port to monitor
        :param pulumi.Input[int] port: Prometheus exporter port where metrics are available (example 9150)
        """
        pulumi.set(__self__, "type", type)
        if aws_credentials_secret_name is not None:
            pulumi.set(__self__, "aws_credentials_secret_name", aws_credentials_secret_name)
        if configuration_configmap_name is not None:
            pulumi.set(__self__, "configuration_configmap_name", configuration_configmap_name)
        if db_check_keys is not None:
            pulumi.set(__self__, "db_check_keys", db_check_keys)
        if db_connection_string_secret_name is not None:
            pulumi.set(__self__, "db_connection_string_secret_name", db_connection_string_secret_name)
        if db_host is not None:
            pulumi.set(__self__, "db_host", db_host)
        if db_port is not None:
            pulumi.set(__self__, "db_port", db_port)
        if extra_label is not None:
            pulumi.set(__self__, "extra_label", extra_label)
        if grafana_dashboard is not None:
            pulumi.set(__self__, "grafana_dashboard", grafana_dashboard)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if service_monitor is not None:
            pulumi.set(__self__, "service_monitor", service_monitor)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Supported prometheus-exporter types: memcached, redis, mysql, postgresql, sphinx, es, cloudwatch
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="awsCredentialsSecretName")
    def aws_credentials_secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        For cloudwatch exporter, the Secret name containing AWS IAM credentials (AWS_ACCESS_KEY_ID / AWS_SECRET_ACCESS_KEY)
        """
        return pulumi.get(self, "aws_credentials_secret_name")

    @aws_credentials_secret_name.setter
    def aws_credentials_secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_credentials_secret_name", value)

    @property
    @pulumi.getter(name="configurationConfigmapName")
    def configuration_configmap_name(self) -> Optional[pulumi.Input[str]]:
        """
        For cloudwatch exporter, the ConfigMap name containing Cloudwatch config.yml (Services, Dimensions, Tags used for autodiscovery...)
        """
        return pulumi.get(self, "configuration_configmap_name")

    @configuration_configmap_name.setter
    def configuration_configmap_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "configuration_configmap_name", value)

    @property
    @pulumi.getter(name="dbCheckKeys")
    def db_check_keys(self) -> Optional[pulumi.Input[str]]:
        """
        For redis exporter, the optional redis keys to monitor (example: resque:queue:stats,resque:queue:priority,resque:queue:main,resque:failed)
        """
        return pulumi.get(self, "db_check_keys")

    @db_check_keys.setter
    def db_check_keys(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_check_keys", value)

    @property
    @pulumi.getter(name="dbConnectionStringSecretName")
    def db_connection_string_secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        For mysql and postgresql exporters, the Secret name containing connection string definition (DSN)
        """
        return pulumi.get(self, "db_connection_string_secret_name")

    @db_connection_string_secret_name.setter
    def db_connection_string_secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_connection_string_secret_name", value)

    @property
    @pulumi.getter(name="dbHost")
    def db_host(self) -> Optional[pulumi.Input[str]]:
        """
        For redis, memcached, sphinx and es exporters, the db host to monitor
        """
        return pulumi.get(self, "db_host")

    @db_host.setter
    def db_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_host", value)

    @property
    @pulumi.getter(name="dbPort")
    def db_port(self) -> Optional[pulumi.Input[int]]:
        """
        For redis, memcached, sphinx and es exporters, the db port to monitor
        """
        return pulumi.get(self, "db_port")

    @db_port.setter
    def db_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "db_port", value)

    @property
    @pulumi.getter(name="extraLabel")
    def extra_label(self) -> Optional[pulumi.Input['PrometheusExporterSpecExtraLabelArgs']]:
        return pulumi.get(self, "extra_label")

    @extra_label.setter
    def extra_label(self, value: Optional[pulumi.Input['PrometheusExporterSpecExtraLabelArgs']]):
        pulumi.set(self, "extra_label", value)

    @property
    @pulumi.getter(name="grafanaDashboard")
    def grafana_dashboard(self) -> Optional[pulumi.Input['PrometheusExporterSpecGrafanaDashboardArgs']]:
        return pulumi.get(self, "grafana_dashboard")

    @grafana_dashboard.setter
    def grafana_dashboard(self, value: Optional[pulumi.Input['PrometheusExporterSpecGrafanaDashboardArgs']]):
        pulumi.set(self, "grafana_dashboard", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['PrometheusExporterSpecImageArgs']]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['PrometheusExporterSpecImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional[pulumi.Input['PrometheusExporterSpecLivenessProbeArgs']]:
        return pulumi.get(self, "liveness_probe")

    @liveness_probe.setter
    def liveness_probe(self, value: Optional[pulumi.Input['PrometheusExporterSpecLivenessProbeArgs']]):
        pulumi.set(self, "liveness_probe", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Prometheus exporter port where metrics are available (example 9150)
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional[pulumi.Input['PrometheusExporterSpecReadinessProbeArgs']]:
        return pulumi.get(self, "readiness_probe")

    @readiness_probe.setter
    def readiness_probe(self, value: Optional[pulumi.Input['PrometheusExporterSpecReadinessProbeArgs']]):
        pulumi.set(self, "readiness_probe", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['PrometheusExporterSpecResourcesArgs']]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['PrometheusExporterSpecResourcesArgs']]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="serviceMonitor")
    def service_monitor(self) -> Optional[pulumi.Input['PrometheusExporterSpecServiceMonitorArgs']]:
        return pulumi.get(self, "service_monitor")

    @service_monitor.setter
    def service_monitor(self, value: Optional[pulumi.Input['PrometheusExporterSpecServiceMonitorArgs']]):
        pulumi.set(self, "service_monitor", value)


@pulumi.input_type
class PrometheusExporterSpecExtraLabelArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: Add extra label key to all created resources (example tier)
        """
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Add extra label key to all created resources (example tier)
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class PrometheusExporterSpecGrafanaDashboardArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input['PrometheusExporterSpecGrafanaDashboardLabelArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: Create (true) or not (false) GrafanaDashboard object
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if label is not None:
            pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Create (true) or not (false) GrafanaDashboard object
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input['PrometheusExporterSpecGrafanaDashboardLabelArgs']]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input['PrometheusExporterSpecGrafanaDashboardLabelArgs']]):
        pulumi.set(self, "label", value)


@pulumi.input_type
class PrometheusExporterSpecGrafanaDashboardLabelArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: Label key used by grafana-operator for dashboard discovery
        :param pulumi.Input[str] value: Label value used by grafana-operator for dashboard discovery
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Label key used by grafana-operator for dashboard discovery
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Label value used by grafana-operator for dashboard discovery
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class PrometheusExporterSpecImageArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Prometheus exporter image name (example prom/memcached-exporter)
        :param pulumi.Input[str] version: Prometheus exporter image version (example v0.6.0)
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Prometheus exporter image name (example prom/memcached-exporter)
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Prometheus exporter image version (example v0.6.0)
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class PrometheusExporterSpecLivenessProbeArgs:
    def __init__(__self__, *,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 success_threshold: Optional[pulumi.Input[int]] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] failure_threshold: Override liveness probe failure threshold
        :param pulumi.Input[int] period_seconds: Override liveness probe period (seconds)
        :param pulumi.Input[int] success_threshold: Override liveness probe success threshold
        :param pulumi.Input[int] timeout_seconds: Override liveness probe timeout (seconds)
        """
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Override liveness probe failure threshold
        """
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Override liveness probe period (seconds)
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Override liveness probe success threshold
        """
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Override liveness probe timeout (seconds)
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class PrometheusExporterSpecReadinessProbeArgs:
    def __init__(__self__, *,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 success_threshold: Optional[pulumi.Input[int]] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] failure_threshold: Override readiness probe failure threshold
        :param pulumi.Input[int] period_seconds: Override readiness probe period (seconds)
        :param pulumi.Input[int] success_threshold: Override readiness probe success threshold
        :param pulumi.Input[int] timeout_seconds: Override readiness probe timeout (seconds)
        """
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Override readiness probe failure threshold
        """
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Override readiness probe period (seconds)
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Override readiness probe success threshold
        """
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Override readiness probe timeout (seconds)
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class PrometheusExporterSpecResourcesArgs:
    def __init__(__self__, *,
                 limits: Optional[pulumi.Input['PrometheusExporterSpecResourcesLimitsArgs']] = None,
                 requests: Optional[pulumi.Input['PrometheusExporterSpecResourcesRequestsArgs']] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['PrometheusExporterSpecResourcesLimitsArgs']]:
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['PrometheusExporterSpecResourcesLimitsArgs']]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input['PrometheusExporterSpecResourcesRequestsArgs']]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input['PrometheusExporterSpecResourcesRequestsArgs']]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class PrometheusExporterSpecResourcesLimitsArgs:
    def __init__(__self__, *,
                 cpu: Optional[Any] = None,
                 memory: Optional[Any] = None):
        """
        :param Any cpu: Override CPU limits (example 100m)
        :param Any memory: Override Memory limits (example 256Mi)
        """
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[Any]:
        """
        Override CPU limits (example 100m)
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[Any]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[Any]:
        """
        Override Memory limits (example 256Mi)
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[Any]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class PrometheusExporterSpecResourcesRequestsArgs:
    def __init__(__self__, *,
                 cpu: Optional[Any] = None,
                 memory: Optional[Any] = None):
        """
        :param Any cpu: Override CPU requests (example 50m)
        :param Any memory: Override Memory requests (example 64Mi)
        """
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[Any]:
        """
        Override CPU requests (example 50m)
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[Any]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[Any]:
        """
        Override Memory requests (example 64Mi)
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[Any]):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class PrometheusExporterSpecServiceMonitorArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 interval: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: Create (true) or not (false) ServiceMonitor object
        :param pulumi.Input[str] interval: Prometheus scrape interval (example 30s)
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Create (true) or not (false) ServiceMonitor object
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[str]]:
        """
        Prometheus scrape interval (example 30s)
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interval", value)



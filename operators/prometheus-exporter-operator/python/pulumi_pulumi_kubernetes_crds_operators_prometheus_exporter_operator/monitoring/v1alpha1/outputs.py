# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'PrometheusExporterSpec',
    'PrometheusExporterSpecExtraLabel',
    'PrometheusExporterSpecGrafanaDashboard',
    'PrometheusExporterSpecGrafanaDashboardLabel',
    'PrometheusExporterSpecImage',
    'PrometheusExporterSpecLivenessProbe',
    'PrometheusExporterSpecReadinessProbe',
    'PrometheusExporterSpecResources',
    'PrometheusExporterSpecResourcesLimits',
    'PrometheusExporterSpecResourcesRequests',
    'PrometheusExporterSpecServiceMonitor',
]

@pulumi.output_type
class PrometheusExporterSpec(dict):
    """
    PrometheusExporterSpec defines the desired state of PrometheusExporter
    """
    def __init__(__self__, *,
                 type: str,
                 aws_credentials_secret_name: Optional[str] = None,
                 configuration_configmap_name: Optional[str] = None,
                 db_check_keys: Optional[str] = None,
                 db_connection_string_secret_name: Optional[str] = None,
                 db_host: Optional[str] = None,
                 db_port: Optional[int] = None,
                 extra_label: Optional['outputs.PrometheusExporterSpecExtraLabel'] = None,
                 grafana_dashboard: Optional['outputs.PrometheusExporterSpecGrafanaDashboard'] = None,
                 image: Optional['outputs.PrometheusExporterSpecImage'] = None,
                 liveness_probe: Optional['outputs.PrometheusExporterSpecLivenessProbe'] = None,
                 port: Optional[int] = None,
                 readiness_probe: Optional['outputs.PrometheusExporterSpecReadinessProbe'] = None,
                 resources: Optional['outputs.PrometheusExporterSpecResources'] = None,
                 service_monitor: Optional['outputs.PrometheusExporterSpecServiceMonitor'] = None):
        """
        PrometheusExporterSpec defines the desired state of PrometheusExporter
        :param str type: Supported prometheus-exporter types: memcached, redis, mysql, postgresql, sphinx, es, cloudwatch
        :param str aws_credentials_secret_name: For cloudwatch exporter, the Secret name containing AWS IAM credentials (AWS_ACCESS_KEY_ID / AWS_SECRET_ACCESS_KEY)
        :param str configuration_configmap_name: For cloudwatch exporter, the ConfigMap name containing Cloudwatch config.yml (Services, Dimensions, Tags used for autodiscovery...)
        :param str db_check_keys: For redis exporter, the optional redis keys to monitor (example: resque:queue:stats,resque:queue:priority,resque:queue:main,resque:failed)
        :param str db_connection_string_secret_name: For mysql and postgresql exporters, the Secret name containing connection string definition (DSN)
        :param str db_host: For redis, memcached, sphinx and es exporters, the db host to monitor
        :param int db_port: For redis, memcached, sphinx and es exporters, the db port to monitor
        :param int port: Prometheus exporter port where metrics are available (example 9150)
        """
        pulumi.set(__self__, "type", type)
        if aws_credentials_secret_name is not None:
            pulumi.set(__self__, "aws_credentials_secret_name", aws_credentials_secret_name)
        if configuration_configmap_name is not None:
            pulumi.set(__self__, "configuration_configmap_name", configuration_configmap_name)
        if db_check_keys is not None:
            pulumi.set(__self__, "db_check_keys", db_check_keys)
        if db_connection_string_secret_name is not None:
            pulumi.set(__self__, "db_connection_string_secret_name", db_connection_string_secret_name)
        if db_host is not None:
            pulumi.set(__self__, "db_host", db_host)
        if db_port is not None:
            pulumi.set(__self__, "db_port", db_port)
        if extra_label is not None:
            pulumi.set(__self__, "extra_label", extra_label)
        if grafana_dashboard is not None:
            pulumi.set(__self__, "grafana_dashboard", grafana_dashboard)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if service_monitor is not None:
            pulumi.set(__self__, "service_monitor", service_monitor)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Supported prometheus-exporter types: memcached, redis, mysql, postgresql, sphinx, es, cloudwatch
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="awsCredentialsSecretName")
    def aws_credentials_secret_name(self) -> Optional[str]:
        """
        For cloudwatch exporter, the Secret name containing AWS IAM credentials (AWS_ACCESS_KEY_ID / AWS_SECRET_ACCESS_KEY)
        """
        return pulumi.get(self, "aws_credentials_secret_name")

    @property
    @pulumi.getter(name="configurationConfigmapName")
    def configuration_configmap_name(self) -> Optional[str]:
        """
        For cloudwatch exporter, the ConfigMap name containing Cloudwatch config.yml (Services, Dimensions, Tags used for autodiscovery...)
        """
        return pulumi.get(self, "configuration_configmap_name")

    @property
    @pulumi.getter(name="dbCheckKeys")
    def db_check_keys(self) -> Optional[str]:
        """
        For redis exporter, the optional redis keys to monitor (example: resque:queue:stats,resque:queue:priority,resque:queue:main,resque:failed)
        """
        return pulumi.get(self, "db_check_keys")

    @property
    @pulumi.getter(name="dbConnectionStringSecretName")
    def db_connection_string_secret_name(self) -> Optional[str]:
        """
        For mysql and postgresql exporters, the Secret name containing connection string definition (DSN)
        """
        return pulumi.get(self, "db_connection_string_secret_name")

    @property
    @pulumi.getter(name="dbHost")
    def db_host(self) -> Optional[str]:
        """
        For redis, memcached, sphinx and es exporters, the db host to monitor
        """
        return pulumi.get(self, "db_host")

    @property
    @pulumi.getter(name="dbPort")
    def db_port(self) -> Optional[int]:
        """
        For redis, memcached, sphinx and es exporters, the db port to monitor
        """
        return pulumi.get(self, "db_port")

    @property
    @pulumi.getter(name="extraLabel")
    def extra_label(self) -> Optional['outputs.PrometheusExporterSpecExtraLabel']:
        return pulumi.get(self, "extra_label")

    @property
    @pulumi.getter(name="grafanaDashboard")
    def grafana_dashboard(self) -> Optional['outputs.PrometheusExporterSpecGrafanaDashboard']:
        return pulumi.get(self, "grafana_dashboard")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.PrometheusExporterSpecImage']:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional['outputs.PrometheusExporterSpecLivenessProbe']:
        return pulumi.get(self, "liveness_probe")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Prometheus exporter port where metrics are available (example 9150)
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional['outputs.PrometheusExporterSpecReadinessProbe']:
        return pulumi.get(self, "readiness_probe")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.PrometheusExporterSpecResources']:
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="serviceMonitor")
    def service_monitor(self) -> Optional['outputs.PrometheusExporterSpecServiceMonitor']:
        return pulumi.get(self, "service_monitor")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PrometheusExporterSpecExtraLabel(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None):
        """
        :param str key: Add extra label key to all created resources (example tier)
        """
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Add extra label key to all created resources (example tier)
        """
        return pulumi.get(self, "key")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PrometheusExporterSpecGrafanaDashboard(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 label: Optional['outputs.PrometheusExporterSpecGrafanaDashboardLabel'] = None):
        """
        :param bool enabled: Create (true) or not (false) GrafanaDashboard object
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if label is not None:
            pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Create (true) or not (false) GrafanaDashboard object
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def label(self) -> Optional['outputs.PrometheusExporterSpecGrafanaDashboardLabel']:
        return pulumi.get(self, "label")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PrometheusExporterSpecGrafanaDashboardLabel(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str key: Label key used by grafana-operator for dashboard discovery
        :param str value: Label value used by grafana-operator for dashboard discovery
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Label key used by grafana-operator for dashboard discovery
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Label value used by grafana-operator for dashboard discovery
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PrometheusExporterSpecImage(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str name: Prometheus exporter image name (example prom/memcached-exporter)
        :param str version: Prometheus exporter image version (example v0.6.0)
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Prometheus exporter image name (example prom/memcached-exporter)
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Prometheus exporter image version (example v0.6.0)
        """
        return pulumi.get(self, "version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PrometheusExporterSpecLivenessProbe(dict):
    def __init__(__self__, *,
                 failure_threshold: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 timeout_seconds: Optional[int] = None):
        """
        :param int failure_threshold: Override liveness probe failure threshold
        :param int period_seconds: Override liveness probe period (seconds)
        :param int success_threshold: Override liveness probe success threshold
        :param int timeout_seconds: Override liveness probe timeout (seconds)
        """
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        """
        Override liveness probe failure threshold
        """
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        """
        Override liveness probe period (seconds)
        """
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        """
        Override liveness probe success threshold
        """
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        """
        Override liveness probe timeout (seconds)
        """
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PrometheusExporterSpecReadinessProbe(dict):
    def __init__(__self__, *,
                 failure_threshold: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 timeout_seconds: Optional[int] = None):
        """
        :param int failure_threshold: Override readiness probe failure threshold
        :param int period_seconds: Override readiness probe period (seconds)
        :param int success_threshold: Override readiness probe success threshold
        :param int timeout_seconds: Override readiness probe timeout (seconds)
        """
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        """
        Override readiness probe failure threshold
        """
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        """
        Override readiness probe period (seconds)
        """
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        """
        Override readiness probe success threshold
        """
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        """
        Override readiness probe timeout (seconds)
        """
        return pulumi.get(self, "timeout_seconds")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PrometheusExporterSpecResources(dict):
    def __init__(__self__, *,
                 limits: Optional['outputs.PrometheusExporterSpecResourcesLimits'] = None,
                 requests: Optional['outputs.PrometheusExporterSpecResourcesRequests'] = None):
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.PrometheusExporterSpecResourcesLimits']:
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional['outputs.PrometheusExporterSpecResourcesRequests']:
        return pulumi.get(self, "requests")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PrometheusExporterSpecResourcesLimits(dict):
    def __init__(__self__, *,
                 cpu: Optional[Any] = None,
                 memory: Optional[Any] = None):
        """
        :param Any cpu: Override CPU limits (example 100m)
        :param Any memory: Override Memory limits (example 256Mi)
        """
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[Any]:
        """
        Override CPU limits (example 100m)
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def memory(self) -> Optional[Any]:
        """
        Override Memory limits (example 256Mi)
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PrometheusExporterSpecResourcesRequests(dict):
    def __init__(__self__, *,
                 cpu: Optional[Any] = None,
                 memory: Optional[Any] = None):
        """
        :param Any cpu: Override CPU requests (example 50m)
        :param Any memory: Override Memory requests (example 64Mi)
        """
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[Any]:
        """
        Override CPU requests (example 50m)
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def memory(self) -> Optional[Any]:
        """
        Override Memory requests (example 64Mi)
        """
        return pulumi.get(self, "memory")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class PrometheusExporterSpecServiceMonitor(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 interval: Optional[str] = None):
        """
        :param bool enabled: Create (true) or not (false) ServiceMonitor object
        :param str interval: Prometheus scrape interval (example 30s)
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Create (true) or not (false) ServiceMonitor object
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def interval(self) -> Optional[str]:
        """
        Prometheus scrape interval (example 30s)
        """
        return pulumi.get(self, "interval")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



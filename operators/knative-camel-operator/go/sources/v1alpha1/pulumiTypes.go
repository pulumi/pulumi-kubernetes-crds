// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type CamelSourceType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	Spec       *CamelSourceSpec   `pulumi:"spec"`
	Status     *CamelSourceStatus `pulumi:"status"`
}

// CamelSourceTypeInput is an input type that accepts CamelSourceTypeArgs and CamelSourceTypeOutput values.
// You can construct a concrete instance of `CamelSourceTypeInput` via:
//
//          CamelSourceTypeArgs{...}
type CamelSourceTypeInput interface {
	pulumi.Input

	ToCamelSourceTypeOutput() CamelSourceTypeOutput
	ToCamelSourceTypeOutputWithContext(context.Context) CamelSourceTypeOutput
}

type CamelSourceTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Spec       CamelSourceSpecPtrInput   `pulumi:"spec"`
	Status     CamelSourceStatusPtrInput `pulumi:"status"`
}

func (CamelSourceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CamelSourceType)(nil)).Elem()
}

func (i CamelSourceTypeArgs) ToCamelSourceTypeOutput() CamelSourceTypeOutput {
	return i.ToCamelSourceTypeOutputWithContext(context.Background())
}

func (i CamelSourceTypeArgs) ToCamelSourceTypeOutputWithContext(ctx context.Context) CamelSourceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CamelSourceTypeOutput)
}

type CamelSourceTypeOutput struct{ *pulumi.OutputState }

func (CamelSourceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CamelSourceType)(nil)).Elem()
}

func (o CamelSourceTypeOutput) ToCamelSourceTypeOutput() CamelSourceTypeOutput {
	return o
}

func (o CamelSourceTypeOutput) ToCamelSourceTypeOutputWithContext(ctx context.Context) CamelSourceTypeOutput {
	return o
}

func (o CamelSourceTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CamelSourceType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o CamelSourceTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CamelSourceType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o CamelSourceTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v CamelSourceType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o CamelSourceTypeOutput) Spec() CamelSourceSpecPtrOutput {
	return o.ApplyT(func(v CamelSourceType) *CamelSourceSpec { return v.Spec }).(CamelSourceSpecPtrOutput)
}

func (o CamelSourceTypeOutput) Status() CamelSourceStatusPtrOutput {
	return o.ApplyT(func(v CamelSourceType) *CamelSourceStatus { return v.Status }).(CamelSourceStatusPtrOutput)
}

type CamelSourceMetadata struct {
}

// CamelSourceMetadataInput is an input type that accepts CamelSourceMetadataArgs and CamelSourceMetadataOutput values.
// You can construct a concrete instance of `CamelSourceMetadataInput` via:
//
//          CamelSourceMetadataArgs{...}
type CamelSourceMetadataInput interface {
	pulumi.Input

	ToCamelSourceMetadataOutput() CamelSourceMetadataOutput
	ToCamelSourceMetadataOutputWithContext(context.Context) CamelSourceMetadataOutput
}

type CamelSourceMetadataArgs struct {
}

func (CamelSourceMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CamelSourceMetadata)(nil)).Elem()
}

func (i CamelSourceMetadataArgs) ToCamelSourceMetadataOutput() CamelSourceMetadataOutput {
	return i.ToCamelSourceMetadataOutputWithContext(context.Background())
}

func (i CamelSourceMetadataArgs) ToCamelSourceMetadataOutputWithContext(ctx context.Context) CamelSourceMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CamelSourceMetadataOutput)
}

type CamelSourceMetadataOutput struct{ *pulumi.OutputState }

func (CamelSourceMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CamelSourceMetadata)(nil)).Elem()
}

func (o CamelSourceMetadataOutput) ToCamelSourceMetadataOutput() CamelSourceMetadataOutput {
	return o
}

func (o CamelSourceMetadataOutput) ToCamelSourceMetadataOutputWithContext(ctx context.Context) CamelSourceMetadataOutput {
	return o
}

type CamelSourceSpec struct {
	// Defines overrides to control modifications of the event sent to the sink.
	CeOverrides map[string]interface{} `pulumi:"ceOverrides"`
	// Reference to an object that will resolve to a domain name to use as the sink.
	Sink   map[string]interface{} `pulumi:"sink"`
	Source CamelSourceSpecSource  `pulumi:"source"`
}

// CamelSourceSpecInput is an input type that accepts CamelSourceSpecArgs and CamelSourceSpecOutput values.
// You can construct a concrete instance of `CamelSourceSpecInput` via:
//
//          CamelSourceSpecArgs{...}
type CamelSourceSpecInput interface {
	pulumi.Input

	ToCamelSourceSpecOutput() CamelSourceSpecOutput
	ToCamelSourceSpecOutputWithContext(context.Context) CamelSourceSpecOutput
}

type CamelSourceSpecArgs struct {
	// Defines overrides to control modifications of the event sent to the sink.
	CeOverrides pulumi.MapInput `pulumi:"ceOverrides"`
	// Reference to an object that will resolve to a domain name to use as the sink.
	Sink   pulumi.MapInput            `pulumi:"sink"`
	Source CamelSourceSpecSourceInput `pulumi:"source"`
}

func (CamelSourceSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CamelSourceSpec)(nil)).Elem()
}

func (i CamelSourceSpecArgs) ToCamelSourceSpecOutput() CamelSourceSpecOutput {
	return i.ToCamelSourceSpecOutputWithContext(context.Background())
}

func (i CamelSourceSpecArgs) ToCamelSourceSpecOutputWithContext(ctx context.Context) CamelSourceSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CamelSourceSpecOutput)
}

func (i CamelSourceSpecArgs) ToCamelSourceSpecPtrOutput() CamelSourceSpecPtrOutput {
	return i.ToCamelSourceSpecPtrOutputWithContext(context.Background())
}

func (i CamelSourceSpecArgs) ToCamelSourceSpecPtrOutputWithContext(ctx context.Context) CamelSourceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CamelSourceSpecOutput).ToCamelSourceSpecPtrOutputWithContext(ctx)
}

// CamelSourceSpecPtrInput is an input type that accepts CamelSourceSpecArgs, CamelSourceSpecPtr and CamelSourceSpecPtrOutput values.
// You can construct a concrete instance of `CamelSourceSpecPtrInput` via:
//
//          CamelSourceSpecArgs{...}
//
//  or:
//
//          nil
type CamelSourceSpecPtrInput interface {
	pulumi.Input

	ToCamelSourceSpecPtrOutput() CamelSourceSpecPtrOutput
	ToCamelSourceSpecPtrOutputWithContext(context.Context) CamelSourceSpecPtrOutput
}

type camelSourceSpecPtrType CamelSourceSpecArgs

func CamelSourceSpecPtr(v *CamelSourceSpecArgs) CamelSourceSpecPtrInput {
	return (*camelSourceSpecPtrType)(v)
}

func (*camelSourceSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CamelSourceSpec)(nil)).Elem()
}

func (i *camelSourceSpecPtrType) ToCamelSourceSpecPtrOutput() CamelSourceSpecPtrOutput {
	return i.ToCamelSourceSpecPtrOutputWithContext(context.Background())
}

func (i *camelSourceSpecPtrType) ToCamelSourceSpecPtrOutputWithContext(ctx context.Context) CamelSourceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CamelSourceSpecPtrOutput)
}

type CamelSourceSpecOutput struct{ *pulumi.OutputState }

func (CamelSourceSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CamelSourceSpec)(nil)).Elem()
}

func (o CamelSourceSpecOutput) ToCamelSourceSpecOutput() CamelSourceSpecOutput {
	return o
}

func (o CamelSourceSpecOutput) ToCamelSourceSpecOutputWithContext(ctx context.Context) CamelSourceSpecOutput {
	return o
}

func (o CamelSourceSpecOutput) ToCamelSourceSpecPtrOutput() CamelSourceSpecPtrOutput {
	return o.ToCamelSourceSpecPtrOutputWithContext(context.Background())
}

func (o CamelSourceSpecOutput) ToCamelSourceSpecPtrOutputWithContext(ctx context.Context) CamelSourceSpecPtrOutput {
	return o.ApplyT(func(v CamelSourceSpec) *CamelSourceSpec {
		return &v
	}).(CamelSourceSpecPtrOutput)
}

// Defines overrides to control modifications of the event sent to the sink.
func (o CamelSourceSpecOutput) CeOverrides() pulumi.MapOutput {
	return o.ApplyT(func(v CamelSourceSpec) map[string]interface{} { return v.CeOverrides }).(pulumi.MapOutput)
}

// Reference to an object that will resolve to a domain name to use as the sink.
func (o CamelSourceSpecOutput) Sink() pulumi.MapOutput {
	return o.ApplyT(func(v CamelSourceSpec) map[string]interface{} { return v.Sink }).(pulumi.MapOutput)
}

func (o CamelSourceSpecOutput) Source() CamelSourceSpecSourceOutput {
	return o.ApplyT(func(v CamelSourceSpec) CamelSourceSpecSource { return v.Source }).(CamelSourceSpecSourceOutput)
}

type CamelSourceSpecPtrOutput struct{ *pulumi.OutputState }

func (CamelSourceSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CamelSourceSpec)(nil)).Elem()
}

func (o CamelSourceSpecPtrOutput) ToCamelSourceSpecPtrOutput() CamelSourceSpecPtrOutput {
	return o
}

func (o CamelSourceSpecPtrOutput) ToCamelSourceSpecPtrOutputWithContext(ctx context.Context) CamelSourceSpecPtrOutput {
	return o
}

func (o CamelSourceSpecPtrOutput) Elem() CamelSourceSpecOutput {
	return o.ApplyT(func(v *CamelSourceSpec) CamelSourceSpec { return *v }).(CamelSourceSpecOutput)
}

// Defines overrides to control modifications of the event sent to the sink.
func (o CamelSourceSpecPtrOutput) CeOverrides() pulumi.MapOutput {
	return o.ApplyT(func(v *CamelSourceSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.CeOverrides
	}).(pulumi.MapOutput)
}

// Reference to an object that will resolve to a domain name to use as the sink.
func (o CamelSourceSpecPtrOutput) Sink() pulumi.MapOutput {
	return o.ApplyT(func(v *CamelSourceSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Sink
	}).(pulumi.MapOutput)
}

func (o CamelSourceSpecPtrOutput) Source() CamelSourceSpecSourcePtrOutput {
	return o.ApplyT(func(v *CamelSourceSpec) *CamelSourceSpecSource {
		if v == nil {
			return nil
		}
		return &v.Source
	}).(CamelSourceSpecSourcePtrOutput)
}

// Defines overrides to control modifications of the event sent to the sink.
type CamelSourceSpecCeOverrides struct {
}

// CamelSourceSpecCeOverridesInput is an input type that accepts CamelSourceSpecCeOverridesArgs and CamelSourceSpecCeOverridesOutput values.
// You can construct a concrete instance of `CamelSourceSpecCeOverridesInput` via:
//
//          CamelSourceSpecCeOverridesArgs{...}
type CamelSourceSpecCeOverridesInput interface {
	pulumi.Input

	ToCamelSourceSpecCeOverridesOutput() CamelSourceSpecCeOverridesOutput
	ToCamelSourceSpecCeOverridesOutputWithContext(context.Context) CamelSourceSpecCeOverridesOutput
}

// Defines overrides to control modifications of the event sent to the sink.
type CamelSourceSpecCeOverridesArgs struct {
}

func (CamelSourceSpecCeOverridesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CamelSourceSpecCeOverrides)(nil)).Elem()
}

func (i CamelSourceSpecCeOverridesArgs) ToCamelSourceSpecCeOverridesOutput() CamelSourceSpecCeOverridesOutput {
	return i.ToCamelSourceSpecCeOverridesOutputWithContext(context.Background())
}

func (i CamelSourceSpecCeOverridesArgs) ToCamelSourceSpecCeOverridesOutputWithContext(ctx context.Context) CamelSourceSpecCeOverridesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CamelSourceSpecCeOverridesOutput)
}

// Defines overrides to control modifications of the event sent to the sink.
type CamelSourceSpecCeOverridesOutput struct{ *pulumi.OutputState }

func (CamelSourceSpecCeOverridesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CamelSourceSpecCeOverrides)(nil)).Elem()
}

func (o CamelSourceSpecCeOverridesOutput) ToCamelSourceSpecCeOverridesOutput() CamelSourceSpecCeOverridesOutput {
	return o
}

func (o CamelSourceSpecCeOverridesOutput) ToCamelSourceSpecCeOverridesOutputWithContext(ctx context.Context) CamelSourceSpecCeOverridesOutput {
	return o
}

// Reference to an object that will resolve to a domain name to use as the sink.
type CamelSourceSpecSink struct {
}

// CamelSourceSpecSinkInput is an input type that accepts CamelSourceSpecSinkArgs and CamelSourceSpecSinkOutput values.
// You can construct a concrete instance of `CamelSourceSpecSinkInput` via:
//
//          CamelSourceSpecSinkArgs{...}
type CamelSourceSpecSinkInput interface {
	pulumi.Input

	ToCamelSourceSpecSinkOutput() CamelSourceSpecSinkOutput
	ToCamelSourceSpecSinkOutputWithContext(context.Context) CamelSourceSpecSinkOutput
}

// Reference to an object that will resolve to a domain name to use as the sink.
type CamelSourceSpecSinkArgs struct {
}

func (CamelSourceSpecSinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CamelSourceSpecSink)(nil)).Elem()
}

func (i CamelSourceSpecSinkArgs) ToCamelSourceSpecSinkOutput() CamelSourceSpecSinkOutput {
	return i.ToCamelSourceSpecSinkOutputWithContext(context.Background())
}

func (i CamelSourceSpecSinkArgs) ToCamelSourceSpecSinkOutputWithContext(ctx context.Context) CamelSourceSpecSinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CamelSourceSpecSinkOutput)
}

// Reference to an object that will resolve to a domain name to use as the sink.
type CamelSourceSpecSinkOutput struct{ *pulumi.OutputState }

func (CamelSourceSpecSinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CamelSourceSpecSink)(nil)).Elem()
}

func (o CamelSourceSpecSinkOutput) ToCamelSourceSpecSinkOutput() CamelSourceSpecSinkOutput {
	return o
}

func (o CamelSourceSpecSinkOutput) ToCamelSourceSpecSinkOutputWithContext(ctx context.Context) CamelSourceSpecSinkOutput {
	return o
}

type CamelSourceSpecSource struct {
	Flow        map[string]interface{} `pulumi:"flow"`
	Integration map[string]interface{} `pulumi:"integration"`
}

// CamelSourceSpecSourceInput is an input type that accepts CamelSourceSpecSourceArgs and CamelSourceSpecSourceOutput values.
// You can construct a concrete instance of `CamelSourceSpecSourceInput` via:
//
//          CamelSourceSpecSourceArgs{...}
type CamelSourceSpecSourceInput interface {
	pulumi.Input

	ToCamelSourceSpecSourceOutput() CamelSourceSpecSourceOutput
	ToCamelSourceSpecSourceOutputWithContext(context.Context) CamelSourceSpecSourceOutput
}

type CamelSourceSpecSourceArgs struct {
	Flow        pulumi.MapInput `pulumi:"flow"`
	Integration pulumi.MapInput `pulumi:"integration"`
}

func (CamelSourceSpecSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CamelSourceSpecSource)(nil)).Elem()
}

func (i CamelSourceSpecSourceArgs) ToCamelSourceSpecSourceOutput() CamelSourceSpecSourceOutput {
	return i.ToCamelSourceSpecSourceOutputWithContext(context.Background())
}

func (i CamelSourceSpecSourceArgs) ToCamelSourceSpecSourceOutputWithContext(ctx context.Context) CamelSourceSpecSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CamelSourceSpecSourceOutput)
}

func (i CamelSourceSpecSourceArgs) ToCamelSourceSpecSourcePtrOutput() CamelSourceSpecSourcePtrOutput {
	return i.ToCamelSourceSpecSourcePtrOutputWithContext(context.Background())
}

func (i CamelSourceSpecSourceArgs) ToCamelSourceSpecSourcePtrOutputWithContext(ctx context.Context) CamelSourceSpecSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CamelSourceSpecSourceOutput).ToCamelSourceSpecSourcePtrOutputWithContext(ctx)
}

// CamelSourceSpecSourcePtrInput is an input type that accepts CamelSourceSpecSourceArgs, CamelSourceSpecSourcePtr and CamelSourceSpecSourcePtrOutput values.
// You can construct a concrete instance of `CamelSourceSpecSourcePtrInput` via:
//
//          CamelSourceSpecSourceArgs{...}
//
//  or:
//
//          nil
type CamelSourceSpecSourcePtrInput interface {
	pulumi.Input

	ToCamelSourceSpecSourcePtrOutput() CamelSourceSpecSourcePtrOutput
	ToCamelSourceSpecSourcePtrOutputWithContext(context.Context) CamelSourceSpecSourcePtrOutput
}

type camelSourceSpecSourcePtrType CamelSourceSpecSourceArgs

func CamelSourceSpecSourcePtr(v *CamelSourceSpecSourceArgs) CamelSourceSpecSourcePtrInput {
	return (*camelSourceSpecSourcePtrType)(v)
}

func (*camelSourceSpecSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CamelSourceSpecSource)(nil)).Elem()
}

func (i *camelSourceSpecSourcePtrType) ToCamelSourceSpecSourcePtrOutput() CamelSourceSpecSourcePtrOutput {
	return i.ToCamelSourceSpecSourcePtrOutputWithContext(context.Background())
}

func (i *camelSourceSpecSourcePtrType) ToCamelSourceSpecSourcePtrOutputWithContext(ctx context.Context) CamelSourceSpecSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CamelSourceSpecSourcePtrOutput)
}

type CamelSourceSpecSourceOutput struct{ *pulumi.OutputState }

func (CamelSourceSpecSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CamelSourceSpecSource)(nil)).Elem()
}

func (o CamelSourceSpecSourceOutput) ToCamelSourceSpecSourceOutput() CamelSourceSpecSourceOutput {
	return o
}

func (o CamelSourceSpecSourceOutput) ToCamelSourceSpecSourceOutputWithContext(ctx context.Context) CamelSourceSpecSourceOutput {
	return o
}

func (o CamelSourceSpecSourceOutput) ToCamelSourceSpecSourcePtrOutput() CamelSourceSpecSourcePtrOutput {
	return o.ToCamelSourceSpecSourcePtrOutputWithContext(context.Background())
}

func (o CamelSourceSpecSourceOutput) ToCamelSourceSpecSourcePtrOutputWithContext(ctx context.Context) CamelSourceSpecSourcePtrOutput {
	return o.ApplyT(func(v CamelSourceSpecSource) *CamelSourceSpecSource {
		return &v
	}).(CamelSourceSpecSourcePtrOutput)
}
func (o CamelSourceSpecSourceOutput) Flow() pulumi.MapOutput {
	return o.ApplyT(func(v CamelSourceSpecSource) map[string]interface{} { return v.Flow }).(pulumi.MapOutput)
}

func (o CamelSourceSpecSourceOutput) Integration() pulumi.MapOutput {
	return o.ApplyT(func(v CamelSourceSpecSource) map[string]interface{} { return v.Integration }).(pulumi.MapOutput)
}

type CamelSourceSpecSourcePtrOutput struct{ *pulumi.OutputState }

func (CamelSourceSpecSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CamelSourceSpecSource)(nil)).Elem()
}

func (o CamelSourceSpecSourcePtrOutput) ToCamelSourceSpecSourcePtrOutput() CamelSourceSpecSourcePtrOutput {
	return o
}

func (o CamelSourceSpecSourcePtrOutput) ToCamelSourceSpecSourcePtrOutputWithContext(ctx context.Context) CamelSourceSpecSourcePtrOutput {
	return o
}

func (o CamelSourceSpecSourcePtrOutput) Elem() CamelSourceSpecSourceOutput {
	return o.ApplyT(func(v *CamelSourceSpecSource) CamelSourceSpecSource { return *v }).(CamelSourceSpecSourceOutput)
}

func (o CamelSourceSpecSourcePtrOutput) Flow() pulumi.MapOutput {
	return o.ApplyT(func(v *CamelSourceSpecSource) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Flow
	}).(pulumi.MapOutput)
}

func (o CamelSourceSpecSourcePtrOutput) Integration() pulumi.MapOutput {
	return o.ApplyT(func(v *CamelSourceSpecSource) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Integration
	}).(pulumi.MapOutput)
}

type CamelSourceSpecSourceFlow struct {
}

// CamelSourceSpecSourceFlowInput is an input type that accepts CamelSourceSpecSourceFlowArgs and CamelSourceSpecSourceFlowOutput values.
// You can construct a concrete instance of `CamelSourceSpecSourceFlowInput` via:
//
//          CamelSourceSpecSourceFlowArgs{...}
type CamelSourceSpecSourceFlowInput interface {
	pulumi.Input

	ToCamelSourceSpecSourceFlowOutput() CamelSourceSpecSourceFlowOutput
	ToCamelSourceSpecSourceFlowOutputWithContext(context.Context) CamelSourceSpecSourceFlowOutput
}

type CamelSourceSpecSourceFlowArgs struct {
}

func (CamelSourceSpecSourceFlowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CamelSourceSpecSourceFlow)(nil)).Elem()
}

func (i CamelSourceSpecSourceFlowArgs) ToCamelSourceSpecSourceFlowOutput() CamelSourceSpecSourceFlowOutput {
	return i.ToCamelSourceSpecSourceFlowOutputWithContext(context.Background())
}

func (i CamelSourceSpecSourceFlowArgs) ToCamelSourceSpecSourceFlowOutputWithContext(ctx context.Context) CamelSourceSpecSourceFlowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CamelSourceSpecSourceFlowOutput)
}

type CamelSourceSpecSourceFlowOutput struct{ *pulumi.OutputState }

func (CamelSourceSpecSourceFlowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CamelSourceSpecSourceFlow)(nil)).Elem()
}

func (o CamelSourceSpecSourceFlowOutput) ToCamelSourceSpecSourceFlowOutput() CamelSourceSpecSourceFlowOutput {
	return o
}

func (o CamelSourceSpecSourceFlowOutput) ToCamelSourceSpecSourceFlowOutputWithContext(ctx context.Context) CamelSourceSpecSourceFlowOutput {
	return o
}

type CamelSourceSpecSourceIntegration struct {
}

// CamelSourceSpecSourceIntegrationInput is an input type that accepts CamelSourceSpecSourceIntegrationArgs and CamelSourceSpecSourceIntegrationOutput values.
// You can construct a concrete instance of `CamelSourceSpecSourceIntegrationInput` via:
//
//          CamelSourceSpecSourceIntegrationArgs{...}
type CamelSourceSpecSourceIntegrationInput interface {
	pulumi.Input

	ToCamelSourceSpecSourceIntegrationOutput() CamelSourceSpecSourceIntegrationOutput
	ToCamelSourceSpecSourceIntegrationOutputWithContext(context.Context) CamelSourceSpecSourceIntegrationOutput
}

type CamelSourceSpecSourceIntegrationArgs struct {
}

func (CamelSourceSpecSourceIntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CamelSourceSpecSourceIntegration)(nil)).Elem()
}

func (i CamelSourceSpecSourceIntegrationArgs) ToCamelSourceSpecSourceIntegrationOutput() CamelSourceSpecSourceIntegrationOutput {
	return i.ToCamelSourceSpecSourceIntegrationOutputWithContext(context.Background())
}

func (i CamelSourceSpecSourceIntegrationArgs) ToCamelSourceSpecSourceIntegrationOutputWithContext(ctx context.Context) CamelSourceSpecSourceIntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CamelSourceSpecSourceIntegrationOutput)
}

type CamelSourceSpecSourceIntegrationOutput struct{ *pulumi.OutputState }

func (CamelSourceSpecSourceIntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CamelSourceSpecSourceIntegration)(nil)).Elem()
}

func (o CamelSourceSpecSourceIntegrationOutput) ToCamelSourceSpecSourceIntegrationOutput() CamelSourceSpecSourceIntegrationOutput {
	return o
}

func (o CamelSourceSpecSourceIntegrationOutput) ToCamelSourceSpecSourceIntegrationOutputWithContext(ctx context.Context) CamelSourceSpecSourceIntegrationOutput {
	return o
}

type CamelSourceStatus struct {
	Conditions []CamelSourceStatusConditions `pulumi:"conditions"`
	SinkUri    *string                       `pulumi:"sinkUri"`
}

// CamelSourceStatusInput is an input type that accepts CamelSourceStatusArgs and CamelSourceStatusOutput values.
// You can construct a concrete instance of `CamelSourceStatusInput` via:
//
//          CamelSourceStatusArgs{...}
type CamelSourceStatusInput interface {
	pulumi.Input

	ToCamelSourceStatusOutput() CamelSourceStatusOutput
	ToCamelSourceStatusOutputWithContext(context.Context) CamelSourceStatusOutput
}

type CamelSourceStatusArgs struct {
	Conditions CamelSourceStatusConditionsArrayInput `pulumi:"conditions"`
	SinkUri    pulumi.StringPtrInput                 `pulumi:"sinkUri"`
}

func (CamelSourceStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CamelSourceStatus)(nil)).Elem()
}

func (i CamelSourceStatusArgs) ToCamelSourceStatusOutput() CamelSourceStatusOutput {
	return i.ToCamelSourceStatusOutputWithContext(context.Background())
}

func (i CamelSourceStatusArgs) ToCamelSourceStatusOutputWithContext(ctx context.Context) CamelSourceStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CamelSourceStatusOutput)
}

func (i CamelSourceStatusArgs) ToCamelSourceStatusPtrOutput() CamelSourceStatusPtrOutput {
	return i.ToCamelSourceStatusPtrOutputWithContext(context.Background())
}

func (i CamelSourceStatusArgs) ToCamelSourceStatusPtrOutputWithContext(ctx context.Context) CamelSourceStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CamelSourceStatusOutput).ToCamelSourceStatusPtrOutputWithContext(ctx)
}

// CamelSourceStatusPtrInput is an input type that accepts CamelSourceStatusArgs, CamelSourceStatusPtr and CamelSourceStatusPtrOutput values.
// You can construct a concrete instance of `CamelSourceStatusPtrInput` via:
//
//          CamelSourceStatusArgs{...}
//
//  or:
//
//          nil
type CamelSourceStatusPtrInput interface {
	pulumi.Input

	ToCamelSourceStatusPtrOutput() CamelSourceStatusPtrOutput
	ToCamelSourceStatusPtrOutputWithContext(context.Context) CamelSourceStatusPtrOutput
}

type camelSourceStatusPtrType CamelSourceStatusArgs

func CamelSourceStatusPtr(v *CamelSourceStatusArgs) CamelSourceStatusPtrInput {
	return (*camelSourceStatusPtrType)(v)
}

func (*camelSourceStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CamelSourceStatus)(nil)).Elem()
}

func (i *camelSourceStatusPtrType) ToCamelSourceStatusPtrOutput() CamelSourceStatusPtrOutput {
	return i.ToCamelSourceStatusPtrOutputWithContext(context.Background())
}

func (i *camelSourceStatusPtrType) ToCamelSourceStatusPtrOutputWithContext(ctx context.Context) CamelSourceStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CamelSourceStatusPtrOutput)
}

type CamelSourceStatusOutput struct{ *pulumi.OutputState }

func (CamelSourceStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CamelSourceStatus)(nil)).Elem()
}

func (o CamelSourceStatusOutput) ToCamelSourceStatusOutput() CamelSourceStatusOutput {
	return o
}

func (o CamelSourceStatusOutput) ToCamelSourceStatusOutputWithContext(ctx context.Context) CamelSourceStatusOutput {
	return o
}

func (o CamelSourceStatusOutput) ToCamelSourceStatusPtrOutput() CamelSourceStatusPtrOutput {
	return o.ToCamelSourceStatusPtrOutputWithContext(context.Background())
}

func (o CamelSourceStatusOutput) ToCamelSourceStatusPtrOutputWithContext(ctx context.Context) CamelSourceStatusPtrOutput {
	return o.ApplyT(func(v CamelSourceStatus) *CamelSourceStatus {
		return &v
	}).(CamelSourceStatusPtrOutput)
}
func (o CamelSourceStatusOutput) Conditions() CamelSourceStatusConditionsArrayOutput {
	return o.ApplyT(func(v CamelSourceStatus) []CamelSourceStatusConditions { return v.Conditions }).(CamelSourceStatusConditionsArrayOutput)
}

func (o CamelSourceStatusOutput) SinkUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CamelSourceStatus) *string { return v.SinkUri }).(pulumi.StringPtrOutput)
}

type CamelSourceStatusPtrOutput struct{ *pulumi.OutputState }

func (CamelSourceStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CamelSourceStatus)(nil)).Elem()
}

func (o CamelSourceStatusPtrOutput) ToCamelSourceStatusPtrOutput() CamelSourceStatusPtrOutput {
	return o
}

func (o CamelSourceStatusPtrOutput) ToCamelSourceStatusPtrOutputWithContext(ctx context.Context) CamelSourceStatusPtrOutput {
	return o
}

func (o CamelSourceStatusPtrOutput) Elem() CamelSourceStatusOutput {
	return o.ApplyT(func(v *CamelSourceStatus) CamelSourceStatus { return *v }).(CamelSourceStatusOutput)
}

func (o CamelSourceStatusPtrOutput) Conditions() CamelSourceStatusConditionsArrayOutput {
	return o.ApplyT(func(v *CamelSourceStatus) []CamelSourceStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(CamelSourceStatusConditionsArrayOutput)
}

func (o CamelSourceStatusPtrOutput) SinkUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CamelSourceStatus) *string {
		if v == nil {
			return nil
		}
		return v.SinkUri
	}).(pulumi.StringPtrOutput)
}

type CamelSourceStatusConditions struct {
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	Message            *string `pulumi:"message"`
	Reason             *string `pulumi:"reason"`
	Severity           *string `pulumi:"severity"`
	Status             string  `pulumi:"status"`
	Type               string  `pulumi:"type"`
}

// CamelSourceStatusConditionsInput is an input type that accepts CamelSourceStatusConditionsArgs and CamelSourceStatusConditionsOutput values.
// You can construct a concrete instance of `CamelSourceStatusConditionsInput` via:
//
//          CamelSourceStatusConditionsArgs{...}
type CamelSourceStatusConditionsInput interface {
	pulumi.Input

	ToCamelSourceStatusConditionsOutput() CamelSourceStatusConditionsOutput
	ToCamelSourceStatusConditionsOutputWithContext(context.Context) CamelSourceStatusConditionsOutput
}

type CamelSourceStatusConditionsArgs struct {
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	Message            pulumi.StringPtrInput `pulumi:"message"`
	Reason             pulumi.StringPtrInput `pulumi:"reason"`
	Severity           pulumi.StringPtrInput `pulumi:"severity"`
	Status             pulumi.StringInput    `pulumi:"status"`
	Type               pulumi.StringInput    `pulumi:"type"`
}

func (CamelSourceStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CamelSourceStatusConditions)(nil)).Elem()
}

func (i CamelSourceStatusConditionsArgs) ToCamelSourceStatusConditionsOutput() CamelSourceStatusConditionsOutput {
	return i.ToCamelSourceStatusConditionsOutputWithContext(context.Background())
}

func (i CamelSourceStatusConditionsArgs) ToCamelSourceStatusConditionsOutputWithContext(ctx context.Context) CamelSourceStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CamelSourceStatusConditionsOutput)
}

// CamelSourceStatusConditionsArrayInput is an input type that accepts CamelSourceStatusConditionsArray and CamelSourceStatusConditionsArrayOutput values.
// You can construct a concrete instance of `CamelSourceStatusConditionsArrayInput` via:
//
//          CamelSourceStatusConditionsArray{ CamelSourceStatusConditionsArgs{...} }
type CamelSourceStatusConditionsArrayInput interface {
	pulumi.Input

	ToCamelSourceStatusConditionsArrayOutput() CamelSourceStatusConditionsArrayOutput
	ToCamelSourceStatusConditionsArrayOutputWithContext(context.Context) CamelSourceStatusConditionsArrayOutput
}

type CamelSourceStatusConditionsArray []CamelSourceStatusConditionsInput

func (CamelSourceStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CamelSourceStatusConditions)(nil)).Elem()
}

func (i CamelSourceStatusConditionsArray) ToCamelSourceStatusConditionsArrayOutput() CamelSourceStatusConditionsArrayOutput {
	return i.ToCamelSourceStatusConditionsArrayOutputWithContext(context.Background())
}

func (i CamelSourceStatusConditionsArray) ToCamelSourceStatusConditionsArrayOutputWithContext(ctx context.Context) CamelSourceStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CamelSourceStatusConditionsArrayOutput)
}

type CamelSourceStatusConditionsOutput struct{ *pulumi.OutputState }

func (CamelSourceStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CamelSourceStatusConditions)(nil)).Elem()
}

func (o CamelSourceStatusConditionsOutput) ToCamelSourceStatusConditionsOutput() CamelSourceStatusConditionsOutput {
	return o
}

func (o CamelSourceStatusConditionsOutput) ToCamelSourceStatusConditionsOutputWithContext(ctx context.Context) CamelSourceStatusConditionsOutput {
	return o
}

func (o CamelSourceStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CamelSourceStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

func (o CamelSourceStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CamelSourceStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

func (o CamelSourceStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CamelSourceStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

func (o CamelSourceStatusConditionsOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CamelSourceStatusConditions) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

func (o CamelSourceStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v CamelSourceStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

func (o CamelSourceStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CamelSourceStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type CamelSourceStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (CamelSourceStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CamelSourceStatusConditions)(nil)).Elem()
}

func (o CamelSourceStatusConditionsArrayOutput) ToCamelSourceStatusConditionsArrayOutput() CamelSourceStatusConditionsArrayOutput {
	return o
}

func (o CamelSourceStatusConditionsArrayOutput) ToCamelSourceStatusConditionsArrayOutputWithContext(ctx context.Context) CamelSourceStatusConditionsArrayOutput {
	return o
}

func (o CamelSourceStatusConditionsArrayOutput) Index(i pulumi.IntInput) CamelSourceStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CamelSourceStatusConditions {
		return vs[0].([]CamelSourceStatusConditions)[vs[1].(int)]
	}).(CamelSourceStatusConditionsOutput)
}

func init() {
	pulumi.RegisterOutputType(CamelSourceTypeOutput{})
	pulumi.RegisterOutputType(CamelSourceMetadataOutput{})
	pulumi.RegisterOutputType(CamelSourceSpecOutput{})
	pulumi.RegisterOutputType(CamelSourceSpecPtrOutput{})
	pulumi.RegisterOutputType(CamelSourceSpecCeOverridesOutput{})
	pulumi.RegisterOutputType(CamelSourceSpecSinkOutput{})
	pulumi.RegisterOutputType(CamelSourceSpecSourceOutput{})
	pulumi.RegisterOutputType(CamelSourceSpecSourcePtrOutput{})
	pulumi.RegisterOutputType(CamelSourceSpecSourceFlowOutput{})
	pulumi.RegisterOutputType(CamelSourceSpecSourceIntegrationOutput{})
	pulumi.RegisterOutputType(CamelSourceStatusOutput{})
	pulumi.RegisterOutputType(CamelSourceStatusPtrOutput{})
	pulumi.RegisterOutputType(CamelSourceStatusConditionsOutput{})
	pulumi.RegisterOutputType(CamelSourceStatusConditionsArrayOutput{})
}

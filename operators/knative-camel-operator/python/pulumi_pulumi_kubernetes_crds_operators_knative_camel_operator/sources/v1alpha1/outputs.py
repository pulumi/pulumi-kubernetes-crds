# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'CamelSourceSpec',
    'CamelSourceSpecSource',
    'CamelSourceStatus',
    'CamelSourceStatusConditions',
]

@pulumi.output_type
class CamelSourceSpec(dict):
    def __init__(__self__, *,
                 source: 'outputs.CamelSourceSpecSource',
                 ce_overrides: Optional[Mapping[str, Any]] = None,
                 sink: Optional[Mapping[str, Any]] = None):
        """
        :param Mapping[str, Any] ce_overrides: Defines overrides to control modifications of the event sent to the sink.
        :param Mapping[str, Any] sink: Reference to an object that will resolve to a domain name to use as the sink.
        """
        pulumi.set(__self__, "source", source)
        if ce_overrides is not None:
            pulumi.set(__self__, "ce_overrides", ce_overrides)
        if sink is not None:
            pulumi.set(__self__, "sink", sink)

    @property
    @pulumi.getter
    def source(self) -> 'outputs.CamelSourceSpecSource':
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="ceOverrides")
    def ce_overrides(self) -> Optional[Mapping[str, Any]]:
        """
        Defines overrides to control modifications of the event sent to the sink.
        """
        return pulumi.get(self, "ce_overrides")

    @property
    @pulumi.getter
    def sink(self) -> Optional[Mapping[str, Any]]:
        """
        Reference to an object that will resolve to a domain name to use as the sink.
        """
        return pulumi.get(self, "sink")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CamelSourceSpecSource(dict):
    def __init__(__self__, *,
                 flow: Optional[Mapping[str, Any]] = None,
                 integration: Optional[Mapping[str, Any]] = None):
        if flow is not None:
            pulumi.set(__self__, "flow", flow)
        if integration is not None:
            pulumi.set(__self__, "integration", integration)

    @property
    @pulumi.getter
    def flow(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "flow")

    @property
    @pulumi.getter
    def integration(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "integration")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CamelSourceStatus(dict):
    def __init__(__self__, *,
                 conditions: Optional[Sequence['outputs.CamelSourceStatusConditions']] = None,
                 sink_uri: Optional[str] = None):
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if sink_uri is not None:
            pulumi.set(__self__, "sink_uri", sink_uri)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.CamelSourceStatusConditions']]:
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="sinkUri")
    def sink_uri(self) -> Optional[str]:
        return pulumi.get(self, "sink_uri")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class CamelSourceStatusConditions(dict):
    def __init__(__self__, *,
                 status: str,
                 type: str,
                 last_transition_time: Optional[str] = None,
                 message: Optional[str] = None,
                 reason: Optional[str] = None,
                 severity: Optional[str] = None):
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[str]:
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



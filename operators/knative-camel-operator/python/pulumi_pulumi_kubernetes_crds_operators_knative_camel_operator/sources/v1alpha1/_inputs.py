# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'CamelSourceSpecArgs',
    'CamelSourceSpecSourceArgs',
    'CamelSourceStatusArgs',
    'CamelSourceStatusConditionsArgs',
]

@pulumi.input_type
class CamelSourceSpecArgs:
    def __init__(__self__, *,
                 source: pulumi.Input['CamelSourceSpecSourceArgs'],
                 ce_overrides: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 sink: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] ce_overrides: Defines overrides to control modifications of the event sent to the sink.
        :param pulumi.Input[Mapping[str, Any]] sink: Reference to an object that will resolve to a domain name to use as the sink.
        """
        pulumi.set(__self__, "source", source)
        if ce_overrides is not None:
            pulumi.set(__self__, "ce_overrides", ce_overrides)
        if sink is not None:
            pulumi.set(__self__, "sink", sink)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input['CamelSourceSpecSourceArgs']:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input['CamelSourceSpecSourceArgs']):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="ceOverrides")
    def ce_overrides(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Defines overrides to control modifications of the event sent to the sink.
        """
        return pulumi.get(self, "ce_overrides")

    @ce_overrides.setter
    def ce_overrides(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "ce_overrides", value)

    @property
    @pulumi.getter
    def sink(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Reference to an object that will resolve to a domain name to use as the sink.
        """
        return pulumi.get(self, "sink")

    @sink.setter
    def sink(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "sink", value)


@pulumi.input_type
class CamelSourceSpecSourceArgs:
    def __init__(__self__, *,
                 flow: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 integration: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        if flow is not None:
            pulumi.set(__self__, "flow", flow)
        if integration is not None:
            pulumi.set(__self__, "integration", integration)

    @property
    @pulumi.getter
    def flow(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "flow")

    @flow.setter
    def flow(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "flow", value)

    @property
    @pulumi.getter
    def integration(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "integration")

    @integration.setter
    def integration(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "integration", value)


@pulumi.input_type
class CamelSourceStatusArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['CamelSourceStatusConditionsArgs']]]] = None,
                 sink_uri: Optional[pulumi.Input[str]] = None):
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if sink_uri is not None:
            pulumi.set(__self__, "sink_uri", sink_uri)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CamelSourceStatusConditionsArgs']]]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CamelSourceStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="sinkUri")
    def sink_uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sink_uri")

    @sink_uri.setter
    def sink_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sink_uri", value)


@pulumi.input_type
class CamelSourceStatusConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)



// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// NSM is the Schema for the nsms API
type NSM struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// NSMSpec defines the desired state of NSM
	Spec NSMSpecPtrOutput `pulumi:"spec"`
	// NSMStatus defines the observed state of NSM
	Status NSMStatusPtrOutput `pulumi:"status"`
}

// NewNSM registers a new resource with the given unique name, arguments, and options.
func NewNSM(ctx *pulumi.Context,
	name string, args *NSMArgs, opts ...pulumi.ResourceOption) (*NSM, error) {
	if args == nil {
		args = &NSMArgs{}
	}
	args.ApiVersion = pulumi.StringPtr("nsm.networkservicemesh.io/v1alpha1")
	args.Kind = pulumi.StringPtr("NSM")
	var resource NSM
	err := ctx.RegisterResource("kubernetes:nsm.networkservicemesh.io/v1alpha1:NSM", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNSM gets an existing NSM resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNSM(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NSMState, opts ...pulumi.ResourceOption) (*NSM, error) {
	var resource NSM
	err := ctx.ReadResource("kubernetes:nsm.networkservicemesh.io/v1alpha1:NSM", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NSM resources.
type nsmState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// NSMSpec defines the desired state of NSM
	Spec *NSMSpec `pulumi:"spec"`
	// NSMStatus defines the observed state of NSM
	Status *NSMStatus `pulumi:"status"`
}

type NSMState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// NSMSpec defines the desired state of NSM
	Spec NSMSpecPtrInput
	// NSMStatus defines the observed state of NSM
	Status NSMStatusPtrInput
}

func (NSMState) ElementType() reflect.Type {
	return reflect.TypeOf((*nsmState)(nil)).Elem()
}

type nsmArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// NSMSpec defines the desired state of NSM
	Spec *NSMSpec `pulumi:"spec"`
	// NSMStatus defines the observed state of NSM
	Status *NSMStatus `pulumi:"status"`
}

// The set of arguments for constructing a NSM resource.
type NSMArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// NSMSpec defines the desired state of NSM
	Spec NSMSpecPtrInput
	// NSMStatus defines the observed state of NSM
	Status NSMStatusPtrInput
}

func (NSMArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nsmArgs)(nil)).Elem()
}

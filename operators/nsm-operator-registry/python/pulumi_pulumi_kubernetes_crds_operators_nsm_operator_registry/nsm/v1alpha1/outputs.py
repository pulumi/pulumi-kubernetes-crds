# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'NSMSpec',
    'NSMStatus',
]

@pulumi.output_type
class NSMSpec(dict):
    """
    NSMSpec defines the desired state of NSM
    """
    def __init__(__self__, *,
                 forwarding_plane_image: str,
                 forwarding_plane_name: str,
                 insecure: bool,
                 version: str):
        """
        NSMSpec defines the desired state of NSM
        :param str forwarding_plane_name: Forwarding plane configs
        :param bool insecure: nsmgr configs true or false
        :param str version: Version field for reference on Openshift UI
        """
        pulumi.set(__self__, "forwarding_plane_image", forwarding_plane_image)
        pulumi.set(__self__, "forwarding_plane_name", forwarding_plane_name)
        pulumi.set(__self__, "insecure", insecure)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="forwardingPlaneImage")
    def forwarding_plane_image(self) -> str:
        return pulumi.get(self, "forwarding_plane_image")

    @property
    @pulumi.getter(name="forwardingPlaneName")
    def forwarding_plane_name(self) -> str:
        """
        Forwarding plane configs
        """
        return pulumi.get(self, "forwarding_plane_name")

    @property
    @pulumi.getter
    def insecure(self) -> bool:
        """
        nsmgr configs true or false
        """
        return pulumi.get(self, "insecure")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Version field for reference on Openshift UI
        """
        return pulumi.get(self, "version")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class NSMStatus(dict):
    """
    NSMStatus defines the observed state of NSM
    """
    def __init__(__self__, *,
                 phase: str):
        """
        NSMStatus defines the observed state of NSM
        :param str phase: Operator phases during deployment
        """
        pulumi.set(__self__, "phase", phase)

    @property
    @pulumi.getter
    def phase(self) -> str:
        """
        Operator phases during deployment
        """
        return pulumi.get(self, "phase")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop



// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ScheduledSparkApplicationType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	Spec       interface{}        `pulumi:"spec"`
}

// ScheduledSparkApplicationTypeInput is an input type that accepts ScheduledSparkApplicationTypeArgs and ScheduledSparkApplicationTypeOutput values.
// You can construct a concrete instance of `ScheduledSparkApplicationTypeInput` via:
//
//          ScheduledSparkApplicationTypeArgs{...}
type ScheduledSparkApplicationTypeInput interface {
	pulumi.Input

	ToScheduledSparkApplicationTypeOutput() ScheduledSparkApplicationTypeOutput
	ToScheduledSparkApplicationTypeOutputWithContext(context.Context) ScheduledSparkApplicationTypeOutput
}

type ScheduledSparkApplicationTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Spec       pulumi.Input              `pulumi:"spec"`
}

func (ScheduledSparkApplicationTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledSparkApplicationType)(nil)).Elem()
}

func (i ScheduledSparkApplicationTypeArgs) ToScheduledSparkApplicationTypeOutput() ScheduledSparkApplicationTypeOutput {
	return i.ToScheduledSparkApplicationTypeOutputWithContext(context.Background())
}

func (i ScheduledSparkApplicationTypeArgs) ToScheduledSparkApplicationTypeOutputWithContext(ctx context.Context) ScheduledSparkApplicationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledSparkApplicationTypeOutput)
}

type ScheduledSparkApplicationTypeOutput struct{ *pulumi.OutputState }

func (ScheduledSparkApplicationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledSparkApplicationType)(nil)).Elem()
}

func (o ScheduledSparkApplicationTypeOutput) ToScheduledSparkApplicationTypeOutput() ScheduledSparkApplicationTypeOutput {
	return o
}

func (o ScheduledSparkApplicationTypeOutput) ToScheduledSparkApplicationTypeOutputWithContext(ctx context.Context) ScheduledSparkApplicationTypeOutput {
	return o
}

func (o ScheduledSparkApplicationTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduledSparkApplicationType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o ScheduledSparkApplicationTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduledSparkApplicationType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o ScheduledSparkApplicationTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ScheduledSparkApplicationType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o ScheduledSparkApplicationTypeOutput) Spec() pulumi.AnyOutput {
	return o.ApplyT(func(v ScheduledSparkApplicationType) interface{} { return v.Spec }).(pulumi.AnyOutput)
}

type SparkApplicationType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	Spec       interface{}        `pulumi:"spec"`
}

// SparkApplicationTypeInput is an input type that accepts SparkApplicationTypeArgs and SparkApplicationTypeOutput values.
// You can construct a concrete instance of `SparkApplicationTypeInput` via:
//
//          SparkApplicationTypeArgs{...}
type SparkApplicationTypeInput interface {
	pulumi.Input

	ToSparkApplicationTypeOutput() SparkApplicationTypeOutput
	ToSparkApplicationTypeOutputWithContext(context.Context) SparkApplicationTypeOutput
}

type SparkApplicationTypeArgs struct {
	ApiVersion pulumi.StringPtrInput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrInput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Spec       pulumi.Input              `pulumi:"spec"`
}

func (SparkApplicationTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkApplicationType)(nil)).Elem()
}

func (i SparkApplicationTypeArgs) ToSparkApplicationTypeOutput() SparkApplicationTypeOutput {
	return i.ToSparkApplicationTypeOutputWithContext(context.Background())
}

func (i SparkApplicationTypeArgs) ToSparkApplicationTypeOutputWithContext(ctx context.Context) SparkApplicationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkApplicationTypeOutput)
}

type SparkApplicationTypeOutput struct{ *pulumi.OutputState }

func (SparkApplicationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkApplicationType)(nil)).Elem()
}

func (o SparkApplicationTypeOutput) ToSparkApplicationTypeOutput() SparkApplicationTypeOutput {
	return o
}

func (o SparkApplicationTypeOutput) ToSparkApplicationTypeOutputWithContext(ctx context.Context) SparkApplicationTypeOutput {
	return o
}

func (o SparkApplicationTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkApplicationType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o SparkApplicationTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkApplicationType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o SparkApplicationTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v SparkApplicationType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o SparkApplicationTypeOutput) Spec() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkApplicationType) interface{} { return v.Spec }).(pulumi.AnyOutput)
}

func init() {
	pulumi.RegisterOutputType(ScheduledSparkApplicationTypeOutput{})
	pulumi.RegisterOutputType(SparkApplicationTypeOutput{})
}
